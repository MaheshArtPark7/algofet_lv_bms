
AlgoFetBms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a110  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  0800a2e0  0800a2e0  0001a2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5e4  0800a5e4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5e4  0800a5e4  0001a5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5ec  0800a5ec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5ec  0800a5ec  0001a5ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5f0  0800a5f0  0001a5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a5f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000101ec  20000074  0800a668  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20010260  0800a668  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fcb2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f47  00000000  00000000  0003fd56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a90  00000000  00000000  00044ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001840  00000000  00000000  00046730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d60  00000000  00000000  00047f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026d98  00000000  00000000  00070cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0dcb  00000000  00000000  00097a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00188833  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e74  00000000  00000000  00188884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a2c8 	.word	0x0800a2c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800a2c8 	.word	0x0800a2c8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <bq76952_sub_cmd_access>:
static int16_t bq76952_settings_reg12_cfg(void);

//------------------------------------------------------------------------------
// Static Functions definition
static int16_t bq76952_sub_cmd_access(uint16_t sub_cmd, uint8_t read_write, uint8_t data_len, uint32_t* p_data)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af02      	add	r7, sp, #8
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	4603      	mov	r3, r0
 800051e:	80fb      	strh	r3, [r7, #6]
 8000520:	460b      	mov	r3, r1
 8000522:	717b      	strb	r3, [r7, #5]
 8000524:	4613      	mov	r3, r2
 8000526:	713b      	strb	r3, [r7, #4]
    int16_t ret_val = SYS_ERR;
 8000528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800052c:	82fb      	strh	r3, [r7, #22]
	do
	{
		if(data_len == 0)
 800052e:	793b      	ldrb	r3, [r7, #4]
 8000530:	2b00      	cmp	r3, #0
 8000532:	f000 80a0 	beq.w	8000676 <bq76952_sub_cmd_access+0x162>
		{
			break;
		}
		if((data_len != SUB_CMD_LEN) && (p_data == NULL))
 8000536:	793b      	ldrb	r3, [r7, #4]
 8000538:	2b02      	cmp	r3, #2
 800053a:	d003      	beq.n	8000544 <bq76952_sub_cmd_access+0x30>
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	f000 809b 	beq.w	800067a <bq76952_sub_cmd_access+0x166>
		{
			break;
		}
		uint8_t pTxData[3] = {0};
 8000544:	4b50      	ldr	r3, [pc, #320]	; (8000688 <bq76952_sub_cmd_access+0x174>)
 8000546:	881b      	ldrh	r3, [r3, #0]
 8000548:	823b      	strh	r3, [r7, #16]
 800054a:	2300      	movs	r3, #0
 800054c:	74bb      	strb	r3, [r7, #18]
		uint8_t pRxData[3] = {0};
 800054e:	4b4e      	ldr	r3, [pc, #312]	; (8000688 <bq76952_sub_cmd_access+0x174>)
 8000550:	881b      	ldrh	r3, [r3, #0]
 8000552:	81bb      	strh	r3, [r7, #12]
 8000554:	2300      	movs	r3, #0
 8000556:	73bb      	strb	r3, [r7, #14]

		pTxData[0] = 0xBE; // Constant
 8000558:	23be      	movs	r3, #190	; 0xbe
 800055a:	743b      	strb	r3, [r7, #16]
		pTxData[1] = (uint8_t)sub_cmd;
 800055c:	88fb      	ldrh	r3, [r7, #6]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	747b      	strb	r3, [r7, #17]
		pTxData[2] = 0x9E;
 8000562:	239e      	movs	r3, #158	; 0x9e
 8000564:	74bb      	strb	r3, [r7, #18]
		while(pRxData[0] != pTxData[0])
 8000566:	e016      	b.n	8000596 <bq76952_sub_cmd_access+0x82>
		{
		    HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);
 8000568:	2200      	movs	r2, #0
 800056a:	2110      	movs	r1, #16
 800056c:	4847      	ldr	r0, [pc, #284]	; (800068c <bq76952_sub_cmd_access+0x178>)
 800056e:	f003 faff 	bl	8003b70 <HAL_GPIO_WritePin>
		    HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, 3, SPI_WR_TIMEOUT_MS);
 8000572:	f107 020c 	add.w	r2, r7, #12
 8000576:	f107 0110 	add.w	r1, r7, #16
 800057a:	230a      	movs	r3, #10
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2303      	movs	r3, #3
 8000580:	4843      	ldr	r0, [pc, #268]	; (8000690 <bq76952_sub_cmd_access+0x17c>)
 8000582:	f007 f9cd 	bl	8007920 <HAL_SPI_TransmitReceive>
		    HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);
 8000586:	2201      	movs	r2, #1
 8000588:	2110      	movs	r1, #16
 800058a:	4840      	ldr	r0, [pc, #256]	; (800068c <bq76952_sub_cmd_access+0x178>)
 800058c:	f003 faf0 	bl	8003b70 <HAL_GPIO_WritePin>
		    HAL_Delay(10);
 8000590:	200a      	movs	r0, #10
 8000592:	f001 f96f 	bl	8001874 <HAL_Delay>
		while(pRxData[0] != pTxData[0])
 8000596:	7b3a      	ldrb	r2, [r7, #12]
 8000598:	7c3b      	ldrb	r3, [r7, #16]
 800059a:	429a      	cmp	r2, r3
 800059c:	d1e4      	bne.n	8000568 <bq76952_sub_cmd_access+0x54>
		}

		pTxData[0] = 0xBF; // Constant
 800059e:	23bf      	movs	r3, #191	; 0xbf
 80005a0:	743b      	strb	r3, [r7, #16]
		pTxData[1] = (uint8_t)sub_cmd >> 8;
 80005a2:	88fb      	ldrh	r3, [r7, #6]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	121b      	asrs	r3, r3, #8
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	747b      	strb	r3, [r7, #17]
		pTxData[2] = 0x8C;
 80005ac:	238c      	movs	r3, #140	; 0x8c
 80005ae:	74bb      	strb	r3, [r7, #18]
		while(pRxData[0] != pTxData[0])
 80005b0:	e016      	b.n	80005e0 <bq76952_sub_cmd_access+0xcc>
		{
		    HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2110      	movs	r1, #16
 80005b6:	4835      	ldr	r0, [pc, #212]	; (800068c <bq76952_sub_cmd_access+0x178>)
 80005b8:	f003 fada 	bl	8003b70 <HAL_GPIO_WritePin>
		    HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, 3, SPI_WR_TIMEOUT_MS);
 80005bc:	f107 020c 	add.w	r2, r7, #12
 80005c0:	f107 0110 	add.w	r1, r7, #16
 80005c4:	230a      	movs	r3, #10
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2303      	movs	r3, #3
 80005ca:	4831      	ldr	r0, [pc, #196]	; (8000690 <bq76952_sub_cmd_access+0x17c>)
 80005cc:	f007 f9a8 	bl	8007920 <HAL_SPI_TransmitReceive>
		    HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2110      	movs	r1, #16
 80005d4:	482d      	ldr	r0, [pc, #180]	; (800068c <bq76952_sub_cmd_access+0x178>)
 80005d6:	f003 facb 	bl	8003b70 <HAL_GPIO_WritePin>
		    HAL_Delay(10);
 80005da:	200a      	movs	r0, #10
 80005dc:	f001 f94a 	bl	8001874 <HAL_Delay>
		while(pRxData[0] != pTxData[0])
 80005e0:	7b3a      	ldrb	r2, [r7, #12]
 80005e2:	7c3b      	ldrb	r3, [r7, #16]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d1e4      	bne.n	80005b2 <bq76952_sub_cmd_access+0x9e>
		}

		pTxData[0] = 0x40; // constant
 80005e8:	2340      	movs	r3, #64	; 0x40
 80005ea:	743b      	strb	r3, [r7, #16]
		pTxData[1] = 0xFF;
 80005ec:	23ff      	movs	r3, #255	; 0xff
 80005ee:	747b      	strb	r3, [r7, #17]
		pTxData[2] = 0xA8;
 80005f0:	23a8      	movs	r3, #168	; 0xa8
 80005f2:	74bb      	strb	r3, [r7, #18]
		while(pRxData[0] != pTxData[0])
 80005f4:	e016      	b.n	8000624 <bq76952_sub_cmd_access+0x110>
		{
		    HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2110      	movs	r1, #16
 80005fa:	4824      	ldr	r0, [pc, #144]	; (800068c <bq76952_sub_cmd_access+0x178>)
 80005fc:	f003 fab8 	bl	8003b70 <HAL_GPIO_WritePin>
		    HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, 3, SPI_WR_TIMEOUT_MS);
 8000600:	f107 020c 	add.w	r2, r7, #12
 8000604:	f107 0110 	add.w	r1, r7, #16
 8000608:	230a      	movs	r3, #10
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	2303      	movs	r3, #3
 800060e:	4820      	ldr	r0, [pc, #128]	; (8000690 <bq76952_sub_cmd_access+0x17c>)
 8000610:	f007 f986 	bl	8007920 <HAL_SPI_TransmitReceive>
		    HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);
 8000614:	2201      	movs	r2, #1
 8000616:	2110      	movs	r1, #16
 8000618:	481c      	ldr	r0, [pc, #112]	; (800068c <bq76952_sub_cmd_access+0x178>)
 800061a:	f003 faa9 	bl	8003b70 <HAL_GPIO_WritePin>
		    HAL_Delay(10);
 800061e:	200a      	movs	r0, #10
 8000620:	f001 f928 	bl	8001874 <HAL_Delay>
		while(pRxData[0] != pTxData[0])
 8000624:	7b3a      	ldrb	r2, [r7, #12]
 8000626:	7c3b      	ldrb	r3, [r7, #16]
 8000628:	429a      	cmp	r2, r3
 800062a:	d1e4      	bne.n	80005f6 <bq76952_sub_cmd_access+0xe2>
		}

		pTxData[0] = 0x41; // constant
 800062c:	2341      	movs	r3, #65	; 0x41
 800062e:	743b      	strb	r3, [r7, #16]
		pTxData[1] = 0xFF;
 8000630:	23ff      	movs	r3, #255	; 0xff
 8000632:	747b      	strb	r3, [r7, #17]
		pTxData[2] = 0xBD;
 8000634:	23bd      	movs	r3, #189	; 0xbd
 8000636:	74bb      	strb	r3, [r7, #18]
		while(pRxData[0] != pTxData[0])
 8000638:	e016      	b.n	8000668 <bq76952_sub_cmd_access+0x154>
		{
		    HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2110      	movs	r1, #16
 800063e:	4813      	ldr	r0, [pc, #76]	; (800068c <bq76952_sub_cmd_access+0x178>)
 8000640:	f003 fa96 	bl	8003b70 <HAL_GPIO_WritePin>
		    HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, 3, SPI_WR_TIMEOUT_MS);
 8000644:	f107 020c 	add.w	r2, r7, #12
 8000648:	f107 0110 	add.w	r1, r7, #16
 800064c:	230a      	movs	r3, #10
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2303      	movs	r3, #3
 8000652:	480f      	ldr	r0, [pc, #60]	; (8000690 <bq76952_sub_cmd_access+0x17c>)
 8000654:	f007 f964 	bl	8007920 <HAL_SPI_TransmitReceive>
		    HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	2110      	movs	r1, #16
 800065c:	480b      	ldr	r0, [pc, #44]	; (800068c <bq76952_sub_cmd_access+0x178>)
 800065e:	f003 fa87 	bl	8003b70 <HAL_GPIO_WritePin>
		    HAL_Delay(10);
 8000662:	200a      	movs	r0, #10
 8000664:	f001 f906 	bl	8001874 <HAL_Delay>
		while(pRxData[0] != pTxData[0])
 8000668:	7b3a      	ldrb	r2, [r7, #12]
 800066a:	7c3b      	ldrb	r3, [r7, #16]
 800066c:	429a      	cmp	r2, r3
 800066e:	d1e4      	bne.n	800063a <bq76952_sub_cmd_access+0x126>
//		case SPI_WR_BLOCKING:
//		    HAL_SPI_Transmit(&hspi1, (uint8_t*)&sub_cmd, data_len, SPI_WR_TIMEOUT_MS);
//		default:
//		    break;
//		}
		ret_val = SYS_OK;
 8000670:	2300      	movs	r3, #0
 8000672:	82fb      	strh	r3, [r7, #22]
 8000674:	e002      	b.n	800067c <bq76952_sub_cmd_access+0x168>
			break;
 8000676:	bf00      	nop
 8000678:	e000      	b.n	800067c <bq76952_sub_cmd_access+0x168>
			break;
 800067a:	bf00      	nop
	}while(false);

	return ret_val;
 800067c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3718      	adds	r7, #24
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	0800a2e0 	.word	0x0800a2e0
 800068c:	40020800 	.word	0x40020800
 8000690:	2000055c 	.word	0x2000055c

08000694 <bq76952_init>:

int16_t bq76952_init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
    int16_t ret_val = SYS_ERR;
 800069a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800069e:	80fb      	strh	r3, [r7, #6]
    do
    {
        bq76952_get_device_number();
 80006a0:	f000 f808 	bl	80006b4 <bq76952_get_device_number>
//        bq76952_set_config_update();
        // TODO: Check if CFGUPDATE bit is SET
//        bq76952_settings_pwr_cfg();

        ret_val = SYS_OK;
 80006a4:	2300      	movs	r3, #0
 80006a6:	80fb      	strh	r3, [r7, #6]
    }while(false);

    return ret_val;
 80006a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <bq76952_get_device_number>:

static int16_t bq76952_get_device_number(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
    int16_t ret_val = SYS_ERR;
 80006ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006be:	80fb      	strh	r3, [r7, #6]
    bq76952_sub_cmd_access(DEVICE_NUMBER, SPI_WR_BLOCKING, SUB_CMD_LEN, NULL);
 80006c0:	2300      	movs	r3, #0
 80006c2:	2202      	movs	r2, #2
 80006c4:	2103      	movs	r1, #3
 80006c6:	2001      	movs	r0, #1
 80006c8:	f7ff ff24 	bl	8000514 <bq76952_sub_cmd_access>
    ret_val = SYS_OK;
 80006cc:	2300      	movs	r3, #0
 80006ce:	80fb      	strh	r3, [r7, #6]
    return ret_val;
 80006d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]

}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <app_afe_init>:
#include "app_afe.h"
#include "app_defines.h"
#include "bq76952.h"

int16_t app_afe_init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 80006e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006e6:	80fb      	strh	r3, [r7, #6]
	do
	{
	    bq76952_init();
 80006e8:	f7ff ffd4 	bl	8000694 <bq76952_init>
		ret_val = SYS_OK;
 80006ec:	2300      	movs	r3, #0
 80006ee:	80fb      	strh	r3, [r7, #6]
	}while(false);

	return ret_val;
 80006f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <byte_map>:

static int16_t app_gauge_burst_read(TsDataBlockConfig_t *pDataBlockCfg);
static int16_t app_gauge_map_read_data(uint8_t *pBuff, uint8_t blockIdx);

static inline uint16_t byte_map(uint8_t lsb, uint8_t msb)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	460a      	mov	r2, r1
 8000706:	71fb      	strb	r3, [r7, #7]
 8000708:	4613      	mov	r3, r2
 800070a:	71bb      	strb	r3, [r7, #6]
	return (msb << 8 | lsb);
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21a      	sxth	r2, r3
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	b21b      	sxth	r3, r3
 8000716:	4313      	orrs	r3, r2
 8000718:	b21b      	sxth	r3, r3
 800071a:	b29b      	uxth	r3, r3
}
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <app_gauge_burst_read>:

static int16_t app_gauge_burst_read(TsDataBlockConfig_t *pDataBlockCfg)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af02      	add	r7, sp, #8
 800072e:	6078      	str	r0, [r7, #4]
	int16_t ret_val = SYS_ERR;
 8000730:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000734:	81fb      	strh	r3, [r7, #14]
	do
	{
		if(NULL == pDataBlockCfg)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d020      	beq.n	800077e <app_gauge_burst_read+0x56>
		{
			break;
		}
		if (pDataBlockCfg->Len > BQ_RD_BUFFER_LEN)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	785b      	ldrb	r3, [r3, #1]
 8000740:	2b14      	cmp	r3, #20
 8000742:	d81e      	bhi.n	8000782 <app_gauge_burst_read+0x5a>
		{
			break;
		}
		if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, BQ_WR_ADDR, &pDataBlockCfg->Addr, sizeof(pDataBlockCfg->Addr), 500))
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	2301      	movs	r3, #1
 800074e:	21aa      	movs	r1, #170	; 0xaa
 8000750:	4811      	ldr	r0, [pc, #68]	; (8000798 <app_gauge_burst_read+0x70>)
 8000752:	f003 fc0b 	bl	8003f6c <HAL_I2C_Master_Transmit>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d114      	bne.n	8000786 <app_gauge_burst_read+0x5e>
		{
			break;
		}

		/* Master request Slave for data */
		if (HAL_OK != HAL_I2C_Master_Receive (&hi2c1, BQ_RD_ADDR, gauge_read_buffer, pDataBlockCfg->Len, 500))
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	785b      	ldrb	r3, [r3, #1]
 8000760:	b29b      	uxth	r3, r3
 8000762:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000766:	9200      	str	r2, [sp, #0]
 8000768:	4a0c      	ldr	r2, [pc, #48]	; (800079c <app_gauge_burst_read+0x74>)
 800076a:	21ab      	movs	r1, #171	; 0xab
 800076c:	480a      	ldr	r0, [pc, #40]	; (8000798 <app_gauge_burst_read+0x70>)
 800076e:	f003 fcfb 	bl	8004168 <HAL_I2C_Master_Receive>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d108      	bne.n	800078a <app_gauge_burst_read+0x62>
		{
			break;
		}

		ret_val = SYS_OK;
 8000778:	2300      	movs	r3, #0
 800077a:	81fb      	strh	r3, [r7, #14]
 800077c:	e006      	b.n	800078c <app_gauge_burst_read+0x64>
			break;
 800077e:	bf00      	nop
 8000780:	e004      	b.n	800078c <app_gauge_burst_read+0x64>
			break;
 8000782:	bf00      	nop
 8000784:	e002      	b.n	800078c <app_gauge_burst_read+0x64>
			break;
 8000786:	bf00      	nop
 8000788:	e000      	b.n	800078c <app_gauge_burst_read+0x64>
			break;
 800078a:	bf00      	nop

	}while(false);

	return ret_val;
 800078c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000448 	.word	0x20000448
 800079c:	200000c8 	.word	0x200000c8

080007a0 <app_gauge_map_read_data>:

static int16_t app_gauge_map_read_data(uint8_t *pBuff, uint8_t blockIdx)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
	int16_t ret_val = SYS_ERR;
 80007ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b0:	81fb      	strh	r3, [r7, #14]
	do
	{
		if(NULL == pBuff)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d069      	beq.n	800088c <app_gauge_map_read_data+0xec>
		{
			break;
		}
		if(blockIdx > BQ_NUM_BURST_RD_BLOCKS)
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	d868      	bhi.n	8000890 <app_gauge_map_read_data+0xf0>
		{
			break;
		}
		switch(blockIdx)
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d15f      	bne.n	8000884 <app_gauge_map_read_data+0xe4>
		{
		case eAlgoFet_BLOCK0:
			BQ34_GaugeInfo.StateOfCharge = pBuff[0];
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	781a      	ldrb	r2, [r3, #0]
 80007c8:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <app_gauge_map_read_data+0x100>)
 80007ca:	709a      	strb	r2, [r3, #2]
			BQ34_GaugeInfo.vStack = byte_map(pBuff[6], pBuff[7]);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3306      	adds	r3, #6
 80007d0:	781a      	ldrb	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3307      	adds	r3, #7
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	4610      	mov	r0, r2
 80007dc:	f7ff ff8e 	bl	80006fc <byte_map>
 80007e0:	4603      	mov	r3, r0
 80007e2:	461a      	mov	r2, r3
 80007e4:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <app_gauge_map_read_data+0x100>)
 80007e6:	811a      	strh	r2, [r3, #8]
			BQ34_GaugeInfo.Current = byte_map(pBuff[14], pBuff[15]);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	330e      	adds	r3, #14
 80007ec:	781a      	ldrb	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	330f      	adds	r3, #15
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4619      	mov	r1, r3
 80007f6:	4610      	mov	r0, r2
 80007f8:	f7ff ff80 	bl	80006fc <byte_map>
 80007fc:	4603      	mov	r3, r0
 80007fe:	461a      	mov	r2, r3
 8000800:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <app_gauge_map_read_data+0x100>)
 8000802:	821a      	strh	r2, [r3, #16]
			BQ34_GaugeInfo.Temperature = byte_map(pBuff[10], pBuff[11]);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	330a      	adds	r3, #10
 8000808:	781a      	ldrb	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	330b      	adds	r3, #11
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4619      	mov	r1, r3
 8000812:	4610      	mov	r0, r2
 8000814:	f7ff ff72 	bl	80006fc <byte_map>
 8000818:	4603      	mov	r3, r0
 800081a:	461a      	mov	r2, r3
 800081c:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <app_gauge_map_read_data+0x100>)
 800081e:	819a      	strh	r2, [r3, #12]

			App_GaugeData.SoC = BQ34_GaugeInfo.StateOfCharge;
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <app_gauge_map_read_data+0x100>)
 8000822:	789b      	ldrb	r3, [r3, #2]
 8000824:	461a      	mov	r2, r3
 8000826:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <app_gauge_map_read_data+0x104>)
 8000828:	601a      	str	r2, [r3, #0]
			App_GaugeData.vStack = (float)BQ34_GaugeInfo.vStack/1000;
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <app_gauge_map_read_data+0x100>)
 800082c:	891b      	ldrh	r3, [r3, #8]
 800082e:	ee07 3a90 	vmov	s15, r3
 8000832:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000836:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80008a8 <app_gauge_map_read_data+0x108>
 800083a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <app_gauge_map_read_data+0x104>)
 8000840:	edc3 7a03 	vstr	s15, [r3, #12]
			App_GaugeData.BatTemp = (float)(BQ34_GaugeInfo.Temperature / 10) - 273.15f;
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <app_gauge_map_read_data+0x100>)
 8000846:	899b      	ldrh	r3, [r3, #12]
 8000848:	4a18      	ldr	r2, [pc, #96]	; (80008ac <app_gauge_map_read_data+0x10c>)
 800084a:	fba2 2303 	umull	r2, r3, r2, r3
 800084e:	08db      	lsrs	r3, r3, #3
 8000850:	b29b      	uxth	r3, r3
 8000852:	ee07 3a90 	vmov	s15, r3
 8000856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800085a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80008b0 <app_gauge_map_read_data+0x110>
 800085e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <app_gauge_map_read_data+0x104>)
 8000864:	edc3 7a05 	vstr	s15, [r3, #20]
			App_GaugeData.InstCurrent = (float)BQ34_GaugeInfo.Current/1000;
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <app_gauge_map_read_data+0x100>)
 800086a:	8a1b      	ldrh	r3, [r3, #16]
 800086c:	ee07 3a90 	vmov	s15, r3
 8000870:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000874:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80008a8 <app_gauge_map_read_data+0x108>
 8000878:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <app_gauge_map_read_data+0x104>)
 800087e:	edc3 7a06 	vstr	s15, [r3, #24]
			break;
 8000882:	e000      	b.n	8000886 <app_gauge_map_read_data+0xe6>
		default:
			break;
 8000884:	bf00      	nop
		}

		ret_val = SYS_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	81fb      	strh	r3, [r7, #14]
 800088a:	e002      	b.n	8000892 <app_gauge_map_read_data+0xf2>
			break;
 800088c:	bf00      	nop
 800088e:	e000      	b.n	8000892 <app_gauge_map_read_data+0xf2>
			break;
 8000890:	bf00      	nop
	}while(false);

	return ret_val;
 8000892:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000090 	.word	0x20000090
 80008a4:	200000a4 	.word	0x200000a4
 80008a8:	447a0000 	.word	0x447a0000
 80008ac:	cccccccd 	.word	0xcccccccd
 80008b0:	43889333 	.word	0x43889333

080008b4 <app_gauge_init>:

int16_t app_gauge_init(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
    int16_t ret_val = SYS_ERR;
 80008ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008be:	80fb      	strh	r3, [r7, #6]

    // Config block reads
    block_read_cfg[eAlgoFet_BLOCK0].Addr = 0x02u;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <app_gauge_init+0x2c>)
 80008c2:	2202      	movs	r2, #2
 80008c4:	701a      	strb	r2, [r3, #0]
    block_read_cfg[eAlgoFet_BLOCK0].Len = 18u;
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <app_gauge_init+0x2c>)
 80008c8:	2212      	movs	r2, #18
 80008ca:	705a      	strb	r2, [r3, #1]

    ret_val = SYS_OK;
 80008cc:	2300      	movs	r3, #0
 80008ce:	80fb      	strh	r3, [r7, #6]

    return ret_val;
 80008d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	200000c0 	.word	0x200000c0

080008e4 <app_gauge_tick>:

int16_t app_gauge_tick(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
    int16_t ret_val = SYS_ERR;
 80008ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ee:	80fb      	strh	r3, [r7, #6]
    do
    {
    	// Read SoC
    	if(SYS_OK != app_gauge_burst_read(&block_read_cfg[eAlgoFet_BLOCK0]))
 80008f0:	480c      	ldr	r0, [pc, #48]	; (8000924 <app_gauge_tick+0x40>)
 80008f2:	f7ff ff19 	bl	8000728 <app_gauge_burst_read>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d109      	bne.n	8000910 <app_gauge_tick+0x2c>
    	{
    		break;
    	}
    	if(SYS_OK != app_gauge_map_read_data(gauge_read_buffer, eAlgoFet_BLOCK0))
 80008fc:	2100      	movs	r1, #0
 80008fe:	480a      	ldr	r0, [pc, #40]	; (8000928 <app_gauge_tick+0x44>)
 8000900:	f7ff ff4e 	bl	80007a0 <app_gauge_map_read_data>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d104      	bne.n	8000914 <app_gauge_tick+0x30>
    	{
    	    break;
    	}
    	ret_val = SYS_OK;
 800090a:	2300      	movs	r3, #0
 800090c:	80fb      	strh	r3, [r7, #6]
 800090e:	e002      	b.n	8000916 <app_gauge_tick+0x32>
    		break;
 8000910:	bf00      	nop
 8000912:	e000      	b.n	8000916 <app_gauge_tick+0x32>
    	    break;
 8000914:	bf00      	nop
    }while(false);
    return ret_val;
 8000916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200000c0 	.word	0x200000c0
 8000928:	200000c8 	.word	0x200000c8

0800092c <app_sys_init>:

#include "app_afe.h"
#include "app_fuel_gauge.h"

int16_t app_sys_init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8000932:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000936:	80fb      	strh	r3, [r7, #6]
	do
	{
		// TODO:
		// IO Init
		(void) MX_GPIO_Init();
 8000938:	f000 fa0c 	bl	8000d54 <MX_GPIO_Init>
		// I2C Init
		(void) MX_I2C1_Init();
 800093c:	f000 fae6 	bl	8000f0c <MX_I2C1_Init>
		// SPI Init
		(void) MX_SPI1_Init();
 8000940:	f000 fc74 	bl	800122c <MX_SPI1_Init>
		// CAN Init
		(void) MX_CAN1_Init();
 8000944:	f000 f8bc 	bl	8000ac0 <MX_CAN1_Init>
		// PWM Init
		(void) MX_DMA_Init();
 8000948:	f000 f958 	bl	8000bfc <MX_DMA_Init>
		// ADC Init
		(void) MX_ADC1_Init();
 800094c:	f000 f822 	bl	8000994 <MX_ADC1_Init>

	}while(false);

	return ret_val;
 8000950:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <app_sys_peripheral_init>:

int16_t app_sys_peripheral_init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8000962:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000966:	80fb      	strh	r3, [r7, #6]
	do
	{
		// TODO:
		// AFE Init
		if(SYS_OK != app_afe_init())
 8000968:	f7ff feb8 	bl	80006dc <app_afe_init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d107      	bne.n	8000982 <app_sys_peripheral_init+0x26>
		{
			break;
		}
		// Fuel Gauge Init
		if(SYS_OK != app_gauge_init())
 8000972:	f7ff ff9f 	bl	80008b4 <app_gauge_init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d104      	bne.n	8000986 <app_sys_peripheral_init+0x2a>
		{
			break;
		}
		// CAN NW Init

		ret_val = SYS_OK;
 800097c:	2300      	movs	r3, #0
 800097e:	80fb      	strh	r3, [r7, #6]
 8000980:	e002      	b.n	8000988 <app_sys_peripheral_init+0x2c>
			break;
 8000982:	bf00      	nop
 8000984:	e000      	b.n	8000988 <app_sys_peripheral_init+0x2c>
			break;
 8000986:	bf00      	nop
	}while(false);

	return ret_val;
 8000988:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800099a:	463b      	mov	r3, r7
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009a6:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009a8:	4a21      	ldr	r2, [pc, #132]	; (8000a30 <MX_ADC1_Init+0x9c>)
 80009aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009ac:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009c0:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009d6:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <MX_ADC1_Init+0xa0>)
 80009d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009dc:	2200      	movs	r2, #0
 80009de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <MX_ADC1_Init+0x98>)
 80009f6:	f000 ff61 	bl	80018bc <HAL_ADC_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a00:	f000 fc04 	bl	800120c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a04:	230a      	movs	r3, #10
 8000a06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a10:	463b      	mov	r3, r7
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_ADC1_Init+0x98>)
 8000a16:	f001 f8bd 	bl	8001b94 <HAL_ADC_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a20:	f000 fbf4 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200000dc 	.word	0x200000dc
 8000a30:	40012000 	.word	0x40012000
 8000a34:	0f000001 	.word	0x0f000001

08000a38 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <HAL_ADC_MspInit+0x7c>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d127      	bne.n	8000aaa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a68:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_ADC_MspInit+0x80>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = TEMP1_IN_Pin|TEMP2_IN_Pin;
 8000a92:	2303      	movs	r3, #3
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a96:	2303      	movs	r3, #3
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4805      	ldr	r0, [pc, #20]	; (8000abc <HAL_ADC_MspInit+0x84>)
 8000aa6:	f002 fd3f 	bl	8003528 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	; 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40012000 	.word	0x40012000
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020800 	.word	0x40020800

08000ac0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <MX_CAN1_Init+0x64>)
 8000ac6:	4a18      	ldr	r2, [pc, #96]	; (8000b28 <MX_CAN1_Init+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <MX_CAN1_Init+0x64>)
 8000acc:	2205      	movs	r2, #5
 8000ace:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <MX_CAN1_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_CAN1_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_CAN1_Init+0x64>)
 8000ade:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ae2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_CAN1_Init+0x64>)
 8000ae6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000aea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <MX_CAN1_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_CAN1_Init+0x64>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <MX_CAN1_Init+0x64>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_CAN1_Init+0x64>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <MX_CAN1_Init+0x64>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_CAN1_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_CAN1_Init+0x64>)
 8000b12:	f001 fabf 	bl	8002094 <HAL_CAN_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000b1c:	f000 fb76 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000124 	.word	0x20000124
 8000b28:	40006400 	.word	0x40006400

08000b2c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a29      	ldr	r2, [pc, #164]	; (8000bf0 <HAL_CAN_MspInit+0xc4>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d14c      	bne.n	8000be8 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <HAL_CAN_MspInit+0xc8>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a27      	ldr	r2, [pc, #156]	; (8000bf4 <HAL_CAN_MspInit+0xc8>)
 8000b58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b25      	ldr	r3, [pc, #148]	; (8000bf4 <HAL_CAN_MspInit+0xc8>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <HAL_CAN_MspInit+0xc8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a20      	ldr	r2, [pc, #128]	; (8000bf4 <HAL_CAN_MspInit+0xc8>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <HAL_CAN_MspInit+0xc8>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b86:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	2303      	movs	r3, #3
 8000b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b98:	2309      	movs	r3, #9
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4815      	ldr	r0, [pc, #84]	; (8000bf8 <HAL_CAN_MspInit+0xcc>)
 8000ba4:	f002 fcc0 	bl	8003528 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2105      	movs	r1, #5
 8000bac:	2013      	movs	r0, #19
 8000bae:	f001 fff1 	bl	8002b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000bb2:	2013      	movs	r0, #19
 8000bb4:	f002 f81a 	bl	8002bec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2105      	movs	r1, #5
 8000bbc:	2014      	movs	r0, #20
 8000bbe:	f001 ffe9 	bl	8002b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000bc2:	2014      	movs	r0, #20
 8000bc4:	f002 f812 	bl	8002bec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2105      	movs	r1, #5
 8000bcc:	2015      	movs	r0, #21
 8000bce:	f001 ffe1 	bl	8002b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000bd2:	2015      	movs	r0, #21
 8000bd4:	f002 f80a 	bl	8002bec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2105      	movs	r1, #5
 8000bdc:	2016      	movs	r0, #22
 8000bde:	f001 ffd9 	bl	8002b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000be2:	2016      	movs	r0, #22
 8000be4:	f002 f802 	bl	8002bec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000be8:	bf00      	nop
 8000bea:	3728      	adds	r7, #40	; 0x28
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40006400 	.word	0x40006400
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020000 	.word	0x40020000

08000bfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_DMA_Init+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a1e      	ldr	r2, [pc, #120]	; (8000c84 <MX_DMA_Init+0x88>)
 8000c0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_DMA_Init+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_DMA_Init+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <MX_DMA_Init+0x88>)
 8000c28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_DMA_Init+0x88>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2105      	movs	r1, #5
 8000c3e:	200b      	movs	r0, #11
 8000c40:	f001 ffa8 	bl	8002b94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c44:	200b      	movs	r0, #11
 8000c46:	f001 ffd1 	bl	8002bec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2105      	movs	r1, #5
 8000c4e:	2011      	movs	r0, #17
 8000c50:	f001 ffa0 	bl	8002b94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c54:	2011      	movs	r0, #17
 8000c56:	f001 ffc9 	bl	8002bec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2105      	movs	r1, #5
 8000c5e:	2038      	movs	r0, #56	; 0x38
 8000c60:	f001 ff98 	bl	8002b94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c64:	2038      	movs	r0, #56	; 0x38
 8000c66:	f001 ffc1 	bl	8002bec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2105      	movs	r1, #5
 8000c6e:	203b      	movs	r0, #59	; 0x3b
 8000c70:	f001 ff90 	bl	8002b94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000c74:	203b      	movs	r0, #59	; 0x3b
 8000c76:	f001 ffb9 	bl	8002bec <HAL_NVIC_EnableIRQ>

}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800

08000c88 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000c98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <vApplicationGetIdleTaskMemory+0x30>)
 8000c9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2280      	movs	r2, #128	; 0x80
 8000ca4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ca6:	bf00      	nop
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000194 	.word	0x20000194
 8000cb8:	20000248 	.word	0x20000248

08000cbc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000cbc:	b5b0      	push	{r4, r5, r7, lr}
 8000cbe:	b090      	sub	sp, #64	; 0x40
 8000cc0:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of can_tx_queue */
  osMessageQDef(can_tx_queue, 512, uint8_t);
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <MX_FREERTOS_Init+0x6c>)
 8000cc4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000cc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  can_tx_queueHandle = osMessageCreate(osMessageQ(can_tx_queue), NULL);
 8000cce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f007 fe4d 	bl	8008974 <osMessageCreate>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <MX_FREERTOS_Init+0x70>)
 8000cde:	6013      	str	r3, [r2, #0]

  /* definition and creation of can_rx_queue */
  osMessageQDef(can_rx_queue, 512, uint8_t);
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_FREERTOS_Init+0x6c>)
 8000ce2:	f107 0420 	add.w	r4, r7, #32
 8000ce6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ce8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  can_rx_queueHandle = osMessageCreate(osMessageQ(can_rx_queue), NULL);
 8000cec:	f107 0320 	add.w	r3, r7, #32
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f007 fe3e 	bl	8008974 <osMessageCreate>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4a0d      	ldr	r2, [pc, #52]	; (8000d30 <MX_FREERTOS_Init+0x74>)
 8000cfc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of APP_1HZ_TASK */
  osThreadDef(APP_1HZ_TASK, app_task_1Hz, osPriorityNormal, 0, 128);
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <MX_FREERTOS_Init+0x78>)
 8000d00:	1d3c      	adds	r4, r7, #4
 8000d02:	461d      	mov	r5, r3
 8000d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_1HZ_TASKHandle = osThreadCreate(osThread(APP_1HZ_TASK), NULL);
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f007 fdcd 	bl	80088b4 <osThreadCreate>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <MX_FREERTOS_Init+0x7c>)
 8000d1e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000d20:	bf00      	nop
 8000d22:	3740      	adds	r7, #64	; 0x40
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bdb0      	pop	{r4, r5, r7, pc}
 8000d28:	0800a2f4 	.word	0x0800a2f4
 8000d2c:	2000018c 	.word	0x2000018c
 8000d30:	20000190 	.word	0x20000190
 8000d34:	0800a304 	.word	0x0800a304
 8000d38:	20000188 	.word	0x20000188

08000d3c <app_task_1Hz>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_app_task_1Hz */
void app_task_1Hz(void const * argument)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_task_1Hz */
  /* Infinite loop */
  for(;;)
  {
	app_gauge_tick();
 8000d44:	f7ff fdce 	bl	80008e4 <app_gauge_tick>
    osDelay(500);
 8000d48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d4c:	f007 fdfe 	bl	800894c <osDelay>
  {
 8000d50:	e7f8      	b.n	8000d44 <app_task_1Hz+0x8>
	...

08000d54 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	4b62      	ldr	r3, [pc, #392]	; (8000ef8 <MX_GPIO_Init+0x1a4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a61      	ldr	r2, [pc, #388]	; (8000ef8 <MX_GPIO_Init+0x1a4>)
 8000d74:	f043 0304 	orr.w	r3, r3, #4
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b5f      	ldr	r3, [pc, #380]	; (8000ef8 <MX_GPIO_Init+0x1a4>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	613b      	str	r3, [r7, #16]
 8000d84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b5b      	ldr	r3, [pc, #364]	; (8000ef8 <MX_GPIO_Init+0x1a4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a5a      	ldr	r2, [pc, #360]	; (8000ef8 <MX_GPIO_Init+0x1a4>)
 8000d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b58      	ldr	r3, [pc, #352]	; (8000ef8 <MX_GPIO_Init+0x1a4>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	4b54      	ldr	r3, [pc, #336]	; (8000ef8 <MX_GPIO_Init+0x1a4>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a53      	ldr	r2, [pc, #332]	; (8000ef8 <MX_GPIO_Init+0x1a4>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b51      	ldr	r3, [pc, #324]	; (8000ef8 <MX_GPIO_Init+0x1a4>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	4b4d      	ldr	r3, [pc, #308]	; (8000ef8 <MX_GPIO_Init+0x1a4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a4c      	ldr	r2, [pc, #304]	; (8000ef8 <MX_GPIO_Init+0x1a4>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b4a      	ldr	r3, [pc, #296]	; (8000ef8 <MX_GPIO_Init+0x1a4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	4b46      	ldr	r3, [pc, #280]	; (8000ef8 <MX_GPIO_Init+0x1a4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a45      	ldr	r2, [pc, #276]	; (8000ef8 <MX_GPIO_Init+0x1a4>)
 8000de4:	f043 0308 	orr.w	r3, r3, #8
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b43      	ldr	r3, [pc, #268]	; (8000ef8 <MX_GPIO_Init+0x1a4>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0308 	and.w	r3, r3, #8
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_SHUT_Pin|AFE_WAKE_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2106      	movs	r1, #6
 8000dfa:	4840      	ldr	r0, [pc, #256]	; (8000efc <MX_GPIO_Init+0x1a8>)
 8000dfc:	f002 feb8 	bl	8003b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SP1_CS_Pin|DFETOFF_OUT_Pin|LED3_OUT_Pin|LED2_OUT_Pin
 8000e00:	2200      	movs	r2, #0
 8000e02:	f44f 611f 	mov.w	r1, #2544	; 0x9f0
 8000e06:	483e      	ldr	r0, [pc, #248]	; (8000f00 <MX_GPIO_Init+0x1ac>)
 8000e08:	f002 feb2 	bl	8003b70 <HAL_GPIO_WritePin>
                          |LED1_OUT_Pin|PWR5V_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DDSG_IN_Pin|LED5_OUT_BLUE_Pin|LED5_OUT_GREEN_Pin|LED5_OUT_RED_Pin
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f24f 0104 	movw	r1, #61444	; 0xf004
 8000e12:	483c      	ldr	r0, [pc, #240]	; (8000f04 <MX_GPIO_Init+0x1b0>)
 8000e14:	f002 feac 	bl	8003b70 <HAL_GPIO_WritePin>
                          |LED4_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 PC2
                           PC3 PC9 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2
 8000e18:	f24f 630c 	movw	r3, #62988	; 0xf60c
 8000e1c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4834      	ldr	r0, [pc, #208]	; (8000f00 <MX_GPIO_Init+0x1ac>)
 8000e2e:	f002 fb7b 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8000e32:	f248 1319 	movw	r3, #33049	; 0x8119
 8000e36:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	482d      	ldr	r0, [pc, #180]	; (8000efc <MX_GPIO_Init+0x1a8>)
 8000e48:	f002 fb6e 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RST_SHUT_Pin|AFE_WAKE_Pin;
 8000e4c:	2306      	movs	r3, #6
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	4826      	ldr	r0, [pc, #152]	; (8000efc <MX_GPIO_Init+0x1a8>)
 8000e64:	f002 fb60 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = SP1_CS_Pin|DFETOFF_OUT_Pin|LED3_OUT_Pin|LED2_OUT_Pin
 8000e68:	f44f 631f 	mov.w	r3, #2544	; 0x9f0
 8000e6c:	617b      	str	r3, [r7, #20]
                          |LED1_OUT_Pin|PWR5V_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	481f      	ldr	r0, [pc, #124]	; (8000f00 <MX_GPIO_Init+0x1ac>)
 8000e82:	f002 fb51 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AFE_ALERT_IN_Pin|DCHG_IN_Pin;
 8000e86:	2303      	movs	r3, #3
 8000e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	481a      	ldr	r0, [pc, #104]	; (8000f04 <MX_GPIO_Init+0x1b0>)
 8000e9a:	f002 fb45 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DDSG_IN_Pin|LED5_OUT_BLUE_Pin|LED5_OUT_GREEN_Pin|LED5_OUT_RED_Pin
 8000e9e:	f24f 0304 	movw	r3, #61444	; 0xf004
 8000ea2:	617b      	str	r3, [r7, #20]
                          |LED4_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4813      	ldr	r0, [pc, #76]	; (8000f04 <MX_GPIO_Init+0x1b0>)
 8000eb8:	f002 fb36 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 8000ebc:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 8000ec0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480c      	ldr	r0, [pc, #48]	; (8000f04 <MX_GPIO_Init+0x1b0>)
 8000ed2:	f002 fb29 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_IN_Pin;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_IN_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4807      	ldr	r0, [pc, #28]	; (8000f08 <MX_GPIO_Init+0x1b4>)
 8000eea:	f002 fb1d 	bl	8003528 <HAL_GPIO_Init>

}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	; 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020000 	.word	0x40020000
 8000f00:	40020800 	.word	0x40020800
 8000f04:	40020400 	.word	0x40020400
 8000f08:	40020c00 	.word	0x40020c00

08000f0c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f12:	4a13      	ldr	r2, [pc, #76]	; (8000f60 <MX_I2C1_Init+0x54>)
 8000f14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f18:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <MX_I2C1_Init+0x58>)
 8000f1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 168;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f24:	22a8      	movs	r2, #168	; 0xa8
 8000f26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_I2C1_Init+0x50>)
 8000f4a:	f002 fe43 	bl	8003bd4 <HAL_I2C_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f54:	f000 f95a 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000448 	.word	0x20000448
 8000f60:	40005400 	.word	0x40005400
 8000f64:	000186a0 	.word	0x000186a0

08000f68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a50      	ldr	r2, [pc, #320]	; (80010c8 <HAL_I2C_MspInit+0x160>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	f040 809a 	bne.w	80010c0 <HAL_I2C_MspInit+0x158>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	4b4e      	ldr	r3, [pc, #312]	; (80010cc <HAL_I2C_MspInit+0x164>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	4a4d      	ldr	r2, [pc, #308]	; (80010cc <HAL_I2C_MspInit+0x164>)
 8000f96:	f043 0302 	orr.w	r3, r3, #2
 8000f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9c:	4b4b      	ldr	r3, [pc, #300]	; (80010cc <HAL_I2C_MspInit+0x164>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fa8:	23c0      	movs	r3, #192	; 0xc0
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fac:	2312      	movs	r3, #18
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4843      	ldr	r0, [pc, #268]	; (80010d0 <HAL_I2C_MspInit+0x168>)
 8000fc4:	f002 fab0 	bl	8003528 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	4b3f      	ldr	r3, [pc, #252]	; (80010cc <HAL_I2C_MspInit+0x164>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd0:	4a3e      	ldr	r2, [pc, #248]	; (80010cc <HAL_I2C_MspInit+0x164>)
 8000fd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd8:	4b3c      	ldr	r3, [pc, #240]	; (80010cc <HAL_I2C_MspInit+0x164>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000fe4:	4b3b      	ldr	r3, [pc, #236]	; (80010d4 <HAL_I2C_MspInit+0x16c>)
 8000fe6:	4a3c      	ldr	r2, [pc, #240]	; (80010d8 <HAL_I2C_MspInit+0x170>)
 8000fe8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000fea:	4b3a      	ldr	r3, [pc, #232]	; (80010d4 <HAL_I2C_MspInit+0x16c>)
 8000fec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ff0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ff2:	4b38      	ldr	r3, [pc, #224]	; (80010d4 <HAL_I2C_MspInit+0x16c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff8:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <HAL_I2C_MspInit+0x16c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ffe:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <HAL_I2C_MspInit+0x16c>)
 8001000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001004:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001006:	4b33      	ldr	r3, [pc, #204]	; (80010d4 <HAL_I2C_MspInit+0x16c>)
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800100c:	4b31      	ldr	r3, [pc, #196]	; (80010d4 <HAL_I2C_MspInit+0x16c>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001012:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <HAL_I2C_MspInit+0x16c>)
 8001014:	2200      	movs	r2, #0
 8001016:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001018:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <HAL_I2C_MspInit+0x16c>)
 800101a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800101e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001020:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <HAL_I2C_MspInit+0x16c>)
 8001022:	2200      	movs	r2, #0
 8001024:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001026:	482b      	ldr	r0, [pc, #172]	; (80010d4 <HAL_I2C_MspInit+0x16c>)
 8001028:	f001 fdf8 	bl	8002c1c <HAL_DMA_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001032:	f000 f8eb 	bl	800120c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a26      	ldr	r2, [pc, #152]	; (80010d4 <HAL_I2C_MspInit+0x16c>)
 800103a:	639a      	str	r2, [r3, #56]	; 0x38
 800103c:	4a25      	ldr	r2, [pc, #148]	; (80010d4 <HAL_I2C_MspInit+0x16c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001042:	4b26      	ldr	r3, [pc, #152]	; (80010dc <HAL_I2C_MspInit+0x174>)
 8001044:	4a26      	ldr	r2, [pc, #152]	; (80010e0 <HAL_I2C_MspInit+0x178>)
 8001046:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001048:	4b24      	ldr	r3, [pc, #144]	; (80010dc <HAL_I2C_MspInit+0x174>)
 800104a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800104e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001050:	4b22      	ldr	r3, [pc, #136]	; (80010dc <HAL_I2C_MspInit+0x174>)
 8001052:	2240      	movs	r2, #64	; 0x40
 8001054:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <HAL_I2C_MspInit+0x174>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <HAL_I2C_MspInit+0x174>)
 800105e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001062:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001064:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <HAL_I2C_MspInit+0x174>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800106a:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_I2C_MspInit+0x174>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <HAL_I2C_MspInit+0x174>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_I2C_MspInit+0x174>)
 8001078:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800107c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_I2C_MspInit+0x174>)
 8001080:	2200      	movs	r2, #0
 8001082:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001084:	4815      	ldr	r0, [pc, #84]	; (80010dc <HAL_I2C_MspInit+0x174>)
 8001086:	f001 fdc9 	bl	8002c1c <HAL_DMA_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8001090:	f000 f8bc 	bl	800120c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a11      	ldr	r2, [pc, #68]	; (80010dc <HAL_I2C_MspInit+0x174>)
 8001098:	635a      	str	r2, [r3, #52]	; 0x34
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <HAL_I2C_MspInit+0x174>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2105      	movs	r1, #5
 80010a4:	201f      	movs	r0, #31
 80010a6:	f001 fd75 	bl	8002b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010aa:	201f      	movs	r0, #31
 80010ac:	f001 fd9e 	bl	8002bec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2105      	movs	r1, #5
 80010b4:	2020      	movs	r0, #32
 80010b6:	f001 fd6d 	bl	8002b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80010ba:	2020      	movs	r0, #32
 80010bc:	f001 fd96 	bl	8002bec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010c0:	bf00      	nop
 80010c2:	3728      	adds	r7, #40	; 0x28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40005400 	.word	0x40005400
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020400 	.word	0x40020400
 80010d4:	2000049c 	.word	0x2000049c
 80010d8:	40026010 	.word	0x40026010
 80010dc:	200004fc 	.word	0x200004fc
 80010e0:	400260a0 	.word	0x400260a0

080010e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e8:	f000 fb82 	bl	80017f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */
  (void)SystemClock_Config();
 80010ec:	f000 f80a 	bl	8001104 <SystemClock_Config>
  // TODO: Sys_Init - HW
  (void)app_sys_init();
 80010f0:	f7ff fc1c 	bl	800092c <app_sys_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  // TODO: Sys_Init - SW Modules
  (void)app_sys_peripheral_init();
 80010f4:	f7ff fc32 	bl	800095c <app_sys_peripheral_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80010f8:	f7ff fde0 	bl	8000cbc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80010fc:	f007 fbd3 	bl	80088a6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001100:	e7fe      	b.n	8001100 <main+0x1c>
	...

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b094      	sub	sp, #80	; 0x50
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	2234      	movs	r2, #52	; 0x34
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f009 f80e 	bl	800a134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	4b2c      	ldr	r3, [pc, #176]	; (80011e0 <SystemClock_Config+0xdc>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	4a2b      	ldr	r2, [pc, #172]	; (80011e0 <SystemClock_Config+0xdc>)
 8001132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001136:	6413      	str	r3, [r2, #64]	; 0x40
 8001138:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <SystemClock_Config+0xdc>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001144:	2300      	movs	r3, #0
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <SystemClock_Config+0xe0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a25      	ldr	r2, [pc, #148]	; (80011e4 <SystemClock_Config+0xe0>)
 800114e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <SystemClock_Config+0xe0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800115c:	603b      	str	r3, [r7, #0]
 800115e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001160:	2301      	movs	r3, #1
 8001162:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001164:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001168:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116a:	2302      	movs	r3, #2
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800116e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001172:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001174:	2304      	movs	r3, #4
 8001176:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001178:	23b4      	movs	r3, #180	; 0xb4
 800117a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800117c:	2302      	movs	r3, #2
 800117e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001180:	2302      	movs	r3, #2
 8001182:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001184:	2302      	movs	r3, #2
 8001186:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4618      	mov	r0, r3
 800118e:	f005 fea5 	bl	8006edc <HAL_RCC_OscConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001198:	f000 f838 	bl	800120c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800119c:	f005 fa12 	bl	80065c4 <HAL_PWREx_EnableOverDrive>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011a6:	f000 f831 	bl	800120c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011aa:	230f      	movs	r3, #15
 80011ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ae:	2302      	movs	r3, #2
 80011b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	2105      	movs	r1, #5
 80011c8:	4618      	mov	r0, r3
 80011ca:	f005 fa4b 	bl	8006664 <HAL_RCC_ClockConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80011d4:	f000 f81a 	bl	800120c <Error_Handler>
  }
}
 80011d8:	bf00      	nop
 80011da:	3750      	adds	r7, #80	; 0x50
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40007000 	.word	0x40007000

080011e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d101      	bne.n	80011fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011fa:	f000 fb1b 	bl	8001834 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40010000 	.word	0x40010000

0800120c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001214:	e7fe      	b.n	8001214 <Error_Handler+0x8>

08001216 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_SPI1_Init+0x64>)
 8001232:	4a18      	ldr	r2, [pc, #96]	; (8001294 <MX_SPI1_Init+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <MX_SPI1_Init+0x64>)
 8001238:	f44f 7282 	mov.w	r2, #260	; 0x104
 800123c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_SPI1_Init+0x64>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <MX_SPI1_Init+0x64>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_SPI1_Init+0x64>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_SPI1_Init+0x64>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_SPI1_Init+0x64>)
 8001258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800125c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_SPI1_Init+0x64>)
 8001260:	2238      	movs	r2, #56	; 0x38
 8001262:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <MX_SPI1_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_SPI1_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <MX_SPI1_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_SPI1_Init+0x64>)
 8001278:	220a      	movs	r2, #10
 800127a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800127c:	4804      	ldr	r0, [pc, #16]	; (8001290 <MX_SPI1_Init+0x64>)
 800127e:	f006 f989 	bl	8007594 <HAL_SPI_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001288:	f7ff ffc0 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	2000055c 	.word	0x2000055c
 8001294:	40013000 	.word	0x40013000

08001298 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a4c      	ldr	r2, [pc, #304]	; (80013e8 <HAL_SPI_MspInit+0x150>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	f040 8092 	bne.w	80013e0 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	4b4a      	ldr	r3, [pc, #296]	; (80013ec <HAL_SPI_MspInit+0x154>)
 80012c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c4:	4a49      	ldr	r2, [pc, #292]	; (80013ec <HAL_SPI_MspInit+0x154>)
 80012c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ca:	6453      	str	r3, [r2, #68]	; 0x44
 80012cc:	4b47      	ldr	r3, [pc, #284]	; (80013ec <HAL_SPI_MspInit+0x154>)
 80012ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	4b43      	ldr	r3, [pc, #268]	; (80013ec <HAL_SPI_MspInit+0x154>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	4a42      	ldr	r2, [pc, #264]	; (80013ec <HAL_SPI_MspInit+0x154>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6313      	str	r3, [r2, #48]	; 0x30
 80012e8:	4b40      	ldr	r3, [pc, #256]	; (80013ec <HAL_SPI_MspInit+0x154>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012f4:	23e0      	movs	r3, #224	; 0xe0
 80012f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001304:	2305      	movs	r3, #5
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	4838      	ldr	r0, [pc, #224]	; (80013f0 <HAL_SPI_MspInit+0x158>)
 8001310:	f002 f90a 	bl	8003528 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001314:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <HAL_SPI_MspInit+0x15c>)
 8001316:	4a38      	ldr	r2, [pc, #224]	; (80013f8 <HAL_SPI_MspInit+0x160>)
 8001318:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800131a:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <HAL_SPI_MspInit+0x15c>)
 800131c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001320:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001322:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <HAL_SPI_MspInit+0x15c>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001328:	4b32      	ldr	r3, [pc, #200]	; (80013f4 <HAL_SPI_MspInit+0x15c>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800132e:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <HAL_SPI_MspInit+0x15c>)
 8001330:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001334:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001336:	4b2f      	ldr	r3, [pc, #188]	; (80013f4 <HAL_SPI_MspInit+0x15c>)
 8001338:	2200      	movs	r2, #0
 800133a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800133c:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <HAL_SPI_MspInit+0x15c>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001342:	4b2c      	ldr	r3, [pc, #176]	; (80013f4 <HAL_SPI_MspInit+0x15c>)
 8001344:	2200      	movs	r2, #0
 8001346:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001348:	4b2a      	ldr	r3, [pc, #168]	; (80013f4 <HAL_SPI_MspInit+0x15c>)
 800134a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800134e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001350:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <HAL_SPI_MspInit+0x15c>)
 8001352:	2200      	movs	r2, #0
 8001354:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001356:	4827      	ldr	r0, [pc, #156]	; (80013f4 <HAL_SPI_MspInit+0x15c>)
 8001358:	f001 fc60 	bl	8002c1c <HAL_DMA_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001362:	f7ff ff53 	bl	800120c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a22      	ldr	r2, [pc, #136]	; (80013f4 <HAL_SPI_MspInit+0x15c>)
 800136a:	64da      	str	r2, [r3, #76]	; 0x4c
 800136c:	4a21      	ldr	r2, [pc, #132]	; (80013f4 <HAL_SPI_MspInit+0x15c>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <HAL_SPI_MspInit+0x164>)
 8001374:	4a22      	ldr	r2, [pc, #136]	; (8001400 <HAL_SPI_MspInit+0x168>)
 8001376:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001378:	4b20      	ldr	r3, [pc, #128]	; (80013fc <HAL_SPI_MspInit+0x164>)
 800137a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800137e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <HAL_SPI_MspInit+0x164>)
 8001382:	2240      	movs	r2, #64	; 0x40
 8001384:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <HAL_SPI_MspInit+0x164>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_SPI_MspInit+0x164>)
 800138e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001392:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HAL_SPI_MspInit+0x164>)
 8001396:	2200      	movs	r2, #0
 8001398:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <HAL_SPI_MspInit+0x164>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_SPI_MspInit+0x164>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_SPI_MspInit+0x164>)
 80013a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013ac:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HAL_SPI_MspInit+0x164>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013b4:	4811      	ldr	r0, [pc, #68]	; (80013fc <HAL_SPI_MspInit+0x164>)
 80013b6:	f001 fc31 	bl	8002c1c <HAL_DMA_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 80013c0:	f7ff ff24 	bl	800120c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <HAL_SPI_MspInit+0x164>)
 80013c8:	649a      	str	r2, [r3, #72]	; 0x48
 80013ca:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <HAL_SPI_MspInit+0x164>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2105      	movs	r1, #5
 80013d4:	2023      	movs	r0, #35	; 0x23
 80013d6:	f001 fbdd 	bl	8002b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80013da:	2023      	movs	r0, #35	; 0x23
 80013dc:	f001 fc06 	bl	8002bec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80013e0:	bf00      	nop
 80013e2:	3728      	adds	r7, #40	; 0x28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40013000 	.word	0x40013000
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	200005dc 	.word	0x200005dc
 80013f8:	40026410 	.word	0x40026410
 80013fc:	2000063c 	.word	0x2000063c
 8001400:	40026458 	.word	0x40026458

08001404 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_MspInit+0x54>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	4a11      	ldr	r2, [pc, #68]	; (8001458 <HAL_MspInit+0x54>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001418:	6453      	str	r3, [r2, #68]	; 0x44
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_MspInit+0x54>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_MspInit+0x54>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <HAL_MspInit+0x54>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_MspInit+0x54>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	210f      	movs	r1, #15
 8001446:	f06f 0001 	mvn.w	r0, #1
 800144a:	f001 fba3 	bl	8002b94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800

0800145c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08c      	sub	sp, #48	; 0x30
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <HAL_InitTick+0xd4>)
 8001472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001474:	4a2e      	ldr	r2, [pc, #184]	; (8001530 <HAL_InitTick+0xd4>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6453      	str	r3, [r2, #68]	; 0x44
 800147c:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <HAL_InitTick+0xd4>)
 800147e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001488:	f107 020c 	add.w	r2, r7, #12
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	4611      	mov	r1, r2
 8001492:	4618      	mov	r0, r3
 8001494:	f005 fac0 	bl	8006a18 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001498:	f005 faaa 	bl	80069f0 <HAL_RCC_GetPCLK2Freq>
 800149c:	4603      	mov	r3, r0
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a4:	4a23      	ldr	r2, [pc, #140]	; (8001534 <HAL_InitTick+0xd8>)
 80014a6:	fba2 2303 	umull	r2, r3, r2, r3
 80014aa:	0c9b      	lsrs	r3, r3, #18
 80014ac:	3b01      	subs	r3, #1
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014b0:	4b21      	ldr	r3, [pc, #132]	; (8001538 <HAL_InitTick+0xdc>)
 80014b2:	4a22      	ldr	r2, [pc, #136]	; (800153c <HAL_InitTick+0xe0>)
 80014b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <HAL_InitTick+0xdc>)
 80014b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014be:	4a1e      	ldr	r2, [pc, #120]	; (8001538 <HAL_InitTick+0xdc>)
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014c4:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <HAL_InitTick+0xdc>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_InitTick+0xdc>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_InitTick+0xdc>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80014d6:	4818      	ldr	r0, [pc, #96]	; (8001538 <HAL_InitTick+0xdc>)
 80014d8:	f006 fe00 	bl	80080dc <HAL_TIM_Base_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80014e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d11b      	bne.n	8001522 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80014ea:	4813      	ldr	r0, [pc, #76]	; (8001538 <HAL_InitTick+0xdc>)
 80014ec:	f006 fef0 	bl	80082d0 <HAL_TIM_Base_Start_IT>
 80014f0:	4603      	mov	r3, r0
 80014f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80014f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d111      	bne.n	8001522 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014fe:	2019      	movs	r0, #25
 8001500:	f001 fb74 	bl	8002bec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b0f      	cmp	r3, #15
 8001508:	d808      	bhi.n	800151c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800150a:	2200      	movs	r2, #0
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	2019      	movs	r0, #25
 8001510:	f001 fb40 	bl	8002b94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001514:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <HAL_InitTick+0xe4>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e002      	b.n	8001522 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001522:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001526:	4618      	mov	r0, r3
 8001528:	3730      	adds	r7, #48	; 0x30
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	431bde83 	.word	0x431bde83
 8001538:	2000069c 	.word	0x2000069c
 800153c:	40010000 	.word	0x40010000
 8001540:	20000004 	.word	0x20000004

08001544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <NMI_Handler+0x4>

0800154a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <MemManage_Handler+0x4>

08001556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <UsageFault_Handler+0x4>

08001562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <WWDG_IRQHandler+0x10>)
 8001576:	f007 f955 	bl	8008824 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200006e4 	.word	0x200006e4

08001584 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <DMA1_Stream0_IRQHandler+0x10>)
 800158a:	f001 fd83 	bl	8003094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	2000049c 	.word	0x2000049c

08001598 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <DMA1_Stream6_IRQHandler+0x10>)
 800159e:	f001 fd79 	bl	8003094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200004fc 	.word	0x200004fc

080015ac <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <CAN1_TX_IRQHandler+0x10>)
 80015b2:	f000 ffd9 	bl	8002568 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000124 	.word	0x20000124

080015c0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <CAN1_RX0_IRQHandler+0x10>)
 80015c6:	f000 ffcf 	bl	8002568 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000124 	.word	0x20000124

080015d4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <CAN1_RX1_IRQHandler+0x10>)
 80015da:	f000 ffc5 	bl	8002568 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000124 	.word	0x20000124

080015e8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <CAN1_SCE_IRQHandler+0x10>)
 80015ee:	f000 ffbb 	bl	8002568 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000124 	.word	0x20000124

080015fc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001600:	4802      	ldr	r0, [pc, #8]	; (800160c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001602:	f006 ff2b 	bl	800845c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	2000069c 	.word	0x2000069c

08001610 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <I2C1_EV_IRQHandler+0x10>)
 8001616:	f002 ffcd 	bl	80045b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000448 	.word	0x20000448

08001624 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <I2C1_ER_IRQHandler+0x10>)
 800162a:	f003 f934 	bl	8004896 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000448 	.word	0x20000448

08001638 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <SPI1_IRQHandler+0x10>)
 800163e:	f006 fb1d 	bl	8007c7c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000055c 	.word	0x2000055c

0800164c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <DMA2_Stream0_IRQHandler+0x10>)
 8001652:	f001 fd1f 	bl	8003094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200005dc 	.word	0x200005dc

08001660 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <DMA2_Stream3_IRQHandler+0x10>)
 8001666:	f001 fd15 	bl	8003094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000063c 	.word	0x2000063c

08001674 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <SystemInit+0x20>)
 800167a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167e:	4a05      	ldr	r2, [pc, #20]	; (8001694 <SystemInit+0x20>)
 8001680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001684:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800169c:	480d      	ldr	r0, [pc, #52]	; (80016d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800169e:	490e      	ldr	r1, [pc, #56]	; (80016d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016a0:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a4:	e002      	b.n	80016ac <LoopCopyDataInit>

080016a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016aa:	3304      	adds	r3, #4

080016ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b0:	d3f9      	bcc.n	80016a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b2:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016b4:	4c0b      	ldr	r4, [pc, #44]	; (80016e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b8:	e001      	b.n	80016be <LoopFillZerobss>

080016ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016bc:	3204      	adds	r2, #4

080016be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c0:	d3fb      	bcc.n	80016ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016c2:	f7ff ffd7 	bl	8001674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016c6:	f008 fd11 	bl	800a0ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ca:	f7ff fd0b 	bl	80010e4 <main>
  bx  lr    
 80016ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80016dc:	0800a5f4 	.word	0x0800a5f4
  ldr r2, =_sbss
 80016e0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80016e4:	20010260 	.word	0x20010260

080016e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e8:	e7fe      	b.n	80016e8 <ADC_IRQHandler>

080016ea <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b084      	sub	sp, #16
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d104      	bne.n	8001702 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80016f8:	b672      	cpsid	i
}
 80016fa:	bf00      	nop
 80016fc:	f7ff fd86 	bl	800120c <Error_Handler>
 8001700:	e7fe      	b.n	8001700 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7a1b      	ldrb	r3, [r3, #8]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d904      	bls.n	8001714 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800170a:	b672      	cpsid	i
}
 800170c:	bf00      	nop
 800170e:	f7ff fd7d 	bl	800120c <Error_Handler>
 8001712:	e7fe      	b.n	8001712 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7a1b      	ldrb	r3, [r3, #8]
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	b2d1      	uxtb	r1, r2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	7211      	strb	r1, [r2, #8]
 8001720:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001722:	f3ef 8211 	mrs	r2, BASEPRI
 8001726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800172a:	f383 8811 	msr	BASEPRI, r3
 800172e:	f3bf 8f6f 	isb	sy
 8001732:	f3bf 8f4f 	dsb	sy
 8001736:	60fa      	str	r2, [r7, #12]
 8001738:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b084      	sub	sp, #16
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d104      	bne.n	8001762 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001758:	b672      	cpsid	i
}
 800175a:	bf00      	nop
 800175c:	f7ff fd56 	bl	800120c <Error_Handler>
 8001760:	e7fe      	b.n	8001760 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7a1b      	ldrb	r3, [r3, #8]
 8001766:	3b01      	subs	r3, #1
 8001768:	b2da      	uxtb	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	7a1b      	ldrb	r3, [r3, #8]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d904      	bls.n	8001780 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8001776:	b672      	cpsid	i
}
 8001778:	bf00      	nop
 800177a:	f7ff fd47 	bl	800120c <Error_Handler>
 800177e:	e7fe      	b.n	800177e <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	7a1b      	ldrb	r3, [r3, #8]
 8001784:	461a      	mov	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001794:	bf00      	nop
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d104      	bne.n	80017b6 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80017ac:	b672      	cpsid	i
}
 80017ae:	bf00      	nop
 80017b0:	f7ff fd2c 	bl	800120c <Error_Handler>
 80017b4:	e7fe      	b.n	80017b4 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff96 	bl	80016ea <stm32_lock_acquire>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d104      	bne.n	80017de <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80017d4:	b672      	cpsid	i
}
 80017d6:	bf00      	nop
 80017d8:	f7ff fd18 	bl	800120c <Error_Handler>
 80017dc:	e7fe      	b.n	80017dc <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ffb2 	bl	800174a <stm32_lock_release>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <HAL_Init+0x40>)
 80017fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001800:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <HAL_Init+0x40>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <HAL_Init+0x40>)
 8001806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800180a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a07      	ldr	r2, [pc, #28]	; (8001830 <HAL_Init+0x40>)
 8001812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001818:	2003      	movs	r0, #3
 800181a:	f001 f99b 	bl	8002b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181e:	200f      	movs	r0, #15
 8001820:	f7ff fe1c 	bl	800145c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001824:	f7ff fdee 	bl	8001404 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023c00 	.word	0x40023c00

08001834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_IncTick+0x20>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_IncTick+0x24>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4413      	add	r3, r2
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <HAL_IncTick+0x24>)
 8001846:	6013      	str	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000008 	.word	0x20000008
 8001858:	20000704 	.word	0x20000704

0800185c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <HAL_GetTick+0x14>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	20000704 	.word	0x20000704

08001874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800187c:	f7ff ffee 	bl	800185c <HAL_GetTick>
 8001880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188c:	d005      	beq.n	800189a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <HAL_Delay+0x44>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4413      	add	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800189a:	bf00      	nop
 800189c:	f7ff ffde 	bl	800185c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d8f7      	bhi.n	800189c <HAL_Delay+0x28>
  {
  }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000008 	.word	0x20000008

080018bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e15c      	b.n	8001b8c <HAL_ADC_Init+0x2d0>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a8e      	ldr	r2, [pc, #568]	; (8001b10 <HAL_ADC_Init+0x254>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d00e      	beq.n	80018fa <HAL_ADC_Init+0x3e>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a8c      	ldr	r2, [pc, #560]	; (8001b14 <HAL_ADC_Init+0x258>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d009      	beq.n	80018fa <HAL_ADC_Init+0x3e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a8b      	ldr	r2, [pc, #556]	; (8001b18 <HAL_ADC_Init+0x25c>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d004      	beq.n	80018fa <HAL_ADC_Init+0x3e>
 80018f0:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80018f4:	4889      	ldr	r0, [pc, #548]	; (8001b1c <HAL_ADC_Init+0x260>)
 80018f6:	f7ff fc8e 	bl	8001216 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d013      	beq.n	800192a <HAL_ADC_Init+0x6e>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800190a:	d00e      	beq.n	800192a <HAL_ADC_Init+0x6e>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001914:	d009      	beq.n	800192a <HAL_ADC_Init+0x6e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800191e:	d004      	beq.n	800192a <HAL_ADC_Init+0x6e>
 8001920:	f240 1143 	movw	r1, #323	; 0x143
 8001924:	487d      	ldr	r0, [pc, #500]	; (8001b1c <HAL_ADC_Init+0x260>)
 8001926:	f7ff fc76 	bl	8001216 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d013      	beq.n	800195a <HAL_ADC_Init+0x9e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800193a:	d00e      	beq.n	800195a <HAL_ADC_Init+0x9e>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001944:	d009      	beq.n	800195a <HAL_ADC_Init+0x9e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800194e:	d004      	beq.n	800195a <HAL_ADC_Init+0x9e>
 8001950:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8001954:	4871      	ldr	r0, [pc, #452]	; (8001b1c <HAL_ADC_Init+0x260>)
 8001956:	f7ff fc5e 	bl	8001216 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d008      	beq.n	8001974 <HAL_ADC_Init+0xb8>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d004      	beq.n	8001974 <HAL_ADC_Init+0xb8>
 800196a:	f240 1145 	movw	r1, #325	; 0x145
 800196e:	486b      	ldr	r0, [pc, #428]	; (8001b1c <HAL_ADC_Init+0x260>)
 8001970:	f7ff fc51 	bl	8001216 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7e1b      	ldrb	r3, [r3, #24]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d008      	beq.n	800198e <HAL_ADC_Init+0xd2>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	7e1b      	ldrb	r3, [r3, #24]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d004      	beq.n	800198e <HAL_ADC_Init+0xd2>
 8001984:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8001988:	4864      	ldr	r0, [pc, #400]	; (8001b1c <HAL_ADC_Init+0x260>)
 800198a:	f7ff fc44 	bl	8001216 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	2b00      	cmp	r3, #0
 8001994:	d054      	beq.n	8001a40 <HAL_ADC_Init+0x184>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800199e:	d04f      	beq.n	8001a40 <HAL_ADC_Init+0x184>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019a8:	d04a      	beq.n	8001a40 <HAL_ADC_Init+0x184>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80019b2:	d045      	beq.n	8001a40 <HAL_ADC_Init+0x184>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019bc:	d040      	beq.n	8001a40 <HAL_ADC_Init+0x184>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80019c6:	d03b      	beq.n	8001a40 <HAL_ADC_Init+0x184>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019cc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80019d0:	d036      	beq.n	8001a40 <HAL_ADC_Init+0x184>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d6:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80019da:	d031      	beq.n	8001a40 <HAL_ADC_Init+0x184>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80019e4:	d02c      	beq.n	8001a40 <HAL_ADC_Init+0x184>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ea:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 80019ee:	d027      	beq.n	8001a40 <HAL_ADC_Init+0x184>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80019f8:	d022      	beq.n	8001a40 <HAL_ADC_Init+0x184>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8001a02:	d01d      	beq.n	8001a40 <HAL_ADC_Init+0x184>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a08:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001a0c:	d018      	beq.n	8001a40 <HAL_ADC_Init+0x184>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8001a16:	d013      	beq.n	8001a40 <HAL_ADC_Init+0x184>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001a20:	d00e      	beq.n	8001a40 <HAL_ADC_Init+0x184>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8001a2a:	d009      	beq.n	8001a40 <HAL_ADC_Init+0x184>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	4a3b      	ldr	r2, [pc, #236]	; (8001b20 <HAL_ADC_Init+0x264>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d004      	beq.n	8001a40 <HAL_ADC_Init+0x184>
 8001a36:	f240 1147 	movw	r1, #327	; 0x147
 8001a3a:	4838      	ldr	r0, [pc, #224]	; (8001b1c <HAL_ADC_Init+0x260>)
 8001a3c:	f7ff fbeb 	bl	8001216 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d009      	beq.n	8001a5c <HAL_ADC_Init+0x1a0>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a50:	d004      	beq.n	8001a5c <HAL_ADC_Init+0x1a0>
 8001a52:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001a56:	4831      	ldr	r0, [pc, #196]	; (8001b1c <HAL_ADC_Init+0x260>)
 8001a58:	f7ff fbdd 	bl	8001216 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_ADC_Init+0x1b0>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	2b10      	cmp	r3, #16
 8001a6a:	d904      	bls.n	8001a76 <HAL_ADC_Init+0x1ba>
 8001a6c:	f240 1149 	movw	r1, #329	; 0x149
 8001a70:	482a      	ldr	r0, [pc, #168]	; (8001b1c <HAL_ADC_Init+0x260>)
 8001a72:	f7ff fbd0 	bl	8001216 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d009      	beq.n	8001a94 <HAL_ADC_Init+0x1d8>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d004      	beq.n	8001a94 <HAL_ADC_Init+0x1d8>
 8001a8a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8001a8e:	4823      	ldr	r0, [pc, #140]	; (8001b1c <HAL_ADC_Init+0x260>)
 8001a90:	f7ff fbc1 	bl	8001216 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d00c      	beq.n	8001ab6 <HAL_ADC_Init+0x1fa>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_ADC_Init+0x1fa>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d004      	beq.n	8001ab6 <HAL_ADC_Init+0x1fa>
 8001aac:	f240 114b 	movw	r1, #331	; 0x14b
 8001ab0:	481a      	ldr	r0, [pc, #104]	; (8001b1c <HAL_ADC_Init+0x260>)
 8001ab2:	f7ff fbb0 	bl	8001216 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d009      	beq.n	8001ad4 <HAL_ADC_Init+0x218>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d004      	beq.n	8001ad4 <HAL_ADC_Init+0x218>
 8001aca:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8001ace:	4813      	ldr	r0, [pc, #76]	; (8001b1c <HAL_ADC_Init+0x260>)
 8001ad0:	f7ff fba1 	bl	8001216 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad8:	4a11      	ldr	r2, [pc, #68]	; (8001b20 <HAL_ADC_Init+0x264>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d022      	beq.n	8001b24 <HAL_ADC_Init+0x268>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d01e      	beq.n	8001b24 <HAL_ADC_Init+0x268>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001aee:	d019      	beq.n	8001b24 <HAL_ADC_Init+0x268>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001af8:	d014      	beq.n	8001b24 <HAL_ADC_Init+0x268>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001b02:	d00f      	beq.n	8001b24 <HAL_ADC_Init+0x268>
 8001b04:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001b08:	4804      	ldr	r0, [pc, #16]	; (8001b1c <HAL_ADC_Init+0x260>)
 8001b0a:	f7ff fb84 	bl	8001216 <assert_failed>
 8001b0e:	e009      	b.n	8001b24 <HAL_ADC_Init+0x268>
 8001b10:	40012000 	.word	0x40012000
 8001b14:	40012100 	.word	0x40012100
 8001b18:	40012200 	.word	0x40012200
 8001b1c:	0800a320 	.word	0x0800a320
 8001b20:	0f000001 	.word	0x0f000001
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d109      	bne.n	8001b40 <HAL_ADC_Init+0x284>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7fe ff83 	bl	8000a38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d118      	bne.n	8001b7e <HAL_ADC_Init+0x2c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b54:	f023 0302 	bic.w	r3, r3, #2
 8001b58:	f043 0202 	orr.w	r2, r3, #2
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f000 f98d 	bl	8001e80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f023 0303 	bic.w	r3, r3, #3
 8001b74:	f043 0201 	orr.w	r2, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40
 8001b7c:	e001      	b.n	8001b82 <HAL_ADC_Init+0x2c6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b12      	cmp	r3, #18
 8001ba8:	d909      	bls.n	8001bbe <HAL_ADC_ConfigChannel+0x2a>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a72      	ldr	r2, [pc, #456]	; (8001d78 <HAL_ADC_ConfigChannel+0x1e4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d004      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x2a>
 8001bb4:	f240 618b 	movw	r1, #1675	; 0x68b
 8001bb8:	4870      	ldr	r0, [pc, #448]	; (8001d7c <HAL_ADC_ConfigChannel+0x1e8>)
 8001bba:	f7ff fb2c 	bl	8001216 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_ADC_ConfigChannel+0x3a>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b10      	cmp	r3, #16
 8001bcc:	d904      	bls.n	8001bd8 <HAL_ADC_ConfigChannel+0x44>
 8001bce:	f240 618c 	movw	r1, #1676	; 0x68c
 8001bd2:	486a      	ldr	r0, [pc, #424]	; (8001d7c <HAL_ADC_ConfigChannel+0x1e8>)
 8001bd4:	f7ff fb1f 	bl	8001216 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d020      	beq.n	8001c22 <HAL_ADC_ConfigChannel+0x8e>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d01c      	beq.n	8001c22 <HAL_ADC_ConfigChannel+0x8e>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d018      	beq.n	8001c22 <HAL_ADC_ConfigChannel+0x8e>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d014      	beq.n	8001c22 <HAL_ADC_ConfigChannel+0x8e>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d010      	beq.n	8001c22 <HAL_ADC_ConfigChannel+0x8e>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b05      	cmp	r3, #5
 8001c06:	d00c      	beq.n	8001c22 <HAL_ADC_ConfigChannel+0x8e>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b06      	cmp	r3, #6
 8001c0e:	d008      	beq.n	8001c22 <HAL_ADC_ConfigChannel+0x8e>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b07      	cmp	r3, #7
 8001c16:	d004      	beq.n	8001c22 <HAL_ADC_ConfigChannel+0x8e>
 8001c18:	f240 618d 	movw	r1, #1677	; 0x68d
 8001c1c:	4857      	ldr	r0, [pc, #348]	; (8001d7c <HAL_ADC_ConfigChannel+0x1e8>)
 8001c1e:	f7ff fafa 	bl	8001216 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x9c>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e118      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x2ce>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b09      	cmp	r3, #9
 8001c3e:	d925      	bls.n	8001c8c <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68d9      	ldr	r1, [r3, #12]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4613      	mov	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	3b1e      	subs	r3, #30
 8001c56:	2207      	movs	r2, #7
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43da      	mvns	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	400a      	ands	r2, r1
 8001c64:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68d9      	ldr	r1, [r3, #12]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	4603      	mov	r3, r0
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4403      	add	r3, r0
 8001c7e:	3b1e      	subs	r3, #30
 8001c80:	409a      	lsls	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	e022      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6919      	ldr	r1, [r3, #16]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	400a      	ands	r2, r1
 8001cae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6919      	ldr	r1, [r3, #16]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4403      	add	r3, r0
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d824      	bhi.n	8001d24 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	3b05      	subs	r3, #5
 8001cec:	221f      	movs	r2, #31
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43da      	mvns	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	400a      	ands	r2, r1
 8001cfa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	4618      	mov	r0, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	3b05      	subs	r3, #5
 8001d16:	fa00 f203 	lsl.w	r2, r0, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	635a      	str	r2, [r3, #52]	; 0x34
 8001d22:	e051      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b0c      	cmp	r3, #12
 8001d2a:	d829      	bhi.n	8001d80 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3b23      	subs	r3, #35	; 0x23
 8001d3e:	221f      	movs	r2, #31
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43da      	mvns	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	400a      	ands	r2, r1
 8001d4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	3b23      	subs	r3, #35	; 0x23
 8001d68:	fa00 f203 	lsl.w	r2, r0, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	631a      	str	r2, [r3, #48]	; 0x30
 8001d74:	e028      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x234>
 8001d76:	bf00      	nop
 8001d78:	10000012 	.word	0x10000012
 8001d7c:	0800a320 	.word	0x0800a320
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	3b41      	subs	r3, #65	; 0x41
 8001d92:	221f      	movs	r2, #31
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43da      	mvns	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	400a      	ands	r2, r1
 8001da0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	3b41      	subs	r3, #65	; 0x41
 8001dbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dc8:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <HAL_ADC_ConfigChannel+0x2d8>)
 8001dca:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a27      	ldr	r2, [pc, #156]	; (8001e70 <HAL_ADC_ConfigChannel+0x2dc>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d10f      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x262>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b12      	cmp	r3, #18
 8001ddc:	d10b      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a1d      	ldr	r2, [pc, #116]	; (8001e70 <HAL_ADC_ConfigChannel+0x2dc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d12b      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x2c4>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1b      	ldr	r2, [pc, #108]	; (8001e74 <HAL_ADC_ConfigChannel+0x2e0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d003      	beq.n	8001e12 <HAL_ADC_ConfigChannel+0x27e>
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b11      	cmp	r3, #17
 8001e10:	d122      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a11      	ldr	r2, [pc, #68]	; (8001e74 <HAL_ADC_ConfigChannel+0x2e0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d111      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e34:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <HAL_ADC_ConfigChannel+0x2e4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a10      	ldr	r2, [pc, #64]	; (8001e7c <HAL_ADC_ConfigChannel+0x2e8>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	0c9a      	lsrs	r2, r3, #18
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e4a:	e002      	b.n	8001e52 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f9      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40012300 	.word	0x40012300
 8001e70:	40012000 	.word	0x40012000
 8001e74:	10000012 	.word	0x10000012
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	431bde83 	.word	0x431bde83

08001e80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e88:	4b7f      	ldr	r3, [pc, #508]	; (8002088 <ADC_Init+0x208>)
 8001e8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6859      	ldr	r1, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	021a      	lsls	r2, r3, #8
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ed8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6859      	ldr	r1, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001efa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6899      	ldr	r1, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f12:	4a5e      	ldr	r2, [pc, #376]	; (800208c <ADC_Init+0x20c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d022      	beq.n	8001f5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6899      	ldr	r1, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6899      	ldr	r1, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	e00f      	b.n	8001f7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0202 	bic.w	r2, r2, #2
 8001f8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6899      	ldr	r1, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7e1b      	ldrb	r3, [r3, #24]
 8001f98:	005a      	lsls	r2, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d028      	beq.n	8001ffe <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <ADC_Init+0x13c>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d904      	bls.n	8001fc6 <ADC_Init+0x146>
 8001fbc:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8001fc0:	4833      	ldr	r0, [pc, #204]	; (8002090 <ADC_Init+0x210>)
 8001fc2:	f7ff f928 	bl	8001216 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fd4:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001fe4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6859      	ldr	r1, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	035a      	lsls	r2, r3, #13
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	e007      	b.n	800200e <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800200c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800201c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	3b01      	subs	r3, #1
 800202a:	051a      	lsls	r2, r3, #20
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002042:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6899      	ldr	r1, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002050:	025a      	lsls	r2, r3, #9
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002068:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6899      	ldr	r1, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	029a      	lsls	r2, r3, #10
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	609a      	str	r2, [r3, #8]
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40012300 	.word	0x40012300
 800208c:	0f000001 	.word	0x0f000001
 8002090:	0800a320 	.word	0x0800a320

08002094 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e243      	b.n	800252e <HAL_CAN_Init+0x49a>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a93      	ldr	r2, [pc, #588]	; (80022f8 <HAL_CAN_Init+0x264>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d009      	beq.n	80020c4 <HAL_CAN_Init+0x30>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a91      	ldr	r2, [pc, #580]	; (80022fc <HAL_CAN_Init+0x268>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d004      	beq.n	80020c4 <HAL_CAN_Init+0x30>
 80020ba:	f240 111d 	movw	r1, #285	; 0x11d
 80020be:	4890      	ldr	r0, [pc, #576]	; (8002300 <HAL_CAN_Init+0x26c>)
 80020c0:	f7ff f8a9 	bl	8001216 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	7e1b      	ldrb	r3, [r3, #24]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_CAN_Init+0x4a>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	7e1b      	ldrb	r3, [r3, #24]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d004      	beq.n	80020de <HAL_CAN_Init+0x4a>
 80020d4:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80020d8:	4889      	ldr	r0, [pc, #548]	; (8002300 <HAL_CAN_Init+0x26c>)
 80020da:	f7ff f89c 	bl	8001216 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	7e5b      	ldrb	r3, [r3, #25]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d008      	beq.n	80020f8 <HAL_CAN_Init+0x64>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	7e5b      	ldrb	r3, [r3, #25]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d004      	beq.n	80020f8 <HAL_CAN_Init+0x64>
 80020ee:	f240 111f 	movw	r1, #287	; 0x11f
 80020f2:	4883      	ldr	r0, [pc, #524]	; (8002300 <HAL_CAN_Init+0x26c>)
 80020f4:	f7ff f88f 	bl	8001216 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	7e9b      	ldrb	r3, [r3, #26]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d008      	beq.n	8002112 <HAL_CAN_Init+0x7e>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7e9b      	ldrb	r3, [r3, #26]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d004      	beq.n	8002112 <HAL_CAN_Init+0x7e>
 8002108:	f44f 7190 	mov.w	r1, #288	; 0x120
 800210c:	487c      	ldr	r0, [pc, #496]	; (8002300 <HAL_CAN_Init+0x26c>)
 800210e:	f7ff f882 	bl	8001216 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7edb      	ldrb	r3, [r3, #27]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d008      	beq.n	800212c <HAL_CAN_Init+0x98>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	7edb      	ldrb	r3, [r3, #27]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d004      	beq.n	800212c <HAL_CAN_Init+0x98>
 8002122:	f240 1121 	movw	r1, #289	; 0x121
 8002126:	4876      	ldr	r0, [pc, #472]	; (8002300 <HAL_CAN_Init+0x26c>)
 8002128:	f7ff f875 	bl	8001216 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	7f1b      	ldrb	r3, [r3, #28]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_CAN_Init+0xb2>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	7f1b      	ldrb	r3, [r3, #28]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d004      	beq.n	8002146 <HAL_CAN_Init+0xb2>
 800213c:	f44f 7191 	mov.w	r1, #290	; 0x122
 8002140:	486f      	ldr	r0, [pc, #444]	; (8002300 <HAL_CAN_Init+0x26c>)
 8002142:	f7ff f868 	bl	8001216 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7f5b      	ldrb	r3, [r3, #29]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d008      	beq.n	8002160 <HAL_CAN_Init+0xcc>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	7f5b      	ldrb	r3, [r3, #29]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d004      	beq.n	8002160 <HAL_CAN_Init+0xcc>
 8002156:	f240 1123 	movw	r1, #291	; 0x123
 800215a:	4869      	ldr	r0, [pc, #420]	; (8002300 <HAL_CAN_Init+0x26c>)
 800215c:	f7ff f85b 	bl	8001216 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d013      	beq.n	8002190 <HAL_CAN_Init+0xfc>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002170:	d00e      	beq.n	8002190 <HAL_CAN_Init+0xfc>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800217a:	d009      	beq.n	8002190 <HAL_CAN_Init+0xfc>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002184:	d004      	beq.n	8002190 <HAL_CAN_Init+0xfc>
 8002186:	f44f 7192 	mov.w	r1, #292	; 0x124
 800218a:	485d      	ldr	r0, [pc, #372]	; (8002300 <HAL_CAN_Init+0x26c>)
 800218c:	f7ff f843 	bl	8001216 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d013      	beq.n	80021c0 <HAL_CAN_Init+0x12c>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021a0:	d00e      	beq.n	80021c0 <HAL_CAN_Init+0x12c>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021aa:	d009      	beq.n	80021c0 <HAL_CAN_Init+0x12c>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021b4:	d004      	beq.n	80021c0 <HAL_CAN_Init+0x12c>
 80021b6:	f240 1125 	movw	r1, #293	; 0x125
 80021ba:	4851      	ldr	r0, [pc, #324]	; (8002300 <HAL_CAN_Init+0x26c>)
 80021bc:	f7ff f82b 	bl	8001216 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d04f      	beq.n	8002268 <HAL_CAN_Init+0x1d4>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d0:	d04a      	beq.n	8002268 <HAL_CAN_Init+0x1d4>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021da:	d045      	beq.n	8002268 <HAL_CAN_Init+0x1d4>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80021e4:	d040      	beq.n	8002268 <HAL_CAN_Init+0x1d4>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021ee:	d03b      	beq.n	8002268 <HAL_CAN_Init+0x1d4>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021f8:	d036      	beq.n	8002268 <HAL_CAN_Init+0x1d4>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002202:	d031      	beq.n	8002268 <HAL_CAN_Init+0x1d4>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 800220c:	d02c      	beq.n	8002268 <HAL_CAN_Init+0x1d4>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002216:	d027      	beq.n	8002268 <HAL_CAN_Init+0x1d4>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8002220:	d022      	beq.n	8002268 <HAL_CAN_Init+0x1d4>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800222a:	d01d      	beq.n	8002268 <HAL_CAN_Init+0x1d4>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8002234:	d018      	beq.n	8002268 <HAL_CAN_Init+0x1d4>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800223e:	d013      	beq.n	8002268 <HAL_CAN_Init+0x1d4>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8002248:	d00e      	beq.n	8002268 <HAL_CAN_Init+0x1d4>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002252:	d009      	beq.n	8002268 <HAL_CAN_Init+0x1d4>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800225c:	d004      	beq.n	8002268 <HAL_CAN_Init+0x1d4>
 800225e:	f44f 7193 	mov.w	r1, #294	; 0x126
 8002262:	4827      	ldr	r0, [pc, #156]	; (8002300 <HAL_CAN_Init+0x26c>)
 8002264:	f7fe ffd7 	bl	8001216 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d027      	beq.n	80022c0 <HAL_CAN_Init+0x22c>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002278:	d022      	beq.n	80022c0 <HAL_CAN_Init+0x22c>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002282:	d01d      	beq.n	80022c0 <HAL_CAN_Init+0x22c>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800228c:	d018      	beq.n	80022c0 <HAL_CAN_Init+0x22c>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002296:	d013      	beq.n	80022c0 <HAL_CAN_Init+0x22c>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80022a0:	d00e      	beq.n	80022c0 <HAL_CAN_Init+0x22c>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80022aa:	d009      	beq.n	80022c0 <HAL_CAN_Init+0x22c>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80022b4:	d004      	beq.n	80022c0 <HAL_CAN_Init+0x22c>
 80022b6:	f240 1127 	movw	r1, #295	; 0x127
 80022ba:	4811      	ldr	r0, [pc, #68]	; (8002300 <HAL_CAN_Init+0x26c>)
 80022bc:	f7fe ffab 	bl	8001216 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d004      	beq.n	80022d2 <HAL_CAN_Init+0x23e>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d0:	d904      	bls.n	80022dc <HAL_CAN_Init+0x248>
 80022d2:	f44f 7194 	mov.w	r1, #296	; 0x128
 80022d6:	480a      	ldr	r0, [pc, #40]	; (8002300 <HAL_CAN_Init+0x26c>)
 80022d8:	f7fe ff9d 	bl	8001216 <assert_failed>

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d13d      	bne.n	8002364 <HAL_CAN_Init+0x2d0>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a06      	ldr	r2, [pc, #24]	; (8002304 <HAL_CAN_Init+0x270>)
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a05      	ldr	r2, [pc, #20]	; (8002308 <HAL_CAN_Init+0x274>)
 80022f2:	645a      	str	r2, [r3, #68]	; 0x44
 80022f4:	e00a      	b.n	800230c <HAL_CAN_Init+0x278>
 80022f6:	bf00      	nop
 80022f8:	40006400 	.word	0x40006400
 80022fc:	40006800 	.word	0x40006800
 8002300:	0800a358 	.word	0x0800a358
 8002304:	0800296b 	.word	0x0800296b
 8002308:	0800297f 	.word	0x0800297f
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a8a      	ldr	r2, [pc, #552]	; (8002538 <HAL_CAN_Init+0x4a4>)
 8002310:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a89      	ldr	r2, [pc, #548]	; (800253c <HAL_CAN_Init+0x4a8>)
 8002316:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a89      	ldr	r2, [pc, #548]	; (8002540 <HAL_CAN_Init+0x4ac>)
 800231c:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a88      	ldr	r2, [pc, #544]	; (8002544 <HAL_CAN_Init+0x4b0>)
 8002322:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a88      	ldr	r2, [pc, #544]	; (8002548 <HAL_CAN_Init+0x4b4>)
 8002328:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a87      	ldr	r2, [pc, #540]	; (800254c <HAL_CAN_Init+0x4b8>)
 800232e:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a87      	ldr	r2, [pc, #540]	; (8002550 <HAL_CAN_Init+0x4bc>)
 8002334:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a86      	ldr	r2, [pc, #536]	; (8002554 <HAL_CAN_Init+0x4c0>)
 800233a:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a86      	ldr	r2, [pc, #536]	; (8002558 <HAL_CAN_Init+0x4c4>)
 8002340:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a85      	ldr	r2, [pc, #532]	; (800255c <HAL_CAN_Init+0x4c8>)
 8002346:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a85      	ldr	r2, [pc, #532]	; (8002560 <HAL_CAN_Init+0x4cc>)
 800234c:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <HAL_CAN_Init+0x2c8>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a82      	ldr	r2, [pc, #520]	; (8002564 <HAL_CAN_Init+0x4d0>)
 800235a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002374:	f7ff fa72 	bl	800185c <HAL_GetTick>
 8002378:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800237a:	e012      	b.n	80023a2 <HAL_CAN_Init+0x30e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800237c:	f7ff fa6e 	bl	800185c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b0a      	cmp	r3, #10
 8002388:	d90b      	bls.n	80023a2 <HAL_CAN_Init+0x30e>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2205      	movs	r2, #5
 800239a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e0c5      	b.n	800252e <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0e5      	beq.n	800237c <HAL_CAN_Init+0x2e8>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0202 	bic.w	r2, r2, #2
 80023be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c0:	f7ff fa4c 	bl	800185c <HAL_GetTick>
 80023c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023c6:	e012      	b.n	80023ee <HAL_CAN_Init+0x35a>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023c8:	f7ff fa48 	bl	800185c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b0a      	cmp	r3, #10
 80023d4:	d90b      	bls.n	80023ee <HAL_CAN_Init+0x35a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2205      	movs	r2, #5
 80023e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e09f      	b.n	800252e <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1e5      	bne.n	80023c8 <HAL_CAN_Init+0x334>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7e1b      	ldrb	r3, [r3, #24]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d108      	bne.n	8002416 <HAL_CAN_Init+0x382>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	e007      	b.n	8002426 <HAL_CAN_Init+0x392>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002424:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7e5b      	ldrb	r3, [r3, #25]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d108      	bne.n	8002440 <HAL_CAN_Init+0x3ac>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e007      	b.n	8002450 <HAL_CAN_Init+0x3bc>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800244e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	7e9b      	ldrb	r3, [r3, #26]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d108      	bne.n	800246a <HAL_CAN_Init+0x3d6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0220 	orr.w	r2, r2, #32
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e007      	b.n	800247a <HAL_CAN_Init+0x3e6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0220 	bic.w	r2, r2, #32
 8002478:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	7edb      	ldrb	r3, [r3, #27]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d108      	bne.n	8002494 <HAL_CAN_Init+0x400>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0210 	bic.w	r2, r2, #16
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e007      	b.n	80024a4 <HAL_CAN_Init+0x410>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0210 	orr.w	r2, r2, #16
 80024a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	7f1b      	ldrb	r3, [r3, #28]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d108      	bne.n	80024be <HAL_CAN_Init+0x42a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0208 	orr.w	r2, r2, #8
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	e007      	b.n	80024ce <HAL_CAN_Init+0x43a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0208 	bic.w	r2, r2, #8
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	7f5b      	ldrb	r3, [r3, #29]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d108      	bne.n	80024e8 <HAL_CAN_Init+0x454>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0204 	orr.w	r2, r2, #4
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	e007      	b.n	80024f8 <HAL_CAN_Init+0x464>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0204 	bic.w	r2, r2, #4
 80024f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	ea42 0103 	orr.w	r1, r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	1e5a      	subs	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	08002993 	.word	0x08002993
 800253c:	080029a7 	.word	0x080029a7
 8002540:	080028f3 	.word	0x080028f3
 8002544:	08002907 	.word	0x08002907
 8002548:	0800291b 	.word	0x0800291b
 800254c:	0800292f 	.word	0x0800292f
 8002550:	08002943 	.word	0x08002943
 8002554:	08002957 	.word	0x08002957
 8002558:	080029bb 	.word	0x080029bb
 800255c:	080029cf 	.word	0x080029cf
 8002560:	080029e3 	.word	0x080029e3
 8002564:	08000b2d 	.word	0x08000b2d

08002568 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	; 0x28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002570:	2300      	movs	r3, #0
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 8083 	beq.w	80026b6 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d025      	beq.n	8002606 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2201      	movs	r2, #1
 80025c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	4798      	blx	r3
 80025d4:	e017      	b.n	8002606 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d004      	beq.n	80025ea <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
 80025e8:	e00d      	b.n	8002606 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d004      	beq.n	80025fe <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
 80025fc:	e003      	b.n	8002606 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d026      	beq.n	800265e <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002618:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002620:	2b00      	cmp	r3, #0
 8002622:	d004      	beq.n	800262e <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	4798      	blx	r3
 800262c:	e017      	b.n	800265e <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002634:	2b00      	cmp	r3, #0
 8002636:	d004      	beq.n	8002642 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
 8002640:	e00d      	b.n	800265e <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002648:	2b00      	cmp	r3, #0
 800264a:	d004      	beq.n	8002656 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
 8002654:	e003      	b.n	800265e <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d026      	beq.n	80026b6 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002670:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d004      	beq.n	8002686 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	4798      	blx	r3
 8002684:	e017      	b.n	80026b6 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d004      	beq.n	800269a <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
 8002698:	e00d      	b.n	80026b6 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d004      	beq.n	80026ae <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
 80026ac:	e003      	b.n	80026b6 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00c      	beq.n	80026da <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d007      	beq.n	80026da <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2210      	movs	r2, #16
 80026d8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00c      	beq.n	80026fe <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d007      	beq.n	80026fe <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2208      	movs	r2, #8
 80026f4:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00c      	beq.n	8002742 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b00      	cmp	r3, #0
 8002730:	d007      	beq.n	8002742 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002738:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2210      	movs	r2, #16
 8002740:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	f003 0320 	and.w	r3, r3, #32
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00c      	beq.n	8002766 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d007      	beq.n	8002766 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2208      	movs	r2, #8
 800275c:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	f003 0310 	and.w	r3, r3, #16
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00a      	beq.n	8002786 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00c      	beq.n	80027aa <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2210      	movs	r2, #16
 80027a0:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00c      	beq.n	80027ce <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d007      	beq.n	80027ce <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2208      	movs	r2, #8
 80027c4:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d07b      	beq.n	80028d0 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d072      	beq.n	80028c8 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	f043 0302 	orr.w	r3, r3, #2
 8002818:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	f043 0304 	orr.w	r3, r3, #4
 8002834:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800283c:	2b00      	cmp	r3, #0
 800283e:	d043      	beq.n	80028c8 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002846:	2b00      	cmp	r3, #0
 8002848:	d03e      	beq.n	80028c8 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002850:	2b60      	cmp	r3, #96	; 0x60
 8002852:	d02b      	beq.n	80028ac <HAL_CAN_IRQHandler+0x344>
 8002854:	2b60      	cmp	r3, #96	; 0x60
 8002856:	d82e      	bhi.n	80028b6 <HAL_CAN_IRQHandler+0x34e>
 8002858:	2b50      	cmp	r3, #80	; 0x50
 800285a:	d022      	beq.n	80028a2 <HAL_CAN_IRQHandler+0x33a>
 800285c:	2b50      	cmp	r3, #80	; 0x50
 800285e:	d82a      	bhi.n	80028b6 <HAL_CAN_IRQHandler+0x34e>
 8002860:	2b40      	cmp	r3, #64	; 0x40
 8002862:	d019      	beq.n	8002898 <HAL_CAN_IRQHandler+0x330>
 8002864:	2b40      	cmp	r3, #64	; 0x40
 8002866:	d826      	bhi.n	80028b6 <HAL_CAN_IRQHandler+0x34e>
 8002868:	2b30      	cmp	r3, #48	; 0x30
 800286a:	d010      	beq.n	800288e <HAL_CAN_IRQHandler+0x326>
 800286c:	2b30      	cmp	r3, #48	; 0x30
 800286e:	d822      	bhi.n	80028b6 <HAL_CAN_IRQHandler+0x34e>
 8002870:	2b10      	cmp	r3, #16
 8002872:	d002      	beq.n	800287a <HAL_CAN_IRQHandler+0x312>
 8002874:	2b20      	cmp	r3, #32
 8002876:	d005      	beq.n	8002884 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002878:	e01d      	b.n	80028b6 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	f043 0308 	orr.w	r3, r3, #8
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002882:	e019      	b.n	80028b8 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	f043 0310 	orr.w	r3, r3, #16
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800288c:	e014      	b.n	80028b8 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	f043 0320 	orr.w	r3, r3, #32
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002896:	e00f      	b.n	80028b8 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028a0:	e00a      	b.n	80028b8 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028aa:	e005      	b.n	80028b8 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028b4:	e000      	b.n	80028b8 <HAL_CAN_IRQHandler+0x350>
            break;
 80028b6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699a      	ldr	r2, [r3, #24]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80028c6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2204      	movs	r2, #4
 80028ce:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d009      	beq.n	80028ea <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	431a      	orrs	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80028ea:	bf00      	nop
 80028ec:	3728      	adds	r7, #40	; 0x28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
	...

080029f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a08:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <__NVIC_SetPriorityGrouping+0x44>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a14:	4013      	ands	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a2a:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <__NVIC_SetPriorityGrouping+0x44>)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	60d3      	str	r3, [r2, #12]
}
 8002a30:	bf00      	nop
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <__NVIC_GetPriorityGrouping+0x18>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	f003 0307 	and.w	r3, r3, #7
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	db0b      	blt.n	8002a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	f003 021f 	and.w	r2, r3, #31
 8002a74:	4907      	ldr	r1, [pc, #28]	; (8002a94 <__NVIC_EnableIRQ+0x38>)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	e000e100 	.word	0xe000e100

08002a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	6039      	str	r1, [r7, #0]
 8002aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	db0a      	blt.n	8002ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	490c      	ldr	r1, [pc, #48]	; (8002ae4 <__NVIC_SetPriority+0x4c>)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	0112      	lsls	r2, r2, #4
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	440b      	add	r3, r1
 8002abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ac0:	e00a      	b.n	8002ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	4908      	ldr	r1, [pc, #32]	; (8002ae8 <__NVIC_SetPriority+0x50>)
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	3b04      	subs	r3, #4
 8002ad0:	0112      	lsls	r2, r2, #4
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	761a      	strb	r2, [r3, #24]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000e100 	.word	0xe000e100
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b089      	sub	sp, #36	; 0x24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f1c3 0307 	rsb	r3, r3, #7
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	bf28      	it	cs
 8002b0a:	2304      	movcs	r3, #4
 8002b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3304      	adds	r3, #4
 8002b12:	2b06      	cmp	r3, #6
 8002b14:	d902      	bls.n	8002b1c <NVIC_EncodePriority+0x30>
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3b03      	subs	r3, #3
 8002b1a:	e000      	b.n	8002b1e <NVIC_EncodePriority+0x32>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b20:	f04f 32ff 	mov.w	r2, #4294967295
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	401a      	ands	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b34:	f04f 31ff 	mov.w	r1, #4294967295
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	43d9      	mvns	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b44:	4313      	orrs	r3, r2
         );
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3724      	adds	r7, #36	; 0x24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b07      	cmp	r3, #7
 8002b60:	d00f      	beq.n	8002b82 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b06      	cmp	r3, #6
 8002b66:	d00c      	beq.n	8002b82 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b05      	cmp	r3, #5
 8002b6c:	d009      	beq.n	8002b82 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d006      	beq.n	8002b82 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	d003      	beq.n	8002b82 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002b7a:	2190      	movs	r1, #144	; 0x90
 8002b7c:	4804      	ldr	r0, [pc, #16]	; (8002b90 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002b7e:	f7fe fb4a 	bl	8001216 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff ff38 	bl	80029f8 <__NVIC_SetPriorityGrouping>
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	0800a390 	.word	0x0800a390

08002b94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
 8002ba0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b0f      	cmp	r3, #15
 8002baa:	d903      	bls.n	8002bb4 <HAL_NVIC_SetPriority+0x20>
 8002bac:	21a8      	movs	r1, #168	; 0xa8
 8002bae:	480e      	ldr	r0, [pc, #56]	; (8002be8 <HAL_NVIC_SetPriority+0x54>)
 8002bb0:	f7fe fb31 	bl	8001216 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b0f      	cmp	r3, #15
 8002bb8:	d903      	bls.n	8002bc2 <HAL_NVIC_SetPriority+0x2e>
 8002bba:	21a9      	movs	r1, #169	; 0xa9
 8002bbc:	480a      	ldr	r0, [pc, #40]	; (8002be8 <HAL_NVIC_SetPriority+0x54>)
 8002bbe:	f7fe fb2a 	bl	8001216 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bc2:	f7ff ff3d 	bl	8002a40 <__NVIC_GetPriorityGrouping>
 8002bc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	6978      	ldr	r0, [r7, #20]
 8002bce:	f7ff ff8d 	bl	8002aec <NVIC_EncodePriority>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd8:	4611      	mov	r1, r2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ff5c 	bl	8002a98 <__NVIC_SetPriority>
}
 8002be0:	bf00      	nop
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	0800a390 	.word	0x0800a390

08002bec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	da03      	bge.n	8002c06 <HAL_NVIC_EnableIRQ+0x1a>
 8002bfe:	21bc      	movs	r1, #188	; 0xbc
 8002c00:	4805      	ldr	r0, [pc, #20]	; (8002c18 <HAL_NVIC_EnableIRQ+0x2c>)
 8002c02:	f7fe fb08 	bl	8001216 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff ff26 	bl	8002a5c <__NVIC_EnableIRQ>
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	0800a390 	.word	0x0800a390

08002c1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c28:	f7fe fe18 	bl	800185c <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e203      	b.n	8003040 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a8b      	ldr	r2, [pc, #556]	; (8002e6c <HAL_DMA_Init+0x250>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d04e      	beq.n	8002ce0 <HAL_DMA_Init+0xc4>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a8a      	ldr	r2, [pc, #552]	; (8002e70 <HAL_DMA_Init+0x254>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d049      	beq.n	8002ce0 <HAL_DMA_Init+0xc4>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a88      	ldr	r2, [pc, #544]	; (8002e74 <HAL_DMA_Init+0x258>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d044      	beq.n	8002ce0 <HAL_DMA_Init+0xc4>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a87      	ldr	r2, [pc, #540]	; (8002e78 <HAL_DMA_Init+0x25c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d03f      	beq.n	8002ce0 <HAL_DMA_Init+0xc4>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a85      	ldr	r2, [pc, #532]	; (8002e7c <HAL_DMA_Init+0x260>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d03a      	beq.n	8002ce0 <HAL_DMA_Init+0xc4>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a84      	ldr	r2, [pc, #528]	; (8002e80 <HAL_DMA_Init+0x264>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d035      	beq.n	8002ce0 <HAL_DMA_Init+0xc4>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a82      	ldr	r2, [pc, #520]	; (8002e84 <HAL_DMA_Init+0x268>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d030      	beq.n	8002ce0 <HAL_DMA_Init+0xc4>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a81      	ldr	r2, [pc, #516]	; (8002e88 <HAL_DMA_Init+0x26c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d02b      	beq.n	8002ce0 <HAL_DMA_Init+0xc4>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a7f      	ldr	r2, [pc, #508]	; (8002e8c <HAL_DMA_Init+0x270>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d026      	beq.n	8002ce0 <HAL_DMA_Init+0xc4>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a7e      	ldr	r2, [pc, #504]	; (8002e90 <HAL_DMA_Init+0x274>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d021      	beq.n	8002ce0 <HAL_DMA_Init+0xc4>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a7c      	ldr	r2, [pc, #496]	; (8002e94 <HAL_DMA_Init+0x278>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d01c      	beq.n	8002ce0 <HAL_DMA_Init+0xc4>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a7b      	ldr	r2, [pc, #492]	; (8002e98 <HAL_DMA_Init+0x27c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d017      	beq.n	8002ce0 <HAL_DMA_Init+0xc4>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a79      	ldr	r2, [pc, #484]	; (8002e9c <HAL_DMA_Init+0x280>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d012      	beq.n	8002ce0 <HAL_DMA_Init+0xc4>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a78      	ldr	r2, [pc, #480]	; (8002ea0 <HAL_DMA_Init+0x284>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00d      	beq.n	8002ce0 <HAL_DMA_Init+0xc4>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a76      	ldr	r2, [pc, #472]	; (8002ea4 <HAL_DMA_Init+0x288>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d008      	beq.n	8002ce0 <HAL_DMA_Init+0xc4>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a75      	ldr	r2, [pc, #468]	; (8002ea8 <HAL_DMA_Init+0x28c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d003      	beq.n	8002ce0 <HAL_DMA_Init+0xc4>
 8002cd8:	21b7      	movs	r1, #183	; 0xb7
 8002cda:	4874      	ldr	r0, [pc, #464]	; (8002eac <HAL_DMA_Init+0x290>)
 8002cdc:	f7fe fa9b 	bl	8001216 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d026      	beq.n	8002d36 <HAL_DMA_Init+0x11a>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cf0:	d021      	beq.n	8002d36 <HAL_DMA_Init+0x11a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cfa:	d01c      	beq.n	8002d36 <HAL_DMA_Init+0x11a>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002d04:	d017      	beq.n	8002d36 <HAL_DMA_Init+0x11a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d0e:	d012      	beq.n	8002d36 <HAL_DMA_Init+0x11a>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8002d18:	d00d      	beq.n	8002d36 <HAL_DMA_Init+0x11a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002d22:	d008      	beq.n	8002d36 <HAL_DMA_Init+0x11a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8002d2c:	d003      	beq.n	8002d36 <HAL_DMA_Init+0x11a>
 8002d2e:	21b8      	movs	r1, #184	; 0xb8
 8002d30:	485e      	ldr	r0, [pc, #376]	; (8002eac <HAL_DMA_Init+0x290>)
 8002d32:	f7fe fa70 	bl	8001216 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <HAL_DMA_Init+0x13a>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b40      	cmp	r3, #64	; 0x40
 8002d44:	d007      	beq.n	8002d56 <HAL_DMA_Init+0x13a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b80      	cmp	r3, #128	; 0x80
 8002d4c:	d003      	beq.n	8002d56 <HAL_DMA_Init+0x13a>
 8002d4e:	21b9      	movs	r1, #185	; 0xb9
 8002d50:	4856      	ldr	r0, [pc, #344]	; (8002eac <HAL_DMA_Init+0x290>)
 8002d52:	f7fe fa60 	bl	8001216 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d5e:	d007      	beq.n	8002d70 <HAL_DMA_Init+0x154>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_DMA_Init+0x154>
 8002d68:	21ba      	movs	r1, #186	; 0xba
 8002d6a:	4850      	ldr	r0, [pc, #320]	; (8002eac <HAL_DMA_Init+0x290>)
 8002d6c:	f7fe fa53 	bl	8001216 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d78:	d007      	beq.n	8002d8a <HAL_DMA_Init+0x16e>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_DMA_Init+0x16e>
 8002d82:	21bb      	movs	r1, #187	; 0xbb
 8002d84:	4849      	ldr	r0, [pc, #292]	; (8002eac <HAL_DMA_Init+0x290>)
 8002d86:	f7fe fa46 	bl	8001216 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00d      	beq.n	8002dae <HAL_DMA_Init+0x192>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d9a:	d008      	beq.n	8002dae <HAL_DMA_Init+0x192>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da4:	d003      	beq.n	8002dae <HAL_DMA_Init+0x192>
 8002da6:	21bc      	movs	r1, #188	; 0xbc
 8002da8:	4840      	ldr	r0, [pc, #256]	; (8002eac <HAL_DMA_Init+0x290>)
 8002daa:	f7fe fa34 	bl	8001216 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00d      	beq.n	8002dd2 <HAL_DMA_Init+0x1b6>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dbe:	d008      	beq.n	8002dd2 <HAL_DMA_Init+0x1b6>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dc8:	d003      	beq.n	8002dd2 <HAL_DMA_Init+0x1b6>
 8002dca:	21bd      	movs	r1, #189	; 0xbd
 8002dcc:	4837      	ldr	r0, [pc, #220]	; (8002eac <HAL_DMA_Init+0x290>)
 8002dce:	f7fe fa22 	bl	8001216 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00c      	beq.n	8002df4 <HAL_DMA_Init+0x1d8>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002de2:	d007      	beq.n	8002df4 <HAL_DMA_Init+0x1d8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	2b20      	cmp	r3, #32
 8002dea:	d003      	beq.n	8002df4 <HAL_DMA_Init+0x1d8>
 8002dec:	21be      	movs	r1, #190	; 0xbe
 8002dee:	482f      	ldr	r0, [pc, #188]	; (8002eac <HAL_DMA_Init+0x290>)
 8002df0:	f7fe fa11 	bl	8001216 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d012      	beq.n	8002e22 <HAL_DMA_Init+0x206>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e04:	d00d      	beq.n	8002e22 <HAL_DMA_Init+0x206>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e0e:	d008      	beq.n	8002e22 <HAL_DMA_Init+0x206>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e18:	d003      	beq.n	8002e22 <HAL_DMA_Init+0x206>
 8002e1a:	21bf      	movs	r1, #191	; 0xbf
 8002e1c:	4823      	ldr	r0, [pc, #140]	; (8002eac <HAL_DMA_Init+0x290>)
 8002e1e:	f7fe f9fa 	bl	8001216 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <HAL_DMA_Init+0x21e>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d003      	beq.n	8002e3a <HAL_DMA_Init+0x21e>
 8002e32:	21c0      	movs	r1, #192	; 0xc0
 8002e34:	481d      	ldr	r0, [pc, #116]	; (8002eac <HAL_DMA_Init+0x290>)
 8002e36:	f7fe f9ee 	bl	8001216 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d064      	beq.n	8002f0c <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d032      	beq.n	8002eb0 <HAL_DMA_Init+0x294>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d02e      	beq.n	8002eb0 <HAL_DMA_Init+0x294>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d02a      	beq.n	8002eb0 <HAL_DMA_Init+0x294>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d026      	beq.n	8002eb0 <HAL_DMA_Init+0x294>
 8002e62:	21c5      	movs	r1, #197	; 0xc5
 8002e64:	4811      	ldr	r0, [pc, #68]	; (8002eac <HAL_DMA_Init+0x290>)
 8002e66:	f7fe f9d6 	bl	8001216 <assert_failed>
 8002e6a:	e021      	b.n	8002eb0 <HAL_DMA_Init+0x294>
 8002e6c:	40026010 	.word	0x40026010
 8002e70:	40026028 	.word	0x40026028
 8002e74:	40026040 	.word	0x40026040
 8002e78:	40026058 	.word	0x40026058
 8002e7c:	40026070 	.word	0x40026070
 8002e80:	40026088 	.word	0x40026088
 8002e84:	400260a0 	.word	0x400260a0
 8002e88:	400260b8 	.word	0x400260b8
 8002e8c:	40026410 	.word	0x40026410
 8002e90:	40026428 	.word	0x40026428
 8002e94:	40026440 	.word	0x40026440
 8002e98:	40026458 	.word	0x40026458
 8002e9c:	40026470 	.word	0x40026470
 8002ea0:	40026488 	.word	0x40026488
 8002ea4:	400264a0 	.word	0x400264a0
 8002ea8:	400264b8 	.word	0x400264b8
 8002eac:	0800a3cc 	.word	0x0800a3cc
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d012      	beq.n	8002ede <HAL_DMA_Init+0x2c2>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ec0:	d00d      	beq.n	8002ede <HAL_DMA_Init+0x2c2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eca:	d008      	beq.n	8002ede <HAL_DMA_Init+0x2c2>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ed4:	d003      	beq.n	8002ede <HAL_DMA_Init+0x2c2>
 8002ed6:	21c6      	movs	r1, #198	; 0xc6
 8002ed8:	485b      	ldr	r0, [pc, #364]	; (8003048 <HAL_DMA_Init+0x42c>)
 8002eda:	f7fe f99c 	bl	8001216 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d012      	beq.n	8002f0c <HAL_DMA_Init+0x2f0>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eee:	d00d      	beq.n	8002f0c <HAL_DMA_Init+0x2f0>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef8:	d008      	beq.n	8002f0c <HAL_DMA_Init+0x2f0>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002f02:	d003      	beq.n	8002f0c <HAL_DMA_Init+0x2f0>
 8002f04:	21c7      	movs	r1, #199	; 0xc7
 8002f06:	4850      	ldr	r0, [pc, #320]	; (8003048 <HAL_DMA_Init+0x42c>)
 8002f08:	f7fe f985 	bl	8001216 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0201 	bic.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f2c:	e00f      	b.n	8002f4e <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f2e:	f7fe fc95 	bl	800185c <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b05      	cmp	r3, #5
 8002f3a:	d908      	bls.n	8002f4e <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2203      	movs	r2, #3
 8002f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e078      	b.n	8003040 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1e8      	bne.n	8002f2e <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	4b39      	ldr	r3, [pc, #228]	; (800304c <HAL_DMA_Init+0x430>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d107      	bne.n	8002fb8 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f023 0307 	bic.w	r3, r3, #7
 8002fce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	d117      	bne.n	8003012 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00e      	beq.n	8003012 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fa1b 	bl	8003430 <DMA_CheckFifoParam>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2240      	movs	r2, #64	; 0x40
 8003004:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800300e:	2301      	movs	r3, #1
 8003010:	e016      	b.n	8003040 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f9d2 	bl	80033c4 <DMA_CalcBaseAndBitshift>
 8003020:	4603      	mov	r3, r0
 8003022:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003028:	223f      	movs	r2, #63	; 0x3f
 800302a:	409a      	lsls	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	0800a3cc 	.word	0x0800a3cc
 800304c:	f010803f 	.word	0xf010803f

08003050 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d004      	beq.n	800306e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2280      	movs	r2, #128	; 0x80
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e00c      	b.n	8003088 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2205      	movs	r2, #5
 8003072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0201 	bic.w	r2, r2, #1
 8003084:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030a0:	4b8e      	ldr	r3, [pc, #568]	; (80032dc <HAL_DMA_IRQHandler+0x248>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a8e      	ldr	r2, [pc, #568]	; (80032e0 <HAL_DMA_IRQHandler+0x24c>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	0a9b      	lsrs	r3, r3, #10
 80030ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030be:	2208      	movs	r2, #8
 80030c0:	409a      	lsls	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d01a      	beq.n	8003100 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d013      	beq.n	8003100 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0204 	bic.w	r2, r2, #4
 80030e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ec:	2208      	movs	r2, #8
 80030ee:	409a      	lsls	r2, r3
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f8:	f043 0201 	orr.w	r2, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003104:	2201      	movs	r2, #1
 8003106:	409a      	lsls	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d012      	beq.n	8003136 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00b      	beq.n	8003136 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003122:	2201      	movs	r2, #1
 8003124:	409a      	lsls	r2, r3
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312e:	f043 0202 	orr.w	r2, r3, #2
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313a:	2204      	movs	r2, #4
 800313c:	409a      	lsls	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4013      	ands	r3, r2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d012      	beq.n	800316c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00b      	beq.n	800316c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003158:	2204      	movs	r2, #4
 800315a:	409a      	lsls	r2, r3
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003164:	f043 0204 	orr.w	r2, r3, #4
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003170:	2210      	movs	r2, #16
 8003172:	409a      	lsls	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d043      	beq.n	8003204 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d03c      	beq.n	8003204 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318e:	2210      	movs	r2, #16
 8003190:	409a      	lsls	r2, r3
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d018      	beq.n	80031d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d108      	bne.n	80031c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d024      	beq.n	8003204 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	4798      	blx	r3
 80031c2:	e01f      	b.n	8003204 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d01b      	beq.n	8003204 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	4798      	blx	r3
 80031d4:	e016      	b.n	8003204 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d107      	bne.n	80031f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0208 	bic.w	r2, r2, #8
 80031f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003208:	2220      	movs	r2, #32
 800320a:	409a      	lsls	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 808f 	beq.w	8003334 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 8087 	beq.w	8003334 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322a:	2220      	movs	r2, #32
 800322c:	409a      	lsls	r2, r3
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b05      	cmp	r3, #5
 800323c:	d136      	bne.n	80032ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0216 	bic.w	r2, r2, #22
 800324c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695a      	ldr	r2, [r3, #20]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800325c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d103      	bne.n	800326e <HAL_DMA_IRQHandler+0x1da>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800326a:	2b00      	cmp	r3, #0
 800326c:	d007      	beq.n	800327e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0208 	bic.w	r2, r2, #8
 800327c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003282:	223f      	movs	r2, #63	; 0x3f
 8003284:	409a      	lsls	r2, r3
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d07e      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4798      	blx	r3
        }
        return;
 80032aa:	e079      	b.n	80033a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d01d      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10d      	bne.n	80032e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d031      	beq.n	8003334 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	4798      	blx	r3
 80032d8:	e02c      	b.n	8003334 <HAL_DMA_IRQHandler+0x2a0>
 80032da:	bf00      	nop
 80032dc:	20000000 	.word	0x20000000
 80032e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d023      	beq.n	8003334 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	4798      	blx	r3
 80032f4:	e01e      	b.n	8003334 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10f      	bne.n	8003324 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0210 	bic.w	r2, r2, #16
 8003312:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003338:	2b00      	cmp	r3, #0
 800333a:	d032      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d022      	beq.n	800338e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2205      	movs	r2, #5
 800334c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0201 	bic.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	3301      	adds	r3, #1
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	429a      	cmp	r2, r3
 800336a:	d307      	bcc.n	800337c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f2      	bne.n	8003360 <HAL_DMA_IRQHandler+0x2cc>
 800337a:	e000      	b.n	800337e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800337c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003392:	2b00      	cmp	r3, #0
 8003394:	d005      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	4798      	blx	r3
 800339e:	e000      	b.n	80033a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80033a0:	bf00      	nop
    }
  }
}
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033b6:	b2db      	uxtb	r3, r3
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	3b10      	subs	r3, #16
 80033d4:	4a14      	ldr	r2, [pc, #80]	; (8003428 <DMA_CalcBaseAndBitshift+0x64>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033de:	4a13      	ldr	r2, [pc, #76]	; (800342c <DMA_CalcBaseAndBitshift+0x68>)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b03      	cmp	r3, #3
 80033f0:	d909      	bls.n	8003406 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80033fa:	f023 0303 	bic.w	r3, r3, #3
 80033fe:	1d1a      	adds	r2, r3, #4
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	659a      	str	r2, [r3, #88]	; 0x58
 8003404:	e007      	b.n	8003416 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800340e:	f023 0303 	bic.w	r3, r3, #3
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800341a:	4618      	mov	r0, r3
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	aaaaaaab 	.word	0xaaaaaaab
 800342c:	0800a57c 	.word	0x0800a57c

08003430 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003440:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d11f      	bne.n	800348a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b03      	cmp	r3, #3
 800344e:	d856      	bhi.n	80034fe <DMA_CheckFifoParam+0xce>
 8003450:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <DMA_CheckFifoParam+0x28>)
 8003452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003456:	bf00      	nop
 8003458:	08003469 	.word	0x08003469
 800345c:	0800347b 	.word	0x0800347b
 8003460:	08003469 	.word	0x08003469
 8003464:	080034ff 	.word	0x080034ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d046      	beq.n	8003502 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003478:	e043      	b.n	8003502 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003482:	d140      	bne.n	8003506 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003488:	e03d      	b.n	8003506 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003492:	d121      	bne.n	80034d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b03      	cmp	r3, #3
 8003498:	d837      	bhi.n	800350a <DMA_CheckFifoParam+0xda>
 800349a:	a201      	add	r2, pc, #4	; (adr r2, 80034a0 <DMA_CheckFifoParam+0x70>)
 800349c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a0:	080034b1 	.word	0x080034b1
 80034a4:	080034b7 	.word	0x080034b7
 80034a8:	080034b1 	.word	0x080034b1
 80034ac:	080034c9 	.word	0x080034c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
      break;
 80034b4:	e030      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d025      	beq.n	800350e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c6:	e022      	b.n	800350e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034d0:	d11f      	bne.n	8003512 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034d6:	e01c      	b.n	8003512 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d903      	bls.n	80034e6 <DMA_CheckFifoParam+0xb6>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d003      	beq.n	80034ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034e4:	e018      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	73fb      	strb	r3, [r7, #15]
      break;
 80034ea:	e015      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00e      	beq.n	8003516 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]
      break;
 80034fc:	e00b      	b.n	8003516 <DMA_CheckFifoParam+0xe6>
      break;
 80034fe:	bf00      	nop
 8003500:	e00a      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      break;
 8003502:	bf00      	nop
 8003504:	e008      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      break;
 8003506:	bf00      	nop
 8003508:	e006      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      break;
 800350a:	bf00      	nop
 800350c:	e004      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      break;
 800350e:	bf00      	nop
 8003510:	e002      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      break;   
 8003512:	bf00      	nop
 8003514:	e000      	b.n	8003518 <DMA_CheckFifoParam+0xe8>
      break;
 8003516:	bf00      	nop
    }
  } 
  
  return status; 
 8003518:	7bfb      	ldrb	r3, [r7, #15]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop

08003528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800353a:	2300      	movs	r3, #0
 800353c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a37      	ldr	r2, [pc, #220]	; (8003620 <HAL_GPIO_Init+0xf8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01f      	beq.n	8003586 <HAL_GPIO_Init+0x5e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a36      	ldr	r2, [pc, #216]	; (8003624 <HAL_GPIO_Init+0xfc>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01b      	beq.n	8003586 <HAL_GPIO_Init+0x5e>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a35      	ldr	r2, [pc, #212]	; (8003628 <HAL_GPIO_Init+0x100>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d017      	beq.n	8003586 <HAL_GPIO_Init+0x5e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a34      	ldr	r2, [pc, #208]	; (800362c <HAL_GPIO_Init+0x104>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d013      	beq.n	8003586 <HAL_GPIO_Init+0x5e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a33      	ldr	r2, [pc, #204]	; (8003630 <HAL_GPIO_Init+0x108>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00f      	beq.n	8003586 <HAL_GPIO_Init+0x5e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a32      	ldr	r2, [pc, #200]	; (8003634 <HAL_GPIO_Init+0x10c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00b      	beq.n	8003586 <HAL_GPIO_Init+0x5e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a31      	ldr	r2, [pc, #196]	; (8003638 <HAL_GPIO_Init+0x110>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <HAL_GPIO_Init+0x5e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a30      	ldr	r2, [pc, #192]	; (800363c <HAL_GPIO_Init+0x114>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d003      	beq.n	8003586 <HAL_GPIO_Init+0x5e>
 800357e:	21ac      	movs	r1, #172	; 0xac
 8003580:	482f      	ldr	r0, [pc, #188]	; (8003640 <HAL_GPIO_Init+0x118>)
 8003582:	f7fd fe48 	bl	8001216 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <HAL_GPIO_Init+0x74>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	0c1b      	lsrs	r3, r3, #16
 8003596:	041b      	lsls	r3, r3, #16
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_GPIO_Init+0x7c>
 800359c:	21ad      	movs	r1, #173	; 0xad
 800359e:	4828      	ldr	r0, [pc, #160]	; (8003640 <HAL_GPIO_Init+0x118>)
 80035a0:	f7fd fe39 	bl	8001216 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d035      	beq.n	8003618 <HAL_GPIO_Init+0xf0>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d031      	beq.n	8003618 <HAL_GPIO_Init+0xf0>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b11      	cmp	r3, #17
 80035ba:	d02d      	beq.n	8003618 <HAL_GPIO_Init+0xf0>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d029      	beq.n	8003618 <HAL_GPIO_Init+0xf0>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b12      	cmp	r3, #18
 80035ca:	d025      	beq.n	8003618 <HAL_GPIO_Init+0xf0>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80035d4:	d020      	beq.n	8003618 <HAL_GPIO_Init+0xf0>
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80035de:	d01b      	beq.n	8003618 <HAL_GPIO_Init+0xf0>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80035e8:	d016      	beq.n	8003618 <HAL_GPIO_Init+0xf0>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80035f2:	d011      	beq.n	8003618 <HAL_GPIO_Init+0xf0>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80035fc:	d00c      	beq.n	8003618 <HAL_GPIO_Init+0xf0>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8003606:	d007      	beq.n	8003618 <HAL_GPIO_Init+0xf0>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_Init+0xf0>
 8003610:	21ae      	movs	r1, #174	; 0xae
 8003612:	480b      	ldr	r0, [pc, #44]	; (8003640 <HAL_GPIO_Init+0x118>)
 8003614:	f7fd fdff 	bl	8001216 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
 800361c:	e289      	b.n	8003b32 <HAL_GPIO_Init+0x60a>
 800361e:	bf00      	nop
 8003620:	40020000 	.word	0x40020000
 8003624:	40020400 	.word	0x40020400
 8003628:	40020800 	.word	0x40020800
 800362c:	40020c00 	.word	0x40020c00
 8003630:	40021000 	.word	0x40021000
 8003634:	40021400 	.word	0x40021400
 8003638:	40021800 	.word	0x40021800
 800363c:	40021c00 	.word	0x40021c00
 8003640:	0800a404 	.word	0x0800a404
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003644:	2201      	movs	r2, #1
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4013      	ands	r3, r2
 8003656:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	429a      	cmp	r2, r3
 800365e:	f040 8265 	bne.w	8003b2c <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	2b01      	cmp	r3, #1
 800366c:	d005      	beq.n	800367a <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003676:	2b02      	cmp	r3, #2
 8003678:	d144      	bne.n	8003704 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00f      	beq.n	80036a2 <HAL_GPIO_Init+0x17a>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d00b      	beq.n	80036a2 <HAL_GPIO_Init+0x17a>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d007      	beq.n	80036a2 <HAL_GPIO_Init+0x17a>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	2b03      	cmp	r3, #3
 8003698:	d003      	beq.n	80036a2 <HAL_GPIO_Init+0x17a>
 800369a:	21c0      	movs	r1, #192	; 0xc0
 800369c:	4831      	ldr	r0, [pc, #196]	; (8003764 <HAL_GPIO_Init+0x23c>)
 800369e:	f7fd fdba 	bl	8001216 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	2203      	movs	r2, #3
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4013      	ands	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036d8:	2201      	movs	r2, #1
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f003 0201 	and.w	r2, r3, #1
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	2b03      	cmp	r3, #3
 800370e:	d02b      	beq.n	8003768 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00b      	beq.n	8003730 <HAL_GPIO_Init+0x208>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d007      	beq.n	8003730 <HAL_GPIO_Init+0x208>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b02      	cmp	r3, #2
 8003726:	d003      	beq.n	8003730 <HAL_GPIO_Init+0x208>
 8003728:	21d1      	movs	r1, #209	; 0xd1
 800372a:	480e      	ldr	r0, [pc, #56]	; (8003764 <HAL_GPIO_Init+0x23c>)
 800372c:	f7fd fd73 	bl	8001216 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	2203      	movs	r2, #3
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	60da      	str	r2, [r3, #12]
 8003760:	e002      	b.n	8003768 <HAL_GPIO_Init+0x240>
 8003762:	bf00      	nop
 8003764:	0800a404 	.word	0x0800a404
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	2b02      	cmp	r3, #2
 8003772:	f040 810c 	bne.w	800398e <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 80e3 	beq.w	8003946 <HAL_GPIO_Init+0x41e>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	2b09      	cmp	r3, #9
 8003786:	f000 80de 	beq.w	8003946 <HAL_GPIO_Init+0x41e>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 80d9 	beq.w	8003946 <HAL_GPIO_Init+0x41e>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80d4 	beq.w	8003946 <HAL_GPIO_Init+0x41e>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 80cf 	beq.w	8003946 <HAL_GPIO_Init+0x41e>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80ca 	beq.w	8003946 <HAL_GPIO_Init+0x41e>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	f000 80c5 	beq.w	8003946 <HAL_GPIO_Init+0x41e>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	f000 80c0 	beq.w	8003946 <HAL_GPIO_Init+0x41e>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	f000 80bb 	beq.w	8003946 <HAL_GPIO_Init+0x41e>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	f000 80b6 	beq.w	8003946 <HAL_GPIO_Init+0x41e>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	f000 80b1 	beq.w	8003946 <HAL_GPIO_Init+0x41e>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	f000 80ac 	beq.w	8003946 <HAL_GPIO_Init+0x41e>
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	f000 80a7 	beq.w	8003946 <HAL_GPIO_Init+0x41e>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	f000 80a2 	beq.w	8003946 <HAL_GPIO_Init+0x41e>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2b04      	cmp	r3, #4
 8003808:	f000 809d 	beq.w	8003946 <HAL_GPIO_Init+0x41e>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	2b05      	cmp	r3, #5
 8003812:	f000 8098 	beq.w	8003946 <HAL_GPIO_Init+0x41e>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b05      	cmp	r3, #5
 800381c:	f000 8093 	beq.w	8003946 <HAL_GPIO_Init+0x41e>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	2b09      	cmp	r3, #9
 8003826:	f000 808e 	beq.w	8003946 <HAL_GPIO_Init+0x41e>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b06      	cmp	r3, #6
 8003830:	f000 8089 	beq.w	8003946 <HAL_GPIO_Init+0x41e>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	2b09      	cmp	r3, #9
 800383a:	f000 8084 	beq.w	8003946 <HAL_GPIO_Init+0x41e>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b07      	cmp	r3, #7
 8003844:	d07f      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2b07      	cmp	r3, #7
 800384c:	d07b      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	2b07      	cmp	r3, #7
 8003854:	d077      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	2b08      	cmp	r3, #8
 800385c:	d073      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	2b08      	cmp	r3, #8
 8003864:	d06f      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b08      	cmp	r3, #8
 800386c:	d06b      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b09      	cmp	r3, #9
 8003874:	d067      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	2b09      	cmp	r3, #9
 800387c:	d063      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	2b0a      	cmp	r3, #10
 8003884:	d05f      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b0a      	cmp	r3, #10
 800388c:	d05b      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2b0b      	cmp	r3, #11
 8003894:	d057      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b0c      	cmp	r3, #12
 800389c:	d053      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b0c      	cmp	r3, #12
 80038a4:	d04f      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b0d      	cmp	r3, #13
 80038ac:	d04b      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b0f      	cmp	r3, #15
 80038b4:	d047      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b05      	cmp	r3, #5
 80038bc:	d043      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b0c      	cmp	r3, #12
 80038c4:	d03f      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	2b06      	cmp	r3, #6
 80038cc:	d03b      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d037      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d033      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	2b05      	cmp	r3, #5
 80038e4:	d02f      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2b06      	cmp	r3, #6
 80038ec:	d02b      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	2b06      	cmp	r3, #6
 80038f4:	d027      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b07      	cmp	r3, #7
 80038fc:	d023      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	2b07      	cmp	r3, #7
 8003904:	d01f      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	2b07      	cmp	r3, #7
 800390c:	d01b      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b07      	cmp	r3, #7
 8003914:	d017      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b08      	cmp	r3, #8
 800391c:	d013      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	2b08      	cmp	r3, #8
 8003924:	d00f      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b09      	cmp	r3, #9
 800392c:	d00b      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b0a      	cmp	r3, #10
 8003934:	d007      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	2b0a      	cmp	r3, #10
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_Init+0x41e>
 800393e:	21de      	movs	r1, #222	; 0xde
 8003940:	4880      	ldr	r0, [pc, #512]	; (8003b44 <HAL_GPIO_Init+0x61c>)
 8003942:	f7fd fc68 	bl	8001216 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	08da      	lsrs	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3208      	adds	r2, #8
 800394e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	220f      	movs	r2, #15
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43db      	mvns	r3, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4013      	ands	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	691a      	ldr	r2, [r3, #16]
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4313      	orrs	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	08da      	lsrs	r2, r3, #3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3208      	adds	r2, #8
 8003988:	69b9      	ldr	r1, [r7, #24]
 800398a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	2203      	movs	r2, #3
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4013      	ands	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f003 0203 	and.w	r2, r3, #3
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80ae 	beq.w	8003b2c <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	4b5c      	ldr	r3, [pc, #368]	; (8003b48 <HAL_GPIO_Init+0x620>)
 80039d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d8:	4a5b      	ldr	r2, [pc, #364]	; (8003b48 <HAL_GPIO_Init+0x620>)
 80039da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039de:	6453      	str	r3, [r2, #68]	; 0x44
 80039e0:	4b59      	ldr	r3, [pc, #356]	; (8003b48 <HAL_GPIO_Init+0x620>)
 80039e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ec:	4a57      	ldr	r2, [pc, #348]	; (8003b4c <HAL_GPIO_Init+0x624>)
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	089b      	lsrs	r3, r3, #2
 80039f2:	3302      	adds	r3, #2
 80039f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	f003 0303 	and.w	r3, r3, #3
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	220f      	movs	r2, #15
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a4f      	ldr	r2, [pc, #316]	; (8003b50 <HAL_GPIO_Init+0x628>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d025      	beq.n	8003a64 <HAL_GPIO_Init+0x53c>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a4e      	ldr	r2, [pc, #312]	; (8003b54 <HAL_GPIO_Init+0x62c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d01f      	beq.n	8003a60 <HAL_GPIO_Init+0x538>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a4d      	ldr	r2, [pc, #308]	; (8003b58 <HAL_GPIO_Init+0x630>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d019      	beq.n	8003a5c <HAL_GPIO_Init+0x534>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a4c      	ldr	r2, [pc, #304]	; (8003b5c <HAL_GPIO_Init+0x634>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d013      	beq.n	8003a58 <HAL_GPIO_Init+0x530>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a4b      	ldr	r2, [pc, #300]	; (8003b60 <HAL_GPIO_Init+0x638>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00d      	beq.n	8003a54 <HAL_GPIO_Init+0x52c>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a4a      	ldr	r2, [pc, #296]	; (8003b64 <HAL_GPIO_Init+0x63c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d007      	beq.n	8003a50 <HAL_GPIO_Init+0x528>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a49      	ldr	r2, [pc, #292]	; (8003b68 <HAL_GPIO_Init+0x640>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d101      	bne.n	8003a4c <HAL_GPIO_Init+0x524>
 8003a48:	2306      	movs	r3, #6
 8003a4a:	e00c      	b.n	8003a66 <HAL_GPIO_Init+0x53e>
 8003a4c:	2307      	movs	r3, #7
 8003a4e:	e00a      	b.n	8003a66 <HAL_GPIO_Init+0x53e>
 8003a50:	2305      	movs	r3, #5
 8003a52:	e008      	b.n	8003a66 <HAL_GPIO_Init+0x53e>
 8003a54:	2304      	movs	r3, #4
 8003a56:	e006      	b.n	8003a66 <HAL_GPIO_Init+0x53e>
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e004      	b.n	8003a66 <HAL_GPIO_Init+0x53e>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e002      	b.n	8003a66 <HAL_GPIO_Init+0x53e>
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <HAL_GPIO_Init+0x53e>
 8003a64:	2300      	movs	r3, #0
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	f002 0203 	and.w	r2, r2, #3
 8003a6c:	0092      	lsls	r2, r2, #2
 8003a6e:	4093      	lsls	r3, r2
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a76:	4935      	ldr	r1, [pc, #212]	; (8003b4c <HAL_GPIO_Init+0x624>)
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	089b      	lsrs	r3, r3, #2
 8003a7c:	3302      	adds	r3, #2
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a84:	4b39      	ldr	r3, [pc, #228]	; (8003b6c <HAL_GPIO_Init+0x644>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4013      	ands	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aa8:	4a30      	ldr	r2, [pc, #192]	; (8003b6c <HAL_GPIO_Init+0x644>)
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aae:	4b2f      	ldr	r3, [pc, #188]	; (8003b6c <HAL_GPIO_Init+0x644>)
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4013      	ands	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ad2:	4a26      	ldr	r2, [pc, #152]	; (8003b6c <HAL_GPIO_Init+0x644>)
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ad8:	4b24      	ldr	r3, [pc, #144]	; (8003b6c <HAL_GPIO_Init+0x644>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003afc:	4a1b      	ldr	r2, [pc, #108]	; (8003b6c <HAL_GPIO_Init+0x644>)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b02:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <HAL_GPIO_Init+0x644>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b26:	4a11      	ldr	r2, [pc, #68]	; (8003b6c <HAL_GPIO_Init+0x644>)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	2b0f      	cmp	r3, #15
 8003b36:	f67f ad85 	bls.w	8003644 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 8003b3a:	bf00      	nop
 8003b3c:	bf00      	nop
 8003b3e:	3720      	adds	r7, #32
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	0800a404 	.word	0x0800a404
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	40013800 	.word	0x40013800
 8003b50:	40020000 	.word	0x40020000
 8003b54:	40020400 	.word	0x40020400
 8003b58:	40020800 	.word	0x40020800
 8003b5c:	40020c00 	.word	0x40020c00
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40021400 	.word	0x40021400
 8003b68:	40021800 	.word	0x40021800
 8003b6c:	40013c00 	.word	0x40013c00

08003b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	807b      	strh	r3, [r7, #2]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003b80:	887b      	ldrh	r3, [r7, #2]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d004      	beq.n	8003b90 <HAL_GPIO_WritePin+0x20>
 8003b86:	887b      	ldrh	r3, [r7, #2]
 8003b88:	0c1b      	lsrs	r3, r3, #16
 8003b8a:	041b      	lsls	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d004      	beq.n	8003b9a <HAL_GPIO_WritePin+0x2a>
 8003b90:	f240 119d 	movw	r1, #413	; 0x19d
 8003b94:	480e      	ldr	r0, [pc, #56]	; (8003bd0 <HAL_GPIO_WritePin+0x60>)
 8003b96:	f7fd fb3e 	bl	8001216 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003b9a:	787b      	ldrb	r3, [r7, #1]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d007      	beq.n	8003bb0 <HAL_GPIO_WritePin+0x40>
 8003ba0:	787b      	ldrb	r3, [r7, #1]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d004      	beq.n	8003bb0 <HAL_GPIO_WritePin+0x40>
 8003ba6:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8003baa:	4809      	ldr	r0, [pc, #36]	; (8003bd0 <HAL_GPIO_WritePin+0x60>)
 8003bac:	f7fd fb33 	bl	8001216 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003bb0:	787b      	ldrb	r3, [r7, #1]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bb6:	887a      	ldrh	r2, [r7, #2]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bbc:	e003      	b.n	8003bc6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bbe:	887b      	ldrh	r3, [r7, #2]
 8003bc0:	041a      	lsls	r2, r3, #16
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	619a      	str	r2, [r3, #24]
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	0800a404 	.word	0x0800a404

08003bd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e1bd      	b.n	8003f62 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a93      	ldr	r2, [pc, #588]	; (8003e38 <HAL_I2C_Init+0x264>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00e      	beq.n	8003c0e <HAL_I2C_Init+0x3a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a91      	ldr	r2, [pc, #580]	; (8003e3c <HAL_I2C_Init+0x268>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d009      	beq.n	8003c0e <HAL_I2C_Init+0x3a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a90      	ldr	r2, [pc, #576]	; (8003e40 <HAL_I2C_Init+0x26c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d004      	beq.n	8003c0e <HAL_I2C_Init+0x3a>
 8003c04:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8003c08:	488e      	ldr	r0, [pc, #568]	; (8003e44 <HAL_I2C_Init+0x270>)
 8003c0a:	f7fd fb04 	bl	8001216 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d004      	beq.n	8003c20 <HAL_I2C_Init+0x4c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	4a8b      	ldr	r2, [pc, #556]	; (8003e48 <HAL_I2C_Init+0x274>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d904      	bls.n	8003c2a <HAL_I2C_Init+0x56>
 8003c20:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003c24:	4887      	ldr	r0, [pc, #540]	; (8003e44 <HAL_I2C_Init+0x270>)
 8003c26:	f7fd faf6 	bl	8001216 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d009      	beq.n	8003c46 <HAL_I2C_Init+0x72>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c3a:	d004      	beq.n	8003c46 <HAL_I2C_Init+0x72>
 8003c3c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003c40:	4880      	ldr	r0, [pc, #512]	; (8003e44 <HAL_I2C_Init+0x270>)
 8003c42:	f7fd fae8 	bl	8001216 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c4e:	f023 0303 	bic.w	r3, r3, #3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d004      	beq.n	8003c60 <HAL_I2C_Init+0x8c>
 8003c56:	f240 11c1 	movw	r1, #449	; 0x1c1
 8003c5a:	487a      	ldr	r0, [pc, #488]	; (8003e44 <HAL_I2C_Init+0x270>)
 8003c5c:	f7fd fadb 	bl	8001216 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c68:	d009      	beq.n	8003c7e <HAL_I2C_Init+0xaa>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c72:	d004      	beq.n	8003c7e <HAL_I2C_Init+0xaa>
 8003c74:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003c78:	4872      	ldr	r0, [pc, #456]	; (8003e44 <HAL_I2C_Init+0x270>)
 8003c7a:	f7fd facc 	bl	8001216 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <HAL_I2C_Init+0xc4>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d004      	beq.n	8003c98 <HAL_I2C_Init+0xc4>
 8003c8e:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003c92:	486c      	ldr	r0, [pc, #432]	; (8003e44 <HAL_I2C_Init+0x270>)
 8003c94:	f7fd fabf 	bl	8001216 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d004      	beq.n	8003cae <HAL_I2C_Init+0xda>
 8003ca4:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8003ca8:	4866      	ldr	r0, [pc, #408]	; (8003e44 <HAL_I2C_Init+0x270>)
 8003caa:	f7fd fab4 	bl	8001216 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d008      	beq.n	8003cc8 <HAL_I2C_Init+0xf4>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	2b40      	cmp	r3, #64	; 0x40
 8003cbc:	d004      	beq.n	8003cc8 <HAL_I2C_Init+0xf4>
 8003cbe:	f240 11c5 	movw	r1, #453	; 0x1c5
 8003cc2:	4860      	ldr	r0, [pc, #384]	; (8003e44 <HAL_I2C_Init+0x270>)
 8003cc4:	f7fd faa7 	bl	8001216 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <HAL_I2C_Init+0x10e>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	2b80      	cmp	r3, #128	; 0x80
 8003cd6:	d004      	beq.n	8003ce2 <HAL_I2C_Init+0x10e>
 8003cd8:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8003cdc:	4859      	ldr	r0, [pc, #356]	; (8003e44 <HAL_I2C_Init+0x270>)
 8003cde:	f7fd fa9a 	bl	8001216 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fd f936 	bl	8000f68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2224      	movs	r2, #36	; 0x24
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d34:	f002 fe48 	bl	80069c8 <HAL_RCC_GetPCLK1Freq>
 8003d38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4a43      	ldr	r2, [pc, #268]	; (8003e4c <HAL_I2C_Init+0x278>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d807      	bhi.n	8003d54 <HAL_I2C_Init+0x180>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4a42      	ldr	r2, [pc, #264]	; (8003e50 <HAL_I2C_Init+0x27c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	bf94      	ite	ls
 8003d4c:	2301      	movls	r3, #1
 8003d4e:	2300      	movhi	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	e006      	b.n	8003d62 <HAL_I2C_Init+0x18e>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4a3f      	ldr	r2, [pc, #252]	; (8003e54 <HAL_I2C_Init+0x280>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	bf94      	ite	ls
 8003d5c:	2301      	movls	r3, #1
 8003d5e:	2300      	movhi	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e0fb      	b.n	8003f62 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4a3a      	ldr	r2, [pc, #232]	; (8003e58 <HAL_I2C_Init+0x284>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	0c9b      	lsrs	r3, r3, #18
 8003d74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	4a2c      	ldr	r2, [pc, #176]	; (8003e4c <HAL_I2C_Init+0x278>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d802      	bhi.n	8003da4 <HAL_I2C_Init+0x1d0>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	3301      	adds	r3, #1
 8003da2:	e009      	b.n	8003db8 <HAL_I2C_Init+0x1e4>
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003daa:	fb02 f303 	mul.w	r3, r2, r3
 8003dae:	4a2b      	ldr	r2, [pc, #172]	; (8003e5c <HAL_I2C_Init+0x288>)
 8003db0:	fba2 2303 	umull	r2, r3, r2, r3
 8003db4:	099b      	lsrs	r3, r3, #6
 8003db6:	3301      	adds	r3, #1
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003dca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	491e      	ldr	r1, [pc, #120]	; (8003e4c <HAL_I2C_Init+0x278>)
 8003dd4:	428b      	cmp	r3, r1
 8003dd6:	d819      	bhi.n	8003e0c <HAL_I2C_Init+0x238>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	1e59      	subs	r1, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003de6:	1c59      	adds	r1, r3, #1
 8003de8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003dec:	400b      	ands	r3, r1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_I2C_Init+0x234>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	1e59      	subs	r1, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e00:	3301      	adds	r3, #1
 8003e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e06:	e065      	b.n	8003ed4 <HAL_I2C_Init+0x300>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	e063      	b.n	8003ed4 <HAL_I2C_Init+0x300>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d125      	bne.n	8003e60 <HAL_I2C_Init+0x28c>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1e58      	subs	r0, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6859      	ldr	r1, [r3, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	440b      	add	r3, r1
 8003e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e26:	3301      	adds	r3, #1
 8003e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	bf0c      	ite	eq
 8003e30:	2301      	moveq	r3, #1
 8003e32:	2300      	movne	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	e026      	b.n	8003e86 <HAL_I2C_Init+0x2b2>
 8003e38:	40005400 	.word	0x40005400
 8003e3c:	40005800 	.word	0x40005800
 8003e40:	40005c00 	.word	0x40005c00
 8003e44:	0800a440 	.word	0x0800a440
 8003e48:	00061a80 	.word	0x00061a80
 8003e4c:	000186a0 	.word	0x000186a0
 8003e50:	001e847f 	.word	0x001e847f
 8003e54:	003d08ff 	.word	0x003d08ff
 8003e58:	431bde83 	.word	0x431bde83
 8003e5c:	10624dd3 	.word	0x10624dd3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	1e58      	subs	r0, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6859      	ldr	r1, [r3, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	0099      	lsls	r1, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e76:	3301      	adds	r3, #1
 8003e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf0c      	ite	eq
 8003e80:	2301      	moveq	r3, #1
 8003e82:	2300      	movne	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <HAL_I2C_Init+0x2ba>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e022      	b.n	8003ed4 <HAL_I2C_Init+0x300>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10e      	bne.n	8003eb4 <HAL_I2C_Init+0x2e0>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	1e58      	subs	r0, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6859      	ldr	r1, [r3, #4]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	440b      	add	r3, r1
 8003ea4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb2:	e00f      	b.n	8003ed4 <HAL_I2C_Init+0x300>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	1e58      	subs	r0, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6859      	ldr	r1, [r3, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	0099      	lsls	r1, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eca:	3301      	adds	r3, #1
 8003ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	6809      	ldr	r1, [r1, #0]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69da      	ldr	r2, [r3, #28]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6911      	ldr	r1, [r2, #16]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	68d2      	ldr	r2, [r2, #12]
 8003f0e:	4311      	orrs	r1, r2
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	430b      	orrs	r3, r1
 8003f16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695a      	ldr	r2, [r3, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop

08003f6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	607a      	str	r2, [r7, #4]
 8003f76:	461a      	mov	r2, r3
 8003f78:	460b      	mov	r3, r1
 8003f7a:	817b      	strh	r3, [r7, #10]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f80:	f7fd fc6c 	bl	800185c <HAL_GetTick>
 8003f84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	f040 80e0 	bne.w	8004154 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	2319      	movs	r3, #25
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	4970      	ldr	r1, [pc, #448]	; (8004160 <HAL_I2C_Master_Transmit+0x1f4>)
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f002 f8e6 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003faa:	2302      	movs	r3, #2
 8003fac:	e0d3      	b.n	8004156 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_I2C_Master_Transmit+0x50>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e0cc      	b.n	8004156 <HAL_I2C_Master_Transmit+0x1ea>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d007      	beq.n	8003fe2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0201 	orr.w	r2, r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ff0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2221      	movs	r2, #33	; 0x21
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	893a      	ldrh	r2, [r7, #8]
 8004012:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	4a50      	ldr	r2, [pc, #320]	; (8004164 <HAL_I2C_Master_Transmit+0x1f8>)
 8004022:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004024:	8979      	ldrh	r1, [r7, #10]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	6a3a      	ldr	r2, [r7, #32]
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f001 fea8 	bl	8005d80 <I2C_MasterRequestWrite>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e08d      	b.n	8004156 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800403a:	2300      	movs	r3, #0
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004050:	e066      	b.n	8004120 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	6a39      	ldr	r1, [r7, #32]
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f002 f960 	bl	800631c <I2C_WaitOnTXEFlagUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00d      	beq.n	800407e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	2b04      	cmp	r3, #4
 8004068:	d107      	bne.n	800407a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004078:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e06b      	b.n	8004156 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	781a      	ldrb	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d11b      	bne.n	80040f4 <HAL_I2C_Master_Transmit+0x188>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d017      	beq.n	80040f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	781a      	ldrb	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	6a39      	ldr	r1, [r7, #32]
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f002 f950 	bl	800639e <I2C_WaitOnBTFFlagUntilTimeout>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00d      	beq.n	8004120 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	2b04      	cmp	r3, #4
 800410a:	d107      	bne.n	800411c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800411a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e01a      	b.n	8004156 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004124:	2b00      	cmp	r3, #0
 8004126:	d194      	bne.n	8004052 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004136:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	e000      	b.n	8004156 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004154:	2302      	movs	r3, #2
  }
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	00100002 	.word	0x00100002
 8004164:	ffff0000 	.word	0xffff0000

08004168 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08c      	sub	sp, #48	; 0x30
 800416c:	af02      	add	r7, sp, #8
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	607a      	str	r2, [r7, #4]
 8004172:	461a      	mov	r2, r3
 8004174:	460b      	mov	r3, r1
 8004176:	817b      	strh	r3, [r7, #10]
 8004178:	4613      	mov	r3, r2
 800417a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800417c:	f7fd fb6e 	bl	800185c <HAL_GetTick>
 8004180:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b20      	cmp	r3, #32
 800418c:	f040 820b 	bne.w	80045a6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	2319      	movs	r3, #25
 8004196:	2201      	movs	r2, #1
 8004198:	497c      	ldr	r1, [pc, #496]	; (800438c <HAL_I2C_Master_Receive+0x224>)
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f001 ffe8 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80041a6:	2302      	movs	r3, #2
 80041a8:	e1fe      	b.n	80045a8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_I2C_Master_Receive+0x50>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e1f7      	b.n	80045a8 <HAL_I2C_Master_Receive+0x440>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d007      	beq.n	80041de <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f042 0201 	orr.w	r2, r2, #1
 80041dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2222      	movs	r2, #34	; 0x22
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2210      	movs	r2, #16
 80041fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	893a      	ldrh	r2, [r7, #8]
 800420e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4a5c      	ldr	r2, [pc, #368]	; (8004390 <HAL_I2C_Master_Receive+0x228>)
 800421e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004220:	8979      	ldrh	r1, [r7, #10]
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f001 fe2c 	bl	8005e84 <I2C_MasterRequestRead>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e1b8      	b.n	80045a8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423a:	2b00      	cmp	r3, #0
 800423c:	d113      	bne.n	8004266 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800423e:	2300      	movs	r3, #0
 8004240:	623b      	str	r3, [r7, #32]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	623b      	str	r3, [r7, #32]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	623b      	str	r3, [r7, #32]
 8004252:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	e18c      	b.n	8004580 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426a:	2b01      	cmp	r3, #1
 800426c:	d11b      	bne.n	80042a6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800427c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	e16c      	b.n	8004580 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d11b      	bne.n	80042e6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ce:	2300      	movs	r3, #0
 80042d0:	61bb      	str	r3, [r7, #24]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	61bb      	str	r3, [r7, #24]
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	e14c      	b.n	8004580 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800430c:	e138      	b.n	8004580 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004312:	2b03      	cmp	r3, #3
 8004314:	f200 80f1 	bhi.w	80044fa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431c:	2b01      	cmp	r3, #1
 800431e:	d123      	bne.n	8004368 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004322:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f002 f8ad 	bl	8006484 <I2C_WaitOnRXNEFlagUntilTimeout>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e139      	b.n	80045a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691a      	ldr	r2, [r3, #16]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004366:	e10b      	b.n	8004580 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800436c:	2b02      	cmp	r3, #2
 800436e:	d14e      	bne.n	800440e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004376:	2200      	movs	r2, #0
 8004378:	4906      	ldr	r1, [pc, #24]	; (8004394 <HAL_I2C_Master_Receive+0x22c>)
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f001 fef8 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d008      	beq.n	8004398 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e10e      	b.n	80045a8 <HAL_I2C_Master_Receive+0x440>
 800438a:	bf00      	nop
 800438c:	00100002 	.word	0x00100002
 8004390:	ffff0000 	.word	0xffff0000
 8004394:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800440c:	e0b8      	b.n	8004580 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	2200      	movs	r2, #0
 8004416:	4966      	ldr	r1, [pc, #408]	; (80045b0 <HAL_I2C_Master_Receive+0x448>)
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f001 fea9 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e0bf      	b.n	80045a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004436:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	2200      	movs	r2, #0
 8004472:	494f      	ldr	r1, [pc, #316]	; (80045b0 <HAL_I2C_Master_Receive+0x448>)
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f001 fe7b 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e091      	b.n	80045a8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004492:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691a      	ldr	r2, [r3, #16]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	b2d2      	uxtb	r2, r2
 80044d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044f8:	e042      	b.n	8004580 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f001 ffc0 	bl	8006484 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e04c      	b.n	80045a8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b04      	cmp	r3, #4
 800454c:	d118      	bne.n	8004580 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	3b01      	subs	r3, #1
 800457a:	b29a      	uxth	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004584:	2b00      	cmp	r3, #0
 8004586:	f47f aec2 	bne.w	800430e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e000      	b.n	80045a8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80045a6:	2302      	movs	r3, #2
  }
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3728      	adds	r7, #40	; 0x28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	00010004 	.word	0x00010004

080045b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045dc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	d003      	beq.n	80045ec <HAL_I2C_EV_IRQHandler+0x38>
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	2b40      	cmp	r3, #64	; 0x40
 80045e8:	f040 80c1 	bne.w	800476e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10d      	bne.n	8004622 <HAL_I2C_EV_IRQHandler+0x6e>
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800460c:	d003      	beq.n	8004616 <HAL_I2C_EV_IRQHandler+0x62>
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004614:	d101      	bne.n	800461a <HAL_I2C_EV_IRQHandler+0x66>
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <HAL_I2C_EV_IRQHandler+0x68>
 800461a:	2300      	movs	r3, #0
 800461c:	2b01      	cmp	r3, #1
 800461e:	f000 8132 	beq.w	8004886 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00c      	beq.n	8004646 <HAL_I2C_EV_IRQHandler+0x92>
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	0a5b      	lsrs	r3, r3, #9
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d006      	beq.n	8004646 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f001 ffa8 	bl	800658e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 fd83 	bl	800514a <I2C_Master_SB>
 8004644:	e092      	b.n	800476c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	08db      	lsrs	r3, r3, #3
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d009      	beq.n	8004666 <HAL_I2C_EV_IRQHandler+0xb2>
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	0a5b      	lsrs	r3, r3, #9
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fdf9 	bl	8005256 <I2C_Master_ADD10>
 8004664:	e082      	b.n	800476c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d009      	beq.n	8004686 <HAL_I2C_EV_IRQHandler+0xd2>
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	0a5b      	lsrs	r3, r3, #9
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 fe13 	bl	80052aa <I2C_Master_ADDR>
 8004684:	e072      	b.n	800476c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	089b      	lsrs	r3, r3, #2
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d03b      	beq.n	800470a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800469c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046a0:	f000 80f3 	beq.w	800488a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	09db      	lsrs	r3, r3, #7
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00f      	beq.n	80046d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	0a9b      	lsrs	r3, r3, #10
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d009      	beq.n	80046d0 <HAL_I2C_EV_IRQHandler+0x11c>
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	089b      	lsrs	r3, r3, #2
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d103      	bne.n	80046d0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f9f3 	bl	8004ab4 <I2C_MasterTransmit_TXE>
 80046ce:	e04d      	b.n	800476c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80d6 	beq.w	800488a <HAL_I2C_EV_IRQHandler+0x2d6>
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	0a5b      	lsrs	r3, r3, #9
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 80cf 	beq.w	800488a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80046ec:	7bbb      	ldrb	r3, [r7, #14]
 80046ee:	2b21      	cmp	r3, #33	; 0x21
 80046f0:	d103      	bne.n	80046fa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fa7a 	bl	8004bec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046f8:	e0c7      	b.n	800488a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
 80046fc:	2b40      	cmp	r3, #64	; 0x40
 80046fe:	f040 80c4 	bne.w	800488a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fae8 	bl	8004cd8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004708:	e0bf      	b.n	800488a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004718:	f000 80b7 	beq.w	800488a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	099b      	lsrs	r3, r3, #6
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00f      	beq.n	8004748 <HAL_I2C_EV_IRQHandler+0x194>
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	0a9b      	lsrs	r3, r3, #10
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d009      	beq.n	8004748 <HAL_I2C_EV_IRQHandler+0x194>
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	089b      	lsrs	r3, r3, #2
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d103      	bne.n	8004748 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 fb5d 	bl	8004e00 <I2C_MasterReceive_RXNE>
 8004746:	e011      	b.n	800476c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	089b      	lsrs	r3, r3, #2
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 809a 	beq.w	800488a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	0a5b      	lsrs	r3, r3, #9
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 8093 	beq.w	800488a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 fc06 	bl	8004f76 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800476a:	e08e      	b.n	800488a <HAL_I2C_EV_IRQHandler+0x2d6>
 800476c:	e08d      	b.n	800488a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	2b00      	cmp	r3, #0
 8004774:	d004      	beq.n	8004780 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	e007      	b.n	8004790 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	085b      	lsrs	r3, r3, #1
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d012      	beq.n	80047c2 <HAL_I2C_EV_IRQHandler+0x20e>
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	0a5b      	lsrs	r3, r3, #9
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00c      	beq.n	80047c2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80047b8:	69b9      	ldr	r1, [r7, #24]
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 ffc4 	bl	8005748 <I2C_Slave_ADDR>
 80047c0:	e066      	b.n	8004890 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	091b      	lsrs	r3, r3, #4
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <HAL_I2C_EV_IRQHandler+0x22e>
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	0a5b      	lsrs	r3, r3, #9
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fffe 	bl	80057dc <I2C_Slave_STOPF>
 80047e0:	e056      	b.n	8004890 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047e2:	7bbb      	ldrb	r3, [r7, #14]
 80047e4:	2b21      	cmp	r3, #33	; 0x21
 80047e6:	d002      	beq.n	80047ee <HAL_I2C_EV_IRQHandler+0x23a>
 80047e8:	7bbb      	ldrb	r3, [r7, #14]
 80047ea:	2b29      	cmp	r3, #41	; 0x29
 80047ec:	d125      	bne.n	800483a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	09db      	lsrs	r3, r3, #7
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00f      	beq.n	800481a <HAL_I2C_EV_IRQHandler+0x266>
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	0a9b      	lsrs	r3, r3, #10
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d009      	beq.n	800481a <HAL_I2C_EV_IRQHandler+0x266>
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	089b      	lsrs	r3, r3, #2
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d103      	bne.n	800481a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 feda 	bl	80055cc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004818:	e039      	b.n	800488e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	089b      	lsrs	r3, r3, #2
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d033      	beq.n	800488e <HAL_I2C_EV_IRQHandler+0x2da>
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	0a5b      	lsrs	r3, r3, #9
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d02d      	beq.n	800488e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 ff07 	bl	8005646 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004838:	e029      	b.n	800488e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	099b      	lsrs	r3, r3, #6
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00f      	beq.n	8004866 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	0a9b      	lsrs	r3, r3, #10
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	089b      	lsrs	r3, r3, #2
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d103      	bne.n	8004866 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 ff12 	bl	8005688 <I2C_SlaveReceive_RXNE>
 8004864:	e014      	b.n	8004890 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	089b      	lsrs	r3, r3, #2
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00e      	beq.n	8004890 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	0a5b      	lsrs	r3, r3, #9
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b00      	cmp	r3, #0
 800487c:	d008      	beq.n	8004890 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 ff40 	bl	8005704 <I2C_SlaveReceive_BTF>
 8004884:	e004      	b.n	8004890 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004886:	bf00      	nop
 8004888:	e002      	b.n	8004890 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800488a:	bf00      	nop
 800488c:	e000      	b.n	8004890 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800488e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004890:	3720      	adds	r7, #32
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b08a      	sub	sp, #40	; 0x28
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80048ae:	2300      	movs	r3, #0
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048b8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	0a1b      	lsrs	r3, r3, #8
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00e      	beq.n	80048e4 <HAL_I2C_ER_IRQHandler+0x4e>
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	0a1b      	lsrs	r3, r3, #8
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d008      	beq.n	80048e4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	f043 0301 	orr.w	r3, r3, #1
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048e2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	0a5b      	lsrs	r3, r3, #9
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00e      	beq.n	800490e <HAL_I2C_ER_IRQHandler+0x78>
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	0a1b      	lsrs	r3, r3, #8
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	f043 0302 	orr.w	r3, r3, #2
 8004902:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800490c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	0a9b      	lsrs	r3, r3, #10
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d03f      	beq.n	800499a <HAL_I2C_ER_IRQHandler+0x104>
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	0a1b      	lsrs	r3, r3, #8
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d039      	beq.n	800499a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004926:	7efb      	ldrb	r3, [r7, #27]
 8004928:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492e:	b29b      	uxth	r3, r3
 8004930:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004938:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004940:	7ebb      	ldrb	r3, [r7, #26]
 8004942:	2b20      	cmp	r3, #32
 8004944:	d112      	bne.n	800496c <HAL_I2C_ER_IRQHandler+0xd6>
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10f      	bne.n	800496c <HAL_I2C_ER_IRQHandler+0xd6>
 800494c:	7cfb      	ldrb	r3, [r7, #19]
 800494e:	2b21      	cmp	r3, #33	; 0x21
 8004950:	d008      	beq.n	8004964 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004952:	7cfb      	ldrb	r3, [r7, #19]
 8004954:	2b29      	cmp	r3, #41	; 0x29
 8004956:	d005      	beq.n	8004964 <HAL_I2C_ER_IRQHandler+0xce>
 8004958:	7cfb      	ldrb	r3, [r7, #19]
 800495a:	2b28      	cmp	r3, #40	; 0x28
 800495c:	d106      	bne.n	800496c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b21      	cmp	r3, #33	; 0x21
 8004962:	d103      	bne.n	800496c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f001 f869 	bl	8005a3c <I2C_Slave_AF>
 800496a:	e016      	b.n	800499a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004974:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	f043 0304 	orr.w	r3, r3, #4
 800497c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800497e:	7efb      	ldrb	r3, [r7, #27]
 8004980:	2b10      	cmp	r3, #16
 8004982:	d002      	beq.n	800498a <HAL_I2C_ER_IRQHandler+0xf4>
 8004984:	7efb      	ldrb	r3, [r7, #27]
 8004986:	2b40      	cmp	r3, #64	; 0x40
 8004988:	d107      	bne.n	800499a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004998:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	0adb      	lsrs	r3, r3, #11
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00e      	beq.n	80049c4 <HAL_I2C_ER_IRQHandler+0x12e>
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d008      	beq.n	80049c4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	f043 0308 	orr.w	r3, r3, #8
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80049c2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d008      	beq.n	80049dc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	431a      	orrs	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f001 f8a0 	bl	8005b1c <I2C_ITError>
  }
}
 80049dc:	bf00      	nop
 80049de:	3728      	adds	r7, #40	; 0x28
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	70fb      	strb	r3, [r7, #3]
 8004a40:	4613      	mov	r3, r2
 8004a42:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d150      	bne.n	8004b7c <I2C_MasterTransmit_TXE+0xc8>
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
 8004adc:	2b21      	cmp	r3, #33	; 0x21
 8004ade:	d14d      	bne.n	8004b7c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d01d      	beq.n	8004b22 <I2C_MasterTransmit_TXE+0x6e>
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	d01a      	beq.n	8004b22 <I2C_MasterTransmit_TXE+0x6e>
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004af2:	d016      	beq.n	8004b22 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b02:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2211      	movs	r2, #17
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff ff62 	bl	80049e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b20:	e060      	b.n	8004be4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b30:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b40:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b40      	cmp	r3, #64	; 0x40
 8004b5a:	d107      	bne.n	8004b6c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7ff ff7d 	bl	8004a64 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b6a:	e03b      	b.n	8004be4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff ff35 	bl	80049e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b7a:	e033      	b.n	8004be4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	2b21      	cmp	r3, #33	; 0x21
 8004b80:	d005      	beq.n	8004b8e <I2C_MasterTransmit_TXE+0xda>
 8004b82:	7bbb      	ldrb	r3, [r7, #14]
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	d12d      	bne.n	8004be4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	2b22      	cmp	r3, #34	; 0x22
 8004b8c:	d12a      	bne.n	8004be4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d108      	bne.n	8004baa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004ba8:	e01c      	b.n	8004be4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b40      	cmp	r3, #64	; 0x40
 8004bb4:	d103      	bne.n	8004bbe <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f88e 	bl	8004cd8 <I2C_MemoryTransmit_TXE_BTF>
}
 8004bbc:	e012      	b.n	8004be4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	781a      	ldrb	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004be2:	e7ff      	b.n	8004be4 <I2C_MasterTransmit_TXE+0x130>
 8004be4:	bf00      	nop
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b21      	cmp	r3, #33	; 0x21
 8004c04:	d164      	bne.n	8004cd0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d012      	beq.n	8004c36 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	781a      	ldrb	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004c34:	e04c      	b.n	8004cd0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d01d      	beq.n	8004c78 <I2C_MasterTransmit_BTF+0x8c>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	d01a      	beq.n	8004c78 <I2C_MasterTransmit_BTF+0x8c>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c48:	d016      	beq.n	8004c78 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c58:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2211      	movs	r2, #17
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7ff feb7 	bl	80049e4 <HAL_I2C_MasterTxCpltCallback>
}
 8004c76:	e02b      	b.n	8004cd0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c86:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c96:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b40      	cmp	r3, #64	; 0x40
 8004cb0:	d107      	bne.n	8004cc2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7ff fed2 	bl	8004a64 <HAL_I2C_MemTxCpltCallback>
}
 8004cc0:	e006      	b.n	8004cd0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7ff fe8a 	bl	80049e4 <HAL_I2C_MasterTxCpltCallback>
}
 8004cd0:	bf00      	nop
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d11d      	bne.n	8004d2c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d10b      	bne.n	8004d10 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d08:	1c9a      	adds	r2, r3, #2
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004d0e:	e073      	b.n	8004df8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	121b      	asrs	r3, r3, #8
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d2a:	e065      	b.n	8004df8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d10b      	bne.n	8004d4c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d4a:	e055      	b.n	8004df8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d151      	bne.n	8004df8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
 8004d56:	2b22      	cmp	r3, #34	; 0x22
 8004d58:	d10d      	bne.n	8004d76 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d68:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d74:	e040      	b.n	8004df8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d015      	beq.n	8004dac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
 8004d82:	2b21      	cmp	r3, #33	; 0x21
 8004d84:	d112      	bne.n	8004dac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	781a      	ldrb	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004daa:	e025      	b.n	8004df8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d120      	bne.n	8004df8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004db6:	7bfb      	ldrb	r3, [r7, #15]
 8004db8:	2b21      	cmp	r3, #33	; 0x21
 8004dba:	d11d      	bne.n	8004df8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dda:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2220      	movs	r2, #32
 8004de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7ff fe36 	bl	8004a64 <HAL_I2C_MemTxCpltCallback>
}
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b22      	cmp	r3, #34	; 0x22
 8004e12:	f040 80ac 	bne.w	8004f6e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d921      	bls.n	8004e68 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691a      	ldr	r2, [r3, #16]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	3b01      	subs	r3, #1
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	f040 808c 	bne.w	8004f6e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e64:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004e66:	e082      	b.n	8004f6e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d075      	beq.n	8004f5c <I2C_MasterReceive_RXNE+0x15c>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d002      	beq.n	8004e7c <I2C_MasterReceive_RXNE+0x7c>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d16f      	bne.n	8004f5c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f001 facf 	bl	8006420 <I2C_WaitOnSTOPRequestThroughIT>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d142      	bne.n	8004f0e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e96:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ea6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b40      	cmp	r3, #64	; 0x40
 8004ee0:	d10a      	bne.n	8004ef8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7ff fdc1 	bl	8004a78 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004ef6:	e03a      	b.n	8004f6e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2212      	movs	r2, #18
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff fd76 	bl	80049f8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f0c:	e02f      	b.n	8004f6e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f1c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	b2d2      	uxtb	r2, r2
 8004f2a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f7ff fd99 	bl	8004a8c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f5a:	e008      	b.n	8004f6e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f6a:	605a      	str	r2, [r3, #4]
}
 8004f6c:	e7ff      	b.n	8004f6e <I2C_MasterReceive_RXNE+0x16e>
 8004f6e:	bf00      	nop
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b084      	sub	sp, #16
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f82:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	d11b      	bne.n	8004fc6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f9c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004fc4:	e0bd      	b.n	8005142 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d129      	bne.n	8005024 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fde:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d00a      	beq.n	8004ffc <I2C_MasterReceive_BTF+0x86>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d007      	beq.n	8004ffc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ffa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005022:	e08e      	b.n	8005142 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d176      	bne.n	800511c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d002      	beq.n	800503a <I2C_MasterReceive_BTF+0xc4>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b10      	cmp	r3, #16
 8005038:	d108      	bne.n	800504c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	e019      	b.n	8005080 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b04      	cmp	r3, #4
 8005050:	d002      	beq.n	8005058 <I2C_MasterReceive_BTF+0xe2>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d108      	bne.n	800506a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	e00a      	b.n	8005080 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2b10      	cmp	r3, #16
 800506e:	d007      	beq.n	8005080 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800507e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691a      	ldr	r2, [r3, #16]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80050da:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b40      	cmp	r3, #64	; 0x40
 80050ee:	d10a      	bne.n	8005106 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff fcba 	bl	8004a78 <HAL_I2C_MemRxCpltCallback>
}
 8005104:	e01d      	b.n	8005142 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2212      	movs	r2, #18
 8005112:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff fc6f 	bl	80049f8 <HAL_I2C_MasterRxCpltCallback>
}
 800511a:	e012      	b.n	8005142 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005142:	bf00      	nop
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b40      	cmp	r3, #64	; 0x40
 800515c:	d117      	bne.n	800518e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005162:	2b00      	cmp	r3, #0
 8005164:	d109      	bne.n	800517a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516a:	b2db      	uxtb	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005176:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005178:	e067      	b.n	800524a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517e:	b2db      	uxtb	r3, r3
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	b2da      	uxtb	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	611a      	str	r2, [r3, #16]
}
 800518c:	e05d      	b.n	800524a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005196:	d133      	bne.n	8005200 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b21      	cmp	r3, #33	; 0x21
 80051a2:	d109      	bne.n	80051b8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	461a      	mov	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051b4:	611a      	str	r2, [r3, #16]
 80051b6:	e008      	b.n	80051ca <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	f043 0301 	orr.w	r3, r3, #1
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d004      	beq.n	80051dc <I2C_Master_SB+0x92>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d108      	bne.n	80051ee <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d032      	beq.n	800524a <I2C_Master_SB+0x100>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d02d      	beq.n	800524a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051fc:	605a      	str	r2, [r3, #4]
}
 80051fe:	e024      	b.n	800524a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10e      	bne.n	8005226 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520c:	b29b      	uxth	r3, r3
 800520e:	11db      	asrs	r3, r3, #7
 8005210:	b2db      	uxtb	r3, r3
 8005212:	f003 0306 	and.w	r3, r3, #6
 8005216:	b2db      	uxtb	r3, r3
 8005218:	f063 030f 	orn	r3, r3, #15
 800521c:	b2da      	uxtb	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	611a      	str	r2, [r3, #16]
}
 8005224:	e011      	b.n	800524a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522a:	2b01      	cmp	r3, #1
 800522c:	d10d      	bne.n	800524a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005232:	b29b      	uxth	r3, r3
 8005234:	11db      	asrs	r3, r3, #7
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f003 0306 	and.w	r3, r3, #6
 800523c:	b2db      	uxtb	r3, r3
 800523e:	f063 030e 	orn	r3, r3, #14
 8005242:	b2da      	uxtb	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	611a      	str	r2, [r3, #16]
}
 800524a:	bf00      	nop
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	b2da      	uxtb	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526e:	2b00      	cmp	r3, #0
 8005270:	d004      	beq.n	800527c <I2C_Master_ADD10+0x26>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d108      	bne.n	800528e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00c      	beq.n	800529e <I2C_Master_ADD10+0x48>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528a:	2b00      	cmp	r3, #0
 800528c:	d007      	beq.n	800529e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800529c:	605a      	str	r2, [r3, #4]
  }
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b091      	sub	sp, #68	; 0x44
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b22      	cmp	r3, #34	; 0x22
 80052d2:	f040 8169 	bne.w	80055a8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10f      	bne.n	80052fe <I2C_Master_ADDR+0x54>
 80052de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80052e2:	2b40      	cmp	r3, #64	; 0x40
 80052e4:	d10b      	bne.n	80052fe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052e6:	2300      	movs	r3, #0
 80052e8:	633b      	str	r3, [r7, #48]	; 0x30
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	695b      	ldr	r3, [r3, #20]
 80052f0:	633b      	str	r3, [r7, #48]	; 0x30
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	633b      	str	r3, [r7, #48]	; 0x30
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	e160      	b.n	80055c0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005302:	2b00      	cmp	r3, #0
 8005304:	d11d      	bne.n	8005342 <I2C_Master_ADDR+0x98>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800530e:	d118      	bne.n	8005342 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005310:	2300      	movs	r3, #0
 8005312:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005324:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005334:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	651a      	str	r2, [r3, #80]	; 0x50
 8005340:	e13e      	b.n	80055c0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005346:	b29b      	uxth	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d113      	bne.n	8005374 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800534c:	2300      	movs	r3, #0
 800534e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	62bb      	str	r3, [r7, #40]	; 0x28
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	e115      	b.n	80055a0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005378:	b29b      	uxth	r3, r3
 800537a:	2b01      	cmp	r3, #1
 800537c:	f040 808a 	bne.w	8005494 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005382:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005386:	d137      	bne.n	80053f8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005396:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053a6:	d113      	bne.n	80053d0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053b6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053b8:	2300      	movs	r3, #0
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	e0e7      	b.n	80055a0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053d0:	2300      	movs	r3, #0
 80053d2:	623b      	str	r3, [r7, #32]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	623b      	str	r3, [r7, #32]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699b      	ldr	r3, [r3, #24]
 80053e2:	623b      	str	r3, [r7, #32]
 80053e4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	e0d3      	b.n	80055a0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80053f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fa:	2b08      	cmp	r3, #8
 80053fc:	d02e      	beq.n	800545c <I2C_Master_ADDR+0x1b2>
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	2b20      	cmp	r3, #32
 8005402:	d02b      	beq.n	800545c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005406:	2b12      	cmp	r3, #18
 8005408:	d102      	bne.n	8005410 <I2C_Master_ADDR+0x166>
 800540a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540c:	2b01      	cmp	r3, #1
 800540e:	d125      	bne.n	800545c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005412:	2b04      	cmp	r3, #4
 8005414:	d00e      	beq.n	8005434 <I2C_Master_ADDR+0x18a>
 8005416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005418:	2b02      	cmp	r3, #2
 800541a:	d00b      	beq.n	8005434 <I2C_Master_ADDR+0x18a>
 800541c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541e:	2b10      	cmp	r3, #16
 8005420:	d008      	beq.n	8005434 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	e007      	b.n	8005444 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005442:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005444:	2300      	movs	r3, #0
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	61fb      	str	r3, [r7, #28]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	61fb      	str	r3, [r7, #28]
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	e0a1      	b.n	80055a0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800546a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800546c:	2300      	movs	r3, #0
 800546e:	61bb      	str	r3, [r7, #24]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	61bb      	str	r3, [r7, #24]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	61bb      	str	r3, [r7, #24]
 8005480:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	e085      	b.n	80055a0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005498:	b29b      	uxth	r3, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d14d      	bne.n	800553a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d016      	beq.n	80054d2 <I2C_Master_ADDR+0x228>
 80054a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d013      	beq.n	80054d2 <I2C_Master_ADDR+0x228>
 80054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ac:	2b10      	cmp	r3, #16
 80054ae:	d010      	beq.n	80054d2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054be:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	e007      	b.n	80054e2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054e0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054f0:	d117      	bne.n	8005522 <I2C_Master_ADDR+0x278>
 80054f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054f8:	d00b      	beq.n	8005512 <I2C_Master_ADDR+0x268>
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d008      	beq.n	8005512 <I2C_Master_ADDR+0x268>
 8005500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005502:	2b08      	cmp	r3, #8
 8005504:	d005      	beq.n	8005512 <I2C_Master_ADDR+0x268>
 8005506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005508:	2b10      	cmp	r3, #16
 800550a:	d002      	beq.n	8005512 <I2C_Master_ADDR+0x268>
 800550c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550e:	2b20      	cmp	r3, #32
 8005510:	d107      	bne.n	8005522 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005520:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	617b      	str	r3, [r7, #20]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	e032      	b.n	80055a0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005548:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005558:	d117      	bne.n	800558a <I2C_Master_ADDR+0x2e0>
 800555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005560:	d00b      	beq.n	800557a <I2C_Master_ADDR+0x2d0>
 8005562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005564:	2b01      	cmp	r3, #1
 8005566:	d008      	beq.n	800557a <I2C_Master_ADDR+0x2d0>
 8005568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556a:	2b08      	cmp	r3, #8
 800556c:	d005      	beq.n	800557a <I2C_Master_ADDR+0x2d0>
 800556e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005570:	2b10      	cmp	r3, #16
 8005572:	d002      	beq.n	800557a <I2C_Master_ADDR+0x2d0>
 8005574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005576:	2b20      	cmp	r3, #32
 8005578:	d107      	bne.n	800558a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005588:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800558a:	2300      	movs	r3, #0
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	613b      	str	r3, [r7, #16]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80055a6:	e00b      	b.n	80055c0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	68fb      	ldr	r3, [r7, #12]
}
 80055be:	e7ff      	b.n	80055c0 <I2C_Master_ADDR+0x316>
 80055c0:	bf00      	nop
 80055c2:	3744      	adds	r7, #68	; 0x44
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d02b      	beq.n	800563e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	781a      	ldrb	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005600:	b29b      	uxth	r3, r3
 8005602:	3b01      	subs	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560e:	b29b      	uxth	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d114      	bne.n	800563e <I2C_SlaveTransmit_TXE+0x72>
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	2b29      	cmp	r3, #41	; 0x29
 8005618:	d111      	bne.n	800563e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005628:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2221      	movs	r2, #33	; 0x21
 800562e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2228      	movs	r2, #40	; 0x28
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7ff f9e7 	bl	8004a0c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800563e:	bf00      	nop
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005652:	b29b      	uxth	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d011      	beq.n	800567c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	781a      	ldrb	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005672:	b29b      	uxth	r3, r3
 8005674:	3b01      	subs	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005696:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800569c:	b29b      	uxth	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d02c      	beq.n	80056fc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	691a      	ldr	r2, [r3, #16]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	b2d2      	uxtb	r2, r2
 80056ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056be:	b29b      	uxth	r3, r3
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d114      	bne.n	80056fc <I2C_SlaveReceive_RXNE+0x74>
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
 80056d4:	2b2a      	cmp	r3, #42	; 0x2a
 80056d6:	d111      	bne.n	80056fc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2222      	movs	r2, #34	; 0x22
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2228      	movs	r2, #40	; 0x28
 80056f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff f992 	bl	8004a20 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80056fc:	bf00      	nop
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005710:	b29b      	uxth	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d012      	beq.n	800573c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005732:	b29b      	uxth	r3, r3
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005752:	2300      	movs	r3, #0
 8005754:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575c:	b2db      	uxtb	r3, r3
 800575e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005762:	2b28      	cmp	r3, #40	; 0x28
 8005764:	d127      	bne.n	80057b6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005774:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	089b      	lsrs	r3, r3, #2
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005782:	2301      	movs	r3, #1
 8005784:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	09db      	lsrs	r3, r3, #7
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d103      	bne.n	800579a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	81bb      	strh	r3, [r7, #12]
 8005798:	e002      	b.n	80057a0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80057a8:	89ba      	ldrh	r2, [r7, #12]
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
 80057ac:	4619      	mov	r1, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff f940 	bl	8004a34 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80057b4:	e00e      	b.n	80057d4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057b6:	2300      	movs	r3, #0
 80057b8:	60bb      	str	r3, [r7, #8]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	695b      	ldr	r3, [r3, #20]
 80057c0:	60bb      	str	r3, [r7, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	60bb      	str	r3, [r7, #8]
 80057ca:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80057d4:	bf00      	nop
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ea:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057fa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80057fc:	2300      	movs	r3, #0
 80057fe:	60bb      	str	r3, [r7, #8]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	60bb      	str	r3, [r7, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0201 	orr.w	r2, r2, #1
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005828:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005838:	d172      	bne.n	8005920 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800583a:	7bfb      	ldrb	r3, [r7, #15]
 800583c:	2b22      	cmp	r3, #34	; 0x22
 800583e:	d002      	beq.n	8005846 <I2C_Slave_STOPF+0x6a>
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	2b2a      	cmp	r3, #42	; 0x2a
 8005844:	d135      	bne.n	80058b2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	b29a      	uxth	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005858:	b29b      	uxth	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d005      	beq.n	800586a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	f043 0204 	orr.w	r2, r3, #4
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005878:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587e:	4618      	mov	r0, r3
 8005880:	f7fd fd92 	bl	80033a8 <HAL_DMA_GetState>
 8005884:	4603      	mov	r3, r0
 8005886:	2b01      	cmp	r3, #1
 8005888:	d049      	beq.n	800591e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	4a69      	ldr	r2, [pc, #420]	; (8005a34 <I2C_Slave_STOPF+0x258>)
 8005890:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005896:	4618      	mov	r0, r3
 8005898:	f7fd fbda 	bl	8003050 <HAL_DMA_Abort_IT>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d03d      	beq.n	800591e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058ac:	4610      	mov	r0, r2
 80058ae:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058b0:	e035      	b.n	800591e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f043 0204 	orr.w	r2, r3, #4
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fd fd5c 	bl	80033a8 <HAL_DMA_GetState>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d014      	beq.n	8005920 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fa:	4a4e      	ldr	r2, [pc, #312]	; (8005a34 <I2C_Slave_STOPF+0x258>)
 80058fc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005902:	4618      	mov	r0, r3
 8005904:	f7fd fba4 	bl	8003050 <HAL_DMA_Abort_IT>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d008      	beq.n	8005920 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005918:	4610      	mov	r0, r2
 800591a:	4798      	blx	r3
 800591c:	e000      	b.n	8005920 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800591e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d03e      	beq.n	80059a8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b04      	cmp	r3, #4
 8005936:	d112      	bne.n	800595e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691a      	ldr	r2, [r3, #16]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005954:	b29b      	uxth	r3, r3
 8005956:	3b01      	subs	r3, #1
 8005958:	b29a      	uxth	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005968:	2b40      	cmp	r3, #64	; 0x40
 800596a:	d112      	bne.n	8005992 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691a      	ldr	r2, [r3, #16]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005976:	b2d2      	uxtb	r2, r2
 8005978:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005988:	b29b      	uxth	r3, r3
 800598a:	3b01      	subs	r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005996:	b29b      	uxth	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a0:	f043 0204 	orr.w	r2, r3, #4
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f8b3 	bl	8005b1c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80059b6:	e039      	b.n	8005a2c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
 80059ba:	2b2a      	cmp	r3, #42	; 0x2a
 80059bc:	d109      	bne.n	80059d2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2228      	movs	r2, #40	; 0x28
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7ff f827 	bl	8004a20 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b28      	cmp	r3, #40	; 0x28
 80059dc:	d111      	bne.n	8005a02 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a15      	ldr	r2, [pc, #84]	; (8005a38 <I2C_Slave_STOPF+0x25c>)
 80059e2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2220      	movs	r2, #32
 80059ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7ff f828 	bl	8004a50 <HAL_I2C_ListenCpltCallback>
}
 8005a00:	e014      	b.n	8005a2c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	2b22      	cmp	r3, #34	; 0x22
 8005a08:	d002      	beq.n	8005a10 <I2C_Slave_STOPF+0x234>
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	2b22      	cmp	r3, #34	; 0x22
 8005a0e:	d10d      	bne.n	8005a2c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fe fffa 	bl	8004a20 <HAL_I2C_SlaveRxCpltCallback>
}
 8005a2c:	bf00      	nop
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	08006021 	.word	0x08006021
 8005a38:	ffff0000 	.word	0xffff0000

08005a3c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d002      	beq.n	8005a5e <I2C_Slave_AF+0x22>
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	d129      	bne.n	8005ab2 <I2C_Slave_AF+0x76>
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
 8005a60:	2b28      	cmp	r3, #40	; 0x28
 8005a62:	d126      	bne.n	8005ab2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a2c      	ldr	r2, [pc, #176]	; (8005b18 <I2C_Slave_AF+0xdc>)
 8005a68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a78:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a82:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a92:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7fe ffd0 	bl	8004a50 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005ab0:	e02e      	b.n	8005b10 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	2b21      	cmp	r3, #33	; 0x21
 8005ab6:	d126      	bne.n	8005b06 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <I2C_Slave_AF+0xdc>)
 8005abc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2221      	movs	r2, #33	; 0x21
 8005ac2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685a      	ldr	r2, [r3, #4]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ae2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005aec:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005afc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7fe ff84 	bl	8004a0c <HAL_I2C_SlaveTxCpltCallback>
}
 8005b04:	e004      	b.n	8005b10 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b0e:	615a      	str	r2, [r3, #20]
}
 8005b10:	bf00      	nop
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	ffff0000 	.word	0xffff0000

08005b1c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b32:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b34:	7bbb      	ldrb	r3, [r7, #14]
 8005b36:	2b10      	cmp	r3, #16
 8005b38:	d002      	beq.n	8005b40 <I2C_ITError+0x24>
 8005b3a:	7bbb      	ldrb	r3, [r7, #14]
 8005b3c:	2b40      	cmp	r3, #64	; 0x40
 8005b3e:	d10a      	bne.n	8005b56 <I2C_ITError+0x3a>
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
 8005b42:	2b22      	cmp	r3, #34	; 0x22
 8005b44:	d107      	bne.n	8005b56 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b54:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b56:	7bfb      	ldrb	r3, [r7, #15]
 8005b58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b5c:	2b28      	cmp	r3, #40	; 0x28
 8005b5e:	d107      	bne.n	8005b70 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2228      	movs	r2, #40	; 0x28
 8005b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b6e:	e015      	b.n	8005b9c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b7e:	d00a      	beq.n	8005b96 <I2C_ITError+0x7a>
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
 8005b82:	2b60      	cmp	r3, #96	; 0x60
 8005b84:	d007      	beq.n	8005b96 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005baa:	d162      	bne.n	8005c72 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d020      	beq.n	8005c0c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bce:	4a6a      	ldr	r2, [pc, #424]	; (8005d78 <I2C_ITError+0x25c>)
 8005bd0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fd fa3a 	bl	8003050 <HAL_DMA_Abort_IT>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f000 8089 	beq.w	8005cf6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0201 	bic.w	r2, r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c06:	4610      	mov	r0, r2
 8005c08:	4798      	blx	r3
 8005c0a:	e074      	b.n	8005cf6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c10:	4a59      	ldr	r2, [pc, #356]	; (8005d78 <I2C_ITError+0x25c>)
 8005c12:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7fd fa19 	bl	8003050 <HAL_DMA_Abort_IT>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d068      	beq.n	8005cf6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2e:	2b40      	cmp	r3, #64	; 0x40
 8005c30:	d10b      	bne.n	8005c4a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0201 	bic.w	r2, r2, #1
 8005c58:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	4798      	blx	r3
 8005c70:	e041      	b.n	8005cf6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b60      	cmp	r3, #96	; 0x60
 8005c7c:	d125      	bne.n	8005cca <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c96:	2b40      	cmp	r3, #64	; 0x40
 8005c98:	d10b      	bne.n	8005cb2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	691a      	ldr	r2, [r3, #16]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	b2d2      	uxtb	r2, r2
 8005ca6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 0201 	bic.w	r2, r2, #1
 8005cc0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fe feec 	bl	8004aa0 <HAL_I2C_AbortCpltCallback>
 8005cc8:	e015      	b.n	8005cf6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd4:	2b40      	cmp	r3, #64	; 0x40
 8005cd6:	d10b      	bne.n	8005cf0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	691a      	ldr	r2, [r3, #16]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7fe fecb 	bl	8004a8c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10e      	bne.n	8005d24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d109      	bne.n	8005d24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d104      	bne.n	8005d24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d007      	beq.n	8005d34 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d32:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d113      	bne.n	8005d70 <I2C_ITError+0x254>
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
 8005d4a:	2b28      	cmp	r3, #40	; 0x28
 8005d4c:	d110      	bne.n	8005d70 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a0a      	ldr	r2, [pc, #40]	; (8005d7c <I2C_ITError+0x260>)
 8005d52:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7fe fe70 	bl	8004a50 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d70:	bf00      	nop
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	08006021 	.word	0x08006021
 8005d7c:	ffff0000 	.word	0xffff0000

08005d80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	607a      	str	r2, [r7, #4]
 8005d8a:	603b      	str	r3, [r7, #0]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d006      	beq.n	8005daa <I2C_MasterRequestWrite+0x2a>
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d003      	beq.n	8005daa <I2C_MasterRequestWrite+0x2a>
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005da8:	d108      	bne.n	8005dbc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	e00b      	b.n	8005dd4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc0:	2b12      	cmp	r3, #18
 8005dc2:	d107      	bne.n	8005dd4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f000 f9c5 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00d      	beq.n	8005e08 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dfa:	d103      	bne.n	8005e04 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e035      	b.n	8005e74 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e10:	d108      	bne.n	8005e24 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e12:	897b      	ldrh	r3, [r7, #10]
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	461a      	mov	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e20:	611a      	str	r2, [r3, #16]
 8005e22:	e01b      	b.n	8005e5c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005e24:	897b      	ldrh	r3, [r7, #10]
 8005e26:	11db      	asrs	r3, r3, #7
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	f003 0306 	and.w	r3, r3, #6
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	f063 030f 	orn	r3, r3, #15
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	490e      	ldr	r1, [pc, #56]	; (8005e7c <I2C_MasterRequestWrite+0xfc>)
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 f9eb 	bl	800621e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e010      	b.n	8005e74 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e52:	897b      	ldrh	r3, [r7, #10]
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	4907      	ldr	r1, [pc, #28]	; (8005e80 <I2C_MasterRequestWrite+0x100>)
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f000 f9db 	bl	800621e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e000      	b.n	8005e74 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	00010008 	.word	0x00010008
 8005e80:	00010002 	.word	0x00010002

08005e84 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af02      	add	r7, sp, #8
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	607a      	str	r2, [r7, #4]
 8005e8e:	603b      	str	r3, [r7, #0]
 8005e90:	460b      	mov	r3, r1
 8005e92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ea8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d006      	beq.n	8005ebe <I2C_MasterRequestRead+0x3a>
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d003      	beq.n	8005ebe <I2C_MasterRequestRead+0x3a>
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ebc:	d108      	bne.n	8005ed0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ecc:	601a      	str	r2, [r3, #0]
 8005ece:	e00b      	b.n	8005ee8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed4:	2b11      	cmp	r3, #17
 8005ed6:	d107      	bne.n	8005ee8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ee6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f93b 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00d      	beq.n	8005f1c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f0e:	d103      	bne.n	8005f18 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f16:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f18:	2303      	movs	r3, #3
 8005f1a:	e079      	b.n	8006010 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f24:	d108      	bne.n	8005f38 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f26:	897b      	ldrh	r3, [r7, #10]
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	f043 0301 	orr.w	r3, r3, #1
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	611a      	str	r2, [r3, #16]
 8005f36:	e05f      	b.n	8005ff8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005f38:	897b      	ldrh	r3, [r7, #10]
 8005f3a:	11db      	asrs	r3, r3, #7
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	f003 0306 	and.w	r3, r3, #6
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	f063 030f 	orn	r3, r3, #15
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	4930      	ldr	r1, [pc, #192]	; (8006018 <I2C_MasterRequestRead+0x194>)
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 f961 	bl	800621e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e054      	b.n	8006010 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f66:	897b      	ldrh	r3, [r7, #10]
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	4929      	ldr	r1, [pc, #164]	; (800601c <I2C_MasterRequestRead+0x198>)
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 f951 	bl	800621e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e044      	b.n	8006010 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f86:	2300      	movs	r3, #0
 8005f88:	613b      	str	r3, [r7, #16]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	613b      	str	r3, [r7, #16]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	613b      	str	r3, [r7, #16]
 8005f9a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005faa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 f8d9 	bl	8006170 <I2C_WaitOnFlagUntilTimeout>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00d      	beq.n	8005fe0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fd2:	d103      	bne.n	8005fdc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fda:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e017      	b.n	8006010 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005fe0:	897b      	ldrh	r3, [r7, #10]
 8005fe2:	11db      	asrs	r3, r3, #7
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	f003 0306 	and.w	r3, r3, #6
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	f063 030e 	orn	r3, r3, #14
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	4907      	ldr	r1, [pc, #28]	; (800601c <I2C_MasterRequestRead+0x198>)
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 f90d 	bl	800621e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e000      	b.n	8006010 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3718      	adds	r7, #24
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	00010008 	.word	0x00010008
 800601c:	00010002 	.word	0x00010002

08006020 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006030:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006038:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800603a:	4b4b      	ldr	r3, [pc, #300]	; (8006168 <I2C_DMAAbort+0x148>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	08db      	lsrs	r3, r3, #3
 8006040:	4a4a      	ldr	r2, [pc, #296]	; (800616c <I2C_DMAAbort+0x14c>)
 8006042:	fba2 2303 	umull	r2, r3, r2, r3
 8006046:	0a1a      	lsrs	r2, r3, #8
 8006048:	4613      	mov	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	00da      	lsls	r2, r3, #3
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	f043 0220 	orr.w	r2, r3, #32
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006066:	e00a      	b.n	800607e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	3b01      	subs	r3, #1
 800606c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800607c:	d0ea      	beq.n	8006054 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608a:	2200      	movs	r2, #0
 800608c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006092:	2b00      	cmp	r3, #0
 8006094:	d003      	beq.n	800609e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609a:	2200      	movs	r2, #0
 800609c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2200      	movs	r2, #0
 80060b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c0:	2200      	movs	r2, #0
 80060c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d003      	beq.n	80060d4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d0:	2200      	movs	r2, #0
 80060d2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0201 	bic.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b60      	cmp	r3, #96	; 0x60
 80060ee:	d10e      	bne.n	800610e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	2200      	movs	r2, #0
 8006104:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006106:	6978      	ldr	r0, [r7, #20]
 8006108:	f7fe fcca 	bl	8004aa0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800610c:	e027      	b.n	800615e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800610e:	7cfb      	ldrb	r3, [r7, #19]
 8006110:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006114:	2b28      	cmp	r3, #40	; 0x28
 8006116:	d117      	bne.n	8006148 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0201 	orr.w	r2, r2, #1
 8006126:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006136:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	2200      	movs	r2, #0
 800613c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2228      	movs	r2, #40	; 0x28
 8006142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006146:	e007      	b.n	8006158 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	2220      	movs	r2, #32
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006158:	6978      	ldr	r0, [r7, #20]
 800615a:	f7fe fc97 	bl	8004a8c <HAL_I2C_ErrorCallback>
}
 800615e:	bf00      	nop
 8006160:	3718      	adds	r7, #24
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20000000 	.word	0x20000000
 800616c:	14f8b589 	.word	0x14f8b589

08006170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	4613      	mov	r3, r2
 800617e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006180:	e025      	b.n	80061ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006188:	d021      	beq.n	80061ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800618a:	f7fb fb67 	bl	800185c <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	429a      	cmp	r2, r3
 8006198:	d302      	bcc.n	80061a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d116      	bne.n	80061ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	f043 0220 	orr.w	r2, r3, #32
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e023      	b.n	8006216 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	0c1b      	lsrs	r3, r3, #16
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d10d      	bne.n	80061f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	43da      	mvns	r2, r3
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	4013      	ands	r3, r2
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	bf0c      	ite	eq
 80061ea:	2301      	moveq	r3, #1
 80061ec:	2300      	movne	r3, #0
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	461a      	mov	r2, r3
 80061f2:	e00c      	b.n	800620e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	43da      	mvns	r2, r3
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4013      	ands	r3, r2
 8006200:	b29b      	uxth	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	bf0c      	ite	eq
 8006206:	2301      	moveq	r3, #1
 8006208:	2300      	movne	r3, #0
 800620a:	b2db      	uxtb	r3, r3
 800620c:	461a      	mov	r2, r3
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	429a      	cmp	r2, r3
 8006212:	d0b6      	beq.n	8006182 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	607a      	str	r2, [r7, #4]
 800622a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800622c:	e051      	b.n	80062d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800623c:	d123      	bne.n	8006286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800624c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006256:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2220      	movs	r2, #32
 8006262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	f043 0204 	orr.w	r2, r3, #4
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e046      	b.n	8006314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628c:	d021      	beq.n	80062d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800628e:	f7fb fae5 	bl	800185c <HAL_GetTick>
 8006292:	4602      	mov	r2, r0
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	429a      	cmp	r2, r3
 800629c:	d302      	bcc.n	80062a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d116      	bne.n	80062d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	f043 0220 	orr.w	r2, r3, #32
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e020      	b.n	8006314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	0c1b      	lsrs	r3, r3, #16
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d10c      	bne.n	80062f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	43da      	mvns	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	4013      	ands	r3, r2
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	bf14      	ite	ne
 80062ee:	2301      	movne	r3, #1
 80062f0:	2300      	moveq	r3, #0
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	e00b      	b.n	800630e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	43da      	mvns	r2, r3
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	4013      	ands	r3, r2
 8006302:	b29b      	uxth	r3, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	bf14      	ite	ne
 8006308:	2301      	movne	r3, #1
 800630a:	2300      	moveq	r3, #0
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d18d      	bne.n	800622e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006328:	e02d      	b.n	8006386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f000 f900 	bl	8006530 <I2C_IsAcknowledgeFailed>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e02d      	b.n	8006396 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006340:	d021      	beq.n	8006386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006342:	f7fb fa8b 	bl	800185c <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	429a      	cmp	r2, r3
 8006350:	d302      	bcc.n	8006358 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d116      	bne.n	8006386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2220      	movs	r2, #32
 8006362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	f043 0220 	orr.w	r2, r3, #32
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e007      	b.n	8006396 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006390:	2b80      	cmp	r3, #128	; 0x80
 8006392:	d1ca      	bne.n	800632a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063aa:	e02d      	b.n	8006408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 f8bf 	bl	8006530 <I2C_IsAcknowledgeFailed>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e02d      	b.n	8006418 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c2:	d021      	beq.n	8006408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c4:	f7fb fa4a 	bl	800185c <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d302      	bcc.n	80063da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d116      	bne.n	8006408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f4:	f043 0220 	orr.w	r2, r3, #32
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e007      	b.n	8006418 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b04      	cmp	r3, #4
 8006414:	d1ca      	bne.n	80063ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800642c:	4b13      	ldr	r3, [pc, #76]	; (800647c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	08db      	lsrs	r3, r3, #3
 8006432:	4a13      	ldr	r2, [pc, #76]	; (8006480 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006434:	fba2 2303 	umull	r2, r3, r2, r3
 8006438:	0a1a      	lsrs	r2, r3, #8
 800643a:	4613      	mov	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	3b01      	subs	r3, #1
 8006446:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d107      	bne.n	800645e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	f043 0220 	orr.w	r2, r3, #32
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e008      	b.n	8006470 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800646c:	d0e9      	beq.n	8006442 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	20000000 	.word	0x20000000
 8006480:	14f8b589 	.word	0x14f8b589

08006484 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006490:	e042      	b.n	8006518 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	f003 0310 	and.w	r3, r3, #16
 800649c:	2b10      	cmp	r3, #16
 800649e:	d119      	bne.n	80064d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f06f 0210 	mvn.w	r2, #16
 80064a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2220      	movs	r2, #32
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e029      	b.n	8006528 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064d4:	f7fb f9c2 	bl	800185c <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d302      	bcc.n	80064ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d116      	bne.n	8006518 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006504:	f043 0220 	orr.w	r2, r3, #32
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e007      	b.n	8006528 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006522:	2b40      	cmp	r3, #64	; 0x40
 8006524:	d1b5      	bne.n	8006492 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006546:	d11b      	bne.n	8006580 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006550:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2220      	movs	r2, #32
 800655c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656c:	f043 0204 	orr.w	r2, r3, #4
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e000      	b.n	8006582 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	370c      	adds	r7, #12
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800658e:	b480      	push	{r7}
 8006590:	b083      	sub	sp, #12
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800659e:	d103      	bne.n	80065a8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80065a6:	e007      	b.n	80065b8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80065b0:	d102      	bne.n	80065b8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2208      	movs	r2, #8
 80065b6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80065ce:	2300      	movs	r3, #0
 80065d0:	603b      	str	r3, [r7, #0]
 80065d2:	4b20      	ldr	r3, [pc, #128]	; (8006654 <HAL_PWREx_EnableOverDrive+0x90>)
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	4a1f      	ldr	r2, [pc, #124]	; (8006654 <HAL_PWREx_EnableOverDrive+0x90>)
 80065d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065dc:	6413      	str	r3, [r2, #64]	; 0x40
 80065de:	4b1d      	ldr	r3, [pc, #116]	; (8006654 <HAL_PWREx_EnableOverDrive+0x90>)
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80065ea:	4b1b      	ldr	r3, [pc, #108]	; (8006658 <HAL_PWREx_EnableOverDrive+0x94>)
 80065ec:	2201      	movs	r2, #1
 80065ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065f0:	f7fb f934 	bl	800185c <HAL_GetTick>
 80065f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80065f6:	e009      	b.n	800660c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80065f8:	f7fb f930 	bl	800185c <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006606:	d901      	bls.n	800660c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e01f      	b.n	800664c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800660c:	4b13      	ldr	r3, [pc, #76]	; (800665c <HAL_PWREx_EnableOverDrive+0x98>)
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006618:	d1ee      	bne.n	80065f8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800661a:	4b11      	ldr	r3, [pc, #68]	; (8006660 <HAL_PWREx_EnableOverDrive+0x9c>)
 800661c:	2201      	movs	r2, #1
 800661e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006620:	f7fb f91c 	bl	800185c <HAL_GetTick>
 8006624:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006626:	e009      	b.n	800663c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006628:	f7fb f918 	bl	800185c <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006636:	d901      	bls.n	800663c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e007      	b.n	800664c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800663c:	4b07      	ldr	r3, [pc, #28]	; (800665c <HAL_PWREx_EnableOverDrive+0x98>)
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006644:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006648:	d1ee      	bne.n	8006628 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	40023800 	.word	0x40023800
 8006658:	420e0040 	.word	0x420e0040
 800665c:	40007000 	.word	0x40007000
 8006660:	420e0044 	.word	0x420e0044

08006664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e18c      	b.n	8006992 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <HAL_RCC_ClockConfig+0x24>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b0f      	cmp	r3, #15
 8006686:	d904      	bls.n	8006692 <HAL_RCC_ClockConfig+0x2e>
 8006688:	f240 215a 	movw	r1, #602	; 0x25a
 800668c:	4887      	ldr	r0, [pc, #540]	; (80068ac <HAL_RCC_ClockConfig+0x248>)
 800668e:	f7fa fdc2 	bl	8001216 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d031      	beq.n	80066fc <HAL_RCC_ClockConfig+0x98>
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d02e      	beq.n	80066fc <HAL_RCC_ClockConfig+0x98>
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d02b      	beq.n	80066fc <HAL_RCC_ClockConfig+0x98>
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d028      	beq.n	80066fc <HAL_RCC_ClockConfig+0x98>
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	d025      	beq.n	80066fc <HAL_RCC_ClockConfig+0x98>
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2b05      	cmp	r3, #5
 80066b4:	d022      	beq.n	80066fc <HAL_RCC_ClockConfig+0x98>
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b06      	cmp	r3, #6
 80066ba:	d01f      	beq.n	80066fc <HAL_RCC_ClockConfig+0x98>
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	2b07      	cmp	r3, #7
 80066c0:	d01c      	beq.n	80066fc <HAL_RCC_ClockConfig+0x98>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b08      	cmp	r3, #8
 80066c6:	d019      	beq.n	80066fc <HAL_RCC_ClockConfig+0x98>
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2b09      	cmp	r3, #9
 80066cc:	d016      	beq.n	80066fc <HAL_RCC_ClockConfig+0x98>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b0a      	cmp	r3, #10
 80066d2:	d013      	beq.n	80066fc <HAL_RCC_ClockConfig+0x98>
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	2b0b      	cmp	r3, #11
 80066d8:	d010      	beq.n	80066fc <HAL_RCC_ClockConfig+0x98>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b0c      	cmp	r3, #12
 80066de:	d00d      	beq.n	80066fc <HAL_RCC_ClockConfig+0x98>
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b0d      	cmp	r3, #13
 80066e4:	d00a      	beq.n	80066fc <HAL_RCC_ClockConfig+0x98>
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2b0e      	cmp	r3, #14
 80066ea:	d007      	beq.n	80066fc <HAL_RCC_ClockConfig+0x98>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2b0f      	cmp	r3, #15
 80066f0:	d004      	beq.n	80066fc <HAL_RCC_ClockConfig+0x98>
 80066f2:	f240 215b 	movw	r1, #603	; 0x25b
 80066f6:	486d      	ldr	r0, [pc, #436]	; (80068ac <HAL_RCC_ClockConfig+0x248>)
 80066f8:	f7fa fd8d 	bl	8001216 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066fc:	4b6c      	ldr	r3, [pc, #432]	; (80068b0 <HAL_RCC_ClockConfig+0x24c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 030f 	and.w	r3, r3, #15
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d90c      	bls.n	8006724 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800670a:	4b69      	ldr	r3, [pc, #420]	; (80068b0 <HAL_RCC_ClockConfig+0x24c>)
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006712:	4b67      	ldr	r3, [pc, #412]	; (80068b0 <HAL_RCC_ClockConfig+0x24c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	429a      	cmp	r2, r3
 800671e:	d001      	beq.n	8006724 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e136      	b.n	8006992 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d049      	beq.n	80067c4 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0304 	and.w	r3, r3, #4
 8006738:	2b00      	cmp	r3, #0
 800673a:	d005      	beq.n	8006748 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800673c:	4b5d      	ldr	r3, [pc, #372]	; (80068b4 <HAL_RCC_ClockConfig+0x250>)
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	4a5c      	ldr	r2, [pc, #368]	; (80068b4 <HAL_RCC_ClockConfig+0x250>)
 8006742:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006746:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0308 	and.w	r3, r3, #8
 8006750:	2b00      	cmp	r3, #0
 8006752:	d005      	beq.n	8006760 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006754:	4b57      	ldr	r3, [pc, #348]	; (80068b4 <HAL_RCC_ClockConfig+0x250>)
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	4a56      	ldr	r2, [pc, #344]	; (80068b4 <HAL_RCC_ClockConfig+0x250>)
 800675a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800675e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d024      	beq.n	80067b2 <HAL_RCC_ClockConfig+0x14e>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	2b80      	cmp	r3, #128	; 0x80
 800676e:	d020      	beq.n	80067b2 <HAL_RCC_ClockConfig+0x14e>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	2b90      	cmp	r3, #144	; 0x90
 8006776:	d01c      	beq.n	80067b2 <HAL_RCC_ClockConfig+0x14e>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	2ba0      	cmp	r3, #160	; 0xa0
 800677e:	d018      	beq.n	80067b2 <HAL_RCC_ClockConfig+0x14e>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	2bb0      	cmp	r3, #176	; 0xb0
 8006786:	d014      	beq.n	80067b2 <HAL_RCC_ClockConfig+0x14e>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	2bc0      	cmp	r3, #192	; 0xc0
 800678e:	d010      	beq.n	80067b2 <HAL_RCC_ClockConfig+0x14e>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	2bd0      	cmp	r3, #208	; 0xd0
 8006796:	d00c      	beq.n	80067b2 <HAL_RCC_ClockConfig+0x14e>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	2be0      	cmp	r3, #224	; 0xe0
 800679e:	d008      	beq.n	80067b2 <HAL_RCC_ClockConfig+0x14e>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	2bf0      	cmp	r3, #240	; 0xf0
 80067a6:	d004      	beq.n	80067b2 <HAL_RCC_ClockConfig+0x14e>
 80067a8:	f240 217e 	movw	r1, #638	; 0x27e
 80067ac:	483f      	ldr	r0, [pc, #252]	; (80068ac <HAL_RCC_ClockConfig+0x248>)
 80067ae:	f7fa fd32 	bl	8001216 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067b2:	4b40      	ldr	r3, [pc, #256]	; (80068b4 <HAL_RCC_ClockConfig+0x250>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	493d      	ldr	r1, [pc, #244]	; (80068b4 <HAL_RCC_ClockConfig+0x250>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d059      	beq.n	8006884 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d010      	beq.n	80067fa <HAL_RCC_ClockConfig+0x196>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d00c      	beq.n	80067fa <HAL_RCC_ClockConfig+0x196>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d008      	beq.n	80067fa <HAL_RCC_ClockConfig+0x196>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	d004      	beq.n	80067fa <HAL_RCC_ClockConfig+0x196>
 80067f0:	f240 2185 	movw	r1, #645	; 0x285
 80067f4:	482d      	ldr	r0, [pc, #180]	; (80068ac <HAL_RCC_ClockConfig+0x248>)
 80067f6:	f7fa fd0e 	bl	8001216 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d107      	bne.n	8006812 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006802:	4b2c      	ldr	r3, [pc, #176]	; (80068b4 <HAL_RCC_ClockConfig+0x250>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d119      	bne.n	8006842 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e0bf      	b.n	8006992 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	2b02      	cmp	r3, #2
 8006818:	d003      	beq.n	8006822 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800681e:	2b03      	cmp	r3, #3
 8006820:	d107      	bne.n	8006832 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006822:	4b24      	ldr	r3, [pc, #144]	; (80068b4 <HAL_RCC_ClockConfig+0x250>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d109      	bne.n	8006842 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e0af      	b.n	8006992 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006832:	4b20      	ldr	r3, [pc, #128]	; (80068b4 <HAL_RCC_ClockConfig+0x250>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e0a7      	b.n	8006992 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006842:	4b1c      	ldr	r3, [pc, #112]	; (80068b4 <HAL_RCC_ClockConfig+0x250>)
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f023 0203 	bic.w	r2, r3, #3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	4919      	ldr	r1, [pc, #100]	; (80068b4 <HAL_RCC_ClockConfig+0x250>)
 8006850:	4313      	orrs	r3, r2
 8006852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006854:	f7fb f802 	bl	800185c <HAL_GetTick>
 8006858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800685a:	e00a      	b.n	8006872 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800685c:	f7fa fffe 	bl	800185c <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	f241 3288 	movw	r2, #5000	; 0x1388
 800686a:	4293      	cmp	r3, r2
 800686c:	d901      	bls.n	8006872 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e08f      	b.n	8006992 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006872:	4b10      	ldr	r3, [pc, #64]	; (80068b4 <HAL_RCC_ClockConfig+0x250>)
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f003 020c 	and.w	r2, r3, #12
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	429a      	cmp	r2, r3
 8006882:	d1eb      	bne.n	800685c <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006884:	4b0a      	ldr	r3, [pc, #40]	; (80068b0 <HAL_RCC_ClockConfig+0x24c>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 030f 	and.w	r3, r3, #15
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	429a      	cmp	r2, r3
 8006890:	d212      	bcs.n	80068b8 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006892:	4b07      	ldr	r3, [pc, #28]	; (80068b0 <HAL_RCC_ClockConfig+0x24c>)
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	b2d2      	uxtb	r2, r2
 8006898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800689a:	4b05      	ldr	r3, [pc, #20]	; (80068b0 <HAL_RCC_ClockConfig+0x24c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 030f 	and.w	r3, r3, #15
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d007      	beq.n	80068b8 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e072      	b.n	8006992 <HAL_RCC_ClockConfig+0x32e>
 80068ac:	0800a478 	.word	0x0800a478
 80068b0:	40023c00 	.word	0x40023c00
 80068b4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0304 	and.w	r3, r3, #4
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d025      	beq.n	8006910 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d018      	beq.n	80068fe <HAL_RCC_ClockConfig+0x29a>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068d4:	d013      	beq.n	80068fe <HAL_RCC_ClockConfig+0x29a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80068de:	d00e      	beq.n	80068fe <HAL_RCC_ClockConfig+0x29a>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80068e8:	d009      	beq.n	80068fe <HAL_RCC_ClockConfig+0x29a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80068f2:	d004      	beq.n	80068fe <HAL_RCC_ClockConfig+0x29a>
 80068f4:	f240 21c3 	movw	r1, #707	; 0x2c3
 80068f8:	4828      	ldr	r0, [pc, #160]	; (800699c <HAL_RCC_ClockConfig+0x338>)
 80068fa:	f7fa fc8c 	bl	8001216 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068fe:	4b28      	ldr	r3, [pc, #160]	; (80069a0 <HAL_RCC_ClockConfig+0x33c>)
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	4925      	ldr	r1, [pc, #148]	; (80069a0 <HAL_RCC_ClockConfig+0x33c>)
 800690c:	4313      	orrs	r3, r2
 800690e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0308 	and.w	r3, r3, #8
 8006918:	2b00      	cmp	r3, #0
 800691a:	d026      	beq.n	800696a <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d018      	beq.n	8006956 <HAL_RCC_ClockConfig+0x2f2>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800692c:	d013      	beq.n	8006956 <HAL_RCC_ClockConfig+0x2f2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006936:	d00e      	beq.n	8006956 <HAL_RCC_ClockConfig+0x2f2>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006940:	d009      	beq.n	8006956 <HAL_RCC_ClockConfig+0x2f2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800694a:	d004      	beq.n	8006956 <HAL_RCC_ClockConfig+0x2f2>
 800694c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8006950:	4812      	ldr	r0, [pc, #72]	; (800699c <HAL_RCC_ClockConfig+0x338>)
 8006952:	f7fa fc60 	bl	8001216 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006956:	4b12      	ldr	r3, [pc, #72]	; (80069a0 <HAL_RCC_ClockConfig+0x33c>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	490e      	ldr	r1, [pc, #56]	; (80069a0 <HAL_RCC_ClockConfig+0x33c>)
 8006966:	4313      	orrs	r3, r2
 8006968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800696a:	f000 f887 	bl	8006a7c <HAL_RCC_GetSysClockFreq>
 800696e:	4602      	mov	r2, r0
 8006970:	4b0b      	ldr	r3, [pc, #44]	; (80069a0 <HAL_RCC_ClockConfig+0x33c>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	091b      	lsrs	r3, r3, #4
 8006976:	f003 030f 	and.w	r3, r3, #15
 800697a:	490a      	ldr	r1, [pc, #40]	; (80069a4 <HAL_RCC_ClockConfig+0x340>)
 800697c:	5ccb      	ldrb	r3, [r1, r3]
 800697e:	fa22 f303 	lsr.w	r3, r2, r3
 8006982:	4a09      	ldr	r2, [pc, #36]	; (80069a8 <HAL_RCC_ClockConfig+0x344>)
 8006984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006986:	4b09      	ldr	r3, [pc, #36]	; (80069ac <HAL_RCC_ClockConfig+0x348>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4618      	mov	r0, r3
 800698c:	f7fa fd66 	bl	800145c <HAL_InitTick>

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	0800a478 	.word	0x0800a478
 80069a0:	40023800 	.word	0x40023800
 80069a4:	0800a564 	.word	0x0800a564
 80069a8:	20000000 	.word	0x20000000
 80069ac:	20000004 	.word	0x20000004

080069b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069b0:	b480      	push	{r7}
 80069b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069b4:	4b03      	ldr	r3, [pc, #12]	; (80069c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80069b6:	681b      	ldr	r3, [r3, #0]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	20000000 	.word	0x20000000

080069c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80069cc:	f7ff fff0 	bl	80069b0 <HAL_RCC_GetHCLKFreq>
 80069d0:	4602      	mov	r2, r0
 80069d2:	4b05      	ldr	r3, [pc, #20]	; (80069e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	0a9b      	lsrs	r3, r3, #10
 80069d8:	f003 0307 	and.w	r3, r3, #7
 80069dc:	4903      	ldr	r1, [pc, #12]	; (80069ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80069de:	5ccb      	ldrb	r3, [r1, r3]
 80069e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	40023800 	.word	0x40023800
 80069ec:	0800a574 	.word	0x0800a574

080069f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80069f4:	f7ff ffdc 	bl	80069b0 <HAL_RCC_GetHCLKFreq>
 80069f8:	4602      	mov	r2, r0
 80069fa:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	0b5b      	lsrs	r3, r3, #13
 8006a00:	f003 0307 	and.w	r3, r3, #7
 8006a04:	4903      	ldr	r1, [pc, #12]	; (8006a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a06:	5ccb      	ldrb	r3, [r1, r3]
 8006a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	40023800 	.word	0x40023800
 8006a14:	0800a574 	.word	0x0800a574

08006a18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	220f      	movs	r2, #15
 8006a26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a28:	4b12      	ldr	r3, [pc, #72]	; (8006a74 <HAL_RCC_GetClockConfig+0x5c>)
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f003 0203 	and.w	r2, r3, #3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a34:	4b0f      	ldr	r3, [pc, #60]	; (8006a74 <HAL_RCC_GetClockConfig+0x5c>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a40:	4b0c      	ldr	r3, [pc, #48]	; (8006a74 <HAL_RCC_GetClockConfig+0x5c>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006a4c:	4b09      	ldr	r3, [pc, #36]	; (8006a74 <HAL_RCC_GetClockConfig+0x5c>)
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	08db      	lsrs	r3, r3, #3
 8006a52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a5a:	4b07      	ldr	r3, [pc, #28]	; (8006a78 <HAL_RCC_GetClockConfig+0x60>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 020f 	and.w	r2, r3, #15
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	601a      	str	r2, [r3, #0]
}
 8006a66:	bf00      	nop
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	40023800 	.word	0x40023800
 8006a78:	40023c00 	.word	0x40023c00

08006a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a80:	b0ae      	sub	sp, #184	; 0xb8
 8006a82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006aa2:	4bcb      	ldr	r3, [pc, #812]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f003 030c 	and.w	r3, r3, #12
 8006aaa:	2b0c      	cmp	r3, #12
 8006aac:	f200 8206 	bhi.w	8006ebc <HAL_RCC_GetSysClockFreq+0x440>
 8006ab0:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab6:	bf00      	nop
 8006ab8:	08006aed 	.word	0x08006aed
 8006abc:	08006ebd 	.word	0x08006ebd
 8006ac0:	08006ebd 	.word	0x08006ebd
 8006ac4:	08006ebd 	.word	0x08006ebd
 8006ac8:	08006af5 	.word	0x08006af5
 8006acc:	08006ebd 	.word	0x08006ebd
 8006ad0:	08006ebd 	.word	0x08006ebd
 8006ad4:	08006ebd 	.word	0x08006ebd
 8006ad8:	08006afd 	.word	0x08006afd
 8006adc:	08006ebd 	.word	0x08006ebd
 8006ae0:	08006ebd 	.word	0x08006ebd
 8006ae4:	08006ebd 	.word	0x08006ebd
 8006ae8:	08006ced 	.word	0x08006ced
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006aec:	4bb9      	ldr	r3, [pc, #740]	; (8006dd4 <HAL_RCC_GetSysClockFreq+0x358>)
 8006aee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8006af2:	e1e7      	b.n	8006ec4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006af4:	4bb8      	ldr	r3, [pc, #736]	; (8006dd8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8006af6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006afa:	e1e3      	b.n	8006ec4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006afc:	4bb4      	ldr	r3, [pc, #720]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b08:	4bb1      	ldr	r3, [pc, #708]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d071      	beq.n	8006bf8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b14:	4bae      	ldr	r3, [pc, #696]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	099b      	lsrs	r3, r3, #6
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b20:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b30:	2300      	movs	r3, #0
 8006b32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b3a:	4622      	mov	r2, r4
 8006b3c:	462b      	mov	r3, r5
 8006b3e:	f04f 0000 	mov.w	r0, #0
 8006b42:	f04f 0100 	mov.w	r1, #0
 8006b46:	0159      	lsls	r1, r3, #5
 8006b48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b4c:	0150      	lsls	r0, r2, #5
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	4621      	mov	r1, r4
 8006b54:	1a51      	subs	r1, r2, r1
 8006b56:	6439      	str	r1, [r7, #64]	; 0x40
 8006b58:	4629      	mov	r1, r5
 8006b5a:	eb63 0301 	sbc.w	r3, r3, r1
 8006b5e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b60:	f04f 0200 	mov.w	r2, #0
 8006b64:	f04f 0300 	mov.w	r3, #0
 8006b68:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006b6c:	4649      	mov	r1, r9
 8006b6e:	018b      	lsls	r3, r1, #6
 8006b70:	4641      	mov	r1, r8
 8006b72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b76:	4641      	mov	r1, r8
 8006b78:	018a      	lsls	r2, r1, #6
 8006b7a:	4641      	mov	r1, r8
 8006b7c:	1a51      	subs	r1, r2, r1
 8006b7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b80:	4649      	mov	r1, r9
 8006b82:	eb63 0301 	sbc.w	r3, r3, r1
 8006b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b88:	f04f 0200 	mov.w	r2, #0
 8006b8c:	f04f 0300 	mov.w	r3, #0
 8006b90:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8006b94:	4649      	mov	r1, r9
 8006b96:	00cb      	lsls	r3, r1, #3
 8006b98:	4641      	mov	r1, r8
 8006b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b9e:	4641      	mov	r1, r8
 8006ba0:	00ca      	lsls	r2, r1, #3
 8006ba2:	4610      	mov	r0, r2
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	4622      	mov	r2, r4
 8006baa:	189b      	adds	r3, r3, r2
 8006bac:	633b      	str	r3, [r7, #48]	; 0x30
 8006bae:	462b      	mov	r3, r5
 8006bb0:	460a      	mov	r2, r1
 8006bb2:	eb42 0303 	adc.w	r3, r2, r3
 8006bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8006bb8:	f04f 0200 	mov.w	r2, #0
 8006bbc:	f04f 0300 	mov.w	r3, #0
 8006bc0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006bc4:	4629      	mov	r1, r5
 8006bc6:	024b      	lsls	r3, r1, #9
 8006bc8:	4621      	mov	r1, r4
 8006bca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006bce:	4621      	mov	r1, r4
 8006bd0:	024a      	lsls	r2, r1, #9
 8006bd2:	4610      	mov	r0, r2
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006be0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006be4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006be8:	f7f9 fb12 	bl	8000210 <__aeabi_uldivmod>
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bf6:	e067      	b.n	8006cc8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bf8:	4b75      	ldr	r3, [pc, #468]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	099b      	lsrs	r3, r3, #6
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c04:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006c08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c10:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c12:	2300      	movs	r3, #0
 8006c14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006c16:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8006c1a:	4622      	mov	r2, r4
 8006c1c:	462b      	mov	r3, r5
 8006c1e:	f04f 0000 	mov.w	r0, #0
 8006c22:	f04f 0100 	mov.w	r1, #0
 8006c26:	0159      	lsls	r1, r3, #5
 8006c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c2c:	0150      	lsls	r0, r2, #5
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	4621      	mov	r1, r4
 8006c34:	1a51      	subs	r1, r2, r1
 8006c36:	62b9      	str	r1, [r7, #40]	; 0x28
 8006c38:	4629      	mov	r1, r5
 8006c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8006c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c40:	f04f 0200 	mov.w	r2, #0
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8006c4c:	4649      	mov	r1, r9
 8006c4e:	018b      	lsls	r3, r1, #6
 8006c50:	4641      	mov	r1, r8
 8006c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c56:	4641      	mov	r1, r8
 8006c58:	018a      	lsls	r2, r1, #6
 8006c5a:	4641      	mov	r1, r8
 8006c5c:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c60:	4649      	mov	r1, r9
 8006c62:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c66:	f04f 0200 	mov.w	r2, #0
 8006c6a:	f04f 0300 	mov.w	r3, #0
 8006c6e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c72:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c7a:	4692      	mov	sl, r2
 8006c7c:	469b      	mov	fp, r3
 8006c7e:	4623      	mov	r3, r4
 8006c80:	eb1a 0303 	adds.w	r3, sl, r3
 8006c84:	623b      	str	r3, [r7, #32]
 8006c86:	462b      	mov	r3, r5
 8006c88:	eb4b 0303 	adc.w	r3, fp, r3
 8006c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c8e:	f04f 0200 	mov.w	r2, #0
 8006c92:	f04f 0300 	mov.w	r3, #0
 8006c96:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	028b      	lsls	r3, r1, #10
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	028a      	lsls	r2, r1, #10
 8006ca8:	4610      	mov	r0, r2
 8006caa:	4619      	mov	r1, r3
 8006cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	673b      	str	r3, [r7, #112]	; 0x70
 8006cb4:	677a      	str	r2, [r7, #116]	; 0x74
 8006cb6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006cba:	f7f9 faa9 	bl	8000210 <__aeabi_uldivmod>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006cc8:	4b41      	ldr	r3, [pc, #260]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	0c1b      	lsrs	r3, r3, #16
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006cda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006cde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006cea:	e0eb      	b.n	8006ec4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cec:	4b38      	ldr	r3, [pc, #224]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006cf8:	4b35      	ldr	r3, [pc, #212]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d06b      	beq.n	8006ddc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d04:	4b32      	ldr	r3, [pc, #200]	; (8006dd0 <HAL_RCC_GetSysClockFreq+0x354>)
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	099b      	lsrs	r3, r3, #6
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d16:	663b      	str	r3, [r7, #96]	; 0x60
 8006d18:	2300      	movs	r3, #0
 8006d1a:	667b      	str	r3, [r7, #100]	; 0x64
 8006d1c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8006d20:	4622      	mov	r2, r4
 8006d22:	462b      	mov	r3, r5
 8006d24:	f04f 0000 	mov.w	r0, #0
 8006d28:	f04f 0100 	mov.w	r1, #0
 8006d2c:	0159      	lsls	r1, r3, #5
 8006d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d32:	0150      	lsls	r0, r2, #5
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	4621      	mov	r1, r4
 8006d3a:	1a51      	subs	r1, r2, r1
 8006d3c:	61b9      	str	r1, [r7, #24]
 8006d3e:	4629      	mov	r1, r5
 8006d40:	eb63 0301 	sbc.w	r3, r3, r1
 8006d44:	61fb      	str	r3, [r7, #28]
 8006d46:	f04f 0200 	mov.w	r2, #0
 8006d4a:	f04f 0300 	mov.w	r3, #0
 8006d4e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006d52:	4659      	mov	r1, fp
 8006d54:	018b      	lsls	r3, r1, #6
 8006d56:	4651      	mov	r1, sl
 8006d58:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d5c:	4651      	mov	r1, sl
 8006d5e:	018a      	lsls	r2, r1, #6
 8006d60:	4651      	mov	r1, sl
 8006d62:	ebb2 0801 	subs.w	r8, r2, r1
 8006d66:	4659      	mov	r1, fp
 8006d68:	eb63 0901 	sbc.w	r9, r3, r1
 8006d6c:	f04f 0200 	mov.w	r2, #0
 8006d70:	f04f 0300 	mov.w	r3, #0
 8006d74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d80:	4690      	mov	r8, r2
 8006d82:	4699      	mov	r9, r3
 8006d84:	4623      	mov	r3, r4
 8006d86:	eb18 0303 	adds.w	r3, r8, r3
 8006d8a:	613b      	str	r3, [r7, #16]
 8006d8c:	462b      	mov	r3, r5
 8006d8e:	eb49 0303 	adc.w	r3, r9, r3
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	f04f 0200 	mov.w	r2, #0
 8006d98:	f04f 0300 	mov.w	r3, #0
 8006d9c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006da0:	4629      	mov	r1, r5
 8006da2:	024b      	lsls	r3, r1, #9
 8006da4:	4621      	mov	r1, r4
 8006da6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006daa:	4621      	mov	r1, r4
 8006dac:	024a      	lsls	r2, r1, #9
 8006dae:	4610      	mov	r0, r2
 8006db0:	4619      	mov	r1, r3
 8006db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006db6:	2200      	movs	r2, #0
 8006db8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dba:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006dbc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006dc0:	f7f9 fa26 	bl	8000210 <__aeabi_uldivmod>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	4613      	mov	r3, r2
 8006dca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dce:	e065      	b.n	8006e9c <HAL_RCC_GetSysClockFreq+0x420>
 8006dd0:	40023800 	.word	0x40023800
 8006dd4:	00f42400 	.word	0x00f42400
 8006dd8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ddc:	4b3d      	ldr	r3, [pc, #244]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0x458>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	099b      	lsrs	r3, r3, #6
 8006de2:	2200      	movs	r2, #0
 8006de4:	4618      	mov	r0, r3
 8006de6:	4611      	mov	r1, r2
 8006de8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006dec:	653b      	str	r3, [r7, #80]	; 0x50
 8006dee:	2300      	movs	r3, #0
 8006df0:	657b      	str	r3, [r7, #84]	; 0x54
 8006df2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006df6:	4642      	mov	r2, r8
 8006df8:	464b      	mov	r3, r9
 8006dfa:	f04f 0000 	mov.w	r0, #0
 8006dfe:	f04f 0100 	mov.w	r1, #0
 8006e02:	0159      	lsls	r1, r3, #5
 8006e04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e08:	0150      	lsls	r0, r2, #5
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4641      	mov	r1, r8
 8006e10:	1a51      	subs	r1, r2, r1
 8006e12:	60b9      	str	r1, [r7, #8]
 8006e14:	4649      	mov	r1, r9
 8006e16:	eb63 0301 	sbc.w	r3, r3, r1
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	f04f 0200 	mov.w	r2, #0
 8006e20:	f04f 0300 	mov.w	r3, #0
 8006e24:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006e28:	4659      	mov	r1, fp
 8006e2a:	018b      	lsls	r3, r1, #6
 8006e2c:	4651      	mov	r1, sl
 8006e2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e32:	4651      	mov	r1, sl
 8006e34:	018a      	lsls	r2, r1, #6
 8006e36:	4651      	mov	r1, sl
 8006e38:	1a54      	subs	r4, r2, r1
 8006e3a:	4659      	mov	r1, fp
 8006e3c:	eb63 0501 	sbc.w	r5, r3, r1
 8006e40:	f04f 0200 	mov.w	r2, #0
 8006e44:	f04f 0300 	mov.w	r3, #0
 8006e48:	00eb      	lsls	r3, r5, #3
 8006e4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e4e:	00e2      	lsls	r2, r4, #3
 8006e50:	4614      	mov	r4, r2
 8006e52:	461d      	mov	r5, r3
 8006e54:	4643      	mov	r3, r8
 8006e56:	18e3      	adds	r3, r4, r3
 8006e58:	603b      	str	r3, [r7, #0]
 8006e5a:	464b      	mov	r3, r9
 8006e5c:	eb45 0303 	adc.w	r3, r5, r3
 8006e60:	607b      	str	r3, [r7, #4]
 8006e62:	f04f 0200 	mov.w	r2, #0
 8006e66:	f04f 0300 	mov.w	r3, #0
 8006e6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e6e:	4629      	mov	r1, r5
 8006e70:	028b      	lsls	r3, r1, #10
 8006e72:	4621      	mov	r1, r4
 8006e74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e78:	4621      	mov	r1, r4
 8006e7a:	028a      	lsls	r2, r1, #10
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	4619      	mov	r1, r3
 8006e80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e84:	2200      	movs	r2, #0
 8006e86:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e88:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006e8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e8e:	f7f9 f9bf 	bl	8000210 <__aeabi_uldivmod>
 8006e92:	4602      	mov	r2, r0
 8006e94:	460b      	mov	r3, r1
 8006e96:	4613      	mov	r3, r2
 8006e98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006e9c:	4b0d      	ldr	r3, [pc, #52]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0x458>)
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	0f1b      	lsrs	r3, r3, #28
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006eaa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006eae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006eba:	e003      	b.n	8006ec4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ebc:	4b06      	ldr	r3, [pc, #24]	; (8006ed8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006ec2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ec4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	37b8      	adds	r7, #184	; 0xb8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ed2:	bf00      	nop
 8006ed4:	40023800 	.word	0x40023800
 8006ed8:	00f42400 	.word	0x00f42400

08006edc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e347      	b.n	800757e <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b0f      	cmp	r3, #15
 8006ef4:	d904      	bls.n	8006f00 <HAL_RCC_OscConfig+0x24>
 8006ef6:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 8006efa:	4893      	ldr	r0, [pc, #588]	; (8007148 <HAL_RCC_OscConfig+0x26c>)
 8006efc:	f7fa f98b 	bl	8001216 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 8096 	beq.w	800703a <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00e      	beq.n	8006f34 <HAL_RCC_OscConfig+0x58>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f1e:	d009      	beq.n	8006f34 <HAL_RCC_OscConfig+0x58>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f28:	d004      	beq.n	8006f34 <HAL_RCC_OscConfig+0x58>
 8006f2a:	f640 5115 	movw	r1, #3349	; 0xd15
 8006f2e:	4886      	ldr	r0, [pc, #536]	; (8007148 <HAL_RCC_OscConfig+0x26c>)
 8006f30:	f7fa f971 	bl	8001216 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006f34:	4b85      	ldr	r3, [pc, #532]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f003 030c 	and.w	r3, r3, #12
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d019      	beq.n	8006f74 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006f40:	4b82      	ldr	r3, [pc, #520]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006f48:	2b08      	cmp	r3, #8
 8006f4a:	d106      	bne.n	8006f5a <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006f4c:	4b7f      	ldr	r3, [pc, #508]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f58:	d00c      	beq.n	8006f74 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f5a:	4b7c      	ldr	r3, [pc, #496]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006f62:	2b0c      	cmp	r3, #12
 8006f64:	d112      	bne.n	8006f8c <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f66:	4b79      	ldr	r3, [pc, #484]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f72:	d10b      	bne.n	8006f8c <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f74:	4b75      	ldr	r3, [pc, #468]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d05b      	beq.n	8007038 <HAL_RCC_OscConfig+0x15c>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d157      	bne.n	8007038 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e2f8      	b.n	800757e <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f94:	d106      	bne.n	8006fa4 <HAL_RCC_OscConfig+0xc8>
 8006f96:	4b6d      	ldr	r3, [pc, #436]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a6c      	ldr	r2, [pc, #432]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8006f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	e01d      	b.n	8006fe0 <HAL_RCC_OscConfig+0x104>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fac:	d10c      	bne.n	8006fc8 <HAL_RCC_OscConfig+0xec>
 8006fae:	4b67      	ldr	r3, [pc, #412]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a66      	ldr	r2, [pc, #408]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8006fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	4b64      	ldr	r3, [pc, #400]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a63      	ldr	r2, [pc, #396]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8006fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	e00b      	b.n	8006fe0 <HAL_RCC_OscConfig+0x104>
 8006fc8:	4b60      	ldr	r3, [pc, #384]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a5f      	ldr	r2, [pc, #380]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8006fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fd2:	6013      	str	r3, [r2, #0]
 8006fd4:	4b5d      	ldr	r3, [pc, #372]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a5c      	ldr	r2, [pc, #368]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8006fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d013      	beq.n	8007010 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe8:	f7fa fc38 	bl	800185c <HAL_GetTick>
 8006fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fee:	e008      	b.n	8007002 <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ff0:	f7fa fc34 	bl	800185c <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	2b64      	cmp	r3, #100	; 0x64
 8006ffc:	d901      	bls.n	8007002 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e2bd      	b.n	800757e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007002:	4b52      	ldr	r3, [pc, #328]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0f0      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x114>
 800700e:	e014      	b.n	800703a <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007010:	f7fa fc24 	bl	800185c <HAL_GetTick>
 8007014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007016:	e008      	b.n	800702a <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007018:	f7fa fc20 	bl	800185c <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b64      	cmp	r3, #100	; 0x64
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e2a9      	b.n	800757e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800702a:	4b48      	ldr	r3, [pc, #288]	; (800714c <HAL_RCC_OscConfig+0x270>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1f0      	bne.n	8007018 <HAL_RCC_OscConfig+0x13c>
 8007036:	e000      	b.n	800703a <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 808c 	beq.w	8007160 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d008      	beq.n	8007062 <HAL_RCC_OscConfig+0x186>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d004      	beq.n	8007062 <HAL_RCC_OscConfig+0x186>
 8007058:	f640 514d 	movw	r1, #3405	; 0xd4d
 800705c:	483a      	ldr	r0, [pc, #232]	; (8007148 <HAL_RCC_OscConfig+0x26c>)
 800705e:	f7fa f8da 	bl	8001216 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	2b1f      	cmp	r3, #31
 8007068:	d904      	bls.n	8007074 <HAL_RCC_OscConfig+0x198>
 800706a:	f640 514e 	movw	r1, #3406	; 0xd4e
 800706e:	4836      	ldr	r0, [pc, #216]	; (8007148 <HAL_RCC_OscConfig+0x26c>)
 8007070:	f7fa f8d1 	bl	8001216 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007074:	4b35      	ldr	r3, [pc, #212]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f003 030c 	and.w	r3, r3, #12
 800707c:	2b00      	cmp	r3, #0
 800707e:	d017      	beq.n	80070b0 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007080:	4b32      	ldr	r3, [pc, #200]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007088:	2b08      	cmp	r3, #8
 800708a:	d105      	bne.n	8007098 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800708c:	4b2f      	ldr	r3, [pc, #188]	; (800714c <HAL_RCC_OscConfig+0x270>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00b      	beq.n	80070b0 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007098:	4b2c      	ldr	r3, [pc, #176]	; (800714c <HAL_RCC_OscConfig+0x270>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80070a0:	2b0c      	cmp	r3, #12
 80070a2:	d11c      	bne.n	80070de <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070a4:	4b29      	ldr	r3, [pc, #164]	; (800714c <HAL_RCC_OscConfig+0x270>)
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d116      	bne.n	80070de <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070b0:	4b26      	ldr	r3, [pc, #152]	; (800714c <HAL_RCC_OscConfig+0x270>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d005      	beq.n	80070c8 <HAL_RCC_OscConfig+0x1ec>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d001      	beq.n	80070c8 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e25a      	b.n	800757e <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070c8:	4b20      	ldr	r3, [pc, #128]	; (800714c <HAL_RCC_OscConfig+0x270>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	491d      	ldr	r1, [pc, #116]	; (800714c <HAL_RCC_OscConfig+0x270>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070dc:	e040      	b.n	8007160 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d020      	beq.n	8007128 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070e6:	4b1a      	ldr	r3, [pc, #104]	; (8007150 <HAL_RCC_OscConfig+0x274>)
 80070e8:	2201      	movs	r2, #1
 80070ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ec:	f7fa fbb6 	bl	800185c <HAL_GetTick>
 80070f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070f2:	e008      	b.n	8007106 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070f4:	f7fa fbb2 	bl	800185c <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e23b      	b.n	800757e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007106:	4b11      	ldr	r3, [pc, #68]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0302 	and.w	r3, r3, #2
 800710e:	2b00      	cmp	r3, #0
 8007110:	d0f0      	beq.n	80070f4 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007112:	4b0e      	ldr	r3, [pc, #56]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	00db      	lsls	r3, r3, #3
 8007120:	490a      	ldr	r1, [pc, #40]	; (800714c <HAL_RCC_OscConfig+0x270>)
 8007122:	4313      	orrs	r3, r2
 8007124:	600b      	str	r3, [r1, #0]
 8007126:	e01b      	b.n	8007160 <HAL_RCC_OscConfig+0x284>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007128:	4b09      	ldr	r3, [pc, #36]	; (8007150 <HAL_RCC_OscConfig+0x274>)
 800712a:	2200      	movs	r2, #0
 800712c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800712e:	f7fa fb95 	bl	800185c <HAL_GetTick>
 8007132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007134:	e00e      	b.n	8007154 <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007136:	f7fa fb91 	bl	800185c <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	2b02      	cmp	r3, #2
 8007142:	d907      	bls.n	8007154 <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e21a      	b.n	800757e <HAL_RCC_OscConfig+0x6a2>
 8007148:	0800a4b0 	.word	0x0800a4b0
 800714c:	40023800 	.word	0x40023800
 8007150:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007154:	4b74      	ldr	r3, [pc, #464]	; (8007328 <HAL_RCC_OscConfig+0x44c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1ea      	bne.n	8007136 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0308 	and.w	r3, r3, #8
 8007168:	2b00      	cmp	r3, #0
 800716a:	d03d      	beq.n	80071e8 <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d008      	beq.n	8007186 <HAL_RCC_OscConfig+0x2aa>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d004      	beq.n	8007186 <HAL_RCC_OscConfig+0x2aa>
 800717c:	f640 5194 	movw	r1, #3476	; 0xd94
 8007180:	486a      	ldr	r0, [pc, #424]	; (800732c <HAL_RCC_OscConfig+0x450>)
 8007182:	f7fa f848 	bl	8001216 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d016      	beq.n	80071bc <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800718e:	4b68      	ldr	r3, [pc, #416]	; (8007330 <HAL_RCC_OscConfig+0x454>)
 8007190:	2201      	movs	r2, #1
 8007192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007194:	f7fa fb62 	bl	800185c <HAL_GetTick>
 8007198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800719a:	e008      	b.n	80071ae <HAL_RCC_OscConfig+0x2d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800719c:	f7fa fb5e 	bl	800185c <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d901      	bls.n	80071ae <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e1e7      	b.n	800757e <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071ae:	4b5e      	ldr	r3, [pc, #376]	; (8007328 <HAL_RCC_OscConfig+0x44c>)
 80071b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d0f0      	beq.n	800719c <HAL_RCC_OscConfig+0x2c0>
 80071ba:	e015      	b.n	80071e8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071bc:	4b5c      	ldr	r3, [pc, #368]	; (8007330 <HAL_RCC_OscConfig+0x454>)
 80071be:	2200      	movs	r2, #0
 80071c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071c2:	f7fa fb4b 	bl	800185c <HAL_GetTick>
 80071c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071c8:	e008      	b.n	80071dc <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071ca:	f7fa fb47 	bl	800185c <HAL_GetTick>
 80071ce:	4602      	mov	r2, r0
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d901      	bls.n	80071dc <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e1d0      	b.n	800757e <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071dc:	4b52      	ldr	r3, [pc, #328]	; (8007328 <HAL_RCC_OscConfig+0x44c>)
 80071de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1f0      	bne.n	80071ca <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0304 	and.w	r3, r3, #4
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 80b0 	beq.w	8007356 <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071f6:	2300      	movs	r3, #0
 80071f8:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00c      	beq.n	800721c <HAL_RCC_OscConfig+0x340>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d008      	beq.n	800721c <HAL_RCC_OscConfig+0x340>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	2b05      	cmp	r3, #5
 8007210:	d004      	beq.n	800721c <HAL_RCC_OscConfig+0x340>
 8007212:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8007216:	4845      	ldr	r0, [pc, #276]	; (800732c <HAL_RCC_OscConfig+0x450>)
 8007218:	f7f9 fffd 	bl	8001216 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800721c:	4b42      	ldr	r3, [pc, #264]	; (8007328 <HAL_RCC_OscConfig+0x44c>)
 800721e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10f      	bne.n	8007248 <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007228:	2300      	movs	r3, #0
 800722a:	60bb      	str	r3, [r7, #8]
 800722c:	4b3e      	ldr	r3, [pc, #248]	; (8007328 <HAL_RCC_OscConfig+0x44c>)
 800722e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007230:	4a3d      	ldr	r2, [pc, #244]	; (8007328 <HAL_RCC_OscConfig+0x44c>)
 8007232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007236:	6413      	str	r3, [r2, #64]	; 0x40
 8007238:	4b3b      	ldr	r3, [pc, #236]	; (8007328 <HAL_RCC_OscConfig+0x44c>)
 800723a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007240:	60bb      	str	r3, [r7, #8]
 8007242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007244:	2301      	movs	r3, #1
 8007246:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007248:	4b3a      	ldr	r3, [pc, #232]	; (8007334 <HAL_RCC_OscConfig+0x458>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007250:	2b00      	cmp	r3, #0
 8007252:	d118      	bne.n	8007286 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007254:	4b37      	ldr	r3, [pc, #220]	; (8007334 <HAL_RCC_OscConfig+0x458>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a36      	ldr	r2, [pc, #216]	; (8007334 <HAL_RCC_OscConfig+0x458>)
 800725a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800725e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007260:	f7fa fafc 	bl	800185c <HAL_GetTick>
 8007264:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007266:	e008      	b.n	800727a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007268:	f7fa faf8 	bl	800185c <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e181      	b.n	800757e <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800727a:	4b2e      	ldr	r3, [pc, #184]	; (8007334 <HAL_RCC_OscConfig+0x458>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0f0      	beq.n	8007268 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d106      	bne.n	800729c <HAL_RCC_OscConfig+0x3c0>
 800728e:	4b26      	ldr	r3, [pc, #152]	; (8007328 <HAL_RCC_OscConfig+0x44c>)
 8007290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007292:	4a25      	ldr	r2, [pc, #148]	; (8007328 <HAL_RCC_OscConfig+0x44c>)
 8007294:	f043 0301 	orr.w	r3, r3, #1
 8007298:	6713      	str	r3, [r2, #112]	; 0x70
 800729a:	e01c      	b.n	80072d6 <HAL_RCC_OscConfig+0x3fa>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	2b05      	cmp	r3, #5
 80072a2:	d10c      	bne.n	80072be <HAL_RCC_OscConfig+0x3e2>
 80072a4:	4b20      	ldr	r3, [pc, #128]	; (8007328 <HAL_RCC_OscConfig+0x44c>)
 80072a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a8:	4a1f      	ldr	r2, [pc, #124]	; (8007328 <HAL_RCC_OscConfig+0x44c>)
 80072aa:	f043 0304 	orr.w	r3, r3, #4
 80072ae:	6713      	str	r3, [r2, #112]	; 0x70
 80072b0:	4b1d      	ldr	r3, [pc, #116]	; (8007328 <HAL_RCC_OscConfig+0x44c>)
 80072b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b4:	4a1c      	ldr	r2, [pc, #112]	; (8007328 <HAL_RCC_OscConfig+0x44c>)
 80072b6:	f043 0301 	orr.w	r3, r3, #1
 80072ba:	6713      	str	r3, [r2, #112]	; 0x70
 80072bc:	e00b      	b.n	80072d6 <HAL_RCC_OscConfig+0x3fa>
 80072be:	4b1a      	ldr	r3, [pc, #104]	; (8007328 <HAL_RCC_OscConfig+0x44c>)
 80072c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c2:	4a19      	ldr	r2, [pc, #100]	; (8007328 <HAL_RCC_OscConfig+0x44c>)
 80072c4:	f023 0301 	bic.w	r3, r3, #1
 80072c8:	6713      	str	r3, [r2, #112]	; 0x70
 80072ca:	4b17      	ldr	r3, [pc, #92]	; (8007328 <HAL_RCC_OscConfig+0x44c>)
 80072cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ce:	4a16      	ldr	r2, [pc, #88]	; (8007328 <HAL_RCC_OscConfig+0x44c>)
 80072d0:	f023 0304 	bic.w	r3, r3, #4
 80072d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d015      	beq.n	800730a <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072de:	f7fa fabd 	bl	800185c <HAL_GetTick>
 80072e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072e4:	e00a      	b.n	80072fc <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072e6:	f7fa fab9 	bl	800185c <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d901      	bls.n	80072fc <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e140      	b.n	800757e <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072fc:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <HAL_RCC_OscConfig+0x44c>)
 80072fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007300:	f003 0302 	and.w	r3, r3, #2
 8007304:	2b00      	cmp	r3, #0
 8007306:	d0ee      	beq.n	80072e6 <HAL_RCC_OscConfig+0x40a>
 8007308:	e01c      	b.n	8007344 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800730a:	f7fa faa7 	bl	800185c <HAL_GetTick>
 800730e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007310:	e012      	b.n	8007338 <HAL_RCC_OscConfig+0x45c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007312:	f7fa faa3 	bl	800185c <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007320:	4293      	cmp	r3, r2
 8007322:	d909      	bls.n	8007338 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e12a      	b.n	800757e <HAL_RCC_OscConfig+0x6a2>
 8007328:	40023800 	.word	0x40023800
 800732c:	0800a4b0 	.word	0x0800a4b0
 8007330:	42470e80 	.word	0x42470e80
 8007334:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007338:	4b93      	ldr	r3, [pc, #588]	; (8007588 <HAL_RCC_OscConfig+0x6ac>)
 800733a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1e6      	bne.n	8007312 <HAL_RCC_OscConfig+0x436>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007344:	7dfb      	ldrb	r3, [r7, #23]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d105      	bne.n	8007356 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800734a:	4b8f      	ldr	r3, [pc, #572]	; (8007588 <HAL_RCC_OscConfig+0x6ac>)
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	4a8e      	ldr	r2, [pc, #568]	; (8007588 <HAL_RCC_OscConfig+0x6ac>)
 8007350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007354:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00c      	beq.n	8007378 <HAL_RCC_OscConfig+0x49c>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d008      	beq.n	8007378 <HAL_RCC_OscConfig+0x49c>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	2b02      	cmp	r3, #2
 800736c:	d004      	beq.n	8007378 <HAL_RCC_OscConfig+0x49c>
 800736e:	f640 6103 	movw	r1, #3587	; 0xe03
 8007372:	4886      	ldr	r0, [pc, #536]	; (800758c <HAL_RCC_OscConfig+0x6b0>)
 8007374:	f7f9 ff4f 	bl	8001216 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 80fd 	beq.w	800757c <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007382:	4b81      	ldr	r3, [pc, #516]	; (8007588 <HAL_RCC_OscConfig+0x6ac>)
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f003 030c 	and.w	r3, r3, #12
 800738a:	2b08      	cmp	r3, #8
 800738c:	f000 80b6 	beq.w	80074fc <HAL_RCC_OscConfig+0x620>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	2b02      	cmp	r3, #2
 8007396:	f040 809a 	bne.w	80074ce <HAL_RCC_OscConfig+0x5f2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d009      	beq.n	80073b6 <HAL_RCC_OscConfig+0x4da>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	69db      	ldr	r3, [r3, #28]
 80073a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073aa:	d004      	beq.n	80073b6 <HAL_RCC_OscConfig+0x4da>
 80073ac:	f640 610c 	movw	r1, #3596	; 0xe0c
 80073b0:	4876      	ldr	r0, [pc, #472]	; (800758c <HAL_RCC_OscConfig+0x6b0>)
 80073b2:	f7f9 ff30 	bl	8001216 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	2b3f      	cmp	r3, #63	; 0x3f
 80073bc:	d904      	bls.n	80073c8 <HAL_RCC_OscConfig+0x4ec>
 80073be:	f640 610d 	movw	r1, #3597	; 0xe0d
 80073c2:	4872      	ldr	r0, [pc, #456]	; (800758c <HAL_RCC_OscConfig+0x6b0>)
 80073c4:	f7f9 ff27 	bl	8001216 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	2b31      	cmp	r3, #49	; 0x31
 80073ce:	d904      	bls.n	80073da <HAL_RCC_OscConfig+0x4fe>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80073d8:	d904      	bls.n	80073e4 <HAL_RCC_OscConfig+0x508>
 80073da:	f640 610e 	movw	r1, #3598	; 0xe0e
 80073de:	486b      	ldr	r0, [pc, #428]	; (800758c <HAL_RCC_OscConfig+0x6b0>)
 80073e0:	f7f9 ff19 	bl	8001216 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d010      	beq.n	800740e <HAL_RCC_OscConfig+0x532>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f0:	2b04      	cmp	r3, #4
 80073f2:	d00c      	beq.n	800740e <HAL_RCC_OscConfig+0x532>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	2b06      	cmp	r3, #6
 80073fa:	d008      	beq.n	800740e <HAL_RCC_OscConfig+0x532>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007400:	2b08      	cmp	r3, #8
 8007402:	d004      	beq.n	800740e <HAL_RCC_OscConfig+0x532>
 8007404:	f640 610f 	movw	r1, #3599	; 0xe0f
 8007408:	4860      	ldr	r0, [pc, #384]	; (800758c <HAL_RCC_OscConfig+0x6b0>)
 800740a:	f7f9 ff04 	bl	8001216 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007412:	2b01      	cmp	r3, #1
 8007414:	d903      	bls.n	800741e <HAL_RCC_OscConfig+0x542>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741a:	2b0f      	cmp	r3, #15
 800741c:	d904      	bls.n	8007428 <HAL_RCC_OscConfig+0x54c>
 800741e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007422:	485a      	ldr	r0, [pc, #360]	; (800758c <HAL_RCC_OscConfig+0x6b0>)
 8007424:	f7f9 fef7 	bl	8001216 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742c:	2b01      	cmp	r3, #1
 800742e:	d903      	bls.n	8007438 <HAL_RCC_OscConfig+0x55c>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007434:	2b07      	cmp	r3, #7
 8007436:	d904      	bls.n	8007442 <HAL_RCC_OscConfig+0x566>
 8007438:	f640 6111 	movw	r1, #3601	; 0xe11
 800743c:	4853      	ldr	r0, [pc, #332]	; (800758c <HAL_RCC_OscConfig+0x6b0>)
 800743e:	f7f9 feea 	bl	8001216 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007442:	4b53      	ldr	r3, [pc, #332]	; (8007590 <HAL_RCC_OscConfig+0x6b4>)
 8007444:	2200      	movs	r2, #0
 8007446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007448:	f7fa fa08 	bl	800185c <HAL_GetTick>
 800744c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800744e:	e008      	b.n	8007462 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007450:	f7fa fa04 	bl	800185c <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	2b02      	cmp	r3, #2
 800745c:	d901      	bls.n	8007462 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e08d      	b.n	800757e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007462:	4b49      	ldr	r3, [pc, #292]	; (8007588 <HAL_RCC_OscConfig+0x6ac>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1f0      	bne.n	8007450 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	69da      	ldr	r2, [r3, #28]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	431a      	orrs	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	019b      	lsls	r3, r3, #6
 800747e:	431a      	orrs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007484:	085b      	lsrs	r3, r3, #1
 8007486:	3b01      	subs	r3, #1
 8007488:	041b      	lsls	r3, r3, #16
 800748a:	431a      	orrs	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007490:	061b      	lsls	r3, r3, #24
 8007492:	431a      	orrs	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007498:	071b      	lsls	r3, r3, #28
 800749a:	493b      	ldr	r1, [pc, #236]	; (8007588 <HAL_RCC_OscConfig+0x6ac>)
 800749c:	4313      	orrs	r3, r2
 800749e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074a0:	4b3b      	ldr	r3, [pc, #236]	; (8007590 <HAL_RCC_OscConfig+0x6b4>)
 80074a2:	2201      	movs	r2, #1
 80074a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a6:	f7fa f9d9 	bl	800185c <HAL_GetTick>
 80074aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074ac:	e008      	b.n	80074c0 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074ae:	f7fa f9d5 	bl	800185c <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d901      	bls.n	80074c0 <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e05e      	b.n	800757e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074c0:	4b31      	ldr	r3, [pc, #196]	; (8007588 <HAL_RCC_OscConfig+0x6ac>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d0f0      	beq.n	80074ae <HAL_RCC_OscConfig+0x5d2>
 80074cc:	e056      	b.n	800757c <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074ce:	4b30      	ldr	r3, [pc, #192]	; (8007590 <HAL_RCC_OscConfig+0x6b4>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d4:	f7fa f9c2 	bl	800185c <HAL_GetTick>
 80074d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074da:	e008      	b.n	80074ee <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074dc:	f7fa f9be 	bl	800185c <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d901      	bls.n	80074ee <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e047      	b.n	800757e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ee:	4b26      	ldr	r3, [pc, #152]	; (8007588 <HAL_RCC_OscConfig+0x6ac>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d1f0      	bne.n	80074dc <HAL_RCC_OscConfig+0x600>
 80074fa:	e03f      	b.n	800757c <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	699b      	ldr	r3, [r3, #24]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d101      	bne.n	8007508 <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e03a      	b.n	800757e <HAL_RCC_OscConfig+0x6a2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007508:	4b1f      	ldr	r3, [pc, #124]	; (8007588 <HAL_RCC_OscConfig+0x6ac>)
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d030      	beq.n	8007578 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007520:	429a      	cmp	r2, r3
 8007522:	d129      	bne.n	8007578 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800752e:	429a      	cmp	r2, r3
 8007530:	d122      	bne.n	8007578 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007538:	4013      	ands	r3, r2
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800753e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007540:	4293      	cmp	r3, r2
 8007542:	d119      	bne.n	8007578 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754e:	085b      	lsrs	r3, r3, #1
 8007550:	3b01      	subs	r3, #1
 8007552:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007554:	429a      	cmp	r2, r3
 8007556:	d10f      	bne.n	8007578 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007562:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007564:	429a      	cmp	r2, r3
 8007566:	d107      	bne.n	8007578 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007572:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007574:	429a      	cmp	r2, r3
 8007576:	d001      	beq.n	800757c <HAL_RCC_OscConfig+0x6a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e000      	b.n	800757e <HAL_RCC_OscConfig+0x6a2>
        }
      }
    }
  }
  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3718      	adds	r7, #24
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	40023800 	.word	0x40023800
 800758c:	0800a4b0 	.word	0x0800a4b0
 8007590:	42470060 	.word	0x42470060

08007594 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e1a4      	b.n	80078f0 <HAL_SPI_Init+0x35c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a72      	ldr	r2, [pc, #456]	; (8007774 <HAL_SPI_Init+0x1e0>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d013      	beq.n	80075d8 <HAL_SPI_Init+0x44>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a70      	ldr	r2, [pc, #448]	; (8007778 <HAL_SPI_Init+0x1e4>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d00e      	beq.n	80075d8 <HAL_SPI_Init+0x44>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a6f      	ldr	r2, [pc, #444]	; (800777c <HAL_SPI_Init+0x1e8>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d009      	beq.n	80075d8 <HAL_SPI_Init+0x44>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a6d      	ldr	r2, [pc, #436]	; (8007780 <HAL_SPI_Init+0x1ec>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d004      	beq.n	80075d8 <HAL_SPI_Init+0x44>
 80075ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80075d2:	486c      	ldr	r0, [pc, #432]	; (8007784 <HAL_SPI_Init+0x1f0>)
 80075d4:	f7f9 fe1f 	bl	8001216 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d009      	beq.n	80075f4 <HAL_SPI_Init+0x60>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075e8:	d004      	beq.n	80075f4 <HAL_SPI_Init+0x60>
 80075ea:	f240 1141 	movw	r1, #321	; 0x141
 80075ee:	4865      	ldr	r0, [pc, #404]	; (8007784 <HAL_SPI_Init+0x1f0>)
 80075f0:	f7f9 fe11 	bl	8001216 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00e      	beq.n	800761a <HAL_SPI_Init+0x86>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007604:	d009      	beq.n	800761a <HAL_SPI_Init+0x86>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800760e:	d004      	beq.n	800761a <HAL_SPI_Init+0x86>
 8007610:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8007614:	485b      	ldr	r0, [pc, #364]	; (8007784 <HAL_SPI_Init+0x1f0>)
 8007616:	f7f9 fdfe 	bl	8001216 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007622:	d008      	beq.n	8007636 <HAL_SPI_Init+0xa2>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d004      	beq.n	8007636 <HAL_SPI_Init+0xa2>
 800762c:	f240 1143 	movw	r1, #323	; 0x143
 8007630:	4854      	ldr	r0, [pc, #336]	; (8007784 <HAL_SPI_Init+0x1f0>)
 8007632:	f7f9 fdf0 	bl	8001216 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800763e:	d00d      	beq.n	800765c <HAL_SPI_Init+0xc8>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d009      	beq.n	800765c <HAL_SPI_Init+0xc8>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007650:	d004      	beq.n	800765c <HAL_SPI_Init+0xc8>
 8007652:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8007656:	484b      	ldr	r0, [pc, #300]	; (8007784 <HAL_SPI_Init+0x1f0>)
 8007658:	f7f9 fddd 	bl	8001216 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d020      	beq.n	80076a6 <HAL_SPI_Init+0x112>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	2b08      	cmp	r3, #8
 800766a:	d01c      	beq.n	80076a6 <HAL_SPI_Init+0x112>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	2b10      	cmp	r3, #16
 8007672:	d018      	beq.n	80076a6 <HAL_SPI_Init+0x112>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	69db      	ldr	r3, [r3, #28]
 8007678:	2b18      	cmp	r3, #24
 800767a:	d014      	beq.n	80076a6 <HAL_SPI_Init+0x112>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	69db      	ldr	r3, [r3, #28]
 8007680:	2b20      	cmp	r3, #32
 8007682:	d010      	beq.n	80076a6 <HAL_SPI_Init+0x112>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	2b28      	cmp	r3, #40	; 0x28
 800768a:	d00c      	beq.n	80076a6 <HAL_SPI_Init+0x112>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	2b30      	cmp	r3, #48	; 0x30
 8007692:	d008      	beq.n	80076a6 <HAL_SPI_Init+0x112>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	69db      	ldr	r3, [r3, #28]
 8007698:	2b38      	cmp	r3, #56	; 0x38
 800769a:	d004      	beq.n	80076a6 <HAL_SPI_Init+0x112>
 800769c:	f240 1145 	movw	r1, #325	; 0x145
 80076a0:	4838      	ldr	r0, [pc, #224]	; (8007784 <HAL_SPI_Init+0x1f0>)
 80076a2:	f7f9 fdb8 	bl	8001216 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d008      	beq.n	80076c0 <HAL_SPI_Init+0x12c>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	2b80      	cmp	r3, #128	; 0x80
 80076b4:	d004      	beq.n	80076c0 <HAL_SPI_Init+0x12c>
 80076b6:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80076ba:	4832      	ldr	r0, [pc, #200]	; (8007784 <HAL_SPI_Init+0x1f0>)
 80076bc:	f7f9 fdab 	bl	8001216 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d008      	beq.n	80076da <HAL_SPI_Init+0x146>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	2b10      	cmp	r3, #16
 80076ce:	d004      	beq.n	80076da <HAL_SPI_Init+0x146>
 80076d0:	f240 1147 	movw	r1, #327	; 0x147
 80076d4:	482b      	ldr	r0, [pc, #172]	; (8007784 <HAL_SPI_Init+0x1f0>)
 80076d6:	f7f9 fd9e 	bl	8001216 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d152      	bne.n	8007788 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d008      	beq.n	80076fc <HAL_SPI_Init+0x168>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d004      	beq.n	80076fc <HAL_SPI_Init+0x168>
 80076f2:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80076f6:	4823      	ldr	r0, [pc, #140]	; (8007784 <HAL_SPI_Init+0x1f0>)
 80076f8:	f7f9 fd8d 	bl	8001216 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d008      	beq.n	8007716 <HAL_SPI_Init+0x182>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	695b      	ldr	r3, [r3, #20]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d004      	beq.n	8007716 <HAL_SPI_Init+0x182>
 800770c:	f240 114b 	movw	r1, #331	; 0x14b
 8007710:	481c      	ldr	r0, [pc, #112]	; (8007784 <HAL_SPI_Init+0x1f0>)
 8007712:	f7f9 fd80 	bl	8001216 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800771e:	d125      	bne.n	800776c <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	69db      	ldr	r3, [r3, #28]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d05a      	beq.n	80077de <HAL_SPI_Init+0x24a>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	69db      	ldr	r3, [r3, #28]
 800772c:	2b08      	cmp	r3, #8
 800772e:	d056      	beq.n	80077de <HAL_SPI_Init+0x24a>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	2b10      	cmp	r3, #16
 8007736:	d052      	beq.n	80077de <HAL_SPI_Init+0x24a>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	69db      	ldr	r3, [r3, #28]
 800773c:	2b18      	cmp	r3, #24
 800773e:	d04e      	beq.n	80077de <HAL_SPI_Init+0x24a>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	69db      	ldr	r3, [r3, #28]
 8007744:	2b20      	cmp	r3, #32
 8007746:	d04a      	beq.n	80077de <HAL_SPI_Init+0x24a>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	69db      	ldr	r3, [r3, #28]
 800774c:	2b28      	cmp	r3, #40	; 0x28
 800774e:	d046      	beq.n	80077de <HAL_SPI_Init+0x24a>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	2b30      	cmp	r3, #48	; 0x30
 8007756:	d042      	beq.n	80077de <HAL_SPI_Init+0x24a>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	69db      	ldr	r3, [r3, #28]
 800775c:	2b38      	cmp	r3, #56	; 0x38
 800775e:	d03e      	beq.n	80077de <HAL_SPI_Init+0x24a>
 8007760:	f240 114f 	movw	r1, #335	; 0x14f
 8007764:	4807      	ldr	r0, [pc, #28]	; (8007784 <HAL_SPI_Init+0x1f0>)
 8007766:	f7f9 fd56 	bl	8001216 <assert_failed>
 800776a:	e038      	b.n	80077de <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	61da      	str	r2, [r3, #28]
 8007772:	e034      	b.n	80077de <HAL_SPI_Init+0x24a>
 8007774:	40013000 	.word	0x40013000
 8007778:	40003800 	.word	0x40003800
 800777c:	40003c00 	.word	0x40003c00
 8007780:	40013400 	.word	0x40013400
 8007784:	0800a4ec 	.word	0x0800a4ec
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	69db      	ldr	r3, [r3, #28]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d020      	beq.n	80077d2 <HAL_SPI_Init+0x23e>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	2b08      	cmp	r3, #8
 8007796:	d01c      	beq.n	80077d2 <HAL_SPI_Init+0x23e>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	2b10      	cmp	r3, #16
 800779e:	d018      	beq.n	80077d2 <HAL_SPI_Init+0x23e>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	2b18      	cmp	r3, #24
 80077a6:	d014      	beq.n	80077d2 <HAL_SPI_Init+0x23e>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	2b20      	cmp	r3, #32
 80077ae:	d010      	beq.n	80077d2 <HAL_SPI_Init+0x23e>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	2b28      	cmp	r3, #40	; 0x28
 80077b6:	d00c      	beq.n	80077d2 <HAL_SPI_Init+0x23e>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	2b30      	cmp	r3, #48	; 0x30
 80077be:	d008      	beq.n	80077d2 <HAL_SPI_Init+0x23e>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	2b38      	cmp	r3, #56	; 0x38
 80077c6:	d004      	beq.n	80077d2 <HAL_SPI_Init+0x23e>
 80077c8:	f240 1159 	movw	r1, #345	; 0x159
 80077cc:	484a      	ldr	r0, [pc, #296]	; (80078f8 <HAL_SPI_Init+0x364>)
 80077ce:	f7f9 fd22 	bl	8001216 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d126      	bne.n	800783e <HAL_SPI_Init+0x2aa>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a40      	ldr	r2, [pc, #256]	; (80078fc <HAL_SPI_Init+0x368>)
 80077fc:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a3f      	ldr	r2, [pc, #252]	; (8007900 <HAL_SPI_Init+0x36c>)
 8007802:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a3f      	ldr	r2, [pc, #252]	; (8007904 <HAL_SPI_Init+0x370>)
 8007808:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a3e      	ldr	r2, [pc, #248]	; (8007908 <HAL_SPI_Init+0x374>)
 800780e:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a3e      	ldr	r2, [pc, #248]	; (800790c <HAL_SPI_Init+0x378>)
 8007814:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a3d      	ldr	r2, [pc, #244]	; (8007910 <HAL_SPI_Init+0x37c>)
 800781a:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a3d      	ldr	r2, [pc, #244]	; (8007914 <HAL_SPI_Init+0x380>)
 8007820:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a3c      	ldr	r2, [pc, #240]	; (8007918 <HAL_SPI_Init+0x384>)
 8007826:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800782c:	2b00      	cmp	r3, #0
 800782e:	d102      	bne.n	8007836 <HAL_SPI_Init+0x2a2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a3a      	ldr	r2, [pc, #232]	; (800791c <HAL_SPI_Init+0x388>)
 8007834:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2202      	movs	r2, #2
 8007842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007854:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007866:	431a      	orrs	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007870:	431a      	orrs	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	431a      	orrs	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	431a      	orrs	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800788e:	431a      	orrs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007898:	431a      	orrs	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a2:	ea42 0103 	orr.w	r1, r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	0c1b      	lsrs	r3, r3, #16
 80078bc:	f003 0104 	and.w	r1, r3, #4
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	f003 0210 	and.w	r2, r3, #16
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	430a      	orrs	r2, r1
 80078ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	69da      	ldr	r2, [r3, #28]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	0800a4ec 	.word	0x0800a4ec
 80078fc:	08007e7d 	.word	0x08007e7d
 8007900:	08007e91 	.word	0x08007e91
 8007904:	08007ea5 	.word	0x08007ea5
 8007908:	08007eb9 	.word	0x08007eb9
 800790c:	08007ecd 	.word	0x08007ecd
 8007910:	08007ee1 	.word	0x08007ee1
 8007914:	08007ef5 	.word	0x08007ef5
 8007918:	08007f09 	.word	0x08007f09
 800791c:	08001299 	.word	0x08001299

08007920 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b08c      	sub	sp, #48	; 0x30
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800792e:	2301      	movs	r3, #1
 8007930:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d004      	beq.n	800794a <HAL_SPI_TransmitReceive+0x2a>
 8007940:	f240 417c 	movw	r1, #1148	; 0x47c
 8007944:	4884      	ldr	r0, [pc, #528]	; (8007b58 <HAL_SPI_TransmitReceive+0x238>)
 8007946:	f7f9 fc66 	bl	8001216 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007950:	2b01      	cmp	r3, #1
 8007952:	d101      	bne.n	8007958 <HAL_SPI_TransmitReceive+0x38>
 8007954:	2302      	movs	r3, #2
 8007956:	e18d      	b.n	8007c74 <HAL_SPI_TransmitReceive+0x354>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007960:	f7f9 ff7c 	bl	800185c <HAL_GetTick>
 8007964:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800796c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007976:	887b      	ldrh	r3, [r7, #2]
 8007978:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800797a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800797e:	2b01      	cmp	r3, #1
 8007980:	d00f      	beq.n	80079a2 <HAL_SPI_TransmitReceive+0x82>
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007988:	d107      	bne.n	800799a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d103      	bne.n	800799a <HAL_SPI_TransmitReceive+0x7a>
 8007992:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007996:	2b04      	cmp	r3, #4
 8007998:	d003      	beq.n	80079a2 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 800799a:	2302      	movs	r3, #2
 800799c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80079a0:	e15e      	b.n	8007c60 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d005      	beq.n	80079b4 <HAL_SPI_TransmitReceive+0x94>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d002      	beq.n	80079b4 <HAL_SPI_TransmitReceive+0x94>
 80079ae:	887b      	ldrh	r3, [r7, #2]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d103      	bne.n	80079bc <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80079ba:	e151      	b.n	8007c60 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b04      	cmp	r3, #4
 80079c6:	d003      	beq.n	80079d0 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2205      	movs	r2, #5
 80079cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	887a      	ldrh	r2, [r7, #2]
 80079e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	887a      	ldrh	r2, [r7, #2]
 80079e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	887a      	ldrh	r2, [r7, #2]
 80079f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	887a      	ldrh	r2, [r7, #2]
 80079f8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a10:	2b40      	cmp	r3, #64	; 0x40
 8007a12:	d007      	beq.n	8007a24 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a2c:	d178      	bne.n	8007b20 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d002      	beq.n	8007a3c <HAL_SPI_TransmitReceive+0x11c>
 8007a36:	8b7b      	ldrh	r3, [r7, #26]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d166      	bne.n	8007b0a <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a40:	881a      	ldrh	r2, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4c:	1c9a      	adds	r2, r3, #2
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a60:	e053      	b.n	8007b0a <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f003 0302 	and.w	r3, r3, #2
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d11b      	bne.n	8007aa8 <HAL_SPI_TransmitReceive+0x188>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d016      	beq.n	8007aa8 <HAL_SPI_TransmitReceive+0x188>
 8007a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d113      	bne.n	8007aa8 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a84:	881a      	ldrh	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a90:	1c9a      	adds	r2, r3, #2
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d119      	bne.n	8007aea <HAL_SPI_TransmitReceive+0x1ca>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d014      	beq.n	8007aea <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68da      	ldr	r2, [r3, #12]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aca:	b292      	uxth	r2, r2
 8007acc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	1c9a      	adds	r2, r3, #2
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007aea:	f7f9 feb7 	bl	800185c <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d807      	bhi.n	8007b0a <HAL_SPI_TransmitReceive+0x1ea>
 8007afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b00:	d003      	beq.n	8007b0a <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b08:	e0aa      	b.n	8007c60 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1a6      	bne.n	8007a62 <HAL_SPI_TransmitReceive+0x142>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1a1      	bne.n	8007a62 <HAL_SPI_TransmitReceive+0x142>
 8007b1e:	e07f      	b.n	8007c20 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d002      	beq.n	8007b2e <HAL_SPI_TransmitReceive+0x20e>
 8007b28:	8b7b      	ldrh	r3, [r7, #26]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d16e      	bne.n	8007c0c <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	330c      	adds	r3, #12
 8007b38:	7812      	ldrb	r2, [r2, #0]
 8007b3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b40:	1c5a      	adds	r2, r3, #1
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b54:	e05a      	b.n	8007c0c <HAL_SPI_TransmitReceive+0x2ec>
 8007b56:	bf00      	nop
 8007b58:	0800a4ec 	.word	0x0800a4ec
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f003 0302 	and.w	r3, r3, #2
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d11c      	bne.n	8007ba4 <HAL_SPI_TransmitReceive+0x284>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d017      	beq.n	8007ba4 <HAL_SPI_TransmitReceive+0x284>
 8007b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d114      	bne.n	8007ba4 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	330c      	adds	r3, #12
 8007b84:	7812      	ldrb	r2, [r2, #0]
 8007b86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b8c:	1c5a      	adds	r2, r3, #1
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d119      	bne.n	8007be6 <HAL_SPI_TransmitReceive+0x2c6>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d014      	beq.n	8007be6 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68da      	ldr	r2, [r3, #12]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc6:	b2d2      	uxtb	r2, r2
 8007bc8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bce:	1c5a      	adds	r2, r3, #1
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007be2:	2301      	movs	r3, #1
 8007be4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007be6:	f7f9 fe39 	bl	800185c <HAL_GetTick>
 8007bea:	4602      	mov	r2, r0
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d803      	bhi.n	8007bfe <HAL_SPI_TransmitReceive+0x2de>
 8007bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bfc:	d102      	bne.n	8007c04 <HAL_SPI_TransmitReceive+0x2e4>
 8007bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d103      	bne.n	8007c0c <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007c0a:	e029      	b.n	8007c60 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1a2      	bne.n	8007b5c <HAL_SPI_TransmitReceive+0x23c>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d19d      	bne.n	8007b5c <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f000 fa17 	bl	8008058 <SPI_EndRxTxTransaction>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d006      	beq.n	8007c3e <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007c3c:	e010      	b.n	8007c60 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d10b      	bne.n	8007c5e <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c46:	2300      	movs	r3, #0
 8007c48:	617b      	str	r3, [r7, #20]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	617b      	str	r3, [r7, #20]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	617b      	str	r3, [r7, #20]
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	e000      	b.n	8007c60 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8007c5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3730      	adds	r7, #48	; 0x30
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b088      	sub	sp, #32
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007c94:	69bb      	ldr	r3, [r7, #24]
 8007c96:	099b      	lsrs	r3, r3, #6
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10f      	bne.n	8007cc0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00a      	beq.n	8007cc0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	099b      	lsrs	r3, r3, #6
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d004      	beq.n	8007cc0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	4798      	blx	r3
    return;
 8007cbe:	e0d8      	b.n	8007e72 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	085b      	lsrs	r3, r3, #1
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00a      	beq.n	8007ce2 <HAL_SPI_IRQHandler+0x66>
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	09db      	lsrs	r3, r3, #7
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d004      	beq.n	8007ce2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	4798      	blx	r3
    return;
 8007ce0:	e0c7      	b.n	8007e72 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	095b      	lsrs	r3, r3, #5
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10c      	bne.n	8007d08 <HAL_SPI_IRQHandler+0x8c>
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	099b      	lsrs	r3, r3, #6
 8007cf2:	f003 0301 	and.w	r3, r3, #1
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d106      	bne.n	8007d08 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	0a1b      	lsrs	r3, r3, #8
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f000 80b5 	beq.w	8007e72 <HAL_SPI_IRQHandler+0x1f6>
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	095b      	lsrs	r3, r3, #5
 8007d0c:	f003 0301 	and.w	r3, r3, #1
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 80ae 	beq.w	8007e72 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	099b      	lsrs	r3, r3, #6
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d023      	beq.n	8007d6a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b03      	cmp	r3, #3
 8007d2c:	d011      	beq.n	8007d52 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d32:	f043 0204 	orr.w	r2, r3, #4
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	617b      	str	r3, [r7, #20]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	617b      	str	r3, [r7, #20]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	617b      	str	r3, [r7, #20]
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	e00b      	b.n	8007d6a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d52:	2300      	movs	r3, #0
 8007d54:	613b      	str	r3, [r7, #16]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	613b      	str	r3, [r7, #16]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	613b      	str	r3, [r7, #16]
 8007d66:	693b      	ldr	r3, [r7, #16]
        return;
 8007d68:	e083      	b.n	8007e72 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	095b      	lsrs	r3, r3, #5
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d014      	beq.n	8007da0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d7a:	f043 0201 	orr.w	r2, r3, #1
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007d82:	2300      	movs	r3, #0
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	60fb      	str	r3, [r7, #12]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007da0:	69bb      	ldr	r3, [r7, #24]
 8007da2:	0a1b      	lsrs	r3, r3, #8
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00c      	beq.n	8007dc6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db0:	f043 0208 	orr.w	r2, r3, #8
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007db8:	2300      	movs	r3, #0
 8007dba:	60bb      	str	r3, [r7, #8]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	60bb      	str	r3, [r7, #8]
 8007dc4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d050      	beq.n	8007e70 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ddc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d104      	bne.n	8007dfa <HAL_SPI_IRQHandler+0x17e>
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d034      	beq.n	8007e64 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 0203 	bic.w	r2, r2, #3
 8007e08:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d011      	beq.n	8007e36 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e16:	4a18      	ldr	r2, [pc, #96]	; (8007e78 <HAL_SPI_IRQHandler+0x1fc>)
 8007e18:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fb f916 	bl	8003050 <HAL_DMA_Abort_IT>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d005      	beq.n	8007e36 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d017      	beq.n	8007e6e <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e42:	4a0d      	ldr	r2, [pc, #52]	; (8007e78 <HAL_SPI_IRQHandler+0x1fc>)
 8007e44:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fb f900 	bl	8003050 <HAL_DMA_Abort_IT>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00b      	beq.n	8007e6e <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007e62:	e004      	b.n	8007e6e <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007e6c:	e000      	b.n	8007e70 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8007e6e:	bf00      	nop
    return;
 8007e70:	bf00      	nop
  }
}
 8007e72:	3720      	adds	r7, #32
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	08007f1d 	.word	0x08007f1d

08007e7c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f28:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f3e:	bf00      	nop
 8007f40:	3710      	adds	r7, #16
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
	...

08007f48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b088      	sub	sp, #32
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	603b      	str	r3, [r7, #0]
 8007f54:	4613      	mov	r3, r2
 8007f56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007f58:	f7f9 fc80 	bl	800185c <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f60:	1a9b      	subs	r3, r3, r2
 8007f62:	683a      	ldr	r2, [r7, #0]
 8007f64:	4413      	add	r3, r2
 8007f66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007f68:	f7f9 fc78 	bl	800185c <HAL_GetTick>
 8007f6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007f6e:	4b39      	ldr	r3, [pc, #228]	; (8008054 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	015b      	lsls	r3, r3, #5
 8007f74:	0d1b      	lsrs	r3, r3, #20
 8007f76:	69fa      	ldr	r2, [r7, #28]
 8007f78:	fb02 f303 	mul.w	r3, r2, r3
 8007f7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f7e:	e054      	b.n	800802a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f86:	d050      	beq.n	800802a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f88:	f7f9 fc68 	bl	800185c <HAL_GetTick>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	69fa      	ldr	r2, [r7, #28]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d902      	bls.n	8007f9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d13d      	bne.n	800801a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007fac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fb6:	d111      	bne.n	8007fdc <SPI_WaitFlagStateUntilTimeout+0x94>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fc0:	d004      	beq.n	8007fcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fca:	d107      	bne.n	8007fdc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fe4:	d10f      	bne.n	8008006 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ff4:	601a      	str	r2, [r3, #0]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008004:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e017      	b.n	800804a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008020:	2300      	movs	r3, #0
 8008022:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	3b01      	subs	r3, #1
 8008028:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	689a      	ldr	r2, [r3, #8]
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	4013      	ands	r3, r2
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	429a      	cmp	r2, r3
 8008038:	bf0c      	ite	eq
 800803a:	2301      	moveq	r3, #1
 800803c:	2300      	movne	r3, #0
 800803e:	b2db      	uxtb	r3, r3
 8008040:	461a      	mov	r2, r3
 8008042:	79fb      	ldrb	r3, [r7, #7]
 8008044:	429a      	cmp	r2, r3
 8008046:	d19b      	bne.n	8007f80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3720      	adds	r7, #32
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	20000000 	.word	0x20000000

08008058 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b088      	sub	sp, #32
 800805c:	af02      	add	r7, sp, #8
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008064:	4b1b      	ldr	r3, [pc, #108]	; (80080d4 <SPI_EndRxTxTransaction+0x7c>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a1b      	ldr	r2, [pc, #108]	; (80080d8 <SPI_EndRxTxTransaction+0x80>)
 800806a:	fba2 2303 	umull	r2, r3, r2, r3
 800806e:	0d5b      	lsrs	r3, r3, #21
 8008070:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008074:	fb02 f303 	mul.w	r3, r2, r3
 8008078:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008082:	d112      	bne.n	80080aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	9300      	str	r3, [sp, #0]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2200      	movs	r2, #0
 800808c:	2180      	movs	r1, #128	; 0x80
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f7ff ff5a 	bl	8007f48 <SPI_WaitFlagStateUntilTimeout>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d016      	beq.n	80080c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800809e:	f043 0220 	orr.w	r2, r3, #32
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e00f      	b.n	80080ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00a      	beq.n	80080c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	3b01      	subs	r3, #1
 80080b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c0:	2b80      	cmp	r3, #128	; 0x80
 80080c2:	d0f2      	beq.n	80080aa <SPI_EndRxTxTransaction+0x52>
 80080c4:	e000      	b.n	80080c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80080c6:	bf00      	nop
  }

  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3718      	adds	r7, #24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	20000000 	.word	0x20000000
 80080d8:	165e9f81 	.word	0x165e9f81

080080dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d101      	bne.n	80080ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e0c5      	b.n	800827a <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a64      	ldr	r2, [pc, #400]	; (8008284 <HAL_TIM_Base_Init+0x1a8>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d045      	beq.n	8008184 <HAL_TIM_Base_Init+0xa8>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008100:	d040      	beq.n	8008184 <HAL_TIM_Base_Init+0xa8>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a60      	ldr	r2, [pc, #384]	; (8008288 <HAL_TIM_Base_Init+0x1ac>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d03b      	beq.n	8008184 <HAL_TIM_Base_Init+0xa8>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a5e      	ldr	r2, [pc, #376]	; (800828c <HAL_TIM_Base_Init+0x1b0>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d036      	beq.n	8008184 <HAL_TIM_Base_Init+0xa8>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a5d      	ldr	r2, [pc, #372]	; (8008290 <HAL_TIM_Base_Init+0x1b4>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d031      	beq.n	8008184 <HAL_TIM_Base_Init+0xa8>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a5b      	ldr	r2, [pc, #364]	; (8008294 <HAL_TIM_Base_Init+0x1b8>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d02c      	beq.n	8008184 <HAL_TIM_Base_Init+0xa8>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a5a      	ldr	r2, [pc, #360]	; (8008298 <HAL_TIM_Base_Init+0x1bc>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d027      	beq.n	8008184 <HAL_TIM_Base_Init+0xa8>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a58      	ldr	r2, [pc, #352]	; (800829c <HAL_TIM_Base_Init+0x1c0>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d022      	beq.n	8008184 <HAL_TIM_Base_Init+0xa8>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a57      	ldr	r2, [pc, #348]	; (80082a0 <HAL_TIM_Base_Init+0x1c4>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d01d      	beq.n	8008184 <HAL_TIM_Base_Init+0xa8>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a55      	ldr	r2, [pc, #340]	; (80082a4 <HAL_TIM_Base_Init+0x1c8>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d018      	beq.n	8008184 <HAL_TIM_Base_Init+0xa8>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a54      	ldr	r2, [pc, #336]	; (80082a8 <HAL_TIM_Base_Init+0x1cc>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d013      	beq.n	8008184 <HAL_TIM_Base_Init+0xa8>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a52      	ldr	r2, [pc, #328]	; (80082ac <HAL_TIM_Base_Init+0x1d0>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d00e      	beq.n	8008184 <HAL_TIM_Base_Init+0xa8>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a51      	ldr	r2, [pc, #324]	; (80082b0 <HAL_TIM_Base_Init+0x1d4>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d009      	beq.n	8008184 <HAL_TIM_Base_Init+0xa8>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a4f      	ldr	r2, [pc, #316]	; (80082b4 <HAL_TIM_Base_Init+0x1d8>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d004      	beq.n	8008184 <HAL_TIM_Base_Init+0xa8>
 800817a:	f240 1113 	movw	r1, #275	; 0x113
 800817e:	484e      	ldr	r0, [pc, #312]	; (80082b8 <HAL_TIM_Base_Init+0x1dc>)
 8008180:	f7f9 f849 	bl	8001216 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d014      	beq.n	80081b6 <HAL_TIM_Base_Init+0xda>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	2b10      	cmp	r3, #16
 8008192:	d010      	beq.n	80081b6 <HAL_TIM_Base_Init+0xda>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	2b20      	cmp	r3, #32
 800819a:	d00c      	beq.n	80081b6 <HAL_TIM_Base_Init+0xda>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	2b40      	cmp	r3, #64	; 0x40
 80081a2:	d008      	beq.n	80081b6 <HAL_TIM_Base_Init+0xda>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	2b60      	cmp	r3, #96	; 0x60
 80081aa:	d004      	beq.n	80081b6 <HAL_TIM_Base_Init+0xda>
 80081ac:	f44f 718a 	mov.w	r1, #276	; 0x114
 80081b0:	4841      	ldr	r0, [pc, #260]	; (80082b8 <HAL_TIM_Base_Init+0x1dc>)
 80081b2:	f7f9 f830 	bl	8001216 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00e      	beq.n	80081dc <HAL_TIM_Base_Init+0x100>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081c6:	d009      	beq.n	80081dc <HAL_TIM_Base_Init+0x100>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081d0:	d004      	beq.n	80081dc <HAL_TIM_Base_Init+0x100>
 80081d2:	f240 1115 	movw	r1, #277	; 0x115
 80081d6:	4838      	ldr	r0, [pc, #224]	; (80082b8 <HAL_TIM_Base_Init+0x1dc>)
 80081d8:	f7f9 f81d 	bl	8001216 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d008      	beq.n	80081f6 <HAL_TIM_Base_Init+0x11a>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	2b80      	cmp	r3, #128	; 0x80
 80081ea:	d004      	beq.n	80081f6 <HAL_TIM_Base_Init+0x11a>
 80081ec:	f44f 718b 	mov.w	r1, #278	; 0x116
 80081f0:	4831      	ldr	r0, [pc, #196]	; (80082b8 <HAL_TIM_Base_Init+0x1dc>)
 80081f2:	f7f9 f810 	bl	8001216 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d106      	bne.n	8008210 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f856 	bl	80082bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3304      	adds	r3, #4
 8008220:	4619      	mov	r1, r3
 8008222:	4610      	mov	r0, r2
 8008224:	f000 fa4a 	bl	80086bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	40010000 	.word	0x40010000
 8008288:	40000400 	.word	0x40000400
 800828c:	40000800 	.word	0x40000800
 8008290:	40000c00 	.word	0x40000c00
 8008294:	40001000 	.word	0x40001000
 8008298:	40001400 	.word	0x40001400
 800829c:	40010400 	.word	0x40010400
 80082a0:	40014000 	.word	0x40014000
 80082a4:	40014400 	.word	0x40014400
 80082a8:	40014800 	.word	0x40014800
 80082ac:	40001800 	.word	0x40001800
 80082b0:	40001c00 	.word	0x40001c00
 80082b4:	40002000 	.word	0x40002000
 80082b8:	0800a524 	.word	0x0800a524

080082bc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a51      	ldr	r2, [pc, #324]	; (8008424 <HAL_TIM_Base_Start_IT+0x154>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d045      	beq.n	800836e <HAL_TIM_Base_Start_IT+0x9e>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ea:	d040      	beq.n	800836e <HAL_TIM_Base_Start_IT+0x9e>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a4d      	ldr	r2, [pc, #308]	; (8008428 <HAL_TIM_Base_Start_IT+0x158>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d03b      	beq.n	800836e <HAL_TIM_Base_Start_IT+0x9e>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a4c      	ldr	r2, [pc, #304]	; (800842c <HAL_TIM_Base_Start_IT+0x15c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d036      	beq.n	800836e <HAL_TIM_Base_Start_IT+0x9e>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a4a      	ldr	r2, [pc, #296]	; (8008430 <HAL_TIM_Base_Start_IT+0x160>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d031      	beq.n	800836e <HAL_TIM_Base_Start_IT+0x9e>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a49      	ldr	r2, [pc, #292]	; (8008434 <HAL_TIM_Base_Start_IT+0x164>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d02c      	beq.n	800836e <HAL_TIM_Base_Start_IT+0x9e>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a47      	ldr	r2, [pc, #284]	; (8008438 <HAL_TIM_Base_Start_IT+0x168>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d027      	beq.n	800836e <HAL_TIM_Base_Start_IT+0x9e>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a46      	ldr	r2, [pc, #280]	; (800843c <HAL_TIM_Base_Start_IT+0x16c>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d022      	beq.n	800836e <HAL_TIM_Base_Start_IT+0x9e>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a44      	ldr	r2, [pc, #272]	; (8008440 <HAL_TIM_Base_Start_IT+0x170>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d01d      	beq.n	800836e <HAL_TIM_Base_Start_IT+0x9e>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a43      	ldr	r2, [pc, #268]	; (8008444 <HAL_TIM_Base_Start_IT+0x174>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d018      	beq.n	800836e <HAL_TIM_Base_Start_IT+0x9e>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a41      	ldr	r2, [pc, #260]	; (8008448 <HAL_TIM_Base_Start_IT+0x178>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d013      	beq.n	800836e <HAL_TIM_Base_Start_IT+0x9e>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a40      	ldr	r2, [pc, #256]	; (800844c <HAL_TIM_Base_Start_IT+0x17c>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d00e      	beq.n	800836e <HAL_TIM_Base_Start_IT+0x9e>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a3e      	ldr	r2, [pc, #248]	; (8008450 <HAL_TIM_Base_Start_IT+0x180>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d009      	beq.n	800836e <HAL_TIM_Base_Start_IT+0x9e>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a3d      	ldr	r2, [pc, #244]	; (8008454 <HAL_TIM_Base_Start_IT+0x184>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d004      	beq.n	800836e <HAL_TIM_Base_Start_IT+0x9e>
 8008364:	f240 11cf 	movw	r1, #463	; 0x1cf
 8008368:	483b      	ldr	r0, [pc, #236]	; (8008458 <HAL_TIM_Base_Start_IT+0x188>)
 800836a:	f7f8 ff54 	bl	8001216 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b01      	cmp	r3, #1
 8008378:	d001      	beq.n	800837e <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e04e      	b.n	800841c <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2202      	movs	r2, #2
 8008382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68da      	ldr	r2, [r3, #12]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f042 0201 	orr.w	r2, r2, #1
 8008394:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a22      	ldr	r2, [pc, #136]	; (8008424 <HAL_TIM_Base_Start_IT+0x154>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d022      	beq.n	80083e6 <HAL_TIM_Base_Start_IT+0x116>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083a8:	d01d      	beq.n	80083e6 <HAL_TIM_Base_Start_IT+0x116>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a1e      	ldr	r2, [pc, #120]	; (8008428 <HAL_TIM_Base_Start_IT+0x158>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d018      	beq.n	80083e6 <HAL_TIM_Base_Start_IT+0x116>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a1c      	ldr	r2, [pc, #112]	; (800842c <HAL_TIM_Base_Start_IT+0x15c>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d013      	beq.n	80083e6 <HAL_TIM_Base_Start_IT+0x116>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a1b      	ldr	r2, [pc, #108]	; (8008430 <HAL_TIM_Base_Start_IT+0x160>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d00e      	beq.n	80083e6 <HAL_TIM_Base_Start_IT+0x116>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a1b      	ldr	r2, [pc, #108]	; (800843c <HAL_TIM_Base_Start_IT+0x16c>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d009      	beq.n	80083e6 <HAL_TIM_Base_Start_IT+0x116>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a1a      	ldr	r2, [pc, #104]	; (8008440 <HAL_TIM_Base_Start_IT+0x170>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d004      	beq.n	80083e6 <HAL_TIM_Base_Start_IT+0x116>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a1a      	ldr	r2, [pc, #104]	; (800844c <HAL_TIM_Base_Start_IT+0x17c>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d111      	bne.n	800840a <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	f003 0307 	and.w	r3, r3, #7
 80083f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2b06      	cmp	r3, #6
 80083f6:	d010      	beq.n	800841a <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f042 0201 	orr.w	r2, r2, #1
 8008406:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008408:	e007      	b.n	800841a <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f042 0201 	orr.w	r2, r2, #1
 8008418:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	40010000 	.word	0x40010000
 8008428:	40000400 	.word	0x40000400
 800842c:	40000800 	.word	0x40000800
 8008430:	40000c00 	.word	0x40000c00
 8008434:	40001000 	.word	0x40001000
 8008438:	40001400 	.word	0x40001400
 800843c:	40010400 	.word	0x40010400
 8008440:	40014000 	.word	0x40014000
 8008444:	40014400 	.word	0x40014400
 8008448:	40014800 	.word	0x40014800
 800844c:	40001800 	.word	0x40001800
 8008450:	40001c00 	.word	0x40001c00
 8008454:	40002000 	.word	0x40002000
 8008458:	0800a524 	.word	0x0800a524

0800845c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	f003 0302 	and.w	r3, r3, #2
 800846e:	2b02      	cmp	r3, #2
 8008470:	d122      	bne.n	80084b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	f003 0302 	and.w	r3, r3, #2
 800847c:	2b02      	cmp	r3, #2
 800847e:	d11b      	bne.n	80084b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f06f 0202 	mvn.w	r2, #2
 8008488:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	f003 0303 	and.w	r3, r3, #3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f8ee 	bl	8008680 <HAL_TIM_IC_CaptureCallback>
 80084a4:	e005      	b.n	80084b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f8e0 	bl	800866c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f8f1 	bl	8008694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	f003 0304 	and.w	r3, r3, #4
 80084c2:	2b04      	cmp	r3, #4
 80084c4:	d122      	bne.n	800850c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f003 0304 	and.w	r3, r3, #4
 80084d0:	2b04      	cmp	r3, #4
 80084d2:	d11b      	bne.n	800850c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f06f 0204 	mvn.w	r2, #4
 80084dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2202      	movs	r2, #2
 80084e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f8c4 	bl	8008680 <HAL_TIM_IC_CaptureCallback>
 80084f8:	e005      	b.n	8008506 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f8b6 	bl	800866c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f8c7 	bl	8008694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	f003 0308 	and.w	r3, r3, #8
 8008516:	2b08      	cmp	r3, #8
 8008518:	d122      	bne.n	8008560 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f003 0308 	and.w	r3, r3, #8
 8008524:	2b08      	cmp	r3, #8
 8008526:	d11b      	bne.n	8008560 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f06f 0208 	mvn.w	r2, #8
 8008530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2204      	movs	r2, #4
 8008536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	f003 0303 	and.w	r3, r3, #3
 8008542:	2b00      	cmp	r3, #0
 8008544:	d003      	beq.n	800854e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f89a 	bl	8008680 <HAL_TIM_IC_CaptureCallback>
 800854c:	e005      	b.n	800855a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 f88c 	bl	800866c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f89d 	bl	8008694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	f003 0310 	and.w	r3, r3, #16
 800856a:	2b10      	cmp	r3, #16
 800856c:	d122      	bne.n	80085b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	f003 0310 	and.w	r3, r3, #16
 8008578:	2b10      	cmp	r3, #16
 800857a:	d11b      	bne.n	80085b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f06f 0210 	mvn.w	r2, #16
 8008584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2208      	movs	r2, #8
 800858a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	69db      	ldr	r3, [r3, #28]
 8008592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008596:	2b00      	cmp	r3, #0
 8008598:	d003      	beq.n	80085a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f870 	bl	8008680 <HAL_TIM_IC_CaptureCallback>
 80085a0:	e005      	b.n	80085ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f862 	bl	800866c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 f873 	bl	8008694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d10e      	bne.n	80085e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d107      	bne.n	80085e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f06f 0201 	mvn.w	r2, #1
 80085d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7f8 fe04 	bl	80011e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ea:	2b80      	cmp	r3, #128	; 0x80
 80085ec:	d10e      	bne.n	800860c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085f8:	2b80      	cmp	r3, #128	; 0x80
 80085fa:	d107      	bne.n	800860c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 f902 	bl	8008810 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008616:	2b40      	cmp	r3, #64	; 0x40
 8008618:	d10e      	bne.n	8008638 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008624:	2b40      	cmp	r3, #64	; 0x40
 8008626:	d107      	bne.n	8008638 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f838 	bl	80086a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	f003 0320 	and.w	r3, r3, #32
 8008642:	2b20      	cmp	r3, #32
 8008644:	d10e      	bne.n	8008664 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	f003 0320 	and.w	r3, r3, #32
 8008650:	2b20      	cmp	r3, #32
 8008652:	d107      	bne.n	8008664 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f06f 0220 	mvn.w	r2, #32
 800865c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f8cc 	bl	80087fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008664:	bf00      	nop
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a40      	ldr	r2, [pc, #256]	; (80087d0 <TIM_Base_SetConfig+0x114>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d013      	beq.n	80086fc <TIM_Base_SetConfig+0x40>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086da:	d00f      	beq.n	80086fc <TIM_Base_SetConfig+0x40>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a3d      	ldr	r2, [pc, #244]	; (80087d4 <TIM_Base_SetConfig+0x118>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d00b      	beq.n	80086fc <TIM_Base_SetConfig+0x40>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a3c      	ldr	r2, [pc, #240]	; (80087d8 <TIM_Base_SetConfig+0x11c>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d007      	beq.n	80086fc <TIM_Base_SetConfig+0x40>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a3b      	ldr	r2, [pc, #236]	; (80087dc <TIM_Base_SetConfig+0x120>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d003      	beq.n	80086fc <TIM_Base_SetConfig+0x40>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a3a      	ldr	r2, [pc, #232]	; (80087e0 <TIM_Base_SetConfig+0x124>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d108      	bne.n	800870e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	4313      	orrs	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a2f      	ldr	r2, [pc, #188]	; (80087d0 <TIM_Base_SetConfig+0x114>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d02b      	beq.n	800876e <TIM_Base_SetConfig+0xb2>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800871c:	d027      	beq.n	800876e <TIM_Base_SetConfig+0xb2>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a2c      	ldr	r2, [pc, #176]	; (80087d4 <TIM_Base_SetConfig+0x118>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d023      	beq.n	800876e <TIM_Base_SetConfig+0xb2>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a2b      	ldr	r2, [pc, #172]	; (80087d8 <TIM_Base_SetConfig+0x11c>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d01f      	beq.n	800876e <TIM_Base_SetConfig+0xb2>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a2a      	ldr	r2, [pc, #168]	; (80087dc <TIM_Base_SetConfig+0x120>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d01b      	beq.n	800876e <TIM_Base_SetConfig+0xb2>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a29      	ldr	r2, [pc, #164]	; (80087e0 <TIM_Base_SetConfig+0x124>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d017      	beq.n	800876e <TIM_Base_SetConfig+0xb2>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a28      	ldr	r2, [pc, #160]	; (80087e4 <TIM_Base_SetConfig+0x128>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d013      	beq.n	800876e <TIM_Base_SetConfig+0xb2>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a27      	ldr	r2, [pc, #156]	; (80087e8 <TIM_Base_SetConfig+0x12c>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d00f      	beq.n	800876e <TIM_Base_SetConfig+0xb2>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a26      	ldr	r2, [pc, #152]	; (80087ec <TIM_Base_SetConfig+0x130>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d00b      	beq.n	800876e <TIM_Base_SetConfig+0xb2>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a25      	ldr	r2, [pc, #148]	; (80087f0 <TIM_Base_SetConfig+0x134>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d007      	beq.n	800876e <TIM_Base_SetConfig+0xb2>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a24      	ldr	r2, [pc, #144]	; (80087f4 <TIM_Base_SetConfig+0x138>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d003      	beq.n	800876e <TIM_Base_SetConfig+0xb2>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a23      	ldr	r2, [pc, #140]	; (80087f8 <TIM_Base_SetConfig+0x13c>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d108      	bne.n	8008780 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	4313      	orrs	r3, r2
 800877e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	4313      	orrs	r3, r2
 800878c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	689a      	ldr	r2, [r3, #8]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a0a      	ldr	r2, [pc, #40]	; (80087d0 <TIM_Base_SetConfig+0x114>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d003      	beq.n	80087b4 <TIM_Base_SetConfig+0xf8>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a0c      	ldr	r2, [pc, #48]	; (80087e0 <TIM_Base_SetConfig+0x124>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d103      	bne.n	80087bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	691a      	ldr	r2, [r3, #16]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	615a      	str	r2, [r3, #20]
}
 80087c2:	bf00      	nop
 80087c4:	3714      	adds	r7, #20
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	40010000 	.word	0x40010000
 80087d4:	40000400 	.word	0x40000400
 80087d8:	40000800 	.word	0x40000800
 80087dc:	40000c00 	.word	0x40000c00
 80087e0:	40010400 	.word	0x40010400
 80087e4:	40014000 	.word	0x40014000
 80087e8:	40014400 	.word	0x40014400
 80087ec:	40014800 	.word	0x40014800
 80087f0:	40001800 	.word	0x40001800
 80087f4:	40001c00 	.word	0x40001c00
 80087f8:	40002000 	.word	0x40002000

080087fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800883a:	d10e      	bne.n	800885a <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	2b01      	cmp	r3, #1
 8008848:	d107      	bne.n	800885a <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f06f 0201 	mvn.w	r2, #1
 8008852:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f804 	bl	8008862 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 800885a:	bf00      	nop
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 800886a:	bf00      	nop
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008876:	b480      	push	{r7}
 8008878:	b085      	sub	sp, #20
 800887a:	af00      	add	r7, sp, #0
 800887c:	4603      	mov	r3, r0
 800887e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008880:	2300      	movs	r3, #0
 8008882:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008884:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008888:	2b84      	cmp	r3, #132	; 0x84
 800888a:	d005      	beq.n	8008898 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800888c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4413      	add	r3, r2
 8008894:	3303      	adds	r3, #3
 8008896:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008898:	68fb      	ldr	r3, [r7, #12]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr

080088a6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80088aa:	f000 fc57 	bl	800915c <vTaskStartScheduler>
  
  return osOK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80088b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088b6:	b089      	sub	sp, #36	; 0x24
 80088b8:	af04      	add	r7, sp, #16
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d020      	beq.n	8008908 <osThreadCreate+0x54>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d01c      	beq.n	8008908 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685c      	ldr	r4, [r3, #4]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681d      	ldr	r5, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	691e      	ldr	r6, [r3, #16]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7ff ffc8 	bl	8008876 <makeFreeRtosPriority>
 80088e6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80088f0:	9202      	str	r2, [sp, #8]
 80088f2:	9301      	str	r3, [sp, #4]
 80088f4:	9100      	str	r1, [sp, #0]
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	4632      	mov	r2, r6
 80088fa:	4629      	mov	r1, r5
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 fa4e 	bl	8008d9e <xTaskCreateStatic>
 8008902:	4603      	mov	r3, r0
 8008904:	60fb      	str	r3, [r7, #12]
 8008906:	e01c      	b.n	8008942 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685c      	ldr	r4, [r3, #4]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008914:	b29e      	uxth	r6, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800891c:	4618      	mov	r0, r3
 800891e:	f7ff ffaa 	bl	8008876 <makeFreeRtosPriority>
 8008922:	4602      	mov	r2, r0
 8008924:	f107 030c 	add.w	r3, r7, #12
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	9200      	str	r2, [sp, #0]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	4632      	mov	r2, r6
 8008930:	4629      	mov	r1, r5
 8008932:	4620      	mov	r0, r4
 8008934:	f000 fa90 	bl	8008e58 <xTaskCreate>
 8008938:	4603      	mov	r3, r0
 800893a:	2b01      	cmp	r3, #1
 800893c:	d001      	beq.n	8008942 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800893e:	2300      	movs	r3, #0
 8008940:	e000      	b.n	8008944 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008942:	68fb      	ldr	r3, [r7, #12]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800894c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <osDelay+0x16>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	e000      	b.n	8008964 <osDelay+0x18>
 8008962:	2301      	movs	r3, #1
 8008964:	4618      	mov	r0, r3
 8008966:	f000 fbc5 	bl	80090f4 <vTaskDelay>
  
  return osOK;
 800896a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008974:	b590      	push	{r4, r7, lr}
 8008976:	b085      	sub	sp, #20
 8008978:	af02      	add	r7, sp, #8
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d011      	beq.n	80089aa <osMessageCreate+0x36>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00d      	beq.n	80089aa <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6818      	ldr	r0, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6859      	ldr	r1, [r3, #4]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	689a      	ldr	r2, [r3, #8]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	2400      	movs	r4, #0
 80089a0:	9400      	str	r4, [sp, #0]
 80089a2:	f000 f92b 	bl	8008bfc <xQueueGenericCreateStatic>
 80089a6:	4603      	mov	r3, r0
 80089a8:	e008      	b.n	80089bc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6818      	ldr	r0, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	4619      	mov	r1, r3
 80089b6:	f000 f999 	bl	8008cec <xQueueGenericCreate>
 80089ba:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80089bc:	4618      	mov	r0, r3
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd90      	pop	{r4, r7, pc}

080089c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f103 0208 	add.w	r2, r3, #8
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f04f 32ff 	mov.w	r2, #4294967295
 80089dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f103 0208 	add.w	r2, r3, #8
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f103 0208 	add.w	r2, r3, #8
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80089f8:	bf00      	nop
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008a12:	bf00      	nop
 8008a14:	370c      	adds	r7, #12
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr

08008a1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a1e:	b480      	push	{r7}
 8008a20:	b085      	sub	sp, #20
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	689a      	ldr	r2, [r3, #8]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	1c5a      	adds	r2, r3, #1
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	601a      	str	r2, [r3, #0]
}
 8008a5a:	bf00      	nop
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008a66:	b480      	push	{r7}
 8008a68:	b085      	sub	sp, #20
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a7c:	d103      	bne.n	8008a86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	e00c      	b.n	8008aa0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	3308      	adds	r3, #8
 8008a8a:	60fb      	str	r3, [r7, #12]
 8008a8c:	e002      	b.n	8008a94 <vListInsert+0x2e>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	60fb      	str	r3, [r7, #12]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d2f6      	bcs.n	8008a8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	685a      	ldr	r2, [r3, #4]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	1c5a      	adds	r2, r3, #1
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	601a      	str	r2, [r3, #0]
}
 8008acc:	bf00      	nop
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	6892      	ldr	r2, [r2, #8]
 8008aee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	6852      	ldr	r2, [r2, #4]
 8008af8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d103      	bne.n	8008b0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	689a      	ldr	r2, [r3, #8]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	1e5a      	subs	r2, r3, #1
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3714      	adds	r7, #20
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d10a      	bne.n	8008b56 <xQueueGenericReset+0x2a>
	__asm volatile
 8008b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b44:	f383 8811 	msr	BASEPRI, r3
 8008b48:	f3bf 8f6f 	isb	sy
 8008b4c:	f3bf 8f4f 	dsb	sy
 8008b50:	60bb      	str	r3, [r7, #8]
}
 8008b52:	bf00      	nop
 8008b54:	e7fe      	b.n	8008b54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008b56:	f000 fffd 	bl	8009b54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b62:	68f9      	ldr	r1, [r7, #12]
 8008b64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b66:	fb01 f303 	mul.w	r3, r1, r3
 8008b6a:	441a      	add	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b86:	3b01      	subs	r3, #1
 8008b88:	68f9      	ldr	r1, [r7, #12]
 8008b8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008b8c:	fb01 f303 	mul.w	r3, r1, r3
 8008b90:	441a      	add	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	22ff      	movs	r2, #255	; 0xff
 8008b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	22ff      	movs	r2, #255	; 0xff
 8008ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d114      	bne.n	8008bd6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d01a      	beq.n	8008bea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	3310      	adds	r3, #16
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f000 fcfd 	bl	80095b8 <xTaskRemoveFromEventList>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d012      	beq.n	8008bea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008bc4:	4b0c      	ldr	r3, [pc, #48]	; (8008bf8 <xQueueGenericReset+0xcc>)
 8008bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	e009      	b.n	8008bea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3310      	adds	r3, #16
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7ff fef2 	bl	80089c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	3324      	adds	r3, #36	; 0x24
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7ff feed 	bl	80089c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008bea:	f000 ffe3 	bl	8009bb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008bee:	2301      	movs	r3, #1
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	e000ed04 	.word	0xe000ed04

08008bfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b08e      	sub	sp, #56	; 0x38
 8008c00:	af02      	add	r7, sp, #8
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
 8008c08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d10a      	bne.n	8008c26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c14:	f383 8811 	msr	BASEPRI, r3
 8008c18:	f3bf 8f6f 	isb	sy
 8008c1c:	f3bf 8f4f 	dsb	sy
 8008c20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008c22:	bf00      	nop
 8008c24:	e7fe      	b.n	8008c24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10a      	bne.n	8008c42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c30:	f383 8811 	msr	BASEPRI, r3
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c3e:	bf00      	nop
 8008c40:	e7fe      	b.n	8008c40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d002      	beq.n	8008c4e <xQueueGenericCreateStatic+0x52>
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d001      	beq.n	8008c52 <xQueueGenericCreateStatic+0x56>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e000      	b.n	8008c54 <xQueueGenericCreateStatic+0x58>
 8008c52:	2300      	movs	r3, #0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d10a      	bne.n	8008c6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5c:	f383 8811 	msr	BASEPRI, r3
 8008c60:	f3bf 8f6f 	isb	sy
 8008c64:	f3bf 8f4f 	dsb	sy
 8008c68:	623b      	str	r3, [r7, #32]
}
 8008c6a:	bf00      	nop
 8008c6c:	e7fe      	b.n	8008c6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d102      	bne.n	8008c7a <xQueueGenericCreateStatic+0x7e>
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d101      	bne.n	8008c7e <xQueueGenericCreateStatic+0x82>
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e000      	b.n	8008c80 <xQueueGenericCreateStatic+0x84>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10a      	bne.n	8008c9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	61fb      	str	r3, [r7, #28]
}
 8008c96:	bf00      	nop
 8008c98:	e7fe      	b.n	8008c98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008c9a:	2348      	movs	r3, #72	; 0x48
 8008c9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	2b48      	cmp	r3, #72	; 0x48
 8008ca2:	d00a      	beq.n	8008cba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	61bb      	str	r3, [r7, #24]
}
 8008cb6:	bf00      	nop
 8008cb8:	e7fe      	b.n	8008cb8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008cba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00d      	beq.n	8008ce2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008cce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	68b9      	ldr	r1, [r7, #8]
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f000 f83f 	bl	8008d60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3730      	adds	r7, #48	; 0x30
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b08a      	sub	sp, #40	; 0x28
 8008cf0:	af02      	add	r7, sp, #8
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10a      	bne.n	8008d16 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	613b      	str	r3, [r7, #16]
}
 8008d12:	bf00      	nop
 8008d14:	e7fe      	b.n	8008d14 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	68ba      	ldr	r2, [r7, #8]
 8008d1a:	fb02 f303 	mul.w	r3, r2, r3
 8008d1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	3348      	adds	r3, #72	; 0x48
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 fff7 	bl	8009d18 <pvPortMalloc>
 8008d2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d011      	beq.n	8008d56 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	3348      	adds	r3, #72	; 0x48
 8008d3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d44:	79fa      	ldrb	r2, [r7, #7]
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	68b9      	ldr	r1, [r7, #8]
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f000 f805 	bl	8008d60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d56:	69bb      	ldr	r3, [r7, #24]
	}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3720      	adds	r7, #32
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
 8008d6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d103      	bne.n	8008d7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	69ba      	ldr	r2, [r7, #24]
 8008d78:	601a      	str	r2, [r3, #0]
 8008d7a:	e002      	b.n	8008d82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	68ba      	ldr	r2, [r7, #8]
 8008d8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008d8e:	2101      	movs	r1, #1
 8008d90:	69b8      	ldr	r0, [r7, #24]
 8008d92:	f7ff fecb 	bl	8008b2c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008d96:	bf00      	nop
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b08e      	sub	sp, #56	; 0x38
 8008da2:	af04      	add	r7, sp, #16
 8008da4:	60f8      	str	r0, [r7, #12]
 8008da6:	60b9      	str	r1, [r7, #8]
 8008da8:	607a      	str	r2, [r7, #4]
 8008daa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10a      	bne.n	8008dc8 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	623b      	str	r3, [r7, #32]
}
 8008dc4:	bf00      	nop
 8008dc6:	e7fe      	b.n	8008dc6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10a      	bne.n	8008de4 <xTaskCreateStatic+0x46>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	61fb      	str	r3, [r7, #28]
}
 8008de0:	bf00      	nop
 8008de2:	e7fe      	b.n	8008de2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008de4:	23b4      	movs	r3, #180	; 0xb4
 8008de6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	2bb4      	cmp	r3, #180	; 0xb4
 8008dec:	d00a      	beq.n	8008e04 <xTaskCreateStatic+0x66>
	__asm volatile
 8008dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	61bb      	str	r3, [r7, #24]
}
 8008e00:	bf00      	nop
 8008e02:	e7fe      	b.n	8008e02 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01e      	beq.n	8008e4a <xTaskCreateStatic+0xac>
 8008e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d01b      	beq.n	8008e4a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e14:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e1a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	2202      	movs	r2, #2
 8008e20:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e24:	2300      	movs	r3, #0
 8008e26:	9303      	str	r3, [sp, #12]
 8008e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2a:	9302      	str	r3, [sp, #8]
 8008e2c:	f107 0314 	add.w	r3, r7, #20
 8008e30:	9301      	str	r3, [sp, #4]
 8008e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	68b9      	ldr	r1, [r7, #8]
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f000 f851 	bl	8008ee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e44:	f000 f8ec 	bl	8009020 <prvAddNewTaskToReadyList>
 8008e48:	e001      	b.n	8008e4e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008e4e:	697b      	ldr	r3, [r7, #20]
	}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3728      	adds	r7, #40	; 0x28
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08c      	sub	sp, #48	; 0x30
 8008e5c:	af04      	add	r7, sp, #16
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	603b      	str	r3, [r7, #0]
 8008e64:	4613      	mov	r3, r2
 8008e66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e68:	88fb      	ldrh	r3, [r7, #6]
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f000 ff53 	bl	8009d18 <pvPortMalloc>
 8008e72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00e      	beq.n	8008e98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e7a:	20b4      	movs	r0, #180	; 0xb4
 8008e7c:	f000 ff4c 	bl	8009d18 <pvPortMalloc>
 8008e80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d003      	beq.n	8008e90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	697a      	ldr	r2, [r7, #20]
 8008e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8008e8e:	e005      	b.n	8008e9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e90:	6978      	ldr	r0, [r7, #20]
 8008e92:	f001 f80d 	bl	8009eb0 <vPortFree>
 8008e96:	e001      	b.n	8008e9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d017      	beq.n	8008ed2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008eaa:	88fa      	ldrh	r2, [r7, #6]
 8008eac:	2300      	movs	r3, #0
 8008eae:	9303      	str	r3, [sp, #12]
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	9302      	str	r3, [sp, #8]
 8008eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	68b9      	ldr	r1, [r7, #8]
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 f80f 	bl	8008ee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ec6:	69f8      	ldr	r0, [r7, #28]
 8008ec8:	f000 f8aa 	bl	8009020 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	61bb      	str	r3, [r7, #24]
 8008ed0:	e002      	b.n	8008ed8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ed8:	69bb      	ldr	r3, [r7, #24]
	}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3720      	adds	r7, #32
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b088      	sub	sp, #32
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
 8008ef0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008efc:	3b01      	subs	r3, #1
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	4413      	add	r3, r2
 8008f02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	f023 0307 	bic.w	r3, r3, #7
 8008f0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	f003 0307 	and.w	r3, r3, #7
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00a      	beq.n	8008f2c <prvInitialiseNewTask+0x48>
	__asm volatile
 8008f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1a:	f383 8811 	msr	BASEPRI, r3
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	617b      	str	r3, [r7, #20]
}
 8008f28:	bf00      	nop
 8008f2a:	e7fe      	b.n	8008f2a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d01f      	beq.n	8008f72 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f32:	2300      	movs	r3, #0
 8008f34:	61fb      	str	r3, [r7, #28]
 8008f36:	e012      	b.n	8008f5e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	7819      	ldrb	r1, [r3, #0]
 8008f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	4413      	add	r3, r2
 8008f46:	3334      	adds	r3, #52	; 0x34
 8008f48:	460a      	mov	r2, r1
 8008f4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	4413      	add	r3, r2
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d006      	beq.n	8008f66 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	61fb      	str	r3, [r7, #28]
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	2b0f      	cmp	r3, #15
 8008f62:	d9e9      	bls.n	8008f38 <prvInitialiseNewTask+0x54>
 8008f64:	e000      	b.n	8008f68 <prvInitialiseNewTask+0x84>
			{
				break;
 8008f66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f70:	e003      	b.n	8008f7a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7c:	2b06      	cmp	r3, #6
 8008f7e:	d901      	bls.n	8008f84 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f80:	2306      	movs	r3, #6
 8008f82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f8e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f92:	2200      	movs	r2, #0
 8008f94:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f98:	3304      	adds	r3, #4
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7ff fd32 	bl	8008a04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa2:	3318      	adds	r3, #24
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7ff fd2d 	bl	8008a04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb2:	f1c3 0207 	rsb	r2, r3, #7
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd2:	334c      	adds	r3, #76	; 0x4c
 8008fd4:	2260      	movs	r2, #96	; 0x60
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f001 f8ab 	bl	800a134 <memset>
 8008fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe0:	4a0c      	ldr	r2, [pc, #48]	; (8009014 <prvInitialiseNewTask+0x130>)
 8008fe2:	651a      	str	r2, [r3, #80]	; 0x50
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe6:	4a0c      	ldr	r2, [pc, #48]	; (8009018 <prvInitialiseNewTask+0x134>)
 8008fe8:	655a      	str	r2, [r3, #84]	; 0x54
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	4a0b      	ldr	r2, [pc, #44]	; (800901c <prvInitialiseNewTask+0x138>)
 8008fee:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ff0:	683a      	ldr	r2, [r7, #0]
 8008ff2:	68f9      	ldr	r1, [r7, #12]
 8008ff4:	69b8      	ldr	r0, [r7, #24]
 8008ff6:	f000 fc81 	bl	80098fc <pxPortInitialiseStack>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009002:	2b00      	cmp	r3, #0
 8009004:	d002      	beq.n	800900c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800900a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800900c:	bf00      	nop
 800900e:	3720      	adds	r7, #32
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	0800a5a4 	.word	0x0800a5a4
 8009018:	0800a5c4 	.word	0x0800a5c4
 800901c:	0800a584 	.word	0x0800a584

08009020 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009028:	f000 fd94 	bl	8009b54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800902c:	4b2a      	ldr	r3, [pc, #168]	; (80090d8 <prvAddNewTaskToReadyList+0xb8>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	3301      	adds	r3, #1
 8009032:	4a29      	ldr	r2, [pc, #164]	; (80090d8 <prvAddNewTaskToReadyList+0xb8>)
 8009034:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009036:	4b29      	ldr	r3, [pc, #164]	; (80090dc <prvAddNewTaskToReadyList+0xbc>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d109      	bne.n	8009052 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800903e:	4a27      	ldr	r2, [pc, #156]	; (80090dc <prvAddNewTaskToReadyList+0xbc>)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009044:	4b24      	ldr	r3, [pc, #144]	; (80090d8 <prvAddNewTaskToReadyList+0xb8>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d110      	bne.n	800906e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800904c:	f000 fb2e 	bl	80096ac <prvInitialiseTaskLists>
 8009050:	e00d      	b.n	800906e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009052:	4b23      	ldr	r3, [pc, #140]	; (80090e0 <prvAddNewTaskToReadyList+0xc0>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d109      	bne.n	800906e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800905a:	4b20      	ldr	r3, [pc, #128]	; (80090dc <prvAddNewTaskToReadyList+0xbc>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009064:	429a      	cmp	r2, r3
 8009066:	d802      	bhi.n	800906e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009068:	4a1c      	ldr	r2, [pc, #112]	; (80090dc <prvAddNewTaskToReadyList+0xbc>)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800906e:	4b1d      	ldr	r3, [pc, #116]	; (80090e4 <prvAddNewTaskToReadyList+0xc4>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3301      	adds	r3, #1
 8009074:	4a1b      	ldr	r2, [pc, #108]	; (80090e4 <prvAddNewTaskToReadyList+0xc4>)
 8009076:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907c:	2201      	movs	r2, #1
 800907e:	409a      	lsls	r2, r3
 8009080:	4b19      	ldr	r3, [pc, #100]	; (80090e8 <prvAddNewTaskToReadyList+0xc8>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4313      	orrs	r3, r2
 8009086:	4a18      	ldr	r2, [pc, #96]	; (80090e8 <prvAddNewTaskToReadyList+0xc8>)
 8009088:	6013      	str	r3, [r2, #0]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800908e:	4613      	mov	r3, r2
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	4413      	add	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4a15      	ldr	r2, [pc, #84]	; (80090ec <prvAddNewTaskToReadyList+0xcc>)
 8009098:	441a      	add	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	3304      	adds	r3, #4
 800909e:	4619      	mov	r1, r3
 80090a0:	4610      	mov	r0, r2
 80090a2:	f7ff fcbc 	bl	8008a1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80090a6:	f000 fd85 	bl	8009bb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80090aa:	4b0d      	ldr	r3, [pc, #52]	; (80090e0 <prvAddNewTaskToReadyList+0xc0>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00e      	beq.n	80090d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80090b2:	4b0a      	ldr	r3, [pc, #40]	; (80090dc <prvAddNewTaskToReadyList+0xbc>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090bc:	429a      	cmp	r2, r3
 80090be:	d207      	bcs.n	80090d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80090c0:	4b0b      	ldr	r3, [pc, #44]	; (80090f0 <prvAddNewTaskToReadyList+0xd0>)
 80090c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090c6:	601a      	str	r2, [r3, #0]
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090d0:	bf00      	nop
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	20000808 	.word	0x20000808
 80090dc:	20000708 	.word	0x20000708
 80090e0:	20000814 	.word	0x20000814
 80090e4:	20000824 	.word	0x20000824
 80090e8:	20000810 	.word	0x20000810
 80090ec:	2000070c 	.word	0x2000070c
 80090f0:	e000ed04 	.word	0xe000ed04

080090f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80090fc:	2300      	movs	r3, #0
 80090fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d017      	beq.n	8009136 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009106:	4b13      	ldr	r3, [pc, #76]	; (8009154 <vTaskDelay+0x60>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00a      	beq.n	8009124 <vTaskDelay+0x30>
	__asm volatile
 800910e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	60bb      	str	r3, [r7, #8]
}
 8009120:	bf00      	nop
 8009122:	e7fe      	b.n	8009122 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009124:	f000 f884 	bl	8009230 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009128:	2100      	movs	r1, #0
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fb80 	bl	8009830 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009130:	f000 f88c 	bl	800924c <xTaskResumeAll>
 8009134:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d107      	bne.n	800914c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800913c:	4b06      	ldr	r3, [pc, #24]	; (8009158 <vTaskDelay+0x64>)
 800913e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800914c:	bf00      	nop
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	20000830 	.word	0x20000830
 8009158:	e000ed04 	.word	0xe000ed04

0800915c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b08a      	sub	sp, #40	; 0x28
 8009160:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009162:	2300      	movs	r3, #0
 8009164:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009166:	2300      	movs	r3, #0
 8009168:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800916a:	463a      	mov	r2, r7
 800916c:	1d39      	adds	r1, r7, #4
 800916e:	f107 0308 	add.w	r3, r7, #8
 8009172:	4618      	mov	r0, r3
 8009174:	f7f7 fd88 	bl	8000c88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	9202      	str	r2, [sp, #8]
 8009180:	9301      	str	r3, [sp, #4]
 8009182:	2300      	movs	r3, #0
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	2300      	movs	r3, #0
 8009188:	460a      	mov	r2, r1
 800918a:	4921      	ldr	r1, [pc, #132]	; (8009210 <vTaskStartScheduler+0xb4>)
 800918c:	4821      	ldr	r0, [pc, #132]	; (8009214 <vTaskStartScheduler+0xb8>)
 800918e:	f7ff fe06 	bl	8008d9e <xTaskCreateStatic>
 8009192:	4603      	mov	r3, r0
 8009194:	4a20      	ldr	r2, [pc, #128]	; (8009218 <vTaskStartScheduler+0xbc>)
 8009196:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009198:	4b1f      	ldr	r3, [pc, #124]	; (8009218 <vTaskStartScheduler+0xbc>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d002      	beq.n	80091a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80091a0:	2301      	movs	r3, #1
 80091a2:	617b      	str	r3, [r7, #20]
 80091a4:	e001      	b.n	80091aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80091a6:	2300      	movs	r3, #0
 80091a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d11b      	bne.n	80091e8 <vTaskStartScheduler+0x8c>
	__asm volatile
 80091b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	613b      	str	r3, [r7, #16]
}
 80091c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80091c4:	4b15      	ldr	r3, [pc, #84]	; (800921c <vTaskStartScheduler+0xc0>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	334c      	adds	r3, #76	; 0x4c
 80091ca:	4a15      	ldr	r2, [pc, #84]	; (8009220 <vTaskStartScheduler+0xc4>)
 80091cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80091ce:	4b15      	ldr	r3, [pc, #84]	; (8009224 <vTaskStartScheduler+0xc8>)
 80091d0:	f04f 32ff 	mov.w	r2, #4294967295
 80091d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80091d6:	4b14      	ldr	r3, [pc, #80]	; (8009228 <vTaskStartScheduler+0xcc>)
 80091d8:	2201      	movs	r2, #1
 80091da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80091dc:	4b13      	ldr	r3, [pc, #76]	; (800922c <vTaskStartScheduler+0xd0>)
 80091de:	2200      	movs	r2, #0
 80091e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80091e2:	f000 fc15 	bl	8009a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80091e6:	e00e      	b.n	8009206 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ee:	d10a      	bne.n	8009206 <vTaskStartScheduler+0xaa>
	__asm volatile
 80091f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	60fb      	str	r3, [r7, #12]
}
 8009202:	bf00      	nop
 8009204:	e7fe      	b.n	8009204 <vTaskStartScheduler+0xa8>
}
 8009206:	bf00      	nop
 8009208:	3718      	adds	r7, #24
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	0800a55c 	.word	0x0800a55c
 8009214:	0800967d 	.word	0x0800967d
 8009218:	2000082c 	.word	0x2000082c
 800921c:	20000708 	.word	0x20000708
 8009220:	20000010 	.word	0x20000010
 8009224:	20000828 	.word	0x20000828
 8009228:	20000814 	.word	0x20000814
 800922c:	2000080c 	.word	0x2000080c

08009230 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009230:	b480      	push	{r7}
 8009232:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009234:	4b04      	ldr	r3, [pc, #16]	; (8009248 <vTaskSuspendAll+0x18>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3301      	adds	r3, #1
 800923a:	4a03      	ldr	r2, [pc, #12]	; (8009248 <vTaskSuspendAll+0x18>)
 800923c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800923e:	bf00      	nop
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr
 8009248:	20000830 	.word	0x20000830

0800924c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009252:	2300      	movs	r3, #0
 8009254:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009256:	2300      	movs	r3, #0
 8009258:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800925a:	4b41      	ldr	r3, [pc, #260]	; (8009360 <xTaskResumeAll+0x114>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10a      	bne.n	8009278 <xTaskResumeAll+0x2c>
	__asm volatile
 8009262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	603b      	str	r3, [r7, #0]
}
 8009274:	bf00      	nop
 8009276:	e7fe      	b.n	8009276 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009278:	f000 fc6c 	bl	8009b54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800927c:	4b38      	ldr	r3, [pc, #224]	; (8009360 <xTaskResumeAll+0x114>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	3b01      	subs	r3, #1
 8009282:	4a37      	ldr	r2, [pc, #220]	; (8009360 <xTaskResumeAll+0x114>)
 8009284:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009286:	4b36      	ldr	r3, [pc, #216]	; (8009360 <xTaskResumeAll+0x114>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d161      	bne.n	8009352 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800928e:	4b35      	ldr	r3, [pc, #212]	; (8009364 <xTaskResumeAll+0x118>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d05d      	beq.n	8009352 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009296:	e02e      	b.n	80092f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009298:	4b33      	ldr	r3, [pc, #204]	; (8009368 <xTaskResumeAll+0x11c>)
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	3318      	adds	r3, #24
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7ff fc17 	bl	8008ad8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	3304      	adds	r3, #4
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7ff fc12 	bl	8008ad8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b8:	2201      	movs	r2, #1
 80092ba:	409a      	lsls	r2, r3
 80092bc:	4b2b      	ldr	r3, [pc, #172]	; (800936c <xTaskResumeAll+0x120>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	4a2a      	ldr	r2, [pc, #168]	; (800936c <xTaskResumeAll+0x120>)
 80092c4:	6013      	str	r3, [r2, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ca:	4613      	mov	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	009b      	lsls	r3, r3, #2
 80092d2:	4a27      	ldr	r2, [pc, #156]	; (8009370 <xTaskResumeAll+0x124>)
 80092d4:	441a      	add	r2, r3
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	3304      	adds	r3, #4
 80092da:	4619      	mov	r1, r3
 80092dc:	4610      	mov	r0, r2
 80092de:	f7ff fb9e 	bl	8008a1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e6:	4b23      	ldr	r3, [pc, #140]	; (8009374 <xTaskResumeAll+0x128>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d302      	bcc.n	80092f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80092f0:	4b21      	ldr	r3, [pc, #132]	; (8009378 <xTaskResumeAll+0x12c>)
 80092f2:	2201      	movs	r2, #1
 80092f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092f6:	4b1c      	ldr	r3, [pc, #112]	; (8009368 <xTaskResumeAll+0x11c>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1cc      	bne.n	8009298 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d001      	beq.n	8009308 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009304:	f000 fa74 	bl	80097f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009308:	4b1c      	ldr	r3, [pc, #112]	; (800937c <xTaskResumeAll+0x130>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d010      	beq.n	8009336 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009314:	f000 f836 	bl	8009384 <xTaskIncrementTick>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d002      	beq.n	8009324 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800931e:	4b16      	ldr	r3, [pc, #88]	; (8009378 <xTaskResumeAll+0x12c>)
 8009320:	2201      	movs	r2, #1
 8009322:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	3b01      	subs	r3, #1
 8009328:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1f1      	bne.n	8009314 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009330:	4b12      	ldr	r3, [pc, #72]	; (800937c <xTaskResumeAll+0x130>)
 8009332:	2200      	movs	r2, #0
 8009334:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009336:	4b10      	ldr	r3, [pc, #64]	; (8009378 <xTaskResumeAll+0x12c>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d009      	beq.n	8009352 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800933e:	2301      	movs	r3, #1
 8009340:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009342:	4b0f      	ldr	r3, [pc, #60]	; (8009380 <xTaskResumeAll+0x134>)
 8009344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	f3bf 8f4f 	dsb	sy
 800934e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009352:	f000 fc2f 	bl	8009bb4 <vPortExitCritical>

	return xAlreadyYielded;
 8009356:	68bb      	ldr	r3, [r7, #8]
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	20000830 	.word	0x20000830
 8009364:	20000808 	.word	0x20000808
 8009368:	200007c8 	.word	0x200007c8
 800936c:	20000810 	.word	0x20000810
 8009370:	2000070c 	.word	0x2000070c
 8009374:	20000708 	.word	0x20000708
 8009378:	2000081c 	.word	0x2000081c
 800937c:	20000818 	.word	0x20000818
 8009380:	e000ed04 	.word	0xe000ed04

08009384 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800938a:	2300      	movs	r3, #0
 800938c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800938e:	4b4e      	ldr	r3, [pc, #312]	; (80094c8 <xTaskIncrementTick+0x144>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2b00      	cmp	r3, #0
 8009394:	f040 808e 	bne.w	80094b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009398:	4b4c      	ldr	r3, [pc, #304]	; (80094cc <xTaskIncrementTick+0x148>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3301      	adds	r3, #1
 800939e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80093a0:	4a4a      	ldr	r2, [pc, #296]	; (80094cc <xTaskIncrementTick+0x148>)
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d120      	bne.n	80093ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80093ac:	4b48      	ldr	r3, [pc, #288]	; (80094d0 <xTaskIncrementTick+0x14c>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00a      	beq.n	80093cc <xTaskIncrementTick+0x48>
	__asm volatile
 80093b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ba:	f383 8811 	msr	BASEPRI, r3
 80093be:	f3bf 8f6f 	isb	sy
 80093c2:	f3bf 8f4f 	dsb	sy
 80093c6:	603b      	str	r3, [r7, #0]
}
 80093c8:	bf00      	nop
 80093ca:	e7fe      	b.n	80093ca <xTaskIncrementTick+0x46>
 80093cc:	4b40      	ldr	r3, [pc, #256]	; (80094d0 <xTaskIncrementTick+0x14c>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	60fb      	str	r3, [r7, #12]
 80093d2:	4b40      	ldr	r3, [pc, #256]	; (80094d4 <xTaskIncrementTick+0x150>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a3e      	ldr	r2, [pc, #248]	; (80094d0 <xTaskIncrementTick+0x14c>)
 80093d8:	6013      	str	r3, [r2, #0]
 80093da:	4a3e      	ldr	r2, [pc, #248]	; (80094d4 <xTaskIncrementTick+0x150>)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6013      	str	r3, [r2, #0]
 80093e0:	4b3d      	ldr	r3, [pc, #244]	; (80094d8 <xTaskIncrementTick+0x154>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3301      	adds	r3, #1
 80093e6:	4a3c      	ldr	r2, [pc, #240]	; (80094d8 <xTaskIncrementTick+0x154>)
 80093e8:	6013      	str	r3, [r2, #0]
 80093ea:	f000 fa01 	bl	80097f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80093ee:	4b3b      	ldr	r3, [pc, #236]	; (80094dc <xTaskIncrementTick+0x158>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	693a      	ldr	r2, [r7, #16]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d348      	bcc.n	800948a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093f8:	4b35      	ldr	r3, [pc, #212]	; (80094d0 <xTaskIncrementTick+0x14c>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d104      	bne.n	800940c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009402:	4b36      	ldr	r3, [pc, #216]	; (80094dc <xTaskIncrementTick+0x158>)
 8009404:	f04f 32ff 	mov.w	r2, #4294967295
 8009408:	601a      	str	r2, [r3, #0]
					break;
 800940a:	e03e      	b.n	800948a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800940c:	4b30      	ldr	r3, [pc, #192]	; (80094d0 <xTaskIncrementTick+0x14c>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	429a      	cmp	r2, r3
 8009422:	d203      	bcs.n	800942c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009424:	4a2d      	ldr	r2, [pc, #180]	; (80094dc <xTaskIncrementTick+0x158>)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800942a:	e02e      	b.n	800948a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	3304      	adds	r3, #4
 8009430:	4618      	mov	r0, r3
 8009432:	f7ff fb51 	bl	8008ad8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800943a:	2b00      	cmp	r3, #0
 800943c:	d004      	beq.n	8009448 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	3318      	adds	r3, #24
 8009442:	4618      	mov	r0, r3
 8009444:	f7ff fb48 	bl	8008ad8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944c:	2201      	movs	r2, #1
 800944e:	409a      	lsls	r2, r3
 8009450:	4b23      	ldr	r3, [pc, #140]	; (80094e0 <xTaskIncrementTick+0x15c>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4313      	orrs	r3, r2
 8009456:	4a22      	ldr	r2, [pc, #136]	; (80094e0 <xTaskIncrementTick+0x15c>)
 8009458:	6013      	str	r3, [r2, #0]
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800945e:	4613      	mov	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4413      	add	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4a1f      	ldr	r2, [pc, #124]	; (80094e4 <xTaskIncrementTick+0x160>)
 8009468:	441a      	add	r2, r3
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	3304      	adds	r3, #4
 800946e:	4619      	mov	r1, r3
 8009470:	4610      	mov	r0, r2
 8009472:	f7ff fad4 	bl	8008a1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800947a:	4b1b      	ldr	r3, [pc, #108]	; (80094e8 <xTaskIncrementTick+0x164>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009480:	429a      	cmp	r2, r3
 8009482:	d3b9      	bcc.n	80093f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009484:	2301      	movs	r3, #1
 8009486:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009488:	e7b6      	b.n	80093f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800948a:	4b17      	ldr	r3, [pc, #92]	; (80094e8 <xTaskIncrementTick+0x164>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009490:	4914      	ldr	r1, [pc, #80]	; (80094e4 <xTaskIncrementTick+0x160>)
 8009492:	4613      	mov	r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	440b      	add	r3, r1
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d901      	bls.n	80094a6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80094a2:	2301      	movs	r3, #1
 80094a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80094a6:	4b11      	ldr	r3, [pc, #68]	; (80094ec <xTaskIncrementTick+0x168>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d007      	beq.n	80094be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80094ae:	2301      	movs	r3, #1
 80094b0:	617b      	str	r3, [r7, #20]
 80094b2:	e004      	b.n	80094be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80094b4:	4b0e      	ldr	r3, [pc, #56]	; (80094f0 <xTaskIncrementTick+0x16c>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	3301      	adds	r3, #1
 80094ba:	4a0d      	ldr	r2, [pc, #52]	; (80094f0 <xTaskIncrementTick+0x16c>)
 80094bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80094be:	697b      	ldr	r3, [r7, #20]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3718      	adds	r7, #24
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	20000830 	.word	0x20000830
 80094cc:	2000080c 	.word	0x2000080c
 80094d0:	200007c0 	.word	0x200007c0
 80094d4:	200007c4 	.word	0x200007c4
 80094d8:	20000820 	.word	0x20000820
 80094dc:	20000828 	.word	0x20000828
 80094e0:	20000810 	.word	0x20000810
 80094e4:	2000070c 	.word	0x2000070c
 80094e8:	20000708 	.word	0x20000708
 80094ec:	2000081c 	.word	0x2000081c
 80094f0:	20000818 	.word	0x20000818

080094f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80094f4:	b480      	push	{r7}
 80094f6:	b087      	sub	sp, #28
 80094f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80094fa:	4b29      	ldr	r3, [pc, #164]	; (80095a0 <vTaskSwitchContext+0xac>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d003      	beq.n	800950a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009502:	4b28      	ldr	r3, [pc, #160]	; (80095a4 <vTaskSwitchContext+0xb0>)
 8009504:	2201      	movs	r2, #1
 8009506:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009508:	e044      	b.n	8009594 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800950a:	4b26      	ldr	r3, [pc, #152]	; (80095a4 <vTaskSwitchContext+0xb0>)
 800950c:	2200      	movs	r2, #0
 800950e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009510:	4b25      	ldr	r3, [pc, #148]	; (80095a8 <vTaskSwitchContext+0xb4>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	fab3 f383 	clz	r3, r3
 800951c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800951e:	7afb      	ldrb	r3, [r7, #11]
 8009520:	f1c3 031f 	rsb	r3, r3, #31
 8009524:	617b      	str	r3, [r7, #20]
 8009526:	4921      	ldr	r1, [pc, #132]	; (80095ac <vTaskSwitchContext+0xb8>)
 8009528:	697a      	ldr	r2, [r7, #20]
 800952a:	4613      	mov	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4413      	add	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	440b      	add	r3, r1
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10a      	bne.n	8009550 <vTaskSwitchContext+0x5c>
	__asm volatile
 800953a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953e:	f383 8811 	msr	BASEPRI, r3
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	607b      	str	r3, [r7, #4]
}
 800954c:	bf00      	nop
 800954e:	e7fe      	b.n	800954e <vTaskSwitchContext+0x5a>
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	4613      	mov	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4413      	add	r3, r2
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4a14      	ldr	r2, [pc, #80]	; (80095ac <vTaskSwitchContext+0xb8>)
 800955c:	4413      	add	r3, r2
 800955e:	613b      	str	r3, [r7, #16]
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	685a      	ldr	r2, [r3, #4]
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	605a      	str	r2, [r3, #4]
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	685a      	ldr	r2, [r3, #4]
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	3308      	adds	r3, #8
 8009572:	429a      	cmp	r2, r3
 8009574:	d104      	bne.n	8009580 <vTaskSwitchContext+0x8c>
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	685a      	ldr	r2, [r3, #4]
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	605a      	str	r2, [r3, #4]
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	4a0a      	ldr	r2, [pc, #40]	; (80095b0 <vTaskSwitchContext+0xbc>)
 8009588:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800958a:	4b09      	ldr	r3, [pc, #36]	; (80095b0 <vTaskSwitchContext+0xbc>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	334c      	adds	r3, #76	; 0x4c
 8009590:	4a08      	ldr	r2, [pc, #32]	; (80095b4 <vTaskSwitchContext+0xc0>)
 8009592:	6013      	str	r3, [r2, #0]
}
 8009594:	bf00      	nop
 8009596:	371c      	adds	r7, #28
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr
 80095a0:	20000830 	.word	0x20000830
 80095a4:	2000081c 	.word	0x2000081c
 80095a8:	20000810 	.word	0x20000810
 80095ac:	2000070c 	.word	0x2000070c
 80095b0:	20000708 	.word	0x20000708
 80095b4:	20000010 	.word	0x20000010

080095b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b086      	sub	sp, #24
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10a      	bne.n	80095e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	60fb      	str	r3, [r7, #12]
}
 80095e0:	bf00      	nop
 80095e2:	e7fe      	b.n	80095e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	3318      	adds	r3, #24
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7ff fa75 	bl	8008ad8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095ee:	4b1d      	ldr	r3, [pc, #116]	; (8009664 <xTaskRemoveFromEventList+0xac>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d11c      	bne.n	8009630 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	3304      	adds	r3, #4
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7ff fa6c 	bl	8008ad8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009604:	2201      	movs	r2, #1
 8009606:	409a      	lsls	r2, r3
 8009608:	4b17      	ldr	r3, [pc, #92]	; (8009668 <xTaskRemoveFromEventList+0xb0>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4313      	orrs	r3, r2
 800960e:	4a16      	ldr	r2, [pc, #88]	; (8009668 <xTaskRemoveFromEventList+0xb0>)
 8009610:	6013      	str	r3, [r2, #0]
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009616:	4613      	mov	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	4a13      	ldr	r2, [pc, #76]	; (800966c <xTaskRemoveFromEventList+0xb4>)
 8009620:	441a      	add	r2, r3
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	3304      	adds	r3, #4
 8009626:	4619      	mov	r1, r3
 8009628:	4610      	mov	r0, r2
 800962a:	f7ff f9f8 	bl	8008a1e <vListInsertEnd>
 800962e:	e005      	b.n	800963c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	3318      	adds	r3, #24
 8009634:	4619      	mov	r1, r3
 8009636:	480e      	ldr	r0, [pc, #56]	; (8009670 <xTaskRemoveFromEventList+0xb8>)
 8009638:	f7ff f9f1 	bl	8008a1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009640:	4b0c      	ldr	r3, [pc, #48]	; (8009674 <xTaskRemoveFromEventList+0xbc>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009646:	429a      	cmp	r2, r3
 8009648:	d905      	bls.n	8009656 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800964a:	2301      	movs	r3, #1
 800964c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800964e:	4b0a      	ldr	r3, [pc, #40]	; (8009678 <xTaskRemoveFromEventList+0xc0>)
 8009650:	2201      	movs	r2, #1
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	e001      	b.n	800965a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009656:	2300      	movs	r3, #0
 8009658:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800965a:	697b      	ldr	r3, [r7, #20]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3718      	adds	r7, #24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	20000830 	.word	0x20000830
 8009668:	20000810 	.word	0x20000810
 800966c:	2000070c 	.word	0x2000070c
 8009670:	200007c8 	.word	0x200007c8
 8009674:	20000708 	.word	0x20000708
 8009678:	2000081c 	.word	0x2000081c

0800967c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009684:	f000 f852 	bl	800972c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009688:	4b06      	ldr	r3, [pc, #24]	; (80096a4 <prvIdleTask+0x28>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2b01      	cmp	r3, #1
 800968e:	d9f9      	bls.n	8009684 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009690:	4b05      	ldr	r3, [pc, #20]	; (80096a8 <prvIdleTask+0x2c>)
 8009692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009696:	601a      	str	r2, [r3, #0]
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80096a0:	e7f0      	b.n	8009684 <prvIdleTask+0x8>
 80096a2:	bf00      	nop
 80096a4:	2000070c 	.word	0x2000070c
 80096a8:	e000ed04 	.word	0xe000ed04

080096ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096b2:	2300      	movs	r3, #0
 80096b4:	607b      	str	r3, [r7, #4]
 80096b6:	e00c      	b.n	80096d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	4613      	mov	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4413      	add	r3, r2
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	4a12      	ldr	r2, [pc, #72]	; (800970c <prvInitialiseTaskLists+0x60>)
 80096c4:	4413      	add	r3, r2
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7ff f97c 	bl	80089c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	3301      	adds	r3, #1
 80096d0:	607b      	str	r3, [r7, #4]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2b06      	cmp	r3, #6
 80096d6:	d9ef      	bls.n	80096b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80096d8:	480d      	ldr	r0, [pc, #52]	; (8009710 <prvInitialiseTaskLists+0x64>)
 80096da:	f7ff f973 	bl	80089c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80096de:	480d      	ldr	r0, [pc, #52]	; (8009714 <prvInitialiseTaskLists+0x68>)
 80096e0:	f7ff f970 	bl	80089c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096e4:	480c      	ldr	r0, [pc, #48]	; (8009718 <prvInitialiseTaskLists+0x6c>)
 80096e6:	f7ff f96d 	bl	80089c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096ea:	480c      	ldr	r0, [pc, #48]	; (800971c <prvInitialiseTaskLists+0x70>)
 80096ec:	f7ff f96a 	bl	80089c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096f0:	480b      	ldr	r0, [pc, #44]	; (8009720 <prvInitialiseTaskLists+0x74>)
 80096f2:	f7ff f967 	bl	80089c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096f6:	4b0b      	ldr	r3, [pc, #44]	; (8009724 <prvInitialiseTaskLists+0x78>)
 80096f8:	4a05      	ldr	r2, [pc, #20]	; (8009710 <prvInitialiseTaskLists+0x64>)
 80096fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096fc:	4b0a      	ldr	r3, [pc, #40]	; (8009728 <prvInitialiseTaskLists+0x7c>)
 80096fe:	4a05      	ldr	r2, [pc, #20]	; (8009714 <prvInitialiseTaskLists+0x68>)
 8009700:	601a      	str	r2, [r3, #0]
}
 8009702:	bf00      	nop
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	2000070c 	.word	0x2000070c
 8009710:	20000798 	.word	0x20000798
 8009714:	200007ac 	.word	0x200007ac
 8009718:	200007c8 	.word	0x200007c8
 800971c:	200007dc 	.word	0x200007dc
 8009720:	200007f4 	.word	0x200007f4
 8009724:	200007c0 	.word	0x200007c0
 8009728:	200007c4 	.word	0x200007c4

0800972c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009732:	e019      	b.n	8009768 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009734:	f000 fa0e 	bl	8009b54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009738:	4b10      	ldr	r3, [pc, #64]	; (800977c <prvCheckTasksWaitingTermination+0x50>)
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3304      	adds	r3, #4
 8009744:	4618      	mov	r0, r3
 8009746:	f7ff f9c7 	bl	8008ad8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800974a:	4b0d      	ldr	r3, [pc, #52]	; (8009780 <prvCheckTasksWaitingTermination+0x54>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	3b01      	subs	r3, #1
 8009750:	4a0b      	ldr	r2, [pc, #44]	; (8009780 <prvCheckTasksWaitingTermination+0x54>)
 8009752:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009754:	4b0b      	ldr	r3, [pc, #44]	; (8009784 <prvCheckTasksWaitingTermination+0x58>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3b01      	subs	r3, #1
 800975a:	4a0a      	ldr	r2, [pc, #40]	; (8009784 <prvCheckTasksWaitingTermination+0x58>)
 800975c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800975e:	f000 fa29 	bl	8009bb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 f810 	bl	8009788 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009768:	4b06      	ldr	r3, [pc, #24]	; (8009784 <prvCheckTasksWaitingTermination+0x58>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e1      	bne.n	8009734 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009770:	bf00      	nop
 8009772:	bf00      	nop
 8009774:	3708      	adds	r7, #8
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	200007dc 	.word	0x200007dc
 8009780:	20000808 	.word	0x20000808
 8009784:	200007f0 	.word	0x200007f0

08009788 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	334c      	adds	r3, #76	; 0x4c
 8009794:	4618      	mov	r0, r3
 8009796:	f000 fd2f 	bl	800a1f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d108      	bne.n	80097b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a8:	4618      	mov	r0, r3
 80097aa:	f000 fb81 	bl	8009eb0 <vPortFree>
				vPortFree( pxTCB );
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fb7e 	bl	8009eb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80097b4:	e018      	b.n	80097e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d103      	bne.n	80097c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fb75 	bl	8009eb0 <vPortFree>
	}
 80097c6:	e00f      	b.n	80097e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d00a      	beq.n	80097e8 <prvDeleteTCB+0x60>
	__asm volatile
 80097d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d6:	f383 8811 	msr	BASEPRI, r3
 80097da:	f3bf 8f6f 	isb	sy
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	60fb      	str	r3, [r7, #12]
}
 80097e4:	bf00      	nop
 80097e6:	e7fe      	b.n	80097e6 <prvDeleteTCB+0x5e>
	}
 80097e8:	bf00      	nop
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097f6:	4b0c      	ldr	r3, [pc, #48]	; (8009828 <prvResetNextTaskUnblockTime+0x38>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d104      	bne.n	800980a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009800:	4b0a      	ldr	r3, [pc, #40]	; (800982c <prvResetNextTaskUnblockTime+0x3c>)
 8009802:	f04f 32ff 	mov.w	r2, #4294967295
 8009806:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009808:	e008      	b.n	800981c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800980a:	4b07      	ldr	r3, [pc, #28]	; (8009828 <prvResetNextTaskUnblockTime+0x38>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	4a04      	ldr	r2, [pc, #16]	; (800982c <prvResetNextTaskUnblockTime+0x3c>)
 800981a:	6013      	str	r3, [r2, #0]
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr
 8009828:	200007c0 	.word	0x200007c0
 800982c:	20000828 	.word	0x20000828

08009830 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800983a:	4b29      	ldr	r3, [pc, #164]	; (80098e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009840:	4b28      	ldr	r3, [pc, #160]	; (80098e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	3304      	adds	r3, #4
 8009846:	4618      	mov	r0, r3
 8009848:	f7ff f946 	bl	8008ad8 <uxListRemove>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d10b      	bne.n	800986a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009852:	4b24      	ldr	r3, [pc, #144]	; (80098e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009858:	2201      	movs	r2, #1
 800985a:	fa02 f303 	lsl.w	r3, r2, r3
 800985e:	43da      	mvns	r2, r3
 8009860:	4b21      	ldr	r3, [pc, #132]	; (80098e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4013      	ands	r3, r2
 8009866:	4a20      	ldr	r2, [pc, #128]	; (80098e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009868:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009870:	d10a      	bne.n	8009888 <prvAddCurrentTaskToDelayedList+0x58>
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d007      	beq.n	8009888 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009878:	4b1a      	ldr	r3, [pc, #104]	; (80098e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3304      	adds	r3, #4
 800987e:	4619      	mov	r1, r3
 8009880:	481a      	ldr	r0, [pc, #104]	; (80098ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8009882:	f7ff f8cc 	bl	8008a1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009886:	e026      	b.n	80098d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4413      	add	r3, r2
 800988e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009890:	4b14      	ldr	r3, [pc, #80]	; (80098e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68ba      	ldr	r2, [r7, #8]
 8009896:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009898:	68ba      	ldr	r2, [r7, #8]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	429a      	cmp	r2, r3
 800989e:	d209      	bcs.n	80098b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098a0:	4b13      	ldr	r3, [pc, #76]	; (80098f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	4b0f      	ldr	r3, [pc, #60]	; (80098e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	3304      	adds	r3, #4
 80098aa:	4619      	mov	r1, r3
 80098ac:	4610      	mov	r0, r2
 80098ae:	f7ff f8da 	bl	8008a66 <vListInsert>
}
 80098b2:	e010      	b.n	80098d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098b4:	4b0f      	ldr	r3, [pc, #60]	; (80098f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	4b0a      	ldr	r3, [pc, #40]	; (80098e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	3304      	adds	r3, #4
 80098be:	4619      	mov	r1, r3
 80098c0:	4610      	mov	r0, r2
 80098c2:	f7ff f8d0 	bl	8008a66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80098c6:	4b0c      	ldr	r3, [pc, #48]	; (80098f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68ba      	ldr	r2, [r7, #8]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d202      	bcs.n	80098d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80098d0:	4a09      	ldr	r2, [pc, #36]	; (80098f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	6013      	str	r3, [r2, #0]
}
 80098d6:	bf00      	nop
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	2000080c 	.word	0x2000080c
 80098e4:	20000708 	.word	0x20000708
 80098e8:	20000810 	.word	0x20000810
 80098ec:	200007f4 	.word	0x200007f4
 80098f0:	200007c4 	.word	0x200007c4
 80098f4:	200007c0 	.word	0x200007c0
 80098f8:	20000828 	.word	0x20000828

080098fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	3b04      	subs	r3, #4
 800990c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009914:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	3b04      	subs	r3, #4
 800991a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	f023 0201 	bic.w	r2, r3, #1
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	3b04      	subs	r3, #4
 800992a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800992c:	4a0c      	ldr	r2, [pc, #48]	; (8009960 <pxPortInitialiseStack+0x64>)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	3b14      	subs	r3, #20
 8009936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	3b04      	subs	r3, #4
 8009942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f06f 0202 	mvn.w	r2, #2
 800994a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	3b20      	subs	r3, #32
 8009950:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009952:	68fb      	ldr	r3, [r7, #12]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3714      	adds	r7, #20
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr
 8009960:	08009965 	.word	0x08009965

08009964 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800996a:	2300      	movs	r3, #0
 800996c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800996e:	4b12      	ldr	r3, [pc, #72]	; (80099b8 <prvTaskExitError+0x54>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009976:	d00a      	beq.n	800998e <prvTaskExitError+0x2a>
	__asm volatile
 8009978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	60fb      	str	r3, [r7, #12]
}
 800998a:	bf00      	nop
 800998c:	e7fe      	b.n	800998c <prvTaskExitError+0x28>
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	60bb      	str	r3, [r7, #8]
}
 80099a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099a2:	bf00      	nop
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d0fc      	beq.n	80099a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80099aa:	bf00      	nop
 80099ac:	bf00      	nop
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	2000000c 	.word	0x2000000c
 80099bc:	00000000 	.word	0x00000000

080099c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80099c0:	4b07      	ldr	r3, [pc, #28]	; (80099e0 <pxCurrentTCBConst2>)
 80099c2:	6819      	ldr	r1, [r3, #0]
 80099c4:	6808      	ldr	r0, [r1, #0]
 80099c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ca:	f380 8809 	msr	PSP, r0
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f04f 0000 	mov.w	r0, #0
 80099d6:	f380 8811 	msr	BASEPRI, r0
 80099da:	4770      	bx	lr
 80099dc:	f3af 8000 	nop.w

080099e0 <pxCurrentTCBConst2>:
 80099e0:	20000708 	.word	0x20000708
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80099e4:	bf00      	nop
 80099e6:	bf00      	nop

080099e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80099e8:	4808      	ldr	r0, [pc, #32]	; (8009a0c <prvPortStartFirstTask+0x24>)
 80099ea:	6800      	ldr	r0, [r0, #0]
 80099ec:	6800      	ldr	r0, [r0, #0]
 80099ee:	f380 8808 	msr	MSP, r0
 80099f2:	f04f 0000 	mov.w	r0, #0
 80099f6:	f380 8814 	msr	CONTROL, r0
 80099fa:	b662      	cpsie	i
 80099fc:	b661      	cpsie	f
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	df00      	svc	0
 8009a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a0a:	bf00      	nop
 8009a0c:	e000ed08 	.word	0xe000ed08

08009a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a16:	4b46      	ldr	r3, [pc, #280]	; (8009b30 <xPortStartScheduler+0x120>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a46      	ldr	r2, [pc, #280]	; (8009b34 <xPortStartScheduler+0x124>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d10a      	bne.n	8009a36 <xPortStartScheduler+0x26>
	__asm volatile
 8009a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	613b      	str	r3, [r7, #16]
}
 8009a32:	bf00      	nop
 8009a34:	e7fe      	b.n	8009a34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a36:	4b3e      	ldr	r3, [pc, #248]	; (8009b30 <xPortStartScheduler+0x120>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a3f      	ldr	r2, [pc, #252]	; (8009b38 <xPortStartScheduler+0x128>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d10a      	bne.n	8009a56 <xPortStartScheduler+0x46>
	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	60fb      	str	r3, [r7, #12]
}
 8009a52:	bf00      	nop
 8009a54:	e7fe      	b.n	8009a54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a56:	4b39      	ldr	r3, [pc, #228]	; (8009b3c <xPortStartScheduler+0x12c>)
 8009a58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	22ff      	movs	r2, #255	; 0xff
 8009a66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a70:	78fb      	ldrb	r3, [r7, #3]
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a78:	b2da      	uxtb	r2, r3
 8009a7a:	4b31      	ldr	r3, [pc, #196]	; (8009b40 <xPortStartScheduler+0x130>)
 8009a7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a7e:	4b31      	ldr	r3, [pc, #196]	; (8009b44 <xPortStartScheduler+0x134>)
 8009a80:	2207      	movs	r2, #7
 8009a82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a84:	e009      	b.n	8009a9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009a86:	4b2f      	ldr	r3, [pc, #188]	; (8009b44 <xPortStartScheduler+0x134>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	4a2d      	ldr	r2, [pc, #180]	; (8009b44 <xPortStartScheduler+0x134>)
 8009a8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a90:	78fb      	ldrb	r3, [r7, #3]
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	005b      	lsls	r3, r3, #1
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a9a:	78fb      	ldrb	r3, [r7, #3]
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aa2:	2b80      	cmp	r3, #128	; 0x80
 8009aa4:	d0ef      	beq.n	8009a86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009aa6:	4b27      	ldr	r3, [pc, #156]	; (8009b44 <xPortStartScheduler+0x134>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f1c3 0307 	rsb	r3, r3, #7
 8009aae:	2b04      	cmp	r3, #4
 8009ab0:	d00a      	beq.n	8009ac8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	60bb      	str	r3, [r7, #8]
}
 8009ac4:	bf00      	nop
 8009ac6:	e7fe      	b.n	8009ac6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ac8:	4b1e      	ldr	r3, [pc, #120]	; (8009b44 <xPortStartScheduler+0x134>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	021b      	lsls	r3, r3, #8
 8009ace:	4a1d      	ldr	r2, [pc, #116]	; (8009b44 <xPortStartScheduler+0x134>)
 8009ad0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ad2:	4b1c      	ldr	r3, [pc, #112]	; (8009b44 <xPortStartScheduler+0x134>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ada:	4a1a      	ldr	r2, [pc, #104]	; (8009b44 <xPortStartScheduler+0x134>)
 8009adc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	b2da      	uxtb	r2, r3
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ae6:	4b18      	ldr	r3, [pc, #96]	; (8009b48 <xPortStartScheduler+0x138>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a17      	ldr	r2, [pc, #92]	; (8009b48 <xPortStartScheduler+0x138>)
 8009aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009af0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009af2:	4b15      	ldr	r3, [pc, #84]	; (8009b48 <xPortStartScheduler+0x138>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a14      	ldr	r2, [pc, #80]	; (8009b48 <xPortStartScheduler+0x138>)
 8009af8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009afc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009afe:	f000 f8dd 	bl	8009cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b02:	4b12      	ldr	r3, [pc, #72]	; (8009b4c <xPortStartScheduler+0x13c>)
 8009b04:	2200      	movs	r2, #0
 8009b06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b08:	f000 f8fc 	bl	8009d04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b0c:	4b10      	ldr	r3, [pc, #64]	; (8009b50 <xPortStartScheduler+0x140>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a0f      	ldr	r2, [pc, #60]	; (8009b50 <xPortStartScheduler+0x140>)
 8009b12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b18:	f7ff ff66 	bl	80099e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b1c:	f7ff fcea 	bl	80094f4 <vTaskSwitchContext>
	prvTaskExitError();
 8009b20:	f7ff ff20 	bl	8009964 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3718      	adds	r7, #24
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	e000ed00 	.word	0xe000ed00
 8009b34:	410fc271 	.word	0x410fc271
 8009b38:	410fc270 	.word	0x410fc270
 8009b3c:	e000e400 	.word	0xe000e400
 8009b40:	20000834 	.word	0x20000834
 8009b44:	20000838 	.word	0x20000838
 8009b48:	e000ed20 	.word	0xe000ed20
 8009b4c:	2000000c 	.word	0x2000000c
 8009b50:	e000ef34 	.word	0xe000ef34

08009b54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
	__asm volatile
 8009b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5e:	f383 8811 	msr	BASEPRI, r3
 8009b62:	f3bf 8f6f 	isb	sy
 8009b66:	f3bf 8f4f 	dsb	sy
 8009b6a:	607b      	str	r3, [r7, #4]
}
 8009b6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b6e:	4b0f      	ldr	r3, [pc, #60]	; (8009bac <vPortEnterCritical+0x58>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	3301      	adds	r3, #1
 8009b74:	4a0d      	ldr	r2, [pc, #52]	; (8009bac <vPortEnterCritical+0x58>)
 8009b76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b78:	4b0c      	ldr	r3, [pc, #48]	; (8009bac <vPortEnterCritical+0x58>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d10f      	bne.n	8009ba0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b80:	4b0b      	ldr	r3, [pc, #44]	; (8009bb0 <vPortEnterCritical+0x5c>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00a      	beq.n	8009ba0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	603b      	str	r3, [r7, #0]
}
 8009b9c:	bf00      	nop
 8009b9e:	e7fe      	b.n	8009b9e <vPortEnterCritical+0x4a>
	}
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	2000000c 	.word	0x2000000c
 8009bb0:	e000ed04 	.word	0xe000ed04

08009bb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009bba:	4b12      	ldr	r3, [pc, #72]	; (8009c04 <vPortExitCritical+0x50>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10a      	bne.n	8009bd8 <vPortExitCritical+0x24>
	__asm volatile
 8009bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc6:	f383 8811 	msr	BASEPRI, r3
 8009bca:	f3bf 8f6f 	isb	sy
 8009bce:	f3bf 8f4f 	dsb	sy
 8009bd2:	607b      	str	r3, [r7, #4]
}
 8009bd4:	bf00      	nop
 8009bd6:	e7fe      	b.n	8009bd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009bd8:	4b0a      	ldr	r3, [pc, #40]	; (8009c04 <vPortExitCritical+0x50>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	3b01      	subs	r3, #1
 8009bde:	4a09      	ldr	r2, [pc, #36]	; (8009c04 <vPortExitCritical+0x50>)
 8009be0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009be2:	4b08      	ldr	r3, [pc, #32]	; (8009c04 <vPortExitCritical+0x50>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d105      	bne.n	8009bf6 <vPortExitCritical+0x42>
 8009bea:	2300      	movs	r3, #0
 8009bec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	f383 8811 	msr	BASEPRI, r3
}
 8009bf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009bf6:	bf00      	nop
 8009bf8:	370c      	adds	r7, #12
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	2000000c 	.word	0x2000000c
	...

08009c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c10:	f3ef 8009 	mrs	r0, PSP
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	4b15      	ldr	r3, [pc, #84]	; (8009c70 <pxCurrentTCBConst>)
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	f01e 0f10 	tst.w	lr, #16
 8009c20:	bf08      	it	eq
 8009c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2a:	6010      	str	r0, [r2, #0]
 8009c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c34:	f380 8811 	msr	BASEPRI, r0
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f7ff fc58 	bl	80094f4 <vTaskSwitchContext>
 8009c44:	f04f 0000 	mov.w	r0, #0
 8009c48:	f380 8811 	msr	BASEPRI, r0
 8009c4c:	bc09      	pop	{r0, r3}
 8009c4e:	6819      	ldr	r1, [r3, #0]
 8009c50:	6808      	ldr	r0, [r1, #0]
 8009c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c56:	f01e 0f10 	tst.w	lr, #16
 8009c5a:	bf08      	it	eq
 8009c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c60:	f380 8809 	msr	PSP, r0
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	f3af 8000 	nop.w

08009c70 <pxCurrentTCBConst>:
 8009c70:	20000708 	.word	0x20000708
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c74:	bf00      	nop
 8009c76:	bf00      	nop

08009c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	607b      	str	r3, [r7, #4]
}
 8009c90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c92:	f7ff fb77 	bl	8009384 <xTaskIncrementTick>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d003      	beq.n	8009ca4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c9c:	4b06      	ldr	r3, [pc, #24]	; (8009cb8 <SysTick_Handler+0x40>)
 8009c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ca2:	601a      	str	r2, [r3, #0]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	f383 8811 	msr	BASEPRI, r3
}
 8009cae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009cb0:	bf00      	nop
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	e000ed04 	.word	0xe000ed04

08009cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009cc0:	4b0b      	ldr	r3, [pc, #44]	; (8009cf0 <vPortSetupTimerInterrupt+0x34>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009cc6:	4b0b      	ldr	r3, [pc, #44]	; (8009cf4 <vPortSetupTimerInterrupt+0x38>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009ccc:	4b0a      	ldr	r3, [pc, #40]	; (8009cf8 <vPortSetupTimerInterrupt+0x3c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a0a      	ldr	r2, [pc, #40]	; (8009cfc <vPortSetupTimerInterrupt+0x40>)
 8009cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd6:	099b      	lsrs	r3, r3, #6
 8009cd8:	4a09      	ldr	r2, [pc, #36]	; (8009d00 <vPortSetupTimerInterrupt+0x44>)
 8009cda:	3b01      	subs	r3, #1
 8009cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009cde:	4b04      	ldr	r3, [pc, #16]	; (8009cf0 <vPortSetupTimerInterrupt+0x34>)
 8009ce0:	2207      	movs	r2, #7
 8009ce2:	601a      	str	r2, [r3, #0]
}
 8009ce4:	bf00      	nop
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	e000e010 	.word	0xe000e010
 8009cf4:	e000e018 	.word	0xe000e018
 8009cf8:	20000000 	.word	0x20000000
 8009cfc:	10624dd3 	.word	0x10624dd3
 8009d00:	e000e014 	.word	0xe000e014

08009d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d14 <vPortEnableVFP+0x10>
 8009d08:	6801      	ldr	r1, [r0, #0]
 8009d0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009d0e:	6001      	str	r1, [r0, #0]
 8009d10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d12:	bf00      	nop
 8009d14:	e000ed88 	.word	0xe000ed88

08009d18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b08a      	sub	sp, #40	; 0x28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d20:	2300      	movs	r3, #0
 8009d22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d24:	f7ff fa84 	bl	8009230 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d28:	4b5b      	ldr	r3, [pc, #364]	; (8009e98 <pvPortMalloc+0x180>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d101      	bne.n	8009d34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d30:	f000 f920 	bl	8009f74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d34:	4b59      	ldr	r3, [pc, #356]	; (8009e9c <pvPortMalloc+0x184>)
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f040 8093 	bne.w	8009e68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d01d      	beq.n	8009d84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009d48:	2208      	movs	r2, #8
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f003 0307 	and.w	r3, r3, #7
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d014      	beq.n	8009d84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f023 0307 	bic.w	r3, r3, #7
 8009d60:	3308      	adds	r3, #8
 8009d62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f003 0307 	and.w	r3, r3, #7
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00a      	beq.n	8009d84 <pvPortMalloc+0x6c>
	__asm volatile
 8009d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d72:	f383 8811 	msr	BASEPRI, r3
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	617b      	str	r3, [r7, #20]
}
 8009d80:	bf00      	nop
 8009d82:	e7fe      	b.n	8009d82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d06e      	beq.n	8009e68 <pvPortMalloc+0x150>
 8009d8a:	4b45      	ldr	r3, [pc, #276]	; (8009ea0 <pvPortMalloc+0x188>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d869      	bhi.n	8009e68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d94:	4b43      	ldr	r3, [pc, #268]	; (8009ea4 <pvPortMalloc+0x18c>)
 8009d96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d98:	4b42      	ldr	r3, [pc, #264]	; (8009ea4 <pvPortMalloc+0x18c>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d9e:	e004      	b.n	8009daa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d903      	bls.n	8009dbc <pvPortMalloc+0xa4>
 8009db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d1f1      	bne.n	8009da0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009dbc:	4b36      	ldr	r3, [pc, #216]	; (8009e98 <pvPortMalloc+0x180>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d050      	beq.n	8009e68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009dc6:	6a3b      	ldr	r3, [r7, #32]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2208      	movs	r2, #8
 8009dcc:	4413      	add	r3, r2
 8009dce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	6a3b      	ldr	r3, [r7, #32]
 8009dd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dda:	685a      	ldr	r2, [r3, #4]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	1ad2      	subs	r2, r2, r3
 8009de0:	2308      	movs	r3, #8
 8009de2:	005b      	lsls	r3, r3, #1
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d91f      	bls.n	8009e28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4413      	add	r3, r2
 8009dee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	f003 0307 	and.w	r3, r3, #7
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00a      	beq.n	8009e10 <pvPortMalloc+0xf8>
	__asm volatile
 8009dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	613b      	str	r3, [r7, #16]
}
 8009e0c:	bf00      	nop
 8009e0e:	e7fe      	b.n	8009e0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	685a      	ldr	r2, [r3, #4]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	1ad2      	subs	r2, r2, r3
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e22:	69b8      	ldr	r0, [r7, #24]
 8009e24:	f000 f908 	bl	800a038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e28:	4b1d      	ldr	r3, [pc, #116]	; (8009ea0 <pvPortMalloc+0x188>)
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	4a1b      	ldr	r2, [pc, #108]	; (8009ea0 <pvPortMalloc+0x188>)
 8009e34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e36:	4b1a      	ldr	r3, [pc, #104]	; (8009ea0 <pvPortMalloc+0x188>)
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	4b1b      	ldr	r3, [pc, #108]	; (8009ea8 <pvPortMalloc+0x190>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d203      	bcs.n	8009e4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e42:	4b17      	ldr	r3, [pc, #92]	; (8009ea0 <pvPortMalloc+0x188>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a18      	ldr	r2, [pc, #96]	; (8009ea8 <pvPortMalloc+0x190>)
 8009e48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4c:	685a      	ldr	r2, [r3, #4]
 8009e4e:	4b13      	ldr	r3, [pc, #76]	; (8009e9c <pvPortMalloc+0x184>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	431a      	orrs	r2, r3
 8009e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009e5e:	4b13      	ldr	r3, [pc, #76]	; (8009eac <pvPortMalloc+0x194>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	3301      	adds	r3, #1
 8009e64:	4a11      	ldr	r2, [pc, #68]	; (8009eac <pvPortMalloc+0x194>)
 8009e66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e68:	f7ff f9f0 	bl	800924c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	f003 0307 	and.w	r3, r3, #7
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00a      	beq.n	8009e8c <pvPortMalloc+0x174>
	__asm volatile
 8009e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7a:	f383 8811 	msr	BASEPRI, r3
 8009e7e:	f3bf 8f6f 	isb	sy
 8009e82:	f3bf 8f4f 	dsb	sy
 8009e86:	60fb      	str	r3, [r7, #12]
}
 8009e88:	bf00      	nop
 8009e8a:	e7fe      	b.n	8009e8a <pvPortMalloc+0x172>
	return pvReturn;
 8009e8c:	69fb      	ldr	r3, [r7, #28]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3728      	adds	r7, #40	; 0x28
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	20010244 	.word	0x20010244
 8009e9c:	20010258 	.word	0x20010258
 8009ea0:	20010248 	.word	0x20010248
 8009ea4:	2001023c 	.word	0x2001023c
 8009ea8:	2001024c 	.word	0x2001024c
 8009eac:	20010250 	.word	0x20010250

08009eb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d04d      	beq.n	8009f5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ec2:	2308      	movs	r3, #8
 8009ec4:	425b      	negs	r3, r3
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	4413      	add	r3, r2
 8009eca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	685a      	ldr	r2, [r3, #4]
 8009ed4:	4b24      	ldr	r3, [pc, #144]	; (8009f68 <vPortFree+0xb8>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4013      	ands	r3, r2
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d10a      	bne.n	8009ef4 <vPortFree+0x44>
	__asm volatile
 8009ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee2:	f383 8811 	msr	BASEPRI, r3
 8009ee6:	f3bf 8f6f 	isb	sy
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	60fb      	str	r3, [r7, #12]
}
 8009ef0:	bf00      	nop
 8009ef2:	e7fe      	b.n	8009ef2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00a      	beq.n	8009f12 <vPortFree+0x62>
	__asm volatile
 8009efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	60bb      	str	r3, [r7, #8]
}
 8009f0e:	bf00      	nop
 8009f10:	e7fe      	b.n	8009f10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	685a      	ldr	r2, [r3, #4]
 8009f16:	4b14      	ldr	r3, [pc, #80]	; (8009f68 <vPortFree+0xb8>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4013      	ands	r3, r2
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d01e      	beq.n	8009f5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d11a      	bne.n	8009f5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	4b0e      	ldr	r3, [pc, #56]	; (8009f68 <vPortFree+0xb8>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	43db      	mvns	r3, r3
 8009f32:	401a      	ands	r2, r3
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f38:	f7ff f97a 	bl	8009230 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	685a      	ldr	r2, [r3, #4]
 8009f40:	4b0a      	ldr	r3, [pc, #40]	; (8009f6c <vPortFree+0xbc>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4413      	add	r3, r2
 8009f46:	4a09      	ldr	r2, [pc, #36]	; (8009f6c <vPortFree+0xbc>)
 8009f48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f4a:	6938      	ldr	r0, [r7, #16]
 8009f4c:	f000 f874 	bl	800a038 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009f50:	4b07      	ldr	r3, [pc, #28]	; (8009f70 <vPortFree+0xc0>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	3301      	adds	r3, #1
 8009f56:	4a06      	ldr	r2, [pc, #24]	; (8009f70 <vPortFree+0xc0>)
 8009f58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009f5a:	f7ff f977 	bl	800924c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f5e:	bf00      	nop
 8009f60:	3718      	adds	r7, #24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	20010258 	.word	0x20010258
 8009f6c:	20010248 	.word	0x20010248
 8009f70:	20010254 	.word	0x20010254

08009f74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f7a:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 8009f7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f80:	4b27      	ldr	r3, [pc, #156]	; (800a020 <prvHeapInit+0xac>)
 8009f82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f003 0307 	and.w	r3, r3, #7
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00c      	beq.n	8009fa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	3307      	adds	r3, #7
 8009f92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f023 0307 	bic.w	r3, r3, #7
 8009f9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f9c:	68ba      	ldr	r2, [r7, #8]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	1ad3      	subs	r3, r2, r3
 8009fa2:	4a1f      	ldr	r2, [pc, #124]	; (800a020 <prvHeapInit+0xac>)
 8009fa4:	4413      	add	r3, r2
 8009fa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009fac:	4a1d      	ldr	r2, [pc, #116]	; (800a024 <prvHeapInit+0xb0>)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009fb2:	4b1c      	ldr	r3, [pc, #112]	; (800a024 <prvHeapInit+0xb0>)
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009fc0:	2208      	movs	r2, #8
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	1a9b      	subs	r3, r3, r2
 8009fc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f023 0307 	bic.w	r3, r3, #7
 8009fce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	4a15      	ldr	r2, [pc, #84]	; (800a028 <prvHeapInit+0xb4>)
 8009fd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009fd6:	4b14      	ldr	r3, [pc, #80]	; (800a028 <prvHeapInit+0xb4>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009fde:	4b12      	ldr	r3, [pc, #72]	; (800a028 <prvHeapInit+0xb4>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	1ad2      	subs	r2, r2, r3
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ff4:	4b0c      	ldr	r3, [pc, #48]	; (800a028 <prvHeapInit+0xb4>)
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	4a0a      	ldr	r2, [pc, #40]	; (800a02c <prvHeapInit+0xb8>)
 800a002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	4a09      	ldr	r2, [pc, #36]	; (800a030 <prvHeapInit+0xbc>)
 800a00a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a00c:	4b09      	ldr	r3, [pc, #36]	; (800a034 <prvHeapInit+0xc0>)
 800a00e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a012:	601a      	str	r2, [r3, #0]
}
 800a014:	bf00      	nop
 800a016:	3714      	adds	r7, #20
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr
 800a020:	2000083c 	.word	0x2000083c
 800a024:	2001023c 	.word	0x2001023c
 800a028:	20010244 	.word	0x20010244
 800a02c:	2001024c 	.word	0x2001024c
 800a030:	20010248 	.word	0x20010248
 800a034:	20010258 	.word	0x20010258

0800a038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a040:	4b28      	ldr	r3, [pc, #160]	; (800a0e4 <prvInsertBlockIntoFreeList+0xac>)
 800a042:	60fb      	str	r3, [r7, #12]
 800a044:	e002      	b.n	800a04c <prvInsertBlockIntoFreeList+0x14>
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	60fb      	str	r3, [r7, #12]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	429a      	cmp	r2, r3
 800a054:	d8f7      	bhi.n	800a046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	68ba      	ldr	r2, [r7, #8]
 800a060:	4413      	add	r3, r2
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	429a      	cmp	r2, r3
 800a066:	d108      	bne.n	800a07a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	685a      	ldr	r2, [r3, #4]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	441a      	add	r2, r3
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	68ba      	ldr	r2, [r7, #8]
 800a084:	441a      	add	r2, r3
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d118      	bne.n	800a0c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	4b15      	ldr	r3, [pc, #84]	; (800a0e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	429a      	cmp	r2, r3
 800a098:	d00d      	beq.n	800a0b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	441a      	add	r2, r3
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	601a      	str	r2, [r3, #0]
 800a0b4:	e008      	b.n	800a0c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a0b6:	4b0c      	ldr	r3, [pc, #48]	; (800a0e8 <prvInsertBlockIntoFreeList+0xb0>)
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	601a      	str	r2, [r3, #0]
 800a0be:	e003      	b.n	800a0c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d002      	beq.n	800a0d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0d6:	bf00      	nop
 800a0d8:	3714      	adds	r7, #20
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	2001023c 	.word	0x2001023c
 800a0e8:	20010244 	.word	0x20010244

0800a0ec <__libc_init_array>:
 800a0ec:	b570      	push	{r4, r5, r6, lr}
 800a0ee:	4d0d      	ldr	r5, [pc, #52]	; (800a124 <__libc_init_array+0x38>)
 800a0f0:	4c0d      	ldr	r4, [pc, #52]	; (800a128 <__libc_init_array+0x3c>)
 800a0f2:	1b64      	subs	r4, r4, r5
 800a0f4:	10a4      	asrs	r4, r4, #2
 800a0f6:	2600      	movs	r6, #0
 800a0f8:	42a6      	cmp	r6, r4
 800a0fa:	d109      	bne.n	800a110 <__libc_init_array+0x24>
 800a0fc:	4d0b      	ldr	r5, [pc, #44]	; (800a12c <__libc_init_array+0x40>)
 800a0fe:	4c0c      	ldr	r4, [pc, #48]	; (800a130 <__libc_init_array+0x44>)
 800a100:	f000 f8e2 	bl	800a2c8 <_init>
 800a104:	1b64      	subs	r4, r4, r5
 800a106:	10a4      	asrs	r4, r4, #2
 800a108:	2600      	movs	r6, #0
 800a10a:	42a6      	cmp	r6, r4
 800a10c:	d105      	bne.n	800a11a <__libc_init_array+0x2e>
 800a10e:	bd70      	pop	{r4, r5, r6, pc}
 800a110:	f855 3b04 	ldr.w	r3, [r5], #4
 800a114:	4798      	blx	r3
 800a116:	3601      	adds	r6, #1
 800a118:	e7ee      	b.n	800a0f8 <__libc_init_array+0xc>
 800a11a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a11e:	4798      	blx	r3
 800a120:	3601      	adds	r6, #1
 800a122:	e7f2      	b.n	800a10a <__libc_init_array+0x1e>
 800a124:	0800a5ec 	.word	0x0800a5ec
 800a128:	0800a5ec 	.word	0x0800a5ec
 800a12c:	0800a5ec 	.word	0x0800a5ec
 800a130:	0800a5f0 	.word	0x0800a5f0

0800a134 <memset>:
 800a134:	4402      	add	r2, r0
 800a136:	4603      	mov	r3, r0
 800a138:	4293      	cmp	r3, r2
 800a13a:	d100      	bne.n	800a13e <memset+0xa>
 800a13c:	4770      	bx	lr
 800a13e:	f803 1b01 	strb.w	r1, [r3], #1
 800a142:	e7f9      	b.n	800a138 <memset+0x4>

0800a144 <_free_r>:
 800a144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a146:	2900      	cmp	r1, #0
 800a148:	d044      	beq.n	800a1d4 <_free_r+0x90>
 800a14a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a14e:	9001      	str	r0, [sp, #4]
 800a150:	2b00      	cmp	r3, #0
 800a152:	f1a1 0404 	sub.w	r4, r1, #4
 800a156:	bfb8      	it	lt
 800a158:	18e4      	addlt	r4, r4, r3
 800a15a:	f000 f8a9 	bl	800a2b0 <__malloc_lock>
 800a15e:	4a1e      	ldr	r2, [pc, #120]	; (800a1d8 <_free_r+0x94>)
 800a160:	9801      	ldr	r0, [sp, #4]
 800a162:	6813      	ldr	r3, [r2, #0]
 800a164:	b933      	cbnz	r3, 800a174 <_free_r+0x30>
 800a166:	6063      	str	r3, [r4, #4]
 800a168:	6014      	str	r4, [r2, #0]
 800a16a:	b003      	add	sp, #12
 800a16c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a170:	f000 b8a4 	b.w	800a2bc <__malloc_unlock>
 800a174:	42a3      	cmp	r3, r4
 800a176:	d908      	bls.n	800a18a <_free_r+0x46>
 800a178:	6825      	ldr	r5, [r4, #0]
 800a17a:	1961      	adds	r1, r4, r5
 800a17c:	428b      	cmp	r3, r1
 800a17e:	bf01      	itttt	eq
 800a180:	6819      	ldreq	r1, [r3, #0]
 800a182:	685b      	ldreq	r3, [r3, #4]
 800a184:	1949      	addeq	r1, r1, r5
 800a186:	6021      	streq	r1, [r4, #0]
 800a188:	e7ed      	b.n	800a166 <_free_r+0x22>
 800a18a:	461a      	mov	r2, r3
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	b10b      	cbz	r3, 800a194 <_free_r+0x50>
 800a190:	42a3      	cmp	r3, r4
 800a192:	d9fa      	bls.n	800a18a <_free_r+0x46>
 800a194:	6811      	ldr	r1, [r2, #0]
 800a196:	1855      	adds	r5, r2, r1
 800a198:	42a5      	cmp	r5, r4
 800a19a:	d10b      	bne.n	800a1b4 <_free_r+0x70>
 800a19c:	6824      	ldr	r4, [r4, #0]
 800a19e:	4421      	add	r1, r4
 800a1a0:	1854      	adds	r4, r2, r1
 800a1a2:	42a3      	cmp	r3, r4
 800a1a4:	6011      	str	r1, [r2, #0]
 800a1a6:	d1e0      	bne.n	800a16a <_free_r+0x26>
 800a1a8:	681c      	ldr	r4, [r3, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	6053      	str	r3, [r2, #4]
 800a1ae:	4421      	add	r1, r4
 800a1b0:	6011      	str	r1, [r2, #0]
 800a1b2:	e7da      	b.n	800a16a <_free_r+0x26>
 800a1b4:	d902      	bls.n	800a1bc <_free_r+0x78>
 800a1b6:	230c      	movs	r3, #12
 800a1b8:	6003      	str	r3, [r0, #0]
 800a1ba:	e7d6      	b.n	800a16a <_free_r+0x26>
 800a1bc:	6825      	ldr	r5, [r4, #0]
 800a1be:	1961      	adds	r1, r4, r5
 800a1c0:	428b      	cmp	r3, r1
 800a1c2:	bf04      	itt	eq
 800a1c4:	6819      	ldreq	r1, [r3, #0]
 800a1c6:	685b      	ldreq	r3, [r3, #4]
 800a1c8:	6063      	str	r3, [r4, #4]
 800a1ca:	bf04      	itt	eq
 800a1cc:	1949      	addeq	r1, r1, r5
 800a1ce:	6021      	streq	r1, [r4, #0]
 800a1d0:	6054      	str	r4, [r2, #4]
 800a1d2:	e7ca      	b.n	800a16a <_free_r+0x26>
 800a1d4:	b003      	add	sp, #12
 800a1d6:	bd30      	pop	{r4, r5, pc}
 800a1d8:	2001025c 	.word	0x2001025c

0800a1dc <cleanup_glue>:
 800a1dc:	b538      	push	{r3, r4, r5, lr}
 800a1de:	460c      	mov	r4, r1
 800a1e0:	6809      	ldr	r1, [r1, #0]
 800a1e2:	4605      	mov	r5, r0
 800a1e4:	b109      	cbz	r1, 800a1ea <cleanup_glue+0xe>
 800a1e6:	f7ff fff9 	bl	800a1dc <cleanup_glue>
 800a1ea:	4621      	mov	r1, r4
 800a1ec:	4628      	mov	r0, r5
 800a1ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1f2:	f7ff bfa7 	b.w	800a144 <_free_r>
	...

0800a1f8 <_reclaim_reent>:
 800a1f8:	4b2c      	ldr	r3, [pc, #176]	; (800a2ac <_reclaim_reent+0xb4>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4283      	cmp	r3, r0
 800a1fe:	b570      	push	{r4, r5, r6, lr}
 800a200:	4604      	mov	r4, r0
 800a202:	d051      	beq.n	800a2a8 <_reclaim_reent+0xb0>
 800a204:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a206:	b143      	cbz	r3, 800a21a <_reclaim_reent+0x22>
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d14a      	bne.n	800a2a4 <_reclaim_reent+0xac>
 800a20e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a210:	6819      	ldr	r1, [r3, #0]
 800a212:	b111      	cbz	r1, 800a21a <_reclaim_reent+0x22>
 800a214:	4620      	mov	r0, r4
 800a216:	f7ff ff95 	bl	800a144 <_free_r>
 800a21a:	6961      	ldr	r1, [r4, #20]
 800a21c:	b111      	cbz	r1, 800a224 <_reclaim_reent+0x2c>
 800a21e:	4620      	mov	r0, r4
 800a220:	f7ff ff90 	bl	800a144 <_free_r>
 800a224:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a226:	b111      	cbz	r1, 800a22e <_reclaim_reent+0x36>
 800a228:	4620      	mov	r0, r4
 800a22a:	f7ff ff8b 	bl	800a144 <_free_r>
 800a22e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a230:	b111      	cbz	r1, 800a238 <_reclaim_reent+0x40>
 800a232:	4620      	mov	r0, r4
 800a234:	f7ff ff86 	bl	800a144 <_free_r>
 800a238:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a23a:	b111      	cbz	r1, 800a242 <_reclaim_reent+0x4a>
 800a23c:	4620      	mov	r0, r4
 800a23e:	f7ff ff81 	bl	800a144 <_free_r>
 800a242:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a244:	b111      	cbz	r1, 800a24c <_reclaim_reent+0x54>
 800a246:	4620      	mov	r0, r4
 800a248:	f7ff ff7c 	bl	800a144 <_free_r>
 800a24c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a24e:	b111      	cbz	r1, 800a256 <_reclaim_reent+0x5e>
 800a250:	4620      	mov	r0, r4
 800a252:	f7ff ff77 	bl	800a144 <_free_r>
 800a256:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a258:	b111      	cbz	r1, 800a260 <_reclaim_reent+0x68>
 800a25a:	4620      	mov	r0, r4
 800a25c:	f7ff ff72 	bl	800a144 <_free_r>
 800a260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a262:	b111      	cbz	r1, 800a26a <_reclaim_reent+0x72>
 800a264:	4620      	mov	r0, r4
 800a266:	f7ff ff6d 	bl	800a144 <_free_r>
 800a26a:	69a3      	ldr	r3, [r4, #24]
 800a26c:	b1e3      	cbz	r3, 800a2a8 <_reclaim_reent+0xb0>
 800a26e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a270:	4620      	mov	r0, r4
 800a272:	4798      	blx	r3
 800a274:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a276:	b1b9      	cbz	r1, 800a2a8 <_reclaim_reent+0xb0>
 800a278:	4620      	mov	r0, r4
 800a27a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a27e:	f7ff bfad 	b.w	800a1dc <cleanup_glue>
 800a282:	5949      	ldr	r1, [r1, r5]
 800a284:	b941      	cbnz	r1, 800a298 <_reclaim_reent+0xa0>
 800a286:	3504      	adds	r5, #4
 800a288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a28a:	2d80      	cmp	r5, #128	; 0x80
 800a28c:	68d9      	ldr	r1, [r3, #12]
 800a28e:	d1f8      	bne.n	800a282 <_reclaim_reent+0x8a>
 800a290:	4620      	mov	r0, r4
 800a292:	f7ff ff57 	bl	800a144 <_free_r>
 800a296:	e7ba      	b.n	800a20e <_reclaim_reent+0x16>
 800a298:	680e      	ldr	r6, [r1, #0]
 800a29a:	4620      	mov	r0, r4
 800a29c:	f7ff ff52 	bl	800a144 <_free_r>
 800a2a0:	4631      	mov	r1, r6
 800a2a2:	e7ef      	b.n	800a284 <_reclaim_reent+0x8c>
 800a2a4:	2500      	movs	r5, #0
 800a2a6:	e7ef      	b.n	800a288 <_reclaim_reent+0x90>
 800a2a8:	bd70      	pop	{r4, r5, r6, pc}
 800a2aa:	bf00      	nop
 800a2ac:	20000010 	.word	0x20000010

0800a2b0 <__malloc_lock>:
 800a2b0:	4801      	ldr	r0, [pc, #4]	; (800a2b8 <__malloc_lock+0x8>)
 800a2b2:	f7f7 ba74 	b.w	800179e <__retarget_lock_acquire_recursive>
 800a2b6:	bf00      	nop
 800a2b8:	200006f8 	.word	0x200006f8

0800a2bc <__malloc_unlock>:
 800a2bc:	4801      	ldr	r0, [pc, #4]	; (800a2c4 <__malloc_unlock+0x8>)
 800a2be:	f7f7 ba82 	b.w	80017c6 <__retarget_lock_release_recursive>
 800a2c2:	bf00      	nop
 800a2c4:	200006f8 	.word	0x200006f8

0800a2c8 <_init>:
 800a2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ca:	bf00      	nop
 800a2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ce:	bc08      	pop	{r3}
 800a2d0:	469e      	mov	lr, r3
 800a2d2:	4770      	bx	lr

0800a2d4 <_fini>:
 800a2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d6:	bf00      	nop
 800a2d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2da:	bc08      	pop	{r3}
 800a2dc:	469e      	mov	lr, r3
 800a2de:	4770      	bx	lr
