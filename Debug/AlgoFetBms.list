
AlgoFetBms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b80c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  0800b9dc  0800b9dc  0001b9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd28  0800bd28  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd28  0800bd28  0001bd28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd30  0800bd30  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd30  0800bd30  0001bd30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd34  0800bd34  0001bd34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800bd38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010344  200000b4  0800bdec  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200103f8  0800bdec  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022bc4  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000569c  00000000  00000000  00042ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d08  00000000  00000000  00048348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b40  00000000  00000000  0004a050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028179  00000000  00000000  0004bb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028fc5  00000000  00000000  00073d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f28cd  00000000  00000000  0009ccce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018f59b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007994  00000000  00000000  0018f5ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b9c4 	.word	0x0800b9c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800b9c4 	.word	0x0800b9c4

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <Unpack_FCU_STATE_REQUEST_can_codegen>:

#endif // CAN_CODEGEN_USE_DIAG_MONITORS


uint32_t Unpack_FCU_STATE_REQUEST_can_codegen(FCU_STATE_REQUEST_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	4613      	mov	r3, r2
 8000520:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->FCU_StateRequest = (_d[0] & (0x07U));
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	f003 0307 	and.w	r3, r3, #7
 800052a:	b2da      	uxtb	r2, r3
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	701a      	strb	r2, [r3, #0]
  _m->mon1.frame_cnt++;

  FMon_FCU_STATE_REQUEST_can_codegen(&_m->mon1, FCU_STATE_REQUEST_CANID);
#endif // CAN_CODEGEN_USE_DIAG_MONITORS

  return FCU_STATE_REQUEST_CANID;
 8000530:	f240 1301 	movw	r3, #257	; 0x101
}
 8000534:	4618      	mov	r0, r3
 8000536:	3714      	adds	r7, #20
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <Pack_BAT_BMS_OvrVIEW_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_BMS_OvrVIEW_can_codegen(BAT_BMS_OvrVIEW_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_BMS_OvrVIEW_DLC) && (i < 8); cframe->Data[i++] = 0);
 800054a:	2300      	movs	r3, #0
 800054c:	73fb      	strb	r3, [r7, #15]
 800054e:	e007      	b.n	8000560 <Pack_BAT_BMS_OvrVIEW_can_codegen+0x20>
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	73fa      	strb	r2, [r7, #15]
 8000556:	461a      	mov	r2, r3
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	4413      	add	r3, r2
 800055c:	2200      	movs	r2, #0
 800055e:	715a      	strb	r2, [r3, #5]
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d802      	bhi.n	800056c <Pack_BAT_BMS_OvrVIEW_can_codegen+0x2c>
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	2b07      	cmp	r3, #7
 800056a:	d9f1      	bls.n	8000550 <Pack_BAT_BMS_OvrVIEW_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_bms_StateReqSrc & (0xFFU));
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	795a      	ldrb	r2, [r3, #5]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	4313      	orrs	r3, r2
 8000576:	b2da      	uxtb	r2, r3
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= (_m->BAT_bms_PackState & (0xFFU));
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	799a      	ldrb	r2, [r3, #6]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	785b      	ldrb	r3, [r3, #1]
 8000584:	4313      	orrs	r3, r2
 8000586:	b2da      	uxtb	r2, r3
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	719a      	strb	r2, [r3, #6]

  cframe->MsgId = BAT_BMS_OvrVIEW_CANID;
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <Pack_BAT_BMS_OvrVIEW_can_codegen+0x6c>)
 8000590:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_BMS_OvrVIEW_DLC;
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	2202      	movs	r2, #2
 8000596:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_BMS_OvrVIEW_IDE;
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	2201      	movs	r2, #1
 800059c:	735a      	strb	r2, [r3, #13]
  return BAT_BMS_OvrVIEW_CANID;
 800059e:	4b03      	ldr	r3, [pc, #12]	; (80005ac <Pack_BAT_BMS_OvrVIEW_can_codegen+0x6c>)
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	001ff610 	.word	0x001ff610

080005b0 <Pack_BAT_BMS_ExtTemp_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_BMS_ExtTemp_can_codegen(BAT_BMS_ExtTemp_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_BMS_ExtTemp_DLC) && (i < 8); cframe->Data[i++] = 0);
 80005ba:	2300      	movs	r3, #0
 80005bc:	73fb      	strb	r3, [r7, #15]
 80005be:	e007      	b.n	80005d0 <Pack_BAT_BMS_ExtTemp_can_codegen+0x20>
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	1c5a      	adds	r2, r3, #1
 80005c4:	73fa      	strb	r2, [r7, #15]
 80005c6:	461a      	mov	r2, r3
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	2200      	movs	r2, #0
 80005ce:	715a      	strb	r2, [r3, #5]
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	2b03      	cmp	r3, #3
 80005d4:	d802      	bhi.n	80005dc <Pack_BAT_BMS_ExtTemp_can_codegen+0x2c>
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	2b07      	cmp	r3, #7
 80005da:	d9f1      	bls.n	80005c0 <Pack_BAT_BMS_ExtTemp_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_bms_ext_temp1 & (0xFFU));
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	795a      	ldrb	r2, [r3, #5]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	4313      	orrs	r3, r2
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_bms_ext_temp1 >> 8) & (0xFFU));
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	799a      	ldrb	r2, [r3, #6]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	0a1b      	lsrs	r3, r3, #8
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	4313      	orrs	r3, r2
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_bms_ext_temp2 & (0xFFU));
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	79da      	ldrb	r2, [r3, #7]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	885b      	ldrh	r3, [r3, #2]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4313      	orrs	r3, r2
 8000610:	b2da      	uxtb	r2, r3
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_bms_ext_temp2 >> 8) & (0xFFU));
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	7a1a      	ldrb	r2, [r3, #8]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	885b      	ldrh	r3, [r3, #2]
 800061e:	0a1b      	lsrs	r3, r3, #8
 8000620:	b29b      	uxth	r3, r3
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4313      	orrs	r3, r2
 8000626:	b2da      	uxtb	r2, r3
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	721a      	strb	r2, [r3, #8]

  cframe->MsgId = BAT_BMS_ExtTemp_CANID;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	4a07      	ldr	r2, [pc, #28]	; (800064c <Pack_BAT_BMS_ExtTemp_can_codegen+0x9c>)
 8000630:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_BMS_ExtTemp_DLC;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	2204      	movs	r2, #4
 8000636:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_BMS_ExtTemp_IDE;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	2201      	movs	r2, #1
 800063c:	735a      	strb	r2, [r3, #13]
  return BAT_BMS_ExtTemp_CANID;
 800063e:	4b03      	ldr	r3, [pc, #12]	; (800064c <Pack_BAT_BMS_ExtTemp_can_codegen+0x9c>)
}
 8000640:	4618      	mov	r0, r3
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	001ff611 	.word	0x001ff611

08000650 <Pack_BAT_AFE_vBRICK_A_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_AFE_vBRICK_A_can_codegen(BAT_AFE_vBRICK_A_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_AFE_vBRICK_A_DLC) && (i < 8); cframe->Data[i++] = 0);
 800065a:	2300      	movs	r3, #0
 800065c:	73fb      	strb	r3, [r7, #15]
 800065e:	e007      	b.n	8000670 <Pack_BAT_AFE_vBRICK_A_can_codegen+0x20>
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	73fa      	strb	r2, [r7, #15]
 8000666:	461a      	mov	r2, r3
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	4413      	add	r3, r2
 800066c:	2200      	movs	r2, #0
 800066e:	715a      	strb	r2, [r3, #5]
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	2b07      	cmp	r3, #7
 8000674:	d802      	bhi.n	800067c <Pack_BAT_AFE_vBRICK_A_can_codegen+0x2c>
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	2b07      	cmp	r3, #7
 800067a:	d9f1      	bls.n	8000660 <Pack_BAT_AFE_vBRICK_A_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_afe_vBrick01 & (0xFFU));
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	795a      	ldrb	r2, [r3, #5]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	4313      	orrs	r3, r2
 8000688:	b2da      	uxtb	r2, r3
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_afe_vBrick01 >> 8) & (0xFFU));
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	799a      	ldrb	r2, [r3, #6]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	0a1b      	lsrs	r3, r3, #8
 8000698:	b29b      	uxth	r3, r3
 800069a:	b2db      	uxtb	r3, r3
 800069c:	4313      	orrs	r3, r2
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_afe_vBrick02 & (0xFFU));
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	79da      	ldrb	r2, [r3, #7]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	885b      	ldrh	r3, [r3, #2]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_afe_vBrick02 >> 8) & (0xFFU));
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	7a1a      	ldrb	r2, [r3, #8]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	885b      	ldrh	r3, [r3, #2]
 80006be:	0a1b      	lsrs	r3, r3, #8
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4313      	orrs	r3, r2
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	721a      	strb	r2, [r3, #8]
  cframe->Data[4] |= (_m->BAT_afe_vBrick03 & (0xFFU));
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	7a5a      	ldrb	r2, [r3, #9]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	889b      	ldrh	r3, [r3, #4]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	725a      	strb	r2, [r3, #9]
  cframe->Data[5] |= ((_m->BAT_afe_vBrick03 >> 8) & (0xFFU));
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	7a9a      	ldrb	r2, [r3, #10]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	889b      	ldrh	r3, [r3, #4]
 80006e6:	0a1b      	lsrs	r3, r3, #8
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	4313      	orrs	r3, r2
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	729a      	strb	r2, [r3, #10]
  cframe->Data[6] |= (_m->BAT_afe_vBrick04 & (0xFFU));
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	7ada      	ldrb	r2, [r3, #11]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	88db      	ldrh	r3, [r3, #6]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4313      	orrs	r3, r2
 8000700:	b2da      	uxtb	r2, r3
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	72da      	strb	r2, [r3, #11]
  cframe->Data[7] |= ((_m->BAT_afe_vBrick04 >> 8) & (0xFFU));
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	7b1a      	ldrb	r2, [r3, #12]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	88db      	ldrh	r3, [r3, #6]
 800070e:	0a1b      	lsrs	r3, r3, #8
 8000710:	b29b      	uxth	r3, r3
 8000712:	b2db      	uxtb	r3, r3
 8000714:	4313      	orrs	r3, r2
 8000716:	b2da      	uxtb	r2, r3
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	731a      	strb	r2, [r3, #12]

  cframe->MsgId = BAT_AFE_vBRICK_A_CANID;
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	4a07      	ldr	r2, [pc, #28]	; (800073c <Pack_BAT_AFE_vBRICK_A_can_codegen+0xec>)
 8000720:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_AFE_vBRICK_A_DLC;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	2208      	movs	r2, #8
 8000726:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_AFE_vBRICK_A_IDE;
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	2201      	movs	r2, #1
 800072c:	735a      	strb	r2, [r3, #13]
  return BAT_AFE_vBRICK_A_CANID;
 800072e:	4b03      	ldr	r3, [pc, #12]	; (800073c <Pack_BAT_AFE_vBRICK_A_can_codegen+0xec>)
}
 8000730:	4618      	mov	r0, r3
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	001ff710 	.word	0x001ff710

08000740 <Pack_BAT_AFE_vBRICK_B_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_AFE_vBRICK_B_can_codegen(BAT_AFE_vBRICK_B_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_AFE_vBRICK_B_DLC) && (i < 8); cframe->Data[i++] = 0);
 800074a:	2300      	movs	r3, #0
 800074c:	73fb      	strb	r3, [r7, #15]
 800074e:	e007      	b.n	8000760 <Pack_BAT_AFE_vBRICK_B_can_codegen+0x20>
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	1c5a      	adds	r2, r3, #1
 8000754:	73fa      	strb	r2, [r7, #15]
 8000756:	461a      	mov	r2, r3
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	4413      	add	r3, r2
 800075c:	2200      	movs	r2, #0
 800075e:	715a      	strb	r2, [r3, #5]
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	2b07      	cmp	r3, #7
 8000764:	d802      	bhi.n	800076c <Pack_BAT_AFE_vBRICK_B_can_codegen+0x2c>
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	2b07      	cmp	r3, #7
 800076a:	d9f1      	bls.n	8000750 <Pack_BAT_AFE_vBRICK_B_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_afe_vBrick05 & (0xFFU));
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	795a      	ldrb	r2, [r3, #5]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4313      	orrs	r3, r2
 8000778:	b2da      	uxtb	r2, r3
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_afe_vBrick05 >> 8) & (0xFFU));
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	799a      	ldrb	r2, [r3, #6]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	0a1b      	lsrs	r3, r3, #8
 8000788:	b29b      	uxth	r3, r3
 800078a:	b2db      	uxtb	r3, r3
 800078c:	4313      	orrs	r3, r2
 800078e:	b2da      	uxtb	r2, r3
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_afe_vBrick06 & (0xFFU));
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	79da      	ldrb	r2, [r3, #7]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	885b      	ldrh	r3, [r3, #2]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_afe_vBrick06 >> 8) & (0xFFU));
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	7a1a      	ldrb	r2, [r3, #8]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	885b      	ldrh	r3, [r3, #2]
 80007ae:	0a1b      	lsrs	r3, r3, #8
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4313      	orrs	r3, r2
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	721a      	strb	r2, [r3, #8]
  cframe->Data[4] |= (_m->BAT_afe_vBrick07 & (0xFFU));
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	7a5a      	ldrb	r2, [r3, #9]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	889b      	ldrh	r3, [r3, #4]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4313      	orrs	r3, r2
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	725a      	strb	r2, [r3, #9]
  cframe->Data[5] |= ((_m->BAT_afe_vBrick07 >> 8) & (0xFFU));
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	7a9a      	ldrb	r2, [r3, #10]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	889b      	ldrh	r3, [r3, #4]
 80007d6:	0a1b      	lsrs	r3, r3, #8
 80007d8:	b29b      	uxth	r3, r3
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4313      	orrs	r3, r2
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	729a      	strb	r2, [r3, #10]
  cframe->Data[6] |= (_m->BAT_afe_vBrick08 & (0xFFU));
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	7ada      	ldrb	r2, [r3, #11]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	88db      	ldrh	r3, [r3, #6]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4313      	orrs	r3, r2
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	72da      	strb	r2, [r3, #11]
  cframe->Data[7] |= ((_m->BAT_afe_vBrick08 >> 8) & (0xFFU));
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	7b1a      	ldrb	r2, [r3, #12]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	88db      	ldrh	r3, [r3, #6]
 80007fe:	0a1b      	lsrs	r3, r3, #8
 8000800:	b29b      	uxth	r3, r3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4313      	orrs	r3, r2
 8000806:	b2da      	uxtb	r2, r3
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	731a      	strb	r2, [r3, #12]

  cframe->MsgId = BAT_AFE_vBRICK_B_CANID;
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	4a07      	ldr	r2, [pc, #28]	; (800082c <Pack_BAT_AFE_vBRICK_B_can_codegen+0xec>)
 8000810:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_AFE_vBRICK_B_DLC;
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	2208      	movs	r2, #8
 8000816:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_AFE_vBRICK_B_IDE;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	735a      	strb	r2, [r3, #13]
  return BAT_AFE_vBRICK_B_CANID;
 800081e:	4b03      	ldr	r3, [pc, #12]	; (800082c <Pack_BAT_AFE_vBRICK_B_can_codegen+0xec>)
}
 8000820:	4618      	mov	r0, r3
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	001ff711 	.word	0x001ff711

08000830 <Pack_BAT_AFE_vBRICK_C_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_AFE_vBRICK_C_can_codegen(BAT_AFE_vBRICK_C_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_AFE_vBRICK_C_DLC) && (i < 8); cframe->Data[i++] = 0);
 800083a:	2300      	movs	r3, #0
 800083c:	73fb      	strb	r3, [r7, #15]
 800083e:	e007      	b.n	8000850 <Pack_BAT_AFE_vBRICK_C_can_codegen+0x20>
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	73fa      	strb	r2, [r7, #15]
 8000846:	461a      	mov	r2, r3
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	4413      	add	r3, r2
 800084c:	2200      	movs	r2, #0
 800084e:	715a      	strb	r2, [r3, #5]
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	2b07      	cmp	r3, #7
 8000854:	d802      	bhi.n	800085c <Pack_BAT_AFE_vBRICK_C_can_codegen+0x2c>
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	2b07      	cmp	r3, #7
 800085a:	d9f1      	bls.n	8000840 <Pack_BAT_AFE_vBRICK_C_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_afe_vBrick09 & (0xFFU));
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	795a      	ldrb	r2, [r3, #5]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4313      	orrs	r3, r2
 8000868:	b2da      	uxtb	r2, r3
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_afe_vBrick09 >> 8) & (0xFFU));
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	799a      	ldrb	r2, [r3, #6]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	0a1b      	lsrs	r3, r3, #8
 8000878:	b29b      	uxth	r3, r3
 800087a:	b2db      	uxtb	r3, r3
 800087c:	4313      	orrs	r3, r2
 800087e:	b2da      	uxtb	r2, r3
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_afe_vBrick10 & (0xFFU));
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	79da      	ldrb	r2, [r3, #7]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	885b      	ldrh	r3, [r3, #2]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4313      	orrs	r3, r2
 8000890:	b2da      	uxtb	r2, r3
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_afe_vBrick10 >> 8) & (0xFFU));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	7a1a      	ldrb	r2, [r3, #8]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	885b      	ldrh	r3, [r3, #2]
 800089e:	0a1b      	lsrs	r3, r3, #8
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	4313      	orrs	r3, r2
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	721a      	strb	r2, [r3, #8]
  cframe->Data[4] |= (_m->BAT_afe_vBrick11 & (0xFFU));
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	7a5a      	ldrb	r2, [r3, #9]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	889b      	ldrh	r3, [r3, #4]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	4313      	orrs	r3, r2
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	725a      	strb	r2, [r3, #9]
  cframe->Data[5] |= ((_m->BAT_afe_vBrick11 >> 8) & (0xFFU));
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	7a9a      	ldrb	r2, [r3, #10]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	889b      	ldrh	r3, [r3, #4]
 80008c6:	0a1b      	lsrs	r3, r3, #8
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	729a      	strb	r2, [r3, #10]
  cframe->Data[6] |= (_m->BAT_afe_vBrick12 & (0xFFU));
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	7ada      	ldrb	r2, [r3, #11]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	88db      	ldrh	r3, [r3, #6]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4313      	orrs	r3, r2
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	72da      	strb	r2, [r3, #11]
  cframe->Data[7] |= ((_m->BAT_afe_vBrick12 >> 8) & (0xFFU));
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	7b1a      	ldrb	r2, [r3, #12]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	88db      	ldrh	r3, [r3, #6]
 80008ee:	0a1b      	lsrs	r3, r3, #8
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4313      	orrs	r3, r2
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	731a      	strb	r2, [r3, #12]

  cframe->MsgId = BAT_AFE_vBRICK_C_CANID;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	4a07      	ldr	r2, [pc, #28]	; (800091c <Pack_BAT_AFE_vBRICK_C_can_codegen+0xec>)
 8000900:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_AFE_vBRICK_C_DLC;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	2208      	movs	r2, #8
 8000906:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_AFE_vBRICK_C_IDE;
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	2201      	movs	r2, #1
 800090c:	735a      	strb	r2, [r3, #13]
  return BAT_AFE_vBRICK_C_CANID;
 800090e:	4b03      	ldr	r3, [pc, #12]	; (800091c <Pack_BAT_AFE_vBRICK_C_can_codegen+0xec>)
}
 8000910:	4618      	mov	r0, r3
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	001ff712 	.word	0x001ff712

08000920 <Pack_BAT_AFE_vBRICK_D_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_AFE_vBRICK_D_can_codegen(BAT_AFE_vBRICK_D_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_AFE_vBRICK_D_DLC) && (i < 8); cframe->Data[i++] = 0);
 800092a:	2300      	movs	r3, #0
 800092c:	73fb      	strb	r3, [r7, #15]
 800092e:	e007      	b.n	8000940 <Pack_BAT_AFE_vBRICK_D_can_codegen+0x20>
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	73fa      	strb	r2, [r7, #15]
 8000936:	461a      	mov	r2, r3
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	4413      	add	r3, r2
 800093c:	2200      	movs	r2, #0
 800093e:	715a      	strb	r2, [r3, #5]
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	2b03      	cmp	r3, #3
 8000944:	d802      	bhi.n	800094c <Pack_BAT_AFE_vBRICK_D_can_codegen+0x2c>
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	2b07      	cmp	r3, #7
 800094a:	d9f1      	bls.n	8000930 <Pack_BAT_AFE_vBRICK_D_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_afe_vBrick13 & (0xFFU));
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	795a      	ldrb	r2, [r3, #5]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	4313      	orrs	r3, r2
 8000958:	b2da      	uxtb	r2, r3
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_afe_vBrick13 >> 8) & (0xFFU));
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	799a      	ldrb	r2, [r3, #6]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	0a1b      	lsrs	r3, r3, #8
 8000968:	b29b      	uxth	r3, r3
 800096a:	b2db      	uxtb	r3, r3
 800096c:	4313      	orrs	r3, r2
 800096e:	b2da      	uxtb	r2, r3
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_afe_vBrick14 & (0xFFU));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	79da      	ldrb	r2, [r3, #7]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	885b      	ldrh	r3, [r3, #2]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	4313      	orrs	r3, r2
 8000980:	b2da      	uxtb	r2, r3
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_afe_vBrick14 >> 8) & (0xFFU));
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	7a1a      	ldrb	r2, [r3, #8]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	885b      	ldrh	r3, [r3, #2]
 800098e:	0a1b      	lsrs	r3, r3, #8
 8000990:	b29b      	uxth	r3, r3
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4313      	orrs	r3, r2
 8000996:	b2da      	uxtb	r2, r3
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	721a      	strb	r2, [r3, #8]

  cframe->MsgId = BAT_AFE_vBRICK_D_CANID;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	4a07      	ldr	r2, [pc, #28]	; (80009bc <Pack_BAT_AFE_vBRICK_D_can_codegen+0x9c>)
 80009a0:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_AFE_vBRICK_D_DLC;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	2204      	movs	r2, #4
 80009a6:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_AFE_vBRICK_D_IDE;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	2201      	movs	r2, #1
 80009ac:	735a      	strb	r2, [r3, #13]
  return BAT_AFE_vBRICK_D_CANID;
 80009ae:	4b03      	ldr	r3, [pc, #12]	; (80009bc <Pack_BAT_AFE_vBRICK_D_can_codegen+0x9c>)
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	001ff713 	.word	0x001ff713

080009c0 <Pack_BAT_GAUGE_OvrVIEW_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_GAUGE_OvrVIEW_can_codegen(BAT_GAUGE_OvrVIEW_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_GAUGE_OvrVIEW_DLC) && (i < 8); cframe->Data[i++] = 0);
 80009ca:	2300      	movs	r3, #0
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	e007      	b.n	80009e0 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x20>
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	73fa      	strb	r2, [r7, #15]
 80009d6:	461a      	mov	r2, r3
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	2200      	movs	r2, #0
 80009de:	715a      	strb	r2, [r3, #5]
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d802      	bhi.n	80009ec <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x2c>
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	2b07      	cmp	r3, #7
 80009ea:	d9f1      	bls.n	80009d0 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_gauge_SoC & (0xFFU));
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	795a      	ldrb	r2, [r3, #5]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= (_m->BAT_gauge_SoH & (0xFFU));
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	799a      	ldrb	r2, [r3, #6]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	785b      	ldrb	r3, [r3, #1]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_gauge_cycleCount & (0xFFU));
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	79da      	ldrb	r2, [r3, #7]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	885b      	ldrh	r3, [r3, #2]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	4313      	orrs	r3, r2
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_gauge_cycleCount >> 8) & (0xFFU));
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	7a1a      	ldrb	r2, [r3, #8]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	885b      	ldrh	r3, [r3, #2]
 8000a26:	0a1b      	lsrs	r3, r3, #8
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	721a      	strb	r2, [r3, #8]

  cframe->MsgId = BAT_GAUGE_OvrVIEW_CANID;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x94>)
 8000a38:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_GAUGE_OvrVIEW_DLC;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_GAUGE_OvrVIEW_IDE;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	2201      	movs	r2, #1
 8000a44:	735a      	strb	r2, [r3, #13]
  return BAT_GAUGE_OvrVIEW_CANID;
 8000a46:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x94>)
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	001ff810 	.word	0x001ff810

08000a58 <Pack_BAT_GAUGE_ViT_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_GAUGE_ViT_can_codegen(BAT_GAUGE_ViT_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_GAUGE_ViT_DLC) && (i < 8); cframe->Data[i++] = 0);
 8000a62:	2300      	movs	r3, #0
 8000a64:	73fb      	strb	r3, [r7, #15]
 8000a66:	e007      	b.n	8000a78 <Pack_BAT_GAUGE_ViT_can_codegen+0x20>
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	73fa      	strb	r2, [r7, #15]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	4413      	add	r3, r2
 8000a74:	2200      	movs	r2, #0
 8000a76:	715a      	strb	r2, [r3, #5]
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	2b05      	cmp	r3, #5
 8000a7c:	d802      	bhi.n	8000a84 <Pack_BAT_GAUGE_ViT_can_codegen+0x2c>
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	2b07      	cmp	r3, #7
 8000a82:	d9f1      	bls.n	8000a68 <Pack_BAT_GAUGE_ViT_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_gauge_vPack & (0xFFU));
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	795a      	ldrb	r2, [r3, #5]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_gauge_vPack >> 8) & (0xFFU));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	799a      	ldrb	r2, [r3, #6]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	0a1b      	lsrs	r3, r3, #8
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_gauge_iPack & (0xFFU));
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	79da      	ldrb	r2, [r3, #7]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_gauge_iPack >> 8) & (0xFFU));
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	7a1a      	ldrb	r2, [r3, #8]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000aca:	121b      	asrs	r3, r3, #8
 8000acc:	b21b      	sxth	r3, r3
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	721a      	strb	r2, [r3, #8]
  cframe->Data[4] |= (_m->BAT_gauge_tPack & (0xFFU));
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	7a5a      	ldrb	r2, [r3, #9]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	889b      	ldrh	r3, [r3, #4]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	725a      	strb	r2, [r3, #9]
  cframe->Data[5] |= ((_m->BAT_gauge_tPack >> 8) & (0xFFU));
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	7a9a      	ldrb	r2, [r3, #10]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	889b      	ldrh	r3, [r3, #4]
 8000af2:	0a1b      	lsrs	r3, r3, #8
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	4313      	orrs	r3, r2
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	729a      	strb	r2, [r3, #10]

  cframe->MsgId = BAT_GAUGE_ViT_CANID;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <Pack_BAT_GAUGE_ViT_can_codegen+0xc8>)
 8000b04:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_GAUGE_ViT_DLC;
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	2206      	movs	r2, #6
 8000b0a:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_GAUGE_ViT_IDE;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	2201      	movs	r2, #1
 8000b10:	735a      	strb	r2, [r3, #13]
  return BAT_GAUGE_ViT_CANID;
 8000b12:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <Pack_BAT_GAUGE_ViT_can_codegen+0xc8>)
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	001ff820 	.word	0x001ff820

08000b24 <bq76942_init>:
extern int16_t bq76942_TS3config(void);
//------------------------------------------------------------------------------
// Static Functions definition

int16_t bq76942_init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
  int16_t ret_val = SYS_ERR;
 8000b2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b2e:	80fb      	strh	r3, [r7, #6]
  do
  {
    TsBmsPower_cfg_t.power_cfg_reg = PowerConfig;
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <bq76942_init+0x68>)
 8000b32:	f249 2234 	movw	r2, #37428	; 0x9234
 8000b36:	805a      	strh	r2, [r3, #2]
    TsBmsPower_cfg_t.reg_val = 0x2D80;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <bq76942_init+0x68>)
 8000b3a:	f44f 5236 	mov.w	r2, #11648	; 0x2d80
 8000b3e:	80da      	strh	r2, [r3, #6]
    TsBmsPower_cfg_t.len = 4;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <bq76942_init+0x68>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	701a      	strb	r2, [r3, #0]
    AFE_RAMwrite.vCellModecmd = 0x03C3;           //0x03C3 for 6S | 0x0303 for 4S
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <bq76942_init+0x6c>)
 8000b48:	f240 32c3 	movw	r2, #963	; 0x3c3
 8000b4c:	801a      	strh	r2, [r3, #0]
    AFE_RAMwrite.FETs_CONTROL = 0x0;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <bq76942_init+0x6c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	805a      	strh	r2, [r3, #2]
    AFE_RAMwrite.enabledProtectionsA = 0xBC;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <bq76942_init+0x6c>)
 8000b56:	22bc      	movs	r2, #188	; 0xbc
 8000b58:	809a      	strh	r2, [r3, #4]
    AFE_RAMwrite.enabledProtectionsB = 0xF7;      //(Also sets OTC, OTD and OTF as 1)
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <bq76942_init+0x6c>)
 8000b5c:	22f7      	movs	r2, #247	; 0xf7
 8000b5e:	80da      	strh	r2, [r3, #6]
    AFE_RAMwrite.prechargeStartVoltage = 0x0A8C;  //2700mV
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <bq76942_init+0x6c>)
 8000b62:	f640 228c 	movw	r2, #2700	; 0xa8c
 8000b66:	811a      	strh	r2, [r3, #8]
    AFE_RAMwrite.prechargeStopVoltage = 0x0AF0;   //2800mV
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <bq76942_init+0x6c>)
 8000b6a:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000b6e:	815a      	strh	r2, [r3, #10]
    AFE_RAMwrite.TS3config = 0x07;                //Default for TS3: 0X07 | Default for TS1: 0x07
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <bq76942_init+0x6c>)
 8000b72:	2207      	movs	r2, #7
 8000b74:	819a      	strh	r2, [r3, #12]
    //bq76942_vCellMode();
    //bq76942_FETs_Control();
    //bq76942_TS3config();

        //RESET #Resets the Bq769x2 Registers
        bq76942_AFE_reset();
 8000b76:	f000 f923 	bl	8000dc0 <bq76942_AFE_reset>
    //OCCThreshold --> 0x05				#Rsense is 1mohm. Unit is 2mV, so 10mV means a threshold of 10A
    //OCD1Threshold --> 0x0A			#Rsense is 1mohm. Unit is 2mV, so 20mV means a threshold of 20A
    //SCDThreshold --> 0x02				#40mV across 1mohm, i.e, 40A. Refer to TRM page 168
    //SCDDelay --> 0x03					#30us. Enabled with a delay of (value - 1) * 15 us; min value of 1
    //SCDLLatchLimit --> 0x01			#Only with load removal. Refer to TRM page 170
    ret_val = SYS_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	80fb      	strh	r3, [r7, #6]
  } while(false);

  return ret_val;
 8000b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000d0 	.word	0x200000d0
 8000b90:	200000d8 	.word	0x200000d8

08000b94 <bq76942_FETs_SleepDisable>:

//------------------------------------------------------------------------------
// FET CONTROL COMMANDS
static int16_t bq76942_FETs_SleepDisable(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
  // Puts the FETs in performance mode
  int16_t ret_val = SYS_ERR;
 8000b9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b9e:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76942_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, SLEEP_DISABLE))
 8000ba0:	219a      	movs	r1, #154	; 0x9a
 8000ba2:	203e      	movs	r0, #62	; 0x3e
 8000ba4:	f000 f984 	bl	8000eb0 <bq76942_write_sub_cmd>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d102      	bne.n	8000bb4 <bq76942_FETs_SleepDisable+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	80fb      	strh	r3, [r7, #6]
 8000bb2:	e000      	b.n	8000bb6 <bq76942_FETs_SleepDisable+0x22>
      break;
 8000bb4:	bf00      	nop
  } while(false);
  return ret_val;
 8000bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <bq76942_FETs_enable>:
static int16_t bq76942_FETs_enable(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
  // Enables all the FETs to be controlled
  int16_t ret_val = SYS_ERR;
 8000bc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bcc:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76942_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, FET_ENABLE))
 8000bce:	2122      	movs	r1, #34	; 0x22
 8000bd0:	203e      	movs	r0, #62	; 0x3e
 8000bd2:	f000 f96d 	bl	8000eb0 <bq76942_write_sub_cmd>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d102      	bne.n	8000be2 <bq76942_FETs_enable+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	80fb      	strh	r3, [r7, #6]
 8000be0:	e000      	b.n	8000be4 <bq76942_FETs_enable+0x22>
      break;
 8000be2:	bf00      	nop
  } while(false);
  return ret_val;
 8000be4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <bq76942_allFETs_on>:
static int16_t bq76942_allFETs_on(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
  // Switches on all the FETs
  int16_t ret_val = SYS_ERR;
 8000bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bfa:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76942_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, ALL_FETS_ON))
 8000bfc:	2196      	movs	r1, #150	; 0x96
 8000bfe:	203e      	movs	r0, #62	; 0x3e
 8000c00:	f000 f956 	bl	8000eb0 <bq76942_write_sub_cmd>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d102      	bne.n	8000c10 <bq76942_allFETs_on+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	80fb      	strh	r3, [r7, #6]
 8000c0e:	e000      	b.n	8000c12 <bq76942_allFETs_on+0x22>
      break;
 8000c10:	bf00      	nop
  } while(false);
  return ret_val;
 8000c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <bq76942_allFETs_off>:
static int16_t bq76942_allFETs_off(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
  // Switches off all the FETs
  int16_t ret_val = SYS_ERR;
 8000c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c28:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76942_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, ALL_FETS_OFF))
 8000c2a:	2195      	movs	r1, #149	; 0x95
 8000c2c:	203e      	movs	r0, #62	; 0x3e
 8000c2e:	f000 f93f 	bl	8000eb0 <bq76942_write_sub_cmd>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <bq76942_allFETs_off+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	80fb      	strh	r3, [r7, #6]
 8000c3c:	e000      	b.n	8000c40 <bq76942_allFETs_off+0x22>
      break;
 8000c3e:	bf00      	nop
  } while(false);
  return ret_val;
 8000c40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <bq76942_dischargeOFF>:
static int16_t bq76942_dischargeOFF(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
  //Disable DSG and PDSG FET drivers
  int16_t ret_val = SYS_ERR;
 8000c52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c56:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76942_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, DSG_PDSG_OFF))
 8000c58:	2193      	movs	r1, #147	; 0x93
 8000c5a:	203e      	movs	r0, #62	; 0x3e
 8000c5c:	f000 f928 	bl	8000eb0 <bq76942_write_sub_cmd>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d102      	bne.n	8000c6c <bq76942_dischargeOFF+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	80fb      	strh	r3, [r7, #6]
 8000c6a:	e000      	b.n	8000c6e <bq76942_dischargeOFF+0x22>
      break;
 8000c6c:	bf00      	nop
  } while(false);
  return ret_val;
 8000c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <bq76942_chargeOFF>:
static int16_t bq76942_chargeOFF(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
  //Disable CHG and PCHG FET drivers
  int16_t ret_val = SYS_ERR;
 8000c80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c84:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76942_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, CHG_PCHG_OFF))
 8000c86:	2194      	movs	r1, #148	; 0x94
 8000c88:	203e      	movs	r0, #62	; 0x3e
 8000c8a:	f000 f911 	bl	8000eb0 <bq76942_write_sub_cmd>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <bq76942_chargeOFF+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	80fb      	strh	r3, [r7, #6]
 8000c98:	e000      	b.n	8000c9c <bq76942_chargeOFF+0x22>
      break;
 8000c9a:	bf00      	nop
  } while(false);
  return ret_val;
 8000c9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <bq76942_FETs_ON>:


extern int16_t bq76942_FETs_ON(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  //To switch on the FETs whenever required
  int8_t ret_val = SYS_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  do
  {
    if(SYS_OK!= bq76942_FETs_enable())
 8000cb2:	f7ff ff86 	bl	8000bc2 <bq76942_FETs_enable>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d112      	bne.n	8000ce2 <bq76942_FETs_ON+0x3a>
    {
      break;
    }
    HAL_Delay(50);
 8000cbc:	2032      	movs	r0, #50	; 0x32
 8000cbe:	f001 ffcd 	bl	8002c5c <HAL_Delay>
    if(SYS_OK!= bq76942_FETs_SleepDisable())
 8000cc2:	f7ff ff67 	bl	8000b94 <bq76942_FETs_SleepDisable>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d10c      	bne.n	8000ce6 <bq76942_FETs_ON+0x3e>
    {
      break;
    }
    HAL_Delay(50);
 8000ccc:	2032      	movs	r0, #50	; 0x32
 8000cce:	f001 ffc5 	bl	8002c5c <HAL_Delay>
    if(SYS_OK!= bq76942_allFETs_on())
 8000cd2:	f7ff ff8d 	bl	8000bf0 <bq76942_allFETs_on>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d106      	bne.n	8000cea <bq76942_FETs_ON+0x42>
    {
      break;
    }
    ret_val = SYS_OK;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	71fb      	strb	r3, [r7, #7]
 8000ce0:	e004      	b.n	8000cec <bq76942_FETs_ON+0x44>
      break;
 8000ce2:	bf00      	nop
 8000ce4:	e002      	b.n	8000cec <bq76942_FETs_ON+0x44>
      break;
 8000ce6:	bf00      	nop
 8000ce8:	e000      	b.n	8000cec <bq76942_FETs_ON+0x44>
      break;
 8000cea:	bf00      	nop
  }while(false);
  return ret_val;
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	b21b      	sxth	r3, r3
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <bq76942_FETs_OFF>:
extern int16_t bq76942_FETs_OFF(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
  //To switch off the FETs whenever required
  int8_t ret_val = SYS_OK;
 8000d00:	2300      	movs	r3, #0
 8000d02:	71fb      	strb	r3, [r7, #7]
  do
  {
    if(SYS_OK!= bq76942_FETs_enable())
 8000d04:	f7ff ff5d 	bl	8000bc2 <bq76942_FETs_enable>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d10a      	bne.n	8000d24 <bq76942_FETs_OFF+0x2a>
    {
      break;
    }
    HAL_Delay(50);
 8000d0e:	2032      	movs	r0, #50	; 0x32
 8000d10:	f001 ffa4 	bl	8002c5c <HAL_Delay>
    if(SYS_OK!= bq76942_allFETs_off())
 8000d14:	f7ff ff83 	bl	8000c1e <bq76942_allFETs_off>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d104      	bne.n	8000d28 <bq76942_FETs_OFF+0x2e>
    {
      break;
    }
    ret_val = SYS_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	71fb      	strb	r3, [r7, #7]
 8000d22:	e002      	b.n	8000d2a <bq76942_FETs_OFF+0x30>
      break;
 8000d24:	bf00      	nop
 8000d26:	e000      	b.n	8000d2a <bq76942_FETs_OFF+0x30>
      break;
 8000d28:	bf00      	nop
  }while(false);
  return ret_val;
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	b21b      	sxth	r3, r3
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <bq76942_Charge>:

extern int16_t bq76942_Charge(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  //Takes the BMS to Charging mode
  uint8_t ret_val = SYS_ERR;
 8000d3e:	23ff      	movs	r3, #255	; 0xff
 8000d40:	71fb      	strb	r3, [r7, #7]
  do
  {
    if(SYS_OK!= bq76942_FETs_enable())
 8000d42:	f7ff ff3e 	bl	8000bc2 <bq76942_FETs_enable>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d10c      	bne.n	8000d66 <bq76942_Charge+0x2e>
    {
      break;
    }
    if(SYS_OK!= bq76942_allFETs_on())
 8000d4c:	f7ff ff50 	bl	8000bf0 <bq76942_allFETs_on>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d109      	bne.n	8000d6a <bq76942_Charge+0x32>
    {
      break;
    }
    if(SYS_OK!= bq76942_dischargeOFF())
 8000d56:	f7ff ff79 	bl	8000c4c <bq76942_dischargeOFF>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d106      	bne.n	8000d6e <bq76942_Charge+0x36>
    {
      break;
    }
    ret_val = SYS_OK;
 8000d60:	2300      	movs	r3, #0
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	e004      	b.n	8000d70 <bq76942_Charge+0x38>
      break;
 8000d66:	bf00      	nop
 8000d68:	e002      	b.n	8000d70 <bq76942_Charge+0x38>
      break;
 8000d6a:	bf00      	nop
 8000d6c:	e000      	b.n	8000d70 <bq76942_Charge+0x38>
      break;
 8000d6e:	bf00      	nop
  }while(false);
  return ret_val;
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	b21b      	sxth	r3, r3
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <bq76942_Discharge>:
extern int16_t bq76942_Discharge(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
  //Takes the BMS to Discharging mode
  uint8_t ret_val = SYS_ERR;
 8000d82:	23ff      	movs	r3, #255	; 0xff
 8000d84:	71fb      	strb	r3, [r7, #7]
  do
  {
    if(SYS_OK!= bq76942_FETs_enable())
 8000d86:	f7ff ff1c 	bl	8000bc2 <bq76942_FETs_enable>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d10c      	bne.n	8000daa <bq76942_Discharge+0x2e>
    {
      break;
    }
    if(SYS_OK!= bq76942_allFETs_on())
 8000d90:	f7ff ff2e 	bl	8000bf0 <bq76942_allFETs_on>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d109      	bne.n	8000dae <bq76942_Discharge+0x32>
    {
      break;
    }
    if(SYS_OK!= bq76942_chargeOFF())
 8000d9a:	f7ff ff6e 	bl	8000c7a <bq76942_chargeOFF>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d106      	bne.n	8000db2 <bq76942_Discharge+0x36>
    {
      break;
    }
    ret_val = SYS_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	71fb      	strb	r3, [r7, #7]
 8000da8:	e004      	b.n	8000db4 <bq76942_Discharge+0x38>
      break;
 8000daa:	bf00      	nop
 8000dac:	e002      	b.n	8000db4 <bq76942_Discharge+0x38>
      break;
 8000dae:	bf00      	nop
 8000db0:	e000      	b.n	8000db4 <bq76942_Discharge+0x38>
      break;
 8000db2:	bf00      	nop
  }while(false);
  return ret_val;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	b21b      	sxth	r3, r3
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <bq76942_AFE_reset>:
  return ret_val;
}
//------------------------------------------------------------------------------------------------------------
//AFE Functions
extern int16_t bq76942_AFE_reset(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  // Resets all the registers of the AFE
  int16_t ret_val = SYS_ERR;
 8000dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dca:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76942_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, RESET))
 8000dcc:	2112      	movs	r1, #18
 8000dce:	203e      	movs	r0, #62	; 0x3e
 8000dd0:	f000 f86e 	bl	8000eb0 <bq76942_write_sub_cmd>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d102      	bne.n	8000de0 <bq76942_AFE_reset+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	80fb      	strh	r3, [r7, #6]
 8000dde:	e000      	b.n	8000de2 <bq76942_AFE_reset+0x22>
      break;
 8000de0:	bf00      	nop
  } while(false);
  return ret_val;
 8000de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <bq76942_get_device_number>:
    ret_val = SYS_OK;
    return ret_val;
}

extern int16_t bq76942_get_device_number(uint16_t *pDev_num)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b084      	sub	sp, #16
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
    int16_t ret_val = SYS_ERR;
 8000df6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dfa:	81fb      	strh	r3, [r7, #14]
    do
    {
      if(SYS_OK != bq76942_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, DEVICE_NUMBER))
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	203e      	movs	r0, #62	; 0x3e
 8000e00:	f000 f856 	bl	8000eb0 <bq76942_write_sub_cmd>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10a      	bne.n	8000e20 <bq76942_get_device_number+0x32>
      {
        break;
      }
    if(SYS_OK != bq76942_read_sub_cmd_data_buffer(SUB_CMD_DATA_BUFF_ADDR, pDev_num, 2))
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	6879      	ldr	r1, [r7, #4]
 8000e0e:	2040      	movs	r0, #64	; 0x40
 8000e10:	f000 f8d4 	bl	8000fbc <bq76942_read_sub_cmd_data_buffer>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d104      	bne.n	8000e24 <bq76942_get_device_number+0x36>
    {
      break;
    }
    ret_val = SYS_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	81fb      	strh	r3, [r7, #14]
 8000e1e:	e002      	b.n	8000e26 <bq76942_get_device_number+0x38>
        break;
 8000e20:	bf00      	nop
 8000e22:	e000      	b.n	8000e26 <bq76942_get_device_number+0x38>
      break;
 8000e24:	bf00      	nop
  } while(false);
  return ret_val;
 8000e26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <bq76942_CRC8>:
}


static uint8_t bq76942_CRC8(uint8_t *pData, uint8_t len)
//Calculates CRC8 for passed bytes.
{
 8000e32:	b480      	push	{r7}
 8000e34:	b085      	sub	sp, #20
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  uint8_t crc = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	73bb      	strb	r3, [r7, #14]
  while(len-- != 0)
 8000e42:	e029      	b.n	8000e98 <bq76942_CRC8+0x66>
  {
    for (i = 0x80; i != 0; i /= 2)
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	73fb      	strb	r3, [r7, #15]
 8000e48:	e020      	b.n	8000e8c <bq76942_CRC8+0x5a>
    {
      if((crc & 0x80) != 0)
 8000e4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	da09      	bge.n	8000e66 <bq76942_CRC8+0x34>
      {
        crc *= 2;
 8000e52:	7bbb      	ldrb	r3, [r7, #14]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	73bb      	strb	r3, [r7, #14]
        crc ^= 0x107;
 8000e58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e5c:	f083 0307 	eor.w	r3, r3, #7
 8000e60:	b25b      	sxtb	r3, r3
 8000e62:	73bb      	strb	r3, [r7, #14]
 8000e64:	e002      	b.n	8000e6c <bq76942_CRC8+0x3a>
      }
      else
        crc *= 2;
 8000e66:	7bbb      	ldrb	r3, [r7, #14]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	73bb      	strb	r3, [r7, #14]

      if((*pData & i) != 0)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	781a      	ldrb	r2, [r3, #0]
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	4013      	ands	r3, r2
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d005      	beq.n	8000e86 <bq76942_CRC8+0x54>
        crc ^= 0x107;
 8000e7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e7e:	f083 0307 	eor.w	r3, r3, #7
 8000e82:	b25b      	sxtb	r3, r3
 8000e84:	73bb      	strb	r3, [r7, #14]
    for (i = 0x80; i != 0; i /= 2)
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	085b      	lsrs	r3, r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1db      	bne.n	8000e4a <bq76942_CRC8+0x18>
    }
    pData++;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3301      	adds	r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
  while(len-- != 0)
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	1e5a      	subs	r2, r3, #1
 8000e9c:	70fa      	strb	r2, [r7, #3]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1d0      	bne.n	8000e44 <bq76942_CRC8+0x12>
  }
  return (crc);
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <bq76942_write_sub_cmd>:

//-----------------------------------------------------------------------------------------------------------------------------
// READ/WRITE FUNCTIONS FOR DIRECT COMMANDS and SUBCOMMANDS

static int16_t bq76942_write_sub_cmd(uint16_t subCmdRegAddr, uint16_t subCmd)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af02      	add	r7, sp, #8
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	460a      	mov	r2, r1
 8000eba:	80fb      	strh	r3, [r7, #6]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	80bb      	strh	r3, [r7, #4]
  //To write data to subcommand address register (0x3E)
  uint8_t subCmdRegAddrWRITE = subCmdRegAddr | 0x80u; //Changes the leftmost bit to 1 since W Operation
 8000ec0:	88fb      	ldrh	r3, [r7, #6]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ec8:	76fb      	strb	r3, [r7, #27]
  int16_t ret_val = SYS_ERR;
 8000eca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ece:	83fb      	strh	r3, [r7, #30]
  uint8_t pTxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 8000ed0:	4b37      	ldr	r3, [pc, #220]	; (8000fb0 <bq76942_write_sub_cmd+0x100>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	823b      	strh	r3, [r7, #16]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	74bb      	strb	r3, [r7, #18]
  uint8_t pRxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 8000eda:	4b35      	ldr	r3, [pc, #212]	; (8000fb0 <bq76942_write_sub_cmd+0x100>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	81bb      	strh	r3, [r7, #12]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	73bb      	strb	r3, [r7, #14]
  uint8_t retry_cnt = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	777b      	strb	r3, [r7, #29]
  uint16_t TxByte, RxByte = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	833b      	strh	r3, [r7, #24]
  for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	773b      	strb	r3, [r7, #28]
 8000ef0:	e054      	b.n	8000f9c <bq76942_write_sub_cmd+0xec>
  {
    pTxData[0] = subCmdRegAddrWRITE + i;
 8000ef2:	7efa      	ldrb	r2, [r7, #27]
 8000ef4:	7f3b      	ldrb	r3, [r7, #28]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	743b      	strb	r3, [r7, #16]
    pTxData[1] = subCmd >> (i * 8); //To retrieve the lower byte and then the higher byte subsequently
 8000efc:	88ba      	ldrh	r2, [r7, #4]
 8000efe:	7f3b      	ldrb	r3, [r7, #28]
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	fa42 f303 	asr.w	r3, r2, r3
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	747b      	strb	r3, [r7, #17]
    pTxData[2] = bq76942_CRC8(pTxData, SUB_CMD_LEN);
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	2102      	movs	r1, #2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff8e 	bl	8000e32 <bq76942_CRC8>
 8000f16:	4603      	mov	r3, r0
 8000f18:	74bb      	strb	r3, [r7, #18]
    TxByte = pTxData[0] | (pTxData[1] << 8);
 8000f1a:	7c3b      	ldrb	r3, [r7, #16]
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	7c7b      	ldrb	r3, [r7, #17]
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	b21b      	sxth	r3, r3
 8000f24:	4313      	orrs	r3, r2
 8000f26:	b21b      	sxth	r3, r3
 8000f28:	82fb      	strh	r3, [r7, #22]
    do
    {
      HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);                                          // Enable CS
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2110      	movs	r1, #16
 8000f2e:	4821      	ldr	r0, [pc, #132]	; (8000fb4 <bq76942_write_sub_cmd+0x104>)
 8000f30:	f004 fbdc 	bl	80056ec <HAL_GPIO_WritePin>
      HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, SPI_SUB_CMD_FRAME_LEN, SPI_WR_TIMEOUT_MS); // Rx & Tx simultaneously (Full Duplex)
 8000f34:	f107 020c 	add.w	r2, r7, #12
 8000f38:	f107 0110 	add.w	r1, r7, #16
 8000f3c:	230a      	movs	r3, #10
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2303      	movs	r3, #3
 8000f42:	481d      	ldr	r0, [pc, #116]	; (8000fb8 <bq76942_write_sub_cmd+0x108>)
 8000f44:	f007 fc5a 	bl	80087fc <HAL_SPI_TransmitReceive>
      HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);                                          // Disable CS
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2110      	movs	r1, #16
 8000f4c:	4819      	ldr	r0, [pc, #100]	; (8000fb4 <bq76942_write_sub_cmd+0x104>)
 8000f4e:	f004 fbcd 	bl	80056ec <HAL_GPIO_WritePin>
      HAL_Delay(2);
 8000f52:	2002      	movs	r0, #2
 8000f54:	f001 fe82 	bl	8002c5c <HAL_Delay>
      RxByte = pRxData[0] | (pRxData[1] << 8);
 8000f58:	7b3b      	ldrb	r3, [r7, #12]
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	7b7b      	ldrb	r3, [r7, #13]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	833b      	strh	r3, [r7, #24]
      retry_cnt++;
 8000f68:	7f7b      	ldrb	r3, [r7, #29]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	777b      	strb	r3, [r7, #29]
    } while((TxByte != RxByte) && (retry_cnt < 4));
 8000f6e:	8afa      	ldrh	r2, [r7, #22]
 8000f70:	8b3b      	ldrh	r3, [r7, #24]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d002      	beq.n	8000f7c <bq76942_write_sub_cmd+0xcc>
 8000f76:	7f7b      	ldrb	r3, [r7, #29]
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d9d6      	bls.n	8000f2a <bq76942_write_sub_cmd+0x7a>
    if(TxByte == RxByte)
 8000f7c:	8afa      	ldrh	r2, [r7, #22]
 8000f7e:	8b3b      	ldrh	r3, [r7, #24]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d104      	bne.n	8000f8e <bq76942_write_sub_cmd+0xde>
    {
      retry_cnt=0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	777b      	strb	r3, [r7, #29]
      ret_val = SYS_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	83fb      	strh	r3, [r7, #30]
 8000f8c:	e003      	b.n	8000f96 <bq76942_write_sub_cmd+0xe6>
    }
    else
    {
      ret_val = SYS_ERR;
 8000f8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f92:	83fb      	strh	r3, [r7, #30]
      break;
 8000f94:	e005      	b.n	8000fa2 <bq76942_write_sub_cmd+0xf2>
  for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8000f96:	7f3b      	ldrb	r3, [r7, #28]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	773b      	strb	r3, [r7, #28]
 8000f9c:	7f3b      	ldrb	r3, [r7, #28]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d9a7      	bls.n	8000ef2 <bq76942_write_sub_cmd+0x42>
    }
  }
  return ret_val;
 8000fa2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3720      	adds	r7, #32
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	0800b9dc 	.word	0x0800b9dc
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	200006f4 	.word	0x200006f4

08000fbc <bq76942_read_sub_cmd_data_buffer>:

static int16_t bq76942_read_sub_cmd_data_buffer(uint8_t subCmdRegAddr, uint16_t *pData, uint8_t len)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	71bb      	strb	r3, [r7, #6]
  //To read data from the Subcommand Buffer register(0x40)
  uint8_t RX_DATA[SUB_CMD_DATA_BUFF_LEN_MAX] = {0};  //To store the initial data from the Buffer
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  int16_t ret_val = SYS_ERR;
 8000fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fd4:	83fb      	strh	r3, [r7, #30]
  do
  {
    if((len > SUB_CMD_DATA_BUFF_LEN_MAX) || (len == 0))
 8000fd6:	79bb      	ldrb	r3, [r7, #6]
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	d86f      	bhi.n	80010bc <bq76942_read_sub_cmd_data_buffer+0x100>
 8000fdc:	79bb      	ldrb	r3, [r7, #6]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d06c      	beq.n	80010bc <bq76942_read_sub_cmd_data_buffer+0x100>
    }
//    if(pData == NULL)
//    {
//      break;
//    }
    uint8_t pTxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 8000fe2:	4b39      	ldr	r3, [pc, #228]	; (80010c8 <bq76942_read_sub_cmd_data_buffer+0x10c>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	823b      	strh	r3, [r7, #16]
 8000fe8:	2300      	movs	r3, #0
 8000fea:	74bb      	strb	r3, [r7, #18]
    uint8_t pRxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 8000fec:	4b36      	ldr	r3, [pc, #216]	; (80010c8 <bq76942_read_sub_cmd_data_buffer+0x10c>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	81bb      	strh	r3, [r7, #12]
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73bb      	strb	r3, [r7, #14]
    uint8_t retry_cnt = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	777b      	strb	r3, [r7, #29]
    uint8_t TxByte, RxByte;
    for (uint8_t i = 0; i < len; i++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	773b      	strb	r3, [r7, #28]
 8000ffe:	e04b      	b.n	8001098 <bq76942_read_sub_cmd_data_buffer+0xdc>
    {
      pTxData[0] = subCmdRegAddr + i;
 8001000:	79fa      	ldrb	r2, [r7, #7]
 8001002:	7f3b      	ldrb	r3, [r7, #28]
 8001004:	4413      	add	r3, r2
 8001006:	b2db      	uxtb	r3, r3
 8001008:	743b      	strb	r3, [r7, #16]
      pTxData[1] = 0xFF;
 800100a:	23ff      	movs	r3, #255	; 0xff
 800100c:	747b      	strb	r3, [r7, #17]
      pTxData[2] = bq76942_CRC8(pTxData, SUB_CMD_LEN);
 800100e:	f107 0310 	add.w	r3, r7, #16
 8001012:	2102      	movs	r1, #2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff0c 	bl	8000e32 <bq76942_CRC8>
 800101a:	4603      	mov	r3, r0
 800101c:	74bb      	strb	r3, [r7, #18]
      TxByte = pTxData[0];
 800101e:	7c3b      	ldrb	r3, [r7, #16]
 8001020:	76fb      	strb	r3, [r7, #27]
      retry_cnt = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	777b      	strb	r3, [r7, #29]
      do
      {
        HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);                                          // Enable CS
 8001026:	2200      	movs	r2, #0
 8001028:	2110      	movs	r1, #16
 800102a:	4828      	ldr	r0, [pc, #160]	; (80010cc <bq76942_read_sub_cmd_data_buffer+0x110>)
 800102c:	f004 fb5e 	bl	80056ec <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, SPI_SUB_CMD_FRAME_LEN, SPI_WR_TIMEOUT_MS); // Rx & Tx simultaneously (Full Duplex)
 8001030:	f107 020c 	add.w	r2, r7, #12
 8001034:	f107 0110 	add.w	r1, r7, #16
 8001038:	230a      	movs	r3, #10
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2303      	movs	r3, #3
 800103e:	4824      	ldr	r0, [pc, #144]	; (80010d0 <bq76942_read_sub_cmd_data_buffer+0x114>)
 8001040:	f007 fbdc 	bl	80087fc <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);                                          // Disable CS
 8001044:	2201      	movs	r2, #1
 8001046:	2110      	movs	r1, #16
 8001048:	4820      	ldr	r0, [pc, #128]	; (80010cc <bq76942_read_sub_cmd_data_buffer+0x110>)
 800104a:	f004 fb4f 	bl	80056ec <HAL_GPIO_WritePin>
        HAL_Delay(2);
 800104e:	2002      	movs	r0, #2
 8001050:	f001 fe04 	bl	8002c5c <HAL_Delay>
        RxByte = pRxData[0];
 8001054:	7b3b      	ldrb	r3, [r7, #12]
 8001056:	76bb      	strb	r3, [r7, #26]
        retry_cnt++;
 8001058:	7f7b      	ldrb	r3, [r7, #29]
 800105a:	3301      	adds	r3, #1
 800105c:	777b      	strb	r3, [r7, #29]
      } while((TxByte != RxByte) && (retry_cnt < 4));
 800105e:	7efa      	ldrb	r2, [r7, #27]
 8001060:	7ebb      	ldrb	r3, [r7, #26]
 8001062:	429a      	cmp	r2, r3
 8001064:	d002      	beq.n	800106c <bq76942_read_sub_cmd_data_buffer+0xb0>
 8001066:	7f7b      	ldrb	r3, [r7, #29]
 8001068:	2b03      	cmp	r3, #3
 800106a:	d9dc      	bls.n	8001026 <bq76942_read_sub_cmd_data_buffer+0x6a>
      if(TxByte == RxByte)
 800106c:	7efa      	ldrb	r2, [r7, #27]
 800106e:	7ebb      	ldrb	r3, [r7, #26]
 8001070:	429a      	cmp	r2, r3
 8001072:	d10a      	bne.n	800108a <bq76942_read_sub_cmd_data_buffer+0xce>
      {
        retry_cnt=0;
 8001074:	2300      	movs	r3, #0
 8001076:	777b      	strb	r3, [r7, #29]
        RX_DATA[i] = pRxData[1];
 8001078:	7f3b      	ldrb	r3, [r7, #28]
 800107a:	7b7a      	ldrb	r2, [r7, #13]
 800107c:	3320      	adds	r3, #32
 800107e:	443b      	add	r3, r7
 8001080:	f803 2c0c 	strb.w	r2, [r3, #-12]
        ret_val = SYS_OK;
 8001084:	2300      	movs	r3, #0
 8001086:	83fb      	strh	r3, [r7, #30]
 8001088:	e003      	b.n	8001092 <bq76942_read_sub_cmd_data_buffer+0xd6>
      }
      else
      {
        ret_val = SYS_ERR;
 800108a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800108e:	83fb      	strh	r3, [r7, #30]
        break;
 8001090:	e006      	b.n	80010a0 <bq76942_read_sub_cmd_data_buffer+0xe4>
    for (uint8_t i = 0; i < len; i++)
 8001092:	7f3b      	ldrb	r3, [r7, #28]
 8001094:	3301      	adds	r3, #1
 8001096:	773b      	strb	r3, [r7, #28]
 8001098:	7f3a      	ldrb	r2, [r7, #28]
 800109a:	79bb      	ldrb	r3, [r7, #6]
 800109c:	429a      	cmp	r2, r3
 800109e:	d3af      	bcc.n	8001000 <bq76942_read_sub_cmd_data_buffer+0x44>
      }
    }
    if(ret_val == SYS_OK)
 80010a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d109      	bne.n	80010bc <bq76942_read_sub_cmd_data_buffer+0x100>
      *pData= (RX_DATA[1] << 8) | RX_DATA[0];
 80010a8:	7d7b      	ldrb	r3, [r7, #21]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	7d3b      	ldrb	r3, [r7, #20]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	801a      	strh	r2, [r3, #0]
  } while(false);
  return ret_val;
 80010bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3720      	adds	r7, #32
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	0800b9dc 	.word	0x0800b9dc
 80010cc:	40020800 	.word	0x40020800
 80010d0:	200006f4 	.word	0x200006f4

080010d4 <bq76942_dir_cmd_read>:
  }
  return ret_val;
}

extern int16_t bq76942_dir_cmd_read(uint8_t dirCmdRegAddr, uint16_t *pData, uint8_t len)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af02      	add	r7, sp, #8
 80010da:	4603      	mov	r3, r0
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	71fb      	strb	r3, [r7, #7]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71bb      	strb	r3, [r7, #6]
  //To read data from the direct command registers
  uint8_t RX_DATA[READ_DIR_CMD_BUFF_LEN] = {0};
 80010e4:	2300      	movs	r3, #0
 80010e6:	82bb      	strh	r3, [r7, #20]
  int16_t ret_val = SYS_ERR;
 80010e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ec:	83fb      	strh	r3, [r7, #30]
  do
  {
    if((len > DIR_CMD_DATA_BUFF_LEN_MAX) || (len == 0))
 80010ee:	79bb      	ldrb	r3, [r7, #6]
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d873      	bhi.n	80011dc <bq76942_dir_cmd_read+0x108>
 80010f4:	79bb      	ldrb	r3, [r7, #6]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d070      	beq.n	80011dc <bq76942_dir_cmd_read+0x108>
    {
      break;
    }
    if(pData == NULL)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d06c      	beq.n	80011da <bq76942_dir_cmd_read+0x106>
    {
      break;
    }
    uint8_t pTxData[SPI_DIR_CMD_FRAME_LEN] = { 0 };
 8001100:	4b39      	ldr	r3, [pc, #228]	; (80011e8 <bq76942_dir_cmd_read+0x114>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	823b      	strh	r3, [r7, #16]
 8001106:	2300      	movs	r3, #0
 8001108:	74bb      	strb	r3, [r7, #18]
    uint8_t pRxData[SPI_DIR_CMD_FRAME_LEN] = { 0 };
 800110a:	4b37      	ldr	r3, [pc, #220]	; (80011e8 <bq76942_dir_cmd_read+0x114>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	81bb      	strh	r3, [r7, #12]
 8001110:	2300      	movs	r3, #0
 8001112:	73bb      	strb	r3, [r7, #14]
    uint8_t retry_cnt = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	777b      	strb	r3, [r7, #29]
    uint16_t TxByte, RxByte;
    for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8001118:	2300      	movs	r3, #0
 800111a:	773b      	strb	r3, [r7, #28]
 800111c:	e04b      	b.n	80011b6 <bq76942_dir_cmd_read+0xe2>
    {
      pTxData[0] = dirCmdRegAddr + i;
 800111e:	79fa      	ldrb	r2, [r7, #7]
 8001120:	7f3b      	ldrb	r3, [r7, #28]
 8001122:	4413      	add	r3, r2
 8001124:	b2db      	uxtb	r3, r3
 8001126:	743b      	strb	r3, [r7, #16]
      pTxData[1] = 0xFF;
 8001128:	23ff      	movs	r3, #255	; 0xff
 800112a:	747b      	strb	r3, [r7, #17]
      pTxData[2] = bq76942_CRC8(pTxData, SUB_CMD_LEN);
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	2102      	movs	r1, #2
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fe7d 	bl	8000e32 <bq76942_CRC8>
 8001138:	4603      	mov	r3, r0
 800113a:	74bb      	strb	r3, [r7, #18]
      TxByte = pTxData[0];
 800113c:	7c3b      	ldrb	r3, [r7, #16]
 800113e:	837b      	strh	r3, [r7, #26]
      retry_cnt = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	777b      	strb	r3, [r7, #29]
      do
      {
        HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);                                          // Enable CS
 8001144:	2200      	movs	r2, #0
 8001146:	2110      	movs	r1, #16
 8001148:	4828      	ldr	r0, [pc, #160]	; (80011ec <bq76942_dir_cmd_read+0x118>)
 800114a:	f004 facf 	bl	80056ec <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, SPI_DIR_CMD_FRAME_LEN, SPI_WR_TIMEOUT_MS); // Rx & Tx simultaneously (Full Duplex)
 800114e:	f107 020c 	add.w	r2, r7, #12
 8001152:	f107 0110 	add.w	r1, r7, #16
 8001156:	230a      	movs	r3, #10
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2303      	movs	r3, #3
 800115c:	4824      	ldr	r0, [pc, #144]	; (80011f0 <bq76942_dir_cmd_read+0x11c>)
 800115e:	f007 fb4d 	bl	80087fc <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);                                          // Disable CS
 8001162:	2201      	movs	r2, #1
 8001164:	2110      	movs	r1, #16
 8001166:	4821      	ldr	r0, [pc, #132]	; (80011ec <bq76942_dir_cmd_read+0x118>)
 8001168:	f004 fac0 	bl	80056ec <HAL_GPIO_WritePin>
        HAL_Delay(2);
 800116c:	2002      	movs	r0, #2
 800116e:	f001 fd75 	bl	8002c5c <HAL_Delay>
        RxByte = pRxData[0];
 8001172:	7b3b      	ldrb	r3, [r7, #12]
 8001174:	833b      	strh	r3, [r7, #24]
        retry_cnt++;
 8001176:	7f7b      	ldrb	r3, [r7, #29]
 8001178:	3301      	adds	r3, #1
 800117a:	777b      	strb	r3, [r7, #29]
      } while((TxByte != RxByte) && (retry_cnt < 4));
 800117c:	8b7a      	ldrh	r2, [r7, #26]
 800117e:	8b3b      	ldrh	r3, [r7, #24]
 8001180:	429a      	cmp	r2, r3
 8001182:	d002      	beq.n	800118a <bq76942_dir_cmd_read+0xb6>
 8001184:	7f7b      	ldrb	r3, [r7, #29]
 8001186:	2b03      	cmp	r3, #3
 8001188:	d9dc      	bls.n	8001144 <bq76942_dir_cmd_read+0x70>
      if(TxByte == RxByte)
 800118a:	8b7a      	ldrh	r2, [r7, #26]
 800118c:	8b3b      	ldrh	r3, [r7, #24]
 800118e:	429a      	cmp	r2, r3
 8001190:	d10a      	bne.n	80011a8 <bq76942_dir_cmd_read+0xd4>
      {
        retry_cnt=0;
 8001192:	2300      	movs	r3, #0
 8001194:	777b      	strb	r3, [r7, #29]
        RX_DATA[i] = pRxData[1];
 8001196:	7f3b      	ldrb	r3, [r7, #28]
 8001198:	7b7a      	ldrb	r2, [r7, #13]
 800119a:	3320      	adds	r3, #32
 800119c:	443b      	add	r3, r7
 800119e:	f803 2c0c 	strb.w	r2, [r3, #-12]
        ret_val = SYS_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	83fb      	strh	r3, [r7, #30]
 80011a6:	e003      	b.n	80011b0 <bq76942_dir_cmd_read+0xdc>
      }
      else
      {
        ret_val = SYS_ERR;
 80011a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ac:	83fb      	strh	r3, [r7, #30]
        break;
 80011ae:	e005      	b.n	80011bc <bq76942_dir_cmd_read+0xe8>
    for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 80011b0:	7f3b      	ldrb	r3, [r7, #28]
 80011b2:	3301      	adds	r3, #1
 80011b4:	773b      	strb	r3, [r7, #28]
 80011b6:	7f3b      	ldrb	r3, [r7, #28]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d9b0      	bls.n	800111e <bq76942_dir_cmd_read+0x4a>
      }
    }
    if(ret_val == SYS_OK)
 80011bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d10b      	bne.n	80011dc <bq76942_dir_cmd_read+0x108>
      *pData= (RX_DATA[1] << 8) | RX_DATA[0];
 80011c4:	7d7b      	ldrb	r3, [r7, #21]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	7d3b      	ldrb	r3, [r7, #20]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	801a      	strh	r2, [r3, #0]
 80011d8:	e000      	b.n	80011dc <bq76942_dir_cmd_read+0x108>
      break;
 80011da:	bf00      	nop
  } while(false);
  return ret_val;
 80011dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	0800b9dc 	.word	0x0800b9dc
 80011ec:	40020800 	.word	0x40020800
 80011f0:	200006f4 	.word	0x200006f4

080011f4 <app_afe_data_read>:
BAT_AFE_vBRICK_D_t batAfeBrickD;
BAT_GAUGE_OvrVIEW_t batGaugeOvr;
BAT_GAUGE_ViT_t batGaugeViT;

int16_t app_afe_data_read(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
  uint8_t CellVoltageHolder = Cell1Voltage;
 80011fa:	2314      	movs	r3, #20
 80011fc:	71fb      	strb	r3, [r7, #7]
  int16_t ret_val = SYS_ERR;
 80011fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001202:	80bb      	strh	r3, [r7, #4]
  do
  {
    if(SYS_OK!= bq76942_get_device_number(&AFE_data.device_number))
 8001204:	482d      	ldr	r0, [pc, #180]	; (80012bc <app_afe_data_read+0xc8>)
 8001206:	f7ff fdf2 	bl	8000dee <bq76942_get_device_number>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d144      	bne.n	800129a <app_afe_data_read+0xa6>
    {
      break;
    }
    if(SYS_OK != bq76942_dir_cmd_read(StackVoltage, &AFE_data.stack_vol, 2))
 8001210:	2202      	movs	r2, #2
 8001212:	492b      	ldr	r1, [pc, #172]	; (80012c0 <app_afe_data_read+0xcc>)
 8001214:	2034      	movs	r0, #52	; 0x34
 8001216:	f7ff ff5d 	bl	80010d4 <bq76942_dir_cmd_read>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d13e      	bne.n	800129e <app_afe_data_read+0xaa>
    {
      break;
    }
    if(SYS_OK != bq76942_dir_cmd_read(PACKPinVoltage, &AFE_data.pack_vol, 2))
 8001220:	2202      	movs	r2, #2
 8001222:	4928      	ldr	r1, [pc, #160]	; (80012c4 <app_afe_data_read+0xd0>)
 8001224:	2036      	movs	r0, #54	; 0x36
 8001226:	f7ff ff55 	bl	80010d4 <bq76942_dir_cmd_read>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d138      	bne.n	80012a2 <app_afe_data_read+0xae>
    {
      break;
    }
    if(SYS_OK != bq76942_dir_cmd_read(CC2Current, &AFE_data.pack_curr, 2))
 8001230:	2202      	movs	r2, #2
 8001232:	4925      	ldr	r1, [pc, #148]	; (80012c8 <app_afe_data_read+0xd4>)
 8001234:	203a      	movs	r0, #58	; 0x3a
 8001236:	f7ff ff4d 	bl	80010d4 <bq76942_dir_cmd_read>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d132      	bne.n	80012a6 <app_afe_data_read+0xb2>
    {
      break;
    }
    if(SYS_OK != bq76942_dir_cmd_read(TS1Temperature,&AFE_data.temps[0], 2))
 8001240:	2202      	movs	r2, #2
 8001242:	4922      	ldr	r1, [pc, #136]	; (80012cc <app_afe_data_read+0xd8>)
 8001244:	2070      	movs	r0, #112	; 0x70
 8001246:	f7ff ff45 	bl	80010d4 <bq76942_dir_cmd_read>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d12c      	bne.n	80012aa <app_afe_data_read+0xb6>
    {
      break;
    }
    if(SYS_OK != bq76942_dir_cmd_read(TS3Temperature, &AFE_data.temps[1], 2))
 8001250:	2202      	movs	r2, #2
 8001252:	491f      	ldr	r1, [pc, #124]	; (80012d0 <app_afe_data_read+0xdc>)
 8001254:	2074      	movs	r0, #116	; 0x74
 8001256:	f7ff ff3d 	bl	80010d4 <bq76942_dir_cmd_read>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d126      	bne.n	80012ae <app_afe_data_read+0xba>
    {
      break;
    }
    for(uint8_t i=0;i<10;i++)
 8001260:	2300      	movs	r3, #0
 8001262:	70fb      	strb	r3, [r7, #3]
 8001264:	e013      	b.n	800128e <app_afe_data_read+0x9a>
    {
        if(SYS_OK == bq76942_dir_cmd_read(CellVoltageHolder, &AFE_data.cellvoltages[i], 2))
 8001266:	79f8      	ldrb	r0, [r7, #7]
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	3304      	adds	r3, #4
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4a13      	ldr	r2, [pc, #76]	; (80012bc <app_afe_data_read+0xc8>)
 8001270:	4413      	add	r3, r2
 8001272:	3302      	adds	r3, #2
 8001274:	2202      	movs	r2, #2
 8001276:	4619      	mov	r1, r3
 8001278:	f7ff ff2c 	bl	80010d4 <bq76942_dir_cmd_read>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d102      	bne.n	8001288 <app_afe_data_read+0x94>
          CellVoltageHolder+=2;
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	3302      	adds	r3, #2
 8001286:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i=0;i<10;i++)
 8001288:	78fb      	ldrb	r3, [r7, #3]
 800128a:	3301      	adds	r3, #1
 800128c:	70fb      	strb	r3, [r7, #3]
 800128e:	78fb      	ldrb	r3, [r7, #3]
 8001290:	2b09      	cmp	r3, #9
 8001292:	d9e8      	bls.n	8001266 <app_afe_data_read+0x72>
    }
    ret_val = SYS_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	80bb      	strh	r3, [r7, #4]
 8001298:	e00a      	b.n	80012b0 <app_afe_data_read+0xbc>
      break;
 800129a:	bf00      	nop
 800129c:	e008      	b.n	80012b0 <app_afe_data_read+0xbc>
      break;
 800129e:	bf00      	nop
 80012a0:	e006      	b.n	80012b0 <app_afe_data_read+0xbc>
      break;
 80012a2:	bf00      	nop
 80012a4:	e004      	b.n	80012b0 <app_afe_data_read+0xbc>
      break;
 80012a6:	bf00      	nop
 80012a8:	e002      	b.n	80012b0 <app_afe_data_read+0xbc>
      break;
 80012aa:	bf00      	nop
 80012ac:	e000      	b.n	80012b0 <app_afe_data_read+0xbc>
      break;
 80012ae:	bf00      	nop
  }while(false);
  return ret_val;
 80012b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200000e8 	.word	0x200000e8
 80012c0:	200000ea 	.word	0x200000ea
 80012c4:	200000ec 	.word	0x200000ec
 80012c8:	200000f0 	.word	0x200000f0
 80012cc:	20000106 	.word	0x20000106
 80012d0:	20000108 	.word	0x20000108

080012d4 <app_afe_can_message_update>:

int16_t app_afe_can_message_update(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 80012da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012de:	80fb      	strh	r3, [r7, #6]
	do
	{
	    batGaugeViT.BAT_gauge_vPack = AFE_data.pack_vol;
 80012e0:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <app_afe_can_message_update+0x8c>)
 80012e2:	889a      	ldrh	r2, [r3, #4]
 80012e4:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <app_afe_can_message_update+0x90>)
 80012e6:	801a      	strh	r2, [r3, #0]
	    batGaugeViT.BAT_gauge_iPack = AFE_data.pack_curr;
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <app_afe_can_message_update+0x8c>)
 80012ea:	891b      	ldrh	r3, [r3, #8]
 80012ec:	b21a      	sxth	r2, r3
 80012ee:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <app_afe_can_message_update+0x90>)
 80012f0:	805a      	strh	r2, [r3, #2]
	    batGaugeViT.BAT_gauge_tPack = AFE_data.temps[0];
 80012f2:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <app_afe_can_message_update+0x8c>)
 80012f4:	8bda      	ldrh	r2, [r3, #30]
 80012f6:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <app_afe_can_message_update+0x90>)
 80012f8:	809a      	strh	r2, [r3, #4]
	    batAfeBrickA.BAT_afe_vBrick01 = AFE_data.cellvoltages[0];
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <app_afe_can_message_update+0x8c>)
 80012fc:	895a      	ldrh	r2, [r3, #10]
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <app_afe_can_message_update+0x94>)
 8001300:	801a      	strh	r2, [r3, #0]
	    batAfeBrickA.BAT_afe_vBrick02 = AFE_data.cellvoltages[1];
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <app_afe_can_message_update+0x8c>)
 8001304:	899a      	ldrh	r2, [r3, #12]
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <app_afe_can_message_update+0x94>)
 8001308:	805a      	strh	r2, [r3, #2]
	    batAfeBrickA.BAT_afe_vBrick03 = AFE_data.cellvoltages[2];
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <app_afe_can_message_update+0x8c>)
 800130c:	89da      	ldrh	r2, [r3, #14]
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <app_afe_can_message_update+0x94>)
 8001310:	809a      	strh	r2, [r3, #4]
	    batAfeBrickA.BAT_afe_vBrick04 = AFE_data.cellvoltages[3];
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <app_afe_can_message_update+0x8c>)
 8001314:	8a1a      	ldrh	r2, [r3, #16]
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <app_afe_can_message_update+0x94>)
 8001318:	80da      	strh	r2, [r3, #6]
	    batAfeBrickB.BAT_afe_vBrick05 = AFE_data.cellvoltages[4];
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <app_afe_can_message_update+0x8c>)
 800131c:	8a5a      	ldrh	r2, [r3, #18]
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <app_afe_can_message_update+0x98>)
 8001320:	801a      	strh	r2, [r3, #0]
	    batAfeBrickB.BAT_afe_vBrick06 = AFE_data.cellvoltages[5];
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <app_afe_can_message_update+0x8c>)
 8001324:	8a9a      	ldrh	r2, [r3, #20]
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <app_afe_can_message_update+0x98>)
 8001328:	805a      	strh	r2, [r3, #2]
	    batAfeBrickB.BAT_afe_vBrick07 = AFE_data.cellvoltages[6];
 800132a:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <app_afe_can_message_update+0x8c>)
 800132c:	8ada      	ldrh	r2, [r3, #22]
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <app_afe_can_message_update+0x98>)
 8001330:	809a      	strh	r2, [r3, #4]
	    batAfeBrickB.BAT_afe_vBrick08 = AFE_data.cellvoltages[7];
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <app_afe_can_message_update+0x8c>)
 8001334:	8b1a      	ldrh	r2, [r3, #24]
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <app_afe_can_message_update+0x98>)
 8001338:	80da      	strh	r2, [r3, #6]
	    batAfeBrickC.BAT_afe_vBrick09 = AFE_data.cellvoltages[8];
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <app_afe_can_message_update+0x8c>)
 800133c:	8b5a      	ldrh	r2, [r3, #26]
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <app_afe_can_message_update+0x9c>)
 8001340:	801a      	strh	r2, [r3, #0]
	    batAfeBrickC.BAT_afe_vBrick10 = AFE_data.cellvoltages[9];
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <app_afe_can_message_update+0x8c>)
 8001344:	8b9a      	ldrh	r2, [r3, #28]
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <app_afe_can_message_update+0x9c>)
 8001348:	805a      	strh	r2, [r3, #2]
	    ret_val = SYS_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	80fb      	strh	r3, [r7, #6]
	}while(false);
	return ret_val;
 800134e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	200000e8 	.word	0x200000e8
 8001364:	20000138 	.word	0x20000138
 8001368:	20000118 	.word	0x20000118
 800136c:	20000120 	.word	0x20000120
 8001370:	20000128 	.word	0x20000128

08001374 <app_afe_init>:

int16_t app_afe_init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 800137a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800137e:	80fb      	strh	r3, [r7, #6]
	do
	{
		HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);
 8001380:	2201      	movs	r2, #1
 8001382:	2110      	movs	r1, #16
 8001384:	4806      	ldr	r0, [pc, #24]	; (80013a0 <app_afe_init+0x2c>)
 8001386:	f004 f9b1 	bl	80056ec <HAL_GPIO_WritePin>
	  bq76942_init();
 800138a:	f7ff fbcb 	bl	8000b24 <bq76942_init>
		ret_val = SYS_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	80fb      	strh	r3, [r7, #6]
	}while(false);

	return ret_val;
 8001392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40020800 	.word	0x40020800

080013a4 <HAL_CAN_RxFifo0MsgPendingCallback>:
int count = 0;
uint32_t id;
uint8_t state[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
    //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <app_can_tx_header_bat_bms_ovr>:

int16_t app_can_tx_header_bat_bms_ovr()
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 80013be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013c2:	80fb      	strh	r3, [r7, #6]
	do{
    TxBatBmsOvr.DLC = BAT_BMS_OvrVIEW_DLC;
 80013c4:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <app_can_tx_header_bat_bms_ovr+0x44>)
 80013c6:	2202      	movs	r2, #2
 80013c8:	611a      	str	r2, [r3, #16]
    TxBatBmsOvr.ExtId = 0;
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <app_can_tx_header_bat_bms_ovr+0x44>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	605a      	str	r2, [r3, #4]
    TxBatBmsOvr.IDE = CAN_ID_STD;
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <app_can_tx_header_bat_bms_ovr+0x44>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
    TxBatBmsOvr.RTR = CAN_RTR_DATA;
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <app_can_tx_header_bat_bms_ovr+0x44>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
    TxBatBmsOvr.StdId = BAT_BMS_OvrVIEW_CANID;
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <app_can_tx_header_bat_bms_ovr+0x44>)
 80013de:	4a08      	ldr	r2, [pc, #32]	; (8001400 <app_can_tx_header_bat_bms_ovr+0x48>)
 80013e0:	601a      	str	r2, [r3, #0]
    TxBatBmsOvr.TransmitGlobalTime = DISABLE;
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <app_can_tx_header_bat_bms_ovr+0x44>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	751a      	strb	r2, [r3, #20]
    ret_val = SYS_OK;
 80013e8:	2300      	movs	r3, #0
 80013ea:	80fb      	strh	r3, [r7, #6]
	}while(false);
	return ret_val;
 80013ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	20000178 	.word	0x20000178
 8001400:	001ff610 	.word	0x001ff610

08001404 <app_can_tx_header_bat_bms_ext_temp>:

int16_t app_can_tx_header_bat_bms_ext_temp()
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 800140a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800140e:	80fb      	strh	r3, [r7, #6]
	do{
    TxBatExtTemp.DLC = BAT_BMS_ExtTemp_DLC;
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <app_can_tx_header_bat_bms_ext_temp+0x44>)
 8001412:	2204      	movs	r2, #4
 8001414:	611a      	str	r2, [r3, #16]
    TxBatExtTemp.ExtId = 0;
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <app_can_tx_header_bat_bms_ext_temp+0x44>)
 8001418:	2200      	movs	r2, #0
 800141a:	605a      	str	r2, [r3, #4]
    TxBatExtTemp.IDE = CAN_ID_STD;
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <app_can_tx_header_bat_bms_ext_temp+0x44>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
    TxBatExtTemp.RTR = CAN_RTR_DATA;
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <app_can_tx_header_bat_bms_ext_temp+0x44>)
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]
    TxBatExtTemp.StdId = BAT_BMS_ExtTemp_CANID;
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <app_can_tx_header_bat_bms_ext_temp+0x44>)
 800142a:	4a08      	ldr	r2, [pc, #32]	; (800144c <app_can_tx_header_bat_bms_ext_temp+0x48>)
 800142c:	601a      	str	r2, [r3, #0]
    TxBatExtTemp.TransmitGlobalTime = DISABLE;
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <app_can_tx_header_bat_bms_ext_temp+0x44>)
 8001430:	2200      	movs	r2, #0
 8001432:	751a      	strb	r2, [r3, #20]
    ret_val = SYS_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	80fb      	strh	r3, [r7, #6]
	}while(false);
    return ret_val;
 8001438:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	20000190 	.word	0x20000190
 800144c:	001ff611 	.word	0x001ff611

08001450 <app_can_tx_header_bat_gauge_ovr>:

int16_t app_can_tx_header_bat_gauge_ovr()
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8001456:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800145a:	80fb      	strh	r3, [r7, #6]
    do{
	TxBatGaugeOvr.DLC = BAT_GAUGE_OvrVIEW_DLC;
 800145c:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <app_can_tx_header_bat_gauge_ovr+0x44>)
 800145e:	2204      	movs	r2, #4
 8001460:	611a      	str	r2, [r3, #16]
    TxBatGaugeOvr.ExtId = 0;
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <app_can_tx_header_bat_gauge_ovr+0x44>)
 8001464:	2200      	movs	r2, #0
 8001466:	605a      	str	r2, [r3, #4]
    TxBatGaugeOvr.IDE = CAN_ID_STD;
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <app_can_tx_header_bat_gauge_ovr+0x44>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
    TxBatGaugeOvr.RTR = CAN_RTR_DATA;
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <app_can_tx_header_bat_gauge_ovr+0x44>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
    TxBatGaugeOvr.StdId = BAT_GAUGE_OvrVIEW_CANID;
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <app_can_tx_header_bat_gauge_ovr+0x44>)
 8001476:	4a08      	ldr	r2, [pc, #32]	; (8001498 <app_can_tx_header_bat_gauge_ovr+0x48>)
 8001478:	601a      	str	r2, [r3, #0]
    TxBatGaugeOvr.TransmitGlobalTime = DISABLE;
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <app_can_tx_header_bat_gauge_ovr+0x44>)
 800147c:	2200      	movs	r2, #0
 800147e:	751a      	strb	r2, [r3, #20]
    ret_val = SYS_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	80fb      	strh	r3, [r7, #6]
    }while(false);
    return ret_val;
 8001484:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	200001a8 	.word	0x200001a8
 8001498:	001ff810 	.word	0x001ff810

0800149c <app_can_tx_header_bat_gauge_Vit>:

int16_t app_can_tx_header_bat_gauge_Vit()
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 80014a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a6:	80fb      	strh	r3, [r7, #6]
	do
	{
    TxBatGaugeVit.DLC = BAT_GAUGE_ViT_DLC;
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <app_can_tx_header_bat_gauge_Vit+0x44>)
 80014aa:	2206      	movs	r2, #6
 80014ac:	611a      	str	r2, [r3, #16]
    TxBatGaugeVit.ExtId = 0;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <app_can_tx_header_bat_gauge_Vit+0x44>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
    TxBatGaugeVit.IDE = CAN_ID_STD;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <app_can_tx_header_bat_gauge_Vit+0x44>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
    TxBatGaugeVit.RTR = CAN_RTR_DATA;
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <app_can_tx_header_bat_gauge_Vit+0x44>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
    TxBatGaugeVit.StdId = BAT_GAUGE_ViT_CANID;
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <app_can_tx_header_bat_gauge_Vit+0x44>)
 80014c2:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <app_can_tx_header_bat_gauge_Vit+0x48>)
 80014c4:	601a      	str	r2, [r3, #0]
    TxBatGaugeVit.TransmitGlobalTime = DISABLE;
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <app_can_tx_header_bat_gauge_Vit+0x44>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	751a      	strb	r2, [r3, #20]
    ret_val = SYS_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	80fb      	strh	r3, [r7, #6]
	}while(false);
	return ret_val;
 80014d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	200001c0 	.word	0x200001c0
 80014e4:	001ff820 	.word	0x001ff820

080014e8 <app_can_tx_header_bat_brickA_Vit>:

int16_t app_can_tx_header_bat_brickA_Vit()
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 80014ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014f2:	80fb      	strh	r3, [r7, #6]
	do
	{
    TxBrickAViT.DLC = BAT_AFE_vBRICK_A_DLC;
 80014f4:	4b0d      	ldr	r3, [pc, #52]	; (800152c <app_can_tx_header_bat_brickA_Vit+0x44>)
 80014f6:	2208      	movs	r2, #8
 80014f8:	611a      	str	r2, [r3, #16]
    TxBrickAViT.ExtId = 0;
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <app_can_tx_header_bat_brickA_Vit+0x44>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
    TxBrickAViT.IDE = CAN_ID_STD;
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <app_can_tx_header_bat_brickA_Vit+0x44>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
    TxBrickAViT.RTR = CAN_RTR_DATA;
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <app_can_tx_header_bat_brickA_Vit+0x44>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
    TxBrickAViT.StdId = BAT_AFE_vBRICK_A_CANID;
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <app_can_tx_header_bat_brickA_Vit+0x44>)
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <app_can_tx_header_bat_brickA_Vit+0x48>)
 8001510:	601a      	str	r2, [r3, #0]
    TxBrickAViT.TransmitGlobalTime = DISABLE;
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <app_can_tx_header_bat_brickA_Vit+0x44>)
 8001514:	2200      	movs	r2, #0
 8001516:	751a      	strb	r2, [r3, #20]
    ret_val = SYS_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	80fb      	strh	r3, [r7, #6]
	}while(false);
    return ret_val;
 800151c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	200001d8 	.word	0x200001d8
 8001530:	001ff710 	.word	0x001ff710

08001534 <app_can_tx_header_bat_brickB_Vit>:

int16_t app_can_tx_header_bat_brickB_Vit()
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 800153a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800153e:	80fb      	strh	r3, [r7, #6]
	do{
    TxBrickBViT.DLC = BAT_AFE_vBRICK_B_DLC;
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <app_can_tx_header_bat_brickB_Vit+0x44>)
 8001542:	2208      	movs	r2, #8
 8001544:	611a      	str	r2, [r3, #16]
    TxBrickBViT.ExtId = 0;
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <app_can_tx_header_bat_brickB_Vit+0x44>)
 8001548:	2200      	movs	r2, #0
 800154a:	605a      	str	r2, [r3, #4]
    TxBrickBViT.IDE = CAN_ID_STD;
 800154c:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <app_can_tx_header_bat_brickB_Vit+0x44>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
    TxBrickBViT.RTR = CAN_RTR_DATA;
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <app_can_tx_header_bat_brickB_Vit+0x44>)
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
    TxBrickBViT.StdId = BAT_AFE_vBRICK_B_CANID;
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <app_can_tx_header_bat_brickB_Vit+0x44>)
 800155a:	4a08      	ldr	r2, [pc, #32]	; (800157c <app_can_tx_header_bat_brickB_Vit+0x48>)
 800155c:	601a      	str	r2, [r3, #0]
    TxBrickBViT.TransmitGlobalTime = DISABLE;
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <app_can_tx_header_bat_brickB_Vit+0x44>)
 8001560:	2200      	movs	r2, #0
 8001562:	751a      	strb	r2, [r3, #20]
    ret_val = SYS_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	80fb      	strh	r3, [r7, #6]
	}while(false);
    return ret_val;
 8001568:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	200001f0 	.word	0x200001f0
 800157c:	001ff711 	.word	0x001ff711

08001580 <app_can_tx_header_bat_brickC_Vit>:

int16_t app_can_tx_header_bat_brickC_Vit()
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8001586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800158a:	80fb      	strh	r3, [r7, #6]
	do{
    TxBrickCViT.DLC = BAT_AFE_vBRICK_C_DLC;
 800158c:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <app_can_tx_header_bat_brickC_Vit+0x44>)
 800158e:	2208      	movs	r2, #8
 8001590:	611a      	str	r2, [r3, #16]
    TxBrickCViT.ExtId = 0;
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <app_can_tx_header_bat_brickC_Vit+0x44>)
 8001594:	2200      	movs	r2, #0
 8001596:	605a      	str	r2, [r3, #4]
    TxBrickCViT.IDE = CAN_ID_STD;
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <app_can_tx_header_bat_brickC_Vit+0x44>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
    TxBrickCViT.RTR = CAN_RTR_DATA;
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <app_can_tx_header_bat_brickC_Vit+0x44>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	60da      	str	r2, [r3, #12]
    TxBrickCViT.StdId = BAT_AFE_vBRICK_C_CANID;
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <app_can_tx_header_bat_brickC_Vit+0x44>)
 80015a6:	4a08      	ldr	r2, [pc, #32]	; (80015c8 <app_can_tx_header_bat_brickC_Vit+0x48>)
 80015a8:	601a      	str	r2, [r3, #0]
    TxBrickCViT.TransmitGlobalTime = DISABLE;
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <app_can_tx_header_bat_brickC_Vit+0x44>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	751a      	strb	r2, [r3, #20]
    ret_val = SYS_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	80fb      	strh	r3, [r7, #6]
	}while(false);
    return ret_val;
 80015b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	20000208 	.word	0x20000208
 80015c8:	001ff712 	.word	0x001ff712

080015cc <tx_header_bat_brickD_vit>:

int16_t tx_header_bat_brickD_vit()
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 80015d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015d6:	80fb      	strh	r3, [r7, #6]
	do{
	TxBrickDViT.DLC = BAT_AFE_vBRICK_D_DLC;
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <tx_header_bat_brickD_vit+0x44>)
 80015da:	2204      	movs	r2, #4
 80015dc:	611a      	str	r2, [r3, #16]
    TxBrickDViT.ExtId = 0;
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <tx_header_bat_brickD_vit+0x44>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	605a      	str	r2, [r3, #4]
    TxBrickDViT.IDE = CAN_ID_STD;
 80015e4:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <tx_header_bat_brickD_vit+0x44>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
    TxBrickDViT.RTR = CAN_RTR_DATA;
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <tx_header_bat_brickD_vit+0x44>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
    TxBrickDViT.StdId = BAT_AFE_vBRICK_D_CANID;
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <tx_header_bat_brickD_vit+0x44>)
 80015f2:	4a08      	ldr	r2, [pc, #32]	; (8001614 <tx_header_bat_brickD_vit+0x48>)
 80015f4:	601a      	str	r2, [r3, #0]
    TxBrickDViT.TransmitGlobalTime = DISABLE;
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <tx_header_bat_brickD_vit+0x44>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	751a      	strb	r2, [r3, #20]
    ret_val = SYS_OK;
 80015fc:	2300      	movs	r3, #0
 80015fe:	80fb      	strh	r3, [r7, #6]
	}while(false);
    return ret_val;
 8001600:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	20000220 	.word	0x20000220
 8001614:	001ff713 	.word	0x001ff713

08001618 <app_can_rx_header_fcu_state>:

int16_t app_can_rx_header_fcu_state()
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 800161e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001622:	80fb      	strh	r3, [r7, #6]
	do{
    RxHeader.DLC = 8;
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <app_can_rx_header_fcu_state+0x40>)
 8001626:	2208      	movs	r2, #8
 8001628:	611a      	str	r2, [r3, #16]
    RxHeader.ExtId = 0;
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <app_can_rx_header_fcu_state+0x40>)
 800162c:	2200      	movs	r2, #0
 800162e:	605a      	str	r2, [r3, #4]
    RxHeader.IDE = CAN_ID_STD;
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <app_can_rx_header_fcu_state+0x40>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
    RxHeader.RTR = CAN_RTR_REMOTE;
 8001636:	4b08      	ldr	r3, [pc, #32]	; (8001658 <app_can_rx_header_fcu_state+0x40>)
 8001638:	2202      	movs	r2, #2
 800163a:	60da      	str	r2, [r3, #12]
    RxHeader.StdId = 0x00;
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <app_can_rx_header_fcu_state+0x40>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
    ret_val = SYS_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	80fb      	strh	r3, [r7, #6]
	}while(false);
	return ret_val;
 8001646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800164a:	4618      	mov	r0, r3
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000238 	.word	0x20000238

0800165c <app_can_set_filter_config>:

int16_t app_can_set_filter_config()
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8001662:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001666:	80fb      	strh	r3, [r7, #6]
	do{
    filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <app_can_set_filter_config+0x6c>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
    filterConfig.FilterActivation = ENABLE;
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <app_can_set_filter_config+0x6c>)
 8001670:	2201      	movs	r2, #1
 8001672:	621a      	str	r2, [r3, #32]
    filterConfig.FilterBank = 2;
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <app_can_set_filter_config+0x6c>)
 8001676:	2202      	movs	r2, #2
 8001678:	615a      	str	r2, [r3, #20]
    filterConfig.FilterIdLow = 0x0101;
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <app_can_set_filter_config+0x6c>)
 800167c:	f240 1201 	movw	r2, #257	; 0x101
 8001680:	605a      	str	r2, [r3, #4]
    filterConfig.FilterIdHigh = 0x0000;
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <app_can_set_filter_config+0x6c>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
    filterConfig.FilterMaskIdLow = 0x1101;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <app_can_set_filter_config+0x6c>)
 800168a:	f241 1201 	movw	r2, #4353	; 0x1101
 800168e:	60da      	str	r2, [r3, #12]
    filterConfig.FilterMaskIdHigh = 0x1111;
 8001690:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <app_can_set_filter_config+0x6c>)
 8001692:	f241 1211 	movw	r2, #4369	; 0x1111
 8001696:	609a      	str	r2, [r3, #8]
    filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001698:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <app_can_set_filter_config+0x6c>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
    filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <app_can_set_filter_config+0x6c>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	61da      	str	r2, [r3, #28]
    filterConfig.SlaveStartFilterBank = 3;
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <app_can_set_filter_config+0x6c>)
 80016a6:	2203      	movs	r2, #3
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24
    if(HAL_CAN_ConfigFilter(&hcan1, &filterConfig) == SYS_OK)
 80016aa:	4907      	ldr	r1, [pc, #28]	; (80016c8 <app_can_set_filter_config+0x6c>)
 80016ac:	4807      	ldr	r0, [pc, #28]	; (80016cc <app_can_set_filter_config+0x70>)
 80016ae:	f002 f94f 	bl	8003950 <HAL_CAN_ConfigFilter>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <app_can_set_filter_config+0x60>
    {
    	ret_val = SYS_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	80fb      	strh	r3, [r7, #6]
    }
	}while(false);
	return ret_val;
 80016bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000140 	.word	0x20000140
 80016cc:	200002b4 	.word	0x200002b4

080016d0 <app_can_send_tx_msg>:

int16_t app_can_send_tx_msg(uint32_t canId)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	int16_t ret_val = SYS_ERR;
 80016d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016dc:	81fb      	strh	r3, [r7, #14]
	int i = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
	do{
		if(canId == can_IDs[i])
 80016e2:	4a0d      	ldr	r2, [pc, #52]	; (8001718 <app_can_send_tx_msg+0x48>)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d106      	bne.n	80016fe <app_can_send_tx_msg+0x2e>
		{
			(func_ptrs[i])();
 80016f0:	4a0a      	ldr	r2, [pc, #40]	; (800171c <app_can_send_tx_msg+0x4c>)
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f8:	4798      	blx	r3
			ret_val = SYS_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	81fb      	strh	r3, [r7, #14]
		}
		i++;
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	3301      	adds	r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
	  }while(i<9);
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b08      	cmp	r3, #8
 8001708:	ddeb      	ble.n	80016e2 <app_can_send_tx_msg+0x12>
	return ret_val;
 800170a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000020 	.word	0x20000020
 800171c:	20000000 	.word	0x20000000

08001720 <app_can_bat_gauge_ovr_write_data>:

int16_t app_can_bat_gauge_ovr_write_data(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8001726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800172a:	80fb      	strh	r3, [r7, #6]
	do
	{
        if(SYS_OK!=app_can_tx_header_bat_gauge_ovr())
 800172c:	f7ff fe90 	bl	8001450 <app_can_tx_header_bat_gauge_ovr>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10f      	bne.n	8001756 <app_can_bat_gauge_ovr_write_data+0x36>
        {
    	    break;
        }
        Pack_BAT_GAUGE_OvrVIEW_can_codegen(&batGaugeOvr, &canFrame);
 8001736:	490b      	ldr	r1, [pc, #44]	; (8001764 <app_can_bat_gauge_ovr_write_data+0x44>)
 8001738:	480b      	ldr	r0, [pc, #44]	; (8001768 <app_can_bat_gauge_ovr_write_data+0x48>)
 800173a:	f7ff f941 	bl	80009c0 <Pack_BAT_GAUGE_OvrVIEW_can_codegen>
        if(HAL_CAN_AddTxMessage(&hcan1, &TxBatGaugeOvr, canFrame.Data, &mailbox1Hz) == SYS_OK)
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <app_can_bat_gauge_ovr_write_data+0x4c>)
 8001740:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <app_can_bat_gauge_ovr_write_data+0x50>)
 8001742:	490c      	ldr	r1, [pc, #48]	; (8001774 <app_can_bat_gauge_ovr_write_data+0x54>)
 8001744:	480c      	ldr	r0, [pc, #48]	; (8001778 <app_can_bat_gauge_ovr_write_data+0x58>)
 8001746:	f002 fa95 	bl	8003c74 <HAL_CAN_AddTxMessage>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d103      	bne.n	8001758 <app_can_bat_gauge_ovr_write_data+0x38>
        {
        	ret_val = SYS_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	80fb      	strh	r3, [r7, #6]
 8001754:	e000      	b.n	8001758 <app_can_bat_gauge_ovr_write_data+0x38>
    	    break;
 8001756:	bf00      	nop
        }
    }while(false);
    return ret_val;
 8001758:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000168 	.word	0x20000168
 8001768:	20000134 	.word	0x20000134
 800176c:	20000254 	.word	0x20000254
 8001770:	2000016d 	.word	0x2000016d
 8001774:	200001a8 	.word	0x200001a8
 8001778:	200002b4 	.word	0x200002b4

0800177c <app_can_bat_gauge_vit_write_data>:

int16_t app_can_bat_gauge_vit_write_data(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8001782:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001786:	80fb      	strh	r3, [r7, #6]
	do
	{
        if(SYS_OK != app_can_tx_header_bat_gauge_Vit())
 8001788:	f7ff fe88 	bl	800149c <app_can_tx_header_bat_gauge_Vit>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10f      	bne.n	80017b2 <app_can_bat_gauge_vit_write_data+0x36>
        {
        	break;
        }
        Pack_BAT_GAUGE_ViT_can_codegen(&batGaugeViT, &canFrame);
 8001792:	490b      	ldr	r1, [pc, #44]	; (80017c0 <app_can_bat_gauge_vit_write_data+0x44>)
 8001794:	480b      	ldr	r0, [pc, #44]	; (80017c4 <app_can_bat_gauge_vit_write_data+0x48>)
 8001796:	f7ff f95f 	bl	8000a58 <Pack_BAT_GAUGE_ViT_can_codegen>
        if(HAL_CAN_AddTxMessage(&hcan1, &TxBatGaugeVit, canFrame.Data, &mailbox10Hz) == SYS_OK)
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <app_can_bat_gauge_vit_write_data+0x4c>)
 800179c:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <app_can_bat_gauge_vit_write_data+0x50>)
 800179e:	490c      	ldr	r1, [pc, #48]	; (80017d0 <app_can_bat_gauge_vit_write_data+0x54>)
 80017a0:	480c      	ldr	r0, [pc, #48]	; (80017d4 <app_can_bat_gauge_vit_write_data+0x58>)
 80017a2:	f002 fa67 	bl	8003c74 <HAL_CAN_AddTxMessage>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d103      	bne.n	80017b4 <app_can_bat_gauge_vit_write_data+0x38>
        {
        	ret_val = SYS_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	80fb      	strh	r3, [r7, #6]
 80017b0:	e000      	b.n	80017b4 <app_can_bat_gauge_vit_write_data+0x38>
        	break;
 80017b2:	bf00      	nop
        }
	}while(false);
	return ret_val;
 80017b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000168 	.word	0x20000168
 80017c4:	20000138 	.word	0x20000138
 80017c8:	20000258 	.word	0x20000258
 80017cc:	2000016d 	.word	0x2000016d
 80017d0:	200001c0 	.word	0x200001c0
 80017d4:	200002b4 	.word	0x200002b4

080017d8 <app_can_bms_ovr_write_data>:

int16_t app_can_bms_ovr_write_data(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 80017de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017e2:	80fb      	strh	r3, [r7, #6]
	do
	{
        if(SYS_OK != app_can_tx_header_bat_bms_ovr())
 80017e4:	f7ff fde8 	bl	80013b8 <app_can_tx_header_bat_bms_ovr>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10f      	bne.n	800180e <app_can_bms_ovr_write_data+0x36>
        {
        	break;
        }
        Pack_BAT_BMS_OvrVIEW_can_codegen(&batBmsOvr, &canFrame);
 80017ee:	490b      	ldr	r1, [pc, #44]	; (800181c <app_can_bms_ovr_write_data+0x44>)
 80017f0:	480b      	ldr	r0, [pc, #44]	; (8001820 <app_can_bms_ovr_write_data+0x48>)
 80017f2:	f7fe fea5 	bl	8000540 <Pack_BAT_BMS_OvrVIEW_can_codegen>
        if(HAL_CAN_AddTxMessage(&hcan1, &TxBatBmsOvr, canFrame.Data, &mailbox10Hz) == SYS_OK)
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <app_can_bms_ovr_write_data+0x4c>)
 80017f8:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <app_can_bms_ovr_write_data+0x50>)
 80017fa:	490c      	ldr	r1, [pc, #48]	; (800182c <app_can_bms_ovr_write_data+0x54>)
 80017fc:	480c      	ldr	r0, [pc, #48]	; (8001830 <app_can_bms_ovr_write_data+0x58>)
 80017fe:	f002 fa39 	bl	8003c74 <HAL_CAN_AddTxMessage>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d103      	bne.n	8001810 <app_can_bms_ovr_write_data+0x38>
        {
        	ret_val = SYS_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	80fb      	strh	r3, [r7, #6]
 800180c:	e000      	b.n	8001810 <app_can_bms_ovr_write_data+0x38>
        	break;
 800180e:	bf00      	nop
        }
	}while(false);
	return ret_val;
 8001810:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000168 	.word	0x20000168
 8001820:	20000110 	.word	0x20000110
 8001824:	20000258 	.word	0x20000258
 8001828:	2000016d 	.word	0x2000016d
 800182c:	20000178 	.word	0x20000178
 8001830:	200002b4 	.word	0x200002b4

08001834 <app_can_bms_exttemp_write_data>:

int16_t app_can_bms_exttemp_write_data(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 800183a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800183e:	80fb      	strh	r3, [r7, #6]
	do
	{
        if(SYS_OK != app_can_tx_header_bat_bms_ext_temp())
 8001840:	f7ff fde0 	bl	8001404 <app_can_tx_header_bat_bms_ext_temp>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10f      	bne.n	800186a <app_can_bms_exttemp_write_data+0x36>
        {
        	break;
        }
        Pack_BAT_BMS_ExtTemp_can_codegen(&batBmsExtTemp, &canFrame);
 800184a:	490b      	ldr	r1, [pc, #44]	; (8001878 <app_can_bms_exttemp_write_data+0x44>)
 800184c:	480b      	ldr	r0, [pc, #44]	; (800187c <app_can_bms_exttemp_write_data+0x48>)
 800184e:	f7fe feaf 	bl	80005b0 <Pack_BAT_BMS_ExtTemp_can_codegen>
        if(HAL_CAN_AddTxMessage(&hcan1, &TxBatExtTemp, canFrame.Data, &mailbox1Hz) == SYS_OK)
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <app_can_bms_exttemp_write_data+0x4c>)
 8001854:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <app_can_bms_exttemp_write_data+0x50>)
 8001856:	490c      	ldr	r1, [pc, #48]	; (8001888 <app_can_bms_exttemp_write_data+0x54>)
 8001858:	480c      	ldr	r0, [pc, #48]	; (800188c <app_can_bms_exttemp_write_data+0x58>)
 800185a:	f002 fa0b 	bl	8003c74 <HAL_CAN_AddTxMessage>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d103      	bne.n	800186c <app_can_bms_exttemp_write_data+0x38>
        {
        	ret_val = SYS_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	80fb      	strh	r3, [r7, #6]
 8001868:	e000      	b.n	800186c <app_can_bms_exttemp_write_data+0x38>
        	break;
 800186a:	bf00      	nop
        }
	}while(false);
	return ret_val;
 800186c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000168 	.word	0x20000168
 800187c:	20000114 	.word	0x20000114
 8001880:	20000254 	.word	0x20000254
 8001884:	2000016d 	.word	0x2000016d
 8001888:	20000190 	.word	0x20000190
 800188c:	200002b4 	.word	0x200002b4

08001890 <app_can_bat_afe_brickA_write_data>:

int16_t app_can_bat_afe_brickA_write_data(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8001896:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800189a:	80fb      	strh	r3, [r7, #6]
	do
	{
        if(SYS_OK != app_can_tx_header_bat_brickA_Vit())
 800189c:	f7ff fe24 	bl	80014e8 <app_can_tx_header_bat_brickA_Vit>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10f      	bne.n	80018c6 <app_can_bat_afe_brickA_write_data+0x36>
        {
    	    break;
        }
        Pack_BAT_AFE_vBRICK_A_can_codegen(&batAfeBrickA, &canFrame);
 80018a6:	490b      	ldr	r1, [pc, #44]	; (80018d4 <app_can_bat_afe_brickA_write_data+0x44>)
 80018a8:	480b      	ldr	r0, [pc, #44]	; (80018d8 <app_can_bat_afe_brickA_write_data+0x48>)
 80018aa:	f7fe fed1 	bl	8000650 <Pack_BAT_AFE_vBRICK_A_can_codegen>
        if(HAL_CAN_AddTxMessage(&hcan1, &TxBrickAViT, canFrame.Data, &mailbox1Hz) == SYS_OK)
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <app_can_bat_afe_brickA_write_data+0x4c>)
 80018b0:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <app_can_bat_afe_brickA_write_data+0x50>)
 80018b2:	490c      	ldr	r1, [pc, #48]	; (80018e4 <app_can_bat_afe_brickA_write_data+0x54>)
 80018b4:	480c      	ldr	r0, [pc, #48]	; (80018e8 <app_can_bat_afe_brickA_write_data+0x58>)
 80018b6:	f002 f9dd 	bl	8003c74 <HAL_CAN_AddTxMessage>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d103      	bne.n	80018c8 <app_can_bat_afe_brickA_write_data+0x38>
        {
    	    ret_val = SYS_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	80fb      	strh	r3, [r7, #6]
 80018c4:	e000      	b.n	80018c8 <app_can_bat_afe_brickA_write_data+0x38>
    	    break;
 80018c6:	bf00      	nop
        }
	}while(false);
	return ret_val;
 80018c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000168 	.word	0x20000168
 80018d8:	20000118 	.word	0x20000118
 80018dc:	20000254 	.word	0x20000254
 80018e0:	2000016d 	.word	0x2000016d
 80018e4:	200001d8 	.word	0x200001d8
 80018e8:	200002b4 	.word	0x200002b4

080018ec <app_can_bat_afe_brickB_write_data>:

int16_t app_can_bat_afe_brickB_write_data(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 80018f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018f6:	80fb      	strh	r3, [r7, #6]
	do
	{
        if(SYS_OK != app_can_tx_header_bat_brickB_Vit())
 80018f8:	f7ff fe1c 	bl	8001534 <app_can_tx_header_bat_brickB_Vit>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10f      	bne.n	8001922 <app_can_bat_afe_brickB_write_data+0x36>
        {
        	break;
        }
        Pack_BAT_AFE_vBRICK_B_can_codegen(&batAfeBrickB, &canFrame);
 8001902:	490b      	ldr	r1, [pc, #44]	; (8001930 <app_can_bat_afe_brickB_write_data+0x44>)
 8001904:	480b      	ldr	r0, [pc, #44]	; (8001934 <app_can_bat_afe_brickB_write_data+0x48>)
 8001906:	f7fe ff1b 	bl	8000740 <Pack_BAT_AFE_vBRICK_B_can_codegen>
        if(HAL_CAN_AddTxMessage(&hcan1, &TxBrickBViT, canFrame.Data, &mailbox1Hz) == SYS_OK)
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <app_can_bat_afe_brickB_write_data+0x4c>)
 800190c:	4a0b      	ldr	r2, [pc, #44]	; (800193c <app_can_bat_afe_brickB_write_data+0x50>)
 800190e:	490c      	ldr	r1, [pc, #48]	; (8001940 <app_can_bat_afe_brickB_write_data+0x54>)
 8001910:	480c      	ldr	r0, [pc, #48]	; (8001944 <app_can_bat_afe_brickB_write_data+0x58>)
 8001912:	f002 f9af 	bl	8003c74 <HAL_CAN_AddTxMessage>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d103      	bne.n	8001924 <app_can_bat_afe_brickB_write_data+0x38>
        {
        	ret_val = SYS_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	80fb      	strh	r3, [r7, #6]
 8001920:	e000      	b.n	8001924 <app_can_bat_afe_brickB_write_data+0x38>
        	break;
 8001922:	bf00      	nop
        }
	}while(false);
	return ret_val;
 8001924:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000168 	.word	0x20000168
 8001934:	20000120 	.word	0x20000120
 8001938:	20000254 	.word	0x20000254
 800193c:	2000016d 	.word	0x2000016d
 8001940:	200001f0 	.word	0x200001f0
 8001944:	200002b4 	.word	0x200002b4

08001948 <app_can_bat_afe_brickC_write_data>:

int16_t app_can_bat_afe_brickC_write_data(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 800194e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001952:	80fb      	strh	r3, [r7, #6]
	do
	{
        if(SYS_OK!=app_can_tx_header_bat_brickC_Vit())
 8001954:	f7ff fe14 	bl	8001580 <app_can_tx_header_bat_brickC_Vit>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10f      	bne.n	800197e <app_can_bat_afe_brickC_write_data+0x36>
        {
        	break;
        }
        Pack_BAT_AFE_vBRICK_C_can_codegen(&batAfeBrickC, &canFrame);
 800195e:	490b      	ldr	r1, [pc, #44]	; (800198c <app_can_bat_afe_brickC_write_data+0x44>)
 8001960:	480b      	ldr	r0, [pc, #44]	; (8001990 <app_can_bat_afe_brickC_write_data+0x48>)
 8001962:	f7fe ff65 	bl	8000830 <Pack_BAT_AFE_vBRICK_C_can_codegen>
        if(HAL_CAN_AddTxMessage(&hcan1, &TxBrickCViT, canFrame.Data, &mailbox1Hz) == SYS_OK)
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <app_can_bat_afe_brickC_write_data+0x4c>)
 8001968:	4a0b      	ldr	r2, [pc, #44]	; (8001998 <app_can_bat_afe_brickC_write_data+0x50>)
 800196a:	490c      	ldr	r1, [pc, #48]	; (800199c <app_can_bat_afe_brickC_write_data+0x54>)
 800196c:	480c      	ldr	r0, [pc, #48]	; (80019a0 <app_can_bat_afe_brickC_write_data+0x58>)
 800196e:	f002 f981 	bl	8003c74 <HAL_CAN_AddTxMessage>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d103      	bne.n	8001980 <app_can_bat_afe_brickC_write_data+0x38>
        {
        	ret_val = SYS_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	80fb      	strh	r3, [r7, #6]
 800197c:	e000      	b.n	8001980 <app_can_bat_afe_brickC_write_data+0x38>
        	break;
 800197e:	bf00      	nop
        }
	}while(false);
	return ret_val;
 8001980:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000168 	.word	0x20000168
 8001990:	20000128 	.word	0x20000128
 8001994:	20000254 	.word	0x20000254
 8001998:	2000016d 	.word	0x2000016d
 800199c:	20000208 	.word	0x20000208
 80019a0:	200002b4 	.word	0x200002b4

080019a4 <app_can_bat_afe_brickD_write_data>:

int16_t app_can_bat_afe_brickD_write_data(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 80019aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ae:	80fb      	strh	r3, [r7, #6]
	do
	{
        if(SYS_OK != tx_header_bat_brickD_vit())
 80019b0:	f7ff fe0c 	bl	80015cc <tx_header_bat_brickD_vit>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10f      	bne.n	80019da <app_can_bat_afe_brickD_write_data+0x36>
        {
        	break;
        }
        Pack_BAT_AFE_vBRICK_D_can_codegen(&batAfeBrickD, &canFrame);
 80019ba:	490b      	ldr	r1, [pc, #44]	; (80019e8 <app_can_bat_afe_brickD_write_data+0x44>)
 80019bc:	480b      	ldr	r0, [pc, #44]	; (80019ec <app_can_bat_afe_brickD_write_data+0x48>)
 80019be:	f7fe ffaf 	bl	8000920 <Pack_BAT_AFE_vBRICK_D_can_codegen>
        if(HAL_CAN_AddTxMessage(&hcan1, &TxBrickDViT, canFrame.Data, &mailbox1Hz) == SYS_OK)
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <app_can_bat_afe_brickD_write_data+0x4c>)
 80019c4:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <app_can_bat_afe_brickD_write_data+0x50>)
 80019c6:	490c      	ldr	r1, [pc, #48]	; (80019f8 <app_can_bat_afe_brickD_write_data+0x54>)
 80019c8:	480c      	ldr	r0, [pc, #48]	; (80019fc <app_can_bat_afe_brickD_write_data+0x58>)
 80019ca:	f002 f953 	bl	8003c74 <HAL_CAN_AddTxMessage>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d103      	bne.n	80019dc <app_can_bat_afe_brickD_write_data+0x38>
        {
        	ret_val = SYS_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	80fb      	strh	r3, [r7, #6]
 80019d8:	e000      	b.n	80019dc <app_can_bat_afe_brickD_write_data+0x38>
        	break;
 80019da:	bf00      	nop
        }
	}while(false);
	return ret_val;
 80019dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000168 	.word	0x20000168
 80019ec:	20000130 	.word	0x20000130
 80019f0:	20000254 	.word	0x20000254
 80019f4:	2000016d 	.word	0x2000016d
 80019f8:	20000220 	.word	0x20000220
 80019fc:	200002b4 	.word	0x200002b4

08001a00 <app_can_fcu_read_data>:

int16_t app_can_fcu_read_data()
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8001a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a0a:	80fb      	strh	r3, [r7, #6]
    do
    {
	    if(SYS_OK!=app_can_set_filter_config())
 8001a0c:	f7ff fe26 	bl	800165c <app_can_set_filter_config>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f040 808b 	bne.w	8001b2e <app_can_fcu_read_data+0x12e>
	    {
	    	break;
	    }
        if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, state) == SYS_OK)
 8001a18:	4b4a      	ldr	r3, [pc, #296]	; (8001b44 <app_can_fcu_read_data+0x144>)
 8001a1a:	4a4b      	ldr	r2, [pc, #300]	; (8001b48 <app_can_fcu_read_data+0x148>)
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	484b      	ldr	r0, [pc, #300]	; (8001b4c <app_can_fcu_read_data+0x14c>)
 8001a20:	f002 fa4c 	bl	8003ebc <HAL_CAN_GetRxMessage>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f040 8083 	bne.w	8001b32 <app_can_fcu_read_data+0x132>
        {
        	ret_val = SYS_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	80fb      	strh	r3, [r7, #6]
            Unpack_FCU_STATE_REQUEST_can_codegen(&fcuState, &state, 1);
 8001a30:	2201      	movs	r2, #1
 8001a32:	4944      	ldr	r1, [pc, #272]	; (8001b44 <app_can_fcu_read_data+0x144>)
 8001a34:	4846      	ldr	r0, [pc, #280]	; (8001b50 <app_can_fcu_read_data+0x150>)
 8001a36:	f7fe fd6d 	bl	8000514 <Unpack_FCU_STATE_REQUEST_can_codegen>
	        switch (state[0])
 8001a3a:	4b42      	ldr	r3, [pc, #264]	; (8001b44 <app_can_fcu_read_data+0x144>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d879      	bhi.n	8001b36 <app_can_fcu_read_data+0x136>
 8001a42:	a201      	add	r2, pc, #4	; (adr r2, 8001a48 <app_can_fcu_read_data+0x48>)
 8001a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a48:	08001a5d 	.word	0x08001a5d
 8001a4c:	08001a87 	.word	0x08001a87
 8001a50:	08001ab1 	.word	0x08001ab1
 8001a54:	08001adb 	.word	0x08001adb
 8001a58:	08001b05 	.word	0x08001b05
	        {
			    case 0:
				    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a62:	483c      	ldr	r0, [pc, #240]	; (8001b54 <app_can_fcu_read_data+0x154>)
 8001a64:	f003 fe42 	bl	80056ec <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a6e:	4839      	ldr	r0, [pc, #228]	; (8001b54 <app_can_fcu_read_data+0x154>)
 8001a70:	f003 fe3c 	bl	80056ec <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a7a:	4836      	ldr	r0, [pc, #216]	; (8001b54 <app_can_fcu_read_data+0x154>)
 8001a7c:	f003 fe36 	bl	80056ec <HAL_GPIO_WritePin>
				    bq76942_FETs_OFF(); // replace with all fets off function call
 8001a80:	f7ff f93b 	bl	8000cfa <bq76942_FETs_OFF>
				    break;
 8001a84:	e058      	b.n	8001b38 <app_can_fcu_read_data+0x138>
			    case 1:
				    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
 8001a86:	2201      	movs	r2, #1
 8001a88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a8c:	4831      	ldr	r0, [pc, #196]	; (8001b54 <app_can_fcu_read_data+0x154>)
 8001a8e:	f003 fe2d 	bl	80056ec <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a98:	482e      	ldr	r0, [pc, #184]	; (8001b54 <app_can_fcu_read_data+0x154>)
 8001a9a:	f003 fe27 	bl	80056ec <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aa4:	482b      	ldr	r0, [pc, #172]	; (8001b54 <app_can_fcu_read_data+0x154>)
 8001aa6:	f003 fe21 	bl	80056ec <HAL_GPIO_WritePin>
				    bq76942_FETs_ON(); //replace with all fets on function call
 8001aaa:	f7ff f8fd 	bl	8000ca8 <bq76942_FETs_ON>
				    break;
 8001aae:	e043      	b.n	8001b38 <app_can_fcu_read_data+0x138>
			    case 2:
				    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ab6:	4827      	ldr	r0, [pc, #156]	; (8001b54 <app_can_fcu_read_data+0x154>)
 8001ab8:	f003 fe18 	bl	80056ec <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 8001abc:	2200      	movs	r2, #0
 8001abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ac2:	4824      	ldr	r0, [pc, #144]	; (8001b54 <app_can_fcu_read_data+0x154>)
 8001ac4:	f003 fe12 	bl	80056ec <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ace:	4821      	ldr	r0, [pc, #132]	; (8001b54 <app_can_fcu_read_data+0x154>)
 8001ad0:	f003 fe0c 	bl	80056ec <HAL_GPIO_WritePin>
				    bq76942_AFE_reset();// replace with afe reset function call
 8001ad4:	f7ff f974 	bl	8000dc0 <bq76942_AFE_reset>
				    break;
 8001ad8:	e02e      	b.n	8001b38 <app_can_fcu_read_data+0x138>
			    case 3:
				    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ae0:	481c      	ldr	r0, [pc, #112]	; (8001b54 <app_can_fcu_read_data+0x154>)
 8001ae2:	f003 fe03 	bl	80056ec <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aec:	4819      	ldr	r0, [pc, #100]	; (8001b54 <app_can_fcu_read_data+0x154>)
 8001aee:	f003 fdfd 	bl	80056ec <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 8001af2:	2200      	movs	r2, #0
 8001af4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af8:	4816      	ldr	r0, [pc, #88]	; (8001b54 <app_can_fcu_read_data+0x154>)
 8001afa:	f003 fdf7 	bl	80056ec <HAL_GPIO_WritePin>
				    bq76942_Charge();
 8001afe:	f7ff f91b 	bl	8000d38 <bq76942_Charge>
				    break;
 8001b02:	e019      	b.n	8001b38 <app_can_fcu_read_data+0x138>
			    case 4:
				    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8001b04:	2201      	movs	r2, #1
 8001b06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b0a:	4812      	ldr	r0, [pc, #72]	; (8001b54 <app_can_fcu_read_data+0x154>)
 8001b0c:	f003 fdee 	bl	80056ec <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
 8001b10:	2201      	movs	r2, #1
 8001b12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b16:	480f      	ldr	r0, [pc, #60]	; (8001b54 <app_can_fcu_read_data+0x154>)
 8001b18:	f003 fde8 	bl	80056ec <HAL_GPIO_WritePin>
				    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b22:	480c      	ldr	r0, [pc, #48]	; (8001b54 <app_can_fcu_read_data+0x154>)
 8001b24:	f003 fde2 	bl	80056ec <HAL_GPIO_WritePin>
				    bq76942_Discharge();
 8001b28:	f7ff f928 	bl	8000d7c <bq76942_Discharge>
				    break;
 8001b2c:	e004      	b.n	8001b38 <app_can_fcu_read_data+0x138>
	    	break;
 8001b2e:	bf00      	nop
 8001b30:	e002      	b.n	8001b38 <app_can_fcu_read_data+0x138>
			    default:
				    break;
		    }
        }
 8001b32:	bf00      	nop
 8001b34:	e000      	b.n	8001b38 <app_can_fcu_read_data+0x138>
				    break;
 8001b36:	bf00      	nop
    }while(false);
    return ret_val;
 8001b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	2000025c 	.word	0x2000025c
 8001b48:	20000238 	.word	0x20000238
 8001b4c:	200002b4 	.word	0x200002b4
 8001b50:	2000010c 	.word	0x2000010c
 8001b54:	40020400 	.word	0x40020400

08001b58 <app_gauge_init>:

	return ret_val;
}

int16_t app_gauge_init(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
    int16_t ret_val = SYS_ERR;
 8001b5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b62:	80fb      	strh	r3, [r7, #6]

    // Config block reads
    block_read_cfg[eAlgoFet_BLOCK0].Addr = 0x02u;
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <app_gauge_init+0x2c>)
 8001b66:	2202      	movs	r2, #2
 8001b68:	701a      	strb	r2, [r3, #0]
    block_read_cfg[eAlgoFet_BLOCK0].Len = 18u;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <app_gauge_init+0x2c>)
 8001b6c:	2212      	movs	r2, #18
 8001b6e:	705a      	strb	r2, [r3, #1]

    ret_val = SYS_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	80fb      	strh	r3, [r7, #6]

    return ret_val;
 8001b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	20000264 	.word	0x20000264

08001b88 <app_sys_init>:

#include "app_afe.h"
#include "app_fuel_gauge.h"

int16_t app_sys_init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8001b8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b92:	80fb      	strh	r3, [r7, #6]
	do
	{
		// TODO:
		// IO Init
		(void) MX_GPIO_Init();
 8001b94:	f000 fad2 	bl	800213c <MX_GPIO_Init>
		// I2C Init
		(void) MX_I2C1_Init();
 8001b98:	f000 fbac 	bl	80022f4 <MX_I2C1_Init>
		// SPI Init
		(void) MX_SPI1_Init();
 8001b9c:	f000 fd3a 	bl	8002614 <MX_SPI1_Init>
		// CAN Init
		(void) MX_CAN1_Init();
 8001ba0:	f000 f8bc 	bl	8001d1c <MX_CAN1_Init>
		// PWM Init
		(void) MX_DMA_Init();
 8001ba4:	f000 f95e 	bl	8001e64 <MX_DMA_Init>
		// ADC Init
		(void) MX_ADC1_Init();
 8001ba8:	f000 f822 	bl	8001bf0 <MX_ADC1_Init>

	}while(false);

	return ret_val;
 8001bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <app_sys_peripheral_init>:

int16_t app_sys_peripheral_init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8001bbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bc2:	80fb      	strh	r3, [r7, #6]
	do
	{
		// TODO:
		// AFE Init
		if(SYS_OK != app_afe_init())
 8001bc4:	f7ff fbd6 	bl	8001374 <app_afe_init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d107      	bne.n	8001bde <app_sys_peripheral_init+0x26>
		{
			break;
		}
		// Fuel Gauge Init
		if(SYS_OK != app_gauge_init())
 8001bce:	f7ff ffc3 	bl	8001b58 <app_gauge_init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d104      	bne.n	8001be2 <app_sys_peripheral_init+0x2a>
//		{
//		    break;
//		}
		// CAN NW Init

		ret_val = SYS_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	80fb      	strh	r3, [r7, #6]
 8001bdc:	e002      	b.n	8001be4 <app_sys_peripheral_init+0x2c>
			break;
 8001bde:	bf00      	nop
 8001be0:	e000      	b.n	8001be4 <app_sys_peripheral_init+0x2c>
			break;
 8001be2:	bf00      	nop
	}while(false);

	return ret_val;
 8001be4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c02:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c04:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <MX_ADC1_Init+0x9c>)
 8001c06:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c08:	4b1f      	ldr	r3, [pc, #124]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c0e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c1c:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c22:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c2a:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c30:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c32:	4a17      	ldr	r2, [pc, #92]	; (8001c90 <MX_ADC1_Init+0xa0>)
 8001c34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c36:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c50:	480d      	ldr	r0, [pc, #52]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c52:	f001 f827 	bl	8002ca4 <HAL_ADC_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c5c:	f000 fcca 	bl	80025f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001c60:	230a      	movs	r3, #10
 8001c62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c64:	2301      	movs	r3, #1
 8001c66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c6c:	463b      	mov	r3, r7
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <MX_ADC1_Init+0x98>)
 8001c72:	f001 f983 	bl	8002f7c <HAL_ADC_ConfigChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c7c:	f000 fcba 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	2000026c 	.word	0x2000026c
 8001c8c:	40012000 	.word	0x40012000
 8001c90:	0f000001 	.word	0x0f000001

08001c94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a17      	ldr	r2, [pc, #92]	; (8001d10 <HAL_ADC_MspInit+0x7c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d127      	bne.n	8001d06 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <HAL_ADC_MspInit+0x80>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	4a15      	ldr	r2, [pc, #84]	; (8001d14 <HAL_ADC_MspInit+0x80>)
 8001cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc6:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <HAL_ADC_MspInit+0x80>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <HAL_ADC_MspInit+0x80>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a0e      	ldr	r2, [pc, #56]	; (8001d14 <HAL_ADC_MspInit+0x80>)
 8001cdc:	f043 0304 	orr.w	r3, r3, #4
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <HAL_ADC_MspInit+0x80>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = TEMP1_IN_Pin|TEMP2_IN_Pin;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfa:	f107 0314 	add.w	r3, r7, #20
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4805      	ldr	r0, [pc, #20]	; (8001d18 <HAL_ADC_MspInit+0x84>)
 8001d02:	f003 f9cf 	bl	80050a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001d06:	bf00      	nop
 8001d08:	3728      	adds	r7, #40	; 0x28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40012000 	.word	0x40012000
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40020800 	.word	0x40020800

08001d1c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001d20:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <MX_CAN1_Init+0x70>)
 8001d22:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <MX_CAN1_Init+0x74>)
 8001d24:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001d26:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <MX_CAN1_Init+0x70>)
 8001d28:	2205      	movs	r2, #5
 8001d2a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <MX_CAN1_Init+0x70>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <MX_CAN1_Init+0x70>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <MX_CAN1_Init+0x70>)
 8001d3a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d3e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <MX_CAN1_Init+0x70>)
 8001d42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d46:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <MX_CAN1_Init+0x70>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001d4e:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <MX_CAN1_Init+0x70>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001d54:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <MX_CAN1_Init+0x70>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_CAN1_Init+0x70>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d60:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <MX_CAN1_Init+0x70>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_CAN1_Init+0x70>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d6c:	4807      	ldr	r0, [pc, #28]	; (8001d8c <MX_CAN1_Init+0x70>)
 8001d6e:	f001 fb85 	bl	800347c <HAL_CAN_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001d78:	f000 fc3c 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  HAL_CAN_Start(&hcan1);
 8001d7c:	4803      	ldr	r0, [pc, #12]	; (8001d8c <MX_CAN1_Init+0x70>)
 8001d7e:	f001 ff35 	bl	8003bec <HAL_CAN_Start>
  app_can_rx_header_fcu_state();
 8001d82:	f7ff fc49 	bl	8001618 <app_can_rx_header_fcu_state>

  /* USER CODE END CAN1_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200002b4 	.word	0x200002b4
 8001d90:	40006400 	.word	0x40006400

08001d94 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a29      	ldr	r2, [pc, #164]	; (8001e58 <HAL_CAN_MspInit+0xc4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d14c      	bne.n	8001e50 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <HAL_CAN_MspInit+0xc8>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a27      	ldr	r2, [pc, #156]	; (8001e5c <HAL_CAN_MspInit+0xc8>)
 8001dc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <HAL_CAN_MspInit+0xc8>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <HAL_CAN_MspInit+0xc8>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a20      	ldr	r2, [pc, #128]	; (8001e5c <HAL_CAN_MspInit+0xc8>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <HAL_CAN_MspInit+0xc8>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001dee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e00:	2309      	movs	r3, #9
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4815      	ldr	r0, [pc, #84]	; (8001e60 <HAL_CAN_MspInit+0xcc>)
 8001e0c:	f003 f94a 	bl	80050a4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2105      	movs	r1, #5
 8001e14:	2013      	movs	r0, #19
 8001e16:	f002 fc7b 	bl	8004710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001e1a:	2013      	movs	r0, #19
 8001e1c:	f002 fca4 	bl	8004768 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2105      	movs	r1, #5
 8001e24:	2014      	movs	r0, #20
 8001e26:	f002 fc73 	bl	8004710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001e2a:	2014      	movs	r0, #20
 8001e2c:	f002 fc9c 	bl	8004768 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001e30:	2200      	movs	r2, #0
 8001e32:	2105      	movs	r1, #5
 8001e34:	2015      	movs	r0, #21
 8001e36:	f002 fc6b 	bl	8004710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001e3a:	2015      	movs	r0, #21
 8001e3c:	f002 fc94 	bl	8004768 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2105      	movs	r1, #5
 8001e44:	2016      	movs	r0, #22
 8001e46:	f002 fc63 	bl	8004710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001e4a:	2016      	movs	r0, #22
 8001e4c:	f002 fc8c 	bl	8004768 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40006400 	.word	0x40006400
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40020000 	.word	0x40020000

08001e64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <MX_DMA_Init+0x88>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a1e      	ldr	r2, [pc, #120]	; (8001eec <MX_DMA_Init+0x88>)
 8001e74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <MX_DMA_Init+0x88>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	603b      	str	r3, [r7, #0]
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <MX_DMA_Init+0x88>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a17      	ldr	r2, [pc, #92]	; (8001eec <MX_DMA_Init+0x88>)
 8001e90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <MX_DMA_Init+0x88>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2105      	movs	r1, #5
 8001ea6:	200b      	movs	r0, #11
 8001ea8:	f002 fc32 	bl	8004710 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001eac:	200b      	movs	r0, #11
 8001eae:	f002 fc5b 	bl	8004768 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2105      	movs	r1, #5
 8001eb6:	2011      	movs	r0, #17
 8001eb8:	f002 fc2a 	bl	8004710 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001ebc:	2011      	movs	r0, #17
 8001ebe:	f002 fc53 	bl	8004768 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2105      	movs	r1, #5
 8001ec6:	2038      	movs	r0, #56	; 0x38
 8001ec8:	f002 fc22 	bl	8004710 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ecc:	2038      	movs	r0, #56	; 0x38
 8001ece:	f002 fc4b 	bl	8004768 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2105      	movs	r1, #5
 8001ed6:	203b      	movs	r0, #59	; 0x3b
 8001ed8:	f002 fc1a 	bl	8004710 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001edc:	203b      	movs	r0, #59	; 0x3b
 8001ede:	f002 fc43 	bl	8004768 <HAL_NVIC_EnableIRQ>

}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800

08001ef0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <vApplicationGetIdleTaskMemory+0x2c>)
 8001f00:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	4a06      	ldr	r2, [pc, #24]	; (8001f20 <vApplicationGetIdleTaskMemory+0x30>)
 8001f06:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2280      	movs	r2, #128	; 0x80
 8001f0c:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	2000032c 	.word	0x2000032c
 8001f20:	200003e0 	.word	0x200003e0

08001f24 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8001f24:	b5b0      	push	{r4, r5, r7, lr}
 8001f26:	b096      	sub	sp, #88	; 0x58
 8001f28:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Init */
    /* USER CODE END Init */
    can_tx_queue = xQueueCreate(10, sizeof(uint32_t)); //to be used to queue the messages being sent on CAN line												//only 3 messages can be transmitted at once at the hardware level.
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2104      	movs	r1, #4
 8001f2e:	200a      	movs	r0, #10
 8001f30:	f007 fd96 	bl	8009a60 <xQueueGenericCreate>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4a27      	ldr	r2, [pc, #156]	; (8001fd4 <MX_FREERTOS_Init+0xb0>)
 8001f38:	6013      	str	r3, [r2, #0]
    can_rx_queue = xQueueCreate(10, sizeof(uint32_t));
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2104      	movs	r1, #4
 8001f3e:	200a      	movs	r0, #10
 8001f40:	f007 fd8e 	bl	8009a60 <xQueueGenericCreate>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4a24      	ldr	r2, [pc, #144]	; (8001fd8 <MX_FREERTOS_Init+0xb4>)
 8001f48:	6013      	str	r3, [r2, #0]
	if(can_tx_queue != NULL)
 8001f4a:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <MX_FREERTOS_Init+0xb0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <MX_FREERTOS_Init+0x3a>
    {
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f58:	4820      	ldr	r0, [pc, #128]	; (8001fdc <MX_FREERTOS_Init+0xb8>)
 8001f5a:	f003 fbc7 	bl	80056ec <HAL_GPIO_WritePin>
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* definition and creation of APP_1HZ_TASK */
    osThreadDef(APP_1HZ_TASK, app_task_1Hz, osPriorityNormal, 0, 128);
 8001f5e:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <MX_FREERTOS_Init+0xbc>)
 8001f60:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001f64:	461d      	mov	r5, r3
 8001f66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    APP_1HZ_TASKHandle = osThreadCreate(osThread(APP_1HZ_TASK), NULL);
 8001f72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f007 fc09 	bl	8009790 <osThreadCreate>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4a18      	ldr	r2, [pc, #96]	; (8001fe4 <MX_FREERTOS_Init+0xc0>)
 8001f82:	6013      	str	r3, [r2, #0]

  /* definition and creation of APP_10HZ_TASK */
  osThreadDef(APP_10HZ_TASK, app_task_10hz, osPriorityNormal, 0, 128);
 8001f84:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <MX_FREERTOS_Init+0xc4>)
 8001f86:	f107 0420 	add.w	r4, r7, #32
 8001f8a:	461d      	mov	r5, r3
 8001f8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_10HZ_TASKHandle = osThreadCreate(osThread(APP_10HZ_TASK), NULL);
 8001f98:	f107 0320 	add.w	r3, r7, #32
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f007 fbf6 	bl	8009790 <osThreadCreate>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	4a11      	ldr	r2, [pc, #68]	; (8001fec <MX_FREERTOS_Init+0xc8>)
 8001fa8:	6013      	str	r3, [r2, #0]

  /* definition and creation of APP_100HZ_TASK */
  osThreadDef(APP_100HZ_TASK, app_task_100hz, osPriorityNormal, 0, 128);
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <MX_FREERTOS_Init+0xcc>)
 8001fac:	1d3c      	adds	r4, r7, #4
 8001fae:	461d      	mov	r5, r3
 8001fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_100HZ_TASKHandle = osThreadCreate(osThread(APP_100HZ_TASK), NULL);
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f007 fbe5 	bl	8009790 <osThreadCreate>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <MX_FREERTOS_Init+0xd0>)
 8001fca:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    /* USER CODE END RTOS_THREADS */
}
 8001fcc:	bf00      	nop
 8001fce:	3758      	adds	r7, #88	; 0x58
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd4:	20000324 	.word	0x20000324
 8001fd8:	20000328 	.word	0x20000328
 8001fdc:	40020400 	.word	0x40020400
 8001fe0:	0800ba10 	.word	0x0800ba10
 8001fe4:	20000318 	.word	0x20000318
 8001fe8:	0800ba2c 	.word	0x0800ba2c
 8001fec:	2000031c 	.word	0x2000031c
 8001ff0:	0800ba48 	.word	0x0800ba48
 8001ff4:	20000320 	.word	0x20000320

08001ff8 <app_task_1Hz>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_app_task_1Hz */
void app_task_1Hz(void const *argument)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN app_task_1Hz */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 50;
 8002000:	2332      	movs	r3, #50	; 0x32
 8002002:	60fb      	str	r3, [r7, #12]
    xLastWakeTime = xTaskGetTickCount();
 8002004:	f008 fbce 	bl	800a7a4 <xTaskGetTickCount>
 8002008:	4603      	mov	r3, r0
 800200a:	60bb      	str	r3, [r7, #8]
    /* Infinite loop */
    for (;;)
    {
        app_afe_data_read();
 800200c:	f7ff f8f2 	bl	80011f4 <app_afe_data_read>
        //xSemaphoreTake(can_task_semaphore_handle, 10);
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002010:	f107 0308 	add.w	r3, r7, #8
 8002014:	68f9      	ldr	r1, [r7, #12]
 8002016:	4618      	mov	r0, r3
 8002018:	f008 fa32 	bl	800a480 <vTaskDelayUntil>
    {
 800201c:	e7f6      	b.n	800200c <app_task_1Hz+0x14>
	...

08002020 <app_task_10hz>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_app_task_10hz */
void app_task_10hz(void const *argument)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN app_task_10hz */
    TickType_t xLastWakeTime;
    uint16_t counter = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	82fb      	strh	r3, [r7, #22]
    const TickType_t xFrequency = 100;
 800202c:	2364      	movs	r3, #100	; 0x64
 800202e:	60fb      	str	r3, [r7, #12]
    xLastWakeTime = xTaskGetTickCount();
 8002030:	f008 fbb8 	bl	800a7a4 <xTaskGetTickCount>
 8002034:	4603      	mov	r3, r0
 8002036:	60bb      	str	r3, [r7, #8]
    /* Infinite loop */
    for (;;)
    {
        //xSemaphoreTake(can_task_semaphore_handle, 1000);
        if(counter%5==0)
 8002038:	8afa      	ldrh	r2, [r7, #22]
 800203a:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <app_task_10hz+0xa4>)
 800203c:	fba3 1302 	umull	r1, r3, r3, r2
 8002040:	0899      	lsrs	r1, r3, #2
 8002042:	460b      	mov	r3, r1
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	b29b      	uxth	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <app_task_10hz+0x34>
    	    app_can_fcu_read_data();
 8002050:	f7ff fcd6 	bl	8001a00 <app_can_fcu_read_data>
        if(counter%10 == 0)
 8002054:	8afa      	ldrh	r2, [r7, #22]
 8002056:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <app_task_10hz+0xa4>)
 8002058:	fba3 1302 	umull	r1, r3, r3, r2
 800205c:	08d9      	lsrs	r1, r3, #3
 800205e:	460b      	mov	r3, r1
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d112      	bne.n	8002094 <app_task_10hz+0x74>
        {
            for(int i = 1;i<7;i++)
 800206e:	2301      	movs	r3, #1
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	e00c      	b.n	800208e <app_task_10hz+0x6e>
            {
                xQueueSend(can_tx_queue, &can_IDs[i], (TickType_t)10);
 8002074:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <app_task_10hz+0xa8>)
 8002076:	6818      	ldr	r0, [r3, #0]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4a13      	ldr	r2, [pc, #76]	; (80020cc <app_task_10hz+0xac>)
 800207e:	1899      	adds	r1, r3, r2
 8002080:	2300      	movs	r3, #0
 8002082:	220a      	movs	r2, #10
 8002084:	f007 fd46 	bl	8009b14 <xQueueGenericSend>
            for(int i = 1;i<7;i++)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	3301      	adds	r3, #1
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2b06      	cmp	r3, #6
 8002092:	ddef      	ble.n	8002074 <app_task_10hz+0x54>
            }
        }
        counter++;
 8002094:	8afb      	ldrh	r3, [r7, #22]
 8002096:	3301      	adds	r3, #1
 8002098:	82fb      	strh	r3, [r7, #22]
        xQueueSend(can_tx_queue, &can_IDs[0],(TickType_t)10); //GaugeVit
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <app_task_10hz+0xa8>)
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	2300      	movs	r3, #0
 80020a0:	220a      	movs	r2, #10
 80020a2:	490a      	ldr	r1, [pc, #40]	; (80020cc <app_task_10hz+0xac>)
 80020a4:	f007 fd36 	bl	8009b14 <xQueueGenericSend>
        xQueueSend(can_tx_queue, &can_IDs[7],(TickType_t)10); //BMS Ovr
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <app_task_10hz+0xa8>)
 80020aa:	6818      	ldr	r0, [r3, #0]
 80020ac:	2300      	movs	r3, #0
 80020ae:	220a      	movs	r2, #10
 80020b0:	4907      	ldr	r1, [pc, #28]	; (80020d0 <app_task_10hz+0xb0>)
 80020b2:	f007 fd2f 	bl	8009b14 <xQueueGenericSend>
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80020b6:	f107 0308 	add.w	r3, r7, #8
 80020ba:	68f9      	ldr	r1, [r7, #12]
 80020bc:	4618      	mov	r0, r3
 80020be:	f008 f9df 	bl	800a480 <vTaskDelayUntil>
        if(counter%5==0)
 80020c2:	e7b9      	b.n	8002038 <app_task_10hz+0x18>
 80020c4:	cccccccd 	.word	0xcccccccd
 80020c8:	20000324 	.word	0x20000324
 80020cc:	20000020 	.word	0x20000020
 80020d0:	2000003c 	.word	0x2000003c

080020d4 <app_task_100hz>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_app_task_100hz */
void app_task_100hz(void const *argument)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN app_task_100hz */
    TickType_t xLastWakeTime;
    uint32_t* pReceive;
    int counter = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
    const TickType_t xFrequency = 10;
 80020e0:	230a      	movs	r3, #10
 80020e2:	613b      	str	r3, [r7, #16]
    xLastWakeTime = xTaskGetTickCount();
 80020e4:	f008 fb5e 	bl	800a7a4 <xTaskGetTickCount>
 80020e8:	4603      	mov	r3, r0
 80020ea:	60fb      	str	r3, [r7, #12]
    /* Infinite loop */
    for (;;)
    {
        if(counter%2 == 0)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <app_task_100hz+0x26>
        {
    	    app_afe_can_message_update();
 80020f6:	f7ff f8ed 	bl	80012d4 <app_afe_can_message_update>
        }
        if(uxQueueMessagesWaiting(can_tx_queue) > 0)
 80020fa:	4b0f      	ldr	r3, [pc, #60]	; (8002138 <app_task_100hz+0x64>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f007 fee6 	bl	8009ed0 <uxQueueMessagesWaiting>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00e      	beq.n	8002128 <app_task_100hz+0x54>
        {
        //xSemaphoreTake(can_task_semaphore_handle, 10);
    	    if(xQueueReceive(can_tx_queue, &pReceive, 100) == pdPASS)
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <app_task_100hz+0x64>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f107 0108 	add.w	r1, r7, #8
 8002112:	2264      	movs	r2, #100	; 0x64
 8002114:	4618      	mov	r0, r3
 8002116:	f007 fdfb 	bl	8009d10 <xQueueReceive>
 800211a:	4603      	mov	r3, r0
 800211c:	2b01      	cmp	r3, #1
 800211e:	d103      	bne.n	8002128 <app_task_100hz+0x54>
    	    {
    	    	app_can_send_tx_msg(pReceive);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fad4 	bl	80016d0 <app_can_send_tx_msg>
    	    }
        }
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002128:	f107 030c 	add.w	r3, r7, #12
 800212c:	6939      	ldr	r1, [r7, #16]
 800212e:	4618      	mov	r0, r3
 8002130:	f008 f9a6 	bl	800a480 <vTaskDelayUntil>
        if(counter%2 == 0)
 8002134:	e7da      	b.n	80020ec <app_task_100hz+0x18>
 8002136:	bf00      	nop
 8002138:	20000324 	.word	0x20000324

0800213c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	60da      	str	r2, [r3, #12]
 8002150:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	4b62      	ldr	r3, [pc, #392]	; (80022e0 <MX_GPIO_Init+0x1a4>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a61      	ldr	r2, [pc, #388]	; (80022e0 <MX_GPIO_Init+0x1a4>)
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b5f      	ldr	r3, [pc, #380]	; (80022e0 <MX_GPIO_Init+0x1a4>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	4b5b      	ldr	r3, [pc, #364]	; (80022e0 <MX_GPIO_Init+0x1a4>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a5a      	ldr	r2, [pc, #360]	; (80022e0 <MX_GPIO_Init+0x1a4>)
 8002178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b58      	ldr	r3, [pc, #352]	; (80022e0 <MX_GPIO_Init+0x1a4>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	4b54      	ldr	r3, [pc, #336]	; (80022e0 <MX_GPIO_Init+0x1a4>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a53      	ldr	r2, [pc, #332]	; (80022e0 <MX_GPIO_Init+0x1a4>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b51      	ldr	r3, [pc, #324]	; (80022e0 <MX_GPIO_Init+0x1a4>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
 80021aa:	4b4d      	ldr	r3, [pc, #308]	; (80022e0 <MX_GPIO_Init+0x1a4>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a4c      	ldr	r2, [pc, #304]	; (80022e0 <MX_GPIO_Init+0x1a4>)
 80021b0:	f043 0302 	orr.w	r3, r3, #2
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b4a      	ldr	r3, [pc, #296]	; (80022e0 <MX_GPIO_Init+0x1a4>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	603b      	str	r3, [r7, #0]
 80021c6:	4b46      	ldr	r3, [pc, #280]	; (80022e0 <MX_GPIO_Init+0x1a4>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a45      	ldr	r2, [pc, #276]	; (80022e0 <MX_GPIO_Init+0x1a4>)
 80021cc:	f043 0308 	orr.w	r3, r3, #8
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b43      	ldr	r3, [pc, #268]	; (80022e0 <MX_GPIO_Init+0x1a4>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	603b      	str	r3, [r7, #0]
 80021dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_SHUT_Pin|AFE_WAKE_Pin, GPIO_PIN_RESET);
 80021de:	2200      	movs	r2, #0
 80021e0:	2106      	movs	r1, #6
 80021e2:	4840      	ldr	r0, [pc, #256]	; (80022e4 <MX_GPIO_Init+0x1a8>)
 80021e4:	f003 fa82 	bl	80056ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SP1_CS_Pin|DFETOFF_OUT_Pin|LED3_OUT_Pin|LED2_OUT_Pin
 80021e8:	2200      	movs	r2, #0
 80021ea:	f44f 611f 	mov.w	r1, #2544	; 0x9f0
 80021ee:	483e      	ldr	r0, [pc, #248]	; (80022e8 <MX_GPIO_Init+0x1ac>)
 80021f0:	f003 fa7c 	bl	80056ec <HAL_GPIO_WritePin>
                          |LED1_OUT_Pin|PWR5V_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DDSG_IN_Pin|LED5_OUT_BLUE_Pin|LED5_OUT_GREEN_Pin|LED5_OUT_RED_Pin
 80021f4:	2200      	movs	r2, #0
 80021f6:	f24f 0104 	movw	r1, #61444	; 0xf004
 80021fa:	483c      	ldr	r0, [pc, #240]	; (80022ec <MX_GPIO_Init+0x1b0>)
 80021fc:	f003 fa76 	bl	80056ec <HAL_GPIO_WritePin>
                          |LED4_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 PC2
                           PC3 PC9 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2
 8002200:	f24f 630c 	movw	r3, #62988	; 0xf60c
 8002204:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002206:	2303      	movs	r3, #3
 8002208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4619      	mov	r1, r3
 8002214:	4834      	ldr	r0, [pc, #208]	; (80022e8 <MX_GPIO_Init+0x1ac>)
 8002216:	f002 ff45 	bl	80050a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 800221a:	f248 1319 	movw	r3, #33049	; 0x8119
 800221e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002220:	2303      	movs	r3, #3
 8002222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	4619      	mov	r1, r3
 800222e:	482d      	ldr	r0, [pc, #180]	; (80022e4 <MX_GPIO_Init+0x1a8>)
 8002230:	f002 ff38 	bl	80050a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RST_SHUT_Pin|AFE_WAKE_Pin;
 8002234:	2306      	movs	r3, #6
 8002236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002238:	2301      	movs	r3, #1
 800223a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	4619      	mov	r1, r3
 800224a:	4826      	ldr	r0, [pc, #152]	; (80022e4 <MX_GPIO_Init+0x1a8>)
 800224c:	f002 ff2a 	bl	80050a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = SP1_CS_Pin|DFETOFF_OUT_Pin|LED3_OUT_Pin|LED2_OUT_Pin
 8002250:	f44f 631f 	mov.w	r3, #2544	; 0x9f0
 8002254:	617b      	str	r3, [r7, #20]
                          |LED1_OUT_Pin|PWR5V_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002256:	2301      	movs	r3, #1
 8002258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2300      	movs	r3, #0
 8002260:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002262:	f107 0314 	add.w	r3, r7, #20
 8002266:	4619      	mov	r1, r3
 8002268:	481f      	ldr	r0, [pc, #124]	; (80022e8 <MX_GPIO_Init+0x1ac>)
 800226a:	f002 ff1b 	bl	80050a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AFE_ALERT_IN_Pin|DCHG_IN_Pin;
 800226e:	2303      	movs	r3, #3
 8002270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227a:	f107 0314 	add.w	r3, r7, #20
 800227e:	4619      	mov	r1, r3
 8002280:	481a      	ldr	r0, [pc, #104]	; (80022ec <MX_GPIO_Init+0x1b0>)
 8002282:	f002 ff0f 	bl	80050a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DDSG_IN_Pin|LED5_OUT_BLUE_Pin|LED5_OUT_GREEN_Pin|LED5_OUT_RED_Pin
 8002286:	f24f 0304 	movw	r3, #61444	; 0xf004
 800228a:	617b      	str	r3, [r7, #20]
                          |LED4_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228c:	2301      	movs	r3, #1
 800228e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	4619      	mov	r1, r3
 800229e:	4813      	ldr	r0, [pc, #76]	; (80022ec <MX_GPIO_Init+0x1b0>)
 80022a0:	f002 ff00 	bl	80050a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 80022a4:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 80022a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022aa:	2303      	movs	r3, #3
 80022ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	4619      	mov	r1, r3
 80022b8:	480c      	ldr	r0, [pc, #48]	; (80022ec <MX_GPIO_Init+0x1b0>)
 80022ba:	f002 fef3 	bl	80050a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_IN_Pin;
 80022be:	2304      	movs	r3, #4
 80022c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_IN_GPIO_Port, &GPIO_InitStruct);
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	4619      	mov	r1, r3
 80022d0:	4807      	ldr	r0, [pc, #28]	; (80022f0 <MX_GPIO_Init+0x1b4>)
 80022d2:	f002 fee7 	bl	80050a4 <HAL_GPIO_Init>

}
 80022d6:	bf00      	nop
 80022d8:	3728      	adds	r7, #40	; 0x28
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40020000 	.word	0x40020000
 80022e8:	40020800 	.word	0x40020800
 80022ec:	40020400 	.word	0x40020400
 80022f0:	40020c00 	.word	0x40020c00

080022f4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <MX_I2C1_Init+0x50>)
 80022fa:	4a13      	ldr	r2, [pc, #76]	; (8002348 <MX_I2C1_Init+0x54>)
 80022fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <MX_I2C1_Init+0x50>)
 8002300:	4a12      	ldr	r2, [pc, #72]	; (800234c <MX_I2C1_Init+0x58>)
 8002302:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <MX_I2C1_Init+0x50>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 168;
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <MX_I2C1_Init+0x50>)
 800230c:	22a8      	movs	r2, #168	; 0xa8
 800230e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <MX_I2C1_Init+0x50>)
 8002312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002316:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002318:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <MX_I2C1_Init+0x50>)
 800231a:	2200      	movs	r2, #0
 800231c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <MX_I2C1_Init+0x50>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002324:	4b07      	ldr	r3, [pc, #28]	; (8002344 <MX_I2C1_Init+0x50>)
 8002326:	2200      	movs	r2, #0
 8002328:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <MX_I2C1_Init+0x50>)
 800232c:	2200      	movs	r2, #0
 800232e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002330:	4804      	ldr	r0, [pc, #16]	; (8002344 <MX_I2C1_Init+0x50>)
 8002332:	f003 fa0d 	bl	8005750 <HAL_I2C_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800233c:	f000 f95a 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}
 8002344:	200005e0 	.word	0x200005e0
 8002348:	40005400 	.word	0x40005400
 800234c:	000186a0 	.word	0x000186a0

08002350 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	; 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a50      	ldr	r2, [pc, #320]	; (80024b0 <HAL_I2C_MspInit+0x160>)
 800236e:	4293      	cmp	r3, r2
 8002370:	f040 809a 	bne.w	80024a8 <HAL_I2C_MspInit+0x158>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002374:	2300      	movs	r3, #0
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	4b4e      	ldr	r3, [pc, #312]	; (80024b4 <HAL_I2C_MspInit+0x164>)
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	4a4d      	ldr	r2, [pc, #308]	; (80024b4 <HAL_I2C_MspInit+0x164>)
 800237e:	f043 0302 	orr.w	r3, r3, #2
 8002382:	6313      	str	r3, [r2, #48]	; 0x30
 8002384:	4b4b      	ldr	r3, [pc, #300]	; (80024b4 <HAL_I2C_MspInit+0x164>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002390:	23c0      	movs	r3, #192	; 0xc0
 8002392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002394:	2312      	movs	r3, #18
 8002396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239c:	2303      	movs	r3, #3
 800239e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023a0:	2304      	movs	r3, #4
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	4619      	mov	r1, r3
 80023aa:	4843      	ldr	r0, [pc, #268]	; (80024b8 <HAL_I2C_MspInit+0x168>)
 80023ac:	f002 fe7a 	bl	80050a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	4b3f      	ldr	r3, [pc, #252]	; (80024b4 <HAL_I2C_MspInit+0x164>)
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	4a3e      	ldr	r2, [pc, #248]	; (80024b4 <HAL_I2C_MspInit+0x164>)
 80023ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023be:	6413      	str	r3, [r2, #64]	; 0x40
 80023c0:	4b3c      	ldr	r3, [pc, #240]	; (80024b4 <HAL_I2C_MspInit+0x164>)
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80023cc:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <HAL_I2C_MspInit+0x16c>)
 80023ce:	4a3c      	ldr	r2, [pc, #240]	; (80024c0 <HAL_I2C_MspInit+0x170>)
 80023d0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80023d2:	4b3a      	ldr	r3, [pc, #232]	; (80024bc <HAL_I2C_MspInit+0x16c>)
 80023d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023d8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023da:	4b38      	ldr	r3, [pc, #224]	; (80024bc <HAL_I2C_MspInit+0x16c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023e0:	4b36      	ldr	r3, [pc, #216]	; (80024bc <HAL_I2C_MspInit+0x16c>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023e6:	4b35      	ldr	r3, [pc, #212]	; (80024bc <HAL_I2C_MspInit+0x16c>)
 80023e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023ec:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023ee:	4b33      	ldr	r3, [pc, #204]	; (80024bc <HAL_I2C_MspInit+0x16c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023f4:	4b31      	ldr	r3, [pc, #196]	; (80024bc <HAL_I2C_MspInit+0x16c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80023fa:	4b30      	ldr	r3, [pc, #192]	; (80024bc <HAL_I2C_MspInit+0x16c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002400:	4b2e      	ldr	r3, [pc, #184]	; (80024bc <HAL_I2C_MspInit+0x16c>)
 8002402:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002406:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002408:	4b2c      	ldr	r3, [pc, #176]	; (80024bc <HAL_I2C_MspInit+0x16c>)
 800240a:	2200      	movs	r2, #0
 800240c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800240e:	482b      	ldr	r0, [pc, #172]	; (80024bc <HAL_I2C_MspInit+0x16c>)
 8002410:	f002 f9c2 	bl	8004798 <HAL_DMA_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800241a:	f000 f8eb 	bl	80025f4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a26      	ldr	r2, [pc, #152]	; (80024bc <HAL_I2C_MspInit+0x16c>)
 8002422:	639a      	str	r2, [r3, #56]	; 0x38
 8002424:	4a25      	ldr	r2, [pc, #148]	; (80024bc <HAL_I2C_MspInit+0x16c>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800242a:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <HAL_I2C_MspInit+0x174>)
 800242c:	4a26      	ldr	r2, [pc, #152]	; (80024c8 <HAL_I2C_MspInit+0x178>)
 800242e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002430:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <HAL_I2C_MspInit+0x174>)
 8002432:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002436:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002438:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <HAL_I2C_MspInit+0x174>)
 800243a:	2240      	movs	r2, #64	; 0x40
 800243c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800243e:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <HAL_I2C_MspInit+0x174>)
 8002440:	2200      	movs	r2, #0
 8002442:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002444:	4b1f      	ldr	r3, [pc, #124]	; (80024c4 <HAL_I2C_MspInit+0x174>)
 8002446:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800244a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800244c:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <HAL_I2C_MspInit+0x174>)
 800244e:	2200      	movs	r2, #0
 8002450:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002452:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <HAL_I2C_MspInit+0x174>)
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002458:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <HAL_I2C_MspInit+0x174>)
 800245a:	2200      	movs	r2, #0
 800245c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800245e:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_I2C_MspInit+0x174>)
 8002460:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002464:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002466:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <HAL_I2C_MspInit+0x174>)
 8002468:	2200      	movs	r2, #0
 800246a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800246c:	4815      	ldr	r0, [pc, #84]	; (80024c4 <HAL_I2C_MspInit+0x174>)
 800246e:	f002 f993 	bl	8004798 <HAL_DMA_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8002478:	f000 f8bc 	bl	80025f4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a11      	ldr	r2, [pc, #68]	; (80024c4 <HAL_I2C_MspInit+0x174>)
 8002480:	635a      	str	r2, [r3, #52]	; 0x34
 8002482:	4a10      	ldr	r2, [pc, #64]	; (80024c4 <HAL_I2C_MspInit+0x174>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002488:	2200      	movs	r2, #0
 800248a:	2105      	movs	r1, #5
 800248c:	201f      	movs	r0, #31
 800248e:	f002 f93f 	bl	8004710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002492:	201f      	movs	r0, #31
 8002494:	f002 f968 	bl	8004768 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	2105      	movs	r1, #5
 800249c:	2020      	movs	r0, #32
 800249e:	f002 f937 	bl	8004710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80024a2:	2020      	movs	r0, #32
 80024a4:	f002 f960 	bl	8004768 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80024a8:	bf00      	nop
 80024aa:	3728      	adds	r7, #40	; 0x28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40005400 	.word	0x40005400
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40020400 	.word	0x40020400
 80024bc:	20000634 	.word	0x20000634
 80024c0:	40026010 	.word	0x40026010
 80024c4:	20000694 	.word	0x20000694
 80024c8:	400260a0 	.word	0x400260a0

080024cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024d0:	f000 fb82 	bl	8002bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */
  (void)SystemClock_Config();
 80024d4:	f000 f80a 	bl	80024ec <SystemClock_Config>
  // TODO: Sys_Init - HW
  (void)app_sys_init();
 80024d8:	f7ff fb56 	bl	8001b88 <app_sys_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  // TODO: Sys_Init - SW Modules
  (void)app_sys_peripheral_init();
 80024dc:	f7ff fb6c 	bl	8001bb8 <app_sys_peripheral_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80024e0:	f7ff fd20 	bl	8001f24 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80024e4:	f007 f94d 	bl	8009782 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024e8:	e7fe      	b.n	80024e8 <main+0x1c>
	...

080024ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b094      	sub	sp, #80	; 0x50
 80024f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024f2:	f107 031c 	add.w	r3, r7, #28
 80024f6:	2234      	movs	r2, #52	; 0x34
 80024f8:	2100      	movs	r1, #0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f009 f998 	bl	800b830 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002500:	f107 0308 	add.w	r3, r7, #8
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002510:	2300      	movs	r3, #0
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <SystemClock_Config+0xdc>)
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	4a2b      	ldr	r2, [pc, #172]	; (80025c8 <SystemClock_Config+0xdc>)
 800251a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251e:	6413      	str	r3, [r2, #64]	; 0x40
 8002520:	4b29      	ldr	r3, [pc, #164]	; (80025c8 <SystemClock_Config+0xdc>)
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800252c:	2300      	movs	r3, #0
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	4b26      	ldr	r3, [pc, #152]	; (80025cc <SystemClock_Config+0xe0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a25      	ldr	r2, [pc, #148]	; (80025cc <SystemClock_Config+0xe0>)
 8002536:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	4b23      	ldr	r3, [pc, #140]	; (80025cc <SystemClock_Config+0xe0>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002544:	603b      	str	r3, [r7, #0]
 8002546:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002548:	2301      	movs	r3, #1
 800254a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800254c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002550:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002552:	2302      	movs	r3, #2
 8002554:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002556:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800255a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800255c:	2304      	movs	r3, #4
 800255e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002560:	23b4      	movs	r3, #180	; 0xb4
 8002562:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002564:	2302      	movs	r3, #2
 8002566:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002568:	2302      	movs	r3, #2
 800256a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800256c:	2302      	movs	r3, #2
 800256e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002570:	f107 031c 	add.w	r3, r7, #28
 8002574:	4618      	mov	r0, r3
 8002576:	f005 fc1f 	bl	8007db8 <HAL_RCC_OscConfig>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002580:	f000 f838 	bl	80025f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002584:	f004 ff8c 	bl	80074a0 <HAL_PWREx_EnableOverDrive>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800258e:	f000 f831 	bl	80025f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002592:	230f      	movs	r3, #15
 8002594:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002596:	2302      	movs	r3, #2
 8002598:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800259e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025aa:	f107 0308 	add.w	r3, r7, #8
 80025ae:	2105      	movs	r1, #5
 80025b0:	4618      	mov	r0, r3
 80025b2:	f004 ffc5 	bl	8007540 <HAL_RCC_ClockConfig>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80025bc:	f000 f81a 	bl	80025f4 <Error_Handler>
  }
}
 80025c0:	bf00      	nop
 80025c2:	3750      	adds	r7, #80	; 0x50
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40007000 	.word	0x40007000

080025d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d101      	bne.n	80025e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80025e2:	f000 fb1b 	bl	8002c1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40010000 	.word	0x40010000

080025f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025f8:	b672      	cpsid	i
}
 80025fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025fc:	e7fe      	b.n	80025fc <Error_Handler+0x8>

080025fe <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002618:	4b17      	ldr	r3, [pc, #92]	; (8002678 <MX_SPI1_Init+0x64>)
 800261a:	4a18      	ldr	r2, [pc, #96]	; (800267c <MX_SPI1_Init+0x68>)
 800261c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800261e:	4b16      	ldr	r3, [pc, #88]	; (8002678 <MX_SPI1_Init+0x64>)
 8002620:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002624:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002626:	4b14      	ldr	r3, [pc, #80]	; (8002678 <MX_SPI1_Init+0x64>)
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <MX_SPI1_Init+0x64>)
 800262e:	2200      	movs	r2, #0
 8002630:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002632:	4b11      	ldr	r3, [pc, #68]	; (8002678 <MX_SPI1_Init+0x64>)
 8002634:	2200      	movs	r2, #0
 8002636:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002638:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <MX_SPI1_Init+0x64>)
 800263a:	2200      	movs	r2, #0
 800263c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <MX_SPI1_Init+0x64>)
 8002640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002644:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002646:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <MX_SPI1_Init+0x64>)
 8002648:	2238      	movs	r2, #56	; 0x38
 800264a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800264c:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <MX_SPI1_Init+0x64>)
 800264e:	2200      	movs	r2, #0
 8002650:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <MX_SPI1_Init+0x64>)
 8002654:	2200      	movs	r2, #0
 8002656:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002658:	4b07      	ldr	r3, [pc, #28]	; (8002678 <MX_SPI1_Init+0x64>)
 800265a:	2200      	movs	r2, #0
 800265c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <MX_SPI1_Init+0x64>)
 8002660:	220a      	movs	r2, #10
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002664:	4804      	ldr	r0, [pc, #16]	; (8002678 <MX_SPI1_Init+0x64>)
 8002666:	f005 ff03 	bl	8008470 <HAL_SPI_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002670:	f7ff ffc0 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}
 8002678:	200006f4 	.word	0x200006f4
 800267c:	40013000 	.word	0x40013000

08002680 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08a      	sub	sp, #40	; 0x28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002688:	f107 0314 	add.w	r3, r7, #20
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a4c      	ldr	r2, [pc, #304]	; (80027d0 <HAL_SPI_MspInit+0x150>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	f040 8092 	bne.w	80027c8 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026a4:	2300      	movs	r3, #0
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	4b4a      	ldr	r3, [pc, #296]	; (80027d4 <HAL_SPI_MspInit+0x154>)
 80026aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ac:	4a49      	ldr	r2, [pc, #292]	; (80027d4 <HAL_SPI_MspInit+0x154>)
 80026ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026b2:	6453      	str	r3, [r2, #68]	; 0x44
 80026b4:	4b47      	ldr	r3, [pc, #284]	; (80027d4 <HAL_SPI_MspInit+0x154>)
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	4b43      	ldr	r3, [pc, #268]	; (80027d4 <HAL_SPI_MspInit+0x154>)
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	4a42      	ldr	r2, [pc, #264]	; (80027d4 <HAL_SPI_MspInit+0x154>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6313      	str	r3, [r2, #48]	; 0x30
 80026d0:	4b40      	ldr	r3, [pc, #256]	; (80027d4 <HAL_SPI_MspInit+0x154>)
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80026dc:	23e0      	movs	r3, #224	; 0xe0
 80026de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e8:	2303      	movs	r3, #3
 80026ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026ec:	2305      	movs	r3, #5
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	4619      	mov	r1, r3
 80026f6:	4838      	ldr	r0, [pc, #224]	; (80027d8 <HAL_SPI_MspInit+0x158>)
 80026f8:	f002 fcd4 	bl	80050a4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80026fc:	4b37      	ldr	r3, [pc, #220]	; (80027dc <HAL_SPI_MspInit+0x15c>)
 80026fe:	4a38      	ldr	r2, [pc, #224]	; (80027e0 <HAL_SPI_MspInit+0x160>)
 8002700:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002702:	4b36      	ldr	r3, [pc, #216]	; (80027dc <HAL_SPI_MspInit+0x15c>)
 8002704:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002708:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800270a:	4b34      	ldr	r3, [pc, #208]	; (80027dc <HAL_SPI_MspInit+0x15c>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002710:	4b32      	ldr	r3, [pc, #200]	; (80027dc <HAL_SPI_MspInit+0x15c>)
 8002712:	2200      	movs	r2, #0
 8002714:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002716:	4b31      	ldr	r3, [pc, #196]	; (80027dc <HAL_SPI_MspInit+0x15c>)
 8002718:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800271c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800271e:	4b2f      	ldr	r3, [pc, #188]	; (80027dc <HAL_SPI_MspInit+0x15c>)
 8002720:	2200      	movs	r2, #0
 8002722:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002724:	4b2d      	ldr	r3, [pc, #180]	; (80027dc <HAL_SPI_MspInit+0x15c>)
 8002726:	2200      	movs	r2, #0
 8002728:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800272a:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <HAL_SPI_MspInit+0x15c>)
 800272c:	2200      	movs	r2, #0
 800272e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002730:	4b2a      	ldr	r3, [pc, #168]	; (80027dc <HAL_SPI_MspInit+0x15c>)
 8002732:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002736:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002738:	4b28      	ldr	r3, [pc, #160]	; (80027dc <HAL_SPI_MspInit+0x15c>)
 800273a:	2200      	movs	r2, #0
 800273c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800273e:	4827      	ldr	r0, [pc, #156]	; (80027dc <HAL_SPI_MspInit+0x15c>)
 8002740:	f002 f82a 	bl	8004798 <HAL_DMA_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 800274a:	f7ff ff53 	bl	80025f4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a22      	ldr	r2, [pc, #136]	; (80027dc <HAL_SPI_MspInit+0x15c>)
 8002752:	64da      	str	r2, [r3, #76]	; 0x4c
 8002754:	4a21      	ldr	r2, [pc, #132]	; (80027dc <HAL_SPI_MspInit+0x15c>)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800275a:	4b22      	ldr	r3, [pc, #136]	; (80027e4 <HAL_SPI_MspInit+0x164>)
 800275c:	4a22      	ldr	r2, [pc, #136]	; (80027e8 <HAL_SPI_MspInit+0x168>)
 800275e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002760:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <HAL_SPI_MspInit+0x164>)
 8002762:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002766:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002768:	4b1e      	ldr	r3, [pc, #120]	; (80027e4 <HAL_SPI_MspInit+0x164>)
 800276a:	2240      	movs	r2, #64	; 0x40
 800276c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800276e:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <HAL_SPI_MspInit+0x164>)
 8002770:	2200      	movs	r2, #0
 8002772:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002774:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <HAL_SPI_MspInit+0x164>)
 8002776:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800277a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800277c:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <HAL_SPI_MspInit+0x164>)
 800277e:	2200      	movs	r2, #0
 8002780:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002782:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <HAL_SPI_MspInit+0x164>)
 8002784:	2200      	movs	r2, #0
 8002786:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002788:	4b16      	ldr	r3, [pc, #88]	; (80027e4 <HAL_SPI_MspInit+0x164>)
 800278a:	2200      	movs	r2, #0
 800278c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <HAL_SPI_MspInit+0x164>)
 8002790:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002794:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002796:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <HAL_SPI_MspInit+0x164>)
 8002798:	2200      	movs	r2, #0
 800279a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800279c:	4811      	ldr	r0, [pc, #68]	; (80027e4 <HAL_SPI_MspInit+0x164>)
 800279e:	f001 fffb 	bl	8004798 <HAL_DMA_Init>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 80027a8:	f7ff ff24 	bl	80025f4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a0d      	ldr	r2, [pc, #52]	; (80027e4 <HAL_SPI_MspInit+0x164>)
 80027b0:	649a      	str	r2, [r3, #72]	; 0x48
 80027b2:	4a0c      	ldr	r2, [pc, #48]	; (80027e4 <HAL_SPI_MspInit+0x164>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80027b8:	2200      	movs	r2, #0
 80027ba:	2105      	movs	r1, #5
 80027bc:	2023      	movs	r0, #35	; 0x23
 80027be:	f001 ffa7 	bl	8004710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80027c2:	2023      	movs	r0, #35	; 0x23
 80027c4:	f001 ffd0 	bl	8004768 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80027c8:	bf00      	nop
 80027ca:	3728      	adds	r7, #40	; 0x28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40013000 	.word	0x40013000
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40020000 	.word	0x40020000
 80027dc:	20000774 	.word	0x20000774
 80027e0:	40026410 	.word	0x40026410
 80027e4:	200007d4 	.word	0x200007d4
 80027e8:	40026458 	.word	0x40026458

080027ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	607b      	str	r3, [r7, #4]
 80027f6:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_MspInit+0x54>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	4a11      	ldr	r2, [pc, #68]	; (8002840 <HAL_MspInit+0x54>)
 80027fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002800:	6453      	str	r3, [r2, #68]	; 0x44
 8002802:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <HAL_MspInit+0x54>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280a:	607b      	str	r3, [r7, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	603b      	str	r3, [r7, #0]
 8002812:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_MspInit+0x54>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <HAL_MspInit+0x54>)
 8002818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
 800281e:	4b08      	ldr	r3, [pc, #32]	; (8002840 <HAL_MspInit+0x54>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800282a:	2200      	movs	r2, #0
 800282c:	210f      	movs	r1, #15
 800282e:	f06f 0001 	mvn.w	r0, #1
 8002832:	f001 ff6d 	bl	8004710 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800

08002844 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08c      	sub	sp, #48	; 0x30
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002854:	2300      	movs	r3, #0
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	4b2f      	ldr	r3, [pc, #188]	; (8002918 <HAL_InitTick+0xd4>)
 800285a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285c:	4a2e      	ldr	r2, [pc, #184]	; (8002918 <HAL_InitTick+0xd4>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	6453      	str	r3, [r2, #68]	; 0x44
 8002864:	4b2c      	ldr	r3, [pc, #176]	; (8002918 <HAL_InitTick+0xd4>)
 8002866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002870:	f107 020c 	add.w	r2, r7, #12
 8002874:	f107 0310 	add.w	r3, r7, #16
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f005 f83a 	bl	80078f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002880:	f005 f824 	bl	80078cc <HAL_RCC_GetPCLK2Freq>
 8002884:	4603      	mov	r3, r0
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800288a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288c:	4a23      	ldr	r2, [pc, #140]	; (800291c <HAL_InitTick+0xd8>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	0c9b      	lsrs	r3, r3, #18
 8002894:	3b01      	subs	r3, #1
 8002896:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002898:	4b21      	ldr	r3, [pc, #132]	; (8002920 <HAL_InitTick+0xdc>)
 800289a:	4a22      	ldr	r2, [pc, #136]	; (8002924 <HAL_InitTick+0xe0>)
 800289c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800289e:	4b20      	ldr	r3, [pc, #128]	; (8002920 <HAL_InitTick+0xdc>)
 80028a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028a4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80028a6:	4a1e      	ldr	r2, [pc, #120]	; (8002920 <HAL_InitTick+0xdc>)
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80028ac:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <HAL_InitTick+0xdc>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b2:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <HAL_InitTick+0xdc>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b8:	4b19      	ldr	r3, [pc, #100]	; (8002920 <HAL_InitTick+0xdc>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80028be:	4818      	ldr	r0, [pc, #96]	; (8002920 <HAL_InitTick+0xdc>)
 80028c0:	f006 fb7a 	bl	8008fb8 <HAL_TIM_Base_Init>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80028ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d11b      	bne.n	800290a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80028d2:	4813      	ldr	r0, [pc, #76]	; (8002920 <HAL_InitTick+0xdc>)
 80028d4:	f006 fc6a 	bl	80091ac <HAL_TIM_Base_Start_IT>
 80028d8:	4603      	mov	r3, r0
 80028da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80028de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d111      	bne.n	800290a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80028e6:	2019      	movs	r0, #25
 80028e8:	f001 ff3e 	bl	8004768 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b0f      	cmp	r3, #15
 80028f0:	d808      	bhi.n	8002904 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80028f2:	2200      	movs	r2, #0
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	2019      	movs	r0, #25
 80028f8:	f001 ff0a 	bl	8004710 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028fc:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <HAL_InitTick+0xe4>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	e002      	b.n	800290a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800290a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800290e:	4618      	mov	r0, r3
 8002910:	3730      	adds	r7, #48	; 0x30
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800
 800291c:	431bde83 	.word	0x431bde83
 8002920:	20000834 	.word	0x20000834
 8002924:	40010000 	.word	0x40010000
 8002928:	20000044 	.word	0x20000044

0800292c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002930:	e7fe      	b.n	8002930 <NMI_Handler+0x4>

08002932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002932:	b480      	push	{r7}
 8002934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002936:	e7fe      	b.n	8002936 <HardFault_Handler+0x4>

08002938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800293c:	e7fe      	b.n	800293c <MemManage_Handler+0x4>

0800293e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002942:	e7fe      	b.n	8002942 <BusFault_Handler+0x4>

08002944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002948:	e7fe      	b.n	8002948 <UsageFault_Handler+0x4>

0800294a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <WWDG_IRQHandler+0x10>)
 800295e:	f006 fecf 	bl	8009700 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	2000087c 	.word	0x2000087c

0800296c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002970:	4802      	ldr	r0, [pc, #8]	; (800297c <DMA1_Stream0_IRQHandler+0x10>)
 8002972:	f002 f94d 	bl	8004c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000634 	.word	0x20000634

08002980 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002984:	4802      	ldr	r0, [pc, #8]	; (8002990 <DMA1_Stream6_IRQHandler+0x10>)
 8002986:	f002 f943 	bl	8004c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000694 	.word	0x20000694

08002994 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002998:	4802      	ldr	r0, [pc, #8]	; (80029a4 <CAN1_TX_IRQHandler+0x10>)
 800299a:	f001 fbad 	bl	80040f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200002b4 	.word	0x200002b4

080029a8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <CAN1_RX0_IRQHandler+0x10>)
 80029ae:	f001 fba3 	bl	80040f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200002b4 	.word	0x200002b4

080029bc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <CAN1_RX1_IRQHandler+0x10>)
 80029c2:	f001 fb99 	bl	80040f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	200002b4 	.word	0x200002b4

080029d0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80029d4:	4802      	ldr	r0, [pc, #8]	; (80029e0 <CAN1_SCE_IRQHandler+0x10>)
 80029d6:	f001 fb8f 	bl	80040f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	200002b4 	.word	0x200002b4

080029e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029e8:	4802      	ldr	r0, [pc, #8]	; (80029f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80029ea:	f006 fca5 	bl	8009338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000834 	.word	0x20000834

080029f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80029fc:	4802      	ldr	r0, [pc, #8]	; (8002a08 <I2C1_EV_IRQHandler+0x10>)
 80029fe:	f003 f873 	bl	8005ae8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	200005e0 	.word	0x200005e0

08002a0c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002a10:	4802      	ldr	r0, [pc, #8]	; (8002a1c <I2C1_ER_IRQHandler+0x10>)
 8002a12:	f003 f9da 	bl	8005dca <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	200005e0 	.word	0x200005e0

08002a20 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002a24:	4802      	ldr	r0, [pc, #8]	; (8002a30 <SPI1_IRQHandler+0x10>)
 8002a26:	f006 f897 	bl	8008b58 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	200006f4 	.word	0x200006f4

08002a34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002a38:	4802      	ldr	r0, [pc, #8]	; (8002a44 <DMA2_Stream0_IRQHandler+0x10>)
 8002a3a:	f002 f8e9 	bl	8004c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000774 	.word	0x20000774

08002a48 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002a4c:	4802      	ldr	r0, [pc, #8]	; (8002a58 <DMA2_Stream3_IRQHandler+0x10>)
 8002a4e:	f002 f8df 	bl	8004c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200007d4 	.word	0x200007d4

08002a5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <SystemInit+0x20>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	4a05      	ldr	r2, [pc, #20]	; (8002a7c <SystemInit+0x20>)
 8002a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ab8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a84:	480d      	ldr	r0, [pc, #52]	; (8002abc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a86:	490e      	ldr	r1, [pc, #56]	; (8002ac0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a88:	4a0e      	ldr	r2, [pc, #56]	; (8002ac4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a8c:	e002      	b.n	8002a94 <LoopCopyDataInit>

08002a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a92:	3304      	adds	r3, #4

08002a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a98:	d3f9      	bcc.n	8002a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a9a:	4a0b      	ldr	r2, [pc, #44]	; (8002ac8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a9c:	4c0b      	ldr	r4, [pc, #44]	; (8002acc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aa0:	e001      	b.n	8002aa6 <LoopFillZerobss>

08002aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aa4:	3204      	adds	r2, #4

08002aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa8:	d3fb      	bcc.n	8002aa2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002aaa:	f7ff ffd7 	bl	8002a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aae:	f008 fe8d 	bl	800b7cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ab2:	f7ff fd0b 	bl	80024cc <main>
  bx  lr    
 8002ab6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ab8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ac0:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8002ac4:	0800bd38 	.word	0x0800bd38
  ldr r2, =_sbss
 8002ac8:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8002acc:	200103f8 	.word	0x200103f8

08002ad0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ad0:	e7fe      	b.n	8002ad0 <ADC_IRQHandler>

08002ad2 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d104      	bne.n	8002aea <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002ae0:	b672      	cpsid	i
}
 8002ae2:	bf00      	nop
 8002ae4:	f7ff fd86 	bl	80025f4 <Error_Handler>
 8002ae8:	e7fe      	b.n	8002ae8 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	7a1b      	ldrb	r3, [r3, #8]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d904      	bls.n	8002afc <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002af2:	b672      	cpsid	i
}
 8002af4:	bf00      	nop
 8002af6:	f7ff fd7d 	bl	80025f4 <Error_Handler>
 8002afa:	e7fe      	b.n	8002afa <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	7a1b      	ldrb	r3, [r3, #8]
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	b2d1      	uxtb	r1, r2
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	7211      	strb	r1, [r2, #8]
 8002b08:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b0a:	f3ef 8211 	mrs	r2, BASEPRI
 8002b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	60fa      	str	r2, [r7, #12]
 8002b20:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b084      	sub	sp, #16
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d104      	bne.n	8002b4a <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002b40:	b672      	cpsid	i
}
 8002b42:	bf00      	nop
 8002b44:	f7ff fd56 	bl	80025f4 <Error_Handler>
 8002b48:	e7fe      	b.n	8002b48 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	7a1b      	ldrb	r3, [r3, #8]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	7a1b      	ldrb	r3, [r3, #8]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d904      	bls.n	8002b68 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8002b5e:	b672      	cpsid	i
}
 8002b60:	bf00      	nop
 8002b62:	f7ff fd47 	bl	80025f4 <Error_Handler>
 8002b66:	e7fe      	b.n	8002b66 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	7a1b      	ldrb	r3, [r3, #8]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b74:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b7c:	bf00      	nop
}
 8002b7e:	bf00      	nop
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d104      	bne.n	8002b9e <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002b94:	b672      	cpsid	i
}
 8002b96:	bf00      	nop
 8002b98:	f7ff fd2c 	bl	80025f4 <Error_Handler>
 8002b9c:	e7fe      	b.n	8002b9c <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ff96 	bl	8002ad2 <stm32_lock_acquire>
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d104      	bne.n	8002bc6 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002bbc:	b672      	cpsid	i
}
 8002bbe:	bf00      	nop
 8002bc0:	f7ff fd18 	bl	80025f4 <Error_Handler>
 8002bc4:	e7fe      	b.n	8002bc4 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ffb2 	bl	8002b32 <stm32_lock_release>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <HAL_Init+0x40>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a0d      	ldr	r2, [pc, #52]	; (8002c18 <HAL_Init+0x40>)
 8002be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002be6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_Init+0x40>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <HAL_Init+0x40>)
 8002bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bf4:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <HAL_Init+0x40>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a07      	ldr	r2, [pc, #28]	; (8002c18 <HAL_Init+0x40>)
 8002bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c00:	2003      	movs	r0, #3
 8002c02:	f001 fd65 	bl	80046d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c06:	200f      	movs	r0, #15
 8002c08:	f7ff fe1c 	bl	8002844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c0c:	f7ff fdee 	bl	80027ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40023c00 	.word	0x40023c00

08002c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_IncTick+0x20>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_IncTick+0x24>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <HAL_IncTick+0x24>)
 8002c2e:	6013      	str	r3, [r2, #0]
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	20000048 	.word	0x20000048
 8002c40:	2000089c 	.word	0x2000089c

08002c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return uwTick;
 8002c48:	4b03      	ldr	r3, [pc, #12]	; (8002c58 <HAL_GetTick+0x14>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	2000089c 	.word	0x2000089c

08002c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c64:	f7ff ffee 	bl	8002c44 <HAL_GetTick>
 8002c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d005      	beq.n	8002c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_Delay+0x44>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4413      	add	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c82:	bf00      	nop
 8002c84:	f7ff ffde 	bl	8002c44 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d8f7      	bhi.n	8002c84 <HAL_Delay+0x28>
  {
  }
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000048 	.word	0x20000048

08002ca4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e15c      	b.n	8002f74 <HAL_ADC_Init+0x2d0>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a8e      	ldr	r2, [pc, #568]	; (8002ef8 <HAL_ADC_Init+0x254>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00e      	beq.n	8002ce2 <HAL_ADC_Init+0x3e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a8c      	ldr	r2, [pc, #560]	; (8002efc <HAL_ADC_Init+0x258>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d009      	beq.n	8002ce2 <HAL_ADC_Init+0x3e>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a8b      	ldr	r2, [pc, #556]	; (8002f00 <HAL_ADC_Init+0x25c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d004      	beq.n	8002ce2 <HAL_ADC_Init+0x3e>
 8002cd8:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8002cdc:	4889      	ldr	r0, [pc, #548]	; (8002f04 <HAL_ADC_Init+0x260>)
 8002cde:	f7ff fc8e 	bl	80025fe <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d013      	beq.n	8002d12 <HAL_ADC_Init+0x6e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf2:	d00e      	beq.n	8002d12 <HAL_ADC_Init+0x6e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cfc:	d009      	beq.n	8002d12 <HAL_ADC_Init+0x6e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d06:	d004      	beq.n	8002d12 <HAL_ADC_Init+0x6e>
 8002d08:	f240 1143 	movw	r1, #323	; 0x143
 8002d0c:	487d      	ldr	r0, [pc, #500]	; (8002f04 <HAL_ADC_Init+0x260>)
 8002d0e:	f7ff fc76 	bl	80025fe <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d013      	beq.n	8002d42 <HAL_ADC_Init+0x9e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d22:	d00e      	beq.n	8002d42 <HAL_ADC_Init+0x9e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d2c:	d009      	beq.n	8002d42 <HAL_ADC_Init+0x9e>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d36:	d004      	beq.n	8002d42 <HAL_ADC_Init+0x9e>
 8002d38:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8002d3c:	4871      	ldr	r0, [pc, #452]	; (8002f04 <HAL_ADC_Init+0x260>)
 8002d3e:	f7ff fc5e 	bl	80025fe <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d008      	beq.n	8002d5c <HAL_ADC_Init+0xb8>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d004      	beq.n	8002d5c <HAL_ADC_Init+0xb8>
 8002d52:	f240 1145 	movw	r1, #325	; 0x145
 8002d56:	486b      	ldr	r0, [pc, #428]	; (8002f04 <HAL_ADC_Init+0x260>)
 8002d58:	f7ff fc51 	bl	80025fe <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	7e1b      	ldrb	r3, [r3, #24]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_ADC_Init+0xd2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	7e1b      	ldrb	r3, [r3, #24]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d004      	beq.n	8002d76 <HAL_ADC_Init+0xd2>
 8002d6c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002d70:	4864      	ldr	r0, [pc, #400]	; (8002f04 <HAL_ADC_Init+0x260>)
 8002d72:	f7ff fc44 	bl	80025fe <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d054      	beq.n	8002e28 <HAL_ADC_Init+0x184>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d86:	d04f      	beq.n	8002e28 <HAL_ADC_Init+0x184>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d90:	d04a      	beq.n	8002e28 <HAL_ADC_Init+0x184>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d9a:	d045      	beq.n	8002e28 <HAL_ADC_Init+0x184>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002da4:	d040      	beq.n	8002e28 <HAL_ADC_Init+0x184>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002dae:	d03b      	beq.n	8002e28 <HAL_ADC_Init+0x184>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002db8:	d036      	beq.n	8002e28 <HAL_ADC_Init+0x184>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8002dc2:	d031      	beq.n	8002e28 <HAL_ADC_Init+0x184>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dcc:	d02c      	beq.n	8002e28 <HAL_ADC_Init+0x184>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8002dd6:	d027      	beq.n	8002e28 <HAL_ADC_Init+0x184>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8002de0:	d022      	beq.n	8002e28 <HAL_ADC_Init+0x184>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de6:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8002dea:	d01d      	beq.n	8002e28 <HAL_ADC_Init+0x184>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002df4:	d018      	beq.n	8002e28 <HAL_ADC_Init+0x184>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8002dfe:	d013      	beq.n	8002e28 <HAL_ADC_Init+0x184>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8002e08:	d00e      	beq.n	8002e28 <HAL_ADC_Init+0x184>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8002e12:	d009      	beq.n	8002e28 <HAL_ADC_Init+0x184>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e18:	4a3b      	ldr	r2, [pc, #236]	; (8002f08 <HAL_ADC_Init+0x264>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d004      	beq.n	8002e28 <HAL_ADC_Init+0x184>
 8002e1e:	f240 1147 	movw	r1, #327	; 0x147
 8002e22:	4838      	ldr	r0, [pc, #224]	; (8002f04 <HAL_ADC_Init+0x260>)
 8002e24:	f7ff fbeb 	bl	80025fe <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d009      	beq.n	8002e44 <HAL_ADC_Init+0x1a0>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e38:	d004      	beq.n	8002e44 <HAL_ADC_Init+0x1a0>
 8002e3a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002e3e:	4831      	ldr	r0, [pc, #196]	; (8002f04 <HAL_ADC_Init+0x260>)
 8002e40:	f7ff fbdd 	bl	80025fe <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_ADC_Init+0x1b0>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	2b10      	cmp	r3, #16
 8002e52:	d904      	bls.n	8002e5e <HAL_ADC_Init+0x1ba>
 8002e54:	f240 1149 	movw	r1, #329	; 0x149
 8002e58:	482a      	ldr	r0, [pc, #168]	; (8002f04 <HAL_ADC_Init+0x260>)
 8002e5a:	f7ff fbd0 	bl	80025fe <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d009      	beq.n	8002e7c <HAL_ADC_Init+0x1d8>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d004      	beq.n	8002e7c <HAL_ADC_Init+0x1d8>
 8002e72:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002e76:	4823      	ldr	r0, [pc, #140]	; (8002f04 <HAL_ADC_Init+0x260>)
 8002e78:	f7ff fbc1 	bl	80025fe <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d00c      	beq.n	8002e9e <HAL_ADC_Init+0x1fa>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d008      	beq.n	8002e9e <HAL_ADC_Init+0x1fa>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d004      	beq.n	8002e9e <HAL_ADC_Init+0x1fa>
 8002e94:	f240 114b 	movw	r1, #331	; 0x14b
 8002e98:	481a      	ldr	r0, [pc, #104]	; (8002f04 <HAL_ADC_Init+0x260>)
 8002e9a:	f7ff fbb0 	bl	80025fe <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d009      	beq.n	8002ebc <HAL_ADC_Init+0x218>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d004      	beq.n	8002ebc <HAL_ADC_Init+0x218>
 8002eb2:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8002eb6:	4813      	ldr	r0, [pc, #76]	; (8002f04 <HAL_ADC_Init+0x260>)
 8002eb8:	f7ff fba1 	bl	80025fe <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	4a11      	ldr	r2, [pc, #68]	; (8002f08 <HAL_ADC_Init+0x264>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d022      	beq.n	8002f0c <HAL_ADC_Init+0x268>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d01e      	beq.n	8002f0c <HAL_ADC_Init+0x268>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ed6:	d019      	beq.n	8002f0c <HAL_ADC_Init+0x268>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ee0:	d014      	beq.n	8002f0c <HAL_ADC_Init+0x268>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002eea:	d00f      	beq.n	8002f0c <HAL_ADC_Init+0x268>
 8002eec:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8002ef0:	4804      	ldr	r0, [pc, #16]	; (8002f04 <HAL_ADC_Init+0x260>)
 8002ef2:	f7ff fb84 	bl	80025fe <assert_failed>
 8002ef6:	e009      	b.n	8002f0c <HAL_ADC_Init+0x268>
 8002ef8:	40012000 	.word	0x40012000
 8002efc:	40012100 	.word	0x40012100
 8002f00:	40012200 	.word	0x40012200
 8002f04:	0800ba64 	.word	0x0800ba64
 8002f08:	0f000001 	.word	0x0f000001
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d109      	bne.n	8002f28 <HAL_ADC_Init+0x284>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7fe febd 	bl	8001c94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d118      	bne.n	8002f66 <HAL_ADC_Init+0x2c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f3c:	f023 0302 	bic.w	r3, r3, #2
 8002f40:	f043 0202 	orr.w	r2, r3, #2
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 f98d 	bl	8003268 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	f023 0303 	bic.w	r3, r3, #3
 8002f5c:	f043 0201 	orr.w	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40
 8002f64:	e001      	b.n	8002f6a <HAL_ADC_Init+0x2c6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b12      	cmp	r3, #18
 8002f90:	d909      	bls.n	8002fa6 <HAL_ADC_ConfigChannel+0x2a>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a72      	ldr	r2, [pc, #456]	; (8003160 <HAL_ADC_ConfigChannel+0x1e4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d004      	beq.n	8002fa6 <HAL_ADC_ConfigChannel+0x2a>
 8002f9c:	f240 618b 	movw	r1, #1675	; 0x68b
 8002fa0:	4870      	ldr	r0, [pc, #448]	; (8003164 <HAL_ADC_ConfigChannel+0x1e8>)
 8002fa2:	f7ff fb2c 	bl	80025fe <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_ADC_ConfigChannel+0x3a>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b10      	cmp	r3, #16
 8002fb4:	d904      	bls.n	8002fc0 <HAL_ADC_ConfigChannel+0x44>
 8002fb6:	f240 618c 	movw	r1, #1676	; 0x68c
 8002fba:	486a      	ldr	r0, [pc, #424]	; (8003164 <HAL_ADC_ConfigChannel+0x1e8>)
 8002fbc:	f7ff fb1f 	bl	80025fe <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d020      	beq.n	800300a <HAL_ADC_ConfigChannel+0x8e>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d01c      	beq.n	800300a <HAL_ADC_ConfigChannel+0x8e>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d018      	beq.n	800300a <HAL_ADC_ConfigChannel+0x8e>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d014      	beq.n	800300a <HAL_ADC_ConfigChannel+0x8e>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d010      	beq.n	800300a <HAL_ADC_ConfigChannel+0x8e>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b05      	cmp	r3, #5
 8002fee:	d00c      	beq.n	800300a <HAL_ADC_ConfigChannel+0x8e>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b06      	cmp	r3, #6
 8002ff6:	d008      	beq.n	800300a <HAL_ADC_ConfigChannel+0x8e>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2b07      	cmp	r3, #7
 8002ffe:	d004      	beq.n	800300a <HAL_ADC_ConfigChannel+0x8e>
 8003000:	f240 618d 	movw	r1, #1677	; 0x68d
 8003004:	4857      	ldr	r0, [pc, #348]	; (8003164 <HAL_ADC_ConfigChannel+0x1e8>)
 8003006:	f7ff fafa 	bl	80025fe <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x9c>
 8003014:	2302      	movs	r3, #2
 8003016:	e118      	b.n	800324a <HAL_ADC_ConfigChannel+0x2ce>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b09      	cmp	r3, #9
 8003026:	d925      	bls.n	8003074 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68d9      	ldr	r1, [r3, #12]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	4613      	mov	r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	4413      	add	r3, r2
 800303c:	3b1e      	subs	r3, #30
 800303e:	2207      	movs	r2, #7
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43da      	mvns	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	400a      	ands	r2, r1
 800304c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68d9      	ldr	r1, [r3, #12]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	b29b      	uxth	r3, r3
 800305e:	4618      	mov	r0, r3
 8003060:	4603      	mov	r3, r0
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	4403      	add	r3, r0
 8003066:	3b1e      	subs	r3, #30
 8003068:	409a      	lsls	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	e022      	b.n	80030ba <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6919      	ldr	r1, [r3, #16]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	b29b      	uxth	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	4613      	mov	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	4413      	add	r3, r2
 8003088:	2207      	movs	r2, #7
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43da      	mvns	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	400a      	ands	r2, r1
 8003096:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6919      	ldr	r1, [r3, #16]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	4618      	mov	r0, r3
 80030aa:	4603      	mov	r3, r0
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4403      	add	r3, r0
 80030b0:	409a      	lsls	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b06      	cmp	r3, #6
 80030c0:	d824      	bhi.n	800310c <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	3b05      	subs	r3, #5
 80030d4:	221f      	movs	r2, #31
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43da      	mvns	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	400a      	ands	r2, r1
 80030e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	4618      	mov	r0, r3
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4413      	add	r3, r2
 80030fc:	3b05      	subs	r3, #5
 80030fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	635a      	str	r2, [r3, #52]	; 0x34
 800310a:	e051      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b0c      	cmp	r3, #12
 8003112:	d829      	bhi.n	8003168 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	4413      	add	r3, r2
 8003124:	3b23      	subs	r3, #35	; 0x23
 8003126:	221f      	movs	r2, #31
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43da      	mvns	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	400a      	ands	r2, r1
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	b29b      	uxth	r3, r3
 8003142:	4618      	mov	r0, r3
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	3b23      	subs	r3, #35	; 0x23
 8003150:	fa00 f203 	lsl.w	r2, r0, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	631a      	str	r2, [r3, #48]	; 0x30
 800315c:	e028      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x234>
 800315e:	bf00      	nop
 8003160:	10000012 	.word	0x10000012
 8003164:	0800ba64 	.word	0x0800ba64
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	3b41      	subs	r3, #65	; 0x41
 800317a:	221f      	movs	r2, #31
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43da      	mvns	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	400a      	ands	r2, r1
 8003188:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	b29b      	uxth	r3, r3
 8003196:	4618      	mov	r0, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	3b41      	subs	r3, #65	; 0x41
 80031a4:	fa00 f203 	lsl.w	r2, r0, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031b0:	4b28      	ldr	r3, [pc, #160]	; (8003254 <HAL_ADC_ConfigChannel+0x2d8>)
 80031b2:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a27      	ldr	r2, [pc, #156]	; (8003258 <HAL_ADC_ConfigChannel+0x2dc>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d10f      	bne.n	80031de <HAL_ADC_ConfigChannel+0x262>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b12      	cmp	r3, #18
 80031c4:	d10b      	bne.n	80031de <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1d      	ldr	r2, [pc, #116]	; (8003258 <HAL_ADC_ConfigChannel+0x2dc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d12b      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x2c4>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a1b      	ldr	r2, [pc, #108]	; (800325c <HAL_ADC_ConfigChannel+0x2e0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d003      	beq.n	80031fa <HAL_ADC_ConfigChannel+0x27e>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b11      	cmp	r3, #17
 80031f8:	d122      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a11      	ldr	r2, [pc, #68]	; (800325c <HAL_ADC_ConfigChannel+0x2e0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d111      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800321c:	4b10      	ldr	r3, [pc, #64]	; (8003260 <HAL_ADC_ConfigChannel+0x2e4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a10      	ldr	r2, [pc, #64]	; (8003264 <HAL_ADC_ConfigChannel+0x2e8>)
 8003222:	fba2 2303 	umull	r2, r3, r2, r3
 8003226:	0c9a      	lsrs	r2, r3, #18
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003232:	e002      	b.n	800323a <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	3b01      	subs	r3, #1
 8003238:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f9      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40012300 	.word	0x40012300
 8003258:	40012000 	.word	0x40012000
 800325c:	10000012 	.word	0x10000012
 8003260:	20000040 	.word	0x20000040
 8003264:	431bde83 	.word	0x431bde83

08003268 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003270:	4b7f      	ldr	r3, [pc, #508]	; (8003470 <ADC_Init+0x208>)
 8003272:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	431a      	orrs	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800329c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6859      	ldr	r1, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	021a      	lsls	r2, r3, #8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6859      	ldr	r1, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6899      	ldr	r1, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	4a5e      	ldr	r2, [pc, #376]	; (8003474 <ADC_Init+0x20c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d022      	beq.n	8003346 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800330e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6899      	ldr	r1, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003330:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6899      	ldr	r1, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	e00f      	b.n	8003366 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003354:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003364:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0202 	bic.w	r2, r2, #2
 8003374:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6899      	ldr	r1, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	7e1b      	ldrb	r3, [r3, #24]
 8003380:	005a      	lsls	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d028      	beq.n	80033e6 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <ADC_Init+0x13c>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d904      	bls.n	80033ae <ADC_Init+0x146>
 80033a4:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 80033a8:	4833      	ldr	r0, [pc, #204]	; (8003478 <ADC_Init+0x210>)
 80033aa:	f7ff f928 	bl	80025fe <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033bc:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033cc:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6859      	ldr	r1, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	3b01      	subs	r3, #1
 80033da:	035a      	lsls	r2, r3, #13
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
 80033e4:	e007      	b.n	80033f6 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033f4:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003404:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	3b01      	subs	r3, #1
 8003412:	051a      	lsls	r2, r3, #20
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800342a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6899      	ldr	r1, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003438:	025a      	lsls	r2, r3, #9
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003450:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6899      	ldr	r1, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	029a      	lsls	r2, r3, #10
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	609a      	str	r2, [r3, #8]
}
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40012300 	.word	0x40012300
 8003474:	0f000001 	.word	0x0f000001
 8003478:	0800ba64 	.word	0x0800ba64

0800347c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e243      	b.n	8003916 <HAL_CAN_Init+0x49a>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a93      	ldr	r2, [pc, #588]	; (80036e0 <HAL_CAN_Init+0x264>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d009      	beq.n	80034ac <HAL_CAN_Init+0x30>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a91      	ldr	r2, [pc, #580]	; (80036e4 <HAL_CAN_Init+0x268>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d004      	beq.n	80034ac <HAL_CAN_Init+0x30>
 80034a2:	f240 111d 	movw	r1, #285	; 0x11d
 80034a6:	4890      	ldr	r0, [pc, #576]	; (80036e8 <HAL_CAN_Init+0x26c>)
 80034a8:	f7ff f8a9 	bl	80025fe <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	7e1b      	ldrb	r3, [r3, #24]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_CAN_Init+0x4a>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	7e1b      	ldrb	r3, [r3, #24]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d004      	beq.n	80034c6 <HAL_CAN_Init+0x4a>
 80034bc:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80034c0:	4889      	ldr	r0, [pc, #548]	; (80036e8 <HAL_CAN_Init+0x26c>)
 80034c2:	f7ff f89c 	bl	80025fe <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	7e5b      	ldrb	r3, [r3, #25]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <HAL_CAN_Init+0x64>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	7e5b      	ldrb	r3, [r3, #25]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d004      	beq.n	80034e0 <HAL_CAN_Init+0x64>
 80034d6:	f240 111f 	movw	r1, #287	; 0x11f
 80034da:	4883      	ldr	r0, [pc, #524]	; (80036e8 <HAL_CAN_Init+0x26c>)
 80034dc:	f7ff f88f 	bl	80025fe <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	7e9b      	ldrb	r3, [r3, #26]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <HAL_CAN_Init+0x7e>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	7e9b      	ldrb	r3, [r3, #26]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d004      	beq.n	80034fa <HAL_CAN_Init+0x7e>
 80034f0:	f44f 7190 	mov.w	r1, #288	; 0x120
 80034f4:	487c      	ldr	r0, [pc, #496]	; (80036e8 <HAL_CAN_Init+0x26c>)
 80034f6:	f7ff f882 	bl	80025fe <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	7edb      	ldrb	r3, [r3, #27]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d008      	beq.n	8003514 <HAL_CAN_Init+0x98>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	7edb      	ldrb	r3, [r3, #27]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d004      	beq.n	8003514 <HAL_CAN_Init+0x98>
 800350a:	f240 1121 	movw	r1, #289	; 0x121
 800350e:	4876      	ldr	r0, [pc, #472]	; (80036e8 <HAL_CAN_Init+0x26c>)
 8003510:	f7ff f875 	bl	80025fe <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	7f1b      	ldrb	r3, [r3, #28]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_CAN_Init+0xb2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	7f1b      	ldrb	r3, [r3, #28]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d004      	beq.n	800352e <HAL_CAN_Init+0xb2>
 8003524:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003528:	486f      	ldr	r0, [pc, #444]	; (80036e8 <HAL_CAN_Init+0x26c>)
 800352a:	f7ff f868 	bl	80025fe <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	7f5b      	ldrb	r3, [r3, #29]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d008      	beq.n	8003548 <HAL_CAN_Init+0xcc>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	7f5b      	ldrb	r3, [r3, #29]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d004      	beq.n	8003548 <HAL_CAN_Init+0xcc>
 800353e:	f240 1123 	movw	r1, #291	; 0x123
 8003542:	4869      	ldr	r0, [pc, #420]	; (80036e8 <HAL_CAN_Init+0x26c>)
 8003544:	f7ff f85b 	bl	80025fe <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d013      	beq.n	8003578 <HAL_CAN_Init+0xfc>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003558:	d00e      	beq.n	8003578 <HAL_CAN_Init+0xfc>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003562:	d009      	beq.n	8003578 <HAL_CAN_Init+0xfc>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800356c:	d004      	beq.n	8003578 <HAL_CAN_Init+0xfc>
 800356e:	f44f 7192 	mov.w	r1, #292	; 0x124
 8003572:	485d      	ldr	r0, [pc, #372]	; (80036e8 <HAL_CAN_Init+0x26c>)
 8003574:	f7ff f843 	bl	80025fe <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d013      	beq.n	80035a8 <HAL_CAN_Init+0x12c>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003588:	d00e      	beq.n	80035a8 <HAL_CAN_Init+0x12c>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003592:	d009      	beq.n	80035a8 <HAL_CAN_Init+0x12c>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800359c:	d004      	beq.n	80035a8 <HAL_CAN_Init+0x12c>
 800359e:	f240 1125 	movw	r1, #293	; 0x125
 80035a2:	4851      	ldr	r0, [pc, #324]	; (80036e8 <HAL_CAN_Init+0x26c>)
 80035a4:	f7ff f82b 	bl	80025fe <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d04f      	beq.n	8003650 <HAL_CAN_Init+0x1d4>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b8:	d04a      	beq.n	8003650 <HAL_CAN_Init+0x1d4>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035c2:	d045      	beq.n	8003650 <HAL_CAN_Init+0x1d4>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80035cc:	d040      	beq.n	8003650 <HAL_CAN_Init+0x1d4>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035d6:	d03b      	beq.n	8003650 <HAL_CAN_Init+0x1d4>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035e0:	d036      	beq.n	8003650 <HAL_CAN_Init+0x1d4>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80035ea:	d031      	beq.n	8003650 <HAL_CAN_Init+0x1d4>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80035f4:	d02c      	beq.n	8003650 <HAL_CAN_Init+0x1d4>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035fe:	d027      	beq.n	8003650 <HAL_CAN_Init+0x1d4>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8003608:	d022      	beq.n	8003650 <HAL_CAN_Init+0x1d4>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8003612:	d01d      	beq.n	8003650 <HAL_CAN_Init+0x1d4>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 800361c:	d018      	beq.n	8003650 <HAL_CAN_Init+0x1d4>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003626:	d013      	beq.n	8003650 <HAL_CAN_Init+0x1d4>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8003630:	d00e      	beq.n	8003650 <HAL_CAN_Init+0x1d4>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800363a:	d009      	beq.n	8003650 <HAL_CAN_Init+0x1d4>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8003644:	d004      	beq.n	8003650 <HAL_CAN_Init+0x1d4>
 8003646:	f44f 7193 	mov.w	r1, #294	; 0x126
 800364a:	4827      	ldr	r0, [pc, #156]	; (80036e8 <HAL_CAN_Init+0x26c>)
 800364c:	f7fe ffd7 	bl	80025fe <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d027      	beq.n	80036a8 <HAL_CAN_Init+0x22c>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003660:	d022      	beq.n	80036a8 <HAL_CAN_Init+0x22c>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800366a:	d01d      	beq.n	80036a8 <HAL_CAN_Init+0x22c>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003674:	d018      	beq.n	80036a8 <HAL_CAN_Init+0x22c>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800367e:	d013      	beq.n	80036a8 <HAL_CAN_Init+0x22c>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003688:	d00e      	beq.n	80036a8 <HAL_CAN_Init+0x22c>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003692:	d009      	beq.n	80036a8 <HAL_CAN_Init+0x22c>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 800369c:	d004      	beq.n	80036a8 <HAL_CAN_Init+0x22c>
 800369e:	f240 1127 	movw	r1, #295	; 0x127
 80036a2:	4811      	ldr	r0, [pc, #68]	; (80036e8 <HAL_CAN_Init+0x26c>)
 80036a4:	f7fe ffab 	bl	80025fe <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d004      	beq.n	80036ba <HAL_CAN_Init+0x23e>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b8:	d904      	bls.n	80036c4 <HAL_CAN_Init+0x248>
 80036ba:	f44f 7194 	mov.w	r1, #296	; 0x128
 80036be:	480a      	ldr	r0, [pc, #40]	; (80036e8 <HAL_CAN_Init+0x26c>)
 80036c0:	f7fe ff9d 	bl	80025fe <assert_failed>

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d13d      	bne.n	800374c <HAL_CAN_Init+0x2d0>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a06      	ldr	r2, [pc, #24]	; (80036ec <HAL_CAN_Init+0x270>)
 80036d4:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a05      	ldr	r2, [pc, #20]	; (80036f0 <HAL_CAN_Init+0x274>)
 80036da:	645a      	str	r2, [r3, #68]	; 0x44
 80036dc:	e00a      	b.n	80036f4 <HAL_CAN_Init+0x278>
 80036de:	bf00      	nop
 80036e0:	40006400 	.word	0x40006400
 80036e4:	40006800 	.word	0x40006800
 80036e8:	0800ba9c 	.word	0x0800ba9c
 80036ec:	080013a5 	.word	0x080013a5
 80036f0:	080044fb 	.word	0x080044fb
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a8a      	ldr	r2, [pc, #552]	; (8003920 <HAL_CAN_Init+0x4a4>)
 80036f8:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a89      	ldr	r2, [pc, #548]	; (8003924 <HAL_CAN_Init+0x4a8>)
 80036fe:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a89      	ldr	r2, [pc, #548]	; (8003928 <HAL_CAN_Init+0x4ac>)
 8003704:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a88      	ldr	r2, [pc, #544]	; (800392c <HAL_CAN_Init+0x4b0>)
 800370a:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a88      	ldr	r2, [pc, #544]	; (8003930 <HAL_CAN_Init+0x4b4>)
 8003710:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a87      	ldr	r2, [pc, #540]	; (8003934 <HAL_CAN_Init+0x4b8>)
 8003716:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a87      	ldr	r2, [pc, #540]	; (8003938 <HAL_CAN_Init+0x4bc>)
 800371c:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a86      	ldr	r2, [pc, #536]	; (800393c <HAL_CAN_Init+0x4c0>)
 8003722:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a86      	ldr	r2, [pc, #536]	; (8003940 <HAL_CAN_Init+0x4c4>)
 8003728:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a85      	ldr	r2, [pc, #532]	; (8003944 <HAL_CAN_Init+0x4c8>)
 800372e:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a85      	ldr	r2, [pc, #532]	; (8003948 <HAL_CAN_Init+0x4cc>)
 8003734:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d102      	bne.n	8003744 <HAL_CAN_Init+0x2c8>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a82      	ldr	r2, [pc, #520]	; (800394c <HAL_CAN_Init+0x4d0>)
 8003742:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800375c:	f7ff fa72 	bl	8002c44 <HAL_GetTick>
 8003760:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003762:	e012      	b.n	800378a <HAL_CAN_Init+0x30e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003764:	f7ff fa6e 	bl	8002c44 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b0a      	cmp	r3, #10
 8003770:	d90b      	bls.n	800378a <HAL_CAN_Init+0x30e>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2205      	movs	r2, #5
 8003782:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e0c5      	b.n	8003916 <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0e5      	beq.n	8003764 <HAL_CAN_Init+0x2e8>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0202 	bic.w	r2, r2, #2
 80037a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037a8:	f7ff fa4c 	bl	8002c44 <HAL_GetTick>
 80037ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037ae:	e012      	b.n	80037d6 <HAL_CAN_Init+0x35a>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037b0:	f7ff fa48 	bl	8002c44 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b0a      	cmp	r3, #10
 80037bc:	d90b      	bls.n	80037d6 <HAL_CAN_Init+0x35a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2205      	movs	r2, #5
 80037ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e09f      	b.n	8003916 <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e5      	bne.n	80037b0 <HAL_CAN_Init+0x334>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	7e1b      	ldrb	r3, [r3, #24]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d108      	bne.n	80037fe <HAL_CAN_Init+0x382>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	e007      	b.n	800380e <HAL_CAN_Init+0x392>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800380c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7e5b      	ldrb	r3, [r3, #25]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d108      	bne.n	8003828 <HAL_CAN_Init+0x3ac>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	e007      	b.n	8003838 <HAL_CAN_Init+0x3bc>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003836:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	7e9b      	ldrb	r3, [r3, #26]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d108      	bne.n	8003852 <HAL_CAN_Init+0x3d6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0220 	orr.w	r2, r2, #32
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	e007      	b.n	8003862 <HAL_CAN_Init+0x3e6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0220 	bic.w	r2, r2, #32
 8003860:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	7edb      	ldrb	r3, [r3, #27]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d108      	bne.n	800387c <HAL_CAN_Init+0x400>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0210 	bic.w	r2, r2, #16
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e007      	b.n	800388c <HAL_CAN_Init+0x410>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0210 	orr.w	r2, r2, #16
 800388a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	7f1b      	ldrb	r3, [r3, #28]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d108      	bne.n	80038a6 <HAL_CAN_Init+0x42a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0208 	orr.w	r2, r2, #8
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	e007      	b.n	80038b6 <HAL_CAN_Init+0x43a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0208 	bic.w	r2, r2, #8
 80038b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	7f5b      	ldrb	r3, [r3, #29]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d108      	bne.n	80038d0 <HAL_CAN_Init+0x454>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0204 	orr.w	r2, r2, #4
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	e007      	b.n	80038e0 <HAL_CAN_Init+0x464>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f022 0204 	bic.w	r2, r2, #4
 80038de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	ea42 0103 	orr.w	r1, r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	1e5a      	subs	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	0800450f 	.word	0x0800450f
 8003924:	08004523 	.word	0x08004523
 8003928:	08004483 	.word	0x08004483
 800392c:	08004497 	.word	0x08004497
 8003930:	080044ab 	.word	0x080044ab
 8003934:	080044bf 	.word	0x080044bf
 8003938:	080044d3 	.word	0x080044d3
 800393c:	080044e7 	.word	0x080044e7
 8003940:	08004537 	.word	0x08004537
 8003944:	0800454b 	.word	0x0800454b
 8003948:	0800455f 	.word	0x0800455f
 800394c:	08001d95 	.word	0x08001d95

08003950 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003966:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003968:	7cfb      	ldrb	r3, [r7, #19]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d003      	beq.n	8003976 <HAL_CAN_ConfigFilter+0x26>
 800396e:	7cfb      	ldrb	r3, [r7, #19]
 8003970:	2b02      	cmp	r3, #2
 8003972:	f040 812c 	bne.w	8003bce <HAL_CAN_ConfigFilter+0x27e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800397e:	d304      	bcc.n	800398a <HAL_CAN_ConfigFilter+0x3a>
 8003980:	f44f 7154 	mov.w	r1, #848	; 0x350
 8003984:	4897      	ldr	r0, [pc, #604]	; (8003be4 <HAL_CAN_ConfigFilter+0x294>)
 8003986:	f7fe fe3a 	bl	80025fe <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003992:	d304      	bcc.n	800399e <HAL_CAN_ConfigFilter+0x4e>
 8003994:	f240 3151 	movw	r1, #849	; 0x351
 8003998:	4892      	ldr	r0, [pc, #584]	; (8003be4 <HAL_CAN_ConfigFilter+0x294>)
 800399a:	f7fe fe30 	bl	80025fe <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a6:	d304      	bcc.n	80039b2 <HAL_CAN_ConfigFilter+0x62>
 80039a8:	f240 3152 	movw	r1, #850	; 0x352
 80039ac:	488d      	ldr	r0, [pc, #564]	; (8003be4 <HAL_CAN_ConfigFilter+0x294>)
 80039ae:	f7fe fe26 	bl	80025fe <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ba:	d304      	bcc.n	80039c6 <HAL_CAN_ConfigFilter+0x76>
 80039bc:	f240 3153 	movw	r1, #851	; 0x353
 80039c0:	4888      	ldr	r0, [pc, #544]	; (8003be4 <HAL_CAN_ConfigFilter+0x294>)
 80039c2:	f7fe fe1c 	bl	80025fe <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_CAN_ConfigFilter+0x90>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d004      	beq.n	80039e0 <HAL_CAN_ConfigFilter+0x90>
 80039d6:	f44f 7155 	mov.w	r1, #852	; 0x354
 80039da:	4882      	ldr	r0, [pc, #520]	; (8003be4 <HAL_CAN_ConfigFilter+0x294>)
 80039dc:	f7fe fe0f 	bl	80025fe <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <HAL_CAN_ConfigFilter+0xaa>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d004      	beq.n	80039fa <HAL_CAN_ConfigFilter+0xaa>
 80039f0:	f240 3155 	movw	r1, #853	; 0x355
 80039f4:	487b      	ldr	r0, [pc, #492]	; (8003be4 <HAL_CAN_ConfigFilter+0x294>)
 80039f6:	f7fe fe02 	bl	80025fe <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d008      	beq.n	8003a14 <HAL_CAN_ConfigFilter+0xc4>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d004      	beq.n	8003a14 <HAL_CAN_ConfigFilter+0xc4>
 8003a0a:	f240 3156 	movw	r1, #854	; 0x356
 8003a0e:	4875      	ldr	r0, [pc, #468]	; (8003be4 <HAL_CAN_ConfigFilter+0x294>)
 8003a10:	f7fe fdf5 	bl	80025fe <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_CAN_ConfigFilter+0xde>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d004      	beq.n	8003a2e <HAL_CAN_ConfigFilter+0xde>
 8003a24:	f240 3157 	movw	r1, #855	; 0x357
 8003a28:	486e      	ldr	r0, [pc, #440]	; (8003be4 <HAL_CAN_ConfigFilter+0x294>)
 8003a2a:	f7fe fde8 	bl	80025fe <assert_failed>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003a2e:	4b6e      	ldr	r3, [pc, #440]	; (8003be8 <HAL_CAN_ConfigFilter+0x298>)
 8003a30:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	2b1b      	cmp	r3, #27
 8003a38:	d904      	bls.n	8003a44 <HAL_CAN_ConfigFilter+0xf4>
 8003a3a:	f240 3172 	movw	r1, #882	; 0x372
 8003a3e:	4869      	ldr	r0, [pc, #420]	; (8003be4 <HAL_CAN_ConfigFilter+0x294>)
 8003a40:	f7fe fddd 	bl	80025fe <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	2b1b      	cmp	r3, #27
 8003a4a:	d904      	bls.n	8003a56 <HAL_CAN_ConfigFilter+0x106>
 8003a4c:	f240 3173 	movw	r1, #883	; 0x373
 8003a50:	4864      	ldr	r0, [pc, #400]	; (8003be4 <HAL_CAN_ConfigFilter+0x294>)
 8003a52:	f7fe fdd4 	bl	80025fe <assert_failed>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a5c:	f043 0201 	orr.w	r2, r3, #1
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a6c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	431a      	orrs	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	f003 031f 	and.w	r3, r3, #31
 8003a92:	2201      	movs	r2, #1
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	401a      	ands	r2, r3
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d123      	bne.n	8003afc <HAL_CAN_ConfigFilter+0x1ac>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	43db      	mvns	r3, r3
 8003abe:	401a      	ands	r2, r3
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003ad6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	3248      	adds	r2, #72	; 0x48
 8003adc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003af0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003af2:	6979      	ldr	r1, [r7, #20]
 8003af4:	3348      	adds	r3, #72	; 0x48
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	440b      	add	r3, r1
 8003afa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d122      	bne.n	8003b4a <HAL_CAN_ConfigFilter+0x1fa>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003b24:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	3248      	adds	r2, #72	; 0x48
 8003b2a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003b3e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003b40:	6979      	ldr	r1, [r7, #20]
 8003b42:	3348      	adds	r3, #72	; 0x48
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	440b      	add	r3, r1
 8003b48:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d109      	bne.n	8003b66 <HAL_CAN_ConfigFilter+0x216>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	401a      	ands	r2, r3
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003b64:	e007      	b.n	8003b76 <HAL_CAN_ConfigFilter+0x226>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <HAL_CAN_ConfigFilter+0x242>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	43db      	mvns	r3, r3
 8003b88:	401a      	ands	r2, r3
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003b90:	e007      	b.n	8003ba2 <HAL_CAN_ConfigFilter+0x252>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d107      	bne.n	8003bba <HAL_CAN_ConfigFilter+0x26a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003bc0:	f023 0201 	bic.w	r2, r3, #1
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e006      	b.n	8003bdc <HAL_CAN_ConfigFilter+0x28c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
  }
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	0800ba9c 	.word	0x0800ba9c
 8003be8:	40006400 	.word	0x40006400

08003bec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d12e      	bne.n	8003c5e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0201 	bic.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c18:	f7ff f814 	bl	8002c44 <HAL_GetTick>
 8003c1c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003c1e:	e012      	b.n	8003c46 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c20:	f7ff f810 	bl	8002c44 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b0a      	cmp	r3, #10
 8003c2c:	d90b      	bls.n	8003c46 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2205      	movs	r2, #5
 8003c3e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e012      	b.n	8003c6c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e5      	bne.n	8003c20 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	e006      	b.n	8003c6c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
  }
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b088      	sub	sp, #32
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c88:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <HAL_CAN_AddTxMessage+0x38>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d004      	beq.n	8003cac <HAL_CAN_AddTxMessage+0x38>
 8003ca2:	f240 41e9 	movw	r1, #1257	; 0x4e9
 8003ca6:	4884      	ldr	r0, [pc, #528]	; (8003eb8 <HAL_CAN_AddTxMessage+0x244>)
 8003ca8:	f7fe fca9 	bl	80025fe <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d008      	beq.n	8003cc6 <HAL_CAN_AddTxMessage+0x52>
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d004      	beq.n	8003cc6 <HAL_CAN_AddTxMessage+0x52>
 8003cbc:	f240 41ea 	movw	r1, #1258	; 0x4ea
 8003cc0:	487d      	ldr	r0, [pc, #500]	; (8003eb8 <HAL_CAN_AddTxMessage+0x244>)
 8003cc2:	f7fe fc9c 	bl	80025fe <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d904      	bls.n	8003cd8 <HAL_CAN_AddTxMessage+0x64>
 8003cce:	f240 41eb 	movw	r1, #1259	; 0x4eb
 8003cd2:	4879      	ldr	r0, [pc, #484]	; (8003eb8 <HAL_CAN_AddTxMessage+0x244>)
 8003cd4:	f7fe fc93 	bl	80025fe <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10a      	bne.n	8003cf6 <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ce8:	d30f      	bcc.n	8003d0a <HAL_CAN_AddTxMessage+0x96>
 8003cea:	f240 41ee 	movw	r1, #1262	; 0x4ee
 8003cee:	4872      	ldr	r0, [pc, #456]	; (8003eb8 <HAL_CAN_AddTxMessage+0x244>)
 8003cf0:	f7fe fc85 	bl	80025fe <assert_failed>
 8003cf4:	e009      	b.n	8003d0a <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cfe:	d304      	bcc.n	8003d0a <HAL_CAN_AddTxMessage+0x96>
 8003d00:	f240 41f2 	movw	r1, #1266	; 0x4f2
 8003d04:	486c      	ldr	r0, [pc, #432]	; (8003eb8 <HAL_CAN_AddTxMessage+0x244>)
 8003d06:	f7fe fc7a 	bl	80025fe <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	7d1b      	ldrb	r3, [r3, #20]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <HAL_CAN_AddTxMessage+0xb0>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	7d1b      	ldrb	r3, [r3, #20]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d004      	beq.n	8003d24 <HAL_CAN_AddTxMessage+0xb0>
 8003d1a:	f240 41f4 	movw	r1, #1268	; 0x4f4
 8003d1e:	4866      	ldr	r0, [pc, #408]	; (8003eb8 <HAL_CAN_AddTxMessage+0x244>)
 8003d20:	f7fe fc6d 	bl	80025fe <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8003d24:	7ffb      	ldrb	r3, [r7, #31]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d003      	beq.n	8003d32 <HAL_CAN_AddTxMessage+0xbe>
 8003d2a:	7ffb      	ldrb	r3, [r7, #31]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	f040 80b8 	bne.w	8003ea2 <HAL_CAN_AddTxMessage+0x22e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10a      	bne.n	8003d52 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d105      	bne.n	8003d52 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80a0 	beq.w	8003e92 <HAL_CAN_AddTxMessage+0x21e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	0e1b      	lsrs	r3, r3, #24
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d907      	bls.n	8003d72 <HAL_CAN_AddTxMessage+0xfe>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e09e      	b.n	8003eb0 <HAL_CAN_AddTxMessage+0x23c>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003d72:	2201      	movs	r2, #1
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	409a      	lsls	r2, r3
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10d      	bne.n	8003da0 <HAL_CAN_AddTxMessage+0x12c>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003d8e:	68f9      	ldr	r1, [r7, #12]
 8003d90:	6809      	ldr	r1, [r1, #0]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	3318      	adds	r3, #24
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	440b      	add	r3, r1
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	e00f      	b.n	8003dc0 <HAL_CAN_AddTxMessage+0x14c>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003daa:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003db0:	68f9      	ldr	r1, [r7, #12]
 8003db2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003db4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	3318      	adds	r3, #24
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	440b      	add	r3, r1
 8003dbe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6819      	ldr	r1, [r3, #0]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	3318      	adds	r3, #24
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	440b      	add	r3, r1
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	7d1b      	ldrb	r3, [r3, #20]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d111      	bne.n	8003e00 <HAL_CAN_AddTxMessage+0x18c>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	3318      	adds	r3, #24
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	4413      	add	r3, r2
 8003de8:	3304      	adds	r3, #4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	6811      	ldr	r1, [r2, #0]
 8003df0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	3318      	adds	r3, #24
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	440b      	add	r3, r1
 8003dfc:	3304      	adds	r3, #4
 8003dfe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3307      	adds	r3, #7
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	061a      	lsls	r2, r3, #24
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3306      	adds	r3, #6
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	041b      	lsls	r3, r3, #16
 8003e10:	431a      	orrs	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3305      	adds	r3, #5
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	3204      	adds	r2, #4
 8003e20:	7812      	ldrb	r2, [r2, #0]
 8003e22:	4610      	mov	r0, r2
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	6811      	ldr	r1, [r2, #0]
 8003e28:	ea43 0200 	orr.w	r2, r3, r0
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	440b      	add	r3, r1
 8003e32:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003e36:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3303      	adds	r3, #3
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	061a      	lsls	r2, r3, #24
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3302      	adds	r3, #2
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	041b      	lsls	r3, r3, #16
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	4313      	orrs	r3, r2
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	7812      	ldrb	r2, [r2, #0]
 8003e58:	4610      	mov	r0, r2
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	6811      	ldr	r1, [r2, #0]
 8003e5e:	ea43 0200 	orr.w	r2, r3, r0
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	440b      	add	r3, r1
 8003e68:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003e6c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	3318      	adds	r3, #24
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	4413      	add	r3, r2
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	6811      	ldr	r1, [r2, #0]
 8003e80:	f043 0201 	orr.w	r2, r3, #1
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	3318      	adds	r3, #24
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	440b      	add	r3, r1
 8003e8c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e00e      	b.n	8003eb0 <HAL_CAN_AddTxMessage+0x23c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e006      	b.n	8003eb0 <HAL_CAN_AddTxMessage+0x23c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
  }
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3720      	adds	r7, #32
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	0800ba9c 	.word	0x0800ba9c

08003ebc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ed0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d007      	beq.n	8003ee8 <HAL_CAN_GetRxMessage+0x2c>
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d004      	beq.n	8003ee8 <HAL_CAN_GetRxMessage+0x2c>
 8003ede:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 8003ee2:	4884      	ldr	r0, [pc, #528]	; (80040f4 <HAL_CAN_GetRxMessage+0x238>)
 8003ee4:	f7fe fb8b 	bl	80025fe <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d003      	beq.n	8003ef6 <HAL_CAN_GetRxMessage+0x3a>
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	f040 80f3 	bne.w	80040dc <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10e      	bne.n	8003f1a <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d116      	bne.n	8003f38 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e0e7      	b.n	80040ea <HAL_CAN_GetRxMessage+0x22e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d107      	bne.n	8003f38 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0d8      	b.n	80040ea <HAL_CAN_GetRxMessage+0x22e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	331b      	adds	r3, #27
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	4413      	add	r3, r2
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0204 	and.w	r2, r3, #4
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10c      	bne.n	8003f70 <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	331b      	adds	r3, #27
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	4413      	add	r3, r2
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	0d5b      	lsrs	r3, r3, #21
 8003f66:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	e00b      	b.n	8003f88 <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	331b      	adds	r3, #27
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	4413      	add	r3, r2
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	08db      	lsrs	r3, r3, #3
 8003f80:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	331b      	adds	r3, #27
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	4413      	add	r3, r2
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0202 	and.w	r2, r3, #2
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	331b      	adds	r3, #27
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	4413      	add	r3, r2
 8003faa:	3304      	adds	r3, #4
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 020f 	and.w	r2, r3, #15
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	331b      	adds	r3, #27
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	0a1b      	lsrs	r3, r3, #8
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	331b      	adds	r3, #27
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	4413      	add	r3, r2
 8003fda:	3304      	adds	r3, #4
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	0c1b      	lsrs	r3, r3, #16
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	4413      	add	r3, r2
 8004006:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	0a1a      	lsrs	r2, r3, #8
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	3301      	adds	r3, #1
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	4413      	add	r3, r2
 8004020:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	0c1a      	lsrs	r2, r3, #16
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	3302      	adds	r3, #2
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	4413      	add	r3, r2
 800403a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	0e1a      	lsrs	r2, r3, #24
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	3303      	adds	r3, #3
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	4413      	add	r3, r2
 8004054:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	3304      	adds	r3, #4
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	4413      	add	r3, r2
 800406c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	0a1a      	lsrs	r2, r3, #8
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	3305      	adds	r3, #5
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	4413      	add	r3, r2
 8004086:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	0c1a      	lsrs	r2, r3, #16
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	3306      	adds	r3, #6
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	4413      	add	r3, r2
 80040a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	0e1a      	lsrs	r2, r3, #24
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	3307      	adds	r3, #7
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d108      	bne.n	80040c8 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0220 	orr.w	r2, r2, #32
 80040c4:	60da      	str	r2, [r3, #12]
 80040c6:	e007      	b.n	80040d8 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0220 	orr.w	r2, r2, #32
 80040d6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	e006      	b.n	80040ea <HAL_CAN_GetRxMessage+0x22e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
  }
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	0800ba9c 	.word	0x0800ba9c

080040f8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08a      	sub	sp, #40	; 0x28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004100:	2300      	movs	r3, #0
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 8083 	beq.w	8004246 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d025      	beq.n	8004196 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2201      	movs	r2, #1
 8004150:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d004      	beq.n	8004166 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
 8004164:	e017      	b.n	8004196 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	d004      	beq.n	800417a <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004176:	627b      	str	r3, [r7, #36]	; 0x24
 8004178:	e00d      	b.n	8004196 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d004      	beq.n	800418e <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
 800418c:	e003      	b.n	8004196 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419c:	2b00      	cmp	r3, #0
 800419e:	d026      	beq.n	80041ee <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d004      	beq.n	80041be <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	4798      	blx	r3
 80041bc:	e017      	b.n	80041ee <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d004      	beq.n	80041d2 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
 80041d0:	e00d      	b.n	80041ee <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d004      	beq.n	80041e6 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24
 80041e4:	e003      	b.n	80041ee <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d026      	beq.n	8004246 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004200:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d004      	beq.n	8004216 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	4798      	blx	r3
 8004214:	e017      	b.n	8004246 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d004      	beq.n	800422a <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
 8004228:	e00d      	b.n	8004246 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d004      	beq.n	800423e <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
 800423c:	e003      	b.n	8004246 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00c      	beq.n	800426a <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	2b00      	cmp	r3, #0
 8004258:	d007      	beq.n	800426a <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004260:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2210      	movs	r2, #16
 8004268:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00c      	beq.n	800428e <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2208      	movs	r2, #8
 8004284:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00c      	beq.n	80042d2 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f003 0310 	and.w	r3, r3, #16
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d007      	beq.n	80042d2 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2210      	movs	r2, #16
 80042d0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00c      	beq.n	80042f6 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d007      	beq.n	80042f6 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2208      	movs	r2, #8
 80042ec:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00c      	beq.n	800433a <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	2b00      	cmp	r3, #0
 8004328:	d007      	beq.n	800433a <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2210      	movs	r2, #16
 8004330:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00c      	beq.n	800435e <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d007      	beq.n	800435e <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2208      	movs	r2, #8
 8004354:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d07b      	beq.n	8004460 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b00      	cmp	r3, #0
 8004370:	d072      	beq.n	8004458 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	f043 0302 	orr.w	r3, r3, #2
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	f043 0304 	orr.w	r3, r3, #4
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d043      	beq.n	8004458 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d03e      	beq.n	8004458 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043e0:	2b60      	cmp	r3, #96	; 0x60
 80043e2:	d02b      	beq.n	800443c <HAL_CAN_IRQHandler+0x344>
 80043e4:	2b60      	cmp	r3, #96	; 0x60
 80043e6:	d82e      	bhi.n	8004446 <HAL_CAN_IRQHandler+0x34e>
 80043e8:	2b50      	cmp	r3, #80	; 0x50
 80043ea:	d022      	beq.n	8004432 <HAL_CAN_IRQHandler+0x33a>
 80043ec:	2b50      	cmp	r3, #80	; 0x50
 80043ee:	d82a      	bhi.n	8004446 <HAL_CAN_IRQHandler+0x34e>
 80043f0:	2b40      	cmp	r3, #64	; 0x40
 80043f2:	d019      	beq.n	8004428 <HAL_CAN_IRQHandler+0x330>
 80043f4:	2b40      	cmp	r3, #64	; 0x40
 80043f6:	d826      	bhi.n	8004446 <HAL_CAN_IRQHandler+0x34e>
 80043f8:	2b30      	cmp	r3, #48	; 0x30
 80043fa:	d010      	beq.n	800441e <HAL_CAN_IRQHandler+0x326>
 80043fc:	2b30      	cmp	r3, #48	; 0x30
 80043fe:	d822      	bhi.n	8004446 <HAL_CAN_IRQHandler+0x34e>
 8004400:	2b10      	cmp	r3, #16
 8004402:	d002      	beq.n	800440a <HAL_CAN_IRQHandler+0x312>
 8004404:	2b20      	cmp	r3, #32
 8004406:	d005      	beq.n	8004414 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004408:	e01d      	b.n	8004446 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	f043 0308 	orr.w	r3, r3, #8
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004412:	e019      	b.n	8004448 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	f043 0310 	orr.w	r3, r3, #16
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800441c:	e014      	b.n	8004448 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	f043 0320 	orr.w	r3, r3, #32
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004426:	e00f      	b.n	8004448 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004430:	e00a      	b.n	8004448 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800443a:	e005      	b.n	8004448 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004444:	e000      	b.n	8004448 <HAL_CAN_IRQHandler+0x350>
            break;
 8004446:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699a      	ldr	r2, [r3, #24]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004456:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2204      	movs	r2, #4
 800445e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800447a:	bf00      	nop
 800447c:	3728      	adds	r7, #40	; 0x28
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
	...

08004574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004584:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004590:	4013      	ands	r3, r2
 8004592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800459c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045a6:	4a04      	ldr	r2, [pc, #16]	; (80045b8 <__NVIC_SetPriorityGrouping+0x44>)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	60d3      	str	r3, [r2, #12]
}
 80045ac:	bf00      	nop
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	e000ed00 	.word	0xe000ed00

080045bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045c0:	4b04      	ldr	r3, [pc, #16]	; (80045d4 <__NVIC_GetPriorityGrouping+0x18>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	0a1b      	lsrs	r3, r3, #8
 80045c6:	f003 0307 	and.w	r3, r3, #7
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	e000ed00 	.word	0xe000ed00

080045d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	db0b      	blt.n	8004602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	f003 021f 	and.w	r2, r3, #31
 80045f0:	4907      	ldr	r1, [pc, #28]	; (8004610 <__NVIC_EnableIRQ+0x38>)
 80045f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	2001      	movs	r0, #1
 80045fa:	fa00 f202 	lsl.w	r2, r0, r2
 80045fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	e000e100 	.word	0xe000e100

08004614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	6039      	str	r1, [r7, #0]
 800461e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004624:	2b00      	cmp	r3, #0
 8004626:	db0a      	blt.n	800463e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	b2da      	uxtb	r2, r3
 800462c:	490c      	ldr	r1, [pc, #48]	; (8004660 <__NVIC_SetPriority+0x4c>)
 800462e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004632:	0112      	lsls	r2, r2, #4
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	440b      	add	r3, r1
 8004638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800463c:	e00a      	b.n	8004654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	b2da      	uxtb	r2, r3
 8004642:	4908      	ldr	r1, [pc, #32]	; (8004664 <__NVIC_SetPriority+0x50>)
 8004644:	79fb      	ldrb	r3, [r7, #7]
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	3b04      	subs	r3, #4
 800464c:	0112      	lsls	r2, r2, #4
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	440b      	add	r3, r1
 8004652:	761a      	strb	r2, [r3, #24]
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	e000e100 	.word	0xe000e100
 8004664:	e000ed00 	.word	0xe000ed00

08004668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004668:	b480      	push	{r7}
 800466a:	b089      	sub	sp, #36	; 0x24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	f1c3 0307 	rsb	r3, r3, #7
 8004682:	2b04      	cmp	r3, #4
 8004684:	bf28      	it	cs
 8004686:	2304      	movcs	r3, #4
 8004688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	3304      	adds	r3, #4
 800468e:	2b06      	cmp	r3, #6
 8004690:	d902      	bls.n	8004698 <NVIC_EncodePriority+0x30>
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	3b03      	subs	r3, #3
 8004696:	e000      	b.n	800469a <NVIC_EncodePriority+0x32>
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800469c:	f04f 32ff 	mov.w	r2, #4294967295
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43da      	mvns	r2, r3
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	401a      	ands	r2, r3
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046b0:	f04f 31ff 	mov.w	r1, #4294967295
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ba:	43d9      	mvns	r1, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c0:	4313      	orrs	r3, r2
         );
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3724      	adds	r7, #36	; 0x24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
	...

080046d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b07      	cmp	r3, #7
 80046dc:	d00f      	beq.n	80046fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b06      	cmp	r3, #6
 80046e2:	d00c      	beq.n	80046fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b05      	cmp	r3, #5
 80046e8:	d009      	beq.n	80046fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d006      	beq.n	80046fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b03      	cmp	r3, #3
 80046f4:	d003      	beq.n	80046fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80046f6:	2190      	movs	r1, #144	; 0x90
 80046f8:	4804      	ldr	r0, [pc, #16]	; (800470c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80046fa:	f7fd ff80 	bl	80025fe <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7ff ff38 	bl	8004574 <__NVIC_SetPriorityGrouping>
}
 8004704:	bf00      	nop
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	0800bad4 	.word	0x0800bad4

08004710 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b0f      	cmp	r3, #15
 8004726:	d903      	bls.n	8004730 <HAL_NVIC_SetPriority+0x20>
 8004728:	21a8      	movs	r1, #168	; 0xa8
 800472a:	480e      	ldr	r0, [pc, #56]	; (8004764 <HAL_NVIC_SetPriority+0x54>)
 800472c:	f7fd ff67 	bl	80025fe <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b0f      	cmp	r3, #15
 8004734:	d903      	bls.n	800473e <HAL_NVIC_SetPriority+0x2e>
 8004736:	21a9      	movs	r1, #169	; 0xa9
 8004738:	480a      	ldr	r0, [pc, #40]	; (8004764 <HAL_NVIC_SetPriority+0x54>)
 800473a:	f7fd ff60 	bl	80025fe <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800473e:	f7ff ff3d 	bl	80045bc <__NVIC_GetPriorityGrouping>
 8004742:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	68b9      	ldr	r1, [r7, #8]
 8004748:	6978      	ldr	r0, [r7, #20]
 800474a:	f7ff ff8d 	bl	8004668 <NVIC_EncodePriority>
 800474e:	4602      	mov	r2, r0
 8004750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004754:	4611      	mov	r1, r2
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff ff5c 	bl	8004614 <__NVIC_SetPriority>
}
 800475c:	bf00      	nop
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	0800bad4 	.word	0x0800bad4

08004768 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	4603      	mov	r3, r0
 8004770:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8004772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004776:	2b00      	cmp	r3, #0
 8004778:	da03      	bge.n	8004782 <HAL_NVIC_EnableIRQ+0x1a>
 800477a:	21bc      	movs	r1, #188	; 0xbc
 800477c:	4805      	ldr	r0, [pc, #20]	; (8004794 <HAL_NVIC_EnableIRQ+0x2c>)
 800477e:	f7fd ff3e 	bl	80025fe <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff ff26 	bl	80045d8 <__NVIC_EnableIRQ>
}
 800478c:	bf00      	nop
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	0800bad4 	.word	0x0800bad4

08004798 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047a4:	f7fe fa4e 	bl	8002c44 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e203      	b.n	8004bbc <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a8b      	ldr	r2, [pc, #556]	; (80049e8 <HAL_DMA_Init+0x250>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d04e      	beq.n	800485c <HAL_DMA_Init+0xc4>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a8a      	ldr	r2, [pc, #552]	; (80049ec <HAL_DMA_Init+0x254>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d049      	beq.n	800485c <HAL_DMA_Init+0xc4>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a88      	ldr	r2, [pc, #544]	; (80049f0 <HAL_DMA_Init+0x258>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d044      	beq.n	800485c <HAL_DMA_Init+0xc4>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a87      	ldr	r2, [pc, #540]	; (80049f4 <HAL_DMA_Init+0x25c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d03f      	beq.n	800485c <HAL_DMA_Init+0xc4>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a85      	ldr	r2, [pc, #532]	; (80049f8 <HAL_DMA_Init+0x260>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d03a      	beq.n	800485c <HAL_DMA_Init+0xc4>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a84      	ldr	r2, [pc, #528]	; (80049fc <HAL_DMA_Init+0x264>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d035      	beq.n	800485c <HAL_DMA_Init+0xc4>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a82      	ldr	r2, [pc, #520]	; (8004a00 <HAL_DMA_Init+0x268>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d030      	beq.n	800485c <HAL_DMA_Init+0xc4>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a81      	ldr	r2, [pc, #516]	; (8004a04 <HAL_DMA_Init+0x26c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d02b      	beq.n	800485c <HAL_DMA_Init+0xc4>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a7f      	ldr	r2, [pc, #508]	; (8004a08 <HAL_DMA_Init+0x270>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d026      	beq.n	800485c <HAL_DMA_Init+0xc4>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a7e      	ldr	r2, [pc, #504]	; (8004a0c <HAL_DMA_Init+0x274>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d021      	beq.n	800485c <HAL_DMA_Init+0xc4>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a7c      	ldr	r2, [pc, #496]	; (8004a10 <HAL_DMA_Init+0x278>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d01c      	beq.n	800485c <HAL_DMA_Init+0xc4>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a7b      	ldr	r2, [pc, #492]	; (8004a14 <HAL_DMA_Init+0x27c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d017      	beq.n	800485c <HAL_DMA_Init+0xc4>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a79      	ldr	r2, [pc, #484]	; (8004a18 <HAL_DMA_Init+0x280>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d012      	beq.n	800485c <HAL_DMA_Init+0xc4>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a78      	ldr	r2, [pc, #480]	; (8004a1c <HAL_DMA_Init+0x284>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00d      	beq.n	800485c <HAL_DMA_Init+0xc4>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a76      	ldr	r2, [pc, #472]	; (8004a20 <HAL_DMA_Init+0x288>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d008      	beq.n	800485c <HAL_DMA_Init+0xc4>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a75      	ldr	r2, [pc, #468]	; (8004a24 <HAL_DMA_Init+0x28c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d003      	beq.n	800485c <HAL_DMA_Init+0xc4>
 8004854:	21b7      	movs	r1, #183	; 0xb7
 8004856:	4874      	ldr	r0, [pc, #464]	; (8004a28 <HAL_DMA_Init+0x290>)
 8004858:	f7fd fed1 	bl	80025fe <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d026      	beq.n	80048b2 <HAL_DMA_Init+0x11a>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800486c:	d021      	beq.n	80048b2 <HAL_DMA_Init+0x11a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004876:	d01c      	beq.n	80048b2 <HAL_DMA_Init+0x11a>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004880:	d017      	beq.n	80048b2 <HAL_DMA_Init+0x11a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800488a:	d012      	beq.n	80048b2 <HAL_DMA_Init+0x11a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8004894:	d00d      	beq.n	80048b2 <HAL_DMA_Init+0x11a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800489e:	d008      	beq.n	80048b2 <HAL_DMA_Init+0x11a>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80048a8:	d003      	beq.n	80048b2 <HAL_DMA_Init+0x11a>
 80048aa:	21b8      	movs	r1, #184	; 0xb8
 80048ac:	485e      	ldr	r0, [pc, #376]	; (8004a28 <HAL_DMA_Init+0x290>)
 80048ae:	f7fd fea6 	bl	80025fe <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00b      	beq.n	80048d2 <HAL_DMA_Init+0x13a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2b40      	cmp	r3, #64	; 0x40
 80048c0:	d007      	beq.n	80048d2 <HAL_DMA_Init+0x13a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2b80      	cmp	r3, #128	; 0x80
 80048c8:	d003      	beq.n	80048d2 <HAL_DMA_Init+0x13a>
 80048ca:	21b9      	movs	r1, #185	; 0xb9
 80048cc:	4856      	ldr	r0, [pc, #344]	; (8004a28 <HAL_DMA_Init+0x290>)
 80048ce:	f7fd fe96 	bl	80025fe <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048da:	d007      	beq.n	80048ec <HAL_DMA_Init+0x154>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <HAL_DMA_Init+0x154>
 80048e4:	21ba      	movs	r1, #186	; 0xba
 80048e6:	4850      	ldr	r0, [pc, #320]	; (8004a28 <HAL_DMA_Init+0x290>)
 80048e8:	f7fd fe89 	bl	80025fe <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f4:	d007      	beq.n	8004906 <HAL_DMA_Init+0x16e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_DMA_Init+0x16e>
 80048fe:	21bb      	movs	r1, #187	; 0xbb
 8004900:	4849      	ldr	r0, [pc, #292]	; (8004a28 <HAL_DMA_Init+0x290>)
 8004902:	f7fd fe7c 	bl	80025fe <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00d      	beq.n	800492a <HAL_DMA_Init+0x192>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004916:	d008      	beq.n	800492a <HAL_DMA_Init+0x192>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004920:	d003      	beq.n	800492a <HAL_DMA_Init+0x192>
 8004922:	21bc      	movs	r1, #188	; 0xbc
 8004924:	4840      	ldr	r0, [pc, #256]	; (8004a28 <HAL_DMA_Init+0x290>)
 8004926:	f7fd fe6a 	bl	80025fe <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00d      	beq.n	800494e <HAL_DMA_Init+0x1b6>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800493a:	d008      	beq.n	800494e <HAL_DMA_Init+0x1b6>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004944:	d003      	beq.n	800494e <HAL_DMA_Init+0x1b6>
 8004946:	21bd      	movs	r1, #189	; 0xbd
 8004948:	4837      	ldr	r0, [pc, #220]	; (8004a28 <HAL_DMA_Init+0x290>)
 800494a:	f7fd fe58 	bl	80025fe <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00c      	beq.n	8004970 <HAL_DMA_Init+0x1d8>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800495e:	d007      	beq.n	8004970 <HAL_DMA_Init+0x1d8>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	2b20      	cmp	r3, #32
 8004966:	d003      	beq.n	8004970 <HAL_DMA_Init+0x1d8>
 8004968:	21be      	movs	r1, #190	; 0xbe
 800496a:	482f      	ldr	r0, [pc, #188]	; (8004a28 <HAL_DMA_Init+0x290>)
 800496c:	f7fd fe47 	bl	80025fe <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d012      	beq.n	800499e <HAL_DMA_Init+0x206>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004980:	d00d      	beq.n	800499e <HAL_DMA_Init+0x206>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800498a:	d008      	beq.n	800499e <HAL_DMA_Init+0x206>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004994:	d003      	beq.n	800499e <HAL_DMA_Init+0x206>
 8004996:	21bf      	movs	r1, #191	; 0xbf
 8004998:	4823      	ldr	r0, [pc, #140]	; (8004a28 <HAL_DMA_Init+0x290>)
 800499a:	f7fd fe30 	bl	80025fe <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <HAL_DMA_Init+0x21e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d003      	beq.n	80049b6 <HAL_DMA_Init+0x21e>
 80049ae:	21c0      	movs	r1, #192	; 0xc0
 80049b0:	481d      	ldr	r0, [pc, #116]	; (8004a28 <HAL_DMA_Init+0x290>)
 80049b2:	f7fd fe24 	bl	80025fe <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d064      	beq.n	8004a88 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d032      	beq.n	8004a2c <HAL_DMA_Init+0x294>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d02e      	beq.n	8004a2c <HAL_DMA_Init+0x294>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d02a      	beq.n	8004a2c <HAL_DMA_Init+0x294>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d026      	beq.n	8004a2c <HAL_DMA_Init+0x294>
 80049de:	21c5      	movs	r1, #197	; 0xc5
 80049e0:	4811      	ldr	r0, [pc, #68]	; (8004a28 <HAL_DMA_Init+0x290>)
 80049e2:	f7fd fe0c 	bl	80025fe <assert_failed>
 80049e6:	e021      	b.n	8004a2c <HAL_DMA_Init+0x294>
 80049e8:	40026010 	.word	0x40026010
 80049ec:	40026028 	.word	0x40026028
 80049f0:	40026040 	.word	0x40026040
 80049f4:	40026058 	.word	0x40026058
 80049f8:	40026070 	.word	0x40026070
 80049fc:	40026088 	.word	0x40026088
 8004a00:	400260a0 	.word	0x400260a0
 8004a04:	400260b8 	.word	0x400260b8
 8004a08:	40026410 	.word	0x40026410
 8004a0c:	40026428 	.word	0x40026428
 8004a10:	40026440 	.word	0x40026440
 8004a14:	40026458 	.word	0x40026458
 8004a18:	40026470 	.word	0x40026470
 8004a1c:	40026488 	.word	0x40026488
 8004a20:	400264a0 	.word	0x400264a0
 8004a24:	400264b8 	.word	0x400264b8
 8004a28:	0800bb10 	.word	0x0800bb10
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d012      	beq.n	8004a5a <HAL_DMA_Init+0x2c2>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a3c:	d00d      	beq.n	8004a5a <HAL_DMA_Init+0x2c2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a46:	d008      	beq.n	8004a5a <HAL_DMA_Init+0x2c2>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a50:	d003      	beq.n	8004a5a <HAL_DMA_Init+0x2c2>
 8004a52:	21c6      	movs	r1, #198	; 0xc6
 8004a54:	485b      	ldr	r0, [pc, #364]	; (8004bc4 <HAL_DMA_Init+0x42c>)
 8004a56:	f7fd fdd2 	bl	80025fe <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d012      	beq.n	8004a88 <HAL_DMA_Init+0x2f0>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a6a:	d00d      	beq.n	8004a88 <HAL_DMA_Init+0x2f0>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a74:	d008      	beq.n	8004a88 <HAL_DMA_Init+0x2f0>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a7e:	d003      	beq.n	8004a88 <HAL_DMA_Init+0x2f0>
 8004a80:	21c7      	movs	r1, #199	; 0xc7
 8004a82:	4850      	ldr	r0, [pc, #320]	; (8004bc4 <HAL_DMA_Init+0x42c>)
 8004a84:	f7fd fdbb 	bl	80025fe <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0201 	bic.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004aa8:	e00f      	b.n	8004aca <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004aaa:	f7fe f8cb 	bl	8002c44 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b05      	cmp	r3, #5
 8004ab6:	d908      	bls.n	8004aca <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2220      	movs	r2, #32
 8004abc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2203      	movs	r2, #3
 8004ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e078      	b.n	8004bbc <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e8      	bne.n	8004aaa <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	4b39      	ldr	r3, [pc, #228]	; (8004bc8 <HAL_DMA_Init+0x430>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d107      	bne.n	8004b34 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f023 0307 	bic.w	r3, r3, #7
 8004b4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d117      	bne.n	8004b8e <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00e      	beq.n	8004b8e <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fa1b 	bl	8004fac <DMA_CheckFifoParam>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2240      	movs	r2, #64	; 0x40
 8004b80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e016      	b.n	8004bbc <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f9d2 	bl	8004f40 <DMA_CalcBaseAndBitshift>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba4:	223f      	movs	r2, #63	; 0x3f
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	0800bb10 	.word	0x0800bb10
 8004bc8:	f010803f 	.word	0xf010803f

08004bcc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d004      	beq.n	8004bea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2280      	movs	r2, #128	; 0x80
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e00c      	b.n	8004c04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2205      	movs	r2, #5
 8004bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0201 	bic.w	r2, r2, #1
 8004c00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c1c:	4b8e      	ldr	r3, [pc, #568]	; (8004e58 <HAL_DMA_IRQHandler+0x248>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a8e      	ldr	r2, [pc, #568]	; (8004e5c <HAL_DMA_IRQHandler+0x24c>)
 8004c22:	fba2 2303 	umull	r2, r3, r2, r3
 8004c26:	0a9b      	lsrs	r3, r3, #10
 8004c28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3a:	2208      	movs	r2, #8
 8004c3c:	409a      	lsls	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4013      	ands	r3, r2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d01a      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d013      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f022 0204 	bic.w	r2, r2, #4
 8004c62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c68:	2208      	movs	r2, #8
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c74:	f043 0201 	orr.w	r2, r3, #1
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c80:	2201      	movs	r2, #1
 8004c82:	409a      	lsls	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4013      	ands	r3, r2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d012      	beq.n	8004cb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00b      	beq.n	8004cb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	409a      	lsls	r2, r3
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004caa:	f043 0202 	orr.w	r2, r3, #2
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb6:	2204      	movs	r2, #4
 8004cb8:	409a      	lsls	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d012      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00b      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd4:	2204      	movs	r2, #4
 8004cd6:	409a      	lsls	r2, r3
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce0:	f043 0204 	orr.w	r2, r3, #4
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cec:	2210      	movs	r2, #16
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d043      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d03c      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d0a:	2210      	movs	r2, #16
 8004d0c:	409a      	lsls	r2, r3
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d018      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d108      	bne.n	8004d40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d024      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	4798      	blx	r3
 8004d3e:	e01f      	b.n	8004d80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01b      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	4798      	blx	r3
 8004d50:	e016      	b.n	8004d80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d107      	bne.n	8004d70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0208 	bic.w	r2, r2, #8
 8004d6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d84:	2220      	movs	r2, #32
 8004d86:	409a      	lsls	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 808f 	beq.w	8004eb0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8087 	beq.w	8004eb0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da6:	2220      	movs	r2, #32
 8004da8:	409a      	lsls	r2, r3
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b05      	cmp	r3, #5
 8004db8:	d136      	bne.n	8004e28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0216 	bic.w	r2, r2, #22
 8004dc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695a      	ldr	r2, [r3, #20]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d103      	bne.n	8004dea <HAL_DMA_IRQHandler+0x1da>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0208 	bic.w	r2, r2, #8
 8004df8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dfe:	223f      	movs	r2, #63	; 0x3f
 8004e00:	409a      	lsls	r2, r3
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d07e      	beq.n	8004f1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	4798      	blx	r3
        }
        return;
 8004e26:	e079      	b.n	8004f1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d01d      	beq.n	8004e72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10d      	bne.n	8004e60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d031      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	4798      	blx	r3
 8004e54:	e02c      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x2a0>
 8004e56:	bf00      	nop
 8004e58:	20000040 	.word	0x20000040
 8004e5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d023      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	4798      	blx	r3
 8004e70:	e01e      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10f      	bne.n	8004ea0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0210 	bic.w	r2, r2, #16
 8004e8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d032      	beq.n	8004f1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d022      	beq.n	8004f0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2205      	movs	r2, #5
 8004ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0201 	bic.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	60bb      	str	r3, [r7, #8]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d307      	bcc.n	8004ef8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f2      	bne.n	8004edc <HAL_DMA_IRQHandler+0x2cc>
 8004ef6:	e000      	b.n	8004efa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ef8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d005      	beq.n	8004f1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	4798      	blx	r3
 8004f1a:	e000      	b.n	8004f1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f1c:	bf00      	nop
    }
  }
}
 8004f1e:	3718      	adds	r7, #24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f32:	b2db      	uxtb	r3, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	3b10      	subs	r3, #16
 8004f50:	4a14      	ldr	r2, [pc, #80]	; (8004fa4 <DMA_CalcBaseAndBitshift+0x64>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	091b      	lsrs	r3, r3, #4
 8004f58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f5a:	4a13      	ldr	r2, [pc, #76]	; (8004fa8 <DMA_CalcBaseAndBitshift+0x68>)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4413      	add	r3, r2
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d909      	bls.n	8004f82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f76:	f023 0303 	bic.w	r3, r3, #3
 8004f7a:	1d1a      	adds	r2, r3, #4
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	659a      	str	r2, [r3, #88]	; 0x58
 8004f80:	e007      	b.n	8004f92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f8a:	f023 0303 	bic.w	r3, r3, #3
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	aaaaaaab 	.word	0xaaaaaaab
 8004fa8:	0800bcc0 	.word	0x0800bcc0

08004fac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d11f      	bne.n	8005006 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d856      	bhi.n	800507a <DMA_CheckFifoParam+0xce>
 8004fcc:	a201      	add	r2, pc, #4	; (adr r2, 8004fd4 <DMA_CheckFifoParam+0x28>)
 8004fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd2:	bf00      	nop
 8004fd4:	08004fe5 	.word	0x08004fe5
 8004fd8:	08004ff7 	.word	0x08004ff7
 8004fdc:	08004fe5 	.word	0x08004fe5
 8004fe0:	0800507b 	.word	0x0800507b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d046      	beq.n	800507e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ff4:	e043      	b.n	800507e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ffe:	d140      	bne.n	8005082 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005004:	e03d      	b.n	8005082 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800500e:	d121      	bne.n	8005054 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b03      	cmp	r3, #3
 8005014:	d837      	bhi.n	8005086 <DMA_CheckFifoParam+0xda>
 8005016:	a201      	add	r2, pc, #4	; (adr r2, 800501c <DMA_CheckFifoParam+0x70>)
 8005018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501c:	0800502d 	.word	0x0800502d
 8005020:	08005033 	.word	0x08005033
 8005024:	0800502d 	.word	0x0800502d
 8005028:	08005045 	.word	0x08005045
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	73fb      	strb	r3, [r7, #15]
      break;
 8005030:	e030      	b.n	8005094 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d025      	beq.n	800508a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005042:	e022      	b.n	800508a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800504c:	d11f      	bne.n	800508e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005052:	e01c      	b.n	800508e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d903      	bls.n	8005062 <DMA_CheckFifoParam+0xb6>
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2b03      	cmp	r3, #3
 800505e:	d003      	beq.n	8005068 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005060:	e018      	b.n	8005094 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	73fb      	strb	r3, [r7, #15]
      break;
 8005066:	e015      	b.n	8005094 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00e      	beq.n	8005092 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]
      break;
 8005078:	e00b      	b.n	8005092 <DMA_CheckFifoParam+0xe6>
      break;
 800507a:	bf00      	nop
 800507c:	e00a      	b.n	8005094 <DMA_CheckFifoParam+0xe8>
      break;
 800507e:	bf00      	nop
 8005080:	e008      	b.n	8005094 <DMA_CheckFifoParam+0xe8>
      break;
 8005082:	bf00      	nop
 8005084:	e006      	b.n	8005094 <DMA_CheckFifoParam+0xe8>
      break;
 8005086:	bf00      	nop
 8005088:	e004      	b.n	8005094 <DMA_CheckFifoParam+0xe8>
      break;
 800508a:	bf00      	nop
 800508c:	e002      	b.n	8005094 <DMA_CheckFifoParam+0xe8>
      break;   
 800508e:	bf00      	nop
 8005090:	e000      	b.n	8005094 <DMA_CheckFifoParam+0xe8>
      break;
 8005092:	bf00      	nop
    }
  } 
  
  return status; 
 8005094:	7bfb      	ldrb	r3, [r7, #15]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop

080050a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a37      	ldr	r2, [pc, #220]	; (800519c <HAL_GPIO_Init+0xf8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d01f      	beq.n	8005102 <HAL_GPIO_Init+0x5e>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a36      	ldr	r2, [pc, #216]	; (80051a0 <HAL_GPIO_Init+0xfc>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d01b      	beq.n	8005102 <HAL_GPIO_Init+0x5e>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a35      	ldr	r2, [pc, #212]	; (80051a4 <HAL_GPIO_Init+0x100>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d017      	beq.n	8005102 <HAL_GPIO_Init+0x5e>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a34      	ldr	r2, [pc, #208]	; (80051a8 <HAL_GPIO_Init+0x104>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d013      	beq.n	8005102 <HAL_GPIO_Init+0x5e>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a33      	ldr	r2, [pc, #204]	; (80051ac <HAL_GPIO_Init+0x108>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00f      	beq.n	8005102 <HAL_GPIO_Init+0x5e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a32      	ldr	r2, [pc, #200]	; (80051b0 <HAL_GPIO_Init+0x10c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00b      	beq.n	8005102 <HAL_GPIO_Init+0x5e>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a31      	ldr	r2, [pc, #196]	; (80051b4 <HAL_GPIO_Init+0x110>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d007      	beq.n	8005102 <HAL_GPIO_Init+0x5e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a30      	ldr	r2, [pc, #192]	; (80051b8 <HAL_GPIO_Init+0x114>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d003      	beq.n	8005102 <HAL_GPIO_Init+0x5e>
 80050fa:	21ac      	movs	r1, #172	; 0xac
 80050fc:	482f      	ldr	r0, [pc, #188]	; (80051bc <HAL_GPIO_Init+0x118>)
 80050fe:	f7fd fa7e 	bl	80025fe <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	b29b      	uxth	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <HAL_GPIO_Init+0x74>
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	0c1b      	lsrs	r3, r3, #16
 8005112:	041b      	lsls	r3, r3, #16
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <HAL_GPIO_Init+0x7c>
 8005118:	21ad      	movs	r1, #173	; 0xad
 800511a:	4828      	ldr	r0, [pc, #160]	; (80051bc <HAL_GPIO_Init+0x118>)
 800511c:	f7fd fa6f 	bl	80025fe <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d035      	beq.n	8005194 <HAL_GPIO_Init+0xf0>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d031      	beq.n	8005194 <HAL_GPIO_Init+0xf0>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2b11      	cmp	r3, #17
 8005136:	d02d      	beq.n	8005194 <HAL_GPIO_Init+0xf0>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b02      	cmp	r3, #2
 800513e:	d029      	beq.n	8005194 <HAL_GPIO_Init+0xf0>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b12      	cmp	r3, #18
 8005146:	d025      	beq.n	8005194 <HAL_GPIO_Init+0xf0>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005150:	d020      	beq.n	8005194 <HAL_GPIO_Init+0xf0>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800515a:	d01b      	beq.n	8005194 <HAL_GPIO_Init+0xf0>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8005164:	d016      	beq.n	8005194 <HAL_GPIO_Init+0xf0>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800516e:	d011      	beq.n	8005194 <HAL_GPIO_Init+0xf0>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8005178:	d00c      	beq.n	8005194 <HAL_GPIO_Init+0xf0>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8005182:	d007      	beq.n	8005194 <HAL_GPIO_Init+0xf0>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2b03      	cmp	r3, #3
 800518a:	d003      	beq.n	8005194 <HAL_GPIO_Init+0xf0>
 800518c:	21ae      	movs	r1, #174	; 0xae
 800518e:	480b      	ldr	r0, [pc, #44]	; (80051bc <HAL_GPIO_Init+0x118>)
 8005190:	f7fd fa35 	bl	80025fe <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005194:	2300      	movs	r3, #0
 8005196:	61fb      	str	r3, [r7, #28]
 8005198:	e289      	b.n	80056ae <HAL_GPIO_Init+0x60a>
 800519a:	bf00      	nop
 800519c:	40020000 	.word	0x40020000
 80051a0:	40020400 	.word	0x40020400
 80051a4:	40020800 	.word	0x40020800
 80051a8:	40020c00 	.word	0x40020c00
 80051ac:	40021000 	.word	0x40021000
 80051b0:	40021400 	.word	0x40021400
 80051b4:	40021800 	.word	0x40021800
 80051b8:	40021c00 	.word	0x40021c00
 80051bc:	0800bb48 	.word	0x0800bb48
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051c0:	2201      	movs	r2, #1
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	4013      	ands	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	429a      	cmp	r2, r3
 80051da:	f040 8265 	bne.w	80056a8 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d005      	beq.n	80051f6 <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d144      	bne.n	8005280 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00f      	beq.n	800521e <HAL_GPIO_Init+0x17a>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d00b      	beq.n	800521e <HAL_GPIO_Init+0x17a>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d007      	beq.n	800521e <HAL_GPIO_Init+0x17a>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	2b03      	cmp	r3, #3
 8005214:	d003      	beq.n	800521e <HAL_GPIO_Init+0x17a>
 8005216:	21c0      	movs	r1, #192	; 0xc0
 8005218:	4831      	ldr	r0, [pc, #196]	; (80052e0 <HAL_GPIO_Init+0x23c>)
 800521a:	f7fd f9f0 	bl	80025fe <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	005b      	lsls	r3, r3, #1
 8005228:	2203      	movs	r2, #3
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	43db      	mvns	r3, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4013      	ands	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	4313      	orrs	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005254:	2201      	movs	r2, #1
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	43db      	mvns	r3, r3
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	4013      	ands	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	091b      	lsrs	r3, r3, #4
 800526a:	f003 0201 	and.w	r2, r3, #1
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	4313      	orrs	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	2b03      	cmp	r3, #3
 800528a:	d02b      	beq.n	80052e4 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00b      	beq.n	80052ac <HAL_GPIO_Init+0x208>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d007      	beq.n	80052ac <HAL_GPIO_Init+0x208>
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d003      	beq.n	80052ac <HAL_GPIO_Init+0x208>
 80052a4:	21d1      	movs	r1, #209	; 0xd1
 80052a6:	480e      	ldr	r0, [pc, #56]	; (80052e0 <HAL_GPIO_Init+0x23c>)
 80052a8:	f7fd f9a9 	bl	80025fe <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	2203      	movs	r2, #3
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	43db      	mvns	r3, r3
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	4013      	ands	r3, r2
 80052c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	005b      	lsls	r3, r3, #1
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	60da      	str	r2, [r3, #12]
 80052dc:	e002      	b.n	80052e4 <HAL_GPIO_Init+0x240>
 80052de:	bf00      	nop
 80052e0:	0800bb48 	.word	0x0800bb48
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f003 0303 	and.w	r3, r3, #3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	f040 810c 	bne.w	800550a <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 80e3 	beq.w	80054c2 <HAL_GPIO_Init+0x41e>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	2b09      	cmp	r3, #9
 8005302:	f000 80de 	beq.w	80054c2 <HAL_GPIO_Init+0x41e>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 80d9 	beq.w	80054c2 <HAL_GPIO_Init+0x41e>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 80d4 	beq.w	80054c2 <HAL_GPIO_Init+0x41e>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 80cf 	beq.w	80054c2 <HAL_GPIO_Init+0x41e>
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 80ca 	beq.w	80054c2 <HAL_GPIO_Init+0x41e>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	2b01      	cmp	r3, #1
 8005334:	f000 80c5 	beq.w	80054c2 <HAL_GPIO_Init+0x41e>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	2b01      	cmp	r3, #1
 800533e:	f000 80c0 	beq.w	80054c2 <HAL_GPIO_Init+0x41e>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b02      	cmp	r3, #2
 8005348:	f000 80bb 	beq.w	80054c2 <HAL_GPIO_Init+0x41e>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	2b02      	cmp	r3, #2
 8005352:	f000 80b6 	beq.w	80054c2 <HAL_GPIO_Init+0x41e>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b02      	cmp	r3, #2
 800535c:	f000 80b1 	beq.w	80054c2 <HAL_GPIO_Init+0x41e>
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	2b03      	cmp	r3, #3
 8005366:	f000 80ac 	beq.w	80054c2 <HAL_GPIO_Init+0x41e>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	2b04      	cmp	r3, #4
 8005370:	f000 80a7 	beq.w	80054c2 <HAL_GPIO_Init+0x41e>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	2b04      	cmp	r3, #4
 800537a:	f000 80a2 	beq.w	80054c2 <HAL_GPIO_Init+0x41e>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b04      	cmp	r3, #4
 8005384:	f000 809d 	beq.w	80054c2 <HAL_GPIO_Init+0x41e>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	2b05      	cmp	r3, #5
 800538e:	f000 8098 	beq.w	80054c2 <HAL_GPIO_Init+0x41e>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	2b05      	cmp	r3, #5
 8005398:	f000 8093 	beq.w	80054c2 <HAL_GPIO_Init+0x41e>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	2b09      	cmp	r3, #9
 80053a2:	f000 808e 	beq.w	80054c2 <HAL_GPIO_Init+0x41e>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b06      	cmp	r3, #6
 80053ac:	f000 8089 	beq.w	80054c2 <HAL_GPIO_Init+0x41e>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	2b09      	cmp	r3, #9
 80053b6:	f000 8084 	beq.w	80054c2 <HAL_GPIO_Init+0x41e>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b07      	cmp	r3, #7
 80053c0:	d07f      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b07      	cmp	r3, #7
 80053c8:	d07b      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	2b07      	cmp	r3, #7
 80053d0:	d077      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	d073      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	2b08      	cmp	r3, #8
 80053e0:	d06f      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d06b      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b09      	cmp	r3, #9
 80053f0:	d067      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b09      	cmp	r3, #9
 80053f8:	d063      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	2b0a      	cmp	r3, #10
 8005400:	d05f      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b0a      	cmp	r3, #10
 8005408:	d05b      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	2b0b      	cmp	r3, #11
 8005410:	d057      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	2b0c      	cmp	r3, #12
 8005418:	d053      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b0c      	cmp	r3, #12
 8005420:	d04f      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	2b0d      	cmp	r3, #13
 8005428:	d04b      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	2b0f      	cmp	r3, #15
 8005430:	d047      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	2b05      	cmp	r3, #5
 8005438:	d043      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	2b0c      	cmp	r3, #12
 8005440:	d03f      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	2b06      	cmp	r3, #6
 8005448:	d03b      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b03      	cmp	r3, #3
 8005450:	d037      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2b04      	cmp	r3, #4
 8005458:	d033      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	2b05      	cmp	r3, #5
 8005460:	d02f      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b06      	cmp	r3, #6
 8005468:	d02b      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	2b06      	cmp	r3, #6
 8005470:	d027      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b07      	cmp	r3, #7
 8005478:	d023      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	2b07      	cmp	r3, #7
 8005480:	d01f      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	2b07      	cmp	r3, #7
 8005488:	d01b      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	2b07      	cmp	r3, #7
 8005490:	d017      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	2b08      	cmp	r3, #8
 8005498:	d013      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b08      	cmp	r3, #8
 80054a0:	d00f      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2b09      	cmp	r3, #9
 80054a8:	d00b      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2b0a      	cmp	r3, #10
 80054b0:	d007      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	2b0a      	cmp	r3, #10
 80054b8:	d003      	beq.n	80054c2 <HAL_GPIO_Init+0x41e>
 80054ba:	21de      	movs	r1, #222	; 0xde
 80054bc:	4880      	ldr	r0, [pc, #512]	; (80056c0 <HAL_GPIO_Init+0x61c>)
 80054be:	f7fd f89e 	bl	80025fe <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	08da      	lsrs	r2, r3, #3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3208      	adds	r2, #8
 80054ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	220f      	movs	r2, #15
 80054da:	fa02 f303 	lsl.w	r3, r2, r3
 80054de:	43db      	mvns	r3, r3
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	4013      	ands	r3, r2
 80054e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	691a      	ldr	r2, [r3, #16]
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	fa02 f303 	lsl.w	r3, r2, r3
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	08da      	lsrs	r2, r3, #3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3208      	adds	r2, #8
 8005504:	69b9      	ldr	r1, [r7, #24]
 8005506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	2203      	movs	r2, #3
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	43db      	mvns	r3, r3
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	4013      	ands	r3, r2
 8005520:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f003 0203 	and.w	r2, r3, #3
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	4313      	orrs	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 80ae 	beq.w	80056a8 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800554c:	2300      	movs	r3, #0
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	4b5c      	ldr	r3, [pc, #368]	; (80056c4 <HAL_GPIO_Init+0x620>)
 8005552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005554:	4a5b      	ldr	r2, [pc, #364]	; (80056c4 <HAL_GPIO_Init+0x620>)
 8005556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800555a:	6453      	str	r3, [r2, #68]	; 0x44
 800555c:	4b59      	ldr	r3, [pc, #356]	; (80056c4 <HAL_GPIO_Init+0x620>)
 800555e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005568:	4a57      	ldr	r2, [pc, #348]	; (80056c8 <HAL_GPIO_Init+0x624>)
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	089b      	lsrs	r3, r3, #2
 800556e:	3302      	adds	r3, #2
 8005570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005574:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	220f      	movs	r2, #15
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	43db      	mvns	r3, r3
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	4013      	ands	r3, r2
 800558a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a4f      	ldr	r2, [pc, #316]	; (80056cc <HAL_GPIO_Init+0x628>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d025      	beq.n	80055e0 <HAL_GPIO_Init+0x53c>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a4e      	ldr	r2, [pc, #312]	; (80056d0 <HAL_GPIO_Init+0x62c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d01f      	beq.n	80055dc <HAL_GPIO_Init+0x538>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a4d      	ldr	r2, [pc, #308]	; (80056d4 <HAL_GPIO_Init+0x630>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d019      	beq.n	80055d8 <HAL_GPIO_Init+0x534>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a4c      	ldr	r2, [pc, #304]	; (80056d8 <HAL_GPIO_Init+0x634>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d013      	beq.n	80055d4 <HAL_GPIO_Init+0x530>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a4b      	ldr	r2, [pc, #300]	; (80056dc <HAL_GPIO_Init+0x638>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00d      	beq.n	80055d0 <HAL_GPIO_Init+0x52c>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a4a      	ldr	r2, [pc, #296]	; (80056e0 <HAL_GPIO_Init+0x63c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d007      	beq.n	80055cc <HAL_GPIO_Init+0x528>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a49      	ldr	r2, [pc, #292]	; (80056e4 <HAL_GPIO_Init+0x640>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d101      	bne.n	80055c8 <HAL_GPIO_Init+0x524>
 80055c4:	2306      	movs	r3, #6
 80055c6:	e00c      	b.n	80055e2 <HAL_GPIO_Init+0x53e>
 80055c8:	2307      	movs	r3, #7
 80055ca:	e00a      	b.n	80055e2 <HAL_GPIO_Init+0x53e>
 80055cc:	2305      	movs	r3, #5
 80055ce:	e008      	b.n	80055e2 <HAL_GPIO_Init+0x53e>
 80055d0:	2304      	movs	r3, #4
 80055d2:	e006      	b.n	80055e2 <HAL_GPIO_Init+0x53e>
 80055d4:	2303      	movs	r3, #3
 80055d6:	e004      	b.n	80055e2 <HAL_GPIO_Init+0x53e>
 80055d8:	2302      	movs	r3, #2
 80055da:	e002      	b.n	80055e2 <HAL_GPIO_Init+0x53e>
 80055dc:	2301      	movs	r3, #1
 80055de:	e000      	b.n	80055e2 <HAL_GPIO_Init+0x53e>
 80055e0:	2300      	movs	r3, #0
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	f002 0203 	and.w	r2, r2, #3
 80055e8:	0092      	lsls	r2, r2, #2
 80055ea:	4093      	lsls	r3, r2
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055f2:	4935      	ldr	r1, [pc, #212]	; (80056c8 <HAL_GPIO_Init+0x624>)
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	089b      	lsrs	r3, r3, #2
 80055f8:	3302      	adds	r3, #2
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005600:	4b39      	ldr	r3, [pc, #228]	; (80056e8 <HAL_GPIO_Init+0x644>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	43db      	mvns	r3, r3
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	4013      	ands	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	4313      	orrs	r3, r2
 8005622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005624:	4a30      	ldr	r2, [pc, #192]	; (80056e8 <HAL_GPIO_Init+0x644>)
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800562a:	4b2f      	ldr	r3, [pc, #188]	; (80056e8 <HAL_GPIO_Init+0x644>)
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	43db      	mvns	r3, r3
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	4013      	ands	r3, r2
 8005638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	4313      	orrs	r3, r2
 800564c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800564e:	4a26      	ldr	r2, [pc, #152]	; (80056e8 <HAL_GPIO_Init+0x644>)
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005654:	4b24      	ldr	r3, [pc, #144]	; (80056e8 <HAL_GPIO_Init+0x644>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	43db      	mvns	r3, r3
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	4013      	ands	r3, r2
 8005662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005678:	4a1b      	ldr	r2, [pc, #108]	; (80056e8 <HAL_GPIO_Init+0x644>)
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800567e:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <HAL_GPIO_Init+0x644>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	43db      	mvns	r3, r3
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	4013      	ands	r3, r2
 800568c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	4313      	orrs	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056a2:	4a11      	ldr	r2, [pc, #68]	; (80056e8 <HAL_GPIO_Init+0x644>)
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	3301      	adds	r3, #1
 80056ac:	61fb      	str	r3, [r7, #28]
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	2b0f      	cmp	r3, #15
 80056b2:	f67f ad85 	bls.w	80051c0 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 80056b6:	bf00      	nop
 80056b8:	bf00      	nop
 80056ba:	3720      	adds	r7, #32
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	0800bb48 	.word	0x0800bb48
 80056c4:	40023800 	.word	0x40023800
 80056c8:	40013800 	.word	0x40013800
 80056cc:	40020000 	.word	0x40020000
 80056d0:	40020400 	.word	0x40020400
 80056d4:	40020800 	.word	0x40020800
 80056d8:	40020c00 	.word	0x40020c00
 80056dc:	40021000 	.word	0x40021000
 80056e0:	40021400 	.word	0x40021400
 80056e4:	40021800 	.word	0x40021800
 80056e8:	40013c00 	.word	0x40013c00

080056ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	807b      	strh	r3, [r7, #2]
 80056f8:	4613      	mov	r3, r2
 80056fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80056fc:	887b      	ldrh	r3, [r7, #2]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d004      	beq.n	800570c <HAL_GPIO_WritePin+0x20>
 8005702:	887b      	ldrh	r3, [r7, #2]
 8005704:	0c1b      	lsrs	r3, r3, #16
 8005706:	041b      	lsls	r3, r3, #16
 8005708:	2b00      	cmp	r3, #0
 800570a:	d004      	beq.n	8005716 <HAL_GPIO_WritePin+0x2a>
 800570c:	f240 119d 	movw	r1, #413	; 0x19d
 8005710:	480e      	ldr	r0, [pc, #56]	; (800574c <HAL_GPIO_WritePin+0x60>)
 8005712:	f7fc ff74 	bl	80025fe <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8005716:	787b      	ldrb	r3, [r7, #1]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d007      	beq.n	800572c <HAL_GPIO_WritePin+0x40>
 800571c:	787b      	ldrb	r3, [r7, #1]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d004      	beq.n	800572c <HAL_GPIO_WritePin+0x40>
 8005722:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8005726:	4809      	ldr	r0, [pc, #36]	; (800574c <HAL_GPIO_WritePin+0x60>)
 8005728:	f7fc ff69 	bl	80025fe <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800572c:	787b      	ldrb	r3, [r7, #1]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005732:	887a      	ldrh	r2, [r7, #2]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005738:	e003      	b.n	8005742 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800573a:	887b      	ldrh	r3, [r7, #2]
 800573c:	041a      	lsls	r2, r3, #16
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	619a      	str	r2, [r3, #24]
}
 8005742:	bf00      	nop
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	0800bb48 	.word	0x0800bb48

08005750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e1bd      	b.n	8005ade <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a93      	ldr	r2, [pc, #588]	; (80059b4 <HAL_I2C_Init+0x264>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00e      	beq.n	800578a <HAL_I2C_Init+0x3a>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a91      	ldr	r2, [pc, #580]	; (80059b8 <HAL_I2C_Init+0x268>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d009      	beq.n	800578a <HAL_I2C_Init+0x3a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a90      	ldr	r2, [pc, #576]	; (80059bc <HAL_I2C_Init+0x26c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d004      	beq.n	800578a <HAL_I2C_Init+0x3a>
 8005780:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8005784:	488e      	ldr	r0, [pc, #568]	; (80059c0 <HAL_I2C_Init+0x270>)
 8005786:	f7fc ff3a 	bl	80025fe <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d004      	beq.n	800579c <HAL_I2C_Init+0x4c>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	4a8b      	ldr	r2, [pc, #556]	; (80059c4 <HAL_I2C_Init+0x274>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d904      	bls.n	80057a6 <HAL_I2C_Init+0x56>
 800579c:	f240 11bf 	movw	r1, #447	; 0x1bf
 80057a0:	4887      	ldr	r0, [pc, #540]	; (80059c0 <HAL_I2C_Init+0x270>)
 80057a2:	f7fc ff2c 	bl	80025fe <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d009      	beq.n	80057c2 <HAL_I2C_Init+0x72>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057b6:	d004      	beq.n	80057c2 <HAL_I2C_Init+0x72>
 80057b8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80057bc:	4880      	ldr	r0, [pc, #512]	; (80059c0 <HAL_I2C_Init+0x270>)
 80057be:	f7fc ff1e 	bl	80025fe <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80057ca:	f023 0303 	bic.w	r3, r3, #3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d004      	beq.n	80057dc <HAL_I2C_Init+0x8c>
 80057d2:	f240 11c1 	movw	r1, #449	; 0x1c1
 80057d6:	487a      	ldr	r0, [pc, #488]	; (80059c0 <HAL_I2C_Init+0x270>)
 80057d8:	f7fc ff11 	bl	80025fe <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057e4:	d009      	beq.n	80057fa <HAL_I2C_Init+0xaa>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057ee:	d004      	beq.n	80057fa <HAL_I2C_Init+0xaa>
 80057f0:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80057f4:	4872      	ldr	r0, [pc, #456]	; (80059c0 <HAL_I2C_Init+0x270>)
 80057f6:	f7fc ff02 	bl	80025fe <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d008      	beq.n	8005814 <HAL_I2C_Init+0xc4>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d004      	beq.n	8005814 <HAL_I2C_Init+0xc4>
 800580a:	f240 11c3 	movw	r1, #451	; 0x1c3
 800580e:	486c      	ldr	r0, [pc, #432]	; (80059c0 <HAL_I2C_Init+0x270>)
 8005810:	f7fc fef5 	bl	80025fe <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800581c:	2b00      	cmp	r3, #0
 800581e:	d004      	beq.n	800582a <HAL_I2C_Init+0xda>
 8005820:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8005824:	4866      	ldr	r0, [pc, #408]	; (80059c0 <HAL_I2C_Init+0x270>)
 8005826:	f7fc feea 	bl	80025fe <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d008      	beq.n	8005844 <HAL_I2C_Init+0xf4>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	2b40      	cmp	r3, #64	; 0x40
 8005838:	d004      	beq.n	8005844 <HAL_I2C_Init+0xf4>
 800583a:	f240 11c5 	movw	r1, #453	; 0x1c5
 800583e:	4860      	ldr	r0, [pc, #384]	; (80059c0 <HAL_I2C_Init+0x270>)
 8005840:	f7fc fedd 	bl	80025fe <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d008      	beq.n	800585e <HAL_I2C_Init+0x10e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	2b80      	cmp	r3, #128	; 0x80
 8005852:	d004      	beq.n	800585e <HAL_I2C_Init+0x10e>
 8005854:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8005858:	4859      	ldr	r0, [pc, #356]	; (80059c0 <HAL_I2C_Init+0x270>)
 800585a:	f7fc fed0 	bl	80025fe <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d106      	bne.n	8005878 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7fc fd6c 	bl	8002350 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2224      	movs	r2, #36	; 0x24
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0201 	bic.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800589e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058b0:	f001 fff8 	bl	80078a4 <HAL_RCC_GetPCLK1Freq>
 80058b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	4a43      	ldr	r2, [pc, #268]	; (80059c8 <HAL_I2C_Init+0x278>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d807      	bhi.n	80058d0 <HAL_I2C_Init+0x180>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4a42      	ldr	r2, [pc, #264]	; (80059cc <HAL_I2C_Init+0x27c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	bf94      	ite	ls
 80058c8:	2301      	movls	r3, #1
 80058ca:	2300      	movhi	r3, #0
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	e006      	b.n	80058de <HAL_I2C_Init+0x18e>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4a3f      	ldr	r2, [pc, #252]	; (80059d0 <HAL_I2C_Init+0x280>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	bf94      	ite	ls
 80058d8:	2301      	movls	r3, #1
 80058da:	2300      	movhi	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e0fb      	b.n	8005ade <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4a3a      	ldr	r2, [pc, #232]	; (80059d4 <HAL_I2C_Init+0x284>)
 80058ea:	fba2 2303 	umull	r2, r3, r2, r3
 80058ee:	0c9b      	lsrs	r3, r3, #18
 80058f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	430a      	orrs	r2, r1
 8005904:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	4a2c      	ldr	r2, [pc, #176]	; (80059c8 <HAL_I2C_Init+0x278>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d802      	bhi.n	8005920 <HAL_I2C_Init+0x1d0>
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	3301      	adds	r3, #1
 800591e:	e009      	b.n	8005934 <HAL_I2C_Init+0x1e4>
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005926:	fb02 f303 	mul.w	r3, r2, r3
 800592a:	4a2b      	ldr	r2, [pc, #172]	; (80059d8 <HAL_I2C_Init+0x288>)
 800592c:	fba2 2303 	umull	r2, r3, r2, r3
 8005930:	099b      	lsrs	r3, r3, #6
 8005932:	3301      	adds	r3, #1
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6812      	ldr	r2, [r2, #0]
 8005938:	430b      	orrs	r3, r1
 800593a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005946:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	491e      	ldr	r1, [pc, #120]	; (80059c8 <HAL_I2C_Init+0x278>)
 8005950:	428b      	cmp	r3, r1
 8005952:	d819      	bhi.n	8005988 <HAL_I2C_Init+0x238>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	1e59      	subs	r1, r3, #1
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005962:	1c59      	adds	r1, r3, #1
 8005964:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005968:	400b      	ands	r3, r1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00a      	beq.n	8005984 <HAL_I2C_Init+0x234>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1e59      	subs	r1, r3, #1
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	005b      	lsls	r3, r3, #1
 8005978:	fbb1 f3f3 	udiv	r3, r1, r3
 800597c:	3301      	adds	r3, #1
 800597e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005982:	e065      	b.n	8005a50 <HAL_I2C_Init+0x300>
 8005984:	2304      	movs	r3, #4
 8005986:	e063      	b.n	8005a50 <HAL_I2C_Init+0x300>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d125      	bne.n	80059dc <HAL_I2C_Init+0x28c>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	1e58      	subs	r0, r3, #1
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6859      	ldr	r1, [r3, #4]
 8005998:	460b      	mov	r3, r1
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	440b      	add	r3, r1
 800599e:	fbb0 f3f3 	udiv	r3, r0, r3
 80059a2:	3301      	adds	r3, #1
 80059a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	bf0c      	ite	eq
 80059ac:	2301      	moveq	r3, #1
 80059ae:	2300      	movne	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	e026      	b.n	8005a02 <HAL_I2C_Init+0x2b2>
 80059b4:	40005400 	.word	0x40005400
 80059b8:	40005800 	.word	0x40005800
 80059bc:	40005c00 	.word	0x40005c00
 80059c0:	0800bb84 	.word	0x0800bb84
 80059c4:	00061a80 	.word	0x00061a80
 80059c8:	000186a0 	.word	0x000186a0
 80059cc:	001e847f 	.word	0x001e847f
 80059d0:	003d08ff 	.word	0x003d08ff
 80059d4:	431bde83 	.word	0x431bde83
 80059d8:	10624dd3 	.word	0x10624dd3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	1e58      	subs	r0, r3, #1
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6859      	ldr	r1, [r3, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	440b      	add	r3, r1
 80059ea:	0099      	lsls	r1, r3, #2
 80059ec:	440b      	add	r3, r1
 80059ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80059f2:	3301      	adds	r3, #1
 80059f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	bf0c      	ite	eq
 80059fc:	2301      	moveq	r3, #1
 80059fe:	2300      	movne	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <HAL_I2C_Init+0x2ba>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e022      	b.n	8005a50 <HAL_I2C_Init+0x300>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10e      	bne.n	8005a30 <HAL_I2C_Init+0x2e0>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	1e58      	subs	r0, r3, #1
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6859      	ldr	r1, [r3, #4]
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	440b      	add	r3, r1
 8005a20:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a24:	3301      	adds	r3, #1
 8005a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a2e:	e00f      	b.n	8005a50 <HAL_I2C_Init+0x300>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	1e58      	subs	r0, r3, #1
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6859      	ldr	r1, [r3, #4]
 8005a38:	460b      	mov	r3, r1
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	0099      	lsls	r1, r3, #2
 8005a40:	440b      	add	r3, r1
 8005a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a46:	3301      	adds	r3, #1
 8005a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	6809      	ldr	r1, [r1, #0]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	69da      	ldr	r2, [r3, #28]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6911      	ldr	r1, [r2, #16]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	68d2      	ldr	r2, [r2, #12]
 8005a8a:	4311      	orrs	r1, r2
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6812      	ldr	r2, [r2, #0]
 8005a90:	430b      	orrs	r3, r1
 8005a92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	695a      	ldr	r2, [r3, #20]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0201 	orr.w	r2, r2, #1
 8005abe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop

08005ae8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b00:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b08:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b10:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
 8005b14:	2b10      	cmp	r3, #16
 8005b16:	d003      	beq.n	8005b20 <HAL_I2C_EV_IRQHandler+0x38>
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
 8005b1a:	2b40      	cmp	r3, #64	; 0x40
 8005b1c:	f040 80c1 	bne.w	8005ca2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10d      	bne.n	8005b56 <HAL_I2C_EV_IRQHandler+0x6e>
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005b40:	d003      	beq.n	8005b4a <HAL_I2C_EV_IRQHandler+0x62>
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005b48:	d101      	bne.n	8005b4e <HAL_I2C_EV_IRQHandler+0x66>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e000      	b.n	8005b50 <HAL_I2C_EV_IRQHandler+0x68>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	f000 8132 	beq.w	8005dba <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00c      	beq.n	8005b7a <HAL_I2C_EV_IRQHandler+0x92>
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	0a5b      	lsrs	r3, r3, #9
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d006      	beq.n	8005b7a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f001 fc7b 	bl	8007468 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fd83 	bl	800667e <I2C_Master_SB>
 8005b78:	e092      	b.n	8005ca0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	08db      	lsrs	r3, r3, #3
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d009      	beq.n	8005b9a <HAL_I2C_EV_IRQHandler+0xb2>
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	0a5b      	lsrs	r3, r3, #9
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fdf9 	bl	800678a <I2C_Master_ADD10>
 8005b98:	e082      	b.n	8005ca0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	085b      	lsrs	r3, r3, #1
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d009      	beq.n	8005bba <HAL_I2C_EV_IRQHandler+0xd2>
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	0a5b      	lsrs	r3, r3, #9
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fe13 	bl	80067de <I2C_Master_ADDR>
 8005bb8:	e072      	b.n	8005ca0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	089b      	lsrs	r3, r3, #2
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d03b      	beq.n	8005c3e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd4:	f000 80f3 	beq.w	8005dbe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	09db      	lsrs	r3, r3, #7
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00f      	beq.n	8005c04 <HAL_I2C_EV_IRQHandler+0x11c>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	0a9b      	lsrs	r3, r3, #10
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d009      	beq.n	8005c04 <HAL_I2C_EV_IRQHandler+0x11c>
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	089b      	lsrs	r3, r3, #2
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d103      	bne.n	8005c04 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f9f3 	bl	8005fe8 <I2C_MasterTransmit_TXE>
 8005c02:	e04d      	b.n	8005ca0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	089b      	lsrs	r3, r3, #2
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 80d6 	beq.w	8005dbe <HAL_I2C_EV_IRQHandler+0x2d6>
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	0a5b      	lsrs	r3, r3, #9
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 80cf 	beq.w	8005dbe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005c20:	7bbb      	ldrb	r3, [r7, #14]
 8005c22:	2b21      	cmp	r3, #33	; 0x21
 8005c24:	d103      	bne.n	8005c2e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fa7a 	bl	8006120 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c2c:	e0c7      	b.n	8005dbe <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
 8005c30:	2b40      	cmp	r3, #64	; 0x40
 8005c32:	f040 80c4 	bne.w	8005dbe <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fae8 	bl	800620c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c3c:	e0bf      	b.n	8005dbe <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c4c:	f000 80b7 	beq.w	8005dbe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	099b      	lsrs	r3, r3, #6
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00f      	beq.n	8005c7c <HAL_I2C_EV_IRQHandler+0x194>
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	0a9b      	lsrs	r3, r3, #10
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d009      	beq.n	8005c7c <HAL_I2C_EV_IRQHandler+0x194>
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	089b      	lsrs	r3, r3, #2
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d103      	bne.n	8005c7c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fb5d 	bl	8006334 <I2C_MasterReceive_RXNE>
 8005c7a:	e011      	b.n	8005ca0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	089b      	lsrs	r3, r3, #2
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 809a 	beq.w	8005dbe <HAL_I2C_EV_IRQHandler+0x2d6>
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	0a5b      	lsrs	r3, r3, #9
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 8093 	beq.w	8005dbe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 fc06 	bl	80064aa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c9e:	e08e      	b.n	8005dbe <HAL_I2C_EV_IRQHandler+0x2d6>
 8005ca0:	e08d      	b.n	8005dbe <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d004      	beq.n	8005cb4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	61fb      	str	r3, [r7, #28]
 8005cb2:	e007      	b.n	8005cc4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	085b      	lsrs	r3, r3, #1
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d012      	beq.n	8005cf6 <HAL_I2C_EV_IRQHandler+0x20e>
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	0a5b      	lsrs	r3, r3, #9
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00c      	beq.n	8005cf6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005cec:	69b9      	ldr	r1, [r7, #24]
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 ffc4 	bl	8006c7c <I2C_Slave_ADDR>
 8005cf4:	e066      	b.n	8005dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	091b      	lsrs	r3, r3, #4
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d009      	beq.n	8005d16 <HAL_I2C_EV_IRQHandler+0x22e>
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	0a5b      	lsrs	r3, r3, #9
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fffe 	bl	8006d10 <I2C_Slave_STOPF>
 8005d14:	e056      	b.n	8005dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005d16:	7bbb      	ldrb	r3, [r7, #14]
 8005d18:	2b21      	cmp	r3, #33	; 0x21
 8005d1a:	d002      	beq.n	8005d22 <HAL_I2C_EV_IRQHandler+0x23a>
 8005d1c:	7bbb      	ldrb	r3, [r7, #14]
 8005d1e:	2b29      	cmp	r3, #41	; 0x29
 8005d20:	d125      	bne.n	8005d6e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	09db      	lsrs	r3, r3, #7
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00f      	beq.n	8005d4e <HAL_I2C_EV_IRQHandler+0x266>
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	0a9b      	lsrs	r3, r3, #10
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d009      	beq.n	8005d4e <HAL_I2C_EV_IRQHandler+0x266>
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	089b      	lsrs	r3, r3, #2
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d103      	bne.n	8005d4e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 feda 	bl	8006b00 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d4c:	e039      	b.n	8005dc2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	089b      	lsrs	r3, r3, #2
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d033      	beq.n	8005dc2 <HAL_I2C_EV_IRQHandler+0x2da>
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	0a5b      	lsrs	r3, r3, #9
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d02d      	beq.n	8005dc2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 ff07 	bl	8006b7a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d6c:	e029      	b.n	8005dc2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	099b      	lsrs	r3, r3, #6
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00f      	beq.n	8005d9a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	0a9b      	lsrs	r3, r3, #10
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d009      	beq.n	8005d9a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	089b      	lsrs	r3, r3, #2
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d103      	bne.n	8005d9a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 ff12 	bl	8006bbc <I2C_SlaveReceive_RXNE>
 8005d98:	e014      	b.n	8005dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	089b      	lsrs	r3, r3, #2
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00e      	beq.n	8005dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	0a5b      	lsrs	r3, r3, #9
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d008      	beq.n	8005dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 ff40 	bl	8006c38 <I2C_SlaveReceive_BTF>
 8005db8:	e004      	b.n	8005dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005dba:	bf00      	nop
 8005dbc:	e002      	b.n	8005dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dbe:	bf00      	nop
 8005dc0:	e000      	b.n	8005dc4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005dc2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005dc4:	3720      	adds	r7, #32
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b08a      	sub	sp, #40	; 0x28
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005de2:	2300      	movs	r3, #0
 8005de4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dec:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	0a1b      	lsrs	r3, r3, #8
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00e      	beq.n	8005e18 <HAL_I2C_ER_IRQHandler+0x4e>
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	0a1b      	lsrs	r3, r3, #8
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d008      	beq.n	8005e18 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	f043 0301 	orr.w	r3, r3, #1
 8005e0c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e16:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	0a5b      	lsrs	r3, r3, #9
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00e      	beq.n	8005e42 <HAL_I2C_ER_IRQHandler+0x78>
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	0a1b      	lsrs	r3, r3, #8
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d008      	beq.n	8005e42 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	f043 0302 	orr.w	r3, r3, #2
 8005e36:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005e40:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	0a9b      	lsrs	r3, r3, #10
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d03f      	beq.n	8005ece <HAL_I2C_ER_IRQHandler+0x104>
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	0a1b      	lsrs	r3, r3, #8
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d039      	beq.n	8005ece <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005e5a:	7efb      	ldrb	r3, [r7, #27]
 8005e5c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e6c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e72:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005e74:	7ebb      	ldrb	r3, [r7, #26]
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	d112      	bne.n	8005ea0 <HAL_I2C_ER_IRQHandler+0xd6>
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10f      	bne.n	8005ea0 <HAL_I2C_ER_IRQHandler+0xd6>
 8005e80:	7cfb      	ldrb	r3, [r7, #19]
 8005e82:	2b21      	cmp	r3, #33	; 0x21
 8005e84:	d008      	beq.n	8005e98 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005e86:	7cfb      	ldrb	r3, [r7, #19]
 8005e88:	2b29      	cmp	r3, #41	; 0x29
 8005e8a:	d005      	beq.n	8005e98 <HAL_I2C_ER_IRQHandler+0xce>
 8005e8c:	7cfb      	ldrb	r3, [r7, #19]
 8005e8e:	2b28      	cmp	r3, #40	; 0x28
 8005e90:	d106      	bne.n	8005ea0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2b21      	cmp	r3, #33	; 0x21
 8005e96:	d103      	bne.n	8005ea0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f001 f869 	bl	8006f70 <I2C_Slave_AF>
 8005e9e:	e016      	b.n	8005ece <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ea8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	f043 0304 	orr.w	r3, r3, #4
 8005eb0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005eb2:	7efb      	ldrb	r3, [r7, #27]
 8005eb4:	2b10      	cmp	r3, #16
 8005eb6:	d002      	beq.n	8005ebe <HAL_I2C_ER_IRQHandler+0xf4>
 8005eb8:	7efb      	ldrb	r3, [r7, #27]
 8005eba:	2b40      	cmp	r3, #64	; 0x40
 8005ebc:	d107      	bne.n	8005ece <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ecc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	0adb      	lsrs	r3, r3, #11
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00e      	beq.n	8005ef8 <HAL_I2C_ER_IRQHandler+0x12e>
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	0a1b      	lsrs	r3, r3, #8
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d008      	beq.n	8005ef8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	f043 0308 	orr.w	r3, r3, #8
 8005eec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005ef6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d008      	beq.n	8005f10 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	431a      	orrs	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f001 f8a0 	bl	8007050 <I2C_ITError>
  }
}
 8005f10:	bf00      	nop
 8005f12:	3728      	adds	r7, #40	; 0x28
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	70fb      	strb	r3, [r7, #3]
 8005f74:	4613      	mov	r3, r2
 8005f76:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ffe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006004:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600a:	2b00      	cmp	r3, #0
 800600c:	d150      	bne.n	80060b0 <I2C_MasterTransmit_TXE+0xc8>
 800600e:	7bfb      	ldrb	r3, [r7, #15]
 8006010:	2b21      	cmp	r3, #33	; 0x21
 8006012:	d14d      	bne.n	80060b0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2b08      	cmp	r3, #8
 8006018:	d01d      	beq.n	8006056 <I2C_MasterTransmit_TXE+0x6e>
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b20      	cmp	r3, #32
 800601e:	d01a      	beq.n	8006056 <I2C_MasterTransmit_TXE+0x6e>
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006026:	d016      	beq.n	8006056 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006036:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2211      	movs	r2, #17
 800603c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2220      	movs	r2, #32
 800604a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff ff62 	bl	8005f18 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006054:	e060      	b.n	8006118 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006064:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006074:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2220      	movs	r2, #32
 8006080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b40      	cmp	r3, #64	; 0x40
 800608e:	d107      	bne.n	80060a0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff ff7d 	bl	8005f98 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800609e:	e03b      	b.n	8006118 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff ff35 	bl	8005f18 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80060ae:	e033      	b.n	8006118 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	2b21      	cmp	r3, #33	; 0x21
 80060b4:	d005      	beq.n	80060c2 <I2C_MasterTransmit_TXE+0xda>
 80060b6:	7bbb      	ldrb	r3, [r7, #14]
 80060b8:	2b40      	cmp	r3, #64	; 0x40
 80060ba:	d12d      	bne.n	8006118 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	2b22      	cmp	r3, #34	; 0x22
 80060c0:	d12a      	bne.n	8006118 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d108      	bne.n	80060de <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060da:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80060dc:	e01c      	b.n	8006118 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b40      	cmp	r3, #64	; 0x40
 80060e8:	d103      	bne.n	80060f2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f88e 	bl	800620c <I2C_MemoryTransmit_TXE_BTF>
}
 80060f0:	e012      	b.n	8006118 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	781a      	ldrb	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610c:	b29b      	uxth	r3, r3
 800610e:	3b01      	subs	r3, #1
 8006110:	b29a      	uxth	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006116:	e7ff      	b.n	8006118 <I2C_MasterTransmit_TXE+0x130>
 8006118:	bf00      	nop
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b21      	cmp	r3, #33	; 0x21
 8006138:	d164      	bne.n	8006204 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613e:	b29b      	uxth	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	d012      	beq.n	800616a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	781a      	ldrb	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615e:	b29b      	uxth	r3, r3
 8006160:	3b01      	subs	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006168:	e04c      	b.n	8006204 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b08      	cmp	r3, #8
 800616e:	d01d      	beq.n	80061ac <I2C_MasterTransmit_BTF+0x8c>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2b20      	cmp	r3, #32
 8006174:	d01a      	beq.n	80061ac <I2C_MasterTransmit_BTF+0x8c>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800617c:	d016      	beq.n	80061ac <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800618c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2211      	movs	r2, #17
 8006192:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2220      	movs	r2, #32
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7ff feb7 	bl	8005f18 <HAL_I2C_MasterTxCpltCallback>
}
 80061aa:	e02b      	b.n	8006204 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061ba:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ca:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b40      	cmp	r3, #64	; 0x40
 80061e4:	d107      	bne.n	80061f6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7ff fed2 	bl	8005f98 <HAL_I2C_MemTxCpltCallback>
}
 80061f4:	e006      	b.n	8006204 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7ff fe8a 	bl	8005f18 <HAL_I2C_MasterTxCpltCallback>
}
 8006204:	bf00      	nop
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800621a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006220:	2b00      	cmp	r3, #0
 8006222:	d11d      	bne.n	8006260 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006228:	2b01      	cmp	r3, #1
 800622a:	d10b      	bne.n	8006244 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006230:	b2da      	uxtb	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800623c:	1c9a      	adds	r2, r3, #2
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006242:	e073      	b.n	800632c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006248:	b29b      	uxth	r3, r3
 800624a:	121b      	asrs	r3, r3, #8
 800624c:	b2da      	uxtb	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800625e:	e065      	b.n	800632c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006264:	2b01      	cmp	r3, #1
 8006266:	d10b      	bne.n	8006280 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800626c:	b2da      	uxtb	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800627e:	e055      	b.n	800632c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006284:	2b02      	cmp	r3, #2
 8006286:	d151      	bne.n	800632c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006288:	7bfb      	ldrb	r3, [r7, #15]
 800628a:	2b22      	cmp	r3, #34	; 0x22
 800628c:	d10d      	bne.n	80062aa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800629c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80062a8:	e040      	b.n	800632c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d015      	beq.n	80062e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
 80062b6:	2b21      	cmp	r3, #33	; 0x21
 80062b8:	d112      	bne.n	80062e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	781a      	ldrb	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	1c5a      	adds	r2, r3, #1
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	3b01      	subs	r3, #1
 80062d8:	b29a      	uxth	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80062de:	e025      	b.n	800632c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d120      	bne.n	800632c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	2b21      	cmp	r3, #33	; 0x21
 80062ee:	d11d      	bne.n	800632c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062fe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800630e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2220      	movs	r2, #32
 800631a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7ff fe36 	bl	8005f98 <HAL_I2C_MemTxCpltCallback>
}
 800632c:	bf00      	nop
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b22      	cmp	r3, #34	; 0x22
 8006346:	f040 80ac 	bne.w	80064a2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634e:	b29b      	uxth	r3, r3
 8006350:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2b03      	cmp	r3, #3
 8006356:	d921      	bls.n	800639c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	691a      	ldr	r2, [r3, #16]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	1c5a      	adds	r2, r3, #1
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006374:	b29b      	uxth	r3, r3
 8006376:	3b01      	subs	r3, #1
 8006378:	b29a      	uxth	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006382:	b29b      	uxth	r3, r3
 8006384:	2b03      	cmp	r3, #3
 8006386:	f040 808c 	bne.w	80064a2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006398:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800639a:	e082      	b.n	80064a2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d075      	beq.n	8006490 <I2C_MasterReceive_RXNE+0x15c>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d002      	beq.n	80063b0 <I2C_MasterReceive_RXNE+0x7c>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d16f      	bne.n	8006490 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f001 f827 	bl	8007404 <I2C_WaitOnSTOPRequestThroughIT>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d142      	bne.n	8006442 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ca:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063da:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691a      	ldr	r2, [r3, #16]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2220      	movs	r2, #32
 8006406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006410:	b2db      	uxtb	r3, r3
 8006412:	2b40      	cmp	r3, #64	; 0x40
 8006414:	d10a      	bne.n	800642c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff fdc1 	bl	8005fac <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800642a:	e03a      	b.n	80064a2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2212      	movs	r2, #18
 8006438:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7ff fd76 	bl	8005f2c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006440:	e02f      	b.n	80064a2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006450:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	691a      	ldr	r2, [r3, #16]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646e:	b29b      	uxth	r3, r3
 8006470:	3b01      	subs	r3, #1
 8006472:	b29a      	uxth	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2220      	movs	r2, #32
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f7ff fd99 	bl	8005fc0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800648e:	e008      	b.n	80064a2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800649e:	605a      	str	r2, [r3, #4]
}
 80064a0:	e7ff      	b.n	80064a2 <I2C_MasterReceive_RXNE+0x16e>
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b084      	sub	sp, #16
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064bc:	b29b      	uxth	r3, r3
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d11b      	bne.n	80064fa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064d0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	691a      	ldr	r2, [r3, #16]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80064f8:	e0bd      	b.n	8006676 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fe:	b29b      	uxth	r3, r3
 8006500:	2b03      	cmp	r3, #3
 8006502:	d129      	bne.n	8006558 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006512:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2b04      	cmp	r3, #4
 8006518:	d00a      	beq.n	8006530 <I2C_MasterReceive_BTF+0x86>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b02      	cmp	r3, #2
 800651e:	d007      	beq.n	8006530 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800652e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691a      	ldr	r2, [r3, #16]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	b2d2      	uxtb	r2, r2
 800653c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006542:	1c5a      	adds	r2, r3, #1
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800654c:	b29b      	uxth	r3, r3
 800654e:	3b01      	subs	r3, #1
 8006550:	b29a      	uxth	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006556:	e08e      	b.n	8006676 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800655c:	b29b      	uxth	r3, r3
 800655e:	2b02      	cmp	r3, #2
 8006560:	d176      	bne.n	8006650 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d002      	beq.n	800656e <I2C_MasterReceive_BTF+0xc4>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2b10      	cmp	r3, #16
 800656c:	d108      	bne.n	8006580 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	e019      	b.n	80065b4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b04      	cmp	r3, #4
 8006584:	d002      	beq.n	800658c <I2C_MasterReceive_BTF+0xe2>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b02      	cmp	r3, #2
 800658a:	d108      	bne.n	800659e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	e00a      	b.n	80065b4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2b10      	cmp	r3, #16
 80065a2:	d007      	beq.n	80065b4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065b2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	691a      	ldr	r2, [r3, #16]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	b2d2      	uxtb	r2, r2
 80065c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	3b01      	subs	r3, #1
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	691a      	ldr	r2, [r3, #16]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	b2d2      	uxtb	r2, r2
 80065e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	1c5a      	adds	r2, r3, #1
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	3b01      	subs	r3, #1
 80065fa:	b29a      	uxth	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800660e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2220      	movs	r2, #32
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b40      	cmp	r3, #64	; 0x40
 8006622:	d10a      	bne.n	800663a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7ff fcba 	bl	8005fac <HAL_I2C_MemRxCpltCallback>
}
 8006638:	e01d      	b.n	8006676 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2212      	movs	r2, #18
 8006646:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7ff fc6f 	bl	8005f2c <HAL_I2C_MasterRxCpltCallback>
}
 800664e:	e012      	b.n	8006676 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	691a      	ldr	r2, [r3, #16]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665a:	b2d2      	uxtb	r2, r2
 800665c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006662:	1c5a      	adds	r2, r3, #1
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800666c:	b29b      	uxth	r3, r3
 800666e:	3b01      	subs	r3, #1
 8006670:	b29a      	uxth	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006676:	bf00      	nop
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b40      	cmp	r3, #64	; 0x40
 8006690:	d117      	bne.n	80066c2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006696:	2b00      	cmp	r3, #0
 8006698:	d109      	bne.n	80066ae <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	461a      	mov	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066aa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80066ac:	e067      	b.n	800677e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	f043 0301 	orr.w	r3, r3, #1
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	611a      	str	r2, [r3, #16]
}
 80066c0:	e05d      	b.n	800677e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066ca:	d133      	bne.n	8006734 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b21      	cmp	r3, #33	; 0x21
 80066d6:	d109      	bne.n	80066ec <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	461a      	mov	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066e8:	611a      	str	r2, [r3, #16]
 80066ea:	e008      	b.n	80066fe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	f043 0301 	orr.w	r3, r3, #1
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006702:	2b00      	cmp	r3, #0
 8006704:	d004      	beq.n	8006710 <I2C_Master_SB+0x92>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670c:	2b00      	cmp	r3, #0
 800670e:	d108      	bne.n	8006722 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006714:	2b00      	cmp	r3, #0
 8006716:	d032      	beq.n	800677e <I2C_Master_SB+0x100>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671e:	2b00      	cmp	r3, #0
 8006720:	d02d      	beq.n	800677e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006730:	605a      	str	r2, [r3, #4]
}
 8006732:	e024      	b.n	800677e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10e      	bne.n	800675a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006740:	b29b      	uxth	r3, r3
 8006742:	11db      	asrs	r3, r3, #7
 8006744:	b2db      	uxtb	r3, r3
 8006746:	f003 0306 	and.w	r3, r3, #6
 800674a:	b2db      	uxtb	r3, r3
 800674c:	f063 030f 	orn	r3, r3, #15
 8006750:	b2da      	uxtb	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	611a      	str	r2, [r3, #16]
}
 8006758:	e011      	b.n	800677e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800675e:	2b01      	cmp	r3, #1
 8006760:	d10d      	bne.n	800677e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006766:	b29b      	uxth	r3, r3
 8006768:	11db      	asrs	r3, r3, #7
 800676a:	b2db      	uxtb	r3, r3
 800676c:	f003 0306 	and.w	r3, r3, #6
 8006770:	b2db      	uxtb	r3, r3
 8006772:	f063 030e 	orn	r3, r3, #14
 8006776:	b2da      	uxtb	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	611a      	str	r2, [r3, #16]
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006796:	b2da      	uxtb	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d004      	beq.n	80067b0 <I2C_Master_ADD10+0x26>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d108      	bne.n	80067c2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00c      	beq.n	80067d2 <I2C_Master_ADD10+0x48>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d007      	beq.n	80067d2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067d0:	605a      	str	r2, [r3, #4]
  }
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80067de:	b480      	push	{r7}
 80067e0:	b091      	sub	sp, #68	; 0x44
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fa:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b22      	cmp	r3, #34	; 0x22
 8006806:	f040 8169 	bne.w	8006adc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10f      	bne.n	8006832 <I2C_Master_ADDR+0x54>
 8006812:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006816:	2b40      	cmp	r3, #64	; 0x40
 8006818:	d10b      	bne.n	8006832 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800681a:	2300      	movs	r3, #0
 800681c:	633b      	str	r3, [r7, #48]	; 0x30
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	633b      	str	r3, [r7, #48]	; 0x30
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	633b      	str	r3, [r7, #48]	; 0x30
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	e160      	b.n	8006af4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006836:	2b00      	cmp	r3, #0
 8006838:	d11d      	bne.n	8006876 <I2C_Master_ADDR+0x98>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006842:	d118      	bne.n	8006876 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006844:	2300      	movs	r3, #0
 8006846:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006858:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006868:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	651a      	str	r2, [r3, #80]	; 0x50
 8006874:	e13e      	b.n	8006af4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800687a:	b29b      	uxth	r3, r3
 800687c:	2b00      	cmp	r3, #0
 800687e:	d113      	bne.n	80068a8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006880:	2300      	movs	r3, #0
 8006882:	62bb      	str	r3, [r7, #40]	; 0x28
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	62bb      	str	r3, [r7, #40]	; 0x28
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	62bb      	str	r3, [r7, #40]	; 0x28
 8006894:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	e115      	b.n	8006ad4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	f040 808a 	bne.w	80069c8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80068b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068ba:	d137      	bne.n	800692c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ca:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068da:	d113      	bne.n	8006904 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ea:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ec:	2300      	movs	r3, #0
 80068ee:	627b      	str	r3, [r7, #36]	; 0x24
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	627b      	str	r3, [r7, #36]	; 0x24
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	e0e7      	b.n	8006ad4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006904:	2300      	movs	r3, #0
 8006906:	623b      	str	r3, [r7, #32]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	623b      	str	r3, [r7, #32]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	623b      	str	r3, [r7, #32]
 8006918:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	e0d3      	b.n	8006ad4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800692c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692e:	2b08      	cmp	r3, #8
 8006930:	d02e      	beq.n	8006990 <I2C_Master_ADDR+0x1b2>
 8006932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006934:	2b20      	cmp	r3, #32
 8006936:	d02b      	beq.n	8006990 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693a:	2b12      	cmp	r3, #18
 800693c:	d102      	bne.n	8006944 <I2C_Master_ADDR+0x166>
 800693e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006940:	2b01      	cmp	r3, #1
 8006942:	d125      	bne.n	8006990 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006946:	2b04      	cmp	r3, #4
 8006948:	d00e      	beq.n	8006968 <I2C_Master_ADDR+0x18a>
 800694a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694c:	2b02      	cmp	r3, #2
 800694e:	d00b      	beq.n	8006968 <I2C_Master_ADDR+0x18a>
 8006950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006952:	2b10      	cmp	r3, #16
 8006954:	d008      	beq.n	8006968 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006964:	601a      	str	r2, [r3, #0]
 8006966:	e007      	b.n	8006978 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006976:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006978:	2300      	movs	r3, #0
 800697a:	61fb      	str	r3, [r7, #28]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	61fb      	str	r3, [r7, #28]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	61fb      	str	r3, [r7, #28]
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	e0a1      	b.n	8006ad4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800699e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069a0:	2300      	movs	r3, #0
 80069a2:	61bb      	str	r3, [r7, #24]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	61bb      	str	r3, [r7, #24]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	61bb      	str	r3, [r7, #24]
 80069b4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	e085      	b.n	8006ad4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d14d      	bne.n	8006a6e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80069d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d016      	beq.n	8006a06 <I2C_Master_ADDR+0x228>
 80069d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d013      	beq.n	8006a06 <I2C_Master_ADDR+0x228>
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	2b10      	cmp	r3, #16
 80069e2:	d010      	beq.n	8006a06 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069f2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	e007      	b.n	8006a16 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a14:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a24:	d117      	bne.n	8006a56 <I2C_Master_ADDR+0x278>
 8006a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a2c:	d00b      	beq.n	8006a46 <I2C_Master_ADDR+0x268>
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d008      	beq.n	8006a46 <I2C_Master_ADDR+0x268>
 8006a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a36:	2b08      	cmp	r3, #8
 8006a38:	d005      	beq.n	8006a46 <I2C_Master_ADDR+0x268>
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	2b10      	cmp	r3, #16
 8006a3e:	d002      	beq.n	8006a46 <I2C_Master_ADDR+0x268>
 8006a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a42:	2b20      	cmp	r3, #32
 8006a44:	d107      	bne.n	8006a56 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a54:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a56:	2300      	movs	r3, #0
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	e032      	b.n	8006ad4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a7c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a8c:	d117      	bne.n	8006abe <I2C_Master_ADDR+0x2e0>
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a94:	d00b      	beq.n	8006aae <I2C_Master_ADDR+0x2d0>
 8006a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d008      	beq.n	8006aae <I2C_Master_ADDR+0x2d0>
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9e:	2b08      	cmp	r3, #8
 8006aa0:	d005      	beq.n	8006aae <I2C_Master_ADDR+0x2d0>
 8006aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa4:	2b10      	cmp	r3, #16
 8006aa6:	d002      	beq.n	8006aae <I2C_Master_ADDR+0x2d0>
 8006aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	d107      	bne.n	8006abe <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006abc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006abe:	2300      	movs	r3, #0
 8006ac0:	613b      	str	r3, [r7, #16]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	613b      	str	r3, [r7, #16]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006ada:	e00b      	b.n	8006af4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006adc:	2300      	movs	r3, #0
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	68fb      	ldr	r3, [r7, #12]
}
 8006af2:	e7ff      	b.n	8006af4 <I2C_Master_ADDR+0x316>
 8006af4:	bf00      	nop
 8006af6:	3744      	adds	r7, #68	; 0x44
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b0e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d02b      	beq.n	8006b72 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1e:	781a      	ldrb	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2a:	1c5a      	adds	r2, r3, #1
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	3b01      	subs	r3, #1
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d114      	bne.n	8006b72 <I2C_SlaveTransmit_TXE+0x72>
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
 8006b4a:	2b29      	cmp	r3, #41	; 0x29
 8006b4c:	d111      	bne.n	8006b72 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b5c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2221      	movs	r2, #33	; 0x21
 8006b62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2228      	movs	r2, #40	; 0x28
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7ff f9e7 	bl	8005f40 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006b72:	bf00      	nop
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d011      	beq.n	8006bb0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b90:	781a      	ldrb	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d02c      	beq.n	8006c30 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	691a      	ldr	r2, [r3, #16]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	b2d2      	uxtb	r2, r2
 8006be2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	1c5a      	adds	r2, r3, #1
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d114      	bne.n	8006c30 <I2C_SlaveReceive_RXNE+0x74>
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	2b2a      	cmp	r3, #42	; 0x2a
 8006c0a:	d111      	bne.n	8006c30 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c1a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2222      	movs	r2, #34	; 0x22
 8006c20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2228      	movs	r2, #40	; 0x28
 8006c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7ff f992 	bl	8005f54 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006c30:	bf00      	nop
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d012      	beq.n	8006c70 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	691a      	ldr	r2, [r3, #16]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c54:	b2d2      	uxtb	r2, r2
 8006c56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	1c5a      	adds	r2, r3, #1
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006c86:	2300      	movs	r3, #0
 8006c88:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c96:	2b28      	cmp	r3, #40	; 0x28
 8006c98:	d127      	bne.n	8006cea <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ca8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	089b      	lsrs	r3, r3, #2
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	09db      	lsrs	r3, r3, #7
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d103      	bne.n	8006cce <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	81bb      	strh	r3, [r7, #12]
 8006ccc:	e002      	b.n	8006cd4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006cdc:	89ba      	ldrh	r2, [r7, #12]
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7ff f940 	bl	8005f68 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006ce8:	e00e      	b.n	8006d08 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cea:	2300      	movs	r3, #0
 8006cec:	60bb      	str	r3, [r7, #8]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	60bb      	str	r3, [r7, #8]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	60bb      	str	r3, [r7, #8]
 8006cfe:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006d08:	bf00      	nop
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d1e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d2e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006d30:	2300      	movs	r3, #0
 8006d32:	60bb      	str	r3, [r7, #8]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	60bb      	str	r3, [r7, #8]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0201 	orr.w	r2, r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d5c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d6c:	d172      	bne.n	8006e54 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
 8006d70:	2b22      	cmp	r3, #34	; 0x22
 8006d72:	d002      	beq.n	8006d7a <I2C_Slave_STOPF+0x6a>
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	2b2a      	cmp	r3, #42	; 0x2a
 8006d78:	d135      	bne.n	8006de6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d005      	beq.n	8006d9e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	f043 0204 	orr.w	r2, r3, #4
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe f8b6 	bl	8004f24 <HAL_DMA_GetState>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d049      	beq.n	8006e52 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc2:	4a69      	ldr	r2, [pc, #420]	; (8006f68 <I2C_Slave_STOPF+0x258>)
 8006dc4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fd fefe 	bl	8004bcc <HAL_DMA_Abort_IT>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d03d      	beq.n	8006e52 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006de0:	4610      	mov	r0, r2
 8006de2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006de4:	e035      	b.n	8006e52 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d005      	beq.n	8006e0a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e02:	f043 0204 	orr.w	r2, r3, #4
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e18:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7fe f880 	bl	8004f24 <HAL_DMA_GetState>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d014      	beq.n	8006e54 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2e:	4a4e      	ldr	r2, [pc, #312]	; (8006f68 <I2C_Slave_STOPF+0x258>)
 8006e30:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7fd fec8 	bl	8004bcc <HAL_DMA_Abort_IT>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d008      	beq.n	8006e54 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	4798      	blx	r3
 8006e50:	e000      	b.n	8006e54 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006e52:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d03e      	beq.n	8006edc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	f003 0304 	and.w	r3, r3, #4
 8006e68:	2b04      	cmp	r3, #4
 8006e6a:	d112      	bne.n	8006e92 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	691a      	ldr	r2, [r3, #16]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	1c5a      	adds	r2, r3, #1
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9c:	2b40      	cmp	r3, #64	; 0x40
 8006e9e:	d112      	bne.n	8006ec6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	691a      	ldr	r2, [r3, #16]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d005      	beq.n	8006edc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed4:	f043 0204 	orr.w	r2, r3, #4
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f8b3 	bl	8007050 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006eea:	e039      	b.n	8006f60 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006eec:	7bfb      	ldrb	r3, [r7, #15]
 8006eee:	2b2a      	cmp	r3, #42	; 0x2a
 8006ef0:	d109      	bne.n	8006f06 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2228      	movs	r2, #40	; 0x28
 8006efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f7ff f827 	bl	8005f54 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b28      	cmp	r3, #40	; 0x28
 8006f10:	d111      	bne.n	8006f36 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a15      	ldr	r2, [pc, #84]	; (8006f6c <I2C_Slave_STOPF+0x25c>)
 8006f16:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7ff f828 	bl	8005f84 <HAL_I2C_ListenCpltCallback>
}
 8006f34:	e014      	b.n	8006f60 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3a:	2b22      	cmp	r3, #34	; 0x22
 8006f3c:	d002      	beq.n	8006f44 <I2C_Slave_STOPF+0x234>
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
 8006f40:	2b22      	cmp	r3, #34	; 0x22
 8006f42:	d10d      	bne.n	8006f60 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7fe fffa 	bl	8005f54 <HAL_I2C_SlaveRxCpltCallback>
}
 8006f60:	bf00      	nop
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	080072b5 	.word	0x080072b5
 8006f6c:	ffff0000 	.word	0xffff0000

08006f70 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f84:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d002      	beq.n	8006f92 <I2C_Slave_AF+0x22>
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2b20      	cmp	r3, #32
 8006f90:	d129      	bne.n	8006fe6 <I2C_Slave_AF+0x76>
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
 8006f94:	2b28      	cmp	r3, #40	; 0x28
 8006f96:	d126      	bne.n	8006fe6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a2c      	ldr	r2, [pc, #176]	; (800704c <I2C_Slave_AF+0xdc>)
 8006f9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fac:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006fb6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fc6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7fe ffd0 	bl	8005f84 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006fe4:	e02e      	b.n	8007044 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006fe6:	7bfb      	ldrb	r3, [r7, #15]
 8006fe8:	2b21      	cmp	r3, #33	; 0x21
 8006fea:	d126      	bne.n	800703a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a17      	ldr	r2, [pc, #92]	; (800704c <I2C_Slave_AF+0xdc>)
 8006ff0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2221      	movs	r2, #33	; 0x21
 8006ff6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007016:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007020:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007030:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7fe ff84 	bl	8005f40 <HAL_I2C_SlaveTxCpltCallback>
}
 8007038:	e004      	b.n	8007044 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007042:	615a      	str	r2, [r3, #20]
}
 8007044:	bf00      	nop
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	ffff0000 	.word	0xffff0000

08007050 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800705e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007066:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007068:	7bbb      	ldrb	r3, [r7, #14]
 800706a:	2b10      	cmp	r3, #16
 800706c:	d002      	beq.n	8007074 <I2C_ITError+0x24>
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	2b40      	cmp	r3, #64	; 0x40
 8007072:	d10a      	bne.n	800708a <I2C_ITError+0x3a>
 8007074:	7bfb      	ldrb	r3, [r7, #15]
 8007076:	2b22      	cmp	r3, #34	; 0x22
 8007078:	d107      	bne.n	800708a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007088:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007090:	2b28      	cmp	r3, #40	; 0x28
 8007092:	d107      	bne.n	80070a4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2228      	movs	r2, #40	; 0x28
 800709e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80070a2:	e015      	b.n	80070d0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070b2:	d00a      	beq.n	80070ca <I2C_ITError+0x7a>
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
 80070b6:	2b60      	cmp	r3, #96	; 0x60
 80070b8:	d007      	beq.n	80070ca <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2220      	movs	r2, #32
 80070be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070de:	d162      	bne.n	80071a6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070ee:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d020      	beq.n	8007140 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007102:	4a6a      	ldr	r2, [pc, #424]	; (80072ac <I2C_ITError+0x25c>)
 8007104:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800710a:	4618      	mov	r0, r3
 800710c:	f7fd fd5e 	bl	8004bcc <HAL_DMA_Abort_IT>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	f000 8089 	beq.w	800722a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f022 0201 	bic.w	r2, r2, #1
 8007126:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2220      	movs	r2, #32
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800713a:	4610      	mov	r0, r2
 800713c:	4798      	blx	r3
 800713e:	e074      	b.n	800722a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007144:	4a59      	ldr	r2, [pc, #356]	; (80072ac <I2C_ITError+0x25c>)
 8007146:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714c:	4618      	mov	r0, r3
 800714e:	f7fd fd3d 	bl	8004bcc <HAL_DMA_Abort_IT>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d068      	beq.n	800722a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007162:	2b40      	cmp	r3, #64	; 0x40
 8007164:	d10b      	bne.n	800717e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	691a      	ldr	r2, [r3, #16]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	b2d2      	uxtb	r2, r2
 8007172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 0201 	bic.w	r2, r2, #1
 800718c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2220      	movs	r2, #32
 8007192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80071a0:	4610      	mov	r0, r2
 80071a2:	4798      	blx	r3
 80071a4:	e041      	b.n	800722a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b60      	cmp	r3, #96	; 0x60
 80071b0:	d125      	bne.n	80071fe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2220      	movs	r2, #32
 80071b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ca:	2b40      	cmp	r3, #64	; 0x40
 80071cc:	d10b      	bne.n	80071e6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	691a      	ldr	r2, [r3, #16]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	b2d2      	uxtb	r2, r2
 80071da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	1c5a      	adds	r2, r3, #1
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 0201 	bic.w	r2, r2, #1
 80071f4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7fe feec 	bl	8005fd4 <HAL_I2C_AbortCpltCallback>
 80071fc:	e015      	b.n	800722a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007208:	2b40      	cmp	r3, #64	; 0x40
 800720a:	d10b      	bne.n	8007224 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	691a      	ldr	r2, [r3, #16]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007216:	b2d2      	uxtb	r2, r2
 8007218:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	1c5a      	adds	r2, r3, #1
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7fe fecb 	bl	8005fc0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10e      	bne.n	8007258 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007240:	2b00      	cmp	r3, #0
 8007242:	d109      	bne.n	8007258 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800724a:	2b00      	cmp	r3, #0
 800724c:	d104      	bne.n	8007258 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007254:	2b00      	cmp	r3, #0
 8007256:	d007      	beq.n	8007268 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685a      	ldr	r2, [r3, #4]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007266:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b04      	cmp	r3, #4
 800727a:	d113      	bne.n	80072a4 <I2C_ITError+0x254>
 800727c:	7bfb      	ldrb	r3, [r7, #15]
 800727e:	2b28      	cmp	r3, #40	; 0x28
 8007280:	d110      	bne.n	80072a4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a0a      	ldr	r2, [pc, #40]	; (80072b0 <I2C_ITError+0x260>)
 8007286:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2220      	movs	r2, #32
 8007292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7fe fe70 	bl	8005f84 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80072a4:	bf00      	nop
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	080072b5 	.word	0x080072b5
 80072b0:	ffff0000 	.word	0xffff0000

080072b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072bc:	2300      	movs	r3, #0
 80072be:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072cc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80072ce:	4b4b      	ldr	r3, [pc, #300]	; (80073fc <I2C_DMAAbort+0x148>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	08db      	lsrs	r3, r3, #3
 80072d4:	4a4a      	ldr	r2, [pc, #296]	; (8007400 <I2C_DMAAbort+0x14c>)
 80072d6:	fba2 2303 	umull	r2, r3, r2, r3
 80072da:	0a1a      	lsrs	r2, r3, #8
 80072dc:	4613      	mov	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	00da      	lsls	r2, r3, #3
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d106      	bne.n	80072fc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	f043 0220 	orr.w	r2, r3, #32
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80072fa:	e00a      	b.n	8007312 <I2C_DMAAbort+0x5e>
    }
    count--;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	3b01      	subs	r3, #1
 8007300:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800730c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007310:	d0ea      	beq.n	80072e8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800731e:	2200      	movs	r2, #0
 8007320:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732e:	2200      	movs	r2, #0
 8007330:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007340:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2200      	movs	r2, #0
 8007346:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800734c:	2b00      	cmp	r3, #0
 800734e:	d003      	beq.n	8007358 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007354:	2200      	movs	r2, #0
 8007356:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735c:	2b00      	cmp	r3, #0
 800735e:	d003      	beq.n	8007368 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007364:	2200      	movs	r2, #0
 8007366:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f022 0201 	bic.w	r2, r2, #1
 8007376:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b60      	cmp	r3, #96	; 0x60
 8007382:	d10e      	bne.n	80073a2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	2220      	movs	r2, #32
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	2200      	movs	r2, #0
 8007398:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800739a:	6978      	ldr	r0, [r7, #20]
 800739c:	f7fe fe1a 	bl	8005fd4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80073a0:	e027      	b.n	80073f2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80073a2:	7cfb      	ldrb	r3, [r7, #19]
 80073a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80073a8:	2b28      	cmp	r3, #40	; 0x28
 80073aa:	d117      	bne.n	80073dc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f042 0201 	orr.w	r2, r2, #1
 80073ba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073ca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	2200      	movs	r2, #0
 80073d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2228      	movs	r2, #40	; 0x28
 80073d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80073da:	e007      	b.n	80073ec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	2220      	movs	r2, #32
 80073e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80073ec:	6978      	ldr	r0, [r7, #20]
 80073ee:	f7fe fde7 	bl	8005fc0 <HAL_I2C_ErrorCallback>
}
 80073f2:	bf00      	nop
 80073f4:	3718      	adds	r7, #24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	20000040 	.word	0x20000040
 8007400:	14f8b589 	.word	0x14f8b589

08007404 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800740c:	2300      	movs	r3, #0
 800740e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007410:	4b13      	ldr	r3, [pc, #76]	; (8007460 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	08db      	lsrs	r3, r3, #3
 8007416:	4a13      	ldr	r2, [pc, #76]	; (8007464 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007418:	fba2 2303 	umull	r2, r3, r2, r3
 800741c:	0a1a      	lsrs	r2, r3, #8
 800741e:	4613      	mov	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	3b01      	subs	r3, #1
 800742a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d107      	bne.n	8007442 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	f043 0220 	orr.w	r2, r3, #32
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e008      	b.n	8007454 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800744c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007450:	d0e9      	beq.n	8007426 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	20000040 	.word	0x20000040
 8007464:	14f8b589 	.word	0x14f8b589

08007468 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007474:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007478:	d103      	bne.n	8007482 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007480:	e007      	b.n	8007492 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007486:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800748a:	d102      	bne.n	8007492 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2208      	movs	r2, #8
 8007490:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007492:	bf00      	nop
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
	...

080074a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80074a6:	2300      	movs	r3, #0
 80074a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80074aa:	2300      	movs	r3, #0
 80074ac:	603b      	str	r3, [r7, #0]
 80074ae:	4b20      	ldr	r3, [pc, #128]	; (8007530 <HAL_PWREx_EnableOverDrive+0x90>)
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	4a1f      	ldr	r2, [pc, #124]	; (8007530 <HAL_PWREx_EnableOverDrive+0x90>)
 80074b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074b8:	6413      	str	r3, [r2, #64]	; 0x40
 80074ba:	4b1d      	ldr	r3, [pc, #116]	; (8007530 <HAL_PWREx_EnableOverDrive+0x90>)
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074c2:	603b      	str	r3, [r7, #0]
 80074c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80074c6:	4b1b      	ldr	r3, [pc, #108]	; (8007534 <HAL_PWREx_EnableOverDrive+0x94>)
 80074c8:	2201      	movs	r2, #1
 80074ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074cc:	f7fb fbba 	bl	8002c44 <HAL_GetTick>
 80074d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074d2:	e009      	b.n	80074e8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074d4:	f7fb fbb6 	bl	8002c44 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074e2:	d901      	bls.n	80074e8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e01f      	b.n	8007528 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074e8:	4b13      	ldr	r3, [pc, #76]	; (8007538 <HAL_PWREx_EnableOverDrive+0x98>)
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074f4:	d1ee      	bne.n	80074d4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80074f6:	4b11      	ldr	r3, [pc, #68]	; (800753c <HAL_PWREx_EnableOverDrive+0x9c>)
 80074f8:	2201      	movs	r2, #1
 80074fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074fc:	f7fb fba2 	bl	8002c44 <HAL_GetTick>
 8007500:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007502:	e009      	b.n	8007518 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007504:	f7fb fb9e 	bl	8002c44 <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007512:	d901      	bls.n	8007518 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e007      	b.n	8007528 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007518:	4b07      	ldr	r3, [pc, #28]	; (8007538 <HAL_PWREx_EnableOverDrive+0x98>)
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007524:	d1ee      	bne.n	8007504 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	40023800 	.word	0x40023800
 8007534:	420e0040 	.word	0x420e0040
 8007538:	40007000 	.word	0x40007000
 800753c:	420e0044 	.word	0x420e0044

08007540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d101      	bne.n	8007554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e18c      	b.n	800786e <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d003      	beq.n	8007564 <HAL_RCC_ClockConfig+0x24>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b0f      	cmp	r3, #15
 8007562:	d904      	bls.n	800756e <HAL_RCC_ClockConfig+0x2e>
 8007564:	f240 215a 	movw	r1, #602	; 0x25a
 8007568:	4887      	ldr	r0, [pc, #540]	; (8007788 <HAL_RCC_ClockConfig+0x248>)
 800756a:	f7fb f848 	bl	80025fe <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d031      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x98>
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d02e      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x98>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b02      	cmp	r3, #2
 800757e:	d02b      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x98>
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2b03      	cmp	r3, #3
 8007584:	d028      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x98>
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2b04      	cmp	r3, #4
 800758a:	d025      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x98>
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	2b05      	cmp	r3, #5
 8007590:	d022      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x98>
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b06      	cmp	r3, #6
 8007596:	d01f      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x98>
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	2b07      	cmp	r3, #7
 800759c:	d01c      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x98>
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	2b08      	cmp	r3, #8
 80075a2:	d019      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x98>
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2b09      	cmp	r3, #9
 80075a8:	d016      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x98>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b0a      	cmp	r3, #10
 80075ae:	d013      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x98>
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	2b0b      	cmp	r3, #11
 80075b4:	d010      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x98>
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b0c      	cmp	r3, #12
 80075ba:	d00d      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x98>
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	2b0d      	cmp	r3, #13
 80075c0:	d00a      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x98>
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b0e      	cmp	r3, #14
 80075c6:	d007      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x98>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b0f      	cmp	r3, #15
 80075cc:	d004      	beq.n	80075d8 <HAL_RCC_ClockConfig+0x98>
 80075ce:	f240 215b 	movw	r1, #603	; 0x25b
 80075d2:	486d      	ldr	r0, [pc, #436]	; (8007788 <HAL_RCC_ClockConfig+0x248>)
 80075d4:	f7fb f813 	bl	80025fe <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075d8:	4b6c      	ldr	r3, [pc, #432]	; (800778c <HAL_RCC_ClockConfig+0x24c>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 030f 	and.w	r3, r3, #15
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d90c      	bls.n	8007600 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075e6:	4b69      	ldr	r3, [pc, #420]	; (800778c <HAL_RCC_ClockConfig+0x24c>)
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	b2d2      	uxtb	r2, r2
 80075ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ee:	4b67      	ldr	r3, [pc, #412]	; (800778c <HAL_RCC_ClockConfig+0x24c>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 030f 	and.w	r3, r3, #15
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d001      	beq.n	8007600 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e136      	b.n	800786e <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0302 	and.w	r3, r3, #2
 8007608:	2b00      	cmp	r3, #0
 800760a:	d049      	beq.n	80076a0 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 0304 	and.w	r3, r3, #4
 8007614:	2b00      	cmp	r3, #0
 8007616:	d005      	beq.n	8007624 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007618:	4b5d      	ldr	r3, [pc, #372]	; (8007790 <HAL_RCC_ClockConfig+0x250>)
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	4a5c      	ldr	r2, [pc, #368]	; (8007790 <HAL_RCC_ClockConfig+0x250>)
 800761e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007622:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0308 	and.w	r3, r3, #8
 800762c:	2b00      	cmp	r3, #0
 800762e:	d005      	beq.n	800763c <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007630:	4b57      	ldr	r3, [pc, #348]	; (8007790 <HAL_RCC_ClockConfig+0x250>)
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	4a56      	ldr	r2, [pc, #344]	; (8007790 <HAL_RCC_ClockConfig+0x250>)
 8007636:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800763a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d024      	beq.n	800768e <HAL_RCC_ClockConfig+0x14e>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	2b80      	cmp	r3, #128	; 0x80
 800764a:	d020      	beq.n	800768e <HAL_RCC_ClockConfig+0x14e>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	2b90      	cmp	r3, #144	; 0x90
 8007652:	d01c      	beq.n	800768e <HAL_RCC_ClockConfig+0x14e>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	2ba0      	cmp	r3, #160	; 0xa0
 800765a:	d018      	beq.n	800768e <HAL_RCC_ClockConfig+0x14e>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	2bb0      	cmp	r3, #176	; 0xb0
 8007662:	d014      	beq.n	800768e <HAL_RCC_ClockConfig+0x14e>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	2bc0      	cmp	r3, #192	; 0xc0
 800766a:	d010      	beq.n	800768e <HAL_RCC_ClockConfig+0x14e>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	2bd0      	cmp	r3, #208	; 0xd0
 8007672:	d00c      	beq.n	800768e <HAL_RCC_ClockConfig+0x14e>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	2be0      	cmp	r3, #224	; 0xe0
 800767a:	d008      	beq.n	800768e <HAL_RCC_ClockConfig+0x14e>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	2bf0      	cmp	r3, #240	; 0xf0
 8007682:	d004      	beq.n	800768e <HAL_RCC_ClockConfig+0x14e>
 8007684:	f240 217e 	movw	r1, #638	; 0x27e
 8007688:	483f      	ldr	r0, [pc, #252]	; (8007788 <HAL_RCC_ClockConfig+0x248>)
 800768a:	f7fa ffb8 	bl	80025fe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800768e:	4b40      	ldr	r3, [pc, #256]	; (8007790 <HAL_RCC_ClockConfig+0x250>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	493d      	ldr	r1, [pc, #244]	; (8007790 <HAL_RCC_ClockConfig+0x250>)
 800769c:	4313      	orrs	r3, r2
 800769e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d059      	beq.n	8007760 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d010      	beq.n	80076d6 <HAL_RCC_ClockConfig+0x196>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d00c      	beq.n	80076d6 <HAL_RCC_ClockConfig+0x196>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d008      	beq.n	80076d6 <HAL_RCC_ClockConfig+0x196>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	2b03      	cmp	r3, #3
 80076ca:	d004      	beq.n	80076d6 <HAL_RCC_ClockConfig+0x196>
 80076cc:	f240 2185 	movw	r1, #645	; 0x285
 80076d0:	482d      	ldr	r0, [pc, #180]	; (8007788 <HAL_RCC_ClockConfig+0x248>)
 80076d2:	f7fa ff94 	bl	80025fe <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d107      	bne.n	80076ee <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076de:	4b2c      	ldr	r3, [pc, #176]	; (8007790 <HAL_RCC_ClockConfig+0x250>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d119      	bne.n	800771e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e0bf      	b.n	800786e <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d003      	beq.n	80076fe <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d107      	bne.n	800770e <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076fe:	4b24      	ldr	r3, [pc, #144]	; (8007790 <HAL_RCC_ClockConfig+0x250>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d109      	bne.n	800771e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e0af      	b.n	800786e <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800770e:	4b20      	ldr	r3, [pc, #128]	; (8007790 <HAL_RCC_ClockConfig+0x250>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0302 	and.w	r3, r3, #2
 8007716:	2b00      	cmp	r3, #0
 8007718:	d101      	bne.n	800771e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e0a7      	b.n	800786e <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800771e:	4b1c      	ldr	r3, [pc, #112]	; (8007790 <HAL_RCC_ClockConfig+0x250>)
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f023 0203 	bic.w	r2, r3, #3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	4919      	ldr	r1, [pc, #100]	; (8007790 <HAL_RCC_ClockConfig+0x250>)
 800772c:	4313      	orrs	r3, r2
 800772e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007730:	f7fb fa88 	bl	8002c44 <HAL_GetTick>
 8007734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007736:	e00a      	b.n	800774e <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007738:	f7fb fa84 	bl	8002c44 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	f241 3288 	movw	r2, #5000	; 0x1388
 8007746:	4293      	cmp	r3, r2
 8007748:	d901      	bls.n	800774e <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e08f      	b.n	800786e <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800774e:	4b10      	ldr	r3, [pc, #64]	; (8007790 <HAL_RCC_ClockConfig+0x250>)
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f003 020c 	and.w	r2, r3, #12
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	429a      	cmp	r2, r3
 800775e:	d1eb      	bne.n	8007738 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007760:	4b0a      	ldr	r3, [pc, #40]	; (800778c <HAL_RCC_ClockConfig+0x24c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 030f 	and.w	r3, r3, #15
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	429a      	cmp	r2, r3
 800776c:	d212      	bcs.n	8007794 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800776e:	4b07      	ldr	r3, [pc, #28]	; (800778c <HAL_RCC_ClockConfig+0x24c>)
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	b2d2      	uxtb	r2, r2
 8007774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007776:	4b05      	ldr	r3, [pc, #20]	; (800778c <HAL_RCC_ClockConfig+0x24c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 030f 	and.w	r3, r3, #15
 800777e:	683a      	ldr	r2, [r7, #0]
 8007780:	429a      	cmp	r2, r3
 8007782:	d007      	beq.n	8007794 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e072      	b.n	800786e <HAL_RCC_ClockConfig+0x32e>
 8007788:	0800bbbc 	.word	0x0800bbbc
 800778c:	40023c00 	.word	0x40023c00
 8007790:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0304 	and.w	r3, r3, #4
 800779c:	2b00      	cmp	r3, #0
 800779e:	d025      	beq.n	80077ec <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d018      	beq.n	80077da <HAL_RCC_ClockConfig+0x29a>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077b0:	d013      	beq.n	80077da <HAL_RCC_ClockConfig+0x29a>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80077ba:	d00e      	beq.n	80077da <HAL_RCC_ClockConfig+0x29a>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80077c4:	d009      	beq.n	80077da <HAL_RCC_ClockConfig+0x29a>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80077ce:	d004      	beq.n	80077da <HAL_RCC_ClockConfig+0x29a>
 80077d0:	f240 21c3 	movw	r1, #707	; 0x2c3
 80077d4:	4828      	ldr	r0, [pc, #160]	; (8007878 <HAL_RCC_ClockConfig+0x338>)
 80077d6:	f7fa ff12 	bl	80025fe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077da:	4b28      	ldr	r3, [pc, #160]	; (800787c <HAL_RCC_ClockConfig+0x33c>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	4925      	ldr	r1, [pc, #148]	; (800787c <HAL_RCC_ClockConfig+0x33c>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0308 	and.w	r3, r3, #8
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d026      	beq.n	8007846 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d018      	beq.n	8007832 <HAL_RCC_ClockConfig+0x2f2>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007808:	d013      	beq.n	8007832 <HAL_RCC_ClockConfig+0x2f2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007812:	d00e      	beq.n	8007832 <HAL_RCC_ClockConfig+0x2f2>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800781c:	d009      	beq.n	8007832 <HAL_RCC_ClockConfig+0x2f2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007826:	d004      	beq.n	8007832 <HAL_RCC_ClockConfig+0x2f2>
 8007828:	f240 21ca 	movw	r1, #714	; 0x2ca
 800782c:	4812      	ldr	r0, [pc, #72]	; (8007878 <HAL_RCC_ClockConfig+0x338>)
 800782e:	f7fa fee6 	bl	80025fe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007832:	4b12      	ldr	r3, [pc, #72]	; (800787c <HAL_RCC_ClockConfig+0x33c>)
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	00db      	lsls	r3, r3, #3
 8007840:	490e      	ldr	r1, [pc, #56]	; (800787c <HAL_RCC_ClockConfig+0x33c>)
 8007842:	4313      	orrs	r3, r2
 8007844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007846:	f000 f887 	bl	8007958 <HAL_RCC_GetSysClockFreq>
 800784a:	4602      	mov	r2, r0
 800784c:	4b0b      	ldr	r3, [pc, #44]	; (800787c <HAL_RCC_ClockConfig+0x33c>)
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	091b      	lsrs	r3, r3, #4
 8007852:	f003 030f 	and.w	r3, r3, #15
 8007856:	490a      	ldr	r1, [pc, #40]	; (8007880 <HAL_RCC_ClockConfig+0x340>)
 8007858:	5ccb      	ldrb	r3, [r1, r3]
 800785a:	fa22 f303 	lsr.w	r3, r2, r3
 800785e:	4a09      	ldr	r2, [pc, #36]	; (8007884 <HAL_RCC_ClockConfig+0x344>)
 8007860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007862:	4b09      	ldr	r3, [pc, #36]	; (8007888 <HAL_RCC_ClockConfig+0x348>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4618      	mov	r0, r3
 8007868:	f7fa ffec 	bl	8002844 <HAL_InitTick>

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	0800bbbc 	.word	0x0800bbbc
 800787c:	40023800 	.word	0x40023800
 8007880:	0800bca8 	.word	0x0800bca8
 8007884:	20000040 	.word	0x20000040
 8007888:	20000044 	.word	0x20000044

0800788c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800788c:	b480      	push	{r7}
 800788e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007890:	4b03      	ldr	r3, [pc, #12]	; (80078a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007892:	681b      	ldr	r3, [r3, #0]
}
 8007894:	4618      	mov	r0, r3
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	20000040 	.word	0x20000040

080078a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80078a8:	f7ff fff0 	bl	800788c <HAL_RCC_GetHCLKFreq>
 80078ac:	4602      	mov	r2, r0
 80078ae:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	0a9b      	lsrs	r3, r3, #10
 80078b4:	f003 0307 	and.w	r3, r3, #7
 80078b8:	4903      	ldr	r1, [pc, #12]	; (80078c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078ba:	5ccb      	ldrb	r3, [r1, r3]
 80078bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	40023800 	.word	0x40023800
 80078c8:	0800bcb8 	.word	0x0800bcb8

080078cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80078d0:	f7ff ffdc 	bl	800788c <HAL_RCC_GetHCLKFreq>
 80078d4:	4602      	mov	r2, r0
 80078d6:	4b05      	ldr	r3, [pc, #20]	; (80078ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	0b5b      	lsrs	r3, r3, #13
 80078dc:	f003 0307 	and.w	r3, r3, #7
 80078e0:	4903      	ldr	r1, [pc, #12]	; (80078f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80078e2:	5ccb      	ldrb	r3, [r1, r3]
 80078e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	40023800 	.word	0x40023800
 80078f0:	0800bcb8 	.word	0x0800bcb8

080078f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	220f      	movs	r2, #15
 8007902:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007904:	4b12      	ldr	r3, [pc, #72]	; (8007950 <HAL_RCC_GetClockConfig+0x5c>)
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f003 0203 	and.w	r2, r3, #3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007910:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <HAL_RCC_GetClockConfig+0x5c>)
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800791c:	4b0c      	ldr	r3, [pc, #48]	; (8007950 <HAL_RCC_GetClockConfig+0x5c>)
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007928:	4b09      	ldr	r3, [pc, #36]	; (8007950 <HAL_RCC_GetClockConfig+0x5c>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	08db      	lsrs	r3, r3, #3
 800792e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007936:	4b07      	ldr	r3, [pc, #28]	; (8007954 <HAL_RCC_GetClockConfig+0x60>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 020f 	and.w	r2, r3, #15
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	601a      	str	r2, [r3, #0]
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	40023800 	.word	0x40023800
 8007954:	40023c00 	.word	0x40023c00

08007958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800795c:	b0ae      	sub	sp, #184	; 0xb8
 800795e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007966:	2300      	movs	r3, #0
 8007968:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800796c:	2300      	movs	r3, #0
 800796e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007978:	2300      	movs	r3, #0
 800797a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800797e:	4bcb      	ldr	r3, [pc, #812]	; (8007cac <HAL_RCC_GetSysClockFreq+0x354>)
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f003 030c 	and.w	r3, r3, #12
 8007986:	2b0c      	cmp	r3, #12
 8007988:	f200 8206 	bhi.w	8007d98 <HAL_RCC_GetSysClockFreq+0x440>
 800798c:	a201      	add	r2, pc, #4	; (adr r2, 8007994 <HAL_RCC_GetSysClockFreq+0x3c>)
 800798e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007992:	bf00      	nop
 8007994:	080079c9 	.word	0x080079c9
 8007998:	08007d99 	.word	0x08007d99
 800799c:	08007d99 	.word	0x08007d99
 80079a0:	08007d99 	.word	0x08007d99
 80079a4:	080079d1 	.word	0x080079d1
 80079a8:	08007d99 	.word	0x08007d99
 80079ac:	08007d99 	.word	0x08007d99
 80079b0:	08007d99 	.word	0x08007d99
 80079b4:	080079d9 	.word	0x080079d9
 80079b8:	08007d99 	.word	0x08007d99
 80079bc:	08007d99 	.word	0x08007d99
 80079c0:	08007d99 	.word	0x08007d99
 80079c4:	08007bc9 	.word	0x08007bc9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079c8:	4bb9      	ldr	r3, [pc, #740]	; (8007cb0 <HAL_RCC_GetSysClockFreq+0x358>)
 80079ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80079ce:	e1e7      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079d0:	4bb8      	ldr	r3, [pc, #736]	; (8007cb4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80079d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80079d6:	e1e3      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079d8:	4bb4      	ldr	r3, [pc, #720]	; (8007cac <HAL_RCC_GetSysClockFreq+0x354>)
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079e4:	4bb1      	ldr	r3, [pc, #708]	; (8007cac <HAL_RCC_GetSysClockFreq+0x354>)
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d071      	beq.n	8007ad4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079f0:	4bae      	ldr	r3, [pc, #696]	; (8007cac <HAL_RCC_GetSysClockFreq+0x354>)
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	099b      	lsrs	r3, r3, #6
 80079f6:	2200      	movs	r2, #0
 80079f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80079fc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007a00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007a12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007a16:	4622      	mov	r2, r4
 8007a18:	462b      	mov	r3, r5
 8007a1a:	f04f 0000 	mov.w	r0, #0
 8007a1e:	f04f 0100 	mov.w	r1, #0
 8007a22:	0159      	lsls	r1, r3, #5
 8007a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a28:	0150      	lsls	r0, r2, #5
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4621      	mov	r1, r4
 8007a30:	1a51      	subs	r1, r2, r1
 8007a32:	6439      	str	r1, [r7, #64]	; 0x40
 8007a34:	4629      	mov	r1, r5
 8007a36:	eb63 0301 	sbc.w	r3, r3, r1
 8007a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a3c:	f04f 0200 	mov.w	r2, #0
 8007a40:	f04f 0300 	mov.w	r3, #0
 8007a44:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007a48:	4649      	mov	r1, r9
 8007a4a:	018b      	lsls	r3, r1, #6
 8007a4c:	4641      	mov	r1, r8
 8007a4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a52:	4641      	mov	r1, r8
 8007a54:	018a      	lsls	r2, r1, #6
 8007a56:	4641      	mov	r1, r8
 8007a58:	1a51      	subs	r1, r2, r1
 8007a5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a5c:	4649      	mov	r1, r9
 8007a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8007a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a64:	f04f 0200 	mov.w	r2, #0
 8007a68:	f04f 0300 	mov.w	r3, #0
 8007a6c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007a70:	4649      	mov	r1, r9
 8007a72:	00cb      	lsls	r3, r1, #3
 8007a74:	4641      	mov	r1, r8
 8007a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a7a:	4641      	mov	r1, r8
 8007a7c:	00ca      	lsls	r2, r1, #3
 8007a7e:	4610      	mov	r0, r2
 8007a80:	4619      	mov	r1, r3
 8007a82:	4603      	mov	r3, r0
 8007a84:	4622      	mov	r2, r4
 8007a86:	189b      	adds	r3, r3, r2
 8007a88:	633b      	str	r3, [r7, #48]	; 0x30
 8007a8a:	462b      	mov	r3, r5
 8007a8c:	460a      	mov	r2, r1
 8007a8e:	eb42 0303 	adc.w	r3, r2, r3
 8007a92:	637b      	str	r3, [r7, #52]	; 0x34
 8007a94:	f04f 0200 	mov.w	r2, #0
 8007a98:	f04f 0300 	mov.w	r3, #0
 8007a9c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	024b      	lsls	r3, r1, #9
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007aaa:	4621      	mov	r1, r4
 8007aac:	024a      	lsls	r2, r1, #9
 8007aae:	4610      	mov	r0, r2
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007abc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007ac0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007ac4:	f7f8 fba4 	bl	8000210 <__aeabi_uldivmod>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	4613      	mov	r3, r2
 8007ace:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ad2:	e067      	b.n	8007ba4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ad4:	4b75      	ldr	r3, [pc, #468]	; (8007cac <HAL_RCC_GetSysClockFreq+0x354>)
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	099b      	lsrs	r3, r3, #6
 8007ada:	2200      	movs	r2, #0
 8007adc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ae0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007ae4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aec:	67bb      	str	r3, [r7, #120]	; 0x78
 8007aee:	2300      	movs	r3, #0
 8007af0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007af2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007af6:	4622      	mov	r2, r4
 8007af8:	462b      	mov	r3, r5
 8007afa:	f04f 0000 	mov.w	r0, #0
 8007afe:	f04f 0100 	mov.w	r1, #0
 8007b02:	0159      	lsls	r1, r3, #5
 8007b04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b08:	0150      	lsls	r0, r2, #5
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	4621      	mov	r1, r4
 8007b10:	1a51      	subs	r1, r2, r1
 8007b12:	62b9      	str	r1, [r7, #40]	; 0x28
 8007b14:	4629      	mov	r1, r5
 8007b16:	eb63 0301 	sbc.w	r3, r3, r1
 8007b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b1c:	f04f 0200 	mov.w	r2, #0
 8007b20:	f04f 0300 	mov.w	r3, #0
 8007b24:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007b28:	4649      	mov	r1, r9
 8007b2a:	018b      	lsls	r3, r1, #6
 8007b2c:	4641      	mov	r1, r8
 8007b2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007b32:	4641      	mov	r1, r8
 8007b34:	018a      	lsls	r2, r1, #6
 8007b36:	4641      	mov	r1, r8
 8007b38:	ebb2 0a01 	subs.w	sl, r2, r1
 8007b3c:	4649      	mov	r1, r9
 8007b3e:	eb63 0b01 	sbc.w	fp, r3, r1
 8007b42:	f04f 0200 	mov.w	r2, #0
 8007b46:	f04f 0300 	mov.w	r3, #0
 8007b4a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b4e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b56:	4692      	mov	sl, r2
 8007b58:	469b      	mov	fp, r3
 8007b5a:	4623      	mov	r3, r4
 8007b5c:	eb1a 0303 	adds.w	r3, sl, r3
 8007b60:	623b      	str	r3, [r7, #32]
 8007b62:	462b      	mov	r3, r5
 8007b64:	eb4b 0303 	adc.w	r3, fp, r3
 8007b68:	627b      	str	r3, [r7, #36]	; 0x24
 8007b6a:	f04f 0200 	mov.w	r2, #0
 8007b6e:	f04f 0300 	mov.w	r3, #0
 8007b72:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007b76:	4629      	mov	r1, r5
 8007b78:	028b      	lsls	r3, r1, #10
 8007b7a:	4621      	mov	r1, r4
 8007b7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b80:	4621      	mov	r1, r4
 8007b82:	028a      	lsls	r2, r1, #10
 8007b84:	4610      	mov	r0, r2
 8007b86:	4619      	mov	r1, r3
 8007b88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	673b      	str	r3, [r7, #112]	; 0x70
 8007b90:	677a      	str	r2, [r7, #116]	; 0x74
 8007b92:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007b96:	f7f8 fb3b 	bl	8000210 <__aeabi_uldivmod>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ba4:	4b41      	ldr	r3, [pc, #260]	; (8007cac <HAL_RCC_GetSysClockFreq+0x354>)
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	0c1b      	lsrs	r3, r3, #16
 8007baa:	f003 0303 	and.w	r3, r3, #3
 8007bae:	3301      	adds	r3, #1
 8007bb0:	005b      	lsls	r3, r3, #1
 8007bb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007bb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007bba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007bc6:	e0eb      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007bc8:	4b38      	ldr	r3, [pc, #224]	; (8007cac <HAL_RCC_GetSysClockFreq+0x354>)
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007bd4:	4b35      	ldr	r3, [pc, #212]	; (8007cac <HAL_RCC_GetSysClockFreq+0x354>)
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d06b      	beq.n	8007cb8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007be0:	4b32      	ldr	r3, [pc, #200]	; (8007cac <HAL_RCC_GetSysClockFreq+0x354>)
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	099b      	lsrs	r3, r3, #6
 8007be6:	2200      	movs	r2, #0
 8007be8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007bec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bf2:	663b      	str	r3, [r7, #96]	; 0x60
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	667b      	str	r3, [r7, #100]	; 0x64
 8007bf8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007bfc:	4622      	mov	r2, r4
 8007bfe:	462b      	mov	r3, r5
 8007c00:	f04f 0000 	mov.w	r0, #0
 8007c04:	f04f 0100 	mov.w	r1, #0
 8007c08:	0159      	lsls	r1, r3, #5
 8007c0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c0e:	0150      	lsls	r0, r2, #5
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	4621      	mov	r1, r4
 8007c16:	1a51      	subs	r1, r2, r1
 8007c18:	61b9      	str	r1, [r7, #24]
 8007c1a:	4629      	mov	r1, r5
 8007c1c:	eb63 0301 	sbc.w	r3, r3, r1
 8007c20:	61fb      	str	r3, [r7, #28]
 8007c22:	f04f 0200 	mov.w	r2, #0
 8007c26:	f04f 0300 	mov.w	r3, #0
 8007c2a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007c2e:	4659      	mov	r1, fp
 8007c30:	018b      	lsls	r3, r1, #6
 8007c32:	4651      	mov	r1, sl
 8007c34:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c38:	4651      	mov	r1, sl
 8007c3a:	018a      	lsls	r2, r1, #6
 8007c3c:	4651      	mov	r1, sl
 8007c3e:	ebb2 0801 	subs.w	r8, r2, r1
 8007c42:	4659      	mov	r1, fp
 8007c44:	eb63 0901 	sbc.w	r9, r3, r1
 8007c48:	f04f 0200 	mov.w	r2, #0
 8007c4c:	f04f 0300 	mov.w	r3, #0
 8007c50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c54:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c58:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c5c:	4690      	mov	r8, r2
 8007c5e:	4699      	mov	r9, r3
 8007c60:	4623      	mov	r3, r4
 8007c62:	eb18 0303 	adds.w	r3, r8, r3
 8007c66:	613b      	str	r3, [r7, #16]
 8007c68:	462b      	mov	r3, r5
 8007c6a:	eb49 0303 	adc.w	r3, r9, r3
 8007c6e:	617b      	str	r3, [r7, #20]
 8007c70:	f04f 0200 	mov.w	r2, #0
 8007c74:	f04f 0300 	mov.w	r3, #0
 8007c78:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	024b      	lsls	r3, r1, #9
 8007c80:	4621      	mov	r1, r4
 8007c82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007c86:	4621      	mov	r1, r4
 8007c88:	024a      	lsls	r2, r1, #9
 8007c8a:	4610      	mov	r0, r2
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c92:	2200      	movs	r2, #0
 8007c94:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c96:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007c98:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007c9c:	f7f8 fab8 	bl	8000210 <__aeabi_uldivmod>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007caa:	e065      	b.n	8007d78 <HAL_RCC_GetSysClockFreq+0x420>
 8007cac:	40023800 	.word	0x40023800
 8007cb0:	00f42400 	.word	0x00f42400
 8007cb4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cb8:	4b3d      	ldr	r3, [pc, #244]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x458>)
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	099b      	lsrs	r3, r3, #6
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007cc8:	653b      	str	r3, [r7, #80]	; 0x50
 8007cca:	2300      	movs	r3, #0
 8007ccc:	657b      	str	r3, [r7, #84]	; 0x54
 8007cce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007cd2:	4642      	mov	r2, r8
 8007cd4:	464b      	mov	r3, r9
 8007cd6:	f04f 0000 	mov.w	r0, #0
 8007cda:	f04f 0100 	mov.w	r1, #0
 8007cde:	0159      	lsls	r1, r3, #5
 8007ce0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ce4:	0150      	lsls	r0, r2, #5
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4641      	mov	r1, r8
 8007cec:	1a51      	subs	r1, r2, r1
 8007cee:	60b9      	str	r1, [r7, #8]
 8007cf0:	4649      	mov	r1, r9
 8007cf2:	eb63 0301 	sbc.w	r3, r3, r1
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	f04f 0200 	mov.w	r2, #0
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007d04:	4659      	mov	r1, fp
 8007d06:	018b      	lsls	r3, r1, #6
 8007d08:	4651      	mov	r1, sl
 8007d0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007d0e:	4651      	mov	r1, sl
 8007d10:	018a      	lsls	r2, r1, #6
 8007d12:	4651      	mov	r1, sl
 8007d14:	1a54      	subs	r4, r2, r1
 8007d16:	4659      	mov	r1, fp
 8007d18:	eb63 0501 	sbc.w	r5, r3, r1
 8007d1c:	f04f 0200 	mov.w	r2, #0
 8007d20:	f04f 0300 	mov.w	r3, #0
 8007d24:	00eb      	lsls	r3, r5, #3
 8007d26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d2a:	00e2      	lsls	r2, r4, #3
 8007d2c:	4614      	mov	r4, r2
 8007d2e:	461d      	mov	r5, r3
 8007d30:	4643      	mov	r3, r8
 8007d32:	18e3      	adds	r3, r4, r3
 8007d34:	603b      	str	r3, [r7, #0]
 8007d36:	464b      	mov	r3, r9
 8007d38:	eb45 0303 	adc.w	r3, r5, r3
 8007d3c:	607b      	str	r3, [r7, #4]
 8007d3e:	f04f 0200 	mov.w	r2, #0
 8007d42:	f04f 0300 	mov.w	r3, #0
 8007d46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d4a:	4629      	mov	r1, r5
 8007d4c:	028b      	lsls	r3, r1, #10
 8007d4e:	4621      	mov	r1, r4
 8007d50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d54:	4621      	mov	r1, r4
 8007d56:	028a      	lsls	r2, r1, #10
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d60:	2200      	movs	r2, #0
 8007d62:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d64:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007d66:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007d6a:	f7f8 fa51 	bl	8000210 <__aeabi_uldivmod>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	4613      	mov	r3, r2
 8007d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007d78:	4b0d      	ldr	r3, [pc, #52]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x458>)
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	0f1b      	lsrs	r3, r3, #28
 8007d7e:	f003 0307 	and.w	r3, r3, #7
 8007d82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007d86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007d96:	e003      	b.n	8007da0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d98:	4b06      	ldr	r3, [pc, #24]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007d9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007d9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007da0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	37b8      	adds	r7, #184	; 0xb8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dae:	bf00      	nop
 8007db0:	40023800 	.word	0x40023800
 8007db4:	00f42400 	.word	0x00f42400

08007db8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e347      	b.n	800845a <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b0f      	cmp	r3, #15
 8007dd0:	d904      	bls.n	8007ddc <HAL_RCC_OscConfig+0x24>
 8007dd2:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 8007dd6:	4893      	ldr	r0, [pc, #588]	; (8008024 <HAL_RCC_OscConfig+0x26c>)
 8007dd8:	f7fa fc11 	bl	80025fe <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 8096 	beq.w	8007f16 <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00e      	beq.n	8007e10 <HAL_RCC_OscConfig+0x58>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dfa:	d009      	beq.n	8007e10 <HAL_RCC_OscConfig+0x58>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e04:	d004      	beq.n	8007e10 <HAL_RCC_OscConfig+0x58>
 8007e06:	f640 5115 	movw	r1, #3349	; 0xd15
 8007e0a:	4886      	ldr	r0, [pc, #536]	; (8008024 <HAL_RCC_OscConfig+0x26c>)
 8007e0c:	f7fa fbf7 	bl	80025fe <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007e10:	4b85      	ldr	r3, [pc, #532]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f003 030c 	and.w	r3, r3, #12
 8007e18:	2b04      	cmp	r3, #4
 8007e1a:	d019      	beq.n	8007e50 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007e1c:	4b82      	ldr	r3, [pc, #520]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007e24:	2b08      	cmp	r3, #8
 8007e26:	d106      	bne.n	8007e36 <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007e28:	4b7f      	ldr	r3, [pc, #508]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e34:	d00c      	beq.n	8007e50 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e36:	4b7c      	ldr	r3, [pc, #496]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007e3e:	2b0c      	cmp	r3, #12
 8007e40:	d112      	bne.n	8007e68 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007e42:	4b79      	ldr	r3, [pc, #484]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e4e:	d10b      	bne.n	8007e68 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e50:	4b75      	ldr	r3, [pc, #468]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d05b      	beq.n	8007f14 <HAL_RCC_OscConfig+0x15c>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d157      	bne.n	8007f14 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e2f8      	b.n	800845a <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e70:	d106      	bne.n	8007e80 <HAL_RCC_OscConfig+0xc8>
 8007e72:	4b6d      	ldr	r3, [pc, #436]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a6c      	ldr	r2, [pc, #432]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e7c:	6013      	str	r3, [r2, #0]
 8007e7e:	e01d      	b.n	8007ebc <HAL_RCC_OscConfig+0x104>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e88:	d10c      	bne.n	8007ea4 <HAL_RCC_OscConfig+0xec>
 8007e8a:	4b67      	ldr	r3, [pc, #412]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a66      	ldr	r2, [pc, #408]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	4b64      	ldr	r3, [pc, #400]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a63      	ldr	r2, [pc, #396]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ea0:	6013      	str	r3, [r2, #0]
 8007ea2:	e00b      	b.n	8007ebc <HAL_RCC_OscConfig+0x104>
 8007ea4:	4b60      	ldr	r3, [pc, #384]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a5f      	ldr	r2, [pc, #380]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eae:	6013      	str	r3, [r2, #0]
 8007eb0:	4b5d      	ldr	r3, [pc, #372]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a5c      	ldr	r2, [pc, #368]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d013      	beq.n	8007eec <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec4:	f7fa febe 	bl	8002c44 <HAL_GetTick>
 8007ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eca:	e008      	b.n	8007ede <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ecc:	f7fa feba 	bl	8002c44 <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	2b64      	cmp	r3, #100	; 0x64
 8007ed8:	d901      	bls.n	8007ede <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e2bd      	b.n	800845a <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ede:	4b52      	ldr	r3, [pc, #328]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d0f0      	beq.n	8007ecc <HAL_RCC_OscConfig+0x114>
 8007eea:	e014      	b.n	8007f16 <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eec:	f7fa feaa 	bl	8002c44 <HAL_GetTick>
 8007ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ef2:	e008      	b.n	8007f06 <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ef4:	f7fa fea6 	bl	8002c44 <HAL_GetTick>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	2b64      	cmp	r3, #100	; 0x64
 8007f00:	d901      	bls.n	8007f06 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e2a9      	b.n	800845a <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f06:	4b48      	ldr	r3, [pc, #288]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1f0      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x13c>
 8007f12:	e000      	b.n	8007f16 <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0302 	and.w	r3, r3, #2
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 808c 	beq.w	800803c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d008      	beq.n	8007f3e <HAL_RCC_OscConfig+0x186>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d004      	beq.n	8007f3e <HAL_RCC_OscConfig+0x186>
 8007f34:	f640 514d 	movw	r1, #3405	; 0xd4d
 8007f38:	483a      	ldr	r0, [pc, #232]	; (8008024 <HAL_RCC_OscConfig+0x26c>)
 8007f3a:	f7fa fb60 	bl	80025fe <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	2b1f      	cmp	r3, #31
 8007f44:	d904      	bls.n	8007f50 <HAL_RCC_OscConfig+0x198>
 8007f46:	f640 514e 	movw	r1, #3406	; 0xd4e
 8007f4a:	4836      	ldr	r0, [pc, #216]	; (8008024 <HAL_RCC_OscConfig+0x26c>)
 8007f4c:	f7fa fb57 	bl	80025fe <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007f50:	4b35      	ldr	r3, [pc, #212]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	f003 030c 	and.w	r3, r3, #12
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d017      	beq.n	8007f8c <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007f5c:	4b32      	ldr	r3, [pc, #200]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007f64:	2b08      	cmp	r3, #8
 8007f66:	d105      	bne.n	8007f74 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007f68:	4b2f      	ldr	r3, [pc, #188]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00b      	beq.n	8007f8c <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f74:	4b2c      	ldr	r3, [pc, #176]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007f7c:	2b0c      	cmp	r3, #12
 8007f7e:	d11c      	bne.n	8007fba <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007f80:	4b29      	ldr	r3, [pc, #164]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d116      	bne.n	8007fba <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007f8c:	4b26      	ldr	r3, [pc, #152]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 0302 	and.w	r3, r3, #2
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d005      	beq.n	8007fa4 <HAL_RCC_OscConfig+0x1ec>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d001      	beq.n	8007fa4 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e25a      	b.n	800845a <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fa4:	4b20      	ldr	r3, [pc, #128]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	00db      	lsls	r3, r3, #3
 8007fb2:	491d      	ldr	r1, [pc, #116]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fb8:	e040      	b.n	800803c <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d020      	beq.n	8008004 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fc2:	4b1a      	ldr	r3, [pc, #104]	; (800802c <HAL_RCC_OscConfig+0x274>)
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fc8:	f7fa fe3c 	bl	8002c44 <HAL_GetTick>
 8007fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fce:	e008      	b.n	8007fe2 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fd0:	f7fa fe38 	bl	8002c44 <HAL_GetTick>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d901      	bls.n	8007fe2 <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e23b      	b.n	800845a <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fe2:	4b11      	ldr	r3, [pc, #68]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0302 	and.w	r3, r3, #2
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d0f0      	beq.n	8007fd0 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fee:	4b0e      	ldr	r3, [pc, #56]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	00db      	lsls	r3, r3, #3
 8007ffc:	490a      	ldr	r1, [pc, #40]	; (8008028 <HAL_RCC_OscConfig+0x270>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	600b      	str	r3, [r1, #0]
 8008002:	e01b      	b.n	800803c <HAL_RCC_OscConfig+0x284>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008004:	4b09      	ldr	r3, [pc, #36]	; (800802c <HAL_RCC_OscConfig+0x274>)
 8008006:	2200      	movs	r2, #0
 8008008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800800a:	f7fa fe1b 	bl	8002c44 <HAL_GetTick>
 800800e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008010:	e00e      	b.n	8008030 <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008012:	f7fa fe17 	bl	8002c44 <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	2b02      	cmp	r3, #2
 800801e:	d907      	bls.n	8008030 <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e21a      	b.n	800845a <HAL_RCC_OscConfig+0x6a2>
 8008024:	0800bbf4 	.word	0x0800bbf4
 8008028:	40023800 	.word	0x40023800
 800802c:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008030:	4b74      	ldr	r3, [pc, #464]	; (8008204 <HAL_RCC_OscConfig+0x44c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0302 	and.w	r3, r3, #2
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1ea      	bne.n	8008012 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 0308 	and.w	r3, r3, #8
 8008044:	2b00      	cmp	r3, #0
 8008046:	d03d      	beq.n	80080c4 <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	695b      	ldr	r3, [r3, #20]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d008      	beq.n	8008062 <HAL_RCC_OscConfig+0x2aa>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d004      	beq.n	8008062 <HAL_RCC_OscConfig+0x2aa>
 8008058:	f640 5194 	movw	r1, #3476	; 0xd94
 800805c:	486a      	ldr	r0, [pc, #424]	; (8008208 <HAL_RCC_OscConfig+0x450>)
 800805e:	f7fa face 	bl	80025fe <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d016      	beq.n	8008098 <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800806a:	4b68      	ldr	r3, [pc, #416]	; (800820c <HAL_RCC_OscConfig+0x454>)
 800806c:	2201      	movs	r2, #1
 800806e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008070:	f7fa fde8 	bl	8002c44 <HAL_GetTick>
 8008074:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008076:	e008      	b.n	800808a <HAL_RCC_OscConfig+0x2d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008078:	f7fa fde4 	bl	8002c44 <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b02      	cmp	r3, #2
 8008084:	d901      	bls.n	800808a <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e1e7      	b.n	800845a <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800808a:	4b5e      	ldr	r3, [pc, #376]	; (8008204 <HAL_RCC_OscConfig+0x44c>)
 800808c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b00      	cmp	r3, #0
 8008094:	d0f0      	beq.n	8008078 <HAL_RCC_OscConfig+0x2c0>
 8008096:	e015      	b.n	80080c4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008098:	4b5c      	ldr	r3, [pc, #368]	; (800820c <HAL_RCC_OscConfig+0x454>)
 800809a:	2200      	movs	r2, #0
 800809c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800809e:	f7fa fdd1 	bl	8002c44 <HAL_GetTick>
 80080a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080a4:	e008      	b.n	80080b8 <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080a6:	f7fa fdcd 	bl	8002c44 <HAL_GetTick>
 80080aa:	4602      	mov	r2, r0
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	1ad3      	subs	r3, r2, r3
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d901      	bls.n	80080b8 <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e1d0      	b.n	800845a <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080b8:	4b52      	ldr	r3, [pc, #328]	; (8008204 <HAL_RCC_OscConfig+0x44c>)
 80080ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080bc:	f003 0302 	and.w	r3, r3, #2
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1f0      	bne.n	80080a6 <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 80b0 	beq.w	8008232 <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080d2:	2300      	movs	r3, #0
 80080d4:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00c      	beq.n	80080f8 <HAL_RCC_OscConfig+0x340>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d008      	beq.n	80080f8 <HAL_RCC_OscConfig+0x340>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	2b05      	cmp	r3, #5
 80080ec:	d004      	beq.n	80080f8 <HAL_RCC_OscConfig+0x340>
 80080ee:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 80080f2:	4845      	ldr	r0, [pc, #276]	; (8008208 <HAL_RCC_OscConfig+0x450>)
 80080f4:	f7fa fa83 	bl	80025fe <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080f8:	4b42      	ldr	r3, [pc, #264]	; (8008204 <HAL_RCC_OscConfig+0x44c>)
 80080fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10f      	bne.n	8008124 <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008104:	2300      	movs	r3, #0
 8008106:	60bb      	str	r3, [r7, #8]
 8008108:	4b3e      	ldr	r3, [pc, #248]	; (8008204 <HAL_RCC_OscConfig+0x44c>)
 800810a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810c:	4a3d      	ldr	r2, [pc, #244]	; (8008204 <HAL_RCC_OscConfig+0x44c>)
 800810e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008112:	6413      	str	r3, [r2, #64]	; 0x40
 8008114:	4b3b      	ldr	r3, [pc, #236]	; (8008204 <HAL_RCC_OscConfig+0x44c>)
 8008116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800811c:	60bb      	str	r3, [r7, #8]
 800811e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008120:	2301      	movs	r3, #1
 8008122:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008124:	4b3a      	ldr	r3, [pc, #232]	; (8008210 <HAL_RCC_OscConfig+0x458>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800812c:	2b00      	cmp	r3, #0
 800812e:	d118      	bne.n	8008162 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008130:	4b37      	ldr	r3, [pc, #220]	; (8008210 <HAL_RCC_OscConfig+0x458>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a36      	ldr	r2, [pc, #216]	; (8008210 <HAL_RCC_OscConfig+0x458>)
 8008136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800813a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800813c:	f7fa fd82 	bl	8002c44 <HAL_GetTick>
 8008140:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008142:	e008      	b.n	8008156 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008144:	f7fa fd7e 	bl	8002c44 <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b02      	cmp	r3, #2
 8008150:	d901      	bls.n	8008156 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e181      	b.n	800845a <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008156:	4b2e      	ldr	r3, [pc, #184]	; (8008210 <HAL_RCC_OscConfig+0x458>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0f0      	beq.n	8008144 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d106      	bne.n	8008178 <HAL_RCC_OscConfig+0x3c0>
 800816a:	4b26      	ldr	r3, [pc, #152]	; (8008204 <HAL_RCC_OscConfig+0x44c>)
 800816c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800816e:	4a25      	ldr	r2, [pc, #148]	; (8008204 <HAL_RCC_OscConfig+0x44c>)
 8008170:	f043 0301 	orr.w	r3, r3, #1
 8008174:	6713      	str	r3, [r2, #112]	; 0x70
 8008176:	e01c      	b.n	80081b2 <HAL_RCC_OscConfig+0x3fa>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	2b05      	cmp	r3, #5
 800817e:	d10c      	bne.n	800819a <HAL_RCC_OscConfig+0x3e2>
 8008180:	4b20      	ldr	r3, [pc, #128]	; (8008204 <HAL_RCC_OscConfig+0x44c>)
 8008182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008184:	4a1f      	ldr	r2, [pc, #124]	; (8008204 <HAL_RCC_OscConfig+0x44c>)
 8008186:	f043 0304 	orr.w	r3, r3, #4
 800818a:	6713      	str	r3, [r2, #112]	; 0x70
 800818c:	4b1d      	ldr	r3, [pc, #116]	; (8008204 <HAL_RCC_OscConfig+0x44c>)
 800818e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008190:	4a1c      	ldr	r2, [pc, #112]	; (8008204 <HAL_RCC_OscConfig+0x44c>)
 8008192:	f043 0301 	orr.w	r3, r3, #1
 8008196:	6713      	str	r3, [r2, #112]	; 0x70
 8008198:	e00b      	b.n	80081b2 <HAL_RCC_OscConfig+0x3fa>
 800819a:	4b1a      	ldr	r3, [pc, #104]	; (8008204 <HAL_RCC_OscConfig+0x44c>)
 800819c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800819e:	4a19      	ldr	r2, [pc, #100]	; (8008204 <HAL_RCC_OscConfig+0x44c>)
 80081a0:	f023 0301 	bic.w	r3, r3, #1
 80081a4:	6713      	str	r3, [r2, #112]	; 0x70
 80081a6:	4b17      	ldr	r3, [pc, #92]	; (8008204 <HAL_RCC_OscConfig+0x44c>)
 80081a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081aa:	4a16      	ldr	r2, [pc, #88]	; (8008204 <HAL_RCC_OscConfig+0x44c>)
 80081ac:	f023 0304 	bic.w	r3, r3, #4
 80081b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d015      	beq.n	80081e6 <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081ba:	f7fa fd43 	bl	8002c44 <HAL_GetTick>
 80081be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081c0:	e00a      	b.n	80081d8 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081c2:	f7fa fd3f 	bl	8002c44 <HAL_GetTick>
 80081c6:	4602      	mov	r2, r0
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d901      	bls.n	80081d8 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e140      	b.n	800845a <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081d8:	4b0a      	ldr	r3, [pc, #40]	; (8008204 <HAL_RCC_OscConfig+0x44c>)
 80081da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081dc:	f003 0302 	and.w	r3, r3, #2
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d0ee      	beq.n	80081c2 <HAL_RCC_OscConfig+0x40a>
 80081e4:	e01c      	b.n	8008220 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081e6:	f7fa fd2d 	bl	8002c44 <HAL_GetTick>
 80081ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081ec:	e012      	b.n	8008214 <HAL_RCC_OscConfig+0x45c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081ee:	f7fa fd29 	bl	8002c44 <HAL_GetTick>
 80081f2:	4602      	mov	r2, r0
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d909      	bls.n	8008214 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 8008200:	2303      	movs	r3, #3
 8008202:	e12a      	b.n	800845a <HAL_RCC_OscConfig+0x6a2>
 8008204:	40023800 	.word	0x40023800
 8008208:	0800bbf4 	.word	0x0800bbf4
 800820c:	42470e80 	.word	0x42470e80
 8008210:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008214:	4b93      	ldr	r3, [pc, #588]	; (8008464 <HAL_RCC_OscConfig+0x6ac>)
 8008216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008218:	f003 0302 	and.w	r3, r3, #2
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1e6      	bne.n	80081ee <HAL_RCC_OscConfig+0x436>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d105      	bne.n	8008232 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008226:	4b8f      	ldr	r3, [pc, #572]	; (8008464 <HAL_RCC_OscConfig+0x6ac>)
 8008228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822a:	4a8e      	ldr	r2, [pc, #568]	; (8008464 <HAL_RCC_OscConfig+0x6ac>)
 800822c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008230:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00c      	beq.n	8008254 <HAL_RCC_OscConfig+0x49c>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d008      	beq.n	8008254 <HAL_RCC_OscConfig+0x49c>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	2b02      	cmp	r3, #2
 8008248:	d004      	beq.n	8008254 <HAL_RCC_OscConfig+0x49c>
 800824a:	f640 6103 	movw	r1, #3587	; 0xe03
 800824e:	4886      	ldr	r0, [pc, #536]	; (8008468 <HAL_RCC_OscConfig+0x6b0>)
 8008250:	f7fa f9d5 	bl	80025fe <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	2b00      	cmp	r3, #0
 800825a:	f000 80fd 	beq.w	8008458 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800825e:	4b81      	ldr	r3, [pc, #516]	; (8008464 <HAL_RCC_OscConfig+0x6ac>)
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	f003 030c 	and.w	r3, r3, #12
 8008266:	2b08      	cmp	r3, #8
 8008268:	f000 80b6 	beq.w	80083d8 <HAL_RCC_OscConfig+0x620>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	2b02      	cmp	r3, #2
 8008272:	f040 809a 	bne.w	80083aa <HAL_RCC_OscConfig+0x5f2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d009      	beq.n	8008292 <HAL_RCC_OscConfig+0x4da>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008286:	d004      	beq.n	8008292 <HAL_RCC_OscConfig+0x4da>
 8008288:	f640 610c 	movw	r1, #3596	; 0xe0c
 800828c:	4876      	ldr	r0, [pc, #472]	; (8008468 <HAL_RCC_OscConfig+0x6b0>)
 800828e:	f7fa f9b6 	bl	80025fe <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a1b      	ldr	r3, [r3, #32]
 8008296:	2b3f      	cmp	r3, #63	; 0x3f
 8008298:	d904      	bls.n	80082a4 <HAL_RCC_OscConfig+0x4ec>
 800829a:	f640 610d 	movw	r1, #3597	; 0xe0d
 800829e:	4872      	ldr	r0, [pc, #456]	; (8008468 <HAL_RCC_OscConfig+0x6b0>)
 80082a0:	f7fa f9ad 	bl	80025fe <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	2b31      	cmp	r3, #49	; 0x31
 80082aa:	d904      	bls.n	80082b6 <HAL_RCC_OscConfig+0x4fe>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80082b4:	d904      	bls.n	80082c0 <HAL_RCC_OscConfig+0x508>
 80082b6:	f640 610e 	movw	r1, #3598	; 0xe0e
 80082ba:	486b      	ldr	r0, [pc, #428]	; (8008468 <HAL_RCC_OscConfig+0x6b0>)
 80082bc:	f7fa f99f 	bl	80025fe <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d010      	beq.n	80082ea <HAL_RCC_OscConfig+0x532>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082cc:	2b04      	cmp	r3, #4
 80082ce:	d00c      	beq.n	80082ea <HAL_RCC_OscConfig+0x532>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d4:	2b06      	cmp	r3, #6
 80082d6:	d008      	beq.n	80082ea <HAL_RCC_OscConfig+0x532>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082dc:	2b08      	cmp	r3, #8
 80082de:	d004      	beq.n	80082ea <HAL_RCC_OscConfig+0x532>
 80082e0:	f640 610f 	movw	r1, #3599	; 0xe0f
 80082e4:	4860      	ldr	r0, [pc, #384]	; (8008468 <HAL_RCC_OscConfig+0x6b0>)
 80082e6:	f7fa f98a 	bl	80025fe <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d903      	bls.n	80082fa <HAL_RCC_OscConfig+0x542>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f6:	2b0f      	cmp	r3, #15
 80082f8:	d904      	bls.n	8008304 <HAL_RCC_OscConfig+0x54c>
 80082fa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80082fe:	485a      	ldr	r0, [pc, #360]	; (8008468 <HAL_RCC_OscConfig+0x6b0>)
 8008300:	f7fa f97d 	bl	80025fe <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008308:	2b01      	cmp	r3, #1
 800830a:	d903      	bls.n	8008314 <HAL_RCC_OscConfig+0x55c>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008310:	2b07      	cmp	r3, #7
 8008312:	d904      	bls.n	800831e <HAL_RCC_OscConfig+0x566>
 8008314:	f640 6111 	movw	r1, #3601	; 0xe11
 8008318:	4853      	ldr	r0, [pc, #332]	; (8008468 <HAL_RCC_OscConfig+0x6b0>)
 800831a:	f7fa f970 	bl	80025fe <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800831e:	4b53      	ldr	r3, [pc, #332]	; (800846c <HAL_RCC_OscConfig+0x6b4>)
 8008320:	2200      	movs	r2, #0
 8008322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008324:	f7fa fc8e 	bl	8002c44 <HAL_GetTick>
 8008328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800832a:	e008      	b.n	800833e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800832c:	f7fa fc8a 	bl	8002c44 <HAL_GetTick>
 8008330:	4602      	mov	r2, r0
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	2b02      	cmp	r3, #2
 8008338:	d901      	bls.n	800833e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800833a:	2303      	movs	r3, #3
 800833c:	e08d      	b.n	800845a <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800833e:	4b49      	ldr	r3, [pc, #292]	; (8008464 <HAL_RCC_OscConfig+0x6ac>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1f0      	bne.n	800832c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	69da      	ldr	r2, [r3, #28]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	431a      	orrs	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	019b      	lsls	r3, r3, #6
 800835a:	431a      	orrs	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008360:	085b      	lsrs	r3, r3, #1
 8008362:	3b01      	subs	r3, #1
 8008364:	041b      	lsls	r3, r3, #16
 8008366:	431a      	orrs	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836c:	061b      	lsls	r3, r3, #24
 800836e:	431a      	orrs	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008374:	071b      	lsls	r3, r3, #28
 8008376:	493b      	ldr	r1, [pc, #236]	; (8008464 <HAL_RCC_OscConfig+0x6ac>)
 8008378:	4313      	orrs	r3, r2
 800837a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800837c:	4b3b      	ldr	r3, [pc, #236]	; (800846c <HAL_RCC_OscConfig+0x6b4>)
 800837e:	2201      	movs	r2, #1
 8008380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008382:	f7fa fc5f 	bl	8002c44 <HAL_GetTick>
 8008386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008388:	e008      	b.n	800839c <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800838a:	f7fa fc5b 	bl	8002c44 <HAL_GetTick>
 800838e:	4602      	mov	r2, r0
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	2b02      	cmp	r3, #2
 8008396:	d901      	bls.n	800839c <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 8008398:	2303      	movs	r3, #3
 800839a:	e05e      	b.n	800845a <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800839c:	4b31      	ldr	r3, [pc, #196]	; (8008464 <HAL_RCC_OscConfig+0x6ac>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d0f0      	beq.n	800838a <HAL_RCC_OscConfig+0x5d2>
 80083a8:	e056      	b.n	8008458 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083aa:	4b30      	ldr	r3, [pc, #192]	; (800846c <HAL_RCC_OscConfig+0x6b4>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083b0:	f7fa fc48 	bl	8002c44 <HAL_GetTick>
 80083b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083b6:	e008      	b.n	80083ca <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083b8:	f7fa fc44 	bl	8002c44 <HAL_GetTick>
 80083bc:	4602      	mov	r2, r0
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d901      	bls.n	80083ca <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e047      	b.n	800845a <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083ca:	4b26      	ldr	r3, [pc, #152]	; (8008464 <HAL_RCC_OscConfig+0x6ac>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1f0      	bne.n	80083b8 <HAL_RCC_OscConfig+0x600>
 80083d6:	e03f      	b.n	8008458 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d101      	bne.n	80083e4 <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e03a      	b.n	800845a <HAL_RCC_OscConfig+0x6a2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80083e4:	4b1f      	ldr	r3, [pc, #124]	; (8008464 <HAL_RCC_OscConfig+0x6ac>)
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d030      	beq.n	8008454 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d129      	bne.n	8008454 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800840a:	429a      	cmp	r2, r3
 800840c:	d122      	bne.n	8008454 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008414:	4013      	ands	r3, r2
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800841a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800841c:	4293      	cmp	r3, r2
 800841e:	d119      	bne.n	8008454 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842a:	085b      	lsrs	r3, r3, #1
 800842c:	3b01      	subs	r3, #1
 800842e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008430:	429a      	cmp	r2, r3
 8008432:	d10f      	bne.n	8008454 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008440:	429a      	cmp	r2, r3
 8008442:	d107      	bne.n	8008454 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008450:	429a      	cmp	r2, r3
 8008452:	d001      	beq.n	8008458 <HAL_RCC_OscConfig+0x6a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e000      	b.n	800845a <HAL_RCC_OscConfig+0x6a2>
        }
      }
    }
  }
  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3718      	adds	r7, #24
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	40023800 	.word	0x40023800
 8008468:	0800bbf4 	.word	0x0800bbf4
 800846c:	42470060 	.word	0x42470060

08008470 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e1a4      	b.n	80087cc <HAL_SPI_Init+0x35c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a72      	ldr	r2, [pc, #456]	; (8008650 <HAL_SPI_Init+0x1e0>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d013      	beq.n	80084b4 <HAL_SPI_Init+0x44>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a70      	ldr	r2, [pc, #448]	; (8008654 <HAL_SPI_Init+0x1e4>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d00e      	beq.n	80084b4 <HAL_SPI_Init+0x44>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a6f      	ldr	r2, [pc, #444]	; (8008658 <HAL_SPI_Init+0x1e8>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d009      	beq.n	80084b4 <HAL_SPI_Init+0x44>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a6d      	ldr	r2, [pc, #436]	; (800865c <HAL_SPI_Init+0x1ec>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d004      	beq.n	80084b4 <HAL_SPI_Init+0x44>
 80084aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80084ae:	486c      	ldr	r0, [pc, #432]	; (8008660 <HAL_SPI_Init+0x1f0>)
 80084b0:	f7fa f8a5 	bl	80025fe <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d009      	beq.n	80084d0 <HAL_SPI_Init+0x60>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084c4:	d004      	beq.n	80084d0 <HAL_SPI_Init+0x60>
 80084c6:	f240 1141 	movw	r1, #321	; 0x141
 80084ca:	4865      	ldr	r0, [pc, #404]	; (8008660 <HAL_SPI_Init+0x1f0>)
 80084cc:	f7fa f897 	bl	80025fe <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00e      	beq.n	80084f6 <HAL_SPI_Init+0x86>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084e0:	d009      	beq.n	80084f6 <HAL_SPI_Init+0x86>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084ea:	d004      	beq.n	80084f6 <HAL_SPI_Init+0x86>
 80084ec:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80084f0:	485b      	ldr	r0, [pc, #364]	; (8008660 <HAL_SPI_Init+0x1f0>)
 80084f2:	f7fa f884 	bl	80025fe <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084fe:	d008      	beq.n	8008512 <HAL_SPI_Init+0xa2>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d004      	beq.n	8008512 <HAL_SPI_Init+0xa2>
 8008508:	f240 1143 	movw	r1, #323	; 0x143
 800850c:	4854      	ldr	r0, [pc, #336]	; (8008660 <HAL_SPI_Init+0x1f0>)
 800850e:	f7fa f876 	bl	80025fe <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800851a:	d00d      	beq.n	8008538 <HAL_SPI_Init+0xc8>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	699b      	ldr	r3, [r3, #24]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d009      	beq.n	8008538 <HAL_SPI_Init+0xc8>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800852c:	d004      	beq.n	8008538 <HAL_SPI_Init+0xc8>
 800852e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8008532:	484b      	ldr	r0, [pc, #300]	; (8008660 <HAL_SPI_Init+0x1f0>)
 8008534:	f7fa f863 	bl	80025fe <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d020      	beq.n	8008582 <HAL_SPI_Init+0x112>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	69db      	ldr	r3, [r3, #28]
 8008544:	2b08      	cmp	r3, #8
 8008546:	d01c      	beq.n	8008582 <HAL_SPI_Init+0x112>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	2b10      	cmp	r3, #16
 800854e:	d018      	beq.n	8008582 <HAL_SPI_Init+0x112>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	69db      	ldr	r3, [r3, #28]
 8008554:	2b18      	cmp	r3, #24
 8008556:	d014      	beq.n	8008582 <HAL_SPI_Init+0x112>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	69db      	ldr	r3, [r3, #28]
 800855c:	2b20      	cmp	r3, #32
 800855e:	d010      	beq.n	8008582 <HAL_SPI_Init+0x112>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	69db      	ldr	r3, [r3, #28]
 8008564:	2b28      	cmp	r3, #40	; 0x28
 8008566:	d00c      	beq.n	8008582 <HAL_SPI_Init+0x112>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	69db      	ldr	r3, [r3, #28]
 800856c:	2b30      	cmp	r3, #48	; 0x30
 800856e:	d008      	beq.n	8008582 <HAL_SPI_Init+0x112>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	2b38      	cmp	r3, #56	; 0x38
 8008576:	d004      	beq.n	8008582 <HAL_SPI_Init+0x112>
 8008578:	f240 1145 	movw	r1, #325	; 0x145
 800857c:	4838      	ldr	r0, [pc, #224]	; (8008660 <HAL_SPI_Init+0x1f0>)
 800857e:	f7fa f83e 	bl	80025fe <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d008      	beq.n	800859c <HAL_SPI_Init+0x12c>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	2b80      	cmp	r3, #128	; 0x80
 8008590:	d004      	beq.n	800859c <HAL_SPI_Init+0x12c>
 8008592:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8008596:	4832      	ldr	r0, [pc, #200]	; (8008660 <HAL_SPI_Init+0x1f0>)
 8008598:	f7fa f831 	bl	80025fe <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d008      	beq.n	80085b6 <HAL_SPI_Init+0x146>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	2b10      	cmp	r3, #16
 80085aa:	d004      	beq.n	80085b6 <HAL_SPI_Init+0x146>
 80085ac:	f240 1147 	movw	r1, #327	; 0x147
 80085b0:	482b      	ldr	r0, [pc, #172]	; (8008660 <HAL_SPI_Init+0x1f0>)
 80085b2:	f7fa f824 	bl	80025fe <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d152      	bne.n	8008664 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d008      	beq.n	80085d8 <HAL_SPI_Init+0x168>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d004      	beq.n	80085d8 <HAL_SPI_Init+0x168>
 80085ce:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80085d2:	4823      	ldr	r0, [pc, #140]	; (8008660 <HAL_SPI_Init+0x1f0>)
 80085d4:	f7fa f813 	bl	80025fe <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d008      	beq.n	80085f2 <HAL_SPI_Init+0x182>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	695b      	ldr	r3, [r3, #20]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d004      	beq.n	80085f2 <HAL_SPI_Init+0x182>
 80085e8:	f240 114b 	movw	r1, #331	; 0x14b
 80085ec:	481c      	ldr	r0, [pc, #112]	; (8008660 <HAL_SPI_Init+0x1f0>)
 80085ee:	f7fa f806 	bl	80025fe <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085fa:	d125      	bne.n	8008648 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	69db      	ldr	r3, [r3, #28]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d05a      	beq.n	80086ba <HAL_SPI_Init+0x24a>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	69db      	ldr	r3, [r3, #28]
 8008608:	2b08      	cmp	r3, #8
 800860a:	d056      	beq.n	80086ba <HAL_SPI_Init+0x24a>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	69db      	ldr	r3, [r3, #28]
 8008610:	2b10      	cmp	r3, #16
 8008612:	d052      	beq.n	80086ba <HAL_SPI_Init+0x24a>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	69db      	ldr	r3, [r3, #28]
 8008618:	2b18      	cmp	r3, #24
 800861a:	d04e      	beq.n	80086ba <HAL_SPI_Init+0x24a>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	2b20      	cmp	r3, #32
 8008622:	d04a      	beq.n	80086ba <HAL_SPI_Init+0x24a>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	69db      	ldr	r3, [r3, #28]
 8008628:	2b28      	cmp	r3, #40	; 0x28
 800862a:	d046      	beq.n	80086ba <HAL_SPI_Init+0x24a>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	69db      	ldr	r3, [r3, #28]
 8008630:	2b30      	cmp	r3, #48	; 0x30
 8008632:	d042      	beq.n	80086ba <HAL_SPI_Init+0x24a>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	69db      	ldr	r3, [r3, #28]
 8008638:	2b38      	cmp	r3, #56	; 0x38
 800863a:	d03e      	beq.n	80086ba <HAL_SPI_Init+0x24a>
 800863c:	f240 114f 	movw	r1, #335	; 0x14f
 8008640:	4807      	ldr	r0, [pc, #28]	; (8008660 <HAL_SPI_Init+0x1f0>)
 8008642:	f7f9 ffdc 	bl	80025fe <assert_failed>
 8008646:	e038      	b.n	80086ba <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	61da      	str	r2, [r3, #28]
 800864e:	e034      	b.n	80086ba <HAL_SPI_Init+0x24a>
 8008650:	40013000 	.word	0x40013000
 8008654:	40003800 	.word	0x40003800
 8008658:	40003c00 	.word	0x40003c00
 800865c:	40013400 	.word	0x40013400
 8008660:	0800bc30 	.word	0x0800bc30
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	69db      	ldr	r3, [r3, #28]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d020      	beq.n	80086ae <HAL_SPI_Init+0x23e>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	69db      	ldr	r3, [r3, #28]
 8008670:	2b08      	cmp	r3, #8
 8008672:	d01c      	beq.n	80086ae <HAL_SPI_Init+0x23e>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	69db      	ldr	r3, [r3, #28]
 8008678:	2b10      	cmp	r3, #16
 800867a:	d018      	beq.n	80086ae <HAL_SPI_Init+0x23e>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	69db      	ldr	r3, [r3, #28]
 8008680:	2b18      	cmp	r3, #24
 8008682:	d014      	beq.n	80086ae <HAL_SPI_Init+0x23e>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	69db      	ldr	r3, [r3, #28]
 8008688:	2b20      	cmp	r3, #32
 800868a:	d010      	beq.n	80086ae <HAL_SPI_Init+0x23e>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	69db      	ldr	r3, [r3, #28]
 8008690:	2b28      	cmp	r3, #40	; 0x28
 8008692:	d00c      	beq.n	80086ae <HAL_SPI_Init+0x23e>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	69db      	ldr	r3, [r3, #28]
 8008698:	2b30      	cmp	r3, #48	; 0x30
 800869a:	d008      	beq.n	80086ae <HAL_SPI_Init+0x23e>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	69db      	ldr	r3, [r3, #28]
 80086a0:	2b38      	cmp	r3, #56	; 0x38
 80086a2:	d004      	beq.n	80086ae <HAL_SPI_Init+0x23e>
 80086a4:	f240 1159 	movw	r1, #345	; 0x159
 80086a8:	484a      	ldr	r0, [pc, #296]	; (80087d4 <HAL_SPI_Init+0x364>)
 80086aa:	f7f9 ffa8 	bl	80025fe <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d126      	bne.n	800871a <HAL_SPI_Init+0x2aa>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a40      	ldr	r2, [pc, #256]	; (80087d8 <HAL_SPI_Init+0x368>)
 80086d8:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a3f      	ldr	r2, [pc, #252]	; (80087dc <HAL_SPI_Init+0x36c>)
 80086de:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a3f      	ldr	r2, [pc, #252]	; (80087e0 <HAL_SPI_Init+0x370>)
 80086e4:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a3e      	ldr	r2, [pc, #248]	; (80087e4 <HAL_SPI_Init+0x374>)
 80086ea:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a3e      	ldr	r2, [pc, #248]	; (80087e8 <HAL_SPI_Init+0x378>)
 80086f0:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a3d      	ldr	r2, [pc, #244]	; (80087ec <HAL_SPI_Init+0x37c>)
 80086f6:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a3d      	ldr	r2, [pc, #244]	; (80087f0 <HAL_SPI_Init+0x380>)
 80086fc:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a3c      	ldr	r2, [pc, #240]	; (80087f4 <HAL_SPI_Init+0x384>)
 8008702:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008708:	2b00      	cmp	r3, #0
 800870a:	d102      	bne.n	8008712 <HAL_SPI_Init+0x2a2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a3a      	ldr	r2, [pc, #232]	; (80087f8 <HAL_SPI_Init+0x388>)
 8008710:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2202      	movs	r2, #2
 800871e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008730:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008742:	431a      	orrs	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800874c:	431a      	orrs	r2, r3
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	f003 0302 	and.w	r3, r3, #2
 8008756:	431a      	orrs	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	f003 0301 	and.w	r3, r3, #1
 8008760:	431a      	orrs	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800876a:	431a      	orrs	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	69db      	ldr	r3, [r3, #28]
 8008770:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008774:	431a      	orrs	r2, r3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800877e:	ea42 0103 	orr.w	r1, r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008786:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	430a      	orrs	r2, r1
 8008790:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	0c1b      	lsrs	r3, r3, #16
 8008798:	f003 0104 	and.w	r1, r3, #4
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a0:	f003 0210 	and.w	r2, r3, #16
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	430a      	orrs	r2, r1
 80087aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	69da      	ldr	r2, [r3, #28]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	0800bc30 	.word	0x0800bc30
 80087d8:	08008d59 	.word	0x08008d59
 80087dc:	08008d6d 	.word	0x08008d6d
 80087e0:	08008d81 	.word	0x08008d81
 80087e4:	08008d95 	.word	0x08008d95
 80087e8:	08008da9 	.word	0x08008da9
 80087ec:	08008dbd 	.word	0x08008dbd
 80087f0:	08008dd1 	.word	0x08008dd1
 80087f4:	08008de5 	.word	0x08008de5
 80087f8:	08002681 	.word	0x08002681

080087fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b08c      	sub	sp, #48	; 0x30
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
 8008808:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800880a:	2301      	movs	r3, #1
 800880c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d004      	beq.n	8008826 <HAL_SPI_TransmitReceive+0x2a>
 800881c:	f240 417c 	movw	r1, #1148	; 0x47c
 8008820:	4884      	ldr	r0, [pc, #528]	; (8008a34 <HAL_SPI_TransmitReceive+0x238>)
 8008822:	f7f9 feec 	bl	80025fe <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800882c:	2b01      	cmp	r3, #1
 800882e:	d101      	bne.n	8008834 <HAL_SPI_TransmitReceive+0x38>
 8008830:	2302      	movs	r3, #2
 8008832:	e18d      	b.n	8008b50 <HAL_SPI_TransmitReceive+0x354>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800883c:	f7fa fa02 	bl	8002c44 <HAL_GetTick>
 8008840:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008848:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008852:	887b      	ldrh	r3, [r7, #2]
 8008854:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008856:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800885a:	2b01      	cmp	r3, #1
 800885c:	d00f      	beq.n	800887e <HAL_SPI_TransmitReceive+0x82>
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008864:	d107      	bne.n	8008876 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d103      	bne.n	8008876 <HAL_SPI_TransmitReceive+0x7a>
 800886e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008872:	2b04      	cmp	r3, #4
 8008874:	d003      	beq.n	800887e <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8008876:	2302      	movs	r3, #2
 8008878:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800887c:	e15e      	b.n	8008b3c <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d005      	beq.n	8008890 <HAL_SPI_TransmitReceive+0x94>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d002      	beq.n	8008890 <HAL_SPI_TransmitReceive+0x94>
 800888a:	887b      	ldrh	r3, [r7, #2]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d103      	bne.n	8008898 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008896:	e151      	b.n	8008b3c <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b04      	cmp	r3, #4
 80088a2:	d003      	beq.n	80088ac <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2205      	movs	r2, #5
 80088a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	887a      	ldrh	r2, [r7, #2]
 80088bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	887a      	ldrh	r2, [r7, #2]
 80088c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	887a      	ldrh	r2, [r7, #2]
 80088ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	887a      	ldrh	r2, [r7, #2]
 80088d4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ec:	2b40      	cmp	r3, #64	; 0x40
 80088ee:	d007      	beq.n	8008900 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008908:	d178      	bne.n	80089fc <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d002      	beq.n	8008918 <HAL_SPI_TransmitReceive+0x11c>
 8008912:	8b7b      	ldrh	r3, [r7, #26]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d166      	bne.n	80089e6 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891c:	881a      	ldrh	r2, [r3, #0]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008928:	1c9a      	adds	r2, r3, #2
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008932:	b29b      	uxth	r3, r3
 8008934:	3b01      	subs	r3, #1
 8008936:	b29a      	uxth	r2, r3
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800893c:	e053      	b.n	80089e6 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	f003 0302 	and.w	r3, r3, #2
 8008948:	2b02      	cmp	r3, #2
 800894a:	d11b      	bne.n	8008984 <HAL_SPI_TransmitReceive+0x188>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008950:	b29b      	uxth	r3, r3
 8008952:	2b00      	cmp	r3, #0
 8008954:	d016      	beq.n	8008984 <HAL_SPI_TransmitReceive+0x188>
 8008956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008958:	2b01      	cmp	r3, #1
 800895a:	d113      	bne.n	8008984 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008960:	881a      	ldrh	r2, [r3, #0]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896c:	1c9a      	adds	r2, r3, #2
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008976:	b29b      	uxth	r3, r3
 8008978:	3b01      	subs	r3, #1
 800897a:	b29a      	uxth	r2, r3
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008980:	2300      	movs	r3, #0
 8008982:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	2b01      	cmp	r3, #1
 8008990:	d119      	bne.n	80089c6 <HAL_SPI_TransmitReceive+0x1ca>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008996:	b29b      	uxth	r3, r3
 8008998:	2b00      	cmp	r3, #0
 800899a:	d014      	beq.n	80089c6 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68da      	ldr	r2, [r3, #12]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a6:	b292      	uxth	r2, r2
 80089a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ae:	1c9a      	adds	r2, r3, #2
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	3b01      	subs	r3, #1
 80089bc:	b29a      	uxth	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80089c2:	2301      	movs	r3, #1
 80089c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80089c6:	f7fa f93d 	bl	8002c44 <HAL_GetTick>
 80089ca:	4602      	mov	r2, r0
 80089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d807      	bhi.n	80089e6 <HAL_SPI_TransmitReceive+0x1ea>
 80089d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089dc:	d003      	beq.n	80089e6 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 80089de:	2303      	movs	r3, #3
 80089e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80089e4:	e0aa      	b.n	8008b3c <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1a6      	bne.n	800893e <HAL_SPI_TransmitReceive+0x142>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d1a1      	bne.n	800893e <HAL_SPI_TransmitReceive+0x142>
 80089fa:	e07f      	b.n	8008afc <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d002      	beq.n	8008a0a <HAL_SPI_TransmitReceive+0x20e>
 8008a04:	8b7b      	ldrh	r3, [r7, #26]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d16e      	bne.n	8008ae8 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	330c      	adds	r3, #12
 8008a14:	7812      	ldrb	r2, [r2, #0]
 8008a16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1c:	1c5a      	adds	r2, r3, #1
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	b29a      	uxth	r2, r3
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a30:	e05a      	b.n	8008ae8 <HAL_SPI_TransmitReceive+0x2ec>
 8008a32:	bf00      	nop
 8008a34:	0800bc30 	.word	0x0800bc30
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	f003 0302 	and.w	r3, r3, #2
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d11c      	bne.n	8008a80 <HAL_SPI_TransmitReceive+0x284>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d017      	beq.n	8008a80 <HAL_SPI_TransmitReceive+0x284>
 8008a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d114      	bne.n	8008a80 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	330c      	adds	r3, #12
 8008a60:	7812      	ldrb	r2, [r2, #0]
 8008a62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a68:	1c5a      	adds	r2, r3, #1
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	3b01      	subs	r3, #1
 8008a76:	b29a      	uxth	r2, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d119      	bne.n	8008ac2 <HAL_SPI_TransmitReceive+0x2c6>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d014      	beq.n	8008ac2 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68da      	ldr	r2, [r3, #12]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa2:	b2d2      	uxtb	r2, r2
 8008aa4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ac2:	f7fa f8bf 	bl	8002c44 <HAL_GetTick>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d803      	bhi.n	8008ada <HAL_SPI_TransmitReceive+0x2de>
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad8:	d102      	bne.n	8008ae0 <HAL_SPI_TransmitReceive+0x2e4>
 8008ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d103      	bne.n	8008ae8 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ae6:	e029      	b.n	8008b3c <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1a2      	bne.n	8008a38 <HAL_SPI_TransmitReceive+0x23c>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d19d      	bne.n	8008a38 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008afe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f000 fa17 	bl	8008f34 <SPI_EndRxTxTransaction>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d006      	beq.n	8008b1a <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2220      	movs	r2, #32
 8008b16:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008b18:	e010      	b.n	8008b3c <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10b      	bne.n	8008b3a <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b22:	2300      	movs	r3, #0
 8008b24:	617b      	str	r3, [r7, #20]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	617b      	str	r3, [r7, #20]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	617b      	str	r3, [r7, #20]
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	e000      	b.n	8008b3c <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8008b3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008b4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3730      	adds	r7, #48	; 0x30
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b088      	sub	sp, #32
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	099b      	lsrs	r3, r3, #6
 8008b74:	f003 0301 	and.w	r3, r3, #1
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10f      	bne.n	8008b9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00a      	beq.n	8008b9c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	099b      	lsrs	r3, r3, #6
 8008b8a:	f003 0301 	and.w	r3, r3, #1
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d004      	beq.n	8008b9c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	4798      	blx	r3
    return;
 8008b9a:	e0d8      	b.n	8008d4e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	085b      	lsrs	r3, r3, #1
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00a      	beq.n	8008bbe <HAL_SPI_IRQHandler+0x66>
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	09db      	lsrs	r3, r3, #7
 8008bac:	f003 0301 	and.w	r3, r3, #1
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d004      	beq.n	8008bbe <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	4798      	blx	r3
    return;
 8008bbc:	e0c7      	b.n	8008d4e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	095b      	lsrs	r3, r3, #5
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10c      	bne.n	8008be4 <HAL_SPI_IRQHandler+0x8c>
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	099b      	lsrs	r3, r3, #6
 8008bce:	f003 0301 	and.w	r3, r3, #1
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d106      	bne.n	8008be4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	0a1b      	lsrs	r3, r3, #8
 8008bda:	f003 0301 	and.w	r3, r3, #1
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	f000 80b5 	beq.w	8008d4e <HAL_SPI_IRQHandler+0x1f6>
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	095b      	lsrs	r3, r3, #5
 8008be8:	f003 0301 	and.w	r3, r3, #1
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 80ae 	beq.w	8008d4e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	099b      	lsrs	r3, r3, #6
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d023      	beq.n	8008c46 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d011      	beq.n	8008c2e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c0e:	f043 0204 	orr.w	r2, r3, #4
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c16:	2300      	movs	r3, #0
 8008c18:	617b      	str	r3, [r7, #20]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	617b      	str	r3, [r7, #20]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	617b      	str	r3, [r7, #20]
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	e00b      	b.n	8008c46 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c2e:	2300      	movs	r3, #0
 8008c30:	613b      	str	r3, [r7, #16]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	613b      	str	r3, [r7, #16]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	613b      	str	r3, [r7, #16]
 8008c42:	693b      	ldr	r3, [r7, #16]
        return;
 8008c44:	e083      	b.n	8008d4e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	095b      	lsrs	r3, r3, #5
 8008c4a:	f003 0301 	and.w	r3, r3, #1
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d014      	beq.n	8008c7c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c56:	f043 0201 	orr.w	r2, r3, #1
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008c5e:	2300      	movs	r3, #0
 8008c60:	60fb      	str	r3, [r7, #12]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	60fb      	str	r3, [r7, #12]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c78:	601a      	str	r2, [r3, #0]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	0a1b      	lsrs	r3, r3, #8
 8008c80:	f003 0301 	and.w	r3, r3, #1
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00c      	beq.n	8008ca2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c8c:	f043 0208 	orr.w	r2, r3, #8
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008c94:	2300      	movs	r3, #0
 8008c96:	60bb      	str	r3, [r7, #8]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	60bb      	str	r3, [r7, #8]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d050      	beq.n	8008d4c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	685a      	ldr	r2, [r3, #4]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008cb8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	f003 0302 	and.w	r3, r3, #2
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d104      	bne.n	8008cd6 <HAL_SPI_IRQHandler+0x17e>
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d034      	beq.n	8008d40 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	685a      	ldr	r2, [r3, #4]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f022 0203 	bic.w	r2, r2, #3
 8008ce4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d011      	beq.n	8008d12 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cf2:	4a18      	ldr	r2, [pc, #96]	; (8008d54 <HAL_SPI_IRQHandler+0x1fc>)
 8008cf4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7fb ff66 	bl	8004bcc <HAL_DMA_Abort_IT>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d005      	beq.n	8008d12 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d017      	beq.n	8008d4a <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d1e:	4a0d      	ldr	r2, [pc, #52]	; (8008d54 <HAL_SPI_IRQHandler+0x1fc>)
 8008d20:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fb ff50 	bl	8004bcc <HAL_DMA_Abort_IT>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00b      	beq.n	8008d4a <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008d3e:	e004      	b.n	8008d4a <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008d48:	e000      	b.n	8008d4c <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8008d4a:	bf00      	nop
    return;
 8008d4c:	bf00      	nop
  }
}
 8008d4e:	3720      	adds	r7, #32
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	08008df9 	.word	0x08008df9

08008d58 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008d74:	bf00      	nop
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e04:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008e1a:	bf00      	nop
 8008e1c:	3710      	adds	r7, #16
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
	...

08008e24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b088      	sub	sp, #32
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	603b      	str	r3, [r7, #0]
 8008e30:	4613      	mov	r3, r2
 8008e32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008e34:	f7f9 ff06 	bl	8002c44 <HAL_GetTick>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3c:	1a9b      	subs	r3, r3, r2
 8008e3e:	683a      	ldr	r2, [r7, #0]
 8008e40:	4413      	add	r3, r2
 8008e42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008e44:	f7f9 fefe 	bl	8002c44 <HAL_GetTick>
 8008e48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008e4a:	4b39      	ldr	r3, [pc, #228]	; (8008f30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	015b      	lsls	r3, r3, #5
 8008e50:	0d1b      	lsrs	r3, r3, #20
 8008e52:	69fa      	ldr	r2, [r7, #28]
 8008e54:	fb02 f303 	mul.w	r3, r2, r3
 8008e58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e5a:	e054      	b.n	8008f06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e62:	d050      	beq.n	8008f06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e64:	f7f9 feee 	bl	8002c44 <HAL_GetTick>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	1ad3      	subs	r3, r2, r3
 8008e6e:	69fa      	ldr	r2, [r7, #28]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d902      	bls.n	8008e7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d13d      	bne.n	8008ef6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008e88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e92:	d111      	bne.n	8008eb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e9c:	d004      	beq.n	8008ea8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ea6:	d107      	bne.n	8008eb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008eb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ec0:	d10f      	bne.n	8008ee2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ed0:	601a      	str	r2, [r3, #0]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ee0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008ef2:	2303      	movs	r3, #3
 8008ef4:	e017      	b.n	8008f26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d101      	bne.n	8008f00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008efc:	2300      	movs	r3, #0
 8008efe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	3b01      	subs	r3, #1
 8008f04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	689a      	ldr	r2, [r3, #8]
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	4013      	ands	r3, r2
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	429a      	cmp	r2, r3
 8008f14:	bf0c      	ite	eq
 8008f16:	2301      	moveq	r3, #1
 8008f18:	2300      	movne	r3, #0
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	79fb      	ldrb	r3, [r7, #7]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d19b      	bne.n	8008e5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3720      	adds	r7, #32
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	20000040 	.word	0x20000040

08008f34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b088      	sub	sp, #32
 8008f38:	af02      	add	r7, sp, #8
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008f40:	4b1b      	ldr	r3, [pc, #108]	; (8008fb0 <SPI_EndRxTxTransaction+0x7c>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a1b      	ldr	r2, [pc, #108]	; (8008fb4 <SPI_EndRxTxTransaction+0x80>)
 8008f46:	fba2 2303 	umull	r2, r3, r2, r3
 8008f4a:	0d5b      	lsrs	r3, r3, #21
 8008f4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008f50:	fb02 f303 	mul.w	r3, r2, r3
 8008f54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f5e:	d112      	bne.n	8008f86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2200      	movs	r2, #0
 8008f68:	2180      	movs	r1, #128	; 0x80
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f7ff ff5a 	bl	8008e24 <SPI_WaitFlagStateUntilTimeout>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d016      	beq.n	8008fa4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f7a:	f043 0220 	orr.w	r2, r3, #32
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	e00f      	b.n	8008fa6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00a      	beq.n	8008fa2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f9c:	2b80      	cmp	r3, #128	; 0x80
 8008f9e:	d0f2      	beq.n	8008f86 <SPI_EndRxTxTransaction+0x52>
 8008fa0:	e000      	b.n	8008fa4 <SPI_EndRxTxTransaction+0x70>
        break;
 8008fa2:	bf00      	nop
  }

  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3718      	adds	r7, #24
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	20000040 	.word	0x20000040
 8008fb4:	165e9f81 	.word	0x165e9f81

08008fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d101      	bne.n	8008fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e0c5      	b.n	8009156 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a64      	ldr	r2, [pc, #400]	; (8009160 <HAL_TIM_Base_Init+0x1a8>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d045      	beq.n	8009060 <HAL_TIM_Base_Init+0xa8>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fdc:	d040      	beq.n	8009060 <HAL_TIM_Base_Init+0xa8>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a60      	ldr	r2, [pc, #384]	; (8009164 <HAL_TIM_Base_Init+0x1ac>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d03b      	beq.n	8009060 <HAL_TIM_Base_Init+0xa8>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a5e      	ldr	r2, [pc, #376]	; (8009168 <HAL_TIM_Base_Init+0x1b0>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d036      	beq.n	8009060 <HAL_TIM_Base_Init+0xa8>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a5d      	ldr	r2, [pc, #372]	; (800916c <HAL_TIM_Base_Init+0x1b4>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d031      	beq.n	8009060 <HAL_TIM_Base_Init+0xa8>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a5b      	ldr	r2, [pc, #364]	; (8009170 <HAL_TIM_Base_Init+0x1b8>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d02c      	beq.n	8009060 <HAL_TIM_Base_Init+0xa8>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a5a      	ldr	r2, [pc, #360]	; (8009174 <HAL_TIM_Base_Init+0x1bc>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d027      	beq.n	8009060 <HAL_TIM_Base_Init+0xa8>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a58      	ldr	r2, [pc, #352]	; (8009178 <HAL_TIM_Base_Init+0x1c0>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d022      	beq.n	8009060 <HAL_TIM_Base_Init+0xa8>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a57      	ldr	r2, [pc, #348]	; (800917c <HAL_TIM_Base_Init+0x1c4>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d01d      	beq.n	8009060 <HAL_TIM_Base_Init+0xa8>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a55      	ldr	r2, [pc, #340]	; (8009180 <HAL_TIM_Base_Init+0x1c8>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d018      	beq.n	8009060 <HAL_TIM_Base_Init+0xa8>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a54      	ldr	r2, [pc, #336]	; (8009184 <HAL_TIM_Base_Init+0x1cc>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d013      	beq.n	8009060 <HAL_TIM_Base_Init+0xa8>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a52      	ldr	r2, [pc, #328]	; (8009188 <HAL_TIM_Base_Init+0x1d0>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d00e      	beq.n	8009060 <HAL_TIM_Base_Init+0xa8>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a51      	ldr	r2, [pc, #324]	; (800918c <HAL_TIM_Base_Init+0x1d4>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d009      	beq.n	8009060 <HAL_TIM_Base_Init+0xa8>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a4f      	ldr	r2, [pc, #316]	; (8009190 <HAL_TIM_Base_Init+0x1d8>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d004      	beq.n	8009060 <HAL_TIM_Base_Init+0xa8>
 8009056:	f240 1113 	movw	r1, #275	; 0x113
 800905a:	484e      	ldr	r0, [pc, #312]	; (8009194 <HAL_TIM_Base_Init+0x1dc>)
 800905c:	f7f9 facf 	bl	80025fe <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d014      	beq.n	8009092 <HAL_TIM_Base_Init+0xda>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	2b10      	cmp	r3, #16
 800906e:	d010      	beq.n	8009092 <HAL_TIM_Base_Init+0xda>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	2b20      	cmp	r3, #32
 8009076:	d00c      	beq.n	8009092 <HAL_TIM_Base_Init+0xda>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	2b40      	cmp	r3, #64	; 0x40
 800907e:	d008      	beq.n	8009092 <HAL_TIM_Base_Init+0xda>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	2b60      	cmp	r3, #96	; 0x60
 8009086:	d004      	beq.n	8009092 <HAL_TIM_Base_Init+0xda>
 8009088:	f44f 718a 	mov.w	r1, #276	; 0x114
 800908c:	4841      	ldr	r0, [pc, #260]	; (8009194 <HAL_TIM_Base_Init+0x1dc>)
 800908e:	f7f9 fab6 	bl	80025fe <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00e      	beq.n	80090b8 <HAL_TIM_Base_Init+0x100>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090a2:	d009      	beq.n	80090b8 <HAL_TIM_Base_Init+0x100>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090ac:	d004      	beq.n	80090b8 <HAL_TIM_Base_Init+0x100>
 80090ae:	f240 1115 	movw	r1, #277	; 0x115
 80090b2:	4838      	ldr	r0, [pc, #224]	; (8009194 <HAL_TIM_Base_Init+0x1dc>)
 80090b4:	f7f9 faa3 	bl	80025fe <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d008      	beq.n	80090d2 <HAL_TIM_Base_Init+0x11a>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	2b80      	cmp	r3, #128	; 0x80
 80090c6:	d004      	beq.n	80090d2 <HAL_TIM_Base_Init+0x11a>
 80090c8:	f44f 718b 	mov.w	r1, #278	; 0x116
 80090cc:	4831      	ldr	r0, [pc, #196]	; (8009194 <HAL_TIM_Base_Init+0x1dc>)
 80090ce:	f7f9 fa96 	bl	80025fe <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d106      	bne.n	80090ec <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f856 	bl	8009198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2202      	movs	r2, #2
 80090f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	3304      	adds	r3, #4
 80090fc:	4619      	mov	r1, r3
 80090fe:	4610      	mov	r0, r2
 8009100:	f000 fa4a 	bl	8009598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	40010000 	.word	0x40010000
 8009164:	40000400 	.word	0x40000400
 8009168:	40000800 	.word	0x40000800
 800916c:	40000c00 	.word	0x40000c00
 8009170:	40001000 	.word	0x40001000
 8009174:	40001400 	.word	0x40001400
 8009178:	40010400 	.word	0x40010400
 800917c:	40014000 	.word	0x40014000
 8009180:	40014400 	.word	0x40014400
 8009184:	40014800 	.word	0x40014800
 8009188:	40001800 	.word	0x40001800
 800918c:	40001c00 	.word	0x40001c00
 8009190:	40002000 	.word	0x40002000
 8009194:	0800bc68 	.word	0x0800bc68

08009198 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a51      	ldr	r2, [pc, #324]	; (8009300 <HAL_TIM_Base_Start_IT+0x154>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d045      	beq.n	800924a <HAL_TIM_Base_Start_IT+0x9e>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091c6:	d040      	beq.n	800924a <HAL_TIM_Base_Start_IT+0x9e>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a4d      	ldr	r2, [pc, #308]	; (8009304 <HAL_TIM_Base_Start_IT+0x158>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d03b      	beq.n	800924a <HAL_TIM_Base_Start_IT+0x9e>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a4c      	ldr	r2, [pc, #304]	; (8009308 <HAL_TIM_Base_Start_IT+0x15c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d036      	beq.n	800924a <HAL_TIM_Base_Start_IT+0x9e>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a4a      	ldr	r2, [pc, #296]	; (800930c <HAL_TIM_Base_Start_IT+0x160>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d031      	beq.n	800924a <HAL_TIM_Base_Start_IT+0x9e>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a49      	ldr	r2, [pc, #292]	; (8009310 <HAL_TIM_Base_Start_IT+0x164>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d02c      	beq.n	800924a <HAL_TIM_Base_Start_IT+0x9e>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a47      	ldr	r2, [pc, #284]	; (8009314 <HAL_TIM_Base_Start_IT+0x168>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d027      	beq.n	800924a <HAL_TIM_Base_Start_IT+0x9e>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a46      	ldr	r2, [pc, #280]	; (8009318 <HAL_TIM_Base_Start_IT+0x16c>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d022      	beq.n	800924a <HAL_TIM_Base_Start_IT+0x9e>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a44      	ldr	r2, [pc, #272]	; (800931c <HAL_TIM_Base_Start_IT+0x170>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d01d      	beq.n	800924a <HAL_TIM_Base_Start_IT+0x9e>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a43      	ldr	r2, [pc, #268]	; (8009320 <HAL_TIM_Base_Start_IT+0x174>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d018      	beq.n	800924a <HAL_TIM_Base_Start_IT+0x9e>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a41      	ldr	r2, [pc, #260]	; (8009324 <HAL_TIM_Base_Start_IT+0x178>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d013      	beq.n	800924a <HAL_TIM_Base_Start_IT+0x9e>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a40      	ldr	r2, [pc, #256]	; (8009328 <HAL_TIM_Base_Start_IT+0x17c>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d00e      	beq.n	800924a <HAL_TIM_Base_Start_IT+0x9e>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a3e      	ldr	r2, [pc, #248]	; (800932c <HAL_TIM_Base_Start_IT+0x180>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d009      	beq.n	800924a <HAL_TIM_Base_Start_IT+0x9e>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a3d      	ldr	r2, [pc, #244]	; (8009330 <HAL_TIM_Base_Start_IT+0x184>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d004      	beq.n	800924a <HAL_TIM_Base_Start_IT+0x9e>
 8009240:	f240 11cf 	movw	r1, #463	; 0x1cf
 8009244:	483b      	ldr	r0, [pc, #236]	; (8009334 <HAL_TIM_Base_Start_IT+0x188>)
 8009246:	f7f9 f9da 	bl	80025fe <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b01      	cmp	r3, #1
 8009254:	d001      	beq.n	800925a <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e04e      	b.n	80092f8 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2202      	movs	r2, #2
 800925e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68da      	ldr	r2, [r3, #12]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f042 0201 	orr.w	r2, r2, #1
 8009270:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a22      	ldr	r2, [pc, #136]	; (8009300 <HAL_TIM_Base_Start_IT+0x154>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d022      	beq.n	80092c2 <HAL_TIM_Base_Start_IT+0x116>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009284:	d01d      	beq.n	80092c2 <HAL_TIM_Base_Start_IT+0x116>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a1e      	ldr	r2, [pc, #120]	; (8009304 <HAL_TIM_Base_Start_IT+0x158>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d018      	beq.n	80092c2 <HAL_TIM_Base_Start_IT+0x116>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a1c      	ldr	r2, [pc, #112]	; (8009308 <HAL_TIM_Base_Start_IT+0x15c>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d013      	beq.n	80092c2 <HAL_TIM_Base_Start_IT+0x116>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a1b      	ldr	r2, [pc, #108]	; (800930c <HAL_TIM_Base_Start_IT+0x160>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d00e      	beq.n	80092c2 <HAL_TIM_Base_Start_IT+0x116>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a1b      	ldr	r2, [pc, #108]	; (8009318 <HAL_TIM_Base_Start_IT+0x16c>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d009      	beq.n	80092c2 <HAL_TIM_Base_Start_IT+0x116>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a1a      	ldr	r2, [pc, #104]	; (800931c <HAL_TIM_Base_Start_IT+0x170>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d004      	beq.n	80092c2 <HAL_TIM_Base_Start_IT+0x116>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a1a      	ldr	r2, [pc, #104]	; (8009328 <HAL_TIM_Base_Start_IT+0x17c>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d111      	bne.n	80092e6 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	f003 0307 	and.w	r3, r3, #7
 80092cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2b06      	cmp	r3, #6
 80092d2:	d010      	beq.n	80092f6 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f042 0201 	orr.w	r2, r2, #1
 80092e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092e4:	e007      	b.n	80092f6 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f042 0201 	orr.w	r2, r2, #1
 80092f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	40010000 	.word	0x40010000
 8009304:	40000400 	.word	0x40000400
 8009308:	40000800 	.word	0x40000800
 800930c:	40000c00 	.word	0x40000c00
 8009310:	40001000 	.word	0x40001000
 8009314:	40001400 	.word	0x40001400
 8009318:	40010400 	.word	0x40010400
 800931c:	40014000 	.word	0x40014000
 8009320:	40014400 	.word	0x40014400
 8009324:	40014800 	.word	0x40014800
 8009328:	40001800 	.word	0x40001800
 800932c:	40001c00 	.word	0x40001c00
 8009330:	40002000 	.word	0x40002000
 8009334:	0800bc68 	.word	0x0800bc68

08009338 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	f003 0302 	and.w	r3, r3, #2
 800934a:	2b02      	cmp	r3, #2
 800934c:	d122      	bne.n	8009394 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	f003 0302 	and.w	r3, r3, #2
 8009358:	2b02      	cmp	r3, #2
 800935a:	d11b      	bne.n	8009394 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f06f 0202 	mvn.w	r2, #2
 8009364:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2201      	movs	r2, #1
 800936a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	f003 0303 	and.w	r3, r3, #3
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f8ee 	bl	800955c <HAL_TIM_IC_CaptureCallback>
 8009380:	e005      	b.n	800938e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f8e0 	bl	8009548 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 f8f1 	bl	8009570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	f003 0304 	and.w	r3, r3, #4
 800939e:	2b04      	cmp	r3, #4
 80093a0:	d122      	bne.n	80093e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	f003 0304 	and.w	r3, r3, #4
 80093ac:	2b04      	cmp	r3, #4
 80093ae:	d11b      	bne.n	80093e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f06f 0204 	mvn.w	r2, #4
 80093b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2202      	movs	r2, #2
 80093be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d003      	beq.n	80093d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f8c4 	bl	800955c <HAL_TIM_IC_CaptureCallback>
 80093d4:	e005      	b.n	80093e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 f8b6 	bl	8009548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f8c7 	bl	8009570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	f003 0308 	and.w	r3, r3, #8
 80093f2:	2b08      	cmp	r3, #8
 80093f4:	d122      	bne.n	800943c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	f003 0308 	and.w	r3, r3, #8
 8009400:	2b08      	cmp	r3, #8
 8009402:	d11b      	bne.n	800943c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f06f 0208 	mvn.w	r2, #8
 800940c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2204      	movs	r2, #4
 8009412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	f003 0303 	and.w	r3, r3, #3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d003      	beq.n	800942a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f89a 	bl	800955c <HAL_TIM_IC_CaptureCallback>
 8009428:	e005      	b.n	8009436 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f88c 	bl	8009548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f89d 	bl	8009570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	f003 0310 	and.w	r3, r3, #16
 8009446:	2b10      	cmp	r3, #16
 8009448:	d122      	bne.n	8009490 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	f003 0310 	and.w	r3, r3, #16
 8009454:	2b10      	cmp	r3, #16
 8009456:	d11b      	bne.n	8009490 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f06f 0210 	mvn.w	r2, #16
 8009460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2208      	movs	r2, #8
 8009466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009472:	2b00      	cmp	r3, #0
 8009474:	d003      	beq.n	800947e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f870 	bl	800955c <HAL_TIM_IC_CaptureCallback>
 800947c:	e005      	b.n	800948a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f862 	bl	8009548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f873 	bl	8009570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	f003 0301 	and.w	r3, r3, #1
 800949a:	2b01      	cmp	r3, #1
 800949c:	d10e      	bne.n	80094bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	f003 0301 	and.w	r3, r3, #1
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d107      	bne.n	80094bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f06f 0201 	mvn.w	r2, #1
 80094b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f7f9 f88a 	bl	80025d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094c6:	2b80      	cmp	r3, #128	; 0x80
 80094c8:	d10e      	bne.n	80094e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094d4:	2b80      	cmp	r3, #128	; 0x80
 80094d6:	d107      	bne.n	80094e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80094e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f902 	bl	80096ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f2:	2b40      	cmp	r3, #64	; 0x40
 80094f4:	d10e      	bne.n	8009514 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009500:	2b40      	cmp	r3, #64	; 0x40
 8009502:	d107      	bne.n	8009514 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800950c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f838 	bl	8009584 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	f003 0320 	and.w	r3, r3, #32
 800951e:	2b20      	cmp	r3, #32
 8009520:	d10e      	bne.n	8009540 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	f003 0320 	and.w	r3, r3, #32
 800952c:	2b20      	cmp	r3, #32
 800952e:	d107      	bne.n	8009540 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f06f 0220 	mvn.w	r2, #32
 8009538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f8cc 	bl	80096d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009540:	bf00      	nop
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800958c:	bf00      	nop
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
 80095a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a40      	ldr	r2, [pc, #256]	; (80096ac <TIM_Base_SetConfig+0x114>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d013      	beq.n	80095d8 <TIM_Base_SetConfig+0x40>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095b6:	d00f      	beq.n	80095d8 <TIM_Base_SetConfig+0x40>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a3d      	ldr	r2, [pc, #244]	; (80096b0 <TIM_Base_SetConfig+0x118>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d00b      	beq.n	80095d8 <TIM_Base_SetConfig+0x40>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a3c      	ldr	r2, [pc, #240]	; (80096b4 <TIM_Base_SetConfig+0x11c>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d007      	beq.n	80095d8 <TIM_Base_SetConfig+0x40>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a3b      	ldr	r2, [pc, #236]	; (80096b8 <TIM_Base_SetConfig+0x120>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d003      	beq.n	80095d8 <TIM_Base_SetConfig+0x40>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a3a      	ldr	r2, [pc, #232]	; (80096bc <TIM_Base_SetConfig+0x124>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d108      	bne.n	80095ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a2f      	ldr	r2, [pc, #188]	; (80096ac <TIM_Base_SetConfig+0x114>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d02b      	beq.n	800964a <TIM_Base_SetConfig+0xb2>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095f8:	d027      	beq.n	800964a <TIM_Base_SetConfig+0xb2>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a2c      	ldr	r2, [pc, #176]	; (80096b0 <TIM_Base_SetConfig+0x118>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d023      	beq.n	800964a <TIM_Base_SetConfig+0xb2>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a2b      	ldr	r2, [pc, #172]	; (80096b4 <TIM_Base_SetConfig+0x11c>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d01f      	beq.n	800964a <TIM_Base_SetConfig+0xb2>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a2a      	ldr	r2, [pc, #168]	; (80096b8 <TIM_Base_SetConfig+0x120>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d01b      	beq.n	800964a <TIM_Base_SetConfig+0xb2>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a29      	ldr	r2, [pc, #164]	; (80096bc <TIM_Base_SetConfig+0x124>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d017      	beq.n	800964a <TIM_Base_SetConfig+0xb2>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a28      	ldr	r2, [pc, #160]	; (80096c0 <TIM_Base_SetConfig+0x128>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d013      	beq.n	800964a <TIM_Base_SetConfig+0xb2>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a27      	ldr	r2, [pc, #156]	; (80096c4 <TIM_Base_SetConfig+0x12c>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d00f      	beq.n	800964a <TIM_Base_SetConfig+0xb2>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a26      	ldr	r2, [pc, #152]	; (80096c8 <TIM_Base_SetConfig+0x130>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d00b      	beq.n	800964a <TIM_Base_SetConfig+0xb2>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a25      	ldr	r2, [pc, #148]	; (80096cc <TIM_Base_SetConfig+0x134>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d007      	beq.n	800964a <TIM_Base_SetConfig+0xb2>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a24      	ldr	r2, [pc, #144]	; (80096d0 <TIM_Base_SetConfig+0x138>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d003      	beq.n	800964a <TIM_Base_SetConfig+0xb2>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a23      	ldr	r2, [pc, #140]	; (80096d4 <TIM_Base_SetConfig+0x13c>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d108      	bne.n	800965c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	4313      	orrs	r3, r2
 800965a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	695b      	ldr	r3, [r3, #20]
 8009666:	4313      	orrs	r3, r2
 8009668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	689a      	ldr	r2, [r3, #8]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a0a      	ldr	r2, [pc, #40]	; (80096ac <TIM_Base_SetConfig+0x114>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d003      	beq.n	8009690 <TIM_Base_SetConfig+0xf8>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a0c      	ldr	r2, [pc, #48]	; (80096bc <TIM_Base_SetConfig+0x124>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d103      	bne.n	8009698 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	691a      	ldr	r2, [r3, #16]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	615a      	str	r2, [r3, #20]
}
 800969e:	bf00      	nop
 80096a0:	3714      	adds	r7, #20
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	40010000 	.word	0x40010000
 80096b0:	40000400 	.word	0x40000400
 80096b4:	40000800 	.word	0x40000800
 80096b8:	40000c00 	.word	0x40000c00
 80096bc:	40010400 	.word	0x40010400
 80096c0:	40014000 	.word	0x40014000
 80096c4:	40014400 	.word	0x40014400
 80096c8:	40014800 	.word	0x40014800
 80096cc:	40001800 	.word	0x40001800
 80096d0:	40001c00 	.word	0x40001c00
 80096d4:	40002000 	.word	0x40002000

080096d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096e0:	bf00      	nop
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009716:	d10e      	bne.n	8009736 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	2b01      	cmp	r3, #1
 8009724:	d107      	bne.n	8009736 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f06f 0201 	mvn.w	r2, #1
 800972e:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f804 	bl	800973e <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8009736:	bf00      	nop
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 800973e:	b480      	push	{r7}
 8009740:	b083      	sub	sp, #12
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 8009746:	bf00      	nop
 8009748:	370c      	adds	r7, #12
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009752:	b480      	push	{r7}
 8009754:	b085      	sub	sp, #20
 8009756:	af00      	add	r7, sp, #0
 8009758:	4603      	mov	r3, r0
 800975a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800975c:	2300      	movs	r3, #0
 800975e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009760:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009764:	2b84      	cmp	r3, #132	; 0x84
 8009766:	d005      	beq.n	8009774 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009768:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	4413      	add	r3, r2
 8009770:	3303      	adds	r3, #3
 8009772:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009774:	68fb      	ldr	r3, [r7, #12]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3714      	adds	r7, #20
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr

08009782 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009786:	f000 fef9 	bl	800a57c <vTaskStartScheduler>
  
  return osOK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	bd80      	pop	{r7, pc}

08009790 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009792:	b089      	sub	sp, #36	; 0x24
 8009794:	af04      	add	r7, sp, #16
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	695b      	ldr	r3, [r3, #20]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d020      	beq.n	80097e4 <osThreadCreate+0x54>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d01c      	beq.n	80097e4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	685c      	ldr	r4, [r3, #4]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681d      	ldr	r5, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	691e      	ldr	r6, [r3, #16]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80097bc:	4618      	mov	r0, r3
 80097be:	f7ff ffc8 	bl	8009752 <makeFreeRtosPriority>
 80097c2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	695b      	ldr	r3, [r3, #20]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097cc:	9202      	str	r2, [sp, #8]
 80097ce:	9301      	str	r3, [sp, #4]
 80097d0:	9100      	str	r1, [sp, #0]
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	4632      	mov	r2, r6
 80097d6:	4629      	mov	r1, r5
 80097d8:	4620      	mov	r0, r4
 80097da:	f000 fca7 	bl	800a12c <xTaskCreateStatic>
 80097de:	4603      	mov	r3, r0
 80097e0:	60fb      	str	r3, [r7, #12]
 80097e2:	e01c      	b.n	800981e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	685c      	ldr	r4, [r3, #4]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097f0:	b29e      	uxth	r6, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7ff ffaa 	bl	8009752 <makeFreeRtosPriority>
 80097fe:	4602      	mov	r2, r0
 8009800:	f107 030c 	add.w	r3, r7, #12
 8009804:	9301      	str	r3, [sp, #4]
 8009806:	9200      	str	r2, [sp, #0]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	4632      	mov	r2, r6
 800980c:	4629      	mov	r1, r5
 800980e:	4620      	mov	r0, r4
 8009810:	f000 fce9 	bl	800a1e6 <xTaskCreate>
 8009814:	4603      	mov	r3, r0
 8009816:	2b01      	cmp	r3, #1
 8009818:	d001      	beq.n	800981e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800981a:	2300      	movs	r3, #0
 800981c:	e000      	b.n	8009820 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800981e:	68fb      	ldr	r3, [r7, #12]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009828 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f103 0208 	add.w	r2, r3, #8
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f04f 32ff 	mov.w	r2, #4294967295
 8009840:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f103 0208 	add.w	r2, r3, #8
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f103 0208 	add.w	r2, r3, #8
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009876:	bf00      	nop
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr

08009882 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009882:	b480      	push	{r7}
 8009884:	b085      	sub	sp, #20
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	689a      	ldr	r2, [r3, #8]
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	683a      	ldr	r2, [r7, #0]
 80098a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	683a      	ldr	r2, [r7, #0]
 80098ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	1c5a      	adds	r2, r3, #1
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	601a      	str	r2, [r3, #0]
}
 80098be:	bf00      	nop
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098ca:	b480      	push	{r7}
 80098cc:	b085      	sub	sp, #20
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e0:	d103      	bne.n	80098ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	e00c      	b.n	8009904 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	3308      	adds	r3, #8
 80098ee:	60fb      	str	r3, [r7, #12]
 80098f0:	e002      	b.n	80098f8 <vListInsert+0x2e>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	60fb      	str	r3, [r7, #12]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	429a      	cmp	r2, r3
 8009902:	d2f6      	bcs.n	80098f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	685a      	ldr	r2, [r3, #4]
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	683a      	ldr	r2, [r7, #0]
 8009912:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	683a      	ldr	r2, [r7, #0]
 800991e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	1c5a      	adds	r2, r3, #1
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	601a      	str	r2, [r3, #0]
}
 8009930:	bf00      	nop
 8009932:	3714      	adds	r7, #20
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	6892      	ldr	r2, [r2, #8]
 8009952:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	6852      	ldr	r2, [r2, #4]
 800995c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	429a      	cmp	r2, r3
 8009966:	d103      	bne.n	8009970 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	689a      	ldr	r2, [r3, #8]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	1e5a      	subs	r2, r3, #1
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10a      	bne.n	80099ba <xQueueGenericReset+0x2a>
	__asm volatile
 80099a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	60bb      	str	r3, [r7, #8]
}
 80099b6:	bf00      	nop
 80099b8:	e7fe      	b.n	80099b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80099ba:	f001 fc3b 	bl	800b234 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099c6:	68f9      	ldr	r1, [r7, #12]
 80099c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80099ca:	fb01 f303 	mul.w	r3, r1, r3
 80099ce:	441a      	add	r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2200      	movs	r2, #0
 80099d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ea:	3b01      	subs	r3, #1
 80099ec:	68f9      	ldr	r1, [r7, #12]
 80099ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80099f0:	fb01 f303 	mul.w	r3, r1, r3
 80099f4:	441a      	add	r2, r3
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	22ff      	movs	r2, #255	; 0xff
 80099fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	22ff      	movs	r2, #255	; 0xff
 8009a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d114      	bne.n	8009a3a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d01a      	beq.n	8009a4e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	3310      	adds	r3, #16
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f001 f80f 	bl	800aa40 <xTaskRemoveFromEventList>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d012      	beq.n	8009a4e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009a28:	4b0c      	ldr	r3, [pc, #48]	; (8009a5c <xQueueGenericReset+0xcc>)
 8009a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a2e:	601a      	str	r2, [r3, #0]
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	f3bf 8f6f 	isb	sy
 8009a38:	e009      	b.n	8009a4e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	3310      	adds	r3, #16
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7ff fef2 	bl	8009828 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	3324      	adds	r3, #36	; 0x24
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7ff feed 	bl	8009828 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009a4e:	f001 fc21 	bl	800b294 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009a52:	2301      	movs	r3, #1
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	e000ed04 	.word	0xe000ed04

08009a60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b08a      	sub	sp, #40	; 0x28
 8009a64:	af02      	add	r7, sp, #8
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d10a      	bne.n	8009a8a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	613b      	str	r3, [r7, #16]
}
 8009a86:	bf00      	nop
 8009a88:	e7fe      	b.n	8009a88 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	fb02 f303 	mul.w	r3, r2, r3
 8009a92:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	3348      	adds	r3, #72	; 0x48
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f001 fcad 	bl	800b3f8 <pvPortMalloc>
 8009a9e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d011      	beq.n	8009aca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	3348      	adds	r3, #72	; 0x48
 8009aae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ab8:	79fa      	ldrb	r2, [r7, #7]
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	68b9      	ldr	r1, [r7, #8]
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f000 f805 	bl	8009ad4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009aca:	69bb      	ldr	r3, [r7, #24]
	}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3720      	adds	r7, #32
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	607a      	str	r2, [r7, #4]
 8009ae0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d103      	bne.n	8009af0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	69ba      	ldr	r2, [r7, #24]
 8009aec:	601a      	str	r2, [r3, #0]
 8009aee:	e002      	b.n	8009af6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009b02:	2101      	movs	r1, #1
 8009b04:	69b8      	ldr	r0, [r7, #24]
 8009b06:	f7ff ff43 	bl	8009990 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009b0a:	bf00      	nop
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
	...

08009b14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b08e      	sub	sp, #56	; 0x38
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]
 8009b20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009b22:	2300      	movs	r3, #0
 8009b24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d10a      	bne.n	8009b46 <xQueueGenericSend+0x32>
	__asm volatile
 8009b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b34:	f383 8811 	msr	BASEPRI, r3
 8009b38:	f3bf 8f6f 	isb	sy
 8009b3c:	f3bf 8f4f 	dsb	sy
 8009b40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b42:	bf00      	nop
 8009b44:	e7fe      	b.n	8009b44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d103      	bne.n	8009b54 <xQueueGenericSend+0x40>
 8009b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d101      	bne.n	8009b58 <xQueueGenericSend+0x44>
 8009b54:	2301      	movs	r3, #1
 8009b56:	e000      	b.n	8009b5a <xQueueGenericSend+0x46>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10a      	bne.n	8009b74 <xQueueGenericSend+0x60>
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b70:	bf00      	nop
 8009b72:	e7fe      	b.n	8009b72 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d103      	bne.n	8009b82 <xQueueGenericSend+0x6e>
 8009b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d101      	bne.n	8009b86 <xQueueGenericSend+0x72>
 8009b82:	2301      	movs	r3, #1
 8009b84:	e000      	b.n	8009b88 <xQueueGenericSend+0x74>
 8009b86:	2300      	movs	r3, #0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10a      	bne.n	8009ba2 <xQueueGenericSend+0x8e>
	__asm volatile
 8009b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b90:	f383 8811 	msr	BASEPRI, r3
 8009b94:	f3bf 8f6f 	isb	sy
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	623b      	str	r3, [r7, #32]
}
 8009b9e:	bf00      	nop
 8009ba0:	e7fe      	b.n	8009ba0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ba2:	f001 f90d 	bl	800adc0 <xTaskGetSchedulerState>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d102      	bne.n	8009bb2 <xQueueGenericSend+0x9e>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d101      	bne.n	8009bb6 <xQueueGenericSend+0xa2>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e000      	b.n	8009bb8 <xQueueGenericSend+0xa4>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d10a      	bne.n	8009bd2 <xQueueGenericSend+0xbe>
	__asm volatile
 8009bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc0:	f383 8811 	msr	BASEPRI, r3
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	f3bf 8f4f 	dsb	sy
 8009bcc:	61fb      	str	r3, [r7, #28]
}
 8009bce:	bf00      	nop
 8009bd0:	e7fe      	b.n	8009bd0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009bd2:	f001 fb2f 	bl	800b234 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d302      	bcc.n	8009be8 <xQueueGenericSend+0xd4>
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d129      	bne.n	8009c3c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009be8:	683a      	ldr	r2, [r7, #0]
 8009bea:	68b9      	ldr	r1, [r7, #8]
 8009bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bee:	f000 f98d 	bl	8009f0c <prvCopyDataToQueue>
 8009bf2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d010      	beq.n	8009c1e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfe:	3324      	adds	r3, #36	; 0x24
 8009c00:	4618      	mov	r0, r3
 8009c02:	f000 ff1d 	bl	800aa40 <xTaskRemoveFromEventList>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d013      	beq.n	8009c34 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009c0c:	4b3f      	ldr	r3, [pc, #252]	; (8009d0c <xQueueGenericSend+0x1f8>)
 8009c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c12:	601a      	str	r2, [r3, #0]
 8009c14:	f3bf 8f4f 	dsb	sy
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	e00a      	b.n	8009c34 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d007      	beq.n	8009c34 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009c24:	4b39      	ldr	r3, [pc, #228]	; (8009d0c <xQueueGenericSend+0x1f8>)
 8009c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c2a:	601a      	str	r2, [r3, #0]
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009c34:	f001 fb2e 	bl	800b294 <vPortExitCritical>
				return pdPASS;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e063      	b.n	8009d04 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d103      	bne.n	8009c4a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c42:	f001 fb27 	bl	800b294 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009c46:	2300      	movs	r3, #0
 8009c48:	e05c      	b.n	8009d04 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d106      	bne.n	8009c5e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c50:	f107 0314 	add.w	r3, r7, #20
 8009c54:	4618      	mov	r0, r3
 8009c56:	f000 ff55 	bl	800ab04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c5e:	f001 fb19 	bl	800b294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c62:	f000 fcf5 	bl	800a650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c66:	f001 fae5 	bl	800b234 <vPortEnterCritical>
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c70:	b25b      	sxtb	r3, r3
 8009c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c76:	d103      	bne.n	8009c80 <xQueueGenericSend+0x16c>
 8009c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c86:	b25b      	sxtb	r3, r3
 8009c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c8c:	d103      	bne.n	8009c96 <xQueueGenericSend+0x182>
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c96:	f001 fafd 	bl	800b294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c9a:	1d3a      	adds	r2, r7, #4
 8009c9c:	f107 0314 	add.w	r3, r7, #20
 8009ca0:	4611      	mov	r1, r2
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f000 ff44 	bl	800ab30 <xTaskCheckForTimeOut>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d124      	bne.n	8009cf8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009cae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cb0:	f000 fa24 	bl	800a0fc <prvIsQueueFull>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d018      	beq.n	8009cec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbc:	3310      	adds	r3, #16
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	4611      	mov	r1, r2
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f000 fe98 	bl	800a9f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009cc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cca:	f000 f9af 	bl	800a02c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009cce:	f000 fccd 	bl	800a66c <xTaskResumeAll>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f47f af7c 	bne.w	8009bd2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009cda:	4b0c      	ldr	r3, [pc, #48]	; (8009d0c <xQueueGenericSend+0x1f8>)
 8009cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ce0:	601a      	str	r2, [r3, #0]
 8009ce2:	f3bf 8f4f 	dsb	sy
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	e772      	b.n	8009bd2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009cec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cee:	f000 f99d 	bl	800a02c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009cf2:	f000 fcbb 	bl	800a66c <xTaskResumeAll>
 8009cf6:	e76c      	b.n	8009bd2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cfa:	f000 f997 	bl	800a02c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cfe:	f000 fcb5 	bl	800a66c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009d02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3738      	adds	r7, #56	; 0x38
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	e000ed04 	.word	0xe000ed04

08009d10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b08c      	sub	sp, #48	; 0x30
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d10a      	bne.n	8009d40 <xQueueReceive+0x30>
	__asm volatile
 8009d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2e:	f383 8811 	msr	BASEPRI, r3
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	f3bf 8f4f 	dsb	sy
 8009d3a:	623b      	str	r3, [r7, #32]
}
 8009d3c:	bf00      	nop
 8009d3e:	e7fe      	b.n	8009d3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d103      	bne.n	8009d4e <xQueueReceive+0x3e>
 8009d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d101      	bne.n	8009d52 <xQueueReceive+0x42>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e000      	b.n	8009d54 <xQueueReceive+0x44>
 8009d52:	2300      	movs	r3, #0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10a      	bne.n	8009d6e <xQueueReceive+0x5e>
	__asm volatile
 8009d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5c:	f383 8811 	msr	BASEPRI, r3
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	61fb      	str	r3, [r7, #28]
}
 8009d6a:	bf00      	nop
 8009d6c:	e7fe      	b.n	8009d6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d6e:	f001 f827 	bl	800adc0 <xTaskGetSchedulerState>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d102      	bne.n	8009d7e <xQueueReceive+0x6e>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d101      	bne.n	8009d82 <xQueueReceive+0x72>
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e000      	b.n	8009d84 <xQueueReceive+0x74>
 8009d82:	2300      	movs	r3, #0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d10a      	bne.n	8009d9e <xQueueReceive+0x8e>
	__asm volatile
 8009d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8c:	f383 8811 	msr	BASEPRI, r3
 8009d90:	f3bf 8f6f 	isb	sy
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	61bb      	str	r3, [r7, #24]
}
 8009d9a:	bf00      	nop
 8009d9c:	e7fe      	b.n	8009d9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d9e:	f001 fa49 	bl	800b234 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d01f      	beq.n	8009dee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009dae:	68b9      	ldr	r1, [r7, #8]
 8009db0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009db2:	f000 f915 	bl	8009fe0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	1e5a      	subs	r2, r3, #1
 8009dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00f      	beq.n	8009de6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc8:	3310      	adds	r3, #16
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f000 fe38 	bl	800aa40 <xTaskRemoveFromEventList>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d007      	beq.n	8009de6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009dd6:	4b3d      	ldr	r3, [pc, #244]	; (8009ecc <xQueueReceive+0x1bc>)
 8009dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ddc:	601a      	str	r2, [r3, #0]
 8009dde:	f3bf 8f4f 	dsb	sy
 8009de2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009de6:	f001 fa55 	bl	800b294 <vPortExitCritical>
				return pdPASS;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e069      	b.n	8009ec2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d103      	bne.n	8009dfc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009df4:	f001 fa4e 	bl	800b294 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	e062      	b.n	8009ec2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d106      	bne.n	8009e10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e02:	f107 0310 	add.w	r3, r7, #16
 8009e06:	4618      	mov	r0, r3
 8009e08:	f000 fe7c 	bl	800ab04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e10:	f001 fa40 	bl	800b294 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e14:	f000 fc1c 	bl	800a650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e18:	f001 fa0c 	bl	800b234 <vPortEnterCritical>
 8009e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e22:	b25b      	sxtb	r3, r3
 8009e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e28:	d103      	bne.n	8009e32 <xQueueReceive+0x122>
 8009e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e38:	b25b      	sxtb	r3, r3
 8009e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e3e:	d103      	bne.n	8009e48 <xQueueReceive+0x138>
 8009e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e48:	f001 fa24 	bl	800b294 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e4c:	1d3a      	adds	r2, r7, #4
 8009e4e:	f107 0310 	add.w	r3, r7, #16
 8009e52:	4611      	mov	r1, r2
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 fe6b 	bl	800ab30 <xTaskCheckForTimeOut>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d123      	bne.n	8009ea8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e62:	f000 f935 	bl	800a0d0 <prvIsQueueEmpty>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d017      	beq.n	8009e9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6e:	3324      	adds	r3, #36	; 0x24
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	4611      	mov	r1, r2
 8009e74:	4618      	mov	r0, r3
 8009e76:	f000 fdbf 	bl	800a9f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e7c:	f000 f8d6 	bl	800a02c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e80:	f000 fbf4 	bl	800a66c <xTaskResumeAll>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d189      	bne.n	8009d9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009e8a:	4b10      	ldr	r3, [pc, #64]	; (8009ecc <xQueueReceive+0x1bc>)
 8009e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e90:	601a      	str	r2, [r3, #0]
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	e780      	b.n	8009d9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e9e:	f000 f8c5 	bl	800a02c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ea2:	f000 fbe3 	bl	800a66c <xTaskResumeAll>
 8009ea6:	e77a      	b.n	8009d9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eaa:	f000 f8bf 	bl	800a02c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009eae:	f000 fbdd 	bl	800a66c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009eb4:	f000 f90c 	bl	800a0d0 <prvIsQueueEmpty>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f43f af6f 	beq.w	8009d9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ec0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3730      	adds	r7, #48	; 0x30
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	e000ed04 	.word	0xe000ed04

08009ed0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d10a      	bne.n	8009ef4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8009ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee2:	f383 8811 	msr	BASEPRI, r3
 8009ee6:	f3bf 8f6f 	isb	sy
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	60bb      	str	r3, [r7, #8]
}
 8009ef0:	bf00      	nop
 8009ef2:	e7fe      	b.n	8009ef2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8009ef4:	f001 f99e 	bl	800b234 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009efe:	f001 f9c9 	bl	800b294 <vPortExitCritical>

	return uxReturn;
 8009f02:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009f04:	4618      	mov	r0, r3
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d10d      	bne.n	8009f46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d14d      	bne.n	8009fce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	4618      	mov	r0, r3
 8009f38:	f000 ff60 	bl	800adfc <xTaskPriorityDisinherit>
 8009f3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2200      	movs	r2, #0
 8009f42:	609a      	str	r2, [r3, #8]
 8009f44:	e043      	b.n	8009fce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d119      	bne.n	8009f80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6858      	ldr	r0, [r3, #4]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f54:	461a      	mov	r2, r3
 8009f56:	68b9      	ldr	r1, [r7, #8]
 8009f58:	f001 fc5c 	bl	800b814 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f64:	441a      	add	r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	685a      	ldr	r2, [r3, #4]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d32b      	bcc.n	8009fce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	605a      	str	r2, [r3, #4]
 8009f7e:	e026      	b.n	8009fce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	68d8      	ldr	r0, [r3, #12]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f88:	461a      	mov	r2, r3
 8009f8a:	68b9      	ldr	r1, [r7, #8]
 8009f8c:	f001 fc42 	bl	800b814 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	68da      	ldr	r2, [r3, #12]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f98:	425b      	negs	r3, r3
 8009f9a:	441a      	add	r2, r3
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	68da      	ldr	r2, [r3, #12]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d207      	bcs.n	8009fbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	689a      	ldr	r2, [r3, #8]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb4:	425b      	negs	r3, r3
 8009fb6:	441a      	add	r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d105      	bne.n	8009fce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d002      	beq.n	8009fce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	1c5a      	adds	r2, r3, #1
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009fd6:	697b      	ldr	r3, [r7, #20]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3718      	adds	r7, #24
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
 8009fe8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d018      	beq.n	800a024 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	68da      	ldr	r2, [r3, #12]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffa:	441a      	add	r2, r3
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	68da      	ldr	r2, [r3, #12]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d303      	bcc.n	800a014 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	68d9      	ldr	r1, [r3, #12]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01c:	461a      	mov	r2, r3
 800a01e:	6838      	ldr	r0, [r7, #0]
 800a020:	f001 fbf8 	bl	800b814 <memcpy>
	}
}
 800a024:	bf00      	nop
 800a026:	3708      	adds	r7, #8
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a034:	f001 f8fe 	bl	800b234 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a03e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a040:	e011      	b.n	800a066 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a046:	2b00      	cmp	r3, #0
 800a048:	d012      	beq.n	800a070 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	3324      	adds	r3, #36	; 0x24
 800a04e:	4618      	mov	r0, r3
 800a050:	f000 fcf6 	bl	800aa40 <xTaskRemoveFromEventList>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d001      	beq.n	800a05e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a05a:	f000 fdcb 	bl	800abf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a05e:	7bfb      	ldrb	r3, [r7, #15]
 800a060:	3b01      	subs	r3, #1
 800a062:	b2db      	uxtb	r3, r3
 800a064:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	dce9      	bgt.n	800a042 <prvUnlockQueue+0x16>
 800a06e:	e000      	b.n	800a072 <prvUnlockQueue+0x46>
					break;
 800a070:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	22ff      	movs	r2, #255	; 0xff
 800a076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a07a:	f001 f90b 	bl	800b294 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a07e:	f001 f8d9 	bl	800b234 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a088:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a08a:	e011      	b.n	800a0b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d012      	beq.n	800a0ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	3310      	adds	r3, #16
 800a098:	4618      	mov	r0, r3
 800a09a:	f000 fcd1 	bl	800aa40 <xTaskRemoveFromEventList>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d001      	beq.n	800a0a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a0a4:	f000 fda6 	bl	800abf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a0a8:	7bbb      	ldrb	r3, [r7, #14]
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	dce9      	bgt.n	800a08c <prvUnlockQueue+0x60>
 800a0b8:	e000      	b.n	800a0bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a0ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	22ff      	movs	r2, #255	; 0xff
 800a0c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a0c4:	f001 f8e6 	bl	800b294 <vPortExitCritical>
}
 800a0c8:	bf00      	nop
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a0d8:	f001 f8ac 	bl	800b234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d102      	bne.n	800a0ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	60fb      	str	r3, [r7, #12]
 800a0e8:	e001      	b.n	800a0ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a0ee:	f001 f8d1 	bl	800b294 <vPortExitCritical>

	return xReturn;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b084      	sub	sp, #16
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a104:	f001 f896 	bl	800b234 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a110:	429a      	cmp	r2, r3
 800a112:	d102      	bne.n	800a11a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a114:	2301      	movs	r3, #1
 800a116:	60fb      	str	r3, [r7, #12]
 800a118:	e001      	b.n	800a11e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a11a:	2300      	movs	r3, #0
 800a11c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a11e:	f001 f8b9 	bl	800b294 <vPortExitCritical>

	return xReturn;
 800a122:	68fb      	ldr	r3, [r7, #12]
}
 800a124:	4618      	mov	r0, r3
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b08e      	sub	sp, #56	; 0x38
 800a130:	af04      	add	r7, sp, #16
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	60b9      	str	r1, [r7, #8]
 800a136:	607a      	str	r2, [r7, #4]
 800a138:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d10a      	bne.n	800a156 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a144:	f383 8811 	msr	BASEPRI, r3
 800a148:	f3bf 8f6f 	isb	sy
 800a14c:	f3bf 8f4f 	dsb	sy
 800a150:	623b      	str	r3, [r7, #32]
}
 800a152:	bf00      	nop
 800a154:	e7fe      	b.n	800a154 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d10a      	bne.n	800a172 <xTaskCreateStatic+0x46>
	__asm volatile
 800a15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a160:	f383 8811 	msr	BASEPRI, r3
 800a164:	f3bf 8f6f 	isb	sy
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	61fb      	str	r3, [r7, #28]
}
 800a16e:	bf00      	nop
 800a170:	e7fe      	b.n	800a170 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a172:	23b4      	movs	r3, #180	; 0xb4
 800a174:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	2bb4      	cmp	r3, #180	; 0xb4
 800a17a:	d00a      	beq.n	800a192 <xTaskCreateStatic+0x66>
	__asm volatile
 800a17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a180:	f383 8811 	msr	BASEPRI, r3
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	61bb      	str	r3, [r7, #24]
}
 800a18e:	bf00      	nop
 800a190:	e7fe      	b.n	800a190 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a192:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a196:	2b00      	cmp	r3, #0
 800a198:	d01e      	beq.n	800a1d8 <xTaskCreateStatic+0xac>
 800a19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d01b      	beq.n	800a1d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ac:	2202      	movs	r2, #2
 800a1ae:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	9303      	str	r3, [sp, #12]
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b8:	9302      	str	r3, [sp, #8]
 800a1ba:	f107 0314 	add.w	r3, r7, #20
 800a1be:	9301      	str	r3, [sp, #4]
 800a1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c2:	9300      	str	r3, [sp, #0]
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	68b9      	ldr	r1, [r7, #8]
 800a1ca:	68f8      	ldr	r0, [r7, #12]
 800a1cc:	f000 f850 	bl	800a270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1d2:	f000 f8eb 	bl	800a3ac <prvAddNewTaskToReadyList>
 800a1d6:	e001      	b.n	800a1dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a1dc:	697b      	ldr	r3, [r7, #20]
	}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3728      	adds	r7, #40	; 0x28
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b08c      	sub	sp, #48	; 0x30
 800a1ea:	af04      	add	r7, sp, #16
 800a1ec:	60f8      	str	r0, [r7, #12]
 800a1ee:	60b9      	str	r1, [r7, #8]
 800a1f0:	603b      	str	r3, [r7, #0]
 800a1f2:	4613      	mov	r3, r2
 800a1f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a1f6:	88fb      	ldrh	r3, [r7, #6]
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f001 f8fc 	bl	800b3f8 <pvPortMalloc>
 800a200:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00e      	beq.n	800a226 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a208:	20b4      	movs	r0, #180	; 0xb4
 800a20a:	f001 f8f5 	bl	800b3f8 <pvPortMalloc>
 800a20e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d003      	beq.n	800a21e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	697a      	ldr	r2, [r7, #20]
 800a21a:	631a      	str	r2, [r3, #48]	; 0x30
 800a21c:	e005      	b.n	800a22a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a21e:	6978      	ldr	r0, [r7, #20]
 800a220:	f001 f9b6 	bl	800b590 <vPortFree>
 800a224:	e001      	b.n	800a22a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a226:	2300      	movs	r3, #0
 800a228:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d017      	beq.n	800a260 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	2200      	movs	r2, #0
 800a234:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a238:	88fa      	ldrh	r2, [r7, #6]
 800a23a:	2300      	movs	r3, #0
 800a23c:	9303      	str	r3, [sp, #12]
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	9302      	str	r3, [sp, #8]
 800a242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a244:	9301      	str	r3, [sp, #4]
 800a246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a248:	9300      	str	r3, [sp, #0]
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	68b9      	ldr	r1, [r7, #8]
 800a24e:	68f8      	ldr	r0, [r7, #12]
 800a250:	f000 f80e 	bl	800a270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a254:	69f8      	ldr	r0, [r7, #28]
 800a256:	f000 f8a9 	bl	800a3ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a25a:	2301      	movs	r3, #1
 800a25c:	61bb      	str	r3, [r7, #24]
 800a25e:	e002      	b.n	800a266 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a260:	f04f 33ff 	mov.w	r3, #4294967295
 800a264:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a266:	69bb      	ldr	r3, [r7, #24]
	}
 800a268:	4618      	mov	r0, r3
 800a26a:	3720      	adds	r7, #32
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b088      	sub	sp, #32
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	607a      	str	r2, [r7, #4]
 800a27c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a288:	3b01      	subs	r3, #1
 800a28a:	009b      	lsls	r3, r3, #2
 800a28c:	4413      	add	r3, r2
 800a28e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	f023 0307 	bic.w	r3, r3, #7
 800a296:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	f003 0307 	and.w	r3, r3, #7
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00a      	beq.n	800a2b8 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a6:	f383 8811 	msr	BASEPRI, r3
 800a2aa:	f3bf 8f6f 	isb	sy
 800a2ae:	f3bf 8f4f 	dsb	sy
 800a2b2:	617b      	str	r3, [r7, #20]
}
 800a2b4:	bf00      	nop
 800a2b6:	e7fe      	b.n	800a2b6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d01f      	beq.n	800a2fe <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2be:	2300      	movs	r3, #0
 800a2c0:	61fb      	str	r3, [r7, #28]
 800a2c2:	e012      	b.n	800a2ea <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a2c4:	68ba      	ldr	r2, [r7, #8]
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	7819      	ldrb	r1, [r3, #0]
 800a2cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	3334      	adds	r3, #52	; 0x34
 800a2d4:	460a      	mov	r2, r1
 800a2d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	4413      	add	r3, r2
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d006      	beq.n	800a2f2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	61fb      	str	r3, [r7, #28]
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	2b0f      	cmp	r3, #15
 800a2ee:	d9e9      	bls.n	800a2c4 <prvInitialiseNewTask+0x54>
 800a2f0:	e000      	b.n	800a2f4 <prvInitialiseNewTask+0x84>
			{
				break;
 800a2f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a2fc:	e003      	b.n	800a306 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a300:	2200      	movs	r2, #0
 800a302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a308:	2b06      	cmp	r3, #6
 800a30a:	d901      	bls.n	800a310 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a30c:	2306      	movs	r3, #6
 800a30e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a314:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a31a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a31c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31e:	2200      	movs	r2, #0
 800a320:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a324:	3304      	adds	r3, #4
 800a326:	4618      	mov	r0, r3
 800a328:	f7ff fa9e 	bl	8009868 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32e:	3318      	adds	r3, #24
 800a330:	4618      	mov	r0, r3
 800a332:	f7ff fa99 	bl	8009868 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a33a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33e:	f1c3 0207 	rsb	r2, r3, #7
 800a342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a344:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a34a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34e:	2200      	movs	r2, #0
 800a350:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a356:	2200      	movs	r2, #0
 800a358:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35e:	334c      	adds	r3, #76	; 0x4c
 800a360:	2260      	movs	r2, #96	; 0x60
 800a362:	2100      	movs	r1, #0
 800a364:	4618      	mov	r0, r3
 800a366:	f001 fa63 	bl	800b830 <memset>
 800a36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36c:	4a0c      	ldr	r2, [pc, #48]	; (800a3a0 <prvInitialiseNewTask+0x130>)
 800a36e:	651a      	str	r2, [r3, #80]	; 0x50
 800a370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a372:	4a0c      	ldr	r2, [pc, #48]	; (800a3a4 <prvInitialiseNewTask+0x134>)
 800a374:	655a      	str	r2, [r3, #84]	; 0x54
 800a376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a378:	4a0b      	ldr	r2, [pc, #44]	; (800a3a8 <prvInitialiseNewTask+0x138>)
 800a37a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	68f9      	ldr	r1, [r7, #12]
 800a380:	69b8      	ldr	r0, [r7, #24]
 800a382:	f000 fe27 	bl	800afd4 <pxPortInitialiseStack>
 800a386:	4602      	mov	r2, r0
 800a388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d002      	beq.n	800a398 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a396:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a398:	bf00      	nop
 800a39a:	3720      	adds	r7, #32
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	0800bce8 	.word	0x0800bce8
 800a3a4:	0800bd08 	.word	0x0800bd08
 800a3a8:	0800bcc8 	.word	0x0800bcc8

0800a3ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a3b4:	f000 ff3e 	bl	800b234 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a3b8:	4b2a      	ldr	r3, [pc, #168]	; (800a464 <prvAddNewTaskToReadyList+0xb8>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	4a29      	ldr	r2, [pc, #164]	; (800a464 <prvAddNewTaskToReadyList+0xb8>)
 800a3c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a3c2:	4b29      	ldr	r3, [pc, #164]	; (800a468 <prvAddNewTaskToReadyList+0xbc>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d109      	bne.n	800a3de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a3ca:	4a27      	ldr	r2, [pc, #156]	; (800a468 <prvAddNewTaskToReadyList+0xbc>)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a3d0:	4b24      	ldr	r3, [pc, #144]	; (800a464 <prvAddNewTaskToReadyList+0xb8>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d110      	bne.n	800a3fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a3d8:	f000 fc30 	bl	800ac3c <prvInitialiseTaskLists>
 800a3dc:	e00d      	b.n	800a3fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a3de:	4b23      	ldr	r3, [pc, #140]	; (800a46c <prvAddNewTaskToReadyList+0xc0>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d109      	bne.n	800a3fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a3e6:	4b20      	ldr	r3, [pc, #128]	; (800a468 <prvAddNewTaskToReadyList+0xbc>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d802      	bhi.n	800a3fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a3f4:	4a1c      	ldr	r2, [pc, #112]	; (800a468 <prvAddNewTaskToReadyList+0xbc>)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a3fa:	4b1d      	ldr	r3, [pc, #116]	; (800a470 <prvAddNewTaskToReadyList+0xc4>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	3301      	adds	r3, #1
 800a400:	4a1b      	ldr	r2, [pc, #108]	; (800a470 <prvAddNewTaskToReadyList+0xc4>)
 800a402:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a408:	2201      	movs	r2, #1
 800a40a:	409a      	lsls	r2, r3
 800a40c:	4b19      	ldr	r3, [pc, #100]	; (800a474 <prvAddNewTaskToReadyList+0xc8>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4313      	orrs	r3, r2
 800a412:	4a18      	ldr	r2, [pc, #96]	; (800a474 <prvAddNewTaskToReadyList+0xc8>)
 800a414:	6013      	str	r3, [r2, #0]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a41a:	4613      	mov	r3, r2
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	4413      	add	r3, r2
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	4a15      	ldr	r2, [pc, #84]	; (800a478 <prvAddNewTaskToReadyList+0xcc>)
 800a424:	441a      	add	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	3304      	adds	r3, #4
 800a42a:	4619      	mov	r1, r3
 800a42c:	4610      	mov	r0, r2
 800a42e:	f7ff fa28 	bl	8009882 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a432:	f000 ff2f 	bl	800b294 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a436:	4b0d      	ldr	r3, [pc, #52]	; (800a46c <prvAddNewTaskToReadyList+0xc0>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00e      	beq.n	800a45c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a43e:	4b0a      	ldr	r3, [pc, #40]	; (800a468 <prvAddNewTaskToReadyList+0xbc>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a448:	429a      	cmp	r2, r3
 800a44a:	d207      	bcs.n	800a45c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a44c:	4b0b      	ldr	r3, [pc, #44]	; (800a47c <prvAddNewTaskToReadyList+0xd0>)
 800a44e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a452:	601a      	str	r2, [r3, #0]
 800a454:	f3bf 8f4f 	dsb	sy
 800a458:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a45c:	bf00      	nop
 800a45e:	3708      	adds	r7, #8
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	200009a0 	.word	0x200009a0
 800a468:	200008a0 	.word	0x200008a0
 800a46c:	200009ac 	.word	0x200009ac
 800a470:	200009bc 	.word	0x200009bc
 800a474:	200009a8 	.word	0x200009a8
 800a478:	200008a4 	.word	0x200008a4
 800a47c:	e000ed04 	.word	0xe000ed04

0800a480 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a480:	b580      	push	{r7, lr}
 800a482:	b08a      	sub	sp, #40	; 0x28
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a48a:	2300      	movs	r3, #0
 800a48c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d10a      	bne.n	800a4aa <vTaskDelayUntil+0x2a>
	__asm volatile
 800a494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a498:	f383 8811 	msr	BASEPRI, r3
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	617b      	str	r3, [r7, #20]
}
 800a4a6:	bf00      	nop
 800a4a8:	e7fe      	b.n	800a4a8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10a      	bne.n	800a4c6 <vTaskDelayUntil+0x46>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	613b      	str	r3, [r7, #16]
}
 800a4c2:	bf00      	nop
 800a4c4:	e7fe      	b.n	800a4c4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a4c6:	4b2a      	ldr	r3, [pc, #168]	; (800a570 <vTaskDelayUntil+0xf0>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00a      	beq.n	800a4e4 <vTaskDelayUntil+0x64>
	__asm volatile
 800a4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	60fb      	str	r3, [r7, #12]
}
 800a4e0:	bf00      	nop
 800a4e2:	e7fe      	b.n	800a4e2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a4e4:	f000 f8b4 	bl	800a650 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a4e8:	4b22      	ldr	r3, [pc, #136]	; (800a574 <vTaskDelayUntil+0xf4>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	683a      	ldr	r2, [r7, #0]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	6a3a      	ldr	r2, [r7, #32]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d20b      	bcs.n	800a51a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	69fa      	ldr	r2, [r7, #28]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d211      	bcs.n	800a530 <vTaskDelayUntil+0xb0>
 800a50c:	69fa      	ldr	r2, [r7, #28]
 800a50e:	6a3b      	ldr	r3, [r7, #32]
 800a510:	429a      	cmp	r2, r3
 800a512:	d90d      	bls.n	800a530 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a514:	2301      	movs	r3, #1
 800a516:	627b      	str	r3, [r7, #36]	; 0x24
 800a518:	e00a      	b.n	800a530 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	69fa      	ldr	r2, [r7, #28]
 800a520:	429a      	cmp	r2, r3
 800a522:	d303      	bcc.n	800a52c <vTaskDelayUntil+0xac>
 800a524:	69fa      	ldr	r2, [r7, #28]
 800a526:	6a3b      	ldr	r3, [r7, #32]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d901      	bls.n	800a530 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a52c:	2301      	movs	r3, #1
 800a52e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	69fa      	ldr	r2, [r7, #28]
 800a534:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d006      	beq.n	800a54a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a53c:	69fa      	ldr	r2, [r7, #28]
 800a53e:	6a3b      	ldr	r3, [r7, #32]
 800a540:	1ad3      	subs	r3, r2, r3
 800a542:	2100      	movs	r1, #0
 800a544:	4618      	mov	r0, r3
 800a546:	f000 fcdf 	bl	800af08 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a54a:	f000 f88f 	bl	800a66c <xTaskResumeAll>
 800a54e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d107      	bne.n	800a566 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a556:	4b08      	ldr	r3, [pc, #32]	; (800a578 <vTaskDelayUntil+0xf8>)
 800a558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a55c:	601a      	str	r2, [r3, #0]
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a566:	bf00      	nop
 800a568:	3728      	adds	r7, #40	; 0x28
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	200009c8 	.word	0x200009c8
 800a574:	200009a4 	.word	0x200009a4
 800a578:	e000ed04 	.word	0xe000ed04

0800a57c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b08a      	sub	sp, #40	; 0x28
 800a580:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a582:	2300      	movs	r3, #0
 800a584:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a586:	2300      	movs	r3, #0
 800a588:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a58a:	463a      	mov	r2, r7
 800a58c:	1d39      	adds	r1, r7, #4
 800a58e:	f107 0308 	add.w	r3, r7, #8
 800a592:	4618      	mov	r0, r3
 800a594:	f7f7 fcac 	bl	8001ef0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a598:	6839      	ldr	r1, [r7, #0]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	9202      	str	r2, [sp, #8]
 800a5a0:	9301      	str	r3, [sp, #4]
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	9300      	str	r3, [sp, #0]
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	460a      	mov	r2, r1
 800a5aa:	4921      	ldr	r1, [pc, #132]	; (800a630 <vTaskStartScheduler+0xb4>)
 800a5ac:	4821      	ldr	r0, [pc, #132]	; (800a634 <vTaskStartScheduler+0xb8>)
 800a5ae:	f7ff fdbd 	bl	800a12c <xTaskCreateStatic>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	4a20      	ldr	r2, [pc, #128]	; (800a638 <vTaskStartScheduler+0xbc>)
 800a5b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a5b8:	4b1f      	ldr	r3, [pc, #124]	; (800a638 <vTaskStartScheduler+0xbc>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d002      	beq.n	800a5c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	617b      	str	r3, [r7, #20]
 800a5c4:	e001      	b.n	800a5ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d11b      	bne.n	800a608 <vTaskStartScheduler+0x8c>
	__asm volatile
 800a5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d4:	f383 8811 	msr	BASEPRI, r3
 800a5d8:	f3bf 8f6f 	isb	sy
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	613b      	str	r3, [r7, #16]
}
 800a5e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a5e4:	4b15      	ldr	r3, [pc, #84]	; (800a63c <vTaskStartScheduler+0xc0>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	334c      	adds	r3, #76	; 0x4c
 800a5ea:	4a15      	ldr	r2, [pc, #84]	; (800a640 <vTaskStartScheduler+0xc4>)
 800a5ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a5ee:	4b15      	ldr	r3, [pc, #84]	; (800a644 <vTaskStartScheduler+0xc8>)
 800a5f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a5f6:	4b14      	ldr	r3, [pc, #80]	; (800a648 <vTaskStartScheduler+0xcc>)
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a5fc:	4b13      	ldr	r3, [pc, #76]	; (800a64c <vTaskStartScheduler+0xd0>)
 800a5fe:	2200      	movs	r2, #0
 800a600:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a602:	f000 fd75 	bl	800b0f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a606:	e00e      	b.n	800a626 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a60e:	d10a      	bne.n	800a626 <vTaskStartScheduler+0xaa>
	__asm volatile
 800a610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a614:	f383 8811 	msr	BASEPRI, r3
 800a618:	f3bf 8f6f 	isb	sy
 800a61c:	f3bf 8f4f 	dsb	sy
 800a620:	60fb      	str	r3, [r7, #12]
}
 800a622:	bf00      	nop
 800a624:	e7fe      	b.n	800a624 <vTaskStartScheduler+0xa8>
}
 800a626:	bf00      	nop
 800a628:	3718      	adds	r7, #24
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	0800bca0 	.word	0x0800bca0
 800a634:	0800ac0d 	.word	0x0800ac0d
 800a638:	200009c4 	.word	0x200009c4
 800a63c:	200008a0 	.word	0x200008a0
 800a640:	20000050 	.word	0x20000050
 800a644:	200009c0 	.word	0x200009c0
 800a648:	200009ac 	.word	0x200009ac
 800a64c:	200009a4 	.word	0x200009a4

0800a650 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a650:	b480      	push	{r7}
 800a652:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a654:	4b04      	ldr	r3, [pc, #16]	; (800a668 <vTaskSuspendAll+0x18>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	3301      	adds	r3, #1
 800a65a:	4a03      	ldr	r2, [pc, #12]	; (800a668 <vTaskSuspendAll+0x18>)
 800a65c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a65e:	bf00      	nop
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr
 800a668:	200009c8 	.word	0x200009c8

0800a66c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a672:	2300      	movs	r3, #0
 800a674:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a676:	2300      	movs	r3, #0
 800a678:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a67a:	4b41      	ldr	r3, [pc, #260]	; (800a780 <xTaskResumeAll+0x114>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d10a      	bne.n	800a698 <xTaskResumeAll+0x2c>
	__asm volatile
 800a682:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a686:	f383 8811 	msr	BASEPRI, r3
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	603b      	str	r3, [r7, #0]
}
 800a694:	bf00      	nop
 800a696:	e7fe      	b.n	800a696 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a698:	f000 fdcc 	bl	800b234 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a69c:	4b38      	ldr	r3, [pc, #224]	; (800a780 <xTaskResumeAll+0x114>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	4a37      	ldr	r2, [pc, #220]	; (800a780 <xTaskResumeAll+0x114>)
 800a6a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6a6:	4b36      	ldr	r3, [pc, #216]	; (800a780 <xTaskResumeAll+0x114>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d161      	bne.n	800a772 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a6ae:	4b35      	ldr	r3, [pc, #212]	; (800a784 <xTaskResumeAll+0x118>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d05d      	beq.n	800a772 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6b6:	e02e      	b.n	800a716 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6b8:	4b33      	ldr	r3, [pc, #204]	; (800a788 <xTaskResumeAll+0x11c>)
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	3318      	adds	r3, #24
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7ff f939 	bl	800993c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	3304      	adds	r3, #4
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7ff f934 	bl	800993c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d8:	2201      	movs	r2, #1
 800a6da:	409a      	lsls	r2, r3
 800a6dc:	4b2b      	ldr	r3, [pc, #172]	; (800a78c <xTaskResumeAll+0x120>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	4a2a      	ldr	r2, [pc, #168]	; (800a78c <xTaskResumeAll+0x120>)
 800a6e4:	6013      	str	r3, [r2, #0]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	4413      	add	r3, r2
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	4a27      	ldr	r2, [pc, #156]	; (800a790 <xTaskResumeAll+0x124>)
 800a6f4:	441a      	add	r2, r3
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	3304      	adds	r3, #4
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	4610      	mov	r0, r2
 800a6fe:	f7ff f8c0 	bl	8009882 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a706:	4b23      	ldr	r3, [pc, #140]	; (800a794 <xTaskResumeAll+0x128>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d302      	bcc.n	800a716 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a710:	4b21      	ldr	r3, [pc, #132]	; (800a798 <xTaskResumeAll+0x12c>)
 800a712:	2201      	movs	r2, #1
 800a714:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a716:	4b1c      	ldr	r3, [pc, #112]	; (800a788 <xTaskResumeAll+0x11c>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d1cc      	bne.n	800a6b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d001      	beq.n	800a728 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a724:	f000 fb2c 	bl	800ad80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a728:	4b1c      	ldr	r3, [pc, #112]	; (800a79c <xTaskResumeAll+0x130>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d010      	beq.n	800a756 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a734:	f000 f846 	bl	800a7c4 <xTaskIncrementTick>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d002      	beq.n	800a744 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a73e:	4b16      	ldr	r3, [pc, #88]	; (800a798 <xTaskResumeAll+0x12c>)
 800a740:	2201      	movs	r2, #1
 800a742:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	3b01      	subs	r3, #1
 800a748:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1f1      	bne.n	800a734 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a750:	4b12      	ldr	r3, [pc, #72]	; (800a79c <xTaskResumeAll+0x130>)
 800a752:	2200      	movs	r2, #0
 800a754:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a756:	4b10      	ldr	r3, [pc, #64]	; (800a798 <xTaskResumeAll+0x12c>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d009      	beq.n	800a772 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a75e:	2301      	movs	r3, #1
 800a760:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a762:	4b0f      	ldr	r3, [pc, #60]	; (800a7a0 <xTaskResumeAll+0x134>)
 800a764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a768:	601a      	str	r2, [r3, #0]
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a772:	f000 fd8f 	bl	800b294 <vPortExitCritical>

	return xAlreadyYielded;
 800a776:	68bb      	ldr	r3, [r7, #8]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	200009c8 	.word	0x200009c8
 800a784:	200009a0 	.word	0x200009a0
 800a788:	20000960 	.word	0x20000960
 800a78c:	200009a8 	.word	0x200009a8
 800a790:	200008a4 	.word	0x200008a4
 800a794:	200008a0 	.word	0x200008a0
 800a798:	200009b4 	.word	0x200009b4
 800a79c:	200009b0 	.word	0x200009b0
 800a7a0:	e000ed04 	.word	0xe000ed04

0800a7a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a7aa:	4b05      	ldr	r3, [pc, #20]	; (800a7c0 <xTaskGetTickCount+0x1c>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a7b0:	687b      	ldr	r3, [r7, #4]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	200009a4 	.word	0x200009a4

0800a7c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b086      	sub	sp, #24
 800a7c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7ce:	4b4e      	ldr	r3, [pc, #312]	; (800a908 <xTaskIncrementTick+0x144>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f040 808e 	bne.w	800a8f4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a7d8:	4b4c      	ldr	r3, [pc, #304]	; (800a90c <xTaskIncrementTick+0x148>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	3301      	adds	r3, #1
 800a7de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a7e0:	4a4a      	ldr	r2, [pc, #296]	; (800a90c <xTaskIncrementTick+0x148>)
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d120      	bne.n	800a82e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a7ec:	4b48      	ldr	r3, [pc, #288]	; (800a910 <xTaskIncrementTick+0x14c>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d00a      	beq.n	800a80c <xTaskIncrementTick+0x48>
	__asm volatile
 800a7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fa:	f383 8811 	msr	BASEPRI, r3
 800a7fe:	f3bf 8f6f 	isb	sy
 800a802:	f3bf 8f4f 	dsb	sy
 800a806:	603b      	str	r3, [r7, #0]
}
 800a808:	bf00      	nop
 800a80a:	e7fe      	b.n	800a80a <xTaskIncrementTick+0x46>
 800a80c:	4b40      	ldr	r3, [pc, #256]	; (800a910 <xTaskIncrementTick+0x14c>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	60fb      	str	r3, [r7, #12]
 800a812:	4b40      	ldr	r3, [pc, #256]	; (800a914 <xTaskIncrementTick+0x150>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a3e      	ldr	r2, [pc, #248]	; (800a910 <xTaskIncrementTick+0x14c>)
 800a818:	6013      	str	r3, [r2, #0]
 800a81a:	4a3e      	ldr	r2, [pc, #248]	; (800a914 <xTaskIncrementTick+0x150>)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6013      	str	r3, [r2, #0]
 800a820:	4b3d      	ldr	r3, [pc, #244]	; (800a918 <xTaskIncrementTick+0x154>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	3301      	adds	r3, #1
 800a826:	4a3c      	ldr	r2, [pc, #240]	; (800a918 <xTaskIncrementTick+0x154>)
 800a828:	6013      	str	r3, [r2, #0]
 800a82a:	f000 faa9 	bl	800ad80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a82e:	4b3b      	ldr	r3, [pc, #236]	; (800a91c <xTaskIncrementTick+0x158>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	693a      	ldr	r2, [r7, #16]
 800a834:	429a      	cmp	r2, r3
 800a836:	d348      	bcc.n	800a8ca <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a838:	4b35      	ldr	r3, [pc, #212]	; (800a910 <xTaskIncrementTick+0x14c>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d104      	bne.n	800a84c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a842:	4b36      	ldr	r3, [pc, #216]	; (800a91c <xTaskIncrementTick+0x158>)
 800a844:	f04f 32ff 	mov.w	r2, #4294967295
 800a848:	601a      	str	r2, [r3, #0]
					break;
 800a84a:	e03e      	b.n	800a8ca <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a84c:	4b30      	ldr	r3, [pc, #192]	; (800a910 <xTaskIncrementTick+0x14c>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a85c:	693a      	ldr	r2, [r7, #16]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	429a      	cmp	r2, r3
 800a862:	d203      	bcs.n	800a86c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a864:	4a2d      	ldr	r2, [pc, #180]	; (800a91c <xTaskIncrementTick+0x158>)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a86a:	e02e      	b.n	800a8ca <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	3304      	adds	r3, #4
 800a870:	4618      	mov	r0, r3
 800a872:	f7ff f863 	bl	800993c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d004      	beq.n	800a888 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	3318      	adds	r3, #24
 800a882:	4618      	mov	r0, r3
 800a884:	f7ff f85a 	bl	800993c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a88c:	2201      	movs	r2, #1
 800a88e:	409a      	lsls	r2, r3
 800a890:	4b23      	ldr	r3, [pc, #140]	; (800a920 <xTaskIncrementTick+0x15c>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4313      	orrs	r3, r2
 800a896:	4a22      	ldr	r2, [pc, #136]	; (800a920 <xTaskIncrementTick+0x15c>)
 800a898:	6013      	str	r3, [r2, #0]
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a89e:	4613      	mov	r3, r2
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	4413      	add	r3, r2
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	4a1f      	ldr	r2, [pc, #124]	; (800a924 <xTaskIncrementTick+0x160>)
 800a8a8:	441a      	add	r2, r3
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	3304      	adds	r3, #4
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	4610      	mov	r0, r2
 800a8b2:	f7fe ffe6 	bl	8009882 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ba:	4b1b      	ldr	r3, [pc, #108]	; (800a928 <xTaskIncrementTick+0x164>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d3b9      	bcc.n	800a838 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8c8:	e7b6      	b.n	800a838 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a8ca:	4b17      	ldr	r3, [pc, #92]	; (800a928 <xTaskIncrementTick+0x164>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d0:	4914      	ldr	r1, [pc, #80]	; (800a924 <xTaskIncrementTick+0x160>)
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	4413      	add	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	440b      	add	r3, r1
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d901      	bls.n	800a8e6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a8e6:	4b11      	ldr	r3, [pc, #68]	; (800a92c <xTaskIncrementTick+0x168>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d007      	beq.n	800a8fe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	617b      	str	r3, [r7, #20]
 800a8f2:	e004      	b.n	800a8fe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a8f4:	4b0e      	ldr	r3, [pc, #56]	; (800a930 <xTaskIncrementTick+0x16c>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	4a0d      	ldr	r2, [pc, #52]	; (800a930 <xTaskIncrementTick+0x16c>)
 800a8fc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a8fe:	697b      	ldr	r3, [r7, #20]
}
 800a900:	4618      	mov	r0, r3
 800a902:	3718      	adds	r7, #24
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	200009c8 	.word	0x200009c8
 800a90c:	200009a4 	.word	0x200009a4
 800a910:	20000958 	.word	0x20000958
 800a914:	2000095c 	.word	0x2000095c
 800a918:	200009b8 	.word	0x200009b8
 800a91c:	200009c0 	.word	0x200009c0
 800a920:	200009a8 	.word	0x200009a8
 800a924:	200008a4 	.word	0x200008a4
 800a928:	200008a0 	.word	0x200008a0
 800a92c:	200009b4 	.word	0x200009b4
 800a930:	200009b0 	.word	0x200009b0

0800a934 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a934:	b480      	push	{r7}
 800a936:	b087      	sub	sp, #28
 800a938:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a93a:	4b29      	ldr	r3, [pc, #164]	; (800a9e0 <vTaskSwitchContext+0xac>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d003      	beq.n	800a94a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a942:	4b28      	ldr	r3, [pc, #160]	; (800a9e4 <vTaskSwitchContext+0xb0>)
 800a944:	2201      	movs	r2, #1
 800a946:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a948:	e044      	b.n	800a9d4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a94a:	4b26      	ldr	r3, [pc, #152]	; (800a9e4 <vTaskSwitchContext+0xb0>)
 800a94c:	2200      	movs	r2, #0
 800a94e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a950:	4b25      	ldr	r3, [pc, #148]	; (800a9e8 <vTaskSwitchContext+0xb4>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	fab3 f383 	clz	r3, r3
 800a95c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a95e:	7afb      	ldrb	r3, [r7, #11]
 800a960:	f1c3 031f 	rsb	r3, r3, #31
 800a964:	617b      	str	r3, [r7, #20]
 800a966:	4921      	ldr	r1, [pc, #132]	; (800a9ec <vTaskSwitchContext+0xb8>)
 800a968:	697a      	ldr	r2, [r7, #20]
 800a96a:	4613      	mov	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	4413      	add	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	440b      	add	r3, r1
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d10a      	bne.n	800a990 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97e:	f383 8811 	msr	BASEPRI, r3
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	607b      	str	r3, [r7, #4]
}
 800a98c:	bf00      	nop
 800a98e:	e7fe      	b.n	800a98e <vTaskSwitchContext+0x5a>
 800a990:	697a      	ldr	r2, [r7, #20]
 800a992:	4613      	mov	r3, r2
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	4413      	add	r3, r2
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	4a14      	ldr	r2, [pc, #80]	; (800a9ec <vTaskSwitchContext+0xb8>)
 800a99c:	4413      	add	r3, r2
 800a99e:	613b      	str	r3, [r7, #16]
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	685a      	ldr	r2, [r3, #4]
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	605a      	str	r2, [r3, #4]
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	685a      	ldr	r2, [r3, #4]
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	3308      	adds	r3, #8
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d104      	bne.n	800a9c0 <vTaskSwitchContext+0x8c>
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	685a      	ldr	r2, [r3, #4]
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	605a      	str	r2, [r3, #4]
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	68db      	ldr	r3, [r3, #12]
 800a9c6:	4a0a      	ldr	r2, [pc, #40]	; (800a9f0 <vTaskSwitchContext+0xbc>)
 800a9c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9ca:	4b09      	ldr	r3, [pc, #36]	; (800a9f0 <vTaskSwitchContext+0xbc>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	334c      	adds	r3, #76	; 0x4c
 800a9d0:	4a08      	ldr	r2, [pc, #32]	; (800a9f4 <vTaskSwitchContext+0xc0>)
 800a9d2:	6013      	str	r3, [r2, #0]
}
 800a9d4:	bf00      	nop
 800a9d6:	371c      	adds	r7, #28
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr
 800a9e0:	200009c8 	.word	0x200009c8
 800a9e4:	200009b4 	.word	0x200009b4
 800a9e8:	200009a8 	.word	0x200009a8
 800a9ec:	200008a4 	.word	0x200008a4
 800a9f0:	200008a0 	.word	0x200008a0
 800a9f4:	20000050 	.word	0x20000050

0800a9f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d10a      	bne.n	800aa1e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800aa08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0c:	f383 8811 	msr	BASEPRI, r3
 800aa10:	f3bf 8f6f 	isb	sy
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	60fb      	str	r3, [r7, #12]
}
 800aa1a:	bf00      	nop
 800aa1c:	e7fe      	b.n	800aa1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa1e:	4b07      	ldr	r3, [pc, #28]	; (800aa3c <vTaskPlaceOnEventList+0x44>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	3318      	adds	r3, #24
 800aa24:	4619      	mov	r1, r3
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f7fe ff4f 	bl	80098ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aa2c:	2101      	movs	r1, #1
 800aa2e:	6838      	ldr	r0, [r7, #0]
 800aa30:	f000 fa6a 	bl	800af08 <prvAddCurrentTaskToDelayedList>
}
 800aa34:	bf00      	nop
 800aa36:	3710      	adds	r7, #16
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	200008a0 	.word	0x200008a0

0800aa40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b086      	sub	sp, #24
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d10a      	bne.n	800aa6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aa56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5a:	f383 8811 	msr	BASEPRI, r3
 800aa5e:	f3bf 8f6f 	isb	sy
 800aa62:	f3bf 8f4f 	dsb	sy
 800aa66:	60fb      	str	r3, [r7, #12]
}
 800aa68:	bf00      	nop
 800aa6a:	e7fe      	b.n	800aa6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	3318      	adds	r3, #24
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fe ff63 	bl	800993c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa76:	4b1d      	ldr	r3, [pc, #116]	; (800aaec <xTaskRemoveFromEventList+0xac>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d11c      	bne.n	800aab8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	3304      	adds	r3, #4
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7fe ff5a 	bl	800993c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	409a      	lsls	r2, r3
 800aa90:	4b17      	ldr	r3, [pc, #92]	; (800aaf0 <xTaskRemoveFromEventList+0xb0>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4313      	orrs	r3, r2
 800aa96:	4a16      	ldr	r2, [pc, #88]	; (800aaf0 <xTaskRemoveFromEventList+0xb0>)
 800aa98:	6013      	str	r3, [r2, #0]
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa9e:	4613      	mov	r3, r2
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	4413      	add	r3, r2
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	4a13      	ldr	r2, [pc, #76]	; (800aaf4 <xTaskRemoveFromEventList+0xb4>)
 800aaa8:	441a      	add	r2, r3
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	3304      	adds	r3, #4
 800aaae:	4619      	mov	r1, r3
 800aab0:	4610      	mov	r0, r2
 800aab2:	f7fe fee6 	bl	8009882 <vListInsertEnd>
 800aab6:	e005      	b.n	800aac4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	3318      	adds	r3, #24
 800aabc:	4619      	mov	r1, r3
 800aabe:	480e      	ldr	r0, [pc, #56]	; (800aaf8 <xTaskRemoveFromEventList+0xb8>)
 800aac0:	f7fe fedf 	bl	8009882 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aac8:	4b0c      	ldr	r3, [pc, #48]	; (800aafc <xTaskRemoveFromEventList+0xbc>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aace:	429a      	cmp	r2, r3
 800aad0:	d905      	bls.n	800aade <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aad2:	2301      	movs	r3, #1
 800aad4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aad6:	4b0a      	ldr	r3, [pc, #40]	; (800ab00 <xTaskRemoveFromEventList+0xc0>)
 800aad8:	2201      	movs	r2, #1
 800aada:	601a      	str	r2, [r3, #0]
 800aadc:	e001      	b.n	800aae2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800aade:	2300      	movs	r3, #0
 800aae0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aae2:	697b      	ldr	r3, [r7, #20]
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3718      	adds	r7, #24
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	200009c8 	.word	0x200009c8
 800aaf0:	200009a8 	.word	0x200009a8
 800aaf4:	200008a4 	.word	0x200008a4
 800aaf8:	20000960 	.word	0x20000960
 800aafc:	200008a0 	.word	0x200008a0
 800ab00:	200009b4 	.word	0x200009b4

0800ab04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab0c:	4b06      	ldr	r3, [pc, #24]	; (800ab28 <vTaskInternalSetTimeOutState+0x24>)
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab14:	4b05      	ldr	r3, [pc, #20]	; (800ab2c <vTaskInternalSetTimeOutState+0x28>)
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	605a      	str	r2, [r3, #4]
}
 800ab1c:	bf00      	nop
 800ab1e:	370c      	adds	r7, #12
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr
 800ab28:	200009b8 	.word	0x200009b8
 800ab2c:	200009a4 	.word	0x200009a4

0800ab30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b088      	sub	sp, #32
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d10a      	bne.n	800ab56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ab40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab44:	f383 8811 	msr	BASEPRI, r3
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	613b      	str	r3, [r7, #16]
}
 800ab52:	bf00      	nop
 800ab54:	e7fe      	b.n	800ab54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d10a      	bne.n	800ab72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ab5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab60:	f383 8811 	msr	BASEPRI, r3
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	f3bf 8f4f 	dsb	sy
 800ab6c:	60fb      	str	r3, [r7, #12]
}
 800ab6e:	bf00      	nop
 800ab70:	e7fe      	b.n	800ab70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ab72:	f000 fb5f 	bl	800b234 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ab76:	4b1d      	ldr	r3, [pc, #116]	; (800abec <xTaskCheckForTimeOut+0xbc>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	69ba      	ldr	r2, [r7, #24]
 800ab82:	1ad3      	subs	r3, r2, r3
 800ab84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab8e:	d102      	bne.n	800ab96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ab90:	2300      	movs	r3, #0
 800ab92:	61fb      	str	r3, [r7, #28]
 800ab94:	e023      	b.n	800abde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	4b15      	ldr	r3, [pc, #84]	; (800abf0 <xTaskCheckForTimeOut+0xc0>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d007      	beq.n	800abb2 <xTaskCheckForTimeOut+0x82>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	69ba      	ldr	r2, [r7, #24]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d302      	bcc.n	800abb2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800abac:	2301      	movs	r3, #1
 800abae:	61fb      	str	r3, [r7, #28]
 800abb0:	e015      	b.n	800abde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	697a      	ldr	r2, [r7, #20]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d20b      	bcs.n	800abd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	1ad2      	subs	r2, r2, r3
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f7ff ff9b 	bl	800ab04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800abce:	2300      	movs	r3, #0
 800abd0:	61fb      	str	r3, [r7, #28]
 800abd2:	e004      	b.n	800abde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	2200      	movs	r2, #0
 800abd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800abda:	2301      	movs	r3, #1
 800abdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800abde:	f000 fb59 	bl	800b294 <vPortExitCritical>

	return xReturn;
 800abe2:	69fb      	ldr	r3, [r7, #28]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3720      	adds	r7, #32
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	200009a4 	.word	0x200009a4
 800abf0:	200009b8 	.word	0x200009b8

0800abf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800abf4:	b480      	push	{r7}
 800abf6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800abf8:	4b03      	ldr	r3, [pc, #12]	; (800ac08 <vTaskMissedYield+0x14>)
 800abfa:	2201      	movs	r2, #1
 800abfc:	601a      	str	r2, [r3, #0]
}
 800abfe:	bf00      	nop
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr
 800ac08:	200009b4 	.word	0x200009b4

0800ac0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac14:	f000 f852 	bl	800acbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac18:	4b06      	ldr	r3, [pc, #24]	; (800ac34 <prvIdleTask+0x28>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d9f9      	bls.n	800ac14 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac20:	4b05      	ldr	r3, [pc, #20]	; (800ac38 <prvIdleTask+0x2c>)
 800ac22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac26:	601a      	str	r2, [r3, #0]
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac30:	e7f0      	b.n	800ac14 <prvIdleTask+0x8>
 800ac32:	bf00      	nop
 800ac34:	200008a4 	.word	0x200008a4
 800ac38:	e000ed04 	.word	0xe000ed04

0800ac3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac42:	2300      	movs	r3, #0
 800ac44:	607b      	str	r3, [r7, #4]
 800ac46:	e00c      	b.n	800ac62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4413      	add	r3, r2
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	4a12      	ldr	r2, [pc, #72]	; (800ac9c <prvInitialiseTaskLists+0x60>)
 800ac54:	4413      	add	r3, r2
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7fe fde6 	bl	8009828 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	3301      	adds	r3, #1
 800ac60:	607b      	str	r3, [r7, #4]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2b06      	cmp	r3, #6
 800ac66:	d9ef      	bls.n	800ac48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ac68:	480d      	ldr	r0, [pc, #52]	; (800aca0 <prvInitialiseTaskLists+0x64>)
 800ac6a:	f7fe fddd 	bl	8009828 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ac6e:	480d      	ldr	r0, [pc, #52]	; (800aca4 <prvInitialiseTaskLists+0x68>)
 800ac70:	f7fe fdda 	bl	8009828 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ac74:	480c      	ldr	r0, [pc, #48]	; (800aca8 <prvInitialiseTaskLists+0x6c>)
 800ac76:	f7fe fdd7 	bl	8009828 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ac7a:	480c      	ldr	r0, [pc, #48]	; (800acac <prvInitialiseTaskLists+0x70>)
 800ac7c:	f7fe fdd4 	bl	8009828 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ac80:	480b      	ldr	r0, [pc, #44]	; (800acb0 <prvInitialiseTaskLists+0x74>)
 800ac82:	f7fe fdd1 	bl	8009828 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ac86:	4b0b      	ldr	r3, [pc, #44]	; (800acb4 <prvInitialiseTaskLists+0x78>)
 800ac88:	4a05      	ldr	r2, [pc, #20]	; (800aca0 <prvInitialiseTaskLists+0x64>)
 800ac8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac8c:	4b0a      	ldr	r3, [pc, #40]	; (800acb8 <prvInitialiseTaskLists+0x7c>)
 800ac8e:	4a05      	ldr	r2, [pc, #20]	; (800aca4 <prvInitialiseTaskLists+0x68>)
 800ac90:	601a      	str	r2, [r3, #0]
}
 800ac92:	bf00      	nop
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	200008a4 	.word	0x200008a4
 800aca0:	20000930 	.word	0x20000930
 800aca4:	20000944 	.word	0x20000944
 800aca8:	20000960 	.word	0x20000960
 800acac:	20000974 	.word	0x20000974
 800acb0:	2000098c 	.word	0x2000098c
 800acb4:	20000958 	.word	0x20000958
 800acb8:	2000095c 	.word	0x2000095c

0800acbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800acc2:	e019      	b.n	800acf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800acc4:	f000 fab6 	bl	800b234 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acc8:	4b10      	ldr	r3, [pc, #64]	; (800ad0c <prvCheckTasksWaitingTermination+0x50>)
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	3304      	adds	r3, #4
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7fe fe31 	bl	800993c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800acda:	4b0d      	ldr	r3, [pc, #52]	; (800ad10 <prvCheckTasksWaitingTermination+0x54>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	3b01      	subs	r3, #1
 800ace0:	4a0b      	ldr	r2, [pc, #44]	; (800ad10 <prvCheckTasksWaitingTermination+0x54>)
 800ace2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ace4:	4b0b      	ldr	r3, [pc, #44]	; (800ad14 <prvCheckTasksWaitingTermination+0x58>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	3b01      	subs	r3, #1
 800acea:	4a0a      	ldr	r2, [pc, #40]	; (800ad14 <prvCheckTasksWaitingTermination+0x58>)
 800acec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800acee:	f000 fad1 	bl	800b294 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 f810 	bl	800ad18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800acf8:	4b06      	ldr	r3, [pc, #24]	; (800ad14 <prvCheckTasksWaitingTermination+0x58>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d1e1      	bne.n	800acc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ad00:	bf00      	nop
 800ad02:	bf00      	nop
 800ad04:	3708      	adds	r7, #8
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	20000974 	.word	0x20000974
 800ad10:	200009a0 	.word	0x200009a0
 800ad14:	20000988 	.word	0x20000988

0800ad18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	334c      	adds	r3, #76	; 0x4c
 800ad24:	4618      	mov	r0, r3
 800ad26:	f000 fde5 	bl	800b8f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d108      	bne.n	800ad46 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f000 fc29 	bl	800b590 <vPortFree>
				vPortFree( pxTCB );
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 fc26 	bl	800b590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad44:	e018      	b.n	800ad78 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d103      	bne.n	800ad58 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 fc1d 	bl	800b590 <vPortFree>
	}
 800ad56:	e00f      	b.n	800ad78 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	d00a      	beq.n	800ad78 <prvDeleteTCB+0x60>
	__asm volatile
 800ad62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad66:	f383 8811 	msr	BASEPRI, r3
 800ad6a:	f3bf 8f6f 	isb	sy
 800ad6e:	f3bf 8f4f 	dsb	sy
 800ad72:	60fb      	str	r3, [r7, #12]
}
 800ad74:	bf00      	nop
 800ad76:	e7fe      	b.n	800ad76 <prvDeleteTCB+0x5e>
	}
 800ad78:	bf00      	nop
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad86:	4b0c      	ldr	r3, [pc, #48]	; (800adb8 <prvResetNextTaskUnblockTime+0x38>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d104      	bne.n	800ad9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad90:	4b0a      	ldr	r3, [pc, #40]	; (800adbc <prvResetNextTaskUnblockTime+0x3c>)
 800ad92:	f04f 32ff 	mov.w	r2, #4294967295
 800ad96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ad98:	e008      	b.n	800adac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad9a:	4b07      	ldr	r3, [pc, #28]	; (800adb8 <prvResetNextTaskUnblockTime+0x38>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68db      	ldr	r3, [r3, #12]
 800ada0:	68db      	ldr	r3, [r3, #12]
 800ada2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	4a04      	ldr	r2, [pc, #16]	; (800adbc <prvResetNextTaskUnblockTime+0x3c>)
 800adaa:	6013      	str	r3, [r2, #0]
}
 800adac:	bf00      	nop
 800adae:	370c      	adds	r7, #12
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr
 800adb8:	20000958 	.word	0x20000958
 800adbc:	200009c0 	.word	0x200009c0

0800adc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800adc6:	4b0b      	ldr	r3, [pc, #44]	; (800adf4 <xTaskGetSchedulerState+0x34>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d102      	bne.n	800add4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800adce:	2301      	movs	r3, #1
 800add0:	607b      	str	r3, [r7, #4]
 800add2:	e008      	b.n	800ade6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800add4:	4b08      	ldr	r3, [pc, #32]	; (800adf8 <xTaskGetSchedulerState+0x38>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d102      	bne.n	800ade2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800addc:	2302      	movs	r3, #2
 800adde:	607b      	str	r3, [r7, #4]
 800ade0:	e001      	b.n	800ade6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ade2:	2300      	movs	r3, #0
 800ade4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ade6:	687b      	ldr	r3, [r7, #4]
	}
 800ade8:	4618      	mov	r0, r3
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	200009ac 	.word	0x200009ac
 800adf8:	200009c8 	.word	0x200009c8

0800adfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b086      	sub	sp, #24
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d06e      	beq.n	800aef0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ae12:	4b3a      	ldr	r3, [pc, #232]	; (800aefc <xTaskPriorityDisinherit+0x100>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	693a      	ldr	r2, [r7, #16]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d00a      	beq.n	800ae32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ae1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae20:	f383 8811 	msr	BASEPRI, r3
 800ae24:	f3bf 8f6f 	isb	sy
 800ae28:	f3bf 8f4f 	dsb	sy
 800ae2c:	60fb      	str	r3, [r7, #12]
}
 800ae2e:	bf00      	nop
 800ae30:	e7fe      	b.n	800ae30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d10a      	bne.n	800ae50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ae3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3e:	f383 8811 	msr	BASEPRI, r3
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	60bb      	str	r3, [r7, #8]
}
 800ae4c:	bf00      	nop
 800ae4e:	e7fe      	b.n	800ae4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae54:	1e5a      	subs	r2, r3, #1
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d044      	beq.n	800aef0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d140      	bne.n	800aef0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	3304      	adds	r3, #4
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fe fd62 	bl	800993c <uxListRemove>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d115      	bne.n	800aeaa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae82:	491f      	ldr	r1, [pc, #124]	; (800af00 <xTaskPriorityDisinherit+0x104>)
 800ae84:	4613      	mov	r3, r2
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	4413      	add	r3, r2
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	440b      	add	r3, r1
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10a      	bne.n	800aeaa <xTaskPriorityDisinherit+0xae>
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae98:	2201      	movs	r2, #1
 800ae9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae9e:	43da      	mvns	r2, r3
 800aea0:	4b18      	ldr	r3, [pc, #96]	; (800af04 <xTaskPriorityDisinherit+0x108>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4013      	ands	r3, r2
 800aea6:	4a17      	ldr	r2, [pc, #92]	; (800af04 <xTaskPriorityDisinherit+0x108>)
 800aea8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb6:	f1c3 0207 	rsb	r2, r3, #7
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec2:	2201      	movs	r2, #1
 800aec4:	409a      	lsls	r2, r3
 800aec6:	4b0f      	ldr	r3, [pc, #60]	; (800af04 <xTaskPriorityDisinherit+0x108>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	4a0d      	ldr	r2, [pc, #52]	; (800af04 <xTaskPriorityDisinherit+0x108>)
 800aece:	6013      	str	r3, [r2, #0]
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed4:	4613      	mov	r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	4413      	add	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4a08      	ldr	r2, [pc, #32]	; (800af00 <xTaskPriorityDisinherit+0x104>)
 800aede:	441a      	add	r2, r3
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	3304      	adds	r3, #4
 800aee4:	4619      	mov	r1, r3
 800aee6:	4610      	mov	r0, r2
 800aee8:	f7fe fccb 	bl	8009882 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aeec:	2301      	movs	r3, #1
 800aeee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aef0:	697b      	ldr	r3, [r7, #20]
	}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3718      	adds	r7, #24
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	200008a0 	.word	0x200008a0
 800af00:	200008a4 	.word	0x200008a4
 800af04:	200009a8 	.word	0x200009a8

0800af08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b084      	sub	sp, #16
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800af12:	4b29      	ldr	r3, [pc, #164]	; (800afb8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af18:	4b28      	ldr	r3, [pc, #160]	; (800afbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	3304      	adds	r3, #4
 800af1e:	4618      	mov	r0, r3
 800af20:	f7fe fd0c 	bl	800993c <uxListRemove>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d10b      	bne.n	800af42 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800af2a:	4b24      	ldr	r3, [pc, #144]	; (800afbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af30:	2201      	movs	r2, #1
 800af32:	fa02 f303 	lsl.w	r3, r2, r3
 800af36:	43da      	mvns	r2, r3
 800af38:	4b21      	ldr	r3, [pc, #132]	; (800afc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4013      	ands	r3, r2
 800af3e:	4a20      	ldr	r2, [pc, #128]	; (800afc0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800af40:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af48:	d10a      	bne.n	800af60 <prvAddCurrentTaskToDelayedList+0x58>
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d007      	beq.n	800af60 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af50:	4b1a      	ldr	r3, [pc, #104]	; (800afbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	3304      	adds	r3, #4
 800af56:	4619      	mov	r1, r3
 800af58:	481a      	ldr	r0, [pc, #104]	; (800afc4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800af5a:	f7fe fc92 	bl	8009882 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800af5e:	e026      	b.n	800afae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800af60:	68fa      	ldr	r2, [r7, #12]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	4413      	add	r3, r2
 800af66:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800af68:	4b14      	ldr	r3, [pc, #80]	; (800afbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	68ba      	ldr	r2, [r7, #8]
 800af6e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800af70:	68ba      	ldr	r2, [r7, #8]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	429a      	cmp	r2, r3
 800af76:	d209      	bcs.n	800af8c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af78:	4b13      	ldr	r3, [pc, #76]	; (800afc8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	4b0f      	ldr	r3, [pc, #60]	; (800afbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	3304      	adds	r3, #4
 800af82:	4619      	mov	r1, r3
 800af84:	4610      	mov	r0, r2
 800af86:	f7fe fca0 	bl	80098ca <vListInsert>
}
 800af8a:	e010      	b.n	800afae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800af8c:	4b0f      	ldr	r3, [pc, #60]	; (800afcc <prvAddCurrentTaskToDelayedList+0xc4>)
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	4b0a      	ldr	r3, [pc, #40]	; (800afbc <prvAddCurrentTaskToDelayedList+0xb4>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	3304      	adds	r3, #4
 800af96:	4619      	mov	r1, r3
 800af98:	4610      	mov	r0, r2
 800af9a:	f7fe fc96 	bl	80098ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800af9e:	4b0c      	ldr	r3, [pc, #48]	; (800afd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	68ba      	ldr	r2, [r7, #8]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d202      	bcs.n	800afae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800afa8:	4a09      	ldr	r2, [pc, #36]	; (800afd0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	6013      	str	r3, [r2, #0]
}
 800afae:	bf00      	nop
 800afb0:	3710      	adds	r7, #16
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	200009a4 	.word	0x200009a4
 800afbc:	200008a0 	.word	0x200008a0
 800afc0:	200009a8 	.word	0x200009a8
 800afc4:	2000098c 	.word	0x2000098c
 800afc8:	2000095c 	.word	0x2000095c
 800afcc:	20000958 	.word	0x20000958
 800afd0:	200009c0 	.word	0x200009c0

0800afd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	3b04      	subs	r3, #4
 800afe4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800afec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	3b04      	subs	r3, #4
 800aff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	f023 0201 	bic.w	r2, r3, #1
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	3b04      	subs	r3, #4
 800b002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b004:	4a0c      	ldr	r2, [pc, #48]	; (800b038 <pxPortInitialiseStack+0x64>)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	3b14      	subs	r3, #20
 800b00e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	3b04      	subs	r3, #4
 800b01a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f06f 0202 	mvn.w	r2, #2
 800b022:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	3b20      	subs	r3, #32
 800b028:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b02a:	68fb      	ldr	r3, [r7, #12]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3714      	adds	r7, #20
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr
 800b038:	0800b03d 	.word	0x0800b03d

0800b03c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b03c:	b480      	push	{r7}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b042:	2300      	movs	r3, #0
 800b044:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b046:	4b12      	ldr	r3, [pc, #72]	; (800b090 <prvTaskExitError+0x54>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b04e:	d00a      	beq.n	800b066 <prvTaskExitError+0x2a>
	__asm volatile
 800b050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b054:	f383 8811 	msr	BASEPRI, r3
 800b058:	f3bf 8f6f 	isb	sy
 800b05c:	f3bf 8f4f 	dsb	sy
 800b060:	60fb      	str	r3, [r7, #12]
}
 800b062:	bf00      	nop
 800b064:	e7fe      	b.n	800b064 <prvTaskExitError+0x28>
	__asm volatile
 800b066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06a:	f383 8811 	msr	BASEPRI, r3
 800b06e:	f3bf 8f6f 	isb	sy
 800b072:	f3bf 8f4f 	dsb	sy
 800b076:	60bb      	str	r3, [r7, #8]
}
 800b078:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b07a:	bf00      	nop
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d0fc      	beq.n	800b07c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b082:	bf00      	nop
 800b084:	bf00      	nop
 800b086:	3714      	adds	r7, #20
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr
 800b090:	2000004c 	.word	0x2000004c
	...

0800b0a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b0a0:	4b07      	ldr	r3, [pc, #28]	; (800b0c0 <pxCurrentTCBConst2>)
 800b0a2:	6819      	ldr	r1, [r3, #0]
 800b0a4:	6808      	ldr	r0, [r1, #0]
 800b0a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0aa:	f380 8809 	msr	PSP, r0
 800b0ae:	f3bf 8f6f 	isb	sy
 800b0b2:	f04f 0000 	mov.w	r0, #0
 800b0b6:	f380 8811 	msr	BASEPRI, r0
 800b0ba:	4770      	bx	lr
 800b0bc:	f3af 8000 	nop.w

0800b0c0 <pxCurrentTCBConst2>:
 800b0c0:	200008a0 	.word	0x200008a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b0c4:	bf00      	nop
 800b0c6:	bf00      	nop

0800b0c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b0c8:	4808      	ldr	r0, [pc, #32]	; (800b0ec <prvPortStartFirstTask+0x24>)
 800b0ca:	6800      	ldr	r0, [r0, #0]
 800b0cc:	6800      	ldr	r0, [r0, #0]
 800b0ce:	f380 8808 	msr	MSP, r0
 800b0d2:	f04f 0000 	mov.w	r0, #0
 800b0d6:	f380 8814 	msr	CONTROL, r0
 800b0da:	b662      	cpsie	i
 800b0dc:	b661      	cpsie	f
 800b0de:	f3bf 8f4f 	dsb	sy
 800b0e2:	f3bf 8f6f 	isb	sy
 800b0e6:	df00      	svc	0
 800b0e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b0ea:	bf00      	nop
 800b0ec:	e000ed08 	.word	0xe000ed08

0800b0f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b0f6:	4b46      	ldr	r3, [pc, #280]	; (800b210 <xPortStartScheduler+0x120>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a46      	ldr	r2, [pc, #280]	; (800b214 <xPortStartScheduler+0x124>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d10a      	bne.n	800b116 <xPortStartScheduler+0x26>
	__asm volatile
 800b100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b104:	f383 8811 	msr	BASEPRI, r3
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	613b      	str	r3, [r7, #16]
}
 800b112:	bf00      	nop
 800b114:	e7fe      	b.n	800b114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b116:	4b3e      	ldr	r3, [pc, #248]	; (800b210 <xPortStartScheduler+0x120>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a3f      	ldr	r2, [pc, #252]	; (800b218 <xPortStartScheduler+0x128>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d10a      	bne.n	800b136 <xPortStartScheduler+0x46>
	__asm volatile
 800b120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	60fb      	str	r3, [r7, #12]
}
 800b132:	bf00      	nop
 800b134:	e7fe      	b.n	800b134 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b136:	4b39      	ldr	r3, [pc, #228]	; (800b21c <xPortStartScheduler+0x12c>)
 800b138:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	22ff      	movs	r2, #255	; 0xff
 800b146:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b150:	78fb      	ldrb	r3, [r7, #3]
 800b152:	b2db      	uxtb	r3, r3
 800b154:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b158:	b2da      	uxtb	r2, r3
 800b15a:	4b31      	ldr	r3, [pc, #196]	; (800b220 <xPortStartScheduler+0x130>)
 800b15c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b15e:	4b31      	ldr	r3, [pc, #196]	; (800b224 <xPortStartScheduler+0x134>)
 800b160:	2207      	movs	r2, #7
 800b162:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b164:	e009      	b.n	800b17a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b166:	4b2f      	ldr	r3, [pc, #188]	; (800b224 <xPortStartScheduler+0x134>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	3b01      	subs	r3, #1
 800b16c:	4a2d      	ldr	r2, [pc, #180]	; (800b224 <xPortStartScheduler+0x134>)
 800b16e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b170:	78fb      	ldrb	r3, [r7, #3]
 800b172:	b2db      	uxtb	r3, r3
 800b174:	005b      	lsls	r3, r3, #1
 800b176:	b2db      	uxtb	r3, r3
 800b178:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b17a:	78fb      	ldrb	r3, [r7, #3]
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b182:	2b80      	cmp	r3, #128	; 0x80
 800b184:	d0ef      	beq.n	800b166 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b186:	4b27      	ldr	r3, [pc, #156]	; (800b224 <xPortStartScheduler+0x134>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f1c3 0307 	rsb	r3, r3, #7
 800b18e:	2b04      	cmp	r3, #4
 800b190:	d00a      	beq.n	800b1a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b196:	f383 8811 	msr	BASEPRI, r3
 800b19a:	f3bf 8f6f 	isb	sy
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	60bb      	str	r3, [r7, #8]
}
 800b1a4:	bf00      	nop
 800b1a6:	e7fe      	b.n	800b1a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b1a8:	4b1e      	ldr	r3, [pc, #120]	; (800b224 <xPortStartScheduler+0x134>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	021b      	lsls	r3, r3, #8
 800b1ae:	4a1d      	ldr	r2, [pc, #116]	; (800b224 <xPortStartScheduler+0x134>)
 800b1b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b1b2:	4b1c      	ldr	r3, [pc, #112]	; (800b224 <xPortStartScheduler+0x134>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b1ba:	4a1a      	ldr	r2, [pc, #104]	; (800b224 <xPortStartScheduler+0x134>)
 800b1bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	b2da      	uxtb	r2, r3
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b1c6:	4b18      	ldr	r3, [pc, #96]	; (800b228 <xPortStartScheduler+0x138>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a17      	ldr	r2, [pc, #92]	; (800b228 <xPortStartScheduler+0x138>)
 800b1cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b1d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b1d2:	4b15      	ldr	r3, [pc, #84]	; (800b228 <xPortStartScheduler+0x138>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a14      	ldr	r2, [pc, #80]	; (800b228 <xPortStartScheduler+0x138>)
 800b1d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b1dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b1de:	f000 f8dd 	bl	800b39c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b1e2:	4b12      	ldr	r3, [pc, #72]	; (800b22c <xPortStartScheduler+0x13c>)
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b1e8:	f000 f8fc 	bl	800b3e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b1ec:	4b10      	ldr	r3, [pc, #64]	; (800b230 <xPortStartScheduler+0x140>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a0f      	ldr	r2, [pc, #60]	; (800b230 <xPortStartScheduler+0x140>)
 800b1f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b1f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b1f8:	f7ff ff66 	bl	800b0c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b1fc:	f7ff fb9a 	bl	800a934 <vTaskSwitchContext>
	prvTaskExitError();
 800b200:	f7ff ff1c 	bl	800b03c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b204:	2300      	movs	r3, #0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3718      	adds	r7, #24
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	e000ed00 	.word	0xe000ed00
 800b214:	410fc271 	.word	0x410fc271
 800b218:	410fc270 	.word	0x410fc270
 800b21c:	e000e400 	.word	0xe000e400
 800b220:	200009cc 	.word	0x200009cc
 800b224:	200009d0 	.word	0x200009d0
 800b228:	e000ed20 	.word	0xe000ed20
 800b22c:	2000004c 	.word	0x2000004c
 800b230:	e000ef34 	.word	0xe000ef34

0800b234 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
	__asm volatile
 800b23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23e:	f383 8811 	msr	BASEPRI, r3
 800b242:	f3bf 8f6f 	isb	sy
 800b246:	f3bf 8f4f 	dsb	sy
 800b24a:	607b      	str	r3, [r7, #4]
}
 800b24c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b24e:	4b0f      	ldr	r3, [pc, #60]	; (800b28c <vPortEnterCritical+0x58>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	3301      	adds	r3, #1
 800b254:	4a0d      	ldr	r2, [pc, #52]	; (800b28c <vPortEnterCritical+0x58>)
 800b256:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b258:	4b0c      	ldr	r3, [pc, #48]	; (800b28c <vPortEnterCritical+0x58>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d10f      	bne.n	800b280 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b260:	4b0b      	ldr	r3, [pc, #44]	; (800b290 <vPortEnterCritical+0x5c>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	b2db      	uxtb	r3, r3
 800b266:	2b00      	cmp	r3, #0
 800b268:	d00a      	beq.n	800b280 <vPortEnterCritical+0x4c>
	__asm volatile
 800b26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26e:	f383 8811 	msr	BASEPRI, r3
 800b272:	f3bf 8f6f 	isb	sy
 800b276:	f3bf 8f4f 	dsb	sy
 800b27a:	603b      	str	r3, [r7, #0]
}
 800b27c:	bf00      	nop
 800b27e:	e7fe      	b.n	800b27e <vPortEnterCritical+0x4a>
	}
}
 800b280:	bf00      	nop
 800b282:	370c      	adds	r7, #12
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr
 800b28c:	2000004c 	.word	0x2000004c
 800b290:	e000ed04 	.word	0xe000ed04

0800b294 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b29a:	4b12      	ldr	r3, [pc, #72]	; (800b2e4 <vPortExitCritical+0x50>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d10a      	bne.n	800b2b8 <vPortExitCritical+0x24>
	__asm volatile
 800b2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a6:	f383 8811 	msr	BASEPRI, r3
 800b2aa:	f3bf 8f6f 	isb	sy
 800b2ae:	f3bf 8f4f 	dsb	sy
 800b2b2:	607b      	str	r3, [r7, #4]
}
 800b2b4:	bf00      	nop
 800b2b6:	e7fe      	b.n	800b2b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b2b8:	4b0a      	ldr	r3, [pc, #40]	; (800b2e4 <vPortExitCritical+0x50>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	4a09      	ldr	r2, [pc, #36]	; (800b2e4 <vPortExitCritical+0x50>)
 800b2c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b2c2:	4b08      	ldr	r3, [pc, #32]	; (800b2e4 <vPortExitCritical+0x50>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d105      	bne.n	800b2d6 <vPortExitCritical+0x42>
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	f383 8811 	msr	BASEPRI, r3
}
 800b2d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b2d6:	bf00      	nop
 800b2d8:	370c      	adds	r7, #12
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	2000004c 	.word	0x2000004c
	...

0800b2f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b2f0:	f3ef 8009 	mrs	r0, PSP
 800b2f4:	f3bf 8f6f 	isb	sy
 800b2f8:	4b15      	ldr	r3, [pc, #84]	; (800b350 <pxCurrentTCBConst>)
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	f01e 0f10 	tst.w	lr, #16
 800b300:	bf08      	it	eq
 800b302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b30a:	6010      	str	r0, [r2, #0]
 800b30c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b310:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b314:	f380 8811 	msr	BASEPRI, r0
 800b318:	f3bf 8f4f 	dsb	sy
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f7ff fb08 	bl	800a934 <vTaskSwitchContext>
 800b324:	f04f 0000 	mov.w	r0, #0
 800b328:	f380 8811 	msr	BASEPRI, r0
 800b32c:	bc09      	pop	{r0, r3}
 800b32e:	6819      	ldr	r1, [r3, #0]
 800b330:	6808      	ldr	r0, [r1, #0]
 800b332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b336:	f01e 0f10 	tst.w	lr, #16
 800b33a:	bf08      	it	eq
 800b33c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b340:	f380 8809 	msr	PSP, r0
 800b344:	f3bf 8f6f 	isb	sy
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	f3af 8000 	nop.w

0800b350 <pxCurrentTCBConst>:
 800b350:	200008a0 	.word	0x200008a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b354:	bf00      	nop
 800b356:	bf00      	nop

0800b358 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
	__asm volatile
 800b35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b362:	f383 8811 	msr	BASEPRI, r3
 800b366:	f3bf 8f6f 	isb	sy
 800b36a:	f3bf 8f4f 	dsb	sy
 800b36e:	607b      	str	r3, [r7, #4]
}
 800b370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b372:	f7ff fa27 	bl	800a7c4 <xTaskIncrementTick>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d003      	beq.n	800b384 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b37c:	4b06      	ldr	r3, [pc, #24]	; (800b398 <SysTick_Handler+0x40>)
 800b37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b382:	601a      	str	r2, [r3, #0]
 800b384:	2300      	movs	r3, #0
 800b386:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	f383 8811 	msr	BASEPRI, r3
}
 800b38e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b390:	bf00      	nop
 800b392:	3708      	adds	r7, #8
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	e000ed04 	.word	0xe000ed04

0800b39c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b39c:	b480      	push	{r7}
 800b39e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b3a0:	4b0b      	ldr	r3, [pc, #44]	; (800b3d0 <vPortSetupTimerInterrupt+0x34>)
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b3a6:	4b0b      	ldr	r3, [pc, #44]	; (800b3d4 <vPortSetupTimerInterrupt+0x38>)
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b3ac:	4b0a      	ldr	r3, [pc, #40]	; (800b3d8 <vPortSetupTimerInterrupt+0x3c>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a0a      	ldr	r2, [pc, #40]	; (800b3dc <vPortSetupTimerInterrupt+0x40>)
 800b3b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3b6:	099b      	lsrs	r3, r3, #6
 800b3b8:	4a09      	ldr	r2, [pc, #36]	; (800b3e0 <vPortSetupTimerInterrupt+0x44>)
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b3be:	4b04      	ldr	r3, [pc, #16]	; (800b3d0 <vPortSetupTimerInterrupt+0x34>)
 800b3c0:	2207      	movs	r2, #7
 800b3c2:	601a      	str	r2, [r3, #0]
}
 800b3c4:	bf00      	nop
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	e000e010 	.word	0xe000e010
 800b3d4:	e000e018 	.word	0xe000e018
 800b3d8:	20000040 	.word	0x20000040
 800b3dc:	10624dd3 	.word	0x10624dd3
 800b3e0:	e000e014 	.word	0xe000e014

0800b3e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b3e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b3f4 <vPortEnableVFP+0x10>
 800b3e8:	6801      	ldr	r1, [r0, #0]
 800b3ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b3ee:	6001      	str	r1, [r0, #0]
 800b3f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b3f2:	bf00      	nop
 800b3f4:	e000ed88 	.word	0xe000ed88

0800b3f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b08a      	sub	sp, #40	; 0x28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b400:	2300      	movs	r3, #0
 800b402:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b404:	f7ff f924 	bl	800a650 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b408:	4b5b      	ldr	r3, [pc, #364]	; (800b578 <pvPortMalloc+0x180>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d101      	bne.n	800b414 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b410:	f000 f920 	bl	800b654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b414:	4b59      	ldr	r3, [pc, #356]	; (800b57c <pvPortMalloc+0x184>)
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	4013      	ands	r3, r2
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f040 8093 	bne.w	800b548 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d01d      	beq.n	800b464 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b428:	2208      	movs	r2, #8
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4413      	add	r3, r2
 800b42e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f003 0307 	and.w	r3, r3, #7
 800b436:	2b00      	cmp	r3, #0
 800b438:	d014      	beq.n	800b464 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f023 0307 	bic.w	r3, r3, #7
 800b440:	3308      	adds	r3, #8
 800b442:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f003 0307 	and.w	r3, r3, #7
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d00a      	beq.n	800b464 <pvPortMalloc+0x6c>
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	617b      	str	r3, [r7, #20]
}
 800b460:	bf00      	nop
 800b462:	e7fe      	b.n	800b462 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d06e      	beq.n	800b548 <pvPortMalloc+0x150>
 800b46a:	4b45      	ldr	r3, [pc, #276]	; (800b580 <pvPortMalloc+0x188>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	429a      	cmp	r2, r3
 800b472:	d869      	bhi.n	800b548 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b474:	4b43      	ldr	r3, [pc, #268]	; (800b584 <pvPortMalloc+0x18c>)
 800b476:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b478:	4b42      	ldr	r3, [pc, #264]	; (800b584 <pvPortMalloc+0x18c>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b47e:	e004      	b.n	800b48a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b482:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	429a      	cmp	r2, r3
 800b492:	d903      	bls.n	800b49c <pvPortMalloc+0xa4>
 800b494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d1f1      	bne.n	800b480 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b49c:	4b36      	ldr	r3, [pc, #216]	; (800b578 <pvPortMalloc+0x180>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d050      	beq.n	800b548 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b4a6:	6a3b      	ldr	r3, [r7, #32]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2208      	movs	r2, #8
 800b4ac:	4413      	add	r3, r2
 800b4ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	6a3b      	ldr	r3, [r7, #32]
 800b4b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ba:	685a      	ldr	r2, [r3, #4]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	1ad2      	subs	r2, r2, r3
 800b4c0:	2308      	movs	r3, #8
 800b4c2:	005b      	lsls	r3, r3, #1
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d91f      	bls.n	800b508 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b4c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4d0:	69bb      	ldr	r3, [r7, #24]
 800b4d2:	f003 0307 	and.w	r3, r3, #7
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00a      	beq.n	800b4f0 <pvPortMalloc+0xf8>
	__asm volatile
 800b4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4de:	f383 8811 	msr	BASEPRI, r3
 800b4e2:	f3bf 8f6f 	isb	sy
 800b4e6:	f3bf 8f4f 	dsb	sy
 800b4ea:	613b      	str	r3, [r7, #16]
}
 800b4ec:	bf00      	nop
 800b4ee:	e7fe      	b.n	800b4ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f2:	685a      	ldr	r2, [r3, #4]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	1ad2      	subs	r2, r2, r3
 800b4f8:	69bb      	ldr	r3, [r7, #24]
 800b4fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b502:	69b8      	ldr	r0, [r7, #24]
 800b504:	f000 f908 	bl	800b718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b508:	4b1d      	ldr	r3, [pc, #116]	; (800b580 <pvPortMalloc+0x188>)
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	1ad3      	subs	r3, r2, r3
 800b512:	4a1b      	ldr	r2, [pc, #108]	; (800b580 <pvPortMalloc+0x188>)
 800b514:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b516:	4b1a      	ldr	r3, [pc, #104]	; (800b580 <pvPortMalloc+0x188>)
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	4b1b      	ldr	r3, [pc, #108]	; (800b588 <pvPortMalloc+0x190>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	429a      	cmp	r2, r3
 800b520:	d203      	bcs.n	800b52a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b522:	4b17      	ldr	r3, [pc, #92]	; (800b580 <pvPortMalloc+0x188>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a18      	ldr	r2, [pc, #96]	; (800b588 <pvPortMalloc+0x190>)
 800b528:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52c:	685a      	ldr	r2, [r3, #4]
 800b52e:	4b13      	ldr	r3, [pc, #76]	; (800b57c <pvPortMalloc+0x184>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	431a      	orrs	r2, r3
 800b534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b536:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53a:	2200      	movs	r2, #0
 800b53c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b53e:	4b13      	ldr	r3, [pc, #76]	; (800b58c <pvPortMalloc+0x194>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	3301      	adds	r3, #1
 800b544:	4a11      	ldr	r2, [pc, #68]	; (800b58c <pvPortMalloc+0x194>)
 800b546:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b548:	f7ff f890 	bl	800a66c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	f003 0307 	and.w	r3, r3, #7
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00a      	beq.n	800b56c <pvPortMalloc+0x174>
	__asm volatile
 800b556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55a:	f383 8811 	msr	BASEPRI, r3
 800b55e:	f3bf 8f6f 	isb	sy
 800b562:	f3bf 8f4f 	dsb	sy
 800b566:	60fb      	str	r3, [r7, #12]
}
 800b568:	bf00      	nop
 800b56a:	e7fe      	b.n	800b56a <pvPortMalloc+0x172>
	return pvReturn;
 800b56c:	69fb      	ldr	r3, [r7, #28]
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3728      	adds	r7, #40	; 0x28
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	200103dc 	.word	0x200103dc
 800b57c:	200103f0 	.word	0x200103f0
 800b580:	200103e0 	.word	0x200103e0
 800b584:	200103d4 	.word	0x200103d4
 800b588:	200103e4 	.word	0x200103e4
 800b58c:	200103e8 	.word	0x200103e8

0800b590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b086      	sub	sp, #24
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d04d      	beq.n	800b63e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b5a2:	2308      	movs	r3, #8
 800b5a4:	425b      	negs	r3, r3
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	685a      	ldr	r2, [r3, #4]
 800b5b4:	4b24      	ldr	r3, [pc, #144]	; (800b648 <vPortFree+0xb8>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4013      	ands	r3, r2
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d10a      	bne.n	800b5d4 <vPortFree+0x44>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	f383 8811 	msr	BASEPRI, r3
 800b5c6:	f3bf 8f6f 	isb	sy
 800b5ca:	f3bf 8f4f 	dsb	sy
 800b5ce:	60fb      	str	r3, [r7, #12]
}
 800b5d0:	bf00      	nop
 800b5d2:	e7fe      	b.n	800b5d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d00a      	beq.n	800b5f2 <vPortFree+0x62>
	__asm volatile
 800b5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e0:	f383 8811 	msr	BASEPRI, r3
 800b5e4:	f3bf 8f6f 	isb	sy
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	60bb      	str	r3, [r7, #8]
}
 800b5ee:	bf00      	nop
 800b5f0:	e7fe      	b.n	800b5f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	685a      	ldr	r2, [r3, #4]
 800b5f6:	4b14      	ldr	r3, [pc, #80]	; (800b648 <vPortFree+0xb8>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d01e      	beq.n	800b63e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d11a      	bne.n	800b63e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	4b0e      	ldr	r3, [pc, #56]	; (800b648 <vPortFree+0xb8>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	43db      	mvns	r3, r3
 800b612:	401a      	ands	r2, r3
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b618:	f7ff f81a 	bl	800a650 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	685a      	ldr	r2, [r3, #4]
 800b620:	4b0a      	ldr	r3, [pc, #40]	; (800b64c <vPortFree+0xbc>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4413      	add	r3, r2
 800b626:	4a09      	ldr	r2, [pc, #36]	; (800b64c <vPortFree+0xbc>)
 800b628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b62a:	6938      	ldr	r0, [r7, #16]
 800b62c:	f000 f874 	bl	800b718 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b630:	4b07      	ldr	r3, [pc, #28]	; (800b650 <vPortFree+0xc0>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	3301      	adds	r3, #1
 800b636:	4a06      	ldr	r2, [pc, #24]	; (800b650 <vPortFree+0xc0>)
 800b638:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b63a:	f7ff f817 	bl	800a66c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b63e:	bf00      	nop
 800b640:	3718      	adds	r7, #24
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	200103f0 	.word	0x200103f0
 800b64c:	200103e0 	.word	0x200103e0
 800b650:	200103ec 	.word	0x200103ec

0800b654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b65a:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 800b65e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b660:	4b27      	ldr	r3, [pc, #156]	; (800b700 <prvHeapInit+0xac>)
 800b662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f003 0307 	and.w	r3, r3, #7
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00c      	beq.n	800b688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	3307      	adds	r3, #7
 800b672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f023 0307 	bic.w	r3, r3, #7
 800b67a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b67c:	68ba      	ldr	r2, [r7, #8]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	1ad3      	subs	r3, r2, r3
 800b682:	4a1f      	ldr	r2, [pc, #124]	; (800b700 <prvHeapInit+0xac>)
 800b684:	4413      	add	r3, r2
 800b686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b68c:	4a1d      	ldr	r2, [pc, #116]	; (800b704 <prvHeapInit+0xb0>)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b692:	4b1c      	ldr	r3, [pc, #112]	; (800b704 <prvHeapInit+0xb0>)
 800b694:	2200      	movs	r2, #0
 800b696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	68ba      	ldr	r2, [r7, #8]
 800b69c:	4413      	add	r3, r2
 800b69e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b6a0:	2208      	movs	r2, #8
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	1a9b      	subs	r3, r3, r2
 800b6a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f023 0307 	bic.w	r3, r3, #7
 800b6ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	4a15      	ldr	r2, [pc, #84]	; (800b708 <prvHeapInit+0xb4>)
 800b6b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b6b6:	4b14      	ldr	r3, [pc, #80]	; (800b708 <prvHeapInit+0xb4>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b6be:	4b12      	ldr	r3, [pc, #72]	; (800b708 <prvHeapInit+0xb4>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	1ad2      	subs	r2, r2, r3
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b6d4:	4b0c      	ldr	r3, [pc, #48]	; (800b708 <prvHeapInit+0xb4>)
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	4a0a      	ldr	r2, [pc, #40]	; (800b70c <prvHeapInit+0xb8>)
 800b6e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	4a09      	ldr	r2, [pc, #36]	; (800b710 <prvHeapInit+0xbc>)
 800b6ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b6ec:	4b09      	ldr	r3, [pc, #36]	; (800b714 <prvHeapInit+0xc0>)
 800b6ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b6f2:	601a      	str	r2, [r3, #0]
}
 800b6f4:	bf00      	nop
 800b6f6:	3714      	adds	r7, #20
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr
 800b700:	200009d4 	.word	0x200009d4
 800b704:	200103d4 	.word	0x200103d4
 800b708:	200103dc 	.word	0x200103dc
 800b70c:	200103e4 	.word	0x200103e4
 800b710:	200103e0 	.word	0x200103e0
 800b714:	200103f0 	.word	0x200103f0

0800b718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b718:	b480      	push	{r7}
 800b71a:	b085      	sub	sp, #20
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b720:	4b28      	ldr	r3, [pc, #160]	; (800b7c4 <prvInsertBlockIntoFreeList+0xac>)
 800b722:	60fb      	str	r3, [r7, #12]
 800b724:	e002      	b.n	800b72c <prvInsertBlockIntoFreeList+0x14>
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	60fb      	str	r3, [r7, #12]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	429a      	cmp	r2, r3
 800b734:	d8f7      	bhi.n	800b726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	4413      	add	r3, r2
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	429a      	cmp	r2, r3
 800b746:	d108      	bne.n	800b75a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	685a      	ldr	r2, [r3, #4]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	441a      	add	r2, r3
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	68ba      	ldr	r2, [r7, #8]
 800b764:	441a      	add	r2, r3
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d118      	bne.n	800b7a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	4b15      	ldr	r3, [pc, #84]	; (800b7c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	429a      	cmp	r2, r3
 800b778:	d00d      	beq.n	800b796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	685a      	ldr	r2, [r3, #4]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	441a      	add	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	601a      	str	r2, [r3, #0]
 800b794:	e008      	b.n	800b7a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b796:	4b0c      	ldr	r3, [pc, #48]	; (800b7c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	601a      	str	r2, [r3, #0]
 800b79e:	e003      	b.n	800b7a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b7a8:	68fa      	ldr	r2, [r7, #12]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d002      	beq.n	800b7b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7b6:	bf00      	nop
 800b7b8:	3714      	adds	r7, #20
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	200103d4 	.word	0x200103d4
 800b7c8:	200103dc 	.word	0x200103dc

0800b7cc <__libc_init_array>:
 800b7cc:	b570      	push	{r4, r5, r6, lr}
 800b7ce:	4d0d      	ldr	r5, [pc, #52]	; (800b804 <__libc_init_array+0x38>)
 800b7d0:	4c0d      	ldr	r4, [pc, #52]	; (800b808 <__libc_init_array+0x3c>)
 800b7d2:	1b64      	subs	r4, r4, r5
 800b7d4:	10a4      	asrs	r4, r4, #2
 800b7d6:	2600      	movs	r6, #0
 800b7d8:	42a6      	cmp	r6, r4
 800b7da:	d109      	bne.n	800b7f0 <__libc_init_array+0x24>
 800b7dc:	4d0b      	ldr	r5, [pc, #44]	; (800b80c <__libc_init_array+0x40>)
 800b7de:	4c0c      	ldr	r4, [pc, #48]	; (800b810 <__libc_init_array+0x44>)
 800b7e0:	f000 f8f0 	bl	800b9c4 <_init>
 800b7e4:	1b64      	subs	r4, r4, r5
 800b7e6:	10a4      	asrs	r4, r4, #2
 800b7e8:	2600      	movs	r6, #0
 800b7ea:	42a6      	cmp	r6, r4
 800b7ec:	d105      	bne.n	800b7fa <__libc_init_array+0x2e>
 800b7ee:	bd70      	pop	{r4, r5, r6, pc}
 800b7f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7f4:	4798      	blx	r3
 800b7f6:	3601      	adds	r6, #1
 800b7f8:	e7ee      	b.n	800b7d8 <__libc_init_array+0xc>
 800b7fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7fe:	4798      	blx	r3
 800b800:	3601      	adds	r6, #1
 800b802:	e7f2      	b.n	800b7ea <__libc_init_array+0x1e>
 800b804:	0800bd30 	.word	0x0800bd30
 800b808:	0800bd30 	.word	0x0800bd30
 800b80c:	0800bd30 	.word	0x0800bd30
 800b810:	0800bd34 	.word	0x0800bd34

0800b814 <memcpy>:
 800b814:	440a      	add	r2, r1
 800b816:	4291      	cmp	r1, r2
 800b818:	f100 33ff 	add.w	r3, r0, #4294967295
 800b81c:	d100      	bne.n	800b820 <memcpy+0xc>
 800b81e:	4770      	bx	lr
 800b820:	b510      	push	{r4, lr}
 800b822:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b826:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b82a:	4291      	cmp	r1, r2
 800b82c:	d1f9      	bne.n	800b822 <memcpy+0xe>
 800b82e:	bd10      	pop	{r4, pc}

0800b830 <memset>:
 800b830:	4402      	add	r2, r0
 800b832:	4603      	mov	r3, r0
 800b834:	4293      	cmp	r3, r2
 800b836:	d100      	bne.n	800b83a <memset+0xa>
 800b838:	4770      	bx	lr
 800b83a:	f803 1b01 	strb.w	r1, [r3], #1
 800b83e:	e7f9      	b.n	800b834 <memset+0x4>

0800b840 <_free_r>:
 800b840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b842:	2900      	cmp	r1, #0
 800b844:	d044      	beq.n	800b8d0 <_free_r+0x90>
 800b846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b84a:	9001      	str	r0, [sp, #4]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f1a1 0404 	sub.w	r4, r1, #4
 800b852:	bfb8      	it	lt
 800b854:	18e4      	addlt	r4, r4, r3
 800b856:	f000 f8a9 	bl	800b9ac <__malloc_lock>
 800b85a:	4a1e      	ldr	r2, [pc, #120]	; (800b8d4 <_free_r+0x94>)
 800b85c:	9801      	ldr	r0, [sp, #4]
 800b85e:	6813      	ldr	r3, [r2, #0]
 800b860:	b933      	cbnz	r3, 800b870 <_free_r+0x30>
 800b862:	6063      	str	r3, [r4, #4]
 800b864:	6014      	str	r4, [r2, #0]
 800b866:	b003      	add	sp, #12
 800b868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b86c:	f000 b8a4 	b.w	800b9b8 <__malloc_unlock>
 800b870:	42a3      	cmp	r3, r4
 800b872:	d908      	bls.n	800b886 <_free_r+0x46>
 800b874:	6825      	ldr	r5, [r4, #0]
 800b876:	1961      	adds	r1, r4, r5
 800b878:	428b      	cmp	r3, r1
 800b87a:	bf01      	itttt	eq
 800b87c:	6819      	ldreq	r1, [r3, #0]
 800b87e:	685b      	ldreq	r3, [r3, #4]
 800b880:	1949      	addeq	r1, r1, r5
 800b882:	6021      	streq	r1, [r4, #0]
 800b884:	e7ed      	b.n	800b862 <_free_r+0x22>
 800b886:	461a      	mov	r2, r3
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	b10b      	cbz	r3, 800b890 <_free_r+0x50>
 800b88c:	42a3      	cmp	r3, r4
 800b88e:	d9fa      	bls.n	800b886 <_free_r+0x46>
 800b890:	6811      	ldr	r1, [r2, #0]
 800b892:	1855      	adds	r5, r2, r1
 800b894:	42a5      	cmp	r5, r4
 800b896:	d10b      	bne.n	800b8b0 <_free_r+0x70>
 800b898:	6824      	ldr	r4, [r4, #0]
 800b89a:	4421      	add	r1, r4
 800b89c:	1854      	adds	r4, r2, r1
 800b89e:	42a3      	cmp	r3, r4
 800b8a0:	6011      	str	r1, [r2, #0]
 800b8a2:	d1e0      	bne.n	800b866 <_free_r+0x26>
 800b8a4:	681c      	ldr	r4, [r3, #0]
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	6053      	str	r3, [r2, #4]
 800b8aa:	4421      	add	r1, r4
 800b8ac:	6011      	str	r1, [r2, #0]
 800b8ae:	e7da      	b.n	800b866 <_free_r+0x26>
 800b8b0:	d902      	bls.n	800b8b8 <_free_r+0x78>
 800b8b2:	230c      	movs	r3, #12
 800b8b4:	6003      	str	r3, [r0, #0]
 800b8b6:	e7d6      	b.n	800b866 <_free_r+0x26>
 800b8b8:	6825      	ldr	r5, [r4, #0]
 800b8ba:	1961      	adds	r1, r4, r5
 800b8bc:	428b      	cmp	r3, r1
 800b8be:	bf04      	itt	eq
 800b8c0:	6819      	ldreq	r1, [r3, #0]
 800b8c2:	685b      	ldreq	r3, [r3, #4]
 800b8c4:	6063      	str	r3, [r4, #4]
 800b8c6:	bf04      	itt	eq
 800b8c8:	1949      	addeq	r1, r1, r5
 800b8ca:	6021      	streq	r1, [r4, #0]
 800b8cc:	6054      	str	r4, [r2, #4]
 800b8ce:	e7ca      	b.n	800b866 <_free_r+0x26>
 800b8d0:	b003      	add	sp, #12
 800b8d2:	bd30      	pop	{r4, r5, pc}
 800b8d4:	200103f4 	.word	0x200103f4

0800b8d8 <cleanup_glue>:
 800b8d8:	b538      	push	{r3, r4, r5, lr}
 800b8da:	460c      	mov	r4, r1
 800b8dc:	6809      	ldr	r1, [r1, #0]
 800b8de:	4605      	mov	r5, r0
 800b8e0:	b109      	cbz	r1, 800b8e6 <cleanup_glue+0xe>
 800b8e2:	f7ff fff9 	bl	800b8d8 <cleanup_glue>
 800b8e6:	4621      	mov	r1, r4
 800b8e8:	4628      	mov	r0, r5
 800b8ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8ee:	f7ff bfa7 	b.w	800b840 <_free_r>
	...

0800b8f4 <_reclaim_reent>:
 800b8f4:	4b2c      	ldr	r3, [pc, #176]	; (800b9a8 <_reclaim_reent+0xb4>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4283      	cmp	r3, r0
 800b8fa:	b570      	push	{r4, r5, r6, lr}
 800b8fc:	4604      	mov	r4, r0
 800b8fe:	d051      	beq.n	800b9a4 <_reclaim_reent+0xb0>
 800b900:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b902:	b143      	cbz	r3, 800b916 <_reclaim_reent+0x22>
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d14a      	bne.n	800b9a0 <_reclaim_reent+0xac>
 800b90a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b90c:	6819      	ldr	r1, [r3, #0]
 800b90e:	b111      	cbz	r1, 800b916 <_reclaim_reent+0x22>
 800b910:	4620      	mov	r0, r4
 800b912:	f7ff ff95 	bl	800b840 <_free_r>
 800b916:	6961      	ldr	r1, [r4, #20]
 800b918:	b111      	cbz	r1, 800b920 <_reclaim_reent+0x2c>
 800b91a:	4620      	mov	r0, r4
 800b91c:	f7ff ff90 	bl	800b840 <_free_r>
 800b920:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b922:	b111      	cbz	r1, 800b92a <_reclaim_reent+0x36>
 800b924:	4620      	mov	r0, r4
 800b926:	f7ff ff8b 	bl	800b840 <_free_r>
 800b92a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b92c:	b111      	cbz	r1, 800b934 <_reclaim_reent+0x40>
 800b92e:	4620      	mov	r0, r4
 800b930:	f7ff ff86 	bl	800b840 <_free_r>
 800b934:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b936:	b111      	cbz	r1, 800b93e <_reclaim_reent+0x4a>
 800b938:	4620      	mov	r0, r4
 800b93a:	f7ff ff81 	bl	800b840 <_free_r>
 800b93e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b940:	b111      	cbz	r1, 800b948 <_reclaim_reent+0x54>
 800b942:	4620      	mov	r0, r4
 800b944:	f7ff ff7c 	bl	800b840 <_free_r>
 800b948:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b94a:	b111      	cbz	r1, 800b952 <_reclaim_reent+0x5e>
 800b94c:	4620      	mov	r0, r4
 800b94e:	f7ff ff77 	bl	800b840 <_free_r>
 800b952:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b954:	b111      	cbz	r1, 800b95c <_reclaim_reent+0x68>
 800b956:	4620      	mov	r0, r4
 800b958:	f7ff ff72 	bl	800b840 <_free_r>
 800b95c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b95e:	b111      	cbz	r1, 800b966 <_reclaim_reent+0x72>
 800b960:	4620      	mov	r0, r4
 800b962:	f7ff ff6d 	bl	800b840 <_free_r>
 800b966:	69a3      	ldr	r3, [r4, #24]
 800b968:	b1e3      	cbz	r3, 800b9a4 <_reclaim_reent+0xb0>
 800b96a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b96c:	4620      	mov	r0, r4
 800b96e:	4798      	blx	r3
 800b970:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b972:	b1b9      	cbz	r1, 800b9a4 <_reclaim_reent+0xb0>
 800b974:	4620      	mov	r0, r4
 800b976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b97a:	f7ff bfad 	b.w	800b8d8 <cleanup_glue>
 800b97e:	5949      	ldr	r1, [r1, r5]
 800b980:	b941      	cbnz	r1, 800b994 <_reclaim_reent+0xa0>
 800b982:	3504      	adds	r5, #4
 800b984:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b986:	2d80      	cmp	r5, #128	; 0x80
 800b988:	68d9      	ldr	r1, [r3, #12]
 800b98a:	d1f8      	bne.n	800b97e <_reclaim_reent+0x8a>
 800b98c:	4620      	mov	r0, r4
 800b98e:	f7ff ff57 	bl	800b840 <_free_r>
 800b992:	e7ba      	b.n	800b90a <_reclaim_reent+0x16>
 800b994:	680e      	ldr	r6, [r1, #0]
 800b996:	4620      	mov	r0, r4
 800b998:	f7ff ff52 	bl	800b840 <_free_r>
 800b99c:	4631      	mov	r1, r6
 800b99e:	e7ef      	b.n	800b980 <_reclaim_reent+0x8c>
 800b9a0:	2500      	movs	r5, #0
 800b9a2:	e7ef      	b.n	800b984 <_reclaim_reent+0x90>
 800b9a4:	bd70      	pop	{r4, r5, r6, pc}
 800b9a6:	bf00      	nop
 800b9a8:	20000050 	.word	0x20000050

0800b9ac <__malloc_lock>:
 800b9ac:	4801      	ldr	r0, [pc, #4]	; (800b9b4 <__malloc_lock+0x8>)
 800b9ae:	f7f7 b8ea 	b.w	8002b86 <__retarget_lock_acquire_recursive>
 800b9b2:	bf00      	nop
 800b9b4:	20000890 	.word	0x20000890

0800b9b8 <__malloc_unlock>:
 800b9b8:	4801      	ldr	r0, [pc, #4]	; (800b9c0 <__malloc_unlock+0x8>)
 800b9ba:	f7f7 b8f8 	b.w	8002bae <__retarget_lock_release_recursive>
 800b9be:	bf00      	nop
 800b9c0:	20000890 	.word	0x20000890

0800b9c4 <_init>:
 800b9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9c6:	bf00      	nop
 800b9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ca:	bc08      	pop	{r3}
 800b9cc:	469e      	mov	lr, r3
 800b9ce:	4770      	bx	lr

0800b9d0 <_fini>:
 800b9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d2:	bf00      	nop
 800b9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9d6:	bc08      	pop	{r3}
 800b9d8:	469e      	mov	lr, r3
 800b9da:	4770      	bx	lr
