
AlgoFetBms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08009a90  08009a90  00019a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d90  08009d90  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009d90  08009d90  00019d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d98  08009d98  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d98  08009d98  00019d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d9c  08009d9c  00019d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000101bc  20000074  08009e14  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20010230  08009e14  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f234  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d74  00000000  00000000  0003f2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a40  00000000  00000000  00044050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001800  00000000  00000000  00045a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028017  00000000  00000000  00047290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026401  00000000  00000000  0006f2a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eeba0  00000000  00000000  000956a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00184248  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d68  00000000  00000000  00184298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009a78 	.word	0x08009a78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08009a78 	.word	0x08009a78

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <app_afe_init>:
 */

#include "app_afe.h"

int16_t app_afe_init(void)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 800051a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800051e:	80fb      	strh	r3, [r7, #6]
	do
	{

		ret_val = SYS_OK;
 8000520:	2300      	movs	r3, #0
 8000522:	80fb      	strh	r3, [r7, #6]
	}while(false);

	return ret_val;
 8000524:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000528:	4618      	mov	r0, r3
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <app_gauge_burst_read>:
{
	return (msb << 8 | lsb);
}

static int16_t app_gauge_burst_read(TsDataBlockConfig_t *pDataBlockCfg)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af02      	add	r7, sp, #8
 800053a:	6078      	str	r0, [r7, #4]
	int16_t ret_val = SYS_ERR;
 800053c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000540:	81fb      	strh	r3, [r7, #14]
	do
	{
		if(NULL == pDataBlockCfg)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d020      	beq.n	800058a <app_gauge_burst_read+0x56>
		{
			break;
		}
		if (pDataBlockCfg->Len > BQ_RD_BUFFER_LEN)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	785b      	ldrb	r3, [r3, #1]
 800054c:	2b14      	cmp	r3, #20
 800054e:	d81e      	bhi.n	800058e <app_gauge_burst_read+0x5a>
		{
			break;
		}
		if(HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, BQ_WR_ADDR, &pDataBlockCfg->Addr, sizeof(pDataBlockCfg->Addr), 500))
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2301      	movs	r3, #1
 800055a:	21aa      	movs	r1, #170	; 0xaa
 800055c:	4811      	ldr	r0, [pc, #68]	; (80005a4 <app_gauge_burst_read+0x70>)
 800055e:	f003 fb51 	bl	8003c04 <HAL_I2C_Master_Transmit>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d114      	bne.n	8000592 <app_gauge_burst_read+0x5e>
		{
			break;
		}

		/* Master request Slave for data */
		if (HAL_OK != HAL_I2C_Master_Receive (&hi2c1, BQ_RD_ADDR, gauge_read_buffer, pDataBlockCfg->Len, 500))
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	785b      	ldrb	r3, [r3, #1]
 800056c:	b29b      	uxth	r3, r3
 800056e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000572:	9200      	str	r2, [sp, #0]
 8000574:	4a0c      	ldr	r2, [pc, #48]	; (80005a8 <app_gauge_burst_read+0x74>)
 8000576:	21ab      	movs	r1, #171	; 0xab
 8000578:	480a      	ldr	r0, [pc, #40]	; (80005a4 <app_gauge_burst_read+0x70>)
 800057a:	f003 fc41 	bl	8003e00 <HAL_I2C_Master_Receive>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d108      	bne.n	8000596 <app_gauge_burst_read+0x62>
		{
			break;
		}

		ret_val = SYS_OK;
 8000584:	2300      	movs	r3, #0
 8000586:	81fb      	strh	r3, [r7, #14]
 8000588:	e006      	b.n	8000598 <app_gauge_burst_read+0x64>
			break;
 800058a:	bf00      	nop
 800058c:	e004      	b.n	8000598 <app_gauge_burst_read+0x64>
			break;
 800058e:	bf00      	nop
 8000590:	e002      	b.n	8000598 <app_gauge_burst_read+0x64>
			break;
 8000592:	bf00      	nop
 8000594:	e000      	b.n	8000598 <app_gauge_burst_read+0x64>
			break;
 8000596:	bf00      	nop

	}while(false);

	return ret_val;
 8000598:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000418 	.word	0x20000418
 80005a8:	20000098 	.word	0x20000098

080005ac <app_gauge_init>:
		ret_val = SYS_OK;
	}while(false);
}

int16_t app_gauge_init(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
    int16_t ret_val = SYS_ERR;
 80005b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b6:	80fb      	strh	r3, [r7, #6]

    // Config block reads
    block_read_cfg[0].Addr = 0x02u;
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <app_gauge_init+0x2c>)
 80005ba:	2202      	movs	r2, #2
 80005bc:	701a      	strb	r2, [r3, #0]
    block_read_cfg[0].Len = 18u;
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <app_gauge_init+0x2c>)
 80005c0:	2212      	movs	r2, #18
 80005c2:	705a      	strb	r2, [r3, #1]
    {
        return ret_val;
    }
#endif

    ret_val = SYS_OK;
 80005c4:	2300      	movs	r3, #0
 80005c6:	80fb      	strh	r3, [r7, #6]

    return ret_val;
 80005c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	20000090 	.word	0x20000090

080005dc <app_gauge_tick>:

int16_t app_gauge_tick(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
    int16_t ret_val = SYS_ERR;
 80005e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005e6:	80fb      	strh	r3, [r7, #6]
    do
    {
    	// Read SoC
    	if(SYS_OK != app_gauge_burst_read(&block_read_cfg[0]))
 80005e8:	4807      	ldr	r0, [pc, #28]	; (8000608 <app_gauge_tick+0x2c>)
 80005ea:	f7ff ffa3 	bl	8000534 <app_gauge_burst_read>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d102      	bne.n	80005fa <app_gauge_tick+0x1e>
    	{
    		break;
    	}
    	ret_val = SYS_OK;
 80005f4:	2300      	movs	r3, #0
 80005f6:	80fb      	strh	r3, [r7, #6]
 80005f8:	e000      	b.n	80005fc <app_gauge_tick+0x20>
    		break;
 80005fa:	bf00      	nop
    }while(false);
    return ret_val;
 80005fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000090 	.word	0x20000090

0800060c <app_sys_init>:

#include "app_afe.h"
#include "app_fuel_gauge.h"

int16_t app_sys_init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8000612:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000616:	80fb      	strh	r3, [r7, #6]
	do
	{
		// TODO:
		// IO Init
		(void) MX_GPIO_Init();
 8000618:	f000 fa0c 	bl	8000a34 <MX_GPIO_Init>
		// I2C Init
		(void) MX_I2C1_Init();
 800061c:	f000 fae6 	bl	8000bec <MX_I2C1_Init>
		// SPI Init
		(void) MX_SPI1_Init();
 8000620:	f000 fc74 	bl	8000f0c <MX_SPI1_Init>
		// CAN Init
		(void) MX_CAN1_Init();
 8000624:	f000 f8bc 	bl	80007a0 <MX_CAN1_Init>
		// PWM Init
		(void) MX_DMA_Init();
 8000628:	f000 f958 	bl	80008dc <MX_DMA_Init>
		// ADC Init
		(void) MX_ADC1_Init();
 800062c:	f000 f822 	bl	8000674 <MX_ADC1_Init>

	}while(false);

	return ret_val;
 8000630:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <app_sys_peripheral_init>:

int16_t app_sys_peripheral_init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8000642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000646:	80fb      	strh	r3, [r7, #6]
	do
	{
		// TODO:
		// AFE Init
		if(SYS_OK != app_afe_init())
 8000648:	f7ff ff64 	bl	8000514 <app_afe_init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d107      	bne.n	8000662 <app_sys_peripheral_init+0x26>
		{
			break;
		}
		// Fuel Gauge Init
		if(SYS_OK !=app_gauge_init())
 8000652:	f7ff ffab 	bl	80005ac <app_gauge_init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d104      	bne.n	8000666 <app_sys_peripheral_init+0x2a>
		{
			break;
		}
		// CAN NW Init

		ret_val = SYS_OK;
 800065c:	2300      	movs	r3, #0
 800065e:	80fb      	strh	r3, [r7, #6]
 8000660:	e002      	b.n	8000668 <app_sys_peripheral_init+0x2c>
			break;
 8000662:	bf00      	nop
 8000664:	e000      	b.n	8000668 <app_sys_peripheral_init+0x2c>
			break;
 8000666:	bf00      	nop
	}while(false);

	return ret_val;
 8000668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067a:	463b      	mov	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000686:	4b21      	ldr	r3, [pc, #132]	; (800070c <MX_ADC1_Init+0x98>)
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <MX_ADC1_Init+0x9c>)
 800068a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <MX_ADC1_Init+0x98>)
 800068e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000692:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000694:	4b1d      	ldr	r3, [pc, #116]	; (800070c <MX_ADC1_Init+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_ADC1_Init+0x98>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006a0:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_ADC1_Init+0x98>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006a6:	4b19      	ldr	r3, [pc, #100]	; (800070c <MX_ADC1_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_ADC1_Init+0x98>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <MX_ADC1_Init+0x98>)
 80006b6:	4a17      	ldr	r2, [pc, #92]	; (8000714 <MX_ADC1_Init+0xa0>)
 80006b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ba:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_ADC1_Init+0x98>)
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_ADC1_Init+0x98>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_ADC1_Init+0x98>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_ADC1_Init+0x98>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d4:	480d      	ldr	r0, [pc, #52]	; (800070c <MX_ADC1_Init+0x98>)
 80006d6:	f000 ff3d 	bl	8001554 <HAL_ADC_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006e0:	f000 fc04 	bl	8000eec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006e4:	230a      	movs	r3, #10
 80006e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006e8:	2301      	movs	r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f0:	463b      	mov	r3, r7
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_ADC1_Init+0x98>)
 80006f6:	f001 f899 	bl	800182c <HAL_ADC_ConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000700:	f000 fbf4 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200000ac 	.word	0x200000ac
 8000710:	40012000 	.word	0x40012000
 8000714:	0f000001 	.word	0x0f000001

08000718 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a17      	ldr	r2, [pc, #92]	; (8000794 <HAL_ADC_MspInit+0x7c>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d127      	bne.n	800078a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <HAL_ADC_MspInit+0x80>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000742:	4a15      	ldr	r2, [pc, #84]	; (8000798 <HAL_ADC_MspInit+0x80>)
 8000744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000748:	6453      	str	r3, [r2, #68]	; 0x44
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <HAL_ADC_MspInit+0x80>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_ADC_MspInit+0x80>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <HAL_ADC_MspInit+0x80>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_ADC_MspInit+0x80>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = TEMP1_IN_Pin|TEMP2_IN_Pin;
 8000772:	2303      	movs	r3, #3
 8000774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000776:	2303      	movs	r3, #3
 8000778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <HAL_ADC_MspInit+0x84>)
 8000786:	f002 fd1b 	bl	80031c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800078a:	bf00      	nop
 800078c:	3728      	adds	r7, #40	; 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40012000 	.word	0x40012000
 8000798:	40023800 	.word	0x40023800
 800079c:	40020800 	.word	0x40020800

080007a0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_CAN1_Init+0x64>)
 80007a6:	4a18      	ldr	r2, [pc, #96]	; (8000808 <MX_CAN1_Init+0x68>)
 80007a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_CAN1_Init+0x64>)
 80007ac:	2205      	movs	r2, #5
 80007ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_CAN1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_CAN1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_CAN1_Init+0x64>)
 80007be:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80007c2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_CAN1_Init+0x64>)
 80007c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007ca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_CAN1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_CAN1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_CAN1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_CAN1_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_CAN1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_CAN1_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_CAN1_Init+0x64>)
 80007f2:	f001 fa9b 	bl	8001d2c <HAL_CAN_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80007fc:	f000 fb76 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000f4 	.word	0x200000f4
 8000808:	40006400 	.word	0x40006400

0800080c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a29      	ldr	r2, [pc, #164]	; (80008d0 <HAL_CAN_MspInit+0xc4>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d14c      	bne.n	80008c8 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <HAL_CAN_MspInit+0xc8>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	4a27      	ldr	r2, [pc, #156]	; (80008d4 <HAL_CAN_MspInit+0xc8>)
 8000838:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800083c:	6413      	str	r3, [r2, #64]	; 0x40
 800083e:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <HAL_CAN_MspInit+0xc8>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <HAL_CAN_MspInit+0xc8>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a20      	ldr	r2, [pc, #128]	; (80008d4 <HAL_CAN_MspInit+0xc8>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <HAL_CAN_MspInit+0xc8>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000866:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800086a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086c:	2302      	movs	r3, #2
 800086e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000874:	2303      	movs	r3, #3
 8000876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000878:	2309      	movs	r3, #9
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	4815      	ldr	r0, [pc, #84]	; (80008d8 <HAL_CAN_MspInit+0xcc>)
 8000884:	f002 fc9c 	bl	80031c0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2105      	movs	r1, #5
 800088c:	2013      	movs	r0, #19
 800088e:	f001 ffcd 	bl	800282c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000892:	2013      	movs	r0, #19
 8000894:	f001 fff6 	bl	8002884 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2105      	movs	r1, #5
 800089c:	2014      	movs	r0, #20
 800089e:	f001 ffc5 	bl	800282c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80008a2:	2014      	movs	r0, #20
 80008a4:	f001 ffee 	bl	8002884 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2105      	movs	r1, #5
 80008ac:	2015      	movs	r0, #21
 80008ae:	f001 ffbd 	bl	800282c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80008b2:	2015      	movs	r0, #21
 80008b4:	f001 ffe6 	bl	8002884 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2105      	movs	r1, #5
 80008bc:	2016      	movs	r0, #22
 80008be:	f001 ffb5 	bl	800282c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80008c2:	2016      	movs	r0, #22
 80008c4:	f001 ffde 	bl	8002884 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80008c8:	bf00      	nop
 80008ca:	3728      	adds	r7, #40	; 0x28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40006400 	.word	0x40006400
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020000 	.word	0x40020000

080008dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_DMA_Init+0x88>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a1e      	ldr	r2, [pc, #120]	; (8000964 <MX_DMA_Init+0x88>)
 80008ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <MX_DMA_Init+0x88>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_DMA_Init+0x88>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a17      	ldr	r2, [pc, #92]	; (8000964 <MX_DMA_Init+0x88>)
 8000908:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <MX_DMA_Init+0x88>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2105      	movs	r1, #5
 800091e:	200b      	movs	r0, #11
 8000920:	f001 ff84 	bl	800282c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000924:	200b      	movs	r0, #11
 8000926:	f001 ffad 	bl	8002884 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	2105      	movs	r1, #5
 800092e:	2011      	movs	r0, #17
 8000930:	f001 ff7c 	bl	800282c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000934:	2011      	movs	r0, #17
 8000936:	f001 ffa5 	bl	8002884 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2105      	movs	r1, #5
 800093e:	2038      	movs	r0, #56	; 0x38
 8000940:	f001 ff74 	bl	800282c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000944:	2038      	movs	r0, #56	; 0x38
 8000946:	f001 ff9d 	bl	8002884 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2105      	movs	r1, #5
 800094e:	203b      	movs	r0, #59	; 0x3b
 8000950:	f001 ff6c 	bl	800282c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000954:	203b      	movs	r0, #59	; 0x3b
 8000956:	f001 ff95 	bl	8002884 <HAL_NVIC_EnableIRQ>

}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800

08000968 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4a07      	ldr	r2, [pc, #28]	; (8000994 <vApplicationGetIdleTaskMemory+0x2c>)
 8000978:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	4a06      	ldr	r2, [pc, #24]	; (8000998 <vApplicationGetIdleTaskMemory+0x30>)
 800097e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2280      	movs	r2, #128	; 0x80
 8000984:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000164 	.word	0x20000164
 8000998:	20000218 	.word	0x20000218

0800099c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800099c:	b5b0      	push	{r4, r5, r7, lr}
 800099e:	b090      	sub	sp, #64	; 0x40
 80009a0:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of can_tx_queue */
  osMessageQDef(can_tx_queue, 512, uint8_t);
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_FREERTOS_Init+0x6c>)
 80009a4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80009a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  can_tx_queueHandle = osMessageCreate(osMessageQ(can_tx_queue), NULL);
 80009ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f007 fbb1 	bl	800811c <osMessageCreate>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a13      	ldr	r2, [pc, #76]	; (8000a0c <MX_FREERTOS_Init+0x70>)
 80009be:	6013      	str	r3, [r2, #0]

  /* definition and creation of can_rx_queue */
  osMessageQDef(can_rx_queue, 512, uint8_t);
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_FREERTOS_Init+0x6c>)
 80009c2:	f107 0420 	add.w	r4, r7, #32
 80009c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  can_rx_queueHandle = osMessageCreate(osMessageQ(can_rx_queue), NULL);
 80009cc:	f107 0320 	add.w	r3, r7, #32
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f007 fba2 	bl	800811c <osMessageCreate>
 80009d8:	4603      	mov	r3, r0
 80009da:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <MX_FREERTOS_Init+0x74>)
 80009dc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of APP_1HZ_TASK */
  osThreadDef(APP_1HZ_TASK, app_task_1Hz, osPriorityNormal, 0, 128);
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MX_FREERTOS_Init+0x78>)
 80009e0:	1d3c      	adds	r4, r7, #4
 80009e2:	461d      	mov	r5, r3
 80009e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_1HZ_TASKHandle = osThreadCreate(osThread(APP_1HZ_TASK), NULL);
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f007 fb31 	bl	800805c <osThreadCreate>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <MX_FREERTOS_Init+0x7c>)
 80009fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000a00:	bf00      	nop
 8000a02:	3740      	adds	r7, #64	; 0x40
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bdb0      	pop	{r4, r5, r7, pc}
 8000a08:	08009aa0 	.word	0x08009aa0
 8000a0c:	2000015c 	.word	0x2000015c
 8000a10:	20000160 	.word	0x20000160
 8000a14:	08009ab0 	.word	0x08009ab0
 8000a18:	20000158 	.word	0x20000158

08000a1c <app_task_1Hz>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_app_task_1Hz */
void app_task_1Hz(void const * argument)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_task_1Hz */
  /* Infinite loop */
  for(;;)
  {
	app_gauge_tick();
 8000a24:	f7ff fdda 	bl	80005dc <app_gauge_tick>
    osDelay(500);
 8000a28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a2c:	f007 fb62 	bl	80080f4 <osDelay>
  {
 8000a30:	e7f8      	b.n	8000a24 <app_task_1Hz+0x8>
	...

08000a34 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	; 0x28
 8000a38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b62      	ldr	r3, [pc, #392]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a61      	ldr	r2, [pc, #388]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000a54:	f043 0304 	orr.w	r3, r3, #4
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b5f      	ldr	r3, [pc, #380]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b5b      	ldr	r3, [pc, #364]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a5a      	ldr	r2, [pc, #360]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b58      	ldr	r3, [pc, #352]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	4b54      	ldr	r3, [pc, #336]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a53      	ldr	r2, [pc, #332]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b51      	ldr	r3, [pc, #324]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b4d      	ldr	r3, [pc, #308]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a4c      	ldr	r2, [pc, #304]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b4a      	ldr	r3, [pc, #296]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b46      	ldr	r3, [pc, #280]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a45      	ldr	r2, [pc, #276]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000ac4:	f043 0308 	orr.w	r3, r3, #8
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b43      	ldr	r3, [pc, #268]	; (8000bd8 <MX_GPIO_Init+0x1a4>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0308 	and.w	r3, r3, #8
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_SHUT_Pin|AFE_WAKE_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2106      	movs	r1, #6
 8000ada:	4840      	ldr	r0, [pc, #256]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000adc:	f002 fe94 	bl	8003808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SP1_CS_Pin|DFETOFF_OUT_Pin|LED3_OUT_Pin|LED2_OUT_Pin
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 611f 	mov.w	r1, #2544	; 0x9f0
 8000ae6:	483e      	ldr	r0, [pc, #248]	; (8000be0 <MX_GPIO_Init+0x1ac>)
 8000ae8:	f002 fe8e 	bl	8003808 <HAL_GPIO_WritePin>
                          |LED1_OUT_Pin|PWR5V_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DDSG_IN_Pin|LED5_OUT_BLUE_Pin|LED5_OUT_GREEN_Pin|LED5_OUT_RED_Pin
 8000aec:	2200      	movs	r2, #0
 8000aee:	f24f 0104 	movw	r1, #61444	; 0xf004
 8000af2:	483c      	ldr	r0, [pc, #240]	; (8000be4 <MX_GPIO_Init+0x1b0>)
 8000af4:	f002 fe88 	bl	8003808 <HAL_GPIO_WritePin>
                          |LED4_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 PC2
                           PC3 PC9 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2
 8000af8:	f24f 630c 	movw	r3, #62988	; 0xf60c
 8000afc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afe:	2303      	movs	r3, #3
 8000b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4834      	ldr	r0, [pc, #208]	; (8000be0 <MX_GPIO_Init+0x1ac>)
 8000b0e:	f002 fb57 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8000b12:	f248 1319 	movw	r3, #33049	; 0x8119
 8000b16:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	482d      	ldr	r0, [pc, #180]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000b28:	f002 fb4a 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RST_SHUT_Pin|AFE_WAKE_Pin;
 8000b2c:	2306      	movs	r3, #6
 8000b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	4826      	ldr	r0, [pc, #152]	; (8000bdc <MX_GPIO_Init+0x1a8>)
 8000b44:	f002 fb3c 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = SP1_CS_Pin|DFETOFF_OUT_Pin|LED3_OUT_Pin|LED2_OUT_Pin
 8000b48:	f44f 631f 	mov.w	r3, #2544	; 0x9f0
 8000b4c:	617b      	str	r3, [r7, #20]
                          |LED1_OUT_Pin|PWR5V_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	481f      	ldr	r0, [pc, #124]	; (8000be0 <MX_GPIO_Init+0x1ac>)
 8000b62:	f002 fb2d 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AFE_ALERT_IN_Pin|DCHG_IN_Pin;
 8000b66:	2303      	movs	r3, #3
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	481a      	ldr	r0, [pc, #104]	; (8000be4 <MX_GPIO_Init+0x1b0>)
 8000b7a:	f002 fb21 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DDSG_IN_Pin|LED5_OUT_BLUE_Pin|LED5_OUT_GREEN_Pin|LED5_OUT_RED_Pin
 8000b7e:	f24f 0304 	movw	r3, #61444	; 0xf004
 8000b82:	617b      	str	r3, [r7, #20]
                          |LED4_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	4813      	ldr	r0, [pc, #76]	; (8000be4 <MX_GPIO_Init+0x1b0>)
 8000b98:	f002 fb12 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 8000b9c:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 8000ba0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <MX_GPIO_Init+0x1b0>)
 8000bb2:	f002 fb05 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_IN_Pin;
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_IN_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4807      	ldr	r0, [pc, #28]	; (8000be8 <MX_GPIO_Init+0x1b4>)
 8000bca:	f002 faf9 	bl	80031c0 <HAL_GPIO_Init>

}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	; 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020800 	.word	0x40020800
 8000be4:	40020400 	.word	0x40020400
 8000be8:	40020c00 	.word	0x40020c00

08000bec <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <MX_I2C1_Init+0x50>)
 8000bf2:	4a13      	ldr	r2, [pc, #76]	; (8000c40 <MX_I2C1_Init+0x54>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_I2C1_Init+0x50>)
 8000bf8:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <MX_I2C1_Init+0x58>)
 8000bfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_I2C1_Init+0x50>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 168;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_I2C1_Init+0x50>)
 8000c04:	22a8      	movs	r2, #168	; 0xa8
 8000c06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_I2C1_Init+0x50>)
 8000c0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <MX_I2C1_Init+0x50>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_I2C1_Init+0x50>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <MX_I2C1_Init+0x50>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_I2C1_Init+0x50>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c28:	4804      	ldr	r0, [pc, #16]	; (8000c3c <MX_I2C1_Init+0x50>)
 8000c2a:	f002 fe1f 	bl	800386c <HAL_I2C_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c34:	f000 f95a 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000418 	.word	0x20000418
 8000c40:	40005400 	.word	0x40005400
 8000c44:	000186a0 	.word	0x000186a0

08000c48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a50      	ldr	r2, [pc, #320]	; (8000da8 <HAL_I2C_MspInit+0x160>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	f040 809a 	bne.w	8000da0 <HAL_I2C_MspInit+0x158>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	4b4e      	ldr	r3, [pc, #312]	; (8000dac <HAL_I2C_MspInit+0x164>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	4a4d      	ldr	r2, [pc, #308]	; (8000dac <HAL_I2C_MspInit+0x164>)
 8000c76:	f043 0302 	orr.w	r3, r3, #2
 8000c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7c:	4b4b      	ldr	r3, [pc, #300]	; (8000dac <HAL_I2C_MspInit+0x164>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c88:	23c0      	movs	r3, #192	; 0xc0
 8000c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c8c:	2312      	movs	r3, #18
 8000c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c98:	2304      	movs	r3, #4
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4843      	ldr	r0, [pc, #268]	; (8000db0 <HAL_I2C_MspInit+0x168>)
 8000ca4:	f002 fa8c 	bl	80031c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	4b3f      	ldr	r3, [pc, #252]	; (8000dac <HAL_I2C_MspInit+0x164>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	4a3e      	ldr	r2, [pc, #248]	; (8000dac <HAL_I2C_MspInit+0x164>)
 8000cb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb8:	4b3c      	ldr	r3, [pc, #240]	; (8000dac <HAL_I2C_MspInit+0x164>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000cc4:	4b3b      	ldr	r3, [pc, #236]	; (8000db4 <HAL_I2C_MspInit+0x16c>)
 8000cc6:	4a3c      	ldr	r2, [pc, #240]	; (8000db8 <HAL_I2C_MspInit+0x170>)
 8000cc8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000cca:	4b3a      	ldr	r3, [pc, #232]	; (8000db4 <HAL_I2C_MspInit+0x16c>)
 8000ccc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000cd0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cd2:	4b38      	ldr	r3, [pc, #224]	; (8000db4 <HAL_I2C_MspInit+0x16c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd8:	4b36      	ldr	r3, [pc, #216]	; (8000db4 <HAL_I2C_MspInit+0x16c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cde:	4b35      	ldr	r3, [pc, #212]	; (8000db4 <HAL_I2C_MspInit+0x16c>)
 8000ce0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ce4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ce6:	4b33      	ldr	r3, [pc, #204]	; (8000db4 <HAL_I2C_MspInit+0x16c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cec:	4b31      	ldr	r3, [pc, #196]	; (8000db4 <HAL_I2C_MspInit+0x16c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000cf2:	4b30      	ldr	r3, [pc, #192]	; (8000db4 <HAL_I2C_MspInit+0x16c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000cf8:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <HAL_I2C_MspInit+0x16c>)
 8000cfa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cfe:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d00:	4b2c      	ldr	r3, [pc, #176]	; (8000db4 <HAL_I2C_MspInit+0x16c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000d06:	482b      	ldr	r0, [pc, #172]	; (8000db4 <HAL_I2C_MspInit+0x16c>)
 8000d08:	f001 fdd4 	bl	80028b4 <HAL_DMA_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8000d12:	f000 f8eb 	bl	8000eec <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a26      	ldr	r2, [pc, #152]	; (8000db4 <HAL_I2C_MspInit+0x16c>)
 8000d1a:	639a      	str	r2, [r3, #56]	; 0x38
 8000d1c:	4a25      	ldr	r2, [pc, #148]	; (8000db4 <HAL_I2C_MspInit+0x16c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <HAL_I2C_MspInit+0x174>)
 8000d24:	4a26      	ldr	r2, [pc, #152]	; (8000dc0 <HAL_I2C_MspInit+0x178>)
 8000d26:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000d28:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <HAL_I2C_MspInit+0x174>)
 8000d2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d2e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d30:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <HAL_I2C_MspInit+0x174>)
 8000d32:	2240      	movs	r2, #64	; 0x40
 8000d34:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <HAL_I2C_MspInit+0x174>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <HAL_I2C_MspInit+0x174>)
 8000d3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d42:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d44:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <HAL_I2C_MspInit+0x174>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <HAL_I2C_MspInit+0x174>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000d50:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <HAL_I2C_MspInit+0x174>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_I2C_MspInit+0x174>)
 8000d58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d5c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <HAL_I2C_MspInit+0x174>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000d64:	4815      	ldr	r0, [pc, #84]	; (8000dbc <HAL_I2C_MspInit+0x174>)
 8000d66:	f001 fda5 	bl	80028b4 <HAL_DMA_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8000d70:	f000 f8bc 	bl	8000eec <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a11      	ldr	r2, [pc, #68]	; (8000dbc <HAL_I2C_MspInit+0x174>)
 8000d78:	635a      	str	r2, [r3, #52]	; 0x34
 8000d7a:	4a10      	ldr	r2, [pc, #64]	; (8000dbc <HAL_I2C_MspInit+0x174>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2105      	movs	r1, #5
 8000d84:	201f      	movs	r0, #31
 8000d86:	f001 fd51 	bl	800282c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d8a:	201f      	movs	r0, #31
 8000d8c:	f001 fd7a 	bl	8002884 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2105      	movs	r1, #5
 8000d94:	2020      	movs	r0, #32
 8000d96:	f001 fd49 	bl	800282c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d9a:	2020      	movs	r0, #32
 8000d9c:	f001 fd72 	bl	8002884 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	; 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40005400 	.word	0x40005400
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020400 	.word	0x40020400
 8000db4:	2000046c 	.word	0x2000046c
 8000db8:	40026010 	.word	0x40026010
 8000dbc:	200004cc 	.word	0x200004cc
 8000dc0:	400260a0 	.word	0x400260a0

08000dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc8:	f000 fb82 	bl	80014d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */
  (void)SystemClock_Config();
 8000dcc:	f000 f80a 	bl	8000de4 <SystemClock_Config>
  // TODO: Sys_Init - HW
  (void)app_sys_init();
 8000dd0:	f7ff fc1c 	bl	800060c <app_sys_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  // TODO: Sys_Init - SW Modules
  (void)app_sys_peripheral_init();
 8000dd4:	f7ff fc32 	bl	800063c <app_sys_peripheral_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000dd8:	f7ff fde0 	bl	800099c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ddc:	f007 f937 	bl	800804e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <main+0x1c>
	...

08000de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b094      	sub	sp, #80	; 0x50
 8000de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	2234      	movs	r2, #52	; 0x34
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f008 fd76 	bl	80098e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df8:	f107 0308 	add.w	r3, r7, #8
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e08:	2300      	movs	r3, #0
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <SystemClock_Config+0xdc>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	4a2b      	ldr	r2, [pc, #172]	; (8000ec0 <SystemClock_Config+0xdc>)
 8000e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e16:	6413      	str	r3, [r2, #64]	; 0x40
 8000e18:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <SystemClock_Config+0xdc>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e24:	2300      	movs	r3, #0
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	4b26      	ldr	r3, [pc, #152]	; (8000ec4 <SystemClock_Config+0xe0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a25      	ldr	r2, [pc, #148]	; (8000ec4 <SystemClock_Config+0xe0>)
 8000e2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	4b23      	ldr	r3, [pc, #140]	; (8000ec4 <SystemClock_Config+0xe0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e3c:	603b      	str	r3, [r7, #0]
 8000e3e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e40:	2301      	movs	r3, #1
 8000e42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e48:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e54:	2304      	movs	r3, #4
 8000e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e58:	23b4      	movs	r3, #180	; 0xb4
 8000e5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e60:	2302      	movs	r3, #2
 8000e62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e64:	2302      	movs	r3, #2
 8000e66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f005 fe81 	bl	8006b74 <HAL_RCC_OscConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e78:	f000 f838 	bl	8000eec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e7c:	f005 f9ee 	bl	800625c <HAL_PWREx_EnableOverDrive>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e86:	f000 f831 	bl	8000eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8a:	230f      	movs	r3, #15
 8000e8c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	2105      	movs	r1, #5
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f005 fa27 	bl	80062fc <HAL_RCC_ClockConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000eb4:	f000 f81a 	bl	8000eec <Error_Handler>
  }
}
 8000eb8:	bf00      	nop
 8000eba:	3750      	adds	r7, #80	; 0x50
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40007000 	.word	0x40007000

08000ec8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d101      	bne.n	8000ede <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eda:	f000 fb1b 	bl	8001514 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40010000 	.word	0x40010000

08000eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef0:	b672      	cpsid	i
}
 8000ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <Error_Handler+0x8>

08000ef6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f12:	4a18      	ldr	r2, [pc, #96]	; (8000f74 <MX_SPI1_Init+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f58:	220a      	movs	r2, #10
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <MX_SPI1_Init+0x64>)
 8000f5e:	f006 f965 	bl	800722c <HAL_SPI_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f68:	f7ff ffc0 	bl	8000eec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000052c 	.word	0x2000052c
 8000f74:	40013000 	.word	0x40013000

08000f78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a4c      	ldr	r2, [pc, #304]	; (80010c8 <HAL_SPI_MspInit+0x150>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	f040 8092 	bne.w	80010c0 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	4b4a      	ldr	r3, [pc, #296]	; (80010cc <HAL_SPI_MspInit+0x154>)
 8000fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa4:	4a49      	ldr	r2, [pc, #292]	; (80010cc <HAL_SPI_MspInit+0x154>)
 8000fa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000faa:	6453      	str	r3, [r2, #68]	; 0x44
 8000fac:	4b47      	ldr	r3, [pc, #284]	; (80010cc <HAL_SPI_MspInit+0x154>)
 8000fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	4b43      	ldr	r3, [pc, #268]	; (80010cc <HAL_SPI_MspInit+0x154>)
 8000fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc0:	4a42      	ldr	r2, [pc, #264]	; (80010cc <HAL_SPI_MspInit+0x154>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc8:	4b40      	ldr	r3, [pc, #256]	; (80010cc <HAL_SPI_MspInit+0x154>)
 8000fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fd4:	23e0      	movs	r3, #224	; 0xe0
 8000fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fe4:	2305      	movs	r3, #5
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	4838      	ldr	r0, [pc, #224]	; (80010d0 <HAL_SPI_MspInit+0x158>)
 8000ff0:	f002 f8e6 	bl	80031c0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8000ff4:	4b37      	ldr	r3, [pc, #220]	; (80010d4 <HAL_SPI_MspInit+0x15c>)
 8000ff6:	4a38      	ldr	r2, [pc, #224]	; (80010d8 <HAL_SPI_MspInit+0x160>)
 8000ff8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8000ffa:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <HAL_SPI_MspInit+0x15c>)
 8000ffc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001000:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001002:	4b34      	ldr	r3, [pc, #208]	; (80010d4 <HAL_SPI_MspInit+0x15c>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001008:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <HAL_SPI_MspInit+0x15c>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800100e:	4b31      	ldr	r3, [pc, #196]	; (80010d4 <HAL_SPI_MspInit+0x15c>)
 8001010:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001014:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001016:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <HAL_SPI_MspInit+0x15c>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800101c:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <HAL_SPI_MspInit+0x15c>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001022:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <HAL_SPI_MspInit+0x15c>)
 8001024:	2200      	movs	r2, #0
 8001026:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <HAL_SPI_MspInit+0x15c>)
 800102a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800102e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001030:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <HAL_SPI_MspInit+0x15c>)
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001036:	4827      	ldr	r0, [pc, #156]	; (80010d4 <HAL_SPI_MspInit+0x15c>)
 8001038:	f001 fc3c 	bl	80028b4 <HAL_DMA_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001042:	f7ff ff53 	bl	8000eec <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <HAL_SPI_MspInit+0x15c>)
 800104a:	64da      	str	r2, [r3, #76]	; 0x4c
 800104c:	4a21      	ldr	r2, [pc, #132]	; (80010d4 <HAL_SPI_MspInit+0x15c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001052:	4b22      	ldr	r3, [pc, #136]	; (80010dc <HAL_SPI_MspInit+0x164>)
 8001054:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <HAL_SPI_MspInit+0x168>)
 8001056:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001058:	4b20      	ldr	r3, [pc, #128]	; (80010dc <HAL_SPI_MspInit+0x164>)
 800105a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800105e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <HAL_SPI_MspInit+0x164>)
 8001062:	2240      	movs	r2, #64	; 0x40
 8001064:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <HAL_SPI_MspInit+0x164>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800106c:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <HAL_SPI_MspInit+0x164>)
 800106e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001072:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_SPI_MspInit+0x164>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <HAL_SPI_MspInit+0x164>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_SPI_MspInit+0x164>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <HAL_SPI_MspInit+0x164>)
 8001088:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800108c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <HAL_SPI_MspInit+0x164>)
 8001090:	2200      	movs	r2, #0
 8001092:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001094:	4811      	ldr	r0, [pc, #68]	; (80010dc <HAL_SPI_MspInit+0x164>)
 8001096:	f001 fc0d 	bl	80028b4 <HAL_DMA_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 80010a0:	f7ff ff24 	bl	8000eec <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <HAL_SPI_MspInit+0x164>)
 80010a8:	649a      	str	r2, [r3, #72]	; 0x48
 80010aa:	4a0c      	ldr	r2, [pc, #48]	; (80010dc <HAL_SPI_MspInit+0x164>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2105      	movs	r1, #5
 80010b4:	2023      	movs	r0, #35	; 0x23
 80010b6:	f001 fbb9 	bl	800282c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80010ba:	2023      	movs	r0, #35	; 0x23
 80010bc:	f001 fbe2 	bl	8002884 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010c0:	bf00      	nop
 80010c2:	3728      	adds	r7, #40	; 0x28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40013000 	.word	0x40013000
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	200005ac 	.word	0x200005ac
 80010d8:	40026410 	.word	0x40026410
 80010dc:	2000060c 	.word	0x2000060c
 80010e0:	40026458 	.word	0x40026458

080010e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_MspInit+0x54>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a11      	ldr	r2, [pc, #68]	; (8001138 <HAL_MspInit+0x54>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <HAL_MspInit+0x54>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_MspInit+0x54>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <HAL_MspInit+0x54>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001114:	6413      	str	r3, [r2, #64]	; 0x40
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <HAL_MspInit+0x54>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	210f      	movs	r1, #15
 8001126:	f06f 0001 	mvn.w	r0, #1
 800112a:	f001 fb7f 	bl	800282c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800

0800113c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	; 0x30
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001144:	2300      	movs	r3, #0
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <HAL_InitTick+0xd4>)
 8001152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001154:	4a2e      	ldr	r2, [pc, #184]	; (8001210 <HAL_InitTick+0xd4>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6453      	str	r3, [r2, #68]	; 0x44
 800115c:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <HAL_InitTick+0xd4>)
 800115e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001160:	f003 0301 	and.w	r3, r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001168:	f107 020c 	add.w	r2, r7, #12
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	4611      	mov	r1, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f005 fa9c 	bl	80066b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001178:	f005 fa86 	bl	8006688 <HAL_RCC_GetPCLK2Freq>
 800117c:	4603      	mov	r3, r0
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001184:	4a23      	ldr	r2, [pc, #140]	; (8001214 <HAL_InitTick+0xd8>)
 8001186:	fba2 2303 	umull	r2, r3, r2, r3
 800118a:	0c9b      	lsrs	r3, r3, #18
 800118c:	3b01      	subs	r3, #1
 800118e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001190:	4b21      	ldr	r3, [pc, #132]	; (8001218 <HAL_InitTick+0xdc>)
 8001192:	4a22      	ldr	r2, [pc, #136]	; (800121c <HAL_InitTick+0xe0>)
 8001194:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001196:	4b20      	ldr	r3, [pc, #128]	; (8001218 <HAL_InitTick+0xdc>)
 8001198:	f240 32e7 	movw	r2, #999	; 0x3e7
 800119c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800119e:	4a1e      	ldr	r2, [pc, #120]	; (8001218 <HAL_InitTick+0xdc>)
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <HAL_InitTick+0xdc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011aa:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <HAL_InitTick+0xdc>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <HAL_InitTick+0xdc>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80011b6:	4818      	ldr	r0, [pc, #96]	; (8001218 <HAL_InitTick+0xdc>)
 80011b8:	f006 fb64 	bl	8007884 <HAL_TIM_Base_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80011c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d11b      	bne.n	8001202 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80011ca:	4813      	ldr	r0, [pc, #76]	; (8001218 <HAL_InitTick+0xdc>)
 80011cc:	f006 fc54 	bl	8007a78 <HAL_TIM_Base_Start_IT>
 80011d0:	4603      	mov	r3, r0
 80011d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80011d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d111      	bne.n	8001202 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011de:	2019      	movs	r0, #25
 80011e0:	f001 fb50 	bl	8002884 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	d808      	bhi.n	80011fc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80011ea:	2200      	movs	r2, #0
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	2019      	movs	r0, #25
 80011f0:	f001 fb1c 	bl	800282c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011f4:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <HAL_InitTick+0xe4>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e002      	b.n	8001202 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001202:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001206:	4618      	mov	r0, r3
 8001208:	3730      	adds	r7, #48	; 0x30
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	431bde83 	.word	0x431bde83
 8001218:	2000066c 	.word	0x2000066c
 800121c:	40010000 	.word	0x40010000
 8001220:	20000004 	.word	0x20000004

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <NMI_Handler+0x4>

0800122a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <HardFault_Handler+0x4>

08001230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <MemManage_Handler+0x4>

08001236 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <BusFault_Handler+0x4>

0800123c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <UsageFault_Handler+0x4>

08001242 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <WWDG_IRQHandler+0x10>)
 8001256:	f006 feb9 	bl	8007fcc <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200006b4 	.word	0x200006b4

08001264 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <DMA1_Stream0_IRQHandler+0x10>)
 800126a:	f001 fd5f 	bl	8002d2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000046c 	.word	0x2000046c

08001278 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <DMA1_Stream6_IRQHandler+0x10>)
 800127e:	f001 fd55 	bl	8002d2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200004cc 	.word	0x200004cc

0800128c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <CAN1_TX_IRQHandler+0x10>)
 8001292:	f000 ffb5 	bl	8002200 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200000f4 	.word	0x200000f4

080012a0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <CAN1_RX0_IRQHandler+0x10>)
 80012a6:	f000 ffab 	bl	8002200 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200000f4 	.word	0x200000f4

080012b4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <CAN1_RX1_IRQHandler+0x10>)
 80012ba:	f000 ffa1 	bl	8002200 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200000f4 	.word	0x200000f4

080012c8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <CAN1_SCE_IRQHandler+0x10>)
 80012ce:	f000 ff97 	bl	8002200 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200000f4 	.word	0x200000f4

080012dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <TIM1_UP_TIM10_IRQHandler+0x10>)
 80012e2:	f006 fc8f 	bl	8007c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000066c 	.word	0x2000066c

080012f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <I2C1_EV_IRQHandler+0x10>)
 80012f6:	f002 ffa9 	bl	800424c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000418 	.word	0x20000418

08001304 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <I2C1_ER_IRQHandler+0x10>)
 800130a:	f003 f910 	bl	800452e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000418 	.word	0x20000418

08001318 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <SPI1_IRQHandler+0x10>)
 800131e:	f006 f94b 	bl	80075b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000052c 	.word	0x2000052c

0800132c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <DMA2_Stream0_IRQHandler+0x10>)
 8001332:	f001 fcfb 	bl	8002d2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200005ac 	.word	0x200005ac

08001340 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <DMA2_Stream3_IRQHandler+0x10>)
 8001346:	f001 fcf1 	bl	8002d2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2000060c 	.word	0x2000060c

08001354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <SystemInit+0x20>)
 800135a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <SystemInit+0x20>)
 8001360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001378:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800137c:	480d      	ldr	r0, [pc, #52]	; (80013b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800137e:	490e      	ldr	r1, [pc, #56]	; (80013b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001380:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001394:	4c0b      	ldr	r4, [pc, #44]	; (80013c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013a2:	f7ff ffd7 	bl	8001354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a6:	f008 fa79 	bl	800989c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013aa:	f7ff fd0b 	bl	8000dc4 <main>
  bx  lr    
 80013ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013bc:	08009da0 	.word	0x08009da0
  ldr r2, =_sbss
 80013c0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013c4:	20010230 	.word	0x20010230

080013c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC_IRQHandler>

080013ca <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b084      	sub	sp, #16
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d104      	bne.n	80013e2 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80013d8:	b672      	cpsid	i
}
 80013da:	bf00      	nop
 80013dc:	f7ff fd86 	bl	8000eec <Error_Handler>
 80013e0:	e7fe      	b.n	80013e0 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7a1b      	ldrb	r3, [r3, #8]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d904      	bls.n	80013f4 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80013ea:	b672      	cpsid	i
}
 80013ec:	bf00      	nop
 80013ee:	f7ff fd7d 	bl	8000eec <Error_Handler>
 80013f2:	e7fe      	b.n	80013f2 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7a1b      	ldrb	r3, [r3, #8]
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	b2d1      	uxtb	r1, r2
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	7211      	strb	r1, [r2, #8]
 8001400:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001402:	f3ef 8211 	mrs	r2, BASEPRI
 8001406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800140a:	f383 8811 	msr	BASEPRI, r3
 800140e:	f3bf 8f6f 	isb	sy
 8001412:	f3bf 8f4f 	dsb	sy
 8001416:	60fa      	str	r2, [r7, #12]
 8001418:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d104      	bne.n	8001442 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
 800143c:	f7ff fd56 	bl	8000eec <Error_Handler>
 8001440:	e7fe      	b.n	8001440 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7a1b      	ldrb	r3, [r3, #8]
 8001446:	3b01      	subs	r3, #1
 8001448:	b2da      	uxtb	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7a1b      	ldrb	r3, [r3, #8]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d904      	bls.n	8001460 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8001456:	b672      	cpsid	i
}
 8001458:	bf00      	nop
 800145a:	f7ff fd47 	bl	8000eec <Error_Handler>
 800145e:	e7fe      	b.n	800145e <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7a1b      	ldrb	r3, [r3, #8]
 8001464:	461a      	mov	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001474:	bf00      	nop
}
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d104      	bne.n	8001496 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
 8001490:	f7ff fd2c 	bl	8000eec <Error_Handler>
 8001494:	e7fe      	b.n	8001494 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff96 	bl	80013ca <stm32_lock_acquire>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d104      	bne.n	80014be <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80014b4:	b672      	cpsid	i
}
 80014b6:	bf00      	nop
 80014b8:	f7ff fd18 	bl	8000eec <Error_Handler>
 80014bc:	e7fe      	b.n	80014bc <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ffb2 	bl	800142a <stm32_lock_release>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_Init+0x40>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0d      	ldr	r2, [pc, #52]	; (8001510 <HAL_Init+0x40>)
 80014da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_Init+0x40>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <HAL_Init+0x40>)
 80014e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <HAL_Init+0x40>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a07      	ldr	r2, [pc, #28]	; (8001510 <HAL_Init+0x40>)
 80014f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f8:	2003      	movs	r0, #3
 80014fa:	f001 f977 	bl	80027ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014fe:	200f      	movs	r0, #15
 8001500:	f7ff fe1c 	bl	800113c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001504:	f7ff fdee 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023c00 	.word	0x40023c00

08001514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_IncTick+0x20>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_IncTick+0x24>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4413      	add	r3, r2
 8001524:	4a04      	ldr	r2, [pc, #16]	; (8001538 <HAL_IncTick+0x24>)
 8001526:	6013      	str	r3, [r2, #0]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20000008 	.word	0x20000008
 8001538:	200006d4 	.word	0x200006d4

0800153c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return uwTick;
 8001540:	4b03      	ldr	r3, [pc, #12]	; (8001550 <HAL_GetTick+0x14>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	200006d4 	.word	0x200006d4

08001554 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e15c      	b.n	8001824 <HAL_ADC_Init+0x2d0>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a8e      	ldr	r2, [pc, #568]	; (80017a8 <HAL_ADC_Init+0x254>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d00e      	beq.n	8001592 <HAL_ADC_Init+0x3e>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a8c      	ldr	r2, [pc, #560]	; (80017ac <HAL_ADC_Init+0x258>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d009      	beq.n	8001592 <HAL_ADC_Init+0x3e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a8b      	ldr	r2, [pc, #556]	; (80017b0 <HAL_ADC_Init+0x25c>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d004      	beq.n	8001592 <HAL_ADC_Init+0x3e>
 8001588:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800158c:	4889      	ldr	r0, [pc, #548]	; (80017b4 <HAL_ADC_Init+0x260>)
 800158e:	f7ff fcb2 	bl	8000ef6 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d013      	beq.n	80015c2 <HAL_ADC_Init+0x6e>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a2:	d00e      	beq.n	80015c2 <HAL_ADC_Init+0x6e>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015ac:	d009      	beq.n	80015c2 <HAL_ADC_Init+0x6e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80015b6:	d004      	beq.n	80015c2 <HAL_ADC_Init+0x6e>
 80015b8:	f240 1143 	movw	r1, #323	; 0x143
 80015bc:	487d      	ldr	r0, [pc, #500]	; (80017b4 <HAL_ADC_Init+0x260>)
 80015be:	f7ff fc9a 	bl	8000ef6 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d013      	beq.n	80015f2 <HAL_ADC_Init+0x9e>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d2:	d00e      	beq.n	80015f2 <HAL_ADC_Init+0x9e>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015dc:	d009      	beq.n	80015f2 <HAL_ADC_Init+0x9e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80015e6:	d004      	beq.n	80015f2 <HAL_ADC_Init+0x9e>
 80015e8:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80015ec:	4871      	ldr	r0, [pc, #452]	; (80017b4 <HAL_ADC_Init+0x260>)
 80015ee:	f7ff fc82 	bl	8000ef6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d008      	beq.n	800160c <HAL_ADC_Init+0xb8>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d004      	beq.n	800160c <HAL_ADC_Init+0xb8>
 8001602:	f240 1145 	movw	r1, #325	; 0x145
 8001606:	486b      	ldr	r0, [pc, #428]	; (80017b4 <HAL_ADC_Init+0x260>)
 8001608:	f7ff fc75 	bl	8000ef6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7e1b      	ldrb	r3, [r3, #24]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d008      	beq.n	8001626 <HAL_ADC_Init+0xd2>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7e1b      	ldrb	r3, [r3, #24]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d004      	beq.n	8001626 <HAL_ADC_Init+0xd2>
 800161c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8001620:	4864      	ldr	r0, [pc, #400]	; (80017b4 <HAL_ADC_Init+0x260>)
 8001622:	f7ff fc68 	bl	8000ef6 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	2b00      	cmp	r3, #0
 800162c:	d054      	beq.n	80016d8 <HAL_ADC_Init+0x184>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001636:	d04f      	beq.n	80016d8 <HAL_ADC_Init+0x184>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001640:	d04a      	beq.n	80016d8 <HAL_ADC_Init+0x184>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001646:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800164a:	d045      	beq.n	80016d8 <HAL_ADC_Init+0x184>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001650:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001654:	d040      	beq.n	80016d8 <HAL_ADC_Init+0x184>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800165e:	d03b      	beq.n	80016d8 <HAL_ADC_Init+0x184>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001668:	d036      	beq.n	80016d8 <HAL_ADC_Init+0x184>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8001672:	d031      	beq.n	80016d8 <HAL_ADC_Init+0x184>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800167c:	d02c      	beq.n	80016d8 <HAL_ADC_Init+0x184>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8001686:	d027      	beq.n	80016d8 <HAL_ADC_Init+0x184>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001690:	d022      	beq.n	80016d8 <HAL_ADC_Init+0x184>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001696:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 800169a:	d01d      	beq.n	80016d8 <HAL_ADC_Init+0x184>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80016a4:	d018      	beq.n	80016d8 <HAL_ADC_Init+0x184>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016aa:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 80016ae:	d013      	beq.n	80016d8 <HAL_ADC_Init+0x184>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80016b8:	d00e      	beq.n	80016d8 <HAL_ADC_Init+0x184>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016be:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80016c2:	d009      	beq.n	80016d8 <HAL_ADC_Init+0x184>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	4a3b      	ldr	r2, [pc, #236]	; (80017b8 <HAL_ADC_Init+0x264>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d004      	beq.n	80016d8 <HAL_ADC_Init+0x184>
 80016ce:	f240 1147 	movw	r1, #327	; 0x147
 80016d2:	4838      	ldr	r0, [pc, #224]	; (80017b4 <HAL_ADC_Init+0x260>)
 80016d4:	f7ff fc0f 	bl	8000ef6 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d009      	beq.n	80016f4 <HAL_ADC_Init+0x1a0>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016e8:	d004      	beq.n	80016f4 <HAL_ADC_Init+0x1a0>
 80016ea:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80016ee:	4831      	ldr	r0, [pc, #196]	; (80017b4 <HAL_ADC_Init+0x260>)
 80016f0:	f7ff fc01 	bl	8000ef6 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_ADC_Init+0x1b0>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	2b10      	cmp	r3, #16
 8001702:	d904      	bls.n	800170e <HAL_ADC_Init+0x1ba>
 8001704:	f240 1149 	movw	r1, #329	; 0x149
 8001708:	482a      	ldr	r0, [pc, #168]	; (80017b4 <HAL_ADC_Init+0x260>)
 800170a:	f7ff fbf4 	bl	8000ef6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001714:	2b00      	cmp	r3, #0
 8001716:	d009      	beq.n	800172c <HAL_ADC_Init+0x1d8>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800171e:	2b01      	cmp	r3, #1
 8001720:	d004      	beq.n	800172c <HAL_ADC_Init+0x1d8>
 8001722:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8001726:	4823      	ldr	r0, [pc, #140]	; (80017b4 <HAL_ADC_Init+0x260>)
 8001728:	f7ff fbe5 	bl	8000ef6 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d00c      	beq.n	800174e <HAL_ADC_Init+0x1fa>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <HAL_ADC_Init+0x1fa>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d004      	beq.n	800174e <HAL_ADC_Init+0x1fa>
 8001744:	f240 114b 	movw	r1, #331	; 0x14b
 8001748:	481a      	ldr	r0, [pc, #104]	; (80017b4 <HAL_ADC_Init+0x260>)
 800174a:	f7ff fbd4 	bl	8000ef6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d009      	beq.n	800176c <HAL_ADC_Init+0x218>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d004      	beq.n	800176c <HAL_ADC_Init+0x218>
 8001762:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8001766:	4813      	ldr	r0, [pc, #76]	; (80017b4 <HAL_ADC_Init+0x260>)
 8001768:	f7ff fbc5 	bl	8000ef6 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	4a11      	ldr	r2, [pc, #68]	; (80017b8 <HAL_ADC_Init+0x264>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d022      	beq.n	80017bc <HAL_ADC_Init+0x268>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	2b00      	cmp	r3, #0
 800177c:	d01e      	beq.n	80017bc <HAL_ADC_Init+0x268>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001786:	d019      	beq.n	80017bc <HAL_ADC_Init+0x268>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001790:	d014      	beq.n	80017bc <HAL_ADC_Init+0x268>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001796:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800179a:	d00f      	beq.n	80017bc <HAL_ADC_Init+0x268>
 800179c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <HAL_ADC_Init+0x260>)
 80017a2:	f7ff fba8 	bl	8000ef6 <assert_failed>
 80017a6:	e009      	b.n	80017bc <HAL_ADC_Init+0x268>
 80017a8:	40012000 	.word	0x40012000
 80017ac:	40012100 	.word	0x40012100
 80017b0:	40012200 	.word	0x40012200
 80017b4:	08009acc 	.word	0x08009acc
 80017b8:	0f000001 	.word	0x0f000001
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d109      	bne.n	80017d8 <HAL_ADC_Init+0x284>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7fe ffa7 	bl	8000718 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f003 0310 	and.w	r3, r3, #16
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d118      	bne.n	8001816 <HAL_ADC_Init+0x2c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017ec:	f023 0302 	bic.w	r3, r3, #2
 80017f0:	f043 0202 	orr.w	r2, r3, #2
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f98d 	bl	8001b18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	f023 0303 	bic.w	r3, r3, #3
 800180c:	f043 0201 	orr.w	r2, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	641a      	str	r2, [r3, #64]	; 0x40
 8001814:	e001      	b.n	800181a <HAL_ADC_Init+0x2c6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001822:	7bfb      	ldrb	r3, [r7, #15]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b12      	cmp	r3, #18
 8001840:	d909      	bls.n	8001856 <HAL_ADC_ConfigChannel+0x2a>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a72      	ldr	r2, [pc, #456]	; (8001a10 <HAL_ADC_ConfigChannel+0x1e4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d004      	beq.n	8001856 <HAL_ADC_ConfigChannel+0x2a>
 800184c:	f240 618b 	movw	r1, #1675	; 0x68b
 8001850:	4870      	ldr	r0, [pc, #448]	; (8001a14 <HAL_ADC_ConfigChannel+0x1e8>)
 8001852:	f7ff fb50 	bl	8000ef6 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_ADC_ConfigChannel+0x3a>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b10      	cmp	r3, #16
 8001864:	d904      	bls.n	8001870 <HAL_ADC_ConfigChannel+0x44>
 8001866:	f240 618c 	movw	r1, #1676	; 0x68c
 800186a:	486a      	ldr	r0, [pc, #424]	; (8001a14 <HAL_ADC_ConfigChannel+0x1e8>)
 800186c:	f7ff fb43 	bl	8000ef6 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d020      	beq.n	80018ba <HAL_ADC_ConfigChannel+0x8e>
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d01c      	beq.n	80018ba <HAL_ADC_ConfigChannel+0x8e>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d018      	beq.n	80018ba <HAL_ADC_ConfigChannel+0x8e>
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b03      	cmp	r3, #3
 800188e:	d014      	beq.n	80018ba <HAL_ADC_ConfigChannel+0x8e>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	2b04      	cmp	r3, #4
 8001896:	d010      	beq.n	80018ba <HAL_ADC_ConfigChannel+0x8e>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b05      	cmp	r3, #5
 800189e:	d00c      	beq.n	80018ba <HAL_ADC_ConfigChannel+0x8e>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b06      	cmp	r3, #6
 80018a6:	d008      	beq.n	80018ba <HAL_ADC_ConfigChannel+0x8e>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b07      	cmp	r3, #7
 80018ae:	d004      	beq.n	80018ba <HAL_ADC_ConfigChannel+0x8e>
 80018b0:	f240 618d 	movw	r1, #1677	; 0x68d
 80018b4:	4857      	ldr	r0, [pc, #348]	; (8001a14 <HAL_ADC_ConfigChannel+0x1e8>)
 80018b6:	f7ff fb1e 	bl	8000ef6 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_ADC_ConfigChannel+0x9c>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e118      	b.n	8001afa <HAL_ADC_ConfigChannel+0x2ce>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b09      	cmp	r3, #9
 80018d6:	d925      	bls.n	8001924 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68d9      	ldr	r1, [r3, #12]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	3b1e      	subs	r3, #30
 80018ee:	2207      	movs	r2, #7
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43da      	mvns	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	400a      	ands	r2, r1
 80018fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68d9      	ldr	r1, [r3, #12]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	b29b      	uxth	r3, r3
 800190e:	4618      	mov	r0, r3
 8001910:	4603      	mov	r3, r0
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4403      	add	r3, r0
 8001916:	3b1e      	subs	r3, #30
 8001918:	409a      	lsls	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	e022      	b.n	800196a <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6919      	ldr	r1, [r3, #16]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	2207      	movs	r2, #7
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43da      	mvns	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	400a      	ands	r2, r1
 8001946:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6919      	ldr	r1, [r3, #16]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	b29b      	uxth	r3, r3
 8001958:	4618      	mov	r0, r3
 800195a:	4603      	mov	r3, r0
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4403      	add	r3, r0
 8001960:	409a      	lsls	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b06      	cmp	r3, #6
 8001970:	d824      	bhi.n	80019bc <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	3b05      	subs	r3, #5
 8001984:	221f      	movs	r2, #31
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43da      	mvns	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	400a      	ands	r2, r1
 8001992:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	4618      	mov	r0, r3
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	3b05      	subs	r3, #5
 80019ae:	fa00 f203 	lsl.w	r2, r0, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	635a      	str	r2, [r3, #52]	; 0x34
 80019ba:	e051      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b0c      	cmp	r3, #12
 80019c2:	d829      	bhi.n	8001a18 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	3b23      	subs	r3, #35	; 0x23
 80019d6:	221f      	movs	r2, #31
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43da      	mvns	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	400a      	ands	r2, r1
 80019e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	3b23      	subs	r3, #35	; 0x23
 8001a00:	fa00 f203 	lsl.w	r2, r0, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a0c:	e028      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x234>
 8001a0e:	bf00      	nop
 8001a10:	10000012 	.word	0x10000012
 8001a14:	08009acc 	.word	0x08009acc
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	3b41      	subs	r3, #65	; 0x41
 8001a2a:	221f      	movs	r2, #31
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43da      	mvns	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	400a      	ands	r2, r1
 8001a38:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	3b41      	subs	r3, #65	; 0x41
 8001a54:	fa00 f203 	lsl.w	r2, r0, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a60:	4b28      	ldr	r3, [pc, #160]	; (8001b04 <HAL_ADC_ConfigChannel+0x2d8>)
 8001a62:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a27      	ldr	r2, [pc, #156]	; (8001b08 <HAL_ADC_ConfigChannel+0x2dc>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d10f      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x262>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b12      	cmp	r3, #18
 8001a74:	d10b      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a1d      	ldr	r2, [pc, #116]	; (8001b08 <HAL_ADC_ConfigChannel+0x2dc>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d12b      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x2c4>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <HAL_ADC_ConfigChannel+0x2e0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d003      	beq.n	8001aaa <HAL_ADC_ConfigChannel+0x27e>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b11      	cmp	r3, #17
 8001aa8:	d122      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a11      	ldr	r2, [pc, #68]	; (8001b0c <HAL_ADC_ConfigChannel+0x2e0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d111      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <HAL_ADC_ConfigChannel+0x2e4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a10      	ldr	r2, [pc, #64]	; (8001b14 <HAL_ADC_ConfigChannel+0x2e8>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	0c9a      	lsrs	r2, r3, #18
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ae2:	e002      	b.n	8001aea <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f9      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40012300 	.word	0x40012300
 8001b08:	40012000 	.word	0x40012000
 8001b0c:	10000012 	.word	0x10000012
 8001b10:	20000000 	.word	0x20000000
 8001b14:	431bde83 	.word	0x431bde83

08001b18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b20:	4b7f      	ldr	r3, [pc, #508]	; (8001d20 <ADC_Init+0x208>)
 8001b22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6859      	ldr	r1, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	021a      	lsls	r2, r3, #8
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6859      	ldr	r1, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6899      	ldr	r1, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	4a5e      	ldr	r2, [pc, #376]	; (8001d24 <ADC_Init+0x20c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d022      	beq.n	8001bf6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6899      	ldr	r1, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001be0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6899      	ldr	r1, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	e00f      	b.n	8001c16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0202 	bic.w	r2, r2, #2
 8001c24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6899      	ldr	r1, [r3, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	7e1b      	ldrb	r3, [r3, #24]
 8001c30:	005a      	lsls	r2, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d028      	beq.n	8001c96 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <ADC_Init+0x13c>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d904      	bls.n	8001c5e <ADC_Init+0x146>
 8001c54:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8001c58:	4833      	ldr	r0, [pc, #204]	; (8001d28 <ADC_Init+0x210>)
 8001c5a:	f7ff f94c 	bl	8000ef6 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c6c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c7c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	035a      	lsls	r2, r3, #13
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	e007      	b.n	8001ca6 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ca4:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	051a      	lsls	r2, r3, #20
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001cda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6899      	ldr	r1, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ce8:	025a      	lsls	r2, r3, #9
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6899      	ldr	r1, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	029a      	lsls	r2, r3, #10
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	609a      	str	r2, [r3, #8]
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40012300 	.word	0x40012300
 8001d24:	0f000001 	.word	0x0f000001
 8001d28:	08009acc 	.word	0x08009acc

08001d2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e243      	b.n	80021c6 <HAL_CAN_Init+0x49a>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a93      	ldr	r2, [pc, #588]	; (8001f90 <HAL_CAN_Init+0x264>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d009      	beq.n	8001d5c <HAL_CAN_Init+0x30>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a91      	ldr	r2, [pc, #580]	; (8001f94 <HAL_CAN_Init+0x268>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d004      	beq.n	8001d5c <HAL_CAN_Init+0x30>
 8001d52:	f240 111d 	movw	r1, #285	; 0x11d
 8001d56:	4890      	ldr	r0, [pc, #576]	; (8001f98 <HAL_CAN_Init+0x26c>)
 8001d58:	f7ff f8cd 	bl	8000ef6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	7e1b      	ldrb	r3, [r3, #24]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <HAL_CAN_Init+0x4a>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7e1b      	ldrb	r3, [r3, #24]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d004      	beq.n	8001d76 <HAL_CAN_Init+0x4a>
 8001d6c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8001d70:	4889      	ldr	r0, [pc, #548]	; (8001f98 <HAL_CAN_Init+0x26c>)
 8001d72:	f7ff f8c0 	bl	8000ef6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7e5b      	ldrb	r3, [r3, #25]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d008      	beq.n	8001d90 <HAL_CAN_Init+0x64>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	7e5b      	ldrb	r3, [r3, #25]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d004      	beq.n	8001d90 <HAL_CAN_Init+0x64>
 8001d86:	f240 111f 	movw	r1, #287	; 0x11f
 8001d8a:	4883      	ldr	r0, [pc, #524]	; (8001f98 <HAL_CAN_Init+0x26c>)
 8001d8c:	f7ff f8b3 	bl	8000ef6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	7e9b      	ldrb	r3, [r3, #26]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_CAN_Init+0x7e>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	7e9b      	ldrb	r3, [r3, #26]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d004      	beq.n	8001daa <HAL_CAN_Init+0x7e>
 8001da0:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001da4:	487c      	ldr	r0, [pc, #496]	; (8001f98 <HAL_CAN_Init+0x26c>)
 8001da6:	f7ff f8a6 	bl	8000ef6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7edb      	ldrb	r3, [r3, #27]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d008      	beq.n	8001dc4 <HAL_CAN_Init+0x98>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	7edb      	ldrb	r3, [r3, #27]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d004      	beq.n	8001dc4 <HAL_CAN_Init+0x98>
 8001dba:	f240 1121 	movw	r1, #289	; 0x121
 8001dbe:	4876      	ldr	r0, [pc, #472]	; (8001f98 <HAL_CAN_Init+0x26c>)
 8001dc0:	f7ff f899 	bl	8000ef6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	7f1b      	ldrb	r3, [r3, #28]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_CAN_Init+0xb2>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	7f1b      	ldrb	r3, [r3, #28]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d004      	beq.n	8001dde <HAL_CAN_Init+0xb2>
 8001dd4:	f44f 7191 	mov.w	r1, #290	; 0x122
 8001dd8:	486f      	ldr	r0, [pc, #444]	; (8001f98 <HAL_CAN_Init+0x26c>)
 8001dda:	f7ff f88c 	bl	8000ef6 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	7f5b      	ldrb	r3, [r3, #29]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d008      	beq.n	8001df8 <HAL_CAN_Init+0xcc>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	7f5b      	ldrb	r3, [r3, #29]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d004      	beq.n	8001df8 <HAL_CAN_Init+0xcc>
 8001dee:	f240 1123 	movw	r1, #291	; 0x123
 8001df2:	4869      	ldr	r0, [pc, #420]	; (8001f98 <HAL_CAN_Init+0x26c>)
 8001df4:	f7ff f87f 	bl	8000ef6 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d013      	beq.n	8001e28 <HAL_CAN_Init+0xfc>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e08:	d00e      	beq.n	8001e28 <HAL_CAN_Init+0xfc>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e12:	d009      	beq.n	8001e28 <HAL_CAN_Init+0xfc>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001e1c:	d004      	beq.n	8001e28 <HAL_CAN_Init+0xfc>
 8001e1e:	f44f 7192 	mov.w	r1, #292	; 0x124
 8001e22:	485d      	ldr	r0, [pc, #372]	; (8001f98 <HAL_CAN_Init+0x26c>)
 8001e24:	f7ff f867 	bl	8000ef6 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d013      	beq.n	8001e58 <HAL_CAN_Init+0x12c>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e38:	d00e      	beq.n	8001e58 <HAL_CAN_Init+0x12c>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e42:	d009      	beq.n	8001e58 <HAL_CAN_Init+0x12c>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e4c:	d004      	beq.n	8001e58 <HAL_CAN_Init+0x12c>
 8001e4e:	f240 1125 	movw	r1, #293	; 0x125
 8001e52:	4851      	ldr	r0, [pc, #324]	; (8001f98 <HAL_CAN_Init+0x26c>)
 8001e54:	f7ff f84f 	bl	8000ef6 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d04f      	beq.n	8001f00 <HAL_CAN_Init+0x1d4>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e68:	d04a      	beq.n	8001f00 <HAL_CAN_Init+0x1d4>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e72:	d045      	beq.n	8001f00 <HAL_CAN_Init+0x1d4>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e7c:	d040      	beq.n	8001f00 <HAL_CAN_Init+0x1d4>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e86:	d03b      	beq.n	8001f00 <HAL_CAN_Init+0x1d4>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e90:	d036      	beq.n	8001f00 <HAL_CAN_Init+0x1d4>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8001e9a:	d031      	beq.n	8001f00 <HAL_CAN_Init+0x1d4>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8001ea4:	d02c      	beq.n	8001f00 <HAL_CAN_Init+0x1d4>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001eae:	d027      	beq.n	8001f00 <HAL_CAN_Init+0x1d4>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8001eb8:	d022      	beq.n	8001f00 <HAL_CAN_Init+0x1d4>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8001ec2:	d01d      	beq.n	8001f00 <HAL_CAN_Init+0x1d4>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8001ecc:	d018      	beq.n	8001f00 <HAL_CAN_Init+0x1d4>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001ed6:	d013      	beq.n	8001f00 <HAL_CAN_Init+0x1d4>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8001ee0:	d00e      	beq.n	8001f00 <HAL_CAN_Init+0x1d4>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001eea:	d009      	beq.n	8001f00 <HAL_CAN_Init+0x1d4>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8001ef4:	d004      	beq.n	8001f00 <HAL_CAN_Init+0x1d4>
 8001ef6:	f44f 7193 	mov.w	r1, #294	; 0x126
 8001efa:	4827      	ldr	r0, [pc, #156]	; (8001f98 <HAL_CAN_Init+0x26c>)
 8001efc:	f7fe fffb 	bl	8000ef6 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d027      	beq.n	8001f58 <HAL_CAN_Init+0x22c>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f10:	d022      	beq.n	8001f58 <HAL_CAN_Init+0x22c>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f1a:	d01d      	beq.n	8001f58 <HAL_CAN_Init+0x22c>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001f24:	d018      	beq.n	8001f58 <HAL_CAN_Init+0x22c>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f2e:	d013      	beq.n	8001f58 <HAL_CAN_Init+0x22c>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8001f38:	d00e      	beq.n	8001f58 <HAL_CAN_Init+0x22c>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001f42:	d009      	beq.n	8001f58 <HAL_CAN_Init+0x22c>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8001f4c:	d004      	beq.n	8001f58 <HAL_CAN_Init+0x22c>
 8001f4e:	f240 1127 	movw	r1, #295	; 0x127
 8001f52:	4811      	ldr	r0, [pc, #68]	; (8001f98 <HAL_CAN_Init+0x26c>)
 8001f54:	f7fe ffcf 	bl	8000ef6 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d004      	beq.n	8001f6a <HAL_CAN_Init+0x23e>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f68:	d904      	bls.n	8001f74 <HAL_CAN_Init+0x248>
 8001f6a:	f44f 7194 	mov.w	r1, #296	; 0x128
 8001f6e:	480a      	ldr	r0, [pc, #40]	; (8001f98 <HAL_CAN_Init+0x26c>)
 8001f70:	f7fe ffc1 	bl	8000ef6 <assert_failed>

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d13d      	bne.n	8001ffc <HAL_CAN_Init+0x2d0>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a06      	ldr	r2, [pc, #24]	; (8001f9c <HAL_CAN_Init+0x270>)
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a05      	ldr	r2, [pc, #20]	; (8001fa0 <HAL_CAN_Init+0x274>)
 8001f8a:	645a      	str	r2, [r3, #68]	; 0x44
 8001f8c:	e00a      	b.n	8001fa4 <HAL_CAN_Init+0x278>
 8001f8e:	bf00      	nop
 8001f90:	40006400 	.word	0x40006400
 8001f94:	40006800 	.word	0x40006800
 8001f98:	08009b04 	.word	0x08009b04
 8001f9c:	08002603 	.word	0x08002603
 8001fa0:	08002617 	.word	0x08002617
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a8a      	ldr	r2, [pc, #552]	; (80021d0 <HAL_CAN_Init+0x4a4>)
 8001fa8:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a89      	ldr	r2, [pc, #548]	; (80021d4 <HAL_CAN_Init+0x4a8>)
 8001fae:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a89      	ldr	r2, [pc, #548]	; (80021d8 <HAL_CAN_Init+0x4ac>)
 8001fb4:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a88      	ldr	r2, [pc, #544]	; (80021dc <HAL_CAN_Init+0x4b0>)
 8001fba:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a88      	ldr	r2, [pc, #544]	; (80021e0 <HAL_CAN_Init+0x4b4>)
 8001fc0:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a87      	ldr	r2, [pc, #540]	; (80021e4 <HAL_CAN_Init+0x4b8>)
 8001fc6:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a87      	ldr	r2, [pc, #540]	; (80021e8 <HAL_CAN_Init+0x4bc>)
 8001fcc:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a86      	ldr	r2, [pc, #536]	; (80021ec <HAL_CAN_Init+0x4c0>)
 8001fd2:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a86      	ldr	r2, [pc, #536]	; (80021f0 <HAL_CAN_Init+0x4c4>)
 8001fd8:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a85      	ldr	r2, [pc, #532]	; (80021f4 <HAL_CAN_Init+0x4c8>)
 8001fde:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a85      	ldr	r2, [pc, #532]	; (80021f8 <HAL_CAN_Init+0x4cc>)
 8001fe4:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d102      	bne.n	8001ff4 <HAL_CAN_Init+0x2c8>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a82      	ldr	r2, [pc, #520]	; (80021fc <HAL_CAN_Init+0x4d0>)
 8001ff2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0201 	orr.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800200c:	f7ff fa96 	bl	800153c <HAL_GetTick>
 8002010:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002012:	e012      	b.n	800203a <HAL_CAN_Init+0x30e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002014:	f7ff fa92 	bl	800153c <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b0a      	cmp	r3, #10
 8002020:	d90b      	bls.n	800203a <HAL_CAN_Init+0x30e>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2205      	movs	r2, #5
 8002032:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e0c5      	b.n	80021c6 <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0e5      	beq.n	8002014 <HAL_CAN_Init+0x2e8>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0202 	bic.w	r2, r2, #2
 8002056:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002058:	f7ff fa70 	bl	800153c <HAL_GetTick>
 800205c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800205e:	e012      	b.n	8002086 <HAL_CAN_Init+0x35a>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002060:	f7ff fa6c 	bl	800153c <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b0a      	cmp	r3, #10
 800206c:	d90b      	bls.n	8002086 <HAL_CAN_Init+0x35a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2205      	movs	r2, #5
 800207e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e09f      	b.n	80021c6 <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1e5      	bne.n	8002060 <HAL_CAN_Init+0x334>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	7e1b      	ldrb	r3, [r3, #24]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d108      	bne.n	80020ae <HAL_CAN_Init+0x382>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	e007      	b.n	80020be <HAL_CAN_Init+0x392>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	7e5b      	ldrb	r3, [r3, #25]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d108      	bne.n	80020d8 <HAL_CAN_Init+0x3ac>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	e007      	b.n	80020e8 <HAL_CAN_Init+0x3bc>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7e9b      	ldrb	r3, [r3, #26]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d108      	bne.n	8002102 <HAL_CAN_Init+0x3d6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0220 	orr.w	r2, r2, #32
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	e007      	b.n	8002112 <HAL_CAN_Init+0x3e6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0220 	bic.w	r2, r2, #32
 8002110:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7edb      	ldrb	r3, [r3, #27]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d108      	bne.n	800212c <HAL_CAN_Init+0x400>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0210 	bic.w	r2, r2, #16
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	e007      	b.n	800213c <HAL_CAN_Init+0x410>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0210 	orr.w	r2, r2, #16
 800213a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	7f1b      	ldrb	r3, [r3, #28]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d108      	bne.n	8002156 <HAL_CAN_Init+0x42a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0208 	orr.w	r2, r2, #8
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e007      	b.n	8002166 <HAL_CAN_Init+0x43a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0208 	bic.w	r2, r2, #8
 8002164:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	7f5b      	ldrb	r3, [r3, #29]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d108      	bne.n	8002180 <HAL_CAN_Init+0x454>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0204 	orr.w	r2, r2, #4
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	e007      	b.n	8002190 <HAL_CAN_Init+0x464>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0204 	bic.w	r2, r2, #4
 800218e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	ea42 0103 	orr.w	r1, r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	1e5a      	subs	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	0800262b 	.word	0x0800262b
 80021d4:	0800263f 	.word	0x0800263f
 80021d8:	0800258b 	.word	0x0800258b
 80021dc:	0800259f 	.word	0x0800259f
 80021e0:	080025b3 	.word	0x080025b3
 80021e4:	080025c7 	.word	0x080025c7
 80021e8:	080025db 	.word	0x080025db
 80021ec:	080025ef 	.word	0x080025ef
 80021f0:	08002653 	.word	0x08002653
 80021f4:	08002667 	.word	0x08002667
 80021f8:	0800267b 	.word	0x0800267b
 80021fc:	0800080d 	.word	0x0800080d

08002200 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002208:	2300      	movs	r3, #0
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 8083 	beq.w	800234e <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d025      	beq.n	800229e <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2201      	movs	r2, #1
 8002258:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d004      	beq.n	800226e <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
 800226c:	e017      	b.n	800229e <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d004      	beq.n	8002282 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
 8002280:	e00d      	b.n	800229e <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d004      	beq.n	8002296 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
 8002294:	e003      	b.n	800229e <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d026      	beq.n	80022f6 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d004      	beq.n	80022c6 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	4798      	blx	r3
 80022c4:	e017      	b.n	80022f6 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d004      	beq.n	80022da <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
 80022d8:	e00d      	b.n	80022f6 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d004      	beq.n	80022ee <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
 80022ec:	e003      	b.n	80022f6 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d026      	beq.n	800234e <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002308:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d004      	beq.n	800231e <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	4798      	blx	r3
 800231c:	e017      	b.n	800234e <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d004      	beq.n	8002332 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
 8002330:	e00d      	b.n	800234e <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d004      	beq.n	8002346 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
 8002344:	e003      	b.n	800234e <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00c      	beq.n	8002372 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002368:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2210      	movs	r2, #16
 8002370:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00c      	beq.n	8002396 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f003 0308 	and.w	r3, r3, #8
 8002382:	2b00      	cmp	r3, #0
 8002384:	d007      	beq.n	8002396 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2208      	movs	r2, #8
 800238c:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00c      	beq.n	80023da <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2210      	movs	r2, #16
 80023d8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00c      	beq.n	80023fe <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d007      	beq.n	80023fe <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2208      	movs	r2, #8
 80023f4:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00c      	beq.n	8002442 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2210      	movs	r2, #16
 8002438:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00c      	beq.n	8002466 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d007      	beq.n	8002466 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2208      	movs	r2, #8
 800245c:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d07b      	beq.n	8002568 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d072      	beq.n	8002560 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	f043 0302 	orr.w	r3, r3, #2
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	f043 0304 	orr.w	r3, r3, #4
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d043      	beq.n	8002560 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d03e      	beq.n	8002560 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024e8:	2b60      	cmp	r3, #96	; 0x60
 80024ea:	d02b      	beq.n	8002544 <HAL_CAN_IRQHandler+0x344>
 80024ec:	2b60      	cmp	r3, #96	; 0x60
 80024ee:	d82e      	bhi.n	800254e <HAL_CAN_IRQHandler+0x34e>
 80024f0:	2b50      	cmp	r3, #80	; 0x50
 80024f2:	d022      	beq.n	800253a <HAL_CAN_IRQHandler+0x33a>
 80024f4:	2b50      	cmp	r3, #80	; 0x50
 80024f6:	d82a      	bhi.n	800254e <HAL_CAN_IRQHandler+0x34e>
 80024f8:	2b40      	cmp	r3, #64	; 0x40
 80024fa:	d019      	beq.n	8002530 <HAL_CAN_IRQHandler+0x330>
 80024fc:	2b40      	cmp	r3, #64	; 0x40
 80024fe:	d826      	bhi.n	800254e <HAL_CAN_IRQHandler+0x34e>
 8002500:	2b30      	cmp	r3, #48	; 0x30
 8002502:	d010      	beq.n	8002526 <HAL_CAN_IRQHandler+0x326>
 8002504:	2b30      	cmp	r3, #48	; 0x30
 8002506:	d822      	bhi.n	800254e <HAL_CAN_IRQHandler+0x34e>
 8002508:	2b10      	cmp	r3, #16
 800250a:	d002      	beq.n	8002512 <HAL_CAN_IRQHandler+0x312>
 800250c:	2b20      	cmp	r3, #32
 800250e:	d005      	beq.n	800251c <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002510:	e01d      	b.n	800254e <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	f043 0308 	orr.w	r3, r3, #8
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800251a:	e019      	b.n	8002550 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	f043 0310 	orr.w	r3, r3, #16
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002524:	e014      	b.n	8002550 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	f043 0320 	orr.w	r3, r3, #32
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800252e:	e00f      	b.n	8002550 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002538:	e00a      	b.n	8002550 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002542:	e005      	b.n	8002550 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800254c:	e000      	b.n	8002550 <HAL_CAN_IRQHandler+0x350>
            break;
 800254e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699a      	ldr	r2, [r3, #24]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800255e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2204      	movs	r2, #4
 8002566:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002582:	bf00      	nop
 8002584:	3728      	adds	r7, #40	; 0x28
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026ac:	4013      	ands	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026c2:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	60d3      	str	r3, [r2, #12]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026dc:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <__NVIC_GetPriorityGrouping+0x18>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	f003 0307 	and.w	r3, r3, #7
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	2b00      	cmp	r3, #0
 8002704:	db0b      	blt.n	800271e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	f003 021f 	and.w	r2, r3, #31
 800270c:	4907      	ldr	r1, [pc, #28]	; (800272c <__NVIC_EnableIRQ+0x38>)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	2001      	movs	r0, #1
 8002716:	fa00 f202 	lsl.w	r2, r0, r2
 800271a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000e100 	.word	0xe000e100

08002730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	6039      	str	r1, [r7, #0]
 800273a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002740:	2b00      	cmp	r3, #0
 8002742:	db0a      	blt.n	800275a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	490c      	ldr	r1, [pc, #48]	; (800277c <__NVIC_SetPriority+0x4c>)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	0112      	lsls	r2, r2, #4
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	440b      	add	r3, r1
 8002754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002758:	e00a      	b.n	8002770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	b2da      	uxtb	r2, r3
 800275e:	4908      	ldr	r1, [pc, #32]	; (8002780 <__NVIC_SetPriority+0x50>)
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	3b04      	subs	r3, #4
 8002768:	0112      	lsls	r2, r2, #4
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	440b      	add	r3, r1
 800276e:	761a      	strb	r2, [r3, #24]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000e100 	.word	0xe000e100
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	; 0x24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f1c3 0307 	rsb	r3, r3, #7
 800279e:	2b04      	cmp	r3, #4
 80027a0:	bf28      	it	cs
 80027a2:	2304      	movcs	r3, #4
 80027a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3304      	adds	r3, #4
 80027aa:	2b06      	cmp	r3, #6
 80027ac:	d902      	bls.n	80027b4 <NVIC_EncodePriority+0x30>
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3b03      	subs	r3, #3
 80027b2:	e000      	b.n	80027b6 <NVIC_EncodePriority+0x32>
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	f04f 32ff 	mov.w	r2, #4294967295
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43da      	mvns	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	401a      	ands	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027cc:	f04f 31ff 	mov.w	r1, #4294967295
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fa01 f303 	lsl.w	r3, r1, r3
 80027d6:	43d9      	mvns	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027dc:	4313      	orrs	r3, r2
         );
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3724      	adds	r7, #36	; 0x24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b07      	cmp	r3, #7
 80027f8:	d00f      	beq.n	800281a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b06      	cmp	r3, #6
 80027fe:	d00c      	beq.n	800281a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b05      	cmp	r3, #5
 8002804:	d009      	beq.n	800281a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b04      	cmp	r3, #4
 800280a:	d006      	beq.n	800281a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b03      	cmp	r3, #3
 8002810:	d003      	beq.n	800281a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002812:	2190      	movs	r1, #144	; 0x90
 8002814:	4804      	ldr	r0, [pc, #16]	; (8002828 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002816:	f7fe fb6e 	bl	8000ef6 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff ff38 	bl	8002690 <__NVIC_SetPriorityGrouping>
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	08009b3c 	.word	0x08009b3c

0800282c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b0f      	cmp	r3, #15
 8002842:	d903      	bls.n	800284c <HAL_NVIC_SetPriority+0x20>
 8002844:	21a8      	movs	r1, #168	; 0xa8
 8002846:	480e      	ldr	r0, [pc, #56]	; (8002880 <HAL_NVIC_SetPriority+0x54>)
 8002848:	f7fe fb55 	bl	8000ef6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b0f      	cmp	r3, #15
 8002850:	d903      	bls.n	800285a <HAL_NVIC_SetPriority+0x2e>
 8002852:	21a9      	movs	r1, #169	; 0xa9
 8002854:	480a      	ldr	r0, [pc, #40]	; (8002880 <HAL_NVIC_SetPriority+0x54>)
 8002856:	f7fe fb4e 	bl	8000ef6 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800285a:	f7ff ff3d 	bl	80026d8 <__NVIC_GetPriorityGrouping>
 800285e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	68b9      	ldr	r1, [r7, #8]
 8002864:	6978      	ldr	r0, [r7, #20]
 8002866:	f7ff ff8d 	bl	8002784 <NVIC_EncodePriority>
 800286a:	4602      	mov	r2, r0
 800286c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002870:	4611      	mov	r1, r2
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff ff5c 	bl	8002730 <__NVIC_SetPriority>
}
 8002878:	bf00      	nop
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	08009b3c 	.word	0x08009b3c

08002884 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	2b00      	cmp	r3, #0
 8002894:	da03      	bge.n	800289e <HAL_NVIC_EnableIRQ+0x1a>
 8002896:	21bc      	movs	r1, #188	; 0xbc
 8002898:	4805      	ldr	r0, [pc, #20]	; (80028b0 <HAL_NVIC_EnableIRQ+0x2c>)
 800289a:	f7fe fb2c 	bl	8000ef6 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff ff26 	bl	80026f4 <__NVIC_EnableIRQ>
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	08009b3c 	.word	0x08009b3c

080028b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028c0:	f7fe fe3c 	bl	800153c <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e203      	b.n	8002cd8 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a8b      	ldr	r2, [pc, #556]	; (8002b04 <HAL_DMA_Init+0x250>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d04e      	beq.n	8002978 <HAL_DMA_Init+0xc4>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a8a      	ldr	r2, [pc, #552]	; (8002b08 <HAL_DMA_Init+0x254>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d049      	beq.n	8002978 <HAL_DMA_Init+0xc4>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a88      	ldr	r2, [pc, #544]	; (8002b0c <HAL_DMA_Init+0x258>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d044      	beq.n	8002978 <HAL_DMA_Init+0xc4>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a87      	ldr	r2, [pc, #540]	; (8002b10 <HAL_DMA_Init+0x25c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d03f      	beq.n	8002978 <HAL_DMA_Init+0xc4>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a85      	ldr	r2, [pc, #532]	; (8002b14 <HAL_DMA_Init+0x260>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d03a      	beq.n	8002978 <HAL_DMA_Init+0xc4>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a84      	ldr	r2, [pc, #528]	; (8002b18 <HAL_DMA_Init+0x264>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d035      	beq.n	8002978 <HAL_DMA_Init+0xc4>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a82      	ldr	r2, [pc, #520]	; (8002b1c <HAL_DMA_Init+0x268>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d030      	beq.n	8002978 <HAL_DMA_Init+0xc4>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a81      	ldr	r2, [pc, #516]	; (8002b20 <HAL_DMA_Init+0x26c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d02b      	beq.n	8002978 <HAL_DMA_Init+0xc4>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a7f      	ldr	r2, [pc, #508]	; (8002b24 <HAL_DMA_Init+0x270>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d026      	beq.n	8002978 <HAL_DMA_Init+0xc4>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a7e      	ldr	r2, [pc, #504]	; (8002b28 <HAL_DMA_Init+0x274>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d021      	beq.n	8002978 <HAL_DMA_Init+0xc4>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a7c      	ldr	r2, [pc, #496]	; (8002b2c <HAL_DMA_Init+0x278>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d01c      	beq.n	8002978 <HAL_DMA_Init+0xc4>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a7b      	ldr	r2, [pc, #492]	; (8002b30 <HAL_DMA_Init+0x27c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d017      	beq.n	8002978 <HAL_DMA_Init+0xc4>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a79      	ldr	r2, [pc, #484]	; (8002b34 <HAL_DMA_Init+0x280>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d012      	beq.n	8002978 <HAL_DMA_Init+0xc4>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a78      	ldr	r2, [pc, #480]	; (8002b38 <HAL_DMA_Init+0x284>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d00d      	beq.n	8002978 <HAL_DMA_Init+0xc4>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a76      	ldr	r2, [pc, #472]	; (8002b3c <HAL_DMA_Init+0x288>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d008      	beq.n	8002978 <HAL_DMA_Init+0xc4>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a75      	ldr	r2, [pc, #468]	; (8002b40 <HAL_DMA_Init+0x28c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d003      	beq.n	8002978 <HAL_DMA_Init+0xc4>
 8002970:	21b7      	movs	r1, #183	; 0xb7
 8002972:	4874      	ldr	r0, [pc, #464]	; (8002b44 <HAL_DMA_Init+0x290>)
 8002974:	f7fe fabf 	bl	8000ef6 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d026      	beq.n	80029ce <HAL_DMA_Init+0x11a>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002988:	d021      	beq.n	80029ce <HAL_DMA_Init+0x11a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002992:	d01c      	beq.n	80029ce <HAL_DMA_Init+0x11a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800299c:	d017      	beq.n	80029ce <HAL_DMA_Init+0x11a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029a6:	d012      	beq.n	80029ce <HAL_DMA_Init+0x11a>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80029b0:	d00d      	beq.n	80029ce <HAL_DMA_Init+0x11a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80029ba:	d008      	beq.n	80029ce <HAL_DMA_Init+0x11a>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80029c4:	d003      	beq.n	80029ce <HAL_DMA_Init+0x11a>
 80029c6:	21b8      	movs	r1, #184	; 0xb8
 80029c8:	485e      	ldr	r0, [pc, #376]	; (8002b44 <HAL_DMA_Init+0x290>)
 80029ca:	f7fe fa94 	bl	8000ef6 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00b      	beq.n	80029ee <HAL_DMA_Init+0x13a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b40      	cmp	r3, #64	; 0x40
 80029dc:	d007      	beq.n	80029ee <HAL_DMA_Init+0x13a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b80      	cmp	r3, #128	; 0x80
 80029e4:	d003      	beq.n	80029ee <HAL_DMA_Init+0x13a>
 80029e6:	21b9      	movs	r1, #185	; 0xb9
 80029e8:	4856      	ldr	r0, [pc, #344]	; (8002b44 <HAL_DMA_Init+0x290>)
 80029ea:	f7fe fa84 	bl	8000ef6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f6:	d007      	beq.n	8002a08 <HAL_DMA_Init+0x154>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_DMA_Init+0x154>
 8002a00:	21ba      	movs	r1, #186	; 0xba
 8002a02:	4850      	ldr	r0, [pc, #320]	; (8002b44 <HAL_DMA_Init+0x290>)
 8002a04:	f7fe fa77 	bl	8000ef6 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a10:	d007      	beq.n	8002a22 <HAL_DMA_Init+0x16e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_DMA_Init+0x16e>
 8002a1a:	21bb      	movs	r1, #187	; 0xbb
 8002a1c:	4849      	ldr	r0, [pc, #292]	; (8002b44 <HAL_DMA_Init+0x290>)
 8002a1e:	f7fe fa6a 	bl	8000ef6 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00d      	beq.n	8002a46 <HAL_DMA_Init+0x192>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a32:	d008      	beq.n	8002a46 <HAL_DMA_Init+0x192>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a3c:	d003      	beq.n	8002a46 <HAL_DMA_Init+0x192>
 8002a3e:	21bc      	movs	r1, #188	; 0xbc
 8002a40:	4840      	ldr	r0, [pc, #256]	; (8002b44 <HAL_DMA_Init+0x290>)
 8002a42:	f7fe fa58 	bl	8000ef6 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00d      	beq.n	8002a6a <HAL_DMA_Init+0x1b6>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a56:	d008      	beq.n	8002a6a <HAL_DMA_Init+0x1b6>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a60:	d003      	beq.n	8002a6a <HAL_DMA_Init+0x1b6>
 8002a62:	21bd      	movs	r1, #189	; 0xbd
 8002a64:	4837      	ldr	r0, [pc, #220]	; (8002b44 <HAL_DMA_Init+0x290>)
 8002a66:	f7fe fa46 	bl	8000ef6 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00c      	beq.n	8002a8c <HAL_DMA_Init+0x1d8>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a7a:	d007      	beq.n	8002a8c <HAL_DMA_Init+0x1d8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	d003      	beq.n	8002a8c <HAL_DMA_Init+0x1d8>
 8002a84:	21be      	movs	r1, #190	; 0xbe
 8002a86:	482f      	ldr	r0, [pc, #188]	; (8002b44 <HAL_DMA_Init+0x290>)
 8002a88:	f7fe fa35 	bl	8000ef6 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d012      	beq.n	8002aba <HAL_DMA_Init+0x206>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9c:	d00d      	beq.n	8002aba <HAL_DMA_Init+0x206>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002aa6:	d008      	beq.n	8002aba <HAL_DMA_Init+0x206>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ab0:	d003      	beq.n	8002aba <HAL_DMA_Init+0x206>
 8002ab2:	21bf      	movs	r1, #191	; 0xbf
 8002ab4:	4823      	ldr	r0, [pc, #140]	; (8002b44 <HAL_DMA_Init+0x290>)
 8002ab6:	f7fe fa1e 	bl	8000ef6 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <HAL_DMA_Init+0x21e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d003      	beq.n	8002ad2 <HAL_DMA_Init+0x21e>
 8002aca:	21c0      	movs	r1, #192	; 0xc0
 8002acc:	481d      	ldr	r0, [pc, #116]	; (8002b44 <HAL_DMA_Init+0x290>)
 8002ace:	f7fe fa12 	bl	8000ef6 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d064      	beq.n	8002ba4 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d032      	beq.n	8002b48 <HAL_DMA_Init+0x294>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d02e      	beq.n	8002b48 <HAL_DMA_Init+0x294>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d02a      	beq.n	8002b48 <HAL_DMA_Init+0x294>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d026      	beq.n	8002b48 <HAL_DMA_Init+0x294>
 8002afa:	21c5      	movs	r1, #197	; 0xc5
 8002afc:	4811      	ldr	r0, [pc, #68]	; (8002b44 <HAL_DMA_Init+0x290>)
 8002afe:	f7fe f9fa 	bl	8000ef6 <assert_failed>
 8002b02:	e021      	b.n	8002b48 <HAL_DMA_Init+0x294>
 8002b04:	40026010 	.word	0x40026010
 8002b08:	40026028 	.word	0x40026028
 8002b0c:	40026040 	.word	0x40026040
 8002b10:	40026058 	.word	0x40026058
 8002b14:	40026070 	.word	0x40026070
 8002b18:	40026088 	.word	0x40026088
 8002b1c:	400260a0 	.word	0x400260a0
 8002b20:	400260b8 	.word	0x400260b8
 8002b24:	40026410 	.word	0x40026410
 8002b28:	40026428 	.word	0x40026428
 8002b2c:	40026440 	.word	0x40026440
 8002b30:	40026458 	.word	0x40026458
 8002b34:	40026470 	.word	0x40026470
 8002b38:	40026488 	.word	0x40026488
 8002b3c:	400264a0 	.word	0x400264a0
 8002b40:	400264b8 	.word	0x400264b8
 8002b44:	08009b78 	.word	0x08009b78
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d012      	beq.n	8002b76 <HAL_DMA_Init+0x2c2>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b58:	d00d      	beq.n	8002b76 <HAL_DMA_Init+0x2c2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b62:	d008      	beq.n	8002b76 <HAL_DMA_Init+0x2c2>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b6c:	d003      	beq.n	8002b76 <HAL_DMA_Init+0x2c2>
 8002b6e:	21c6      	movs	r1, #198	; 0xc6
 8002b70:	485b      	ldr	r0, [pc, #364]	; (8002ce0 <HAL_DMA_Init+0x42c>)
 8002b72:	f7fe f9c0 	bl	8000ef6 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d012      	beq.n	8002ba4 <HAL_DMA_Init+0x2f0>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b86:	d00d      	beq.n	8002ba4 <HAL_DMA_Init+0x2f0>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b90:	d008      	beq.n	8002ba4 <HAL_DMA_Init+0x2f0>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b9a:	d003      	beq.n	8002ba4 <HAL_DMA_Init+0x2f0>
 8002b9c:	21c7      	movs	r1, #199	; 0xc7
 8002b9e:	4850      	ldr	r0, [pc, #320]	; (8002ce0 <HAL_DMA_Init+0x42c>)
 8002ba0:	f7fe f9a9 	bl	8000ef6 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc4:	e00f      	b.n	8002be6 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bc6:	f7fe fcb9 	bl	800153c <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b05      	cmp	r3, #5
 8002bd2:	d908      	bls.n	8002be6 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2203      	movs	r2, #3
 8002bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e078      	b.n	8002cd8 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1e8      	bne.n	8002bc6 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	4b39      	ldr	r3, [pc, #228]	; (8002ce4 <HAL_DMA_Init+0x430>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d107      	bne.n	8002c50 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f023 0307 	bic.w	r3, r3, #7
 8002c66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d117      	bne.n	8002caa <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00e      	beq.n	8002caa <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 fa1b 	bl	80030c8 <DMA_CheckFifoParam>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2240      	movs	r2, #64	; 0x40
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e016      	b.n	8002cd8 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f9d2 	bl	800305c <DMA_CalcBaseAndBitshift>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc0:	223f      	movs	r2, #63	; 0x3f
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	08009b78 	.word	0x08009b78
 8002ce4:	f010803f 	.word	0xf010803f

08002ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d004      	beq.n	8002d06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2280      	movs	r2, #128	; 0x80
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e00c      	b.n	8002d20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2205      	movs	r2, #5
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0201 	bic.w	r2, r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d38:	4b8e      	ldr	r3, [pc, #568]	; (8002f74 <HAL_DMA_IRQHandler+0x248>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a8e      	ldr	r2, [pc, #568]	; (8002f78 <HAL_DMA_IRQHandler+0x24c>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	0a9b      	lsrs	r3, r3, #10
 8002d44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d56:	2208      	movs	r2, #8
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d01a      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d013      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0204 	bic.w	r2, r2, #4
 8002d7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d84:	2208      	movs	r2, #8
 8002d86:	409a      	lsls	r2, r3
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d90:	f043 0201 	orr.w	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d012      	beq.n	8002dce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00b      	beq.n	8002dce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dba:	2201      	movs	r2, #1
 8002dbc:	409a      	lsls	r2, r3
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc6:	f043 0202 	orr.w	r2, r3, #2
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd2:	2204      	movs	r2, #4
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d012      	beq.n	8002e04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00b      	beq.n	8002e04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df0:	2204      	movs	r2, #4
 8002df2:	409a      	lsls	r2, r3
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	f043 0204 	orr.w	r2, r3, #4
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e08:	2210      	movs	r2, #16
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d043      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d03c      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e26:	2210      	movs	r2, #16
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d018      	beq.n	8002e6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d108      	bne.n	8002e5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d024      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	4798      	blx	r3
 8002e5a:	e01f      	b.n	8002e9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d01b      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	4798      	blx	r3
 8002e6c:	e016      	b.n	8002e9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d107      	bne.n	8002e8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0208 	bic.w	r2, r2, #8
 8002e8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 808f 	beq.w	8002fcc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 8087 	beq.w	8002fcc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b05      	cmp	r3, #5
 8002ed4:	d136      	bne.n	8002f44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0216 	bic.w	r2, r2, #22
 8002ee4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695a      	ldr	r2, [r3, #20]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ef4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d103      	bne.n	8002f06 <HAL_DMA_IRQHandler+0x1da>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d007      	beq.n	8002f16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0208 	bic.w	r2, r2, #8
 8002f14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1a:	223f      	movs	r2, #63	; 0x3f
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d07e      	beq.n	8003038 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	4798      	blx	r3
        }
        return;
 8002f42:	e079      	b.n	8003038 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d01d      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10d      	bne.n	8002f7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d031      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4798      	blx	r3
 8002f70:	e02c      	b.n	8002fcc <HAL_DMA_IRQHandler+0x2a0>
 8002f72:	bf00      	nop
 8002f74:	20000000 	.word	0x20000000
 8002f78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d023      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4798      	blx	r3
 8002f8c:	e01e      	b.n	8002fcc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10f      	bne.n	8002fbc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0210 	bic.w	r2, r2, #16
 8002faa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d032      	beq.n	800303a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d022      	beq.n	8003026 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2205      	movs	r2, #5
 8002fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	429a      	cmp	r2, r3
 8003002:	d307      	bcc.n	8003014 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f2      	bne.n	8002ff8 <HAL_DMA_IRQHandler+0x2cc>
 8003012:	e000      	b.n	8003016 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003014:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d005      	beq.n	800303a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	4798      	blx	r3
 8003036:	e000      	b.n	800303a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003038:	bf00      	nop
    }
  }
}
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800304e:	b2db      	uxtb	r3, r3
}
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	3b10      	subs	r3, #16
 800306c:	4a14      	ldr	r2, [pc, #80]	; (80030c0 <DMA_CalcBaseAndBitshift+0x64>)
 800306e:	fba2 2303 	umull	r2, r3, r2, r3
 8003072:	091b      	lsrs	r3, r3, #4
 8003074:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003076:	4a13      	ldr	r2, [pc, #76]	; (80030c4 <DMA_CalcBaseAndBitshift+0x68>)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b03      	cmp	r3, #3
 8003088:	d909      	bls.n	800309e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003092:	f023 0303 	bic.w	r3, r3, #3
 8003096:	1d1a      	adds	r2, r3, #4
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	659a      	str	r2, [r3, #88]	; 0x58
 800309c:	e007      	b.n	80030ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030a6:	f023 0303 	bic.w	r3, r3, #3
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	aaaaaaab 	.word	0xaaaaaaab
 80030c4:	08009d28 	.word	0x08009d28

080030c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d11f      	bne.n	8003122 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d856      	bhi.n	8003196 <DMA_CheckFifoParam+0xce>
 80030e8:	a201      	add	r2, pc, #4	; (adr r2, 80030f0 <DMA_CheckFifoParam+0x28>)
 80030ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ee:	bf00      	nop
 80030f0:	08003101 	.word	0x08003101
 80030f4:	08003113 	.word	0x08003113
 80030f8:	08003101 	.word	0x08003101
 80030fc:	08003197 	.word	0x08003197
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d046      	beq.n	800319a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003110:	e043      	b.n	800319a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800311a:	d140      	bne.n	800319e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003120:	e03d      	b.n	800319e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800312a:	d121      	bne.n	8003170 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b03      	cmp	r3, #3
 8003130:	d837      	bhi.n	80031a2 <DMA_CheckFifoParam+0xda>
 8003132:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <DMA_CheckFifoParam+0x70>)
 8003134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003138:	08003149 	.word	0x08003149
 800313c:	0800314f 	.word	0x0800314f
 8003140:	08003149 	.word	0x08003149
 8003144:	08003161 	.word	0x08003161
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
      break;
 800314c:	e030      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d025      	beq.n	80031a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800315e:	e022      	b.n	80031a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003168:	d11f      	bne.n	80031aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800316e:	e01c      	b.n	80031aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d903      	bls.n	800317e <DMA_CheckFifoParam+0xb6>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b03      	cmp	r3, #3
 800317a:	d003      	beq.n	8003184 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800317c:	e018      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	73fb      	strb	r3, [r7, #15]
      break;
 8003182:	e015      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00e      	beq.n	80031ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
      break;
 8003194:	e00b      	b.n	80031ae <DMA_CheckFifoParam+0xe6>
      break;
 8003196:	bf00      	nop
 8003198:	e00a      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;
 800319a:	bf00      	nop
 800319c:	e008      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;
 800319e:	bf00      	nop
 80031a0:	e006      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;
 80031a2:	bf00      	nop
 80031a4:	e004      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;
 80031a6:	bf00      	nop
 80031a8:	e002      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80031aa:	bf00      	nop
 80031ac:	e000      	b.n	80031b0 <DMA_CheckFifoParam+0xe8>
      break;
 80031ae:	bf00      	nop
    }
  } 
  
  return status; 
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop

080031c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a37      	ldr	r2, [pc, #220]	; (80032b8 <HAL_GPIO_Init+0xf8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01f      	beq.n	800321e <HAL_GPIO_Init+0x5e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a36      	ldr	r2, [pc, #216]	; (80032bc <HAL_GPIO_Init+0xfc>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d01b      	beq.n	800321e <HAL_GPIO_Init+0x5e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a35      	ldr	r2, [pc, #212]	; (80032c0 <HAL_GPIO_Init+0x100>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d017      	beq.n	800321e <HAL_GPIO_Init+0x5e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a34      	ldr	r2, [pc, #208]	; (80032c4 <HAL_GPIO_Init+0x104>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d013      	beq.n	800321e <HAL_GPIO_Init+0x5e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a33      	ldr	r2, [pc, #204]	; (80032c8 <HAL_GPIO_Init+0x108>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d00f      	beq.n	800321e <HAL_GPIO_Init+0x5e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a32      	ldr	r2, [pc, #200]	; (80032cc <HAL_GPIO_Init+0x10c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00b      	beq.n	800321e <HAL_GPIO_Init+0x5e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a31      	ldr	r2, [pc, #196]	; (80032d0 <HAL_GPIO_Init+0x110>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d007      	beq.n	800321e <HAL_GPIO_Init+0x5e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a30      	ldr	r2, [pc, #192]	; (80032d4 <HAL_GPIO_Init+0x114>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d003      	beq.n	800321e <HAL_GPIO_Init+0x5e>
 8003216:	21ac      	movs	r1, #172	; 0xac
 8003218:	482f      	ldr	r0, [pc, #188]	; (80032d8 <HAL_GPIO_Init+0x118>)
 800321a:	f7fd fe6c 	bl	8000ef6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_GPIO_Init+0x74>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	041b      	lsls	r3, r3, #16
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_GPIO_Init+0x7c>
 8003234:	21ad      	movs	r1, #173	; 0xad
 8003236:	4828      	ldr	r0, [pc, #160]	; (80032d8 <HAL_GPIO_Init+0x118>)
 8003238:	f7fd fe5d 	bl	8000ef6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d035      	beq.n	80032b0 <HAL_GPIO_Init+0xf0>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d031      	beq.n	80032b0 <HAL_GPIO_Init+0xf0>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b11      	cmp	r3, #17
 8003252:	d02d      	beq.n	80032b0 <HAL_GPIO_Init+0xf0>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b02      	cmp	r3, #2
 800325a:	d029      	beq.n	80032b0 <HAL_GPIO_Init+0xf0>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b12      	cmp	r3, #18
 8003262:	d025      	beq.n	80032b0 <HAL_GPIO_Init+0xf0>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800326c:	d020      	beq.n	80032b0 <HAL_GPIO_Init+0xf0>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003276:	d01b      	beq.n	80032b0 <HAL_GPIO_Init+0xf0>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8003280:	d016      	beq.n	80032b0 <HAL_GPIO_Init+0xf0>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800328a:	d011      	beq.n	80032b0 <HAL_GPIO_Init+0xf0>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8003294:	d00c      	beq.n	80032b0 <HAL_GPIO_Init+0xf0>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800329e:	d007      	beq.n	80032b0 <HAL_GPIO_Init+0xf0>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_Init+0xf0>
 80032a8:	21ae      	movs	r1, #174	; 0xae
 80032aa:	480b      	ldr	r0, [pc, #44]	; (80032d8 <HAL_GPIO_Init+0x118>)
 80032ac:	f7fd fe23 	bl	8000ef6 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032b0:	2300      	movs	r3, #0
 80032b2:	61fb      	str	r3, [r7, #28]
 80032b4:	e289      	b.n	80037ca <HAL_GPIO_Init+0x60a>
 80032b6:	bf00      	nop
 80032b8:	40020000 	.word	0x40020000
 80032bc:	40020400 	.word	0x40020400
 80032c0:	40020800 	.word	0x40020800
 80032c4:	40020c00 	.word	0x40020c00
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40021400 	.word	0x40021400
 80032d0:	40021800 	.word	0x40021800
 80032d4:	40021c00 	.word	0x40021c00
 80032d8:	08009bb0 	.word	0x08009bb0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032dc:	2201      	movs	r2, #1
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4013      	ands	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	f040 8265 	bne.w	80037c4 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	2b01      	cmp	r3, #1
 8003304:	d005      	beq.n	8003312 <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800330e:	2b02      	cmp	r3, #2
 8003310:	d144      	bne.n	800339c <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00f      	beq.n	800333a <HAL_GPIO_Init+0x17a>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d00b      	beq.n	800333a <HAL_GPIO_Init+0x17a>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d007      	beq.n	800333a <HAL_GPIO_Init+0x17a>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	2b03      	cmp	r3, #3
 8003330:	d003      	beq.n	800333a <HAL_GPIO_Init+0x17a>
 8003332:	21c0      	movs	r1, #192	; 0xc0
 8003334:	4831      	ldr	r0, [pc, #196]	; (80033fc <HAL_GPIO_Init+0x23c>)
 8003336:	f7fd fdde 	bl	8000ef6 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	2203      	movs	r2, #3
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4313      	orrs	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003370:	2201      	movs	r2, #1
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f003 0201 	and.w	r2, r3, #1
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	d02b      	beq.n	8003400 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00b      	beq.n	80033c8 <HAL_GPIO_Init+0x208>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d007      	beq.n	80033c8 <HAL_GPIO_Init+0x208>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x208>
 80033c0:	21d1      	movs	r1, #209	; 0xd1
 80033c2:	480e      	ldr	r0, [pc, #56]	; (80033fc <HAL_GPIO_Init+0x23c>)
 80033c4:	f7fd fd97 	bl	8000ef6 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	2203      	movs	r2, #3
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	60da      	str	r2, [r3, #12]
 80033f8:	e002      	b.n	8003400 <HAL_GPIO_Init+0x240>
 80033fa:	bf00      	nop
 80033fc:	08009bb0 	.word	0x08009bb0
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	2b02      	cmp	r3, #2
 800340a:	f040 810c 	bne.w	8003626 <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 80e3 	beq.w	80035de <HAL_GPIO_Init+0x41e>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	2b09      	cmp	r3, #9
 800341e:	f000 80de 	beq.w	80035de <HAL_GPIO_Init+0x41e>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80d9 	beq.w	80035de <HAL_GPIO_Init+0x41e>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80d4 	beq.w	80035de <HAL_GPIO_Init+0x41e>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 80cf 	beq.w	80035de <HAL_GPIO_Init+0x41e>
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80ca 	beq.w	80035de <HAL_GPIO_Init+0x41e>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b01      	cmp	r3, #1
 8003450:	f000 80c5 	beq.w	80035de <HAL_GPIO_Init+0x41e>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2b01      	cmp	r3, #1
 800345a:	f000 80c0 	beq.w	80035de <HAL_GPIO_Init+0x41e>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	2b02      	cmp	r3, #2
 8003464:	f000 80bb 	beq.w	80035de <HAL_GPIO_Init+0x41e>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	2b02      	cmp	r3, #2
 800346e:	f000 80b6 	beq.w	80035de <HAL_GPIO_Init+0x41e>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b02      	cmp	r3, #2
 8003478:	f000 80b1 	beq.w	80035de <HAL_GPIO_Init+0x41e>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	2b03      	cmp	r3, #3
 8003482:	f000 80ac 	beq.w	80035de <HAL_GPIO_Init+0x41e>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2b04      	cmp	r3, #4
 800348c:	f000 80a7 	beq.w	80035de <HAL_GPIO_Init+0x41e>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b04      	cmp	r3, #4
 8003496:	f000 80a2 	beq.w	80035de <HAL_GPIO_Init+0x41e>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	2b04      	cmp	r3, #4
 80034a0:	f000 809d 	beq.w	80035de <HAL_GPIO_Init+0x41e>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	2b05      	cmp	r3, #5
 80034aa:	f000 8098 	beq.w	80035de <HAL_GPIO_Init+0x41e>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b05      	cmp	r3, #5
 80034b4:	f000 8093 	beq.w	80035de <HAL_GPIO_Init+0x41e>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	2b09      	cmp	r3, #9
 80034be:	f000 808e 	beq.w	80035de <HAL_GPIO_Init+0x41e>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b06      	cmp	r3, #6
 80034c8:	f000 8089 	beq.w	80035de <HAL_GPIO_Init+0x41e>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	2b09      	cmp	r3, #9
 80034d2:	f000 8084 	beq.w	80035de <HAL_GPIO_Init+0x41e>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	2b07      	cmp	r3, #7
 80034dc:	d07f      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	2b07      	cmp	r3, #7
 80034e4:	d07b      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	2b07      	cmp	r3, #7
 80034ec:	d077      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d073      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d06f      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	2b08      	cmp	r3, #8
 8003504:	d06b      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b09      	cmp	r3, #9
 800350c:	d067      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b09      	cmp	r3, #9
 8003514:	d063      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b0a      	cmp	r3, #10
 800351c:	d05f      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	2b0a      	cmp	r3, #10
 8003524:	d05b      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2b0b      	cmp	r3, #11
 800352c:	d057      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	2b0c      	cmp	r3, #12
 8003534:	d053      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	2b0c      	cmp	r3, #12
 800353c:	d04f      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b0d      	cmp	r3, #13
 8003544:	d04b      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b0f      	cmp	r3, #15
 800354c:	d047      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b05      	cmp	r3, #5
 8003554:	d043      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	2b0c      	cmp	r3, #12
 800355c:	d03f      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b06      	cmp	r3, #6
 8003564:	d03b      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	2b03      	cmp	r3, #3
 800356c:	d037      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b04      	cmp	r3, #4
 8003574:	d033      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	2b05      	cmp	r3, #5
 800357c:	d02f      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	2b06      	cmp	r3, #6
 8003584:	d02b      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b06      	cmp	r3, #6
 800358c:	d027      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	2b07      	cmp	r3, #7
 8003594:	d023      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b07      	cmp	r3, #7
 800359c:	d01f      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b07      	cmp	r3, #7
 80035a4:	d01b      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	2b07      	cmp	r3, #7
 80035ac:	d017      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d013      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d00f      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	2b09      	cmp	r3, #9
 80035c4:	d00b      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b0a      	cmp	r3, #10
 80035cc:	d007      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b0a      	cmp	r3, #10
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_Init+0x41e>
 80035d6:	21de      	movs	r1, #222	; 0xde
 80035d8:	4880      	ldr	r0, [pc, #512]	; (80037dc <HAL_GPIO_Init+0x61c>)
 80035da:	f7fd fc8c 	bl	8000ef6 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	08da      	lsrs	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3208      	adds	r2, #8
 80035e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	220f      	movs	r2, #15
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	691a      	ldr	r2, [r3, #16]
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	08da      	lsrs	r2, r3, #3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3208      	adds	r2, #8
 8003620:	69b9      	ldr	r1, [r7, #24]
 8003622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	2203      	movs	r2, #3
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4013      	ands	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 0203 	and.w	r2, r3, #3
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4313      	orrs	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 80ae 	beq.w	80037c4 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	4b5c      	ldr	r3, [pc, #368]	; (80037e0 <HAL_GPIO_Init+0x620>)
 800366e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003670:	4a5b      	ldr	r2, [pc, #364]	; (80037e0 <HAL_GPIO_Init+0x620>)
 8003672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003676:	6453      	str	r3, [r2, #68]	; 0x44
 8003678:	4b59      	ldr	r3, [pc, #356]	; (80037e0 <HAL_GPIO_Init+0x620>)
 800367a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003684:	4a57      	ldr	r2, [pc, #348]	; (80037e4 <HAL_GPIO_Init+0x624>)
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	089b      	lsrs	r3, r3, #2
 800368a:	3302      	adds	r3, #2
 800368c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003690:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	220f      	movs	r2, #15
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4013      	ands	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a4f      	ldr	r2, [pc, #316]	; (80037e8 <HAL_GPIO_Init+0x628>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d025      	beq.n	80036fc <HAL_GPIO_Init+0x53c>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a4e      	ldr	r2, [pc, #312]	; (80037ec <HAL_GPIO_Init+0x62c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d01f      	beq.n	80036f8 <HAL_GPIO_Init+0x538>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a4d      	ldr	r2, [pc, #308]	; (80037f0 <HAL_GPIO_Init+0x630>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d019      	beq.n	80036f4 <HAL_GPIO_Init+0x534>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a4c      	ldr	r2, [pc, #304]	; (80037f4 <HAL_GPIO_Init+0x634>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d013      	beq.n	80036f0 <HAL_GPIO_Init+0x530>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a4b      	ldr	r2, [pc, #300]	; (80037f8 <HAL_GPIO_Init+0x638>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d00d      	beq.n	80036ec <HAL_GPIO_Init+0x52c>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a4a      	ldr	r2, [pc, #296]	; (80037fc <HAL_GPIO_Init+0x63c>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d007      	beq.n	80036e8 <HAL_GPIO_Init+0x528>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a49      	ldr	r2, [pc, #292]	; (8003800 <HAL_GPIO_Init+0x640>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d101      	bne.n	80036e4 <HAL_GPIO_Init+0x524>
 80036e0:	2306      	movs	r3, #6
 80036e2:	e00c      	b.n	80036fe <HAL_GPIO_Init+0x53e>
 80036e4:	2307      	movs	r3, #7
 80036e6:	e00a      	b.n	80036fe <HAL_GPIO_Init+0x53e>
 80036e8:	2305      	movs	r3, #5
 80036ea:	e008      	b.n	80036fe <HAL_GPIO_Init+0x53e>
 80036ec:	2304      	movs	r3, #4
 80036ee:	e006      	b.n	80036fe <HAL_GPIO_Init+0x53e>
 80036f0:	2303      	movs	r3, #3
 80036f2:	e004      	b.n	80036fe <HAL_GPIO_Init+0x53e>
 80036f4:	2302      	movs	r3, #2
 80036f6:	e002      	b.n	80036fe <HAL_GPIO_Init+0x53e>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <HAL_GPIO_Init+0x53e>
 80036fc:	2300      	movs	r3, #0
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	f002 0203 	and.w	r2, r2, #3
 8003704:	0092      	lsls	r2, r2, #2
 8003706:	4093      	lsls	r3, r2
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800370e:	4935      	ldr	r1, [pc, #212]	; (80037e4 <HAL_GPIO_Init+0x624>)
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	089b      	lsrs	r3, r3, #2
 8003714:	3302      	adds	r3, #2
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800371c:	4b39      	ldr	r3, [pc, #228]	; (8003804 <HAL_GPIO_Init+0x644>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	43db      	mvns	r3, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4013      	ands	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003740:	4a30      	ldr	r2, [pc, #192]	; (8003804 <HAL_GPIO_Init+0x644>)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003746:	4b2f      	ldr	r3, [pc, #188]	; (8003804 <HAL_GPIO_Init+0x644>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	43db      	mvns	r3, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4013      	ands	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800376a:	4a26      	ldr	r2, [pc, #152]	; (8003804 <HAL_GPIO_Init+0x644>)
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003770:	4b24      	ldr	r3, [pc, #144]	; (8003804 <HAL_GPIO_Init+0x644>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003794:	4a1b      	ldr	r2, [pc, #108]	; (8003804 <HAL_GPIO_Init+0x644>)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800379a:	4b1a      	ldr	r3, [pc, #104]	; (8003804 <HAL_GPIO_Init+0x644>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	43db      	mvns	r3, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037be:	4a11      	ldr	r2, [pc, #68]	; (8003804 <HAL_GPIO_Init+0x644>)
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	3301      	adds	r3, #1
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	2b0f      	cmp	r3, #15
 80037ce:	f67f ad85 	bls.w	80032dc <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 80037d2:	bf00      	nop
 80037d4:	bf00      	nop
 80037d6:	3720      	adds	r7, #32
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	08009bb0 	.word	0x08009bb0
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40013800 	.word	0x40013800
 80037e8:	40020000 	.word	0x40020000
 80037ec:	40020400 	.word	0x40020400
 80037f0:	40020800 	.word	0x40020800
 80037f4:	40020c00 	.word	0x40020c00
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40021400 	.word	0x40021400
 8003800:	40021800 	.word	0x40021800
 8003804:	40013c00 	.word	0x40013c00

08003808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	460b      	mov	r3, r1
 8003812:	807b      	strh	r3, [r7, #2]
 8003814:	4613      	mov	r3, r2
 8003816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003818:	887b      	ldrh	r3, [r7, #2]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d004      	beq.n	8003828 <HAL_GPIO_WritePin+0x20>
 800381e:	887b      	ldrh	r3, [r7, #2]
 8003820:	0c1b      	lsrs	r3, r3, #16
 8003822:	041b      	lsls	r3, r3, #16
 8003824:	2b00      	cmp	r3, #0
 8003826:	d004      	beq.n	8003832 <HAL_GPIO_WritePin+0x2a>
 8003828:	f240 119d 	movw	r1, #413	; 0x19d
 800382c:	480e      	ldr	r0, [pc, #56]	; (8003868 <HAL_GPIO_WritePin+0x60>)
 800382e:	f7fd fb62 	bl	8000ef6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003832:	787b      	ldrb	r3, [r7, #1]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d007      	beq.n	8003848 <HAL_GPIO_WritePin+0x40>
 8003838:	787b      	ldrb	r3, [r7, #1]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d004      	beq.n	8003848 <HAL_GPIO_WritePin+0x40>
 800383e:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8003842:	4809      	ldr	r0, [pc, #36]	; (8003868 <HAL_GPIO_WritePin+0x60>)
 8003844:	f7fd fb57 	bl	8000ef6 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8003848:	787b      	ldrb	r3, [r7, #1]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800384e:	887a      	ldrh	r2, [r7, #2]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003854:	e003      	b.n	800385e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003856:	887b      	ldrh	r3, [r7, #2]
 8003858:	041a      	lsls	r2, r3, #16
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	619a      	str	r2, [r3, #24]
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	08009bb0 	.word	0x08009bb0

0800386c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e1bd      	b.n	8003bfa <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a93      	ldr	r2, [pc, #588]	; (8003ad0 <HAL_I2C_Init+0x264>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00e      	beq.n	80038a6 <HAL_I2C_Init+0x3a>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a91      	ldr	r2, [pc, #580]	; (8003ad4 <HAL_I2C_Init+0x268>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d009      	beq.n	80038a6 <HAL_I2C_Init+0x3a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a90      	ldr	r2, [pc, #576]	; (8003ad8 <HAL_I2C_Init+0x26c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d004      	beq.n	80038a6 <HAL_I2C_Init+0x3a>
 800389c:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80038a0:	488e      	ldr	r0, [pc, #568]	; (8003adc <HAL_I2C_Init+0x270>)
 80038a2:	f7fd fb28 	bl	8000ef6 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d004      	beq.n	80038b8 <HAL_I2C_Init+0x4c>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	4a8b      	ldr	r2, [pc, #556]	; (8003ae0 <HAL_I2C_Init+0x274>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d904      	bls.n	80038c2 <HAL_I2C_Init+0x56>
 80038b8:	f240 11bf 	movw	r1, #447	; 0x1bf
 80038bc:	4887      	ldr	r0, [pc, #540]	; (8003adc <HAL_I2C_Init+0x270>)
 80038be:	f7fd fb1a 	bl	8000ef6 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d009      	beq.n	80038de <HAL_I2C_Init+0x72>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038d2:	d004      	beq.n	80038de <HAL_I2C_Init+0x72>
 80038d4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80038d8:	4880      	ldr	r0, [pc, #512]	; (8003adc <HAL_I2C_Init+0x270>)
 80038da:	f7fd fb0c 	bl	8000ef6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038e6:	f023 0303 	bic.w	r3, r3, #3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d004      	beq.n	80038f8 <HAL_I2C_Init+0x8c>
 80038ee:	f240 11c1 	movw	r1, #449	; 0x1c1
 80038f2:	487a      	ldr	r0, [pc, #488]	; (8003adc <HAL_I2C_Init+0x270>)
 80038f4:	f7fd faff 	bl	8000ef6 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003900:	d009      	beq.n	8003916 <HAL_I2C_Init+0xaa>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800390a:	d004      	beq.n	8003916 <HAL_I2C_Init+0xaa>
 800390c:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003910:	4872      	ldr	r0, [pc, #456]	; (8003adc <HAL_I2C_Init+0x270>)
 8003912:	f7fd faf0 	bl	8000ef6 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d008      	beq.n	8003930 <HAL_I2C_Init+0xc4>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d004      	beq.n	8003930 <HAL_I2C_Init+0xc4>
 8003926:	f240 11c3 	movw	r1, #451	; 0x1c3
 800392a:	486c      	ldr	r0, [pc, #432]	; (8003adc <HAL_I2C_Init+0x270>)
 800392c:	f7fd fae3 	bl	8000ef6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003938:	2b00      	cmp	r3, #0
 800393a:	d004      	beq.n	8003946 <HAL_I2C_Init+0xda>
 800393c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8003940:	4866      	ldr	r0, [pc, #408]	; (8003adc <HAL_I2C_Init+0x270>)
 8003942:	f7fd fad8 	bl	8000ef6 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <HAL_I2C_Init+0xf4>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	2b40      	cmp	r3, #64	; 0x40
 8003954:	d004      	beq.n	8003960 <HAL_I2C_Init+0xf4>
 8003956:	f240 11c5 	movw	r1, #453	; 0x1c5
 800395a:	4860      	ldr	r0, [pc, #384]	; (8003adc <HAL_I2C_Init+0x270>)
 800395c:	f7fd facb 	bl	8000ef6 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_I2C_Init+0x10e>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	2b80      	cmp	r3, #128	; 0x80
 800396e:	d004      	beq.n	800397a <HAL_I2C_Init+0x10e>
 8003970:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8003974:	4859      	ldr	r0, [pc, #356]	; (8003adc <HAL_I2C_Init+0x270>)
 8003976:	f7fd fabe 	bl	8000ef6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fd f95a 	bl	8000c48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2224      	movs	r2, #36	; 0x24
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0201 	bic.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039cc:	f002 fe48 	bl	8006660 <HAL_RCC_GetPCLK1Freq>
 80039d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4a43      	ldr	r2, [pc, #268]	; (8003ae4 <HAL_I2C_Init+0x278>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d807      	bhi.n	80039ec <HAL_I2C_Init+0x180>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4a42      	ldr	r2, [pc, #264]	; (8003ae8 <HAL_I2C_Init+0x27c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	bf94      	ite	ls
 80039e4:	2301      	movls	r3, #1
 80039e6:	2300      	movhi	r3, #0
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	e006      	b.n	80039fa <HAL_I2C_Init+0x18e>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4a3f      	ldr	r2, [pc, #252]	; (8003aec <HAL_I2C_Init+0x280>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	bf94      	ite	ls
 80039f4:	2301      	movls	r3, #1
 80039f6:	2300      	movhi	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e0fb      	b.n	8003bfa <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	4a3a      	ldr	r2, [pc, #232]	; (8003af0 <HAL_I2C_Init+0x284>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	0c9b      	lsrs	r3, r3, #18
 8003a0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4a2c      	ldr	r2, [pc, #176]	; (8003ae4 <HAL_I2C_Init+0x278>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d802      	bhi.n	8003a3c <HAL_I2C_Init+0x1d0>
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	e009      	b.n	8003a50 <HAL_I2C_Init+0x1e4>
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	4a2b      	ldr	r2, [pc, #172]	; (8003af4 <HAL_I2C_Init+0x288>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	099b      	lsrs	r3, r3, #6
 8003a4e:	3301      	adds	r3, #1
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6812      	ldr	r2, [r2, #0]
 8003a54:	430b      	orrs	r3, r1
 8003a56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	491e      	ldr	r1, [pc, #120]	; (8003ae4 <HAL_I2C_Init+0x278>)
 8003a6c:	428b      	cmp	r3, r1
 8003a6e:	d819      	bhi.n	8003aa4 <HAL_I2C_Init+0x238>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	1e59      	subs	r1, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a7e:	1c59      	adds	r1, r3, #1
 8003a80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a84:	400b      	ands	r3, r1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <HAL_I2C_Init+0x234>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1e59      	subs	r1, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9e:	e065      	b.n	8003b6c <HAL_I2C_Init+0x300>
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	e063      	b.n	8003b6c <HAL_I2C_Init+0x300>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d125      	bne.n	8003af8 <HAL_I2C_Init+0x28c>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	1e58      	subs	r0, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6859      	ldr	r1, [r3, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	440b      	add	r3, r1
 8003aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003abe:	3301      	adds	r3, #1
 8003ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	e026      	b.n	8003b1e <HAL_I2C_Init+0x2b2>
 8003ad0:	40005400 	.word	0x40005400
 8003ad4:	40005800 	.word	0x40005800
 8003ad8:	40005c00 	.word	0x40005c00
 8003adc:	08009bec 	.word	0x08009bec
 8003ae0:	00061a80 	.word	0x00061a80
 8003ae4:	000186a0 	.word	0x000186a0
 8003ae8:	001e847f 	.word	0x001e847f
 8003aec:	003d08ff 	.word	0x003d08ff
 8003af0:	431bde83 	.word	0x431bde83
 8003af4:	10624dd3 	.word	0x10624dd3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1e58      	subs	r0, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6859      	ldr	r1, [r3, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	0099      	lsls	r1, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b0e:	3301      	adds	r3, #1
 8003b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bf0c      	ite	eq
 8003b18:	2301      	moveq	r3, #1
 8003b1a:	2300      	movne	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_I2C_Init+0x2ba>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e022      	b.n	8003b6c <HAL_I2C_Init+0x300>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10e      	bne.n	8003b4c <HAL_I2C_Init+0x2e0>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1e58      	subs	r0, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6859      	ldr	r1, [r3, #4]
 8003b36:	460b      	mov	r3, r1
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	440b      	add	r3, r1
 8003b3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b40:	3301      	adds	r3, #1
 8003b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b4a:	e00f      	b.n	8003b6c <HAL_I2C_Init+0x300>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	1e58      	subs	r0, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6859      	ldr	r1, [r3, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	0099      	lsls	r1, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b62:	3301      	adds	r3, #1
 8003b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	6809      	ldr	r1, [r1, #0]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69da      	ldr	r2, [r3, #28]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6911      	ldr	r1, [r2, #16]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68d2      	ldr	r2, [r2, #12]
 8003ba6:	4311      	orrs	r1, r2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6812      	ldr	r2, [r2, #0]
 8003bac:	430b      	orrs	r3, r1
 8003bae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695a      	ldr	r2, [r3, #20]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3710      	adds	r7, #16
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop

08003c04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	607a      	str	r2, [r7, #4]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	460b      	mov	r3, r1
 8003c12:	817b      	strh	r3, [r7, #10]
 8003c14:	4613      	mov	r3, r2
 8003c16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c18:	f7fd fc90 	bl	800153c <HAL_GetTick>
 8003c1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	f040 80e0 	bne.w	8003dec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	2319      	movs	r3, #25
 8003c32:	2201      	movs	r2, #1
 8003c34:	4970      	ldr	r1, [pc, #448]	; (8003df8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f002 f8e6 	bl	8005e08 <I2C_WaitOnFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c42:	2302      	movs	r3, #2
 8003c44:	e0d3      	b.n	8003dee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_I2C_Master_Transmit+0x50>
 8003c50:	2302      	movs	r3, #2
 8003c52:	e0cc      	b.n	8003dee <HAL_I2C_Master_Transmit+0x1ea>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d007      	beq.n	8003c7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0201 	orr.w	r2, r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2221      	movs	r2, #33	; 0x21
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2210      	movs	r2, #16
 8003c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	893a      	ldrh	r2, [r7, #8]
 8003caa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4a50      	ldr	r2, [pc, #320]	; (8003dfc <HAL_I2C_Master_Transmit+0x1f8>)
 8003cba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cbc:	8979      	ldrh	r1, [r7, #10]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	6a3a      	ldr	r2, [r7, #32]
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f001 fea8 	bl	8005a18 <I2C_MasterRequestWrite>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e08d      	b.n	8003dee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	613b      	str	r3, [r7, #16]
 8003ce6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ce8:	e066      	b.n	8003db8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	6a39      	ldr	r1, [r7, #32]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f002 f960 	bl	8005fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00d      	beq.n	8003d16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d107      	bne.n	8003d12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e06b      	b.n	8003dee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	781a      	ldrb	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d11b      	bne.n	8003d8c <HAL_I2C_Master_Transmit+0x188>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d017      	beq.n	8003d8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	781a      	ldrb	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	6a39      	ldr	r1, [r7, #32]
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f002 f950 	bl	8006036 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00d      	beq.n	8003db8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d107      	bne.n	8003db4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003db2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e01a      	b.n	8003dee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d194      	bne.n	8003cea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	e000      	b.n	8003dee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003dec:	2302      	movs	r3, #2
  }
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	00100002 	.word	0x00100002
 8003dfc:	ffff0000 	.word	0xffff0000

08003e00 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08c      	sub	sp, #48	; 0x30
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	817b      	strh	r3, [r7, #10]
 8003e10:	4613      	mov	r3, r2
 8003e12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e14:	f7fd fb92 	bl	800153c <HAL_GetTick>
 8003e18:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b20      	cmp	r3, #32
 8003e24:	f040 820b 	bne.w	800423e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	2319      	movs	r3, #25
 8003e2e:	2201      	movs	r2, #1
 8003e30:	497c      	ldr	r1, [pc, #496]	; (8004024 <HAL_I2C_Master_Receive+0x224>)
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f001 ffe8 	bl	8005e08 <I2C_WaitOnFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e1fe      	b.n	8004240 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_I2C_Master_Receive+0x50>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e1f7      	b.n	8004240 <HAL_I2C_Master_Receive+0x440>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d007      	beq.n	8003e76 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 0201 	orr.w	r2, r2, #1
 8003e74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2222      	movs	r2, #34	; 0x22
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2210      	movs	r2, #16
 8003e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	893a      	ldrh	r2, [r7, #8]
 8003ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4a5c      	ldr	r2, [pc, #368]	; (8004028 <HAL_I2C_Master_Receive+0x228>)
 8003eb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003eb8:	8979      	ldrh	r1, [r7, #10]
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f001 fe2c 	bl	8005b1c <I2C_MasterRequestRead>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e1b8      	b.n	8004240 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d113      	bne.n	8003efe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	623b      	str	r3, [r7, #32]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	623b      	str	r3, [r7, #32]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	623b      	str	r3, [r7, #32]
 8003eea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	e18c      	b.n	8004218 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d11b      	bne.n	8003f3e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f16:	2300      	movs	r3, #0
 8003f18:	61fb      	str	r3, [r7, #28]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	61fb      	str	r3, [r7, #28]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	e16c      	b.n	8004218 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d11b      	bne.n	8003f7e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f54:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f66:	2300      	movs	r3, #0
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	61bb      	str	r3, [r7, #24]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	61bb      	str	r3, [r7, #24]
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	e14c      	b.n	8004218 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003fa4:	e138      	b.n	8004218 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	f200 80f1 	bhi.w	8004192 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d123      	bne.n	8004000 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f002 f8ad 	bl	800611c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e139      	b.n	8004240 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ffe:	e10b      	b.n	8004218 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004004:	2b02      	cmp	r3, #2
 8004006:	d14e      	bne.n	80040a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400e:	2200      	movs	r2, #0
 8004010:	4906      	ldr	r1, [pc, #24]	; (800402c <HAL_I2C_Master_Receive+0x22c>)
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f001 fef8 	bl	8005e08 <I2C_WaitOnFlagUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e10e      	b.n	8004240 <HAL_I2C_Master_Receive+0x440>
 8004022:	bf00      	nop
 8004024:	00100002 	.word	0x00100002
 8004028:	ffff0000 	.word	0xffff0000
 800402c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	1c5a      	adds	r2, r3, #1
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040a4:	e0b8      	b.n	8004218 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ac:	2200      	movs	r2, #0
 80040ae:	4966      	ldr	r1, [pc, #408]	; (8004248 <HAL_I2C_Master_Receive+0x448>)
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f001 fea9 	bl	8005e08 <I2C_WaitOnFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0bf      	b.n	8004240 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	3b01      	subs	r3, #1
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	2200      	movs	r2, #0
 800410a:	494f      	ldr	r1, [pc, #316]	; (8004248 <HAL_I2C_Master_Receive+0x448>)
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f001 fe7b 	bl	8005e08 <I2C_WaitOnFlagUntilTimeout>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e091      	b.n	8004240 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004190:	e042      	b.n	8004218 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004194:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f001 ffc0 	bl	800611c <I2C_WaitOnRXNEFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e04c      	b.n	8004240 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d118      	bne.n	8004218 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421c:	2b00      	cmp	r3, #0
 800421e:	f47f aec2 	bne.w	8003fa6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	e000      	b.n	8004240 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800423e:	2302      	movs	r3, #2
  }
}
 8004240:	4618      	mov	r0, r3
 8004242:	3728      	adds	r7, #40	; 0x28
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	00010004 	.word	0x00010004

0800424c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800426c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004274:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	2b10      	cmp	r3, #16
 800427a:	d003      	beq.n	8004284 <HAL_I2C_EV_IRQHandler+0x38>
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	2b40      	cmp	r3, #64	; 0x40
 8004280:	f040 80c1 	bne.w	8004406 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10d      	bne.n	80042ba <HAL_I2C_EV_IRQHandler+0x6e>
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80042a4:	d003      	beq.n	80042ae <HAL_I2C_EV_IRQHandler+0x62>
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80042ac:	d101      	bne.n	80042b2 <HAL_I2C_EV_IRQHandler+0x66>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <HAL_I2C_EV_IRQHandler+0x68>
 80042b2:	2300      	movs	r3, #0
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	f000 8132 	beq.w	800451e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00c      	beq.n	80042de <HAL_I2C_EV_IRQHandler+0x92>
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	0a5b      	lsrs	r3, r3, #9
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d006      	beq.n	80042de <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f001 ffa8 	bl	8006226 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fd83 	bl	8004de2 <I2C_Master_SB>
 80042dc:	e092      	b.n	8004404 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	08db      	lsrs	r3, r3, #3
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <HAL_I2C_EV_IRQHandler+0xb2>
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	0a5b      	lsrs	r3, r3, #9
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fdf9 	bl	8004eee <I2C_Master_ADD10>
 80042fc:	e082      	b.n	8004404 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	085b      	lsrs	r3, r3, #1
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <HAL_I2C_EV_IRQHandler+0xd2>
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	0a5b      	lsrs	r3, r3, #9
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 fe13 	bl	8004f42 <I2C_Master_ADDR>
 800431c:	e072      	b.n	8004404 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	089b      	lsrs	r3, r3, #2
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d03b      	beq.n	80043a2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004338:	f000 80f3 	beq.w	8004522 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	09db      	lsrs	r3, r3, #7
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00f      	beq.n	8004368 <HAL_I2C_EV_IRQHandler+0x11c>
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	0a9b      	lsrs	r3, r3, #10
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d009      	beq.n	8004368 <HAL_I2C_EV_IRQHandler+0x11c>
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	089b      	lsrs	r3, r3, #2
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d103      	bne.n	8004368 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f9f3 	bl	800474c <I2C_MasterTransmit_TXE>
 8004366:	e04d      	b.n	8004404 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	089b      	lsrs	r3, r3, #2
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 80d6 	beq.w	8004522 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	0a5b      	lsrs	r3, r3, #9
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 80cf 	beq.w	8004522 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004384:	7bbb      	ldrb	r3, [r7, #14]
 8004386:	2b21      	cmp	r3, #33	; 0x21
 8004388:	d103      	bne.n	8004392 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fa7a 	bl	8004884 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004390:	e0c7      	b.n	8004522 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004392:	7bfb      	ldrb	r3, [r7, #15]
 8004394:	2b40      	cmp	r3, #64	; 0x40
 8004396:	f040 80c4 	bne.w	8004522 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fae8 	bl	8004970 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043a0:	e0bf      	b.n	8004522 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b0:	f000 80b7 	beq.w	8004522 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	099b      	lsrs	r3, r3, #6
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00f      	beq.n	80043e0 <HAL_I2C_EV_IRQHandler+0x194>
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	0a9b      	lsrs	r3, r3, #10
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d009      	beq.n	80043e0 <HAL_I2C_EV_IRQHandler+0x194>
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	089b      	lsrs	r3, r3, #2
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d103      	bne.n	80043e0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 fb5d 	bl	8004a98 <I2C_MasterReceive_RXNE>
 80043de:	e011      	b.n	8004404 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	089b      	lsrs	r3, r3, #2
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 809a 	beq.w	8004522 <HAL_I2C_EV_IRQHandler+0x2d6>
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	0a5b      	lsrs	r3, r3, #9
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 8093 	beq.w	8004522 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fc06 	bl	8004c0e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004402:	e08e      	b.n	8004522 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004404:	e08d      	b.n	8004522 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	d004      	beq.n	8004418 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	61fb      	str	r3, [r7, #28]
 8004416:	e007      	b.n	8004428 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	085b      	lsrs	r3, r3, #1
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d012      	beq.n	800445a <HAL_I2C_EV_IRQHandler+0x20e>
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	0a5b      	lsrs	r3, r3, #9
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00c      	beq.n	800445a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004450:	69b9      	ldr	r1, [r7, #24]
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 ffc4 	bl	80053e0 <I2C_Slave_ADDR>
 8004458:	e066      	b.n	8004528 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <HAL_I2C_EV_IRQHandler+0x22e>
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	0a5b      	lsrs	r3, r3, #9
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 fffe 	bl	8005474 <I2C_Slave_STOPF>
 8004478:	e056      	b.n	8004528 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800447a:	7bbb      	ldrb	r3, [r7, #14]
 800447c:	2b21      	cmp	r3, #33	; 0x21
 800447e:	d002      	beq.n	8004486 <HAL_I2C_EV_IRQHandler+0x23a>
 8004480:	7bbb      	ldrb	r3, [r7, #14]
 8004482:	2b29      	cmp	r3, #41	; 0x29
 8004484:	d125      	bne.n	80044d2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	09db      	lsrs	r3, r3, #7
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00f      	beq.n	80044b2 <HAL_I2C_EV_IRQHandler+0x266>
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	0a9b      	lsrs	r3, r3, #10
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d009      	beq.n	80044b2 <HAL_I2C_EV_IRQHandler+0x266>
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	089b      	lsrs	r3, r3, #2
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d103      	bne.n	80044b2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 feda 	bl	8005264 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044b0:	e039      	b.n	8004526 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	089b      	lsrs	r3, r3, #2
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d033      	beq.n	8004526 <HAL_I2C_EV_IRQHandler+0x2da>
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	0a5b      	lsrs	r3, r3, #9
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d02d      	beq.n	8004526 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 ff07 	bl	80052de <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044d0:	e029      	b.n	8004526 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	099b      	lsrs	r3, r3, #6
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00f      	beq.n	80044fe <HAL_I2C_EV_IRQHandler+0x2b2>
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	0a9b      	lsrs	r3, r3, #10
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d009      	beq.n	80044fe <HAL_I2C_EV_IRQHandler+0x2b2>
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	089b      	lsrs	r3, r3, #2
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d103      	bne.n	80044fe <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 ff12 	bl	8005320 <I2C_SlaveReceive_RXNE>
 80044fc:	e014      	b.n	8004528 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	089b      	lsrs	r3, r3, #2
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00e      	beq.n	8004528 <HAL_I2C_EV_IRQHandler+0x2dc>
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	0a5b      	lsrs	r3, r3, #9
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b00      	cmp	r3, #0
 8004514:	d008      	beq.n	8004528 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 ff40 	bl	800539c <I2C_SlaveReceive_BTF>
 800451c:	e004      	b.n	8004528 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800451e:	bf00      	nop
 8004520:	e002      	b.n	8004528 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004522:	bf00      	nop
 8004524:	e000      	b.n	8004528 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004526:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b08a      	sub	sp, #40	; 0x28
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004546:	2300      	movs	r3, #0
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004550:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	0a1b      	lsrs	r3, r3, #8
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00e      	beq.n	800457c <HAL_I2C_ER_IRQHandler+0x4e>
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	0a1b      	lsrs	r3, r3, #8
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d008      	beq.n	800457c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	f043 0301 	orr.w	r3, r3, #1
 8004570:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800457a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	0a5b      	lsrs	r3, r3, #9
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00e      	beq.n	80045a6 <HAL_I2C_ER_IRQHandler+0x78>
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	0a1b      	lsrs	r3, r3, #8
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d008      	beq.n	80045a6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	f043 0302 	orr.w	r3, r3, #2
 800459a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80045a4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	0a9b      	lsrs	r3, r3, #10
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d03f      	beq.n	8004632 <HAL_I2C_ER_IRQHandler+0x104>
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	0a1b      	lsrs	r3, r3, #8
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d039      	beq.n	8004632 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80045be:	7efb      	ldrb	r3, [r7, #27]
 80045c0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80045d8:	7ebb      	ldrb	r3, [r7, #26]
 80045da:	2b20      	cmp	r3, #32
 80045dc:	d112      	bne.n	8004604 <HAL_I2C_ER_IRQHandler+0xd6>
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10f      	bne.n	8004604 <HAL_I2C_ER_IRQHandler+0xd6>
 80045e4:	7cfb      	ldrb	r3, [r7, #19]
 80045e6:	2b21      	cmp	r3, #33	; 0x21
 80045e8:	d008      	beq.n	80045fc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80045ea:	7cfb      	ldrb	r3, [r7, #19]
 80045ec:	2b29      	cmp	r3, #41	; 0x29
 80045ee:	d005      	beq.n	80045fc <HAL_I2C_ER_IRQHandler+0xce>
 80045f0:	7cfb      	ldrb	r3, [r7, #19]
 80045f2:	2b28      	cmp	r3, #40	; 0x28
 80045f4:	d106      	bne.n	8004604 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2b21      	cmp	r3, #33	; 0x21
 80045fa:	d103      	bne.n	8004604 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f001 f869 	bl	80056d4 <I2C_Slave_AF>
 8004602:	e016      	b.n	8004632 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800460c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	f043 0304 	orr.w	r3, r3, #4
 8004614:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004616:	7efb      	ldrb	r3, [r7, #27]
 8004618:	2b10      	cmp	r3, #16
 800461a:	d002      	beq.n	8004622 <HAL_I2C_ER_IRQHandler+0xf4>
 800461c:	7efb      	ldrb	r3, [r7, #27]
 800461e:	2b40      	cmp	r3, #64	; 0x40
 8004620:	d107      	bne.n	8004632 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004630:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	0adb      	lsrs	r3, r3, #11
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00e      	beq.n	800465c <HAL_I2C_ER_IRQHandler+0x12e>
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	0a1b      	lsrs	r3, r3, #8
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	f043 0308 	orr.w	r3, r3, #8
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800465a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	2b00      	cmp	r3, #0
 8004660:	d008      	beq.n	8004674 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f001 f8a0 	bl	80057b4 <I2C_ITError>
  }
}
 8004674:	bf00      	nop
 8004676:	3728      	adds	r7, #40	; 0x28
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	460b      	mov	r3, r1
 80046d6:	70fb      	strb	r3, [r7, #3]
 80046d8:	4613      	mov	r3, r2
 80046da:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004762:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476e:	2b00      	cmp	r3, #0
 8004770:	d150      	bne.n	8004814 <I2C_MasterTransmit_TXE+0xc8>
 8004772:	7bfb      	ldrb	r3, [r7, #15]
 8004774:	2b21      	cmp	r3, #33	; 0x21
 8004776:	d14d      	bne.n	8004814 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b08      	cmp	r3, #8
 800477c:	d01d      	beq.n	80047ba <I2C_MasterTransmit_TXE+0x6e>
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2b20      	cmp	r3, #32
 8004782:	d01a      	beq.n	80047ba <I2C_MasterTransmit_TXE+0x6e>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800478a:	d016      	beq.n	80047ba <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800479a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2211      	movs	r2, #17
 80047a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7ff ff62 	bl	800467c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047b8:	e060      	b.n	800487c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047c8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b40      	cmp	r3, #64	; 0x40
 80047f2:	d107      	bne.n	8004804 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff ff7d 	bl	80046fc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004802:	e03b      	b.n	800487c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff ff35 	bl	800467c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004812:	e033      	b.n	800487c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004814:	7bfb      	ldrb	r3, [r7, #15]
 8004816:	2b21      	cmp	r3, #33	; 0x21
 8004818:	d005      	beq.n	8004826 <I2C_MasterTransmit_TXE+0xda>
 800481a:	7bbb      	ldrb	r3, [r7, #14]
 800481c:	2b40      	cmp	r3, #64	; 0x40
 800481e:	d12d      	bne.n	800487c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	2b22      	cmp	r3, #34	; 0x22
 8004824:	d12a      	bne.n	800487c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482a:	b29b      	uxth	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	d108      	bne.n	8004842 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004840:	e01c      	b.n	800487c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	d103      	bne.n	8004856 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f88e 	bl	8004970 <I2C_MemoryTransmit_TXE_BTF>
}
 8004854:	e012      	b.n	800487c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	781a      	ldrb	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800487a:	e7ff      	b.n	800487c <I2C_MasterTransmit_TXE+0x130>
 800487c:	bf00      	nop
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b21      	cmp	r3, #33	; 0x21
 800489c:	d164      	bne.n	8004968 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d012      	beq.n	80048ce <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	781a      	ldrb	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	3b01      	subs	r3, #1
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80048cc:	e04c      	b.n	8004968 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d01d      	beq.n	8004910 <I2C_MasterTransmit_BTF+0x8c>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d01a      	beq.n	8004910 <I2C_MasterTransmit_BTF+0x8c>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048e0:	d016      	beq.n	8004910 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048f0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2211      	movs	r2, #17
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7ff feb7 	bl	800467c <HAL_I2C_MasterTxCpltCallback>
}
 800490e:	e02b      	b.n	8004968 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800491e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b40      	cmp	r3, #64	; 0x40
 8004948:	d107      	bne.n	800495a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff fed2 	bl	80046fc <HAL_I2C_MemTxCpltCallback>
}
 8004958:	e006      	b.n	8004968 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff fe8a 	bl	800467c <HAL_I2C_MasterTxCpltCallback>
}
 8004968:	bf00      	nop
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004984:	2b00      	cmp	r3, #0
 8004986:	d11d      	bne.n	80049c4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498c:	2b01      	cmp	r3, #1
 800498e:	d10b      	bne.n	80049a8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004994:	b2da      	uxtb	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a0:	1c9a      	adds	r2, r3, #2
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80049a6:	e073      	b.n	8004a90 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	121b      	asrs	r3, r3, #8
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80049c2:	e065      	b.n	8004a90 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d10b      	bne.n	80049e4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80049e2:	e055      	b.n	8004a90 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d151      	bne.n	8004a90 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	2b22      	cmp	r3, #34	; 0x22
 80049f0:	d10d      	bne.n	8004a0e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a00:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a0c:	e040      	b.n	8004a90 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d015      	beq.n	8004a44 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	2b21      	cmp	r3, #33	; 0x21
 8004a1c:	d112      	bne.n	8004a44 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	781a      	ldrb	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a42:	e025      	b.n	8004a90 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d120      	bne.n	8004a90 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	2b21      	cmp	r3, #33	; 0x21
 8004a52:	d11d      	bne.n	8004a90 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a62:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a72:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff fe36 	bl	80046fc <HAL_I2C_MemTxCpltCallback>
}
 8004a90:	bf00      	nop
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b22      	cmp	r3, #34	; 0x22
 8004aaa:	f040 80ac 	bne.w	8004c06 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	d921      	bls.n	8004b00 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	2b03      	cmp	r3, #3
 8004aea:	f040 808c 	bne.w	8004c06 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004afc:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004afe:	e082      	b.n	8004c06 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d075      	beq.n	8004bf4 <I2C_MasterReceive_RXNE+0x15c>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d002      	beq.n	8004b14 <I2C_MasterReceive_RXNE+0x7c>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d16f      	bne.n	8004bf4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f001 facf 	bl	80060b8 <I2C_WaitOnSTOPRequestThroughIT>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d142      	bne.n	8004ba6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b3e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691a      	ldr	r2, [r3, #16]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b40      	cmp	r3, #64	; 0x40
 8004b78:	d10a      	bne.n	8004b90 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7ff fdc1 	bl	8004710 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004b8e:	e03a      	b.n	8004c06 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2212      	movs	r2, #18
 8004b9c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff fd76 	bl	8004690 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004ba4:	e02f      	b.n	8004c06 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bb4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	691a      	ldr	r2, [r3, #16]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff fd99 	bl	8004724 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004bf2:	e008      	b.n	8004c06 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c02:	605a      	str	r2, [r3, #4]
}
 8004c04:	e7ff      	b.n	8004c06 <I2C_MasterReceive_RXNE+0x16e>
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b084      	sub	sp, #16
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d11b      	bne.n	8004c5e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c34:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004c5c:	e0bd      	b.n	8004dda <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d129      	bne.n	8004cbc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c76:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d00a      	beq.n	8004c94 <I2C_MasterReceive_BTF+0x86>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d007      	beq.n	8004c94 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c92:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691a      	ldr	r2, [r3, #16]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004cba:	e08e      	b.n	8004dda <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d176      	bne.n	8004db4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d002      	beq.n	8004cd2 <I2C_MasterReceive_BTF+0xc4>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b10      	cmp	r3, #16
 8004cd0:	d108      	bne.n	8004ce4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	e019      	b.n	8004d18 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d002      	beq.n	8004cf0 <I2C_MasterReceive_BTF+0xe2>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d108      	bne.n	8004d02 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	e00a      	b.n	8004d18 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2b10      	cmp	r3, #16
 8004d06:	d007      	beq.n	8004d18 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d16:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691a      	ldr	r2, [r3, #16]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d72:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b40      	cmp	r3, #64	; 0x40
 8004d86:	d10a      	bne.n	8004d9e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7ff fcba 	bl	8004710 <HAL_I2C_MemRxCpltCallback>
}
 8004d9c:	e01d      	b.n	8004dda <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2212      	movs	r2, #18
 8004daa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff fc6f 	bl	8004690 <HAL_I2C_MasterRxCpltCallback>
}
 8004db2:	e012      	b.n	8004dda <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004dda:	bf00      	nop
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b40      	cmp	r3, #64	; 0x40
 8004df4:	d117      	bne.n	8004e26 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d109      	bne.n	8004e12 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	461a      	mov	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e0e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004e10:	e067      	b.n	8004ee2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	f043 0301 	orr.w	r3, r3, #1
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	611a      	str	r2, [r3, #16]
}
 8004e24:	e05d      	b.n	8004ee2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e2e:	d133      	bne.n	8004e98 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b21      	cmp	r3, #33	; 0x21
 8004e3a:	d109      	bne.n	8004e50 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e4c:	611a      	str	r2, [r3, #16]
 8004e4e:	e008      	b.n	8004e62 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	f043 0301 	orr.w	r3, r3, #1
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d004      	beq.n	8004e74 <I2C_Master_SB+0x92>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d108      	bne.n	8004e86 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d032      	beq.n	8004ee2 <I2C_Master_SB+0x100>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d02d      	beq.n	8004ee2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e94:	605a      	str	r2, [r3, #4]
}
 8004e96:	e024      	b.n	8004ee2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10e      	bne.n	8004ebe <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	11db      	asrs	r3, r3, #7
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f003 0306 	and.w	r3, r3, #6
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	f063 030f 	orn	r3, r3, #15
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	611a      	str	r2, [r3, #16]
}
 8004ebc:	e011      	b.n	8004ee2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d10d      	bne.n	8004ee2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	11db      	asrs	r3, r3, #7
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	f003 0306 	and.w	r3, r3, #6
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	f063 030e 	orn	r3, r3, #14
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	611a      	str	r2, [r3, #16]
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d004      	beq.n	8004f14 <I2C_Master_ADD10+0x26>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d108      	bne.n	8004f26 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00c      	beq.n	8004f36 <I2C_Master_ADD10+0x48>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d007      	beq.n	8004f36 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f34:	605a      	str	r2, [r3, #4]
  }
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b091      	sub	sp, #68	; 0x44
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b22      	cmp	r3, #34	; 0x22
 8004f6a:	f040 8169 	bne.w	8005240 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10f      	bne.n	8004f96 <I2C_Master_ADDR+0x54>
 8004f76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f7a:	2b40      	cmp	r3, #64	; 0x40
 8004f7c:	d10b      	bne.n	8004f96 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7e:	2300      	movs	r3, #0
 8004f80:	633b      	str	r3, [r7, #48]	; 0x30
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	633b      	str	r3, [r7, #48]	; 0x30
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	633b      	str	r3, [r7, #48]	; 0x30
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	e160      	b.n	8005258 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d11d      	bne.n	8004fda <I2C_Master_ADDR+0x98>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004fa6:	d118      	bne.n	8004fda <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fa8:	2300      	movs	r3, #0
 8004faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fcc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	651a      	str	r2, [r3, #80]	; 0x50
 8004fd8:	e13e      	b.n	8005258 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d113      	bne.n	800500c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005008:	601a      	str	r2, [r3, #0]
 800500a:	e115      	b.n	8005238 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005010:	b29b      	uxth	r3, r3
 8005012:	2b01      	cmp	r3, #1
 8005014:	f040 808a 	bne.w	800512c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800501e:	d137      	bne.n	8005090 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800502e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800503a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800503e:	d113      	bne.n	8005068 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005050:	2300      	movs	r3, #0
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	627b      	str	r3, [r7, #36]	; 0x24
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	e0e7      	b.n	8005238 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005068:	2300      	movs	r3, #0
 800506a:	623b      	str	r3, [r7, #32]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	623b      	str	r3, [r7, #32]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	623b      	str	r3, [r7, #32]
 800507c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	e0d3      	b.n	8005238 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005092:	2b08      	cmp	r3, #8
 8005094:	d02e      	beq.n	80050f4 <I2C_Master_ADDR+0x1b2>
 8005096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005098:	2b20      	cmp	r3, #32
 800509a:	d02b      	beq.n	80050f4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800509c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509e:	2b12      	cmp	r3, #18
 80050a0:	d102      	bne.n	80050a8 <I2C_Master_ADDR+0x166>
 80050a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d125      	bne.n	80050f4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80050a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	d00e      	beq.n	80050cc <I2C_Master_ADDR+0x18a>
 80050ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d00b      	beq.n	80050cc <I2C_Master_ADDR+0x18a>
 80050b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b6:	2b10      	cmp	r3, #16
 80050b8:	d008      	beq.n	80050cc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	e007      	b.n	80050dc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050da:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050dc:	2300      	movs	r3, #0
 80050de:	61fb      	str	r3, [r7, #28]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	61fb      	str	r3, [r7, #28]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	61fb      	str	r3, [r7, #28]
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	e0a1      	b.n	8005238 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005102:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005104:	2300      	movs	r3, #0
 8005106:	61bb      	str	r3, [r7, #24]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	61bb      	str	r3, [r7, #24]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	61bb      	str	r3, [r7, #24]
 8005118:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	e085      	b.n	8005238 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d14d      	bne.n	80051d2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	2b04      	cmp	r3, #4
 800513a:	d016      	beq.n	800516a <I2C_Master_ADDR+0x228>
 800513c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513e:	2b02      	cmp	r3, #2
 8005140:	d013      	beq.n	800516a <I2C_Master_ADDR+0x228>
 8005142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005144:	2b10      	cmp	r3, #16
 8005146:	d010      	beq.n	800516a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005156:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	e007      	b.n	800517a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005178:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005188:	d117      	bne.n	80051ba <I2C_Master_ADDR+0x278>
 800518a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005190:	d00b      	beq.n	80051aa <I2C_Master_ADDR+0x268>
 8005192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005194:	2b01      	cmp	r3, #1
 8005196:	d008      	beq.n	80051aa <I2C_Master_ADDR+0x268>
 8005198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519a:	2b08      	cmp	r3, #8
 800519c:	d005      	beq.n	80051aa <I2C_Master_ADDR+0x268>
 800519e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d002      	beq.n	80051aa <I2C_Master_ADDR+0x268>
 80051a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	d107      	bne.n	80051ba <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ba:	2300      	movs	r3, #0
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	e032      	b.n	8005238 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051e0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051f0:	d117      	bne.n	8005222 <I2C_Master_ADDR+0x2e0>
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051f8:	d00b      	beq.n	8005212 <I2C_Master_ADDR+0x2d0>
 80051fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d008      	beq.n	8005212 <I2C_Master_ADDR+0x2d0>
 8005200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005202:	2b08      	cmp	r3, #8
 8005204:	d005      	beq.n	8005212 <I2C_Master_ADDR+0x2d0>
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	2b10      	cmp	r3, #16
 800520a:	d002      	beq.n	8005212 <I2C_Master_ADDR+0x2d0>
 800520c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520e:	2b20      	cmp	r3, #32
 8005210:	d107      	bne.n	8005222 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005220:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005222:	2300      	movs	r3, #0
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	613b      	str	r3, [r7, #16]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	613b      	str	r3, [r7, #16]
 8005236:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800523e:	e00b      	b.n	8005258 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005240:	2300      	movs	r3, #0
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
}
 8005256:	e7ff      	b.n	8005258 <I2C_Master_ADDR+0x316>
 8005258:	bf00      	nop
 800525a:	3744      	adds	r7, #68	; 0x44
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005272:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d02b      	beq.n	80052d6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	781a      	ldrb	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005298:	b29b      	uxth	r3, r3
 800529a:	3b01      	subs	r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d114      	bne.n	80052d6 <I2C_SlaveTransmit_TXE+0x72>
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	2b29      	cmp	r3, #41	; 0x29
 80052b0:	d111      	bne.n	80052d6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2221      	movs	r2, #33	; 0x21
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2228      	movs	r2, #40	; 0x28
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff f9e7 	bl	80046a4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80052d6:	bf00      	nop
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d011      	beq.n	8005314 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	781a      	ldrb	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530a:	b29b      	uxth	r3, r3
 800530c:	3b01      	subs	r3, #1
 800530e:	b29a      	uxth	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005334:	b29b      	uxth	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d02c      	beq.n	8005394 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	b2d2      	uxtb	r2, r2
 8005346:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005364:	b29b      	uxth	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d114      	bne.n	8005394 <I2C_SlaveReceive_RXNE+0x74>
 800536a:	7bfb      	ldrb	r3, [r7, #15]
 800536c:	2b2a      	cmp	r3, #42	; 0x2a
 800536e:	d111      	bne.n	8005394 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800537e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2222      	movs	r2, #34	; 0x22
 8005384:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2228      	movs	r2, #40	; 0x28
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7ff f992 	bl	80046b8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005394:	bf00      	nop
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d012      	beq.n	80053d4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	b2d2      	uxtb	r2, r2
 80053ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	3b01      	subs	r3, #1
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80053ea:	2300      	movs	r3, #0
 80053ec:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053fa:	2b28      	cmp	r3, #40	; 0x28
 80053fc:	d127      	bne.n	800544e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800540c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	089b      	lsrs	r3, r3, #2
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800541a:	2301      	movs	r3, #1
 800541c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	09db      	lsrs	r3, r3, #7
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d103      	bne.n	8005432 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	81bb      	strh	r3, [r7, #12]
 8005430:	e002      	b.n	8005438 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005440:	89ba      	ldrh	r2, [r7, #12]
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	4619      	mov	r1, r3
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7ff f940 	bl	80046cc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800544c:	e00e      	b.n	800546c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800544e:	2300      	movs	r3, #0
 8005450:	60bb      	str	r3, [r7, #8]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	60bb      	str	r3, [r7, #8]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	699b      	ldr	r3, [r3, #24]
 8005460:	60bb      	str	r3, [r7, #8]
 8005462:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800546c:	bf00      	nop
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005482:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005492:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005494:	2300      	movs	r3, #0
 8005496:	60bb      	str	r3, [r7, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	60bb      	str	r3, [r7, #8]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054c0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054d0:	d172      	bne.n	80055b8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	2b22      	cmp	r3, #34	; 0x22
 80054d6:	d002      	beq.n	80054de <I2C_Slave_STOPF+0x6a>
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	2b2a      	cmp	r3, #42	; 0x2a
 80054dc:	d135      	bne.n	800554a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d005      	beq.n	8005502 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	f043 0204 	orr.w	r2, r3, #4
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005510:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	4618      	mov	r0, r3
 8005518:	f7fd fd92 	bl	8003040 <HAL_DMA_GetState>
 800551c:	4603      	mov	r3, r0
 800551e:	2b01      	cmp	r3, #1
 8005520:	d049      	beq.n	80055b6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005526:	4a69      	ldr	r2, [pc, #420]	; (80056cc <I2C_Slave_STOPF+0x258>)
 8005528:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552e:	4618      	mov	r0, r3
 8005530:	f7fd fbda 	bl	8002ce8 <HAL_DMA_Abort_IT>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d03d      	beq.n	80055b6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005544:	4610      	mov	r0, r2
 8005546:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005548:	e035      	b.n	80055b6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	b29a      	uxth	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555c:	b29b      	uxth	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d005      	beq.n	800556e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	f043 0204 	orr.w	r2, r3, #4
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800557c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005582:	4618      	mov	r0, r3
 8005584:	f7fd fd5c 	bl	8003040 <HAL_DMA_GetState>
 8005588:	4603      	mov	r3, r0
 800558a:	2b01      	cmp	r3, #1
 800558c:	d014      	beq.n	80055b8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005592:	4a4e      	ldr	r2, [pc, #312]	; (80056cc <I2C_Slave_STOPF+0x258>)
 8005594:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559a:	4618      	mov	r0, r3
 800559c:	f7fd fba4 	bl	8002ce8 <HAL_DMA_Abort_IT>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d008      	beq.n	80055b8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055b0:	4610      	mov	r0, r2
 80055b2:	4798      	blx	r3
 80055b4:	e000      	b.n	80055b8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055b6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055bc:	b29b      	uxth	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d03e      	beq.n	8005640 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b04      	cmp	r3, #4
 80055ce:	d112      	bne.n	80055f6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691a      	ldr	r2, [r3, #16]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	3b01      	subs	r3, #1
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005600:	2b40      	cmp	r3, #64	; 0x40
 8005602:	d112      	bne.n	800562a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691a      	ldr	r2, [r3, #16]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562e:	b29b      	uxth	r3, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005638:	f043 0204 	orr.w	r2, r3, #4
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f8b3 	bl	80057b4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800564e:	e039      	b.n	80056c4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	2b2a      	cmp	r3, #42	; 0x2a
 8005654:	d109      	bne.n	800566a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2228      	movs	r2, #40	; 0x28
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7ff f827 	bl	80046b8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b28      	cmp	r3, #40	; 0x28
 8005674:	d111      	bne.n	800569a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a15      	ldr	r2, [pc, #84]	; (80056d0 <I2C_Slave_STOPF+0x25c>)
 800567a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7ff f828 	bl	80046e8 <HAL_I2C_ListenCpltCallback>
}
 8005698:	e014      	b.n	80056c4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569e:	2b22      	cmp	r3, #34	; 0x22
 80056a0:	d002      	beq.n	80056a8 <I2C_Slave_STOPF+0x234>
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	2b22      	cmp	r3, #34	; 0x22
 80056a6:	d10d      	bne.n	80056c4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fe fffa 	bl	80046b8 <HAL_I2C_SlaveRxCpltCallback>
}
 80056c4:	bf00      	nop
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	08005cb9 	.word	0x08005cb9
 80056d0:	ffff0000 	.word	0xffff0000

080056d4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d002      	beq.n	80056f6 <I2C_Slave_AF+0x22>
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b20      	cmp	r3, #32
 80056f4:	d129      	bne.n	800574a <I2C_Slave_AF+0x76>
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
 80056f8:	2b28      	cmp	r3, #40	; 0x28
 80056fa:	d126      	bne.n	800574a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a2c      	ldr	r2, [pc, #176]	; (80057b0 <I2C_Slave_AF+0xdc>)
 8005700:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005710:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800571a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800572a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fe ffd0 	bl	80046e8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005748:	e02e      	b.n	80057a8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800574a:	7bfb      	ldrb	r3, [r7, #15]
 800574c:	2b21      	cmp	r3, #33	; 0x21
 800574e:	d126      	bne.n	800579e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a17      	ldr	r2, [pc, #92]	; (80057b0 <I2C_Slave_AF+0xdc>)
 8005754:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2221      	movs	r2, #33	; 0x21
 800575a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800577a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005784:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005794:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fe ff84 	bl	80046a4 <HAL_I2C_SlaveTxCpltCallback>
}
 800579c:	e004      	b.n	80057a8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057a6:	615a      	str	r2, [r3, #20]
}
 80057a8:	bf00      	nop
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	ffff0000 	.word	0xffff0000

080057b4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80057cc:	7bbb      	ldrb	r3, [r7, #14]
 80057ce:	2b10      	cmp	r3, #16
 80057d0:	d002      	beq.n	80057d8 <I2C_ITError+0x24>
 80057d2:	7bbb      	ldrb	r3, [r7, #14]
 80057d4:	2b40      	cmp	r3, #64	; 0x40
 80057d6:	d10a      	bne.n	80057ee <I2C_ITError+0x3a>
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	2b22      	cmp	r3, #34	; 0x22
 80057dc:	d107      	bne.n	80057ee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057ec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
 80057f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057f4:	2b28      	cmp	r3, #40	; 0x28
 80057f6:	d107      	bne.n	8005808 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2228      	movs	r2, #40	; 0x28
 8005802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005806:	e015      	b.n	8005834 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005816:	d00a      	beq.n	800582e <I2C_ITError+0x7a>
 8005818:	7bfb      	ldrb	r3, [r7, #15]
 800581a:	2b60      	cmp	r3, #96	; 0x60
 800581c:	d007      	beq.n	800582e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2220      	movs	r2, #32
 8005822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800583e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005842:	d162      	bne.n	800590a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005852:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b01      	cmp	r3, #1
 8005860:	d020      	beq.n	80058a4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005866:	4a6a      	ldr	r2, [pc, #424]	; (8005a10 <I2C_ITError+0x25c>)
 8005868:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800586e:	4618      	mov	r0, r3
 8005870:	f7fd fa3a 	bl	8002ce8 <HAL_DMA_Abort_IT>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 8089 	beq.w	800598e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f022 0201 	bic.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2220      	movs	r2, #32
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800589e:	4610      	mov	r0, r2
 80058a0:	4798      	blx	r3
 80058a2:	e074      	b.n	800598e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	4a59      	ldr	r2, [pc, #356]	; (8005a10 <I2C_ITError+0x25c>)
 80058aa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fd fa19 	bl	8002ce8 <HAL_DMA_Abort_IT>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d068      	beq.n	800598e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c6:	2b40      	cmp	r3, #64	; 0x40
 80058c8:	d10b      	bne.n	80058e2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	691a      	ldr	r2, [r3, #16]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 0201 	bic.w	r2, r2, #1
 80058f0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2220      	movs	r2, #32
 80058f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005904:	4610      	mov	r0, r2
 8005906:	4798      	blx	r3
 8005908:	e041      	b.n	800598e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b60      	cmp	r3, #96	; 0x60
 8005914:	d125      	bne.n	8005962 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2220      	movs	r2, #32
 800591a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592e:	2b40      	cmp	r3, #64	; 0x40
 8005930:	d10b      	bne.n	800594a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	691a      	ldr	r2, [r3, #16]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	b2d2      	uxtb	r2, r2
 800593e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0201 	bic.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fe feec 	bl	8004738 <HAL_I2C_AbortCpltCallback>
 8005960:	e015      	b.n	800598e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596c:	2b40      	cmp	r3, #64	; 0x40
 800596e:	d10b      	bne.n	8005988 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691a      	ldr	r2, [r3, #16]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	1c5a      	adds	r2, r3, #1
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7fe fecb 	bl	8004724 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10e      	bne.n	80059bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d109      	bne.n	80059bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d104      	bne.n	80059bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d007      	beq.n	80059cc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80059ca:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059d2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d113      	bne.n	8005a08 <I2C_ITError+0x254>
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	2b28      	cmp	r3, #40	; 0x28
 80059e4:	d110      	bne.n	8005a08 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a0a      	ldr	r2, [pc, #40]	; (8005a14 <I2C_ITError+0x260>)
 80059ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7fe fe70 	bl	80046e8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a08:	bf00      	nop
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	08005cb9 	.word	0x08005cb9
 8005a14:	ffff0000 	.word	0xffff0000

08005a18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b088      	sub	sp, #32
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	607a      	str	r2, [r7, #4]
 8005a22:	603b      	str	r3, [r7, #0]
 8005a24:	460b      	mov	r3, r1
 8005a26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d006      	beq.n	8005a42 <I2C_MasterRequestWrite+0x2a>
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d003      	beq.n	8005a42 <I2C_MasterRequestWrite+0x2a>
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a40:	d108      	bne.n	8005a54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	e00b      	b.n	8005a6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a58:	2b12      	cmp	r3, #18
 8005a5a:	d107      	bne.n	8005a6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 f9c5 	bl	8005e08 <I2C_WaitOnFlagUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00d      	beq.n	8005aa0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a92:	d103      	bne.n	8005a9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e035      	b.n	8005b0c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005aa8:	d108      	bne.n	8005abc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005aaa:	897b      	ldrh	r3, [r7, #10]
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	461a      	mov	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ab8:	611a      	str	r2, [r3, #16]
 8005aba:	e01b      	b.n	8005af4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005abc:	897b      	ldrh	r3, [r7, #10]
 8005abe:	11db      	asrs	r3, r3, #7
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	f003 0306 	and.w	r3, r3, #6
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	f063 030f 	orn	r3, r3, #15
 8005acc:	b2da      	uxtb	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	490e      	ldr	r1, [pc, #56]	; (8005b14 <I2C_MasterRequestWrite+0xfc>)
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 f9eb 	bl	8005eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e010      	b.n	8005b0c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005aea:	897b      	ldrh	r3, [r7, #10]
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	4907      	ldr	r1, [pc, #28]	; (8005b18 <I2C_MasterRequestWrite+0x100>)
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f9db 	bl	8005eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	00010008 	.word	0x00010008
 8005b18:	00010002 	.word	0x00010002

08005b1c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b088      	sub	sp, #32
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	603b      	str	r3, [r7, #0]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b40:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d006      	beq.n	8005b56 <I2C_MasterRequestRead+0x3a>
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d003      	beq.n	8005b56 <I2C_MasterRequestRead+0x3a>
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b54:	d108      	bne.n	8005b68 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	e00b      	b.n	8005b80 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6c:	2b11      	cmp	r3, #17
 8005b6e:	d107      	bne.n	8005b80 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	9300      	str	r3, [sp, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 f93b 	bl	8005e08 <I2C_WaitOnFlagUntilTimeout>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00d      	beq.n	8005bb4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ba6:	d103      	bne.n	8005bb0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e079      	b.n	8005ca8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bbc:	d108      	bne.n	8005bd0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005bbe:	897b      	ldrh	r3, [r7, #10]
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	f043 0301 	orr.w	r3, r3, #1
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	611a      	str	r2, [r3, #16]
 8005bce:	e05f      	b.n	8005c90 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005bd0:	897b      	ldrh	r3, [r7, #10]
 8005bd2:	11db      	asrs	r3, r3, #7
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	f003 0306 	and.w	r3, r3, #6
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	f063 030f 	orn	r3, r3, #15
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	4930      	ldr	r1, [pc, #192]	; (8005cb0 <I2C_MasterRequestRead+0x194>)
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f961 	bl	8005eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e054      	b.n	8005ca8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005bfe:	897b      	ldrh	r3, [r7, #10]
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	4929      	ldr	r1, [pc, #164]	; (8005cb4 <I2C_MasterRequestRead+0x198>)
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 f951 	bl	8005eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e044      	b.n	8005ca8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c1e:	2300      	movs	r3, #0
 8005c20:	613b      	str	r3, [r7, #16]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	613b      	str	r3, [r7, #16]
 8005c32:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c42:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 f8d9 	bl	8005e08 <I2C_WaitOnFlagUntilTimeout>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00d      	beq.n	8005c78 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c6a:	d103      	bne.n	8005c74 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c72:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e017      	b.n	8005ca8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005c78:	897b      	ldrh	r3, [r7, #10]
 8005c7a:	11db      	asrs	r3, r3, #7
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	f003 0306 	and.w	r3, r3, #6
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	f063 030e 	orn	r3, r3, #14
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	4907      	ldr	r1, [pc, #28]	; (8005cb4 <I2C_MasterRequestRead+0x198>)
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f000 f90d 	bl	8005eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	00010008 	.word	0x00010008
 8005cb4:	00010002 	.word	0x00010002

08005cb8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005cd2:	4b4b      	ldr	r3, [pc, #300]	; (8005e00 <I2C_DMAAbort+0x148>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	08db      	lsrs	r3, r3, #3
 8005cd8:	4a4a      	ldr	r2, [pc, #296]	; (8005e04 <I2C_DMAAbort+0x14c>)
 8005cda:	fba2 2303 	umull	r2, r3, r2, r3
 8005cde:	0a1a      	lsrs	r2, r3, #8
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	00da      	lsls	r2, r3, #3
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d106      	bne.n	8005d00 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	f043 0220 	orr.w	r2, r3, #32
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005cfe:	e00a      	b.n	8005d16 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d14:	d0ea      	beq.n	8005cec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d22:	2200      	movs	r2, #0
 8005d24:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	2200      	movs	r2, #0
 8005d34:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d44:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d003      	beq.n	8005d5c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d58:	2200      	movs	r2, #0
 8005d5a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	2200      	movs	r2, #0
 8005d6a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0201 	bic.w	r2, r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b60      	cmp	r3, #96	; 0x60
 8005d86:	d10e      	bne.n	8005da6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d9e:	6978      	ldr	r0, [r7, #20]
 8005da0:	f7fe fcca 	bl	8004738 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005da4:	e027      	b.n	8005df6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005da6:	7cfb      	ldrb	r3, [r7, #19]
 8005da8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005dac:	2b28      	cmp	r3, #40	; 0x28
 8005dae:	d117      	bne.n	8005de0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0201 	orr.w	r2, r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2228      	movs	r2, #40	; 0x28
 8005dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005dde:	e007      	b.n	8005df0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005df0:	6978      	ldr	r0, [r7, #20]
 8005df2:	f7fe fc97 	bl	8004724 <HAL_I2C_ErrorCallback>
}
 8005df6:	bf00      	nop
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	20000000 	.word	0x20000000
 8005e04:	14f8b589 	.word	0x14f8b589

08005e08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	4613      	mov	r3, r2
 8005e16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e18:	e025      	b.n	8005e66 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e20:	d021      	beq.n	8005e66 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e22:	f7fb fb8b 	bl	800153c <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d302      	bcc.n	8005e38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d116      	bne.n	8005e66 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e52:	f043 0220 	orr.w	r2, r3, #32
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e023      	b.n	8005eae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	0c1b      	lsrs	r3, r3, #16
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d10d      	bne.n	8005e8c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	43da      	mvns	r2, r3
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	bf0c      	ite	eq
 8005e82:	2301      	moveq	r3, #1
 8005e84:	2300      	movne	r3, #0
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	461a      	mov	r2, r3
 8005e8a:	e00c      	b.n	8005ea6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	43da      	mvns	r2, r3
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4013      	ands	r3, r2
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	bf0c      	ite	eq
 8005e9e:	2301      	moveq	r3, #1
 8005ea0:	2300      	movne	r3, #0
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	79fb      	ldrb	r3, [r7, #7]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d0b6      	beq.n	8005e1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3710      	adds	r7, #16
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b084      	sub	sp, #16
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	60f8      	str	r0, [r7, #12]
 8005ebe:	60b9      	str	r1, [r7, #8]
 8005ec0:	607a      	str	r2, [r7, #4]
 8005ec2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ec4:	e051      	b.n	8005f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed4:	d123      	bne.n	8005f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ee4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005eee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0a:	f043 0204 	orr.w	r2, r3, #4
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e046      	b.n	8005fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f24:	d021      	beq.n	8005f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f26:	f7fb fb09 	bl	800153c <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d302      	bcc.n	8005f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d116      	bne.n	8005f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	f043 0220 	orr.w	r2, r3, #32
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e020      	b.n	8005fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	0c1b      	lsrs	r3, r3, #16
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d10c      	bne.n	8005f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	43da      	mvns	r2, r3
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	bf14      	ite	ne
 8005f86:	2301      	movne	r3, #1
 8005f88:	2300      	moveq	r3, #0
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	e00b      	b.n	8005fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	43da      	mvns	r2, r3
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	bf14      	ite	ne
 8005fa0:	2301      	movne	r3, #1
 8005fa2:	2300      	moveq	r3, #0
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d18d      	bne.n	8005ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fc0:	e02d      	b.n	800601e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 f900 	bl	80061c8 <I2C_IsAcknowledgeFailed>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e02d      	b.n	800602e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd8:	d021      	beq.n	800601e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fda:	f7fb faaf 	bl	800153c <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d302      	bcc.n	8005ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d116      	bne.n	800601e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	f043 0220 	orr.w	r2, r3, #32
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e007      	b.n	800602e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006028:	2b80      	cmp	r3, #128	; 0x80
 800602a:	d1ca      	bne.n	8005fc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	60f8      	str	r0, [r7, #12]
 800603e:	60b9      	str	r1, [r7, #8]
 8006040:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006042:	e02d      	b.n	80060a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 f8bf 	bl	80061c8 <I2C_IsAcknowledgeFailed>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e02d      	b.n	80060b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605a:	d021      	beq.n	80060a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800605c:	f7fb fa6e 	bl	800153c <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	429a      	cmp	r2, r3
 800606a:	d302      	bcc.n	8006072 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d116      	bne.n	80060a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608c:	f043 0220 	orr.w	r2, r3, #32
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e007      	b.n	80060b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	f003 0304 	and.w	r3, r3, #4
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d1ca      	bne.n	8006044 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80060c4:	4b13      	ldr	r3, [pc, #76]	; (8006114 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	08db      	lsrs	r3, r3, #3
 80060ca:	4a13      	ldr	r2, [pc, #76]	; (8006118 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80060cc:	fba2 2303 	umull	r2, r3, r2, r3
 80060d0:	0a1a      	lsrs	r2, r3, #8
 80060d2:	4613      	mov	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3b01      	subs	r3, #1
 80060de:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d107      	bne.n	80060f6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	f043 0220 	orr.w	r2, r3, #32
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e008      	b.n	8006108 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006104:	d0e9      	beq.n	80060da <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	20000000 	.word	0x20000000
 8006118:	14f8b589 	.word	0x14f8b589

0800611c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006128:	e042      	b.n	80061b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	f003 0310 	and.w	r3, r3, #16
 8006134:	2b10      	cmp	r3, #16
 8006136:	d119      	bne.n	800616c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f06f 0210 	mvn.w	r2, #16
 8006140:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2220      	movs	r2, #32
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e029      	b.n	80061c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800616c:	f7fb f9e6 	bl	800153c <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	429a      	cmp	r2, r3
 800617a:	d302      	bcc.n	8006182 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d116      	bne.n	80061b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619c:	f043 0220 	orr.w	r2, r3, #32
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e007      	b.n	80061c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ba:	2b40      	cmp	r3, #64	; 0x40
 80061bc:	d1b5      	bne.n	800612a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061de:	d11b      	bne.n	8006218 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	f043 0204 	orr.w	r2, r3, #4
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e000      	b.n	800621a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006232:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006236:	d103      	bne.n	8006240 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800623e:	e007      	b.n	8006250 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006244:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006248:	d102      	bne.n	8006250 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2208      	movs	r2, #8
 800624e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006262:	2300      	movs	r3, #0
 8006264:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006266:	2300      	movs	r3, #0
 8006268:	603b      	str	r3, [r7, #0]
 800626a:	4b20      	ldr	r3, [pc, #128]	; (80062ec <HAL_PWREx_EnableOverDrive+0x90>)
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	4a1f      	ldr	r2, [pc, #124]	; (80062ec <HAL_PWREx_EnableOverDrive+0x90>)
 8006270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006274:	6413      	str	r3, [r2, #64]	; 0x40
 8006276:	4b1d      	ldr	r3, [pc, #116]	; (80062ec <HAL_PWREx_EnableOverDrive+0x90>)
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800627e:	603b      	str	r3, [r7, #0]
 8006280:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006282:	4b1b      	ldr	r3, [pc, #108]	; (80062f0 <HAL_PWREx_EnableOverDrive+0x94>)
 8006284:	2201      	movs	r2, #1
 8006286:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006288:	f7fb f958 	bl	800153c <HAL_GetTick>
 800628c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800628e:	e009      	b.n	80062a4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006290:	f7fb f954 	bl	800153c <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800629e:	d901      	bls.n	80062a4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e01f      	b.n	80062e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80062a4:	4b13      	ldr	r3, [pc, #76]	; (80062f4 <HAL_PWREx_EnableOverDrive+0x98>)
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b0:	d1ee      	bne.n	8006290 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80062b2:	4b11      	ldr	r3, [pc, #68]	; (80062f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80062b4:	2201      	movs	r2, #1
 80062b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062b8:	f7fb f940 	bl	800153c <HAL_GetTick>
 80062bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80062be:	e009      	b.n	80062d4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062c0:	f7fb f93c 	bl	800153c <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062ce:	d901      	bls.n	80062d4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e007      	b.n	80062e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80062d4:	4b07      	ldr	r3, [pc, #28]	; (80062f4 <HAL_PWREx_EnableOverDrive+0x98>)
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062e0:	d1ee      	bne.n	80062c0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	40023800 	.word	0x40023800
 80062f0:	420e0040 	.word	0x420e0040
 80062f4:	40007000 	.word	0x40007000
 80062f8:	420e0044 	.word	0x420e0044

080062fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e18c      	b.n	800662a <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <HAL_RCC_ClockConfig+0x24>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b0f      	cmp	r3, #15
 800631e:	d904      	bls.n	800632a <HAL_RCC_ClockConfig+0x2e>
 8006320:	f240 215a 	movw	r1, #602	; 0x25a
 8006324:	4887      	ldr	r0, [pc, #540]	; (8006544 <HAL_RCC_ClockConfig+0x248>)
 8006326:	f7fa fde6 	bl	8000ef6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d031      	beq.n	8006394 <HAL_RCC_ClockConfig+0x98>
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d02e      	beq.n	8006394 <HAL_RCC_ClockConfig+0x98>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b02      	cmp	r3, #2
 800633a:	d02b      	beq.n	8006394 <HAL_RCC_ClockConfig+0x98>
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	2b03      	cmp	r3, #3
 8006340:	d028      	beq.n	8006394 <HAL_RCC_ClockConfig+0x98>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b04      	cmp	r3, #4
 8006346:	d025      	beq.n	8006394 <HAL_RCC_ClockConfig+0x98>
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	2b05      	cmp	r3, #5
 800634c:	d022      	beq.n	8006394 <HAL_RCC_ClockConfig+0x98>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b06      	cmp	r3, #6
 8006352:	d01f      	beq.n	8006394 <HAL_RCC_ClockConfig+0x98>
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	2b07      	cmp	r3, #7
 8006358:	d01c      	beq.n	8006394 <HAL_RCC_ClockConfig+0x98>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b08      	cmp	r3, #8
 800635e:	d019      	beq.n	8006394 <HAL_RCC_ClockConfig+0x98>
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b09      	cmp	r3, #9
 8006364:	d016      	beq.n	8006394 <HAL_RCC_ClockConfig+0x98>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b0a      	cmp	r3, #10
 800636a:	d013      	beq.n	8006394 <HAL_RCC_ClockConfig+0x98>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2b0b      	cmp	r3, #11
 8006370:	d010      	beq.n	8006394 <HAL_RCC_ClockConfig+0x98>
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b0c      	cmp	r3, #12
 8006376:	d00d      	beq.n	8006394 <HAL_RCC_ClockConfig+0x98>
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2b0d      	cmp	r3, #13
 800637c:	d00a      	beq.n	8006394 <HAL_RCC_ClockConfig+0x98>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b0e      	cmp	r3, #14
 8006382:	d007      	beq.n	8006394 <HAL_RCC_ClockConfig+0x98>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	2b0f      	cmp	r3, #15
 8006388:	d004      	beq.n	8006394 <HAL_RCC_ClockConfig+0x98>
 800638a:	f240 215b 	movw	r1, #603	; 0x25b
 800638e:	486d      	ldr	r0, [pc, #436]	; (8006544 <HAL_RCC_ClockConfig+0x248>)
 8006390:	f7fa fdb1 	bl	8000ef6 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006394:	4b6c      	ldr	r3, [pc, #432]	; (8006548 <HAL_RCC_ClockConfig+0x24c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d90c      	bls.n	80063bc <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063a2:	4b69      	ldr	r3, [pc, #420]	; (8006548 <HAL_RCC_ClockConfig+0x24c>)
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	b2d2      	uxtb	r2, r2
 80063a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063aa:	4b67      	ldr	r3, [pc, #412]	; (8006548 <HAL_RCC_ClockConfig+0x24c>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d001      	beq.n	80063bc <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e136      	b.n	800662a <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d049      	beq.n	800645c <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d005      	beq.n	80063e0 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063d4:	4b5d      	ldr	r3, [pc, #372]	; (800654c <HAL_RCC_ClockConfig+0x250>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	4a5c      	ldr	r2, [pc, #368]	; (800654c <HAL_RCC_ClockConfig+0x250>)
 80063da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0308 	and.w	r3, r3, #8
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d005      	beq.n	80063f8 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063ec:	4b57      	ldr	r3, [pc, #348]	; (800654c <HAL_RCC_ClockConfig+0x250>)
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	4a56      	ldr	r2, [pc, #344]	; (800654c <HAL_RCC_ClockConfig+0x250>)
 80063f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d024      	beq.n	800644a <HAL_RCC_ClockConfig+0x14e>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	2b80      	cmp	r3, #128	; 0x80
 8006406:	d020      	beq.n	800644a <HAL_RCC_ClockConfig+0x14e>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2b90      	cmp	r3, #144	; 0x90
 800640e:	d01c      	beq.n	800644a <HAL_RCC_ClockConfig+0x14e>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	2ba0      	cmp	r3, #160	; 0xa0
 8006416:	d018      	beq.n	800644a <HAL_RCC_ClockConfig+0x14e>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	2bb0      	cmp	r3, #176	; 0xb0
 800641e:	d014      	beq.n	800644a <HAL_RCC_ClockConfig+0x14e>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	2bc0      	cmp	r3, #192	; 0xc0
 8006426:	d010      	beq.n	800644a <HAL_RCC_ClockConfig+0x14e>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	2bd0      	cmp	r3, #208	; 0xd0
 800642e:	d00c      	beq.n	800644a <HAL_RCC_ClockConfig+0x14e>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	2be0      	cmp	r3, #224	; 0xe0
 8006436:	d008      	beq.n	800644a <HAL_RCC_ClockConfig+0x14e>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	2bf0      	cmp	r3, #240	; 0xf0
 800643e:	d004      	beq.n	800644a <HAL_RCC_ClockConfig+0x14e>
 8006440:	f240 217e 	movw	r1, #638	; 0x27e
 8006444:	483f      	ldr	r0, [pc, #252]	; (8006544 <HAL_RCC_ClockConfig+0x248>)
 8006446:	f7fa fd56 	bl	8000ef6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800644a:	4b40      	ldr	r3, [pc, #256]	; (800654c <HAL_RCC_ClockConfig+0x250>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	493d      	ldr	r1, [pc, #244]	; (800654c <HAL_RCC_ClockConfig+0x250>)
 8006458:	4313      	orrs	r3, r2
 800645a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	d059      	beq.n	800651c <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d010      	beq.n	8006492 <HAL_RCC_ClockConfig+0x196>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d00c      	beq.n	8006492 <HAL_RCC_ClockConfig+0x196>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	2b02      	cmp	r3, #2
 800647e:	d008      	beq.n	8006492 <HAL_RCC_ClockConfig+0x196>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	2b03      	cmp	r3, #3
 8006486:	d004      	beq.n	8006492 <HAL_RCC_ClockConfig+0x196>
 8006488:	f240 2185 	movw	r1, #645	; 0x285
 800648c:	482d      	ldr	r0, [pc, #180]	; (8006544 <HAL_RCC_ClockConfig+0x248>)
 800648e:	f7fa fd32 	bl	8000ef6 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d107      	bne.n	80064aa <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800649a:	4b2c      	ldr	r3, [pc, #176]	; (800654c <HAL_RCC_ClockConfig+0x250>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d119      	bne.n	80064da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e0bf      	b.n	800662a <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d003      	beq.n	80064ba <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d107      	bne.n	80064ca <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ba:	4b24      	ldr	r3, [pc, #144]	; (800654c <HAL_RCC_ClockConfig+0x250>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d109      	bne.n	80064da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e0af      	b.n	800662a <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ca:	4b20      	ldr	r3, [pc, #128]	; (800654c <HAL_RCC_ClockConfig+0x250>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e0a7      	b.n	800662a <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064da:	4b1c      	ldr	r3, [pc, #112]	; (800654c <HAL_RCC_ClockConfig+0x250>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f023 0203 	bic.w	r2, r3, #3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	4919      	ldr	r1, [pc, #100]	; (800654c <HAL_RCC_ClockConfig+0x250>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064ec:	f7fb f826 	bl	800153c <HAL_GetTick>
 80064f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f2:	e00a      	b.n	800650a <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064f4:	f7fb f822 	bl	800153c <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006502:	4293      	cmp	r3, r2
 8006504:	d901      	bls.n	800650a <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e08f      	b.n	800662a <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800650a:	4b10      	ldr	r3, [pc, #64]	; (800654c <HAL_RCC_ClockConfig+0x250>)
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f003 020c 	and.w	r2, r3, #12
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	429a      	cmp	r2, r3
 800651a:	d1eb      	bne.n	80064f4 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800651c:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <HAL_RCC_ClockConfig+0x24c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 030f 	and.w	r3, r3, #15
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	429a      	cmp	r2, r3
 8006528:	d212      	bcs.n	8006550 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800652a:	4b07      	ldr	r3, [pc, #28]	; (8006548 <HAL_RCC_ClockConfig+0x24c>)
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	b2d2      	uxtb	r2, r2
 8006530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006532:	4b05      	ldr	r3, [pc, #20]	; (8006548 <HAL_RCC_ClockConfig+0x24c>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 030f 	and.w	r3, r3, #15
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	429a      	cmp	r2, r3
 800653e:	d007      	beq.n	8006550 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e072      	b.n	800662a <HAL_RCC_ClockConfig+0x32e>
 8006544:	08009c24 	.word	0x08009c24
 8006548:	40023c00 	.word	0x40023c00
 800654c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	2b00      	cmp	r3, #0
 800655a:	d025      	beq.n	80065a8 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d018      	beq.n	8006596 <HAL_RCC_ClockConfig+0x29a>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656c:	d013      	beq.n	8006596 <HAL_RCC_ClockConfig+0x29a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006576:	d00e      	beq.n	8006596 <HAL_RCC_ClockConfig+0x29a>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006580:	d009      	beq.n	8006596 <HAL_RCC_ClockConfig+0x29a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800658a:	d004      	beq.n	8006596 <HAL_RCC_ClockConfig+0x29a>
 800658c:	f240 21c3 	movw	r1, #707	; 0x2c3
 8006590:	4828      	ldr	r0, [pc, #160]	; (8006634 <HAL_RCC_ClockConfig+0x338>)
 8006592:	f7fa fcb0 	bl	8000ef6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006596:	4b28      	ldr	r3, [pc, #160]	; (8006638 <HAL_RCC_ClockConfig+0x33c>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	4925      	ldr	r1, [pc, #148]	; (8006638 <HAL_RCC_ClockConfig+0x33c>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0308 	and.w	r3, r3, #8
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d026      	beq.n	8006602 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d018      	beq.n	80065ee <HAL_RCC_ClockConfig+0x2f2>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c4:	d013      	beq.n	80065ee <HAL_RCC_ClockConfig+0x2f2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80065ce:	d00e      	beq.n	80065ee <HAL_RCC_ClockConfig+0x2f2>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80065d8:	d009      	beq.n	80065ee <HAL_RCC_ClockConfig+0x2f2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80065e2:	d004      	beq.n	80065ee <HAL_RCC_ClockConfig+0x2f2>
 80065e4:	f240 21ca 	movw	r1, #714	; 0x2ca
 80065e8:	4812      	ldr	r0, [pc, #72]	; (8006634 <HAL_RCC_ClockConfig+0x338>)
 80065ea:	f7fa fc84 	bl	8000ef6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065ee:	4b12      	ldr	r3, [pc, #72]	; (8006638 <HAL_RCC_ClockConfig+0x33c>)
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	490e      	ldr	r1, [pc, #56]	; (8006638 <HAL_RCC_ClockConfig+0x33c>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006602:	f000 f887 	bl	8006714 <HAL_RCC_GetSysClockFreq>
 8006606:	4602      	mov	r2, r0
 8006608:	4b0b      	ldr	r3, [pc, #44]	; (8006638 <HAL_RCC_ClockConfig+0x33c>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	091b      	lsrs	r3, r3, #4
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	490a      	ldr	r1, [pc, #40]	; (800663c <HAL_RCC_ClockConfig+0x340>)
 8006614:	5ccb      	ldrb	r3, [r1, r3]
 8006616:	fa22 f303 	lsr.w	r3, r2, r3
 800661a:	4a09      	ldr	r2, [pc, #36]	; (8006640 <HAL_RCC_ClockConfig+0x344>)
 800661c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800661e:	4b09      	ldr	r3, [pc, #36]	; (8006644 <HAL_RCC_ClockConfig+0x348>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4618      	mov	r0, r3
 8006624:	f7fa fd8a 	bl	800113c <HAL_InitTick>

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	08009c24 	.word	0x08009c24
 8006638:	40023800 	.word	0x40023800
 800663c:	08009d10 	.word	0x08009d10
 8006640:	20000000 	.word	0x20000000
 8006644:	20000004 	.word	0x20000004

08006648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006648:	b480      	push	{r7}
 800664a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800664c:	4b03      	ldr	r3, [pc, #12]	; (800665c <HAL_RCC_GetHCLKFreq+0x14>)
 800664e:	681b      	ldr	r3, [r3, #0]
}
 8006650:	4618      	mov	r0, r3
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	20000000 	.word	0x20000000

08006660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006664:	f7ff fff0 	bl	8006648 <HAL_RCC_GetHCLKFreq>
 8006668:	4602      	mov	r2, r0
 800666a:	4b05      	ldr	r3, [pc, #20]	; (8006680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	0a9b      	lsrs	r3, r3, #10
 8006670:	f003 0307 	and.w	r3, r3, #7
 8006674:	4903      	ldr	r1, [pc, #12]	; (8006684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006676:	5ccb      	ldrb	r3, [r1, r3]
 8006678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800667c:	4618      	mov	r0, r3
 800667e:	bd80      	pop	{r7, pc}
 8006680:	40023800 	.word	0x40023800
 8006684:	08009d20 	.word	0x08009d20

08006688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800668c:	f7ff ffdc 	bl	8006648 <HAL_RCC_GetHCLKFreq>
 8006690:	4602      	mov	r2, r0
 8006692:	4b05      	ldr	r3, [pc, #20]	; (80066a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	0b5b      	lsrs	r3, r3, #13
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	4903      	ldr	r1, [pc, #12]	; (80066ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800669e:	5ccb      	ldrb	r3, [r1, r3]
 80066a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	40023800 	.word	0x40023800
 80066ac:	08009d20 	.word	0x08009d20

080066b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	220f      	movs	r2, #15
 80066be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80066c0:	4b12      	ldr	r3, [pc, #72]	; (800670c <HAL_RCC_GetClockConfig+0x5c>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f003 0203 	and.w	r2, r3, #3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80066cc:	4b0f      	ldr	r3, [pc, #60]	; (800670c <HAL_RCC_GetClockConfig+0x5c>)
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80066d8:	4b0c      	ldr	r3, [pc, #48]	; (800670c <HAL_RCC_GetClockConfig+0x5c>)
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80066e4:	4b09      	ldr	r3, [pc, #36]	; (800670c <HAL_RCC_GetClockConfig+0x5c>)
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	08db      	lsrs	r3, r3, #3
 80066ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80066f2:	4b07      	ldr	r3, [pc, #28]	; (8006710 <HAL_RCC_GetClockConfig+0x60>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 020f 	and.w	r2, r3, #15
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	601a      	str	r2, [r3, #0]
}
 80066fe:	bf00      	nop
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	40023800 	.word	0x40023800
 8006710:	40023c00 	.word	0x40023c00

08006714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006718:	b0ae      	sub	sp, #184	; 0xb8
 800671a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8006728:	2300      	movs	r3, #0
 800672a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800673a:	4bcb      	ldr	r3, [pc, #812]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x354>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 030c 	and.w	r3, r3, #12
 8006742:	2b0c      	cmp	r3, #12
 8006744:	f200 8206 	bhi.w	8006b54 <HAL_RCC_GetSysClockFreq+0x440>
 8006748:	a201      	add	r2, pc, #4	; (adr r2, 8006750 <HAL_RCC_GetSysClockFreq+0x3c>)
 800674a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674e:	bf00      	nop
 8006750:	08006785 	.word	0x08006785
 8006754:	08006b55 	.word	0x08006b55
 8006758:	08006b55 	.word	0x08006b55
 800675c:	08006b55 	.word	0x08006b55
 8006760:	0800678d 	.word	0x0800678d
 8006764:	08006b55 	.word	0x08006b55
 8006768:	08006b55 	.word	0x08006b55
 800676c:	08006b55 	.word	0x08006b55
 8006770:	08006795 	.word	0x08006795
 8006774:	08006b55 	.word	0x08006b55
 8006778:	08006b55 	.word	0x08006b55
 800677c:	08006b55 	.word	0x08006b55
 8006780:	08006985 	.word	0x08006985
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006784:	4bb9      	ldr	r3, [pc, #740]	; (8006a6c <HAL_RCC_GetSysClockFreq+0x358>)
 8006786:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800678a:	e1e7      	b.n	8006b5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800678c:	4bb8      	ldr	r3, [pc, #736]	; (8006a70 <HAL_RCC_GetSysClockFreq+0x35c>)
 800678e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006792:	e1e3      	b.n	8006b5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006794:	4bb4      	ldr	r3, [pc, #720]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800679c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067a0:	4bb1      	ldr	r3, [pc, #708]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x354>)
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d071      	beq.n	8006890 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ac:	4bae      	ldr	r3, [pc, #696]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x354>)
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	099b      	lsrs	r3, r3, #6
 80067b2:	2200      	movs	r2, #0
 80067b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067b8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80067bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067c8:	2300      	movs	r3, #0
 80067ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80067d2:	4622      	mov	r2, r4
 80067d4:	462b      	mov	r3, r5
 80067d6:	f04f 0000 	mov.w	r0, #0
 80067da:	f04f 0100 	mov.w	r1, #0
 80067de:	0159      	lsls	r1, r3, #5
 80067e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067e4:	0150      	lsls	r0, r2, #5
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	4621      	mov	r1, r4
 80067ec:	1a51      	subs	r1, r2, r1
 80067ee:	6439      	str	r1, [r7, #64]	; 0x40
 80067f0:	4629      	mov	r1, r5
 80067f2:	eb63 0301 	sbc.w	r3, r3, r1
 80067f6:	647b      	str	r3, [r7, #68]	; 0x44
 80067f8:	f04f 0200 	mov.w	r2, #0
 80067fc:	f04f 0300 	mov.w	r3, #0
 8006800:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8006804:	4649      	mov	r1, r9
 8006806:	018b      	lsls	r3, r1, #6
 8006808:	4641      	mov	r1, r8
 800680a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800680e:	4641      	mov	r1, r8
 8006810:	018a      	lsls	r2, r1, #6
 8006812:	4641      	mov	r1, r8
 8006814:	1a51      	subs	r1, r2, r1
 8006816:	63b9      	str	r1, [r7, #56]	; 0x38
 8006818:	4649      	mov	r1, r9
 800681a:	eb63 0301 	sbc.w	r3, r3, r1
 800681e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006820:	f04f 0200 	mov.w	r2, #0
 8006824:	f04f 0300 	mov.w	r3, #0
 8006828:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800682c:	4649      	mov	r1, r9
 800682e:	00cb      	lsls	r3, r1, #3
 8006830:	4641      	mov	r1, r8
 8006832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006836:	4641      	mov	r1, r8
 8006838:	00ca      	lsls	r2, r1, #3
 800683a:	4610      	mov	r0, r2
 800683c:	4619      	mov	r1, r3
 800683e:	4603      	mov	r3, r0
 8006840:	4622      	mov	r2, r4
 8006842:	189b      	adds	r3, r3, r2
 8006844:	633b      	str	r3, [r7, #48]	; 0x30
 8006846:	462b      	mov	r3, r5
 8006848:	460a      	mov	r2, r1
 800684a:	eb42 0303 	adc.w	r3, r2, r3
 800684e:	637b      	str	r3, [r7, #52]	; 0x34
 8006850:	f04f 0200 	mov.w	r2, #0
 8006854:	f04f 0300 	mov.w	r3, #0
 8006858:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800685c:	4629      	mov	r1, r5
 800685e:	024b      	lsls	r3, r1, #9
 8006860:	4621      	mov	r1, r4
 8006862:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006866:	4621      	mov	r1, r4
 8006868:	024a      	lsls	r2, r1, #9
 800686a:	4610      	mov	r0, r2
 800686c:	4619      	mov	r1, r3
 800686e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006872:	2200      	movs	r2, #0
 8006874:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006878:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800687c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006880:	f7f9 fcc6 	bl	8000210 <__aeabi_uldivmod>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4613      	mov	r3, r2
 800688a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800688e:	e067      	b.n	8006960 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006890:	4b75      	ldr	r3, [pc, #468]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	099b      	lsrs	r3, r3, #6
 8006896:	2200      	movs	r2, #0
 8006898:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800689c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80068a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80068aa:	2300      	movs	r3, #0
 80068ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80068b2:	4622      	mov	r2, r4
 80068b4:	462b      	mov	r3, r5
 80068b6:	f04f 0000 	mov.w	r0, #0
 80068ba:	f04f 0100 	mov.w	r1, #0
 80068be:	0159      	lsls	r1, r3, #5
 80068c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068c4:	0150      	lsls	r0, r2, #5
 80068c6:	4602      	mov	r2, r0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4621      	mov	r1, r4
 80068cc:	1a51      	subs	r1, r2, r1
 80068ce:	62b9      	str	r1, [r7, #40]	; 0x28
 80068d0:	4629      	mov	r1, r5
 80068d2:	eb63 0301 	sbc.w	r3, r3, r1
 80068d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068d8:	f04f 0200 	mov.w	r2, #0
 80068dc:	f04f 0300 	mov.w	r3, #0
 80068e0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80068e4:	4649      	mov	r1, r9
 80068e6:	018b      	lsls	r3, r1, #6
 80068e8:	4641      	mov	r1, r8
 80068ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068ee:	4641      	mov	r1, r8
 80068f0:	018a      	lsls	r2, r1, #6
 80068f2:	4641      	mov	r1, r8
 80068f4:	ebb2 0a01 	subs.w	sl, r2, r1
 80068f8:	4649      	mov	r1, r9
 80068fa:	eb63 0b01 	sbc.w	fp, r3, r1
 80068fe:	f04f 0200 	mov.w	r2, #0
 8006902:	f04f 0300 	mov.w	r3, #0
 8006906:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800690a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800690e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006912:	4692      	mov	sl, r2
 8006914:	469b      	mov	fp, r3
 8006916:	4623      	mov	r3, r4
 8006918:	eb1a 0303 	adds.w	r3, sl, r3
 800691c:	623b      	str	r3, [r7, #32]
 800691e:	462b      	mov	r3, r5
 8006920:	eb4b 0303 	adc.w	r3, fp, r3
 8006924:	627b      	str	r3, [r7, #36]	; 0x24
 8006926:	f04f 0200 	mov.w	r2, #0
 800692a:	f04f 0300 	mov.w	r3, #0
 800692e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8006932:	4629      	mov	r1, r5
 8006934:	028b      	lsls	r3, r1, #10
 8006936:	4621      	mov	r1, r4
 8006938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800693c:	4621      	mov	r1, r4
 800693e:	028a      	lsls	r2, r1, #10
 8006940:	4610      	mov	r0, r2
 8006942:	4619      	mov	r1, r3
 8006944:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006948:	2200      	movs	r2, #0
 800694a:	673b      	str	r3, [r7, #112]	; 0x70
 800694c:	677a      	str	r2, [r7, #116]	; 0x74
 800694e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006952:	f7f9 fc5d 	bl	8000210 <__aeabi_uldivmod>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	4613      	mov	r3, r2
 800695c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006960:	4b41      	ldr	r3, [pc, #260]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	0c1b      	lsrs	r3, r3, #16
 8006966:	f003 0303 	and.w	r3, r3, #3
 800696a:	3301      	adds	r3, #1
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8006972:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006976:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800697a:	fbb2 f3f3 	udiv	r3, r2, r3
 800697e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006982:	e0eb      	b.n	8006b5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006984:	4b38      	ldr	r3, [pc, #224]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800698c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006990:	4b35      	ldr	r3, [pc, #212]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x354>)
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d06b      	beq.n	8006a74 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800699c:	4b32      	ldr	r3, [pc, #200]	; (8006a68 <HAL_RCC_GetSysClockFreq+0x354>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	099b      	lsrs	r3, r3, #6
 80069a2:	2200      	movs	r2, #0
 80069a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80069a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ae:	663b      	str	r3, [r7, #96]	; 0x60
 80069b0:	2300      	movs	r3, #0
 80069b2:	667b      	str	r3, [r7, #100]	; 0x64
 80069b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80069b8:	4622      	mov	r2, r4
 80069ba:	462b      	mov	r3, r5
 80069bc:	f04f 0000 	mov.w	r0, #0
 80069c0:	f04f 0100 	mov.w	r1, #0
 80069c4:	0159      	lsls	r1, r3, #5
 80069c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069ca:	0150      	lsls	r0, r2, #5
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4621      	mov	r1, r4
 80069d2:	1a51      	subs	r1, r2, r1
 80069d4:	61b9      	str	r1, [r7, #24]
 80069d6:	4629      	mov	r1, r5
 80069d8:	eb63 0301 	sbc.w	r3, r3, r1
 80069dc:	61fb      	str	r3, [r7, #28]
 80069de:	f04f 0200 	mov.w	r2, #0
 80069e2:	f04f 0300 	mov.w	r3, #0
 80069e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80069ea:	4659      	mov	r1, fp
 80069ec:	018b      	lsls	r3, r1, #6
 80069ee:	4651      	mov	r1, sl
 80069f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069f4:	4651      	mov	r1, sl
 80069f6:	018a      	lsls	r2, r1, #6
 80069f8:	4651      	mov	r1, sl
 80069fa:	ebb2 0801 	subs.w	r8, r2, r1
 80069fe:	4659      	mov	r1, fp
 8006a00:	eb63 0901 	sbc.w	r9, r3, r1
 8006a04:	f04f 0200 	mov.w	r2, #0
 8006a08:	f04f 0300 	mov.w	r3, #0
 8006a0c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a10:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a14:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a18:	4690      	mov	r8, r2
 8006a1a:	4699      	mov	r9, r3
 8006a1c:	4623      	mov	r3, r4
 8006a1e:	eb18 0303 	adds.w	r3, r8, r3
 8006a22:	613b      	str	r3, [r7, #16]
 8006a24:	462b      	mov	r3, r5
 8006a26:	eb49 0303 	adc.w	r3, r9, r3
 8006a2a:	617b      	str	r3, [r7, #20]
 8006a2c:	f04f 0200 	mov.w	r2, #0
 8006a30:	f04f 0300 	mov.w	r3, #0
 8006a34:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006a38:	4629      	mov	r1, r5
 8006a3a:	024b      	lsls	r3, r1, #9
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a42:	4621      	mov	r1, r4
 8006a44:	024a      	lsls	r2, r1, #9
 8006a46:	4610      	mov	r0, r2
 8006a48:	4619      	mov	r1, r3
 8006a4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a4e:	2200      	movs	r2, #0
 8006a50:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a52:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006a54:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a58:	f7f9 fbda 	bl	8000210 <__aeabi_uldivmod>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4613      	mov	r3, r2
 8006a62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a66:	e065      	b.n	8006b34 <HAL_RCC_GetSysClockFreq+0x420>
 8006a68:	40023800 	.word	0x40023800
 8006a6c:	00f42400 	.word	0x00f42400
 8006a70:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a74:	4b3d      	ldr	r3, [pc, #244]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x458>)
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	099b      	lsrs	r3, r3, #6
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	4611      	mov	r1, r2
 8006a80:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a84:	653b      	str	r3, [r7, #80]	; 0x50
 8006a86:	2300      	movs	r3, #0
 8006a88:	657b      	str	r3, [r7, #84]	; 0x54
 8006a8a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8006a8e:	4642      	mov	r2, r8
 8006a90:	464b      	mov	r3, r9
 8006a92:	f04f 0000 	mov.w	r0, #0
 8006a96:	f04f 0100 	mov.w	r1, #0
 8006a9a:	0159      	lsls	r1, r3, #5
 8006a9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006aa0:	0150      	lsls	r0, r2, #5
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4641      	mov	r1, r8
 8006aa8:	1a51      	subs	r1, r2, r1
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	4649      	mov	r1, r9
 8006aae:	eb63 0301 	sbc.w	r3, r3, r1
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	f04f 0200 	mov.w	r2, #0
 8006ab8:	f04f 0300 	mov.w	r3, #0
 8006abc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006ac0:	4659      	mov	r1, fp
 8006ac2:	018b      	lsls	r3, r1, #6
 8006ac4:	4651      	mov	r1, sl
 8006ac6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006aca:	4651      	mov	r1, sl
 8006acc:	018a      	lsls	r2, r1, #6
 8006ace:	4651      	mov	r1, sl
 8006ad0:	1a54      	subs	r4, r2, r1
 8006ad2:	4659      	mov	r1, fp
 8006ad4:	eb63 0501 	sbc.w	r5, r3, r1
 8006ad8:	f04f 0200 	mov.w	r2, #0
 8006adc:	f04f 0300 	mov.w	r3, #0
 8006ae0:	00eb      	lsls	r3, r5, #3
 8006ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ae6:	00e2      	lsls	r2, r4, #3
 8006ae8:	4614      	mov	r4, r2
 8006aea:	461d      	mov	r5, r3
 8006aec:	4643      	mov	r3, r8
 8006aee:	18e3      	adds	r3, r4, r3
 8006af0:	603b      	str	r3, [r7, #0]
 8006af2:	464b      	mov	r3, r9
 8006af4:	eb45 0303 	adc.w	r3, r5, r3
 8006af8:	607b      	str	r3, [r7, #4]
 8006afa:	f04f 0200 	mov.w	r2, #0
 8006afe:	f04f 0300 	mov.w	r3, #0
 8006b02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b06:	4629      	mov	r1, r5
 8006b08:	028b      	lsls	r3, r1, #10
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b10:	4621      	mov	r1, r4
 8006b12:	028a      	lsls	r2, r1, #10
 8006b14:	4610      	mov	r0, r2
 8006b16:	4619      	mov	r1, r3
 8006b18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b20:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006b22:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b26:	f7f9 fb73 	bl	8000210 <__aeabi_uldivmod>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	4613      	mov	r3, r2
 8006b30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006b34:	4b0d      	ldr	r3, [pc, #52]	; (8006b6c <HAL_RCC_GetSysClockFreq+0x458>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	0f1b      	lsrs	r3, r3, #28
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006b42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006b52:	e003      	b.n	8006b5c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b54:	4b06      	ldr	r3, [pc, #24]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006b56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006b5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	37b8      	adds	r7, #184	; 0xb8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b6a:	bf00      	nop
 8006b6c:	40023800 	.word	0x40023800
 8006b70:	00f42400 	.word	0x00f42400

08006b74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e347      	b.n	8007216 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b0f      	cmp	r3, #15
 8006b8c:	d904      	bls.n	8006b98 <HAL_RCC_OscConfig+0x24>
 8006b8e:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 8006b92:	4893      	ldr	r0, [pc, #588]	; (8006de0 <HAL_RCC_OscConfig+0x26c>)
 8006b94:	f7fa f9af 	bl	8000ef6 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 8096 	beq.w	8006cd2 <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00e      	beq.n	8006bcc <HAL_RCC_OscConfig+0x58>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb6:	d009      	beq.n	8006bcc <HAL_RCC_OscConfig+0x58>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bc0:	d004      	beq.n	8006bcc <HAL_RCC_OscConfig+0x58>
 8006bc2:	f640 5115 	movw	r1, #3349	; 0xd15
 8006bc6:	4886      	ldr	r0, [pc, #536]	; (8006de0 <HAL_RCC_OscConfig+0x26c>)
 8006bc8:	f7fa f995 	bl	8000ef6 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006bcc:	4b85      	ldr	r3, [pc, #532]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f003 030c 	and.w	r3, r3, #12
 8006bd4:	2b04      	cmp	r3, #4
 8006bd6:	d019      	beq.n	8006c0c <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006bd8:	4b82      	ldr	r3, [pc, #520]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d106      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006be4:	4b7f      	ldr	r3, [pc, #508]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bf0:	d00c      	beq.n	8006c0c <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bf2:	4b7c      	ldr	r3, [pc, #496]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006bfa:	2b0c      	cmp	r3, #12
 8006bfc:	d112      	bne.n	8006c24 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bfe:	4b79      	ldr	r3, [pc, #484]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c0a:	d10b      	bne.n	8006c24 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c0c:	4b75      	ldr	r3, [pc, #468]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d05b      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x15c>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d157      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e2f8      	b.n	8007216 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c2c:	d106      	bne.n	8006c3c <HAL_RCC_OscConfig+0xc8>
 8006c2e:	4b6d      	ldr	r3, [pc, #436]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a6c      	ldr	r2, [pc, #432]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c38:	6013      	str	r3, [r2, #0]
 8006c3a:	e01d      	b.n	8006c78 <HAL_RCC_OscConfig+0x104>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c44:	d10c      	bne.n	8006c60 <HAL_RCC_OscConfig+0xec>
 8006c46:	4b67      	ldr	r3, [pc, #412]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a66      	ldr	r2, [pc, #408]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	4b64      	ldr	r3, [pc, #400]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a63      	ldr	r2, [pc, #396]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c5c:	6013      	str	r3, [r2, #0]
 8006c5e:	e00b      	b.n	8006c78 <HAL_RCC_OscConfig+0x104>
 8006c60:	4b60      	ldr	r3, [pc, #384]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a5f      	ldr	r2, [pc, #380]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c6a:	6013      	str	r3, [r2, #0]
 8006c6c:	4b5d      	ldr	r3, [pc, #372]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a5c      	ldr	r2, [pc, #368]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d013      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c80:	f7fa fc5c 	bl	800153c <HAL_GetTick>
 8006c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c86:	e008      	b.n	8006c9a <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c88:	f7fa fc58 	bl	800153c <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	2b64      	cmp	r3, #100	; 0x64
 8006c94:	d901      	bls.n	8006c9a <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e2bd      	b.n	8007216 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c9a:	4b52      	ldr	r3, [pc, #328]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d0f0      	beq.n	8006c88 <HAL_RCC_OscConfig+0x114>
 8006ca6:	e014      	b.n	8006cd2 <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca8:	f7fa fc48 	bl	800153c <HAL_GetTick>
 8006cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cae:	e008      	b.n	8006cc2 <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cb0:	f7fa fc44 	bl	800153c <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b64      	cmp	r3, #100	; 0x64
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e2a9      	b.n	8007216 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cc2:	4b48      	ldr	r3, [pc, #288]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1f0      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x13c>
 8006cce:	e000      	b.n	8006cd2 <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 808c 	beq.w	8006df8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d008      	beq.n	8006cfa <HAL_RCC_OscConfig+0x186>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d004      	beq.n	8006cfa <HAL_RCC_OscConfig+0x186>
 8006cf0:	f640 514d 	movw	r1, #3405	; 0xd4d
 8006cf4:	483a      	ldr	r0, [pc, #232]	; (8006de0 <HAL_RCC_OscConfig+0x26c>)
 8006cf6:	f7fa f8fe 	bl	8000ef6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	2b1f      	cmp	r3, #31
 8006d00:	d904      	bls.n	8006d0c <HAL_RCC_OscConfig+0x198>
 8006d02:	f640 514e 	movw	r1, #3406	; 0xd4e
 8006d06:	4836      	ldr	r0, [pc, #216]	; (8006de0 <HAL_RCC_OscConfig+0x26c>)
 8006d08:	f7fa f8f5 	bl	8000ef6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006d0c:	4b35      	ldr	r3, [pc, #212]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f003 030c 	and.w	r3, r3, #12
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d017      	beq.n	8006d48 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006d18:	4b32      	ldr	r3, [pc, #200]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006d20:	2b08      	cmp	r3, #8
 8006d22:	d105      	bne.n	8006d30 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006d24:	4b2f      	ldr	r3, [pc, #188]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00b      	beq.n	8006d48 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d30:	4b2c      	ldr	r3, [pc, #176]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006d38:	2b0c      	cmp	r3, #12
 8006d3a:	d11c      	bne.n	8006d76 <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d3c:	4b29      	ldr	r3, [pc, #164]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d116      	bne.n	8006d76 <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d48:	4b26      	ldr	r3, [pc, #152]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d005      	beq.n	8006d60 <HAL_RCC_OscConfig+0x1ec>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d001      	beq.n	8006d60 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e25a      	b.n	8007216 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d60:	4b20      	ldr	r3, [pc, #128]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	491d      	ldr	r1, [pc, #116]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006d70:	4313      	orrs	r3, r2
 8006d72:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d74:	e040      	b.n	8006df8 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d020      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d7e:	4b1a      	ldr	r3, [pc, #104]	; (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006d80:	2201      	movs	r2, #1
 8006d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d84:	f7fa fbda 	bl	800153c <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d8a:	e008      	b.n	8006d9e <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d8c:	f7fa fbd6 	bl	800153c <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e23b      	b.n	8007216 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d9e:	4b11      	ldr	r3, [pc, #68]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0f0      	beq.n	8006d8c <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006daa:	4b0e      	ldr	r3, [pc, #56]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	490a      	ldr	r1, [pc, #40]	; (8006de4 <HAL_RCC_OscConfig+0x270>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	600b      	str	r3, [r1, #0]
 8006dbe:	e01b      	b.n	8006df8 <HAL_RCC_OscConfig+0x284>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dc0:	4b09      	ldr	r3, [pc, #36]	; (8006de8 <HAL_RCC_OscConfig+0x274>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc6:	f7fa fbb9 	bl	800153c <HAL_GetTick>
 8006dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dcc:	e00e      	b.n	8006dec <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dce:	f7fa fbb5 	bl	800153c <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d907      	bls.n	8006dec <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e21a      	b.n	8007216 <HAL_RCC_OscConfig+0x6a2>
 8006de0:	08009c5c 	.word	0x08009c5c
 8006de4:	40023800 	.word	0x40023800
 8006de8:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dec:	4b74      	ldr	r3, [pc, #464]	; (8006fc0 <HAL_RCC_OscConfig+0x44c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0302 	and.w	r3, r3, #2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1ea      	bne.n	8006dce <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0308 	and.w	r3, r3, #8
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d03d      	beq.n	8006e80 <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d008      	beq.n	8006e1e <HAL_RCC_OscConfig+0x2aa>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d004      	beq.n	8006e1e <HAL_RCC_OscConfig+0x2aa>
 8006e14:	f640 5194 	movw	r1, #3476	; 0xd94
 8006e18:	486a      	ldr	r0, [pc, #424]	; (8006fc4 <HAL_RCC_OscConfig+0x450>)
 8006e1a:	f7fa f86c 	bl	8000ef6 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d016      	beq.n	8006e54 <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e26:	4b68      	ldr	r3, [pc, #416]	; (8006fc8 <HAL_RCC_OscConfig+0x454>)
 8006e28:	2201      	movs	r2, #1
 8006e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e2c:	f7fa fb86 	bl	800153c <HAL_GetTick>
 8006e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e32:	e008      	b.n	8006e46 <HAL_RCC_OscConfig+0x2d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e34:	f7fa fb82 	bl	800153c <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d901      	bls.n	8006e46 <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e1e7      	b.n	8007216 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e46:	4b5e      	ldr	r3, [pc, #376]	; (8006fc0 <HAL_RCC_OscConfig+0x44c>)
 8006e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d0f0      	beq.n	8006e34 <HAL_RCC_OscConfig+0x2c0>
 8006e52:	e015      	b.n	8006e80 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e54:	4b5c      	ldr	r3, [pc, #368]	; (8006fc8 <HAL_RCC_OscConfig+0x454>)
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e5a:	f7fa fb6f 	bl	800153c <HAL_GetTick>
 8006e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e60:	e008      	b.n	8006e74 <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e62:	f7fa fb6b 	bl	800153c <HAL_GetTick>
 8006e66:	4602      	mov	r2, r0
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	d901      	bls.n	8006e74 <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e1d0      	b.n	8007216 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e74:	4b52      	ldr	r3, [pc, #328]	; (8006fc0 <HAL_RCC_OscConfig+0x44c>)
 8006e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1f0      	bne.n	8006e62 <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0304 	and.w	r3, r3, #4
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 80b0 	beq.w	8006fee <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00c      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x340>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d008      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x340>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	2b05      	cmp	r3, #5
 8006ea8:	d004      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x340>
 8006eaa:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8006eae:	4845      	ldr	r0, [pc, #276]	; (8006fc4 <HAL_RCC_OscConfig+0x450>)
 8006eb0:	f7fa f821 	bl	8000ef6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006eb4:	4b42      	ldr	r3, [pc, #264]	; (8006fc0 <HAL_RCC_OscConfig+0x44c>)
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10f      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60bb      	str	r3, [r7, #8]
 8006ec4:	4b3e      	ldr	r3, [pc, #248]	; (8006fc0 <HAL_RCC_OscConfig+0x44c>)
 8006ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec8:	4a3d      	ldr	r2, [pc, #244]	; (8006fc0 <HAL_RCC_OscConfig+0x44c>)
 8006eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ece:	6413      	str	r3, [r2, #64]	; 0x40
 8006ed0:	4b3b      	ldr	r3, [pc, #236]	; (8006fc0 <HAL_RCC_OscConfig+0x44c>)
 8006ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ed8:	60bb      	str	r3, [r7, #8]
 8006eda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006edc:	2301      	movs	r3, #1
 8006ede:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ee0:	4b3a      	ldr	r3, [pc, #232]	; (8006fcc <HAL_RCC_OscConfig+0x458>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d118      	bne.n	8006f1e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006eec:	4b37      	ldr	r3, [pc, #220]	; (8006fcc <HAL_RCC_OscConfig+0x458>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a36      	ldr	r2, [pc, #216]	; (8006fcc <HAL_RCC_OscConfig+0x458>)
 8006ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ef6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ef8:	f7fa fb20 	bl	800153c <HAL_GetTick>
 8006efc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006efe:	e008      	b.n	8006f12 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f00:	f7fa fb1c 	bl	800153c <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d901      	bls.n	8006f12 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e181      	b.n	8007216 <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f12:	4b2e      	ldr	r3, [pc, #184]	; (8006fcc <HAL_RCC_OscConfig+0x458>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0f0      	beq.n	8006f00 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d106      	bne.n	8006f34 <HAL_RCC_OscConfig+0x3c0>
 8006f26:	4b26      	ldr	r3, [pc, #152]	; (8006fc0 <HAL_RCC_OscConfig+0x44c>)
 8006f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2a:	4a25      	ldr	r2, [pc, #148]	; (8006fc0 <HAL_RCC_OscConfig+0x44c>)
 8006f2c:	f043 0301 	orr.w	r3, r3, #1
 8006f30:	6713      	str	r3, [r2, #112]	; 0x70
 8006f32:	e01c      	b.n	8006f6e <HAL_RCC_OscConfig+0x3fa>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	2b05      	cmp	r3, #5
 8006f3a:	d10c      	bne.n	8006f56 <HAL_RCC_OscConfig+0x3e2>
 8006f3c:	4b20      	ldr	r3, [pc, #128]	; (8006fc0 <HAL_RCC_OscConfig+0x44c>)
 8006f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f40:	4a1f      	ldr	r2, [pc, #124]	; (8006fc0 <HAL_RCC_OscConfig+0x44c>)
 8006f42:	f043 0304 	orr.w	r3, r3, #4
 8006f46:	6713      	str	r3, [r2, #112]	; 0x70
 8006f48:	4b1d      	ldr	r3, [pc, #116]	; (8006fc0 <HAL_RCC_OscConfig+0x44c>)
 8006f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4c:	4a1c      	ldr	r2, [pc, #112]	; (8006fc0 <HAL_RCC_OscConfig+0x44c>)
 8006f4e:	f043 0301 	orr.w	r3, r3, #1
 8006f52:	6713      	str	r3, [r2, #112]	; 0x70
 8006f54:	e00b      	b.n	8006f6e <HAL_RCC_OscConfig+0x3fa>
 8006f56:	4b1a      	ldr	r3, [pc, #104]	; (8006fc0 <HAL_RCC_OscConfig+0x44c>)
 8006f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f5a:	4a19      	ldr	r2, [pc, #100]	; (8006fc0 <HAL_RCC_OscConfig+0x44c>)
 8006f5c:	f023 0301 	bic.w	r3, r3, #1
 8006f60:	6713      	str	r3, [r2, #112]	; 0x70
 8006f62:	4b17      	ldr	r3, [pc, #92]	; (8006fc0 <HAL_RCC_OscConfig+0x44c>)
 8006f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f66:	4a16      	ldr	r2, [pc, #88]	; (8006fc0 <HAL_RCC_OscConfig+0x44c>)
 8006f68:	f023 0304 	bic.w	r3, r3, #4
 8006f6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d015      	beq.n	8006fa2 <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f76:	f7fa fae1 	bl	800153c <HAL_GetTick>
 8006f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f7c:	e00a      	b.n	8006f94 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f7e:	f7fa fadd 	bl	800153c <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d901      	bls.n	8006f94 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e140      	b.n	8007216 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f94:	4b0a      	ldr	r3, [pc, #40]	; (8006fc0 <HAL_RCC_OscConfig+0x44c>)
 8006f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d0ee      	beq.n	8006f7e <HAL_RCC_OscConfig+0x40a>
 8006fa0:	e01c      	b.n	8006fdc <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fa2:	f7fa facb 	bl	800153c <HAL_GetTick>
 8006fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fa8:	e012      	b.n	8006fd0 <HAL_RCC_OscConfig+0x45c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006faa:	f7fa fac7 	bl	800153c <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d909      	bls.n	8006fd0 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e12a      	b.n	8007216 <HAL_RCC_OscConfig+0x6a2>
 8006fc0:	40023800 	.word	0x40023800
 8006fc4:	08009c5c 	.word	0x08009c5c
 8006fc8:	42470e80 	.word	0x42470e80
 8006fcc:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006fd0:	4b93      	ldr	r3, [pc, #588]	; (8007220 <HAL_RCC_OscConfig+0x6ac>)
 8006fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1e6      	bne.n	8006faa <HAL_RCC_OscConfig+0x436>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fdc:	7dfb      	ldrb	r3, [r7, #23]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d105      	bne.n	8006fee <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fe2:	4b8f      	ldr	r3, [pc, #572]	; (8007220 <HAL_RCC_OscConfig+0x6ac>)
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe6:	4a8e      	ldr	r2, [pc, #568]	; (8007220 <HAL_RCC_OscConfig+0x6ac>)
 8006fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00c      	beq.n	8007010 <HAL_RCC_OscConfig+0x49c>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d008      	beq.n	8007010 <HAL_RCC_OscConfig+0x49c>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	2b02      	cmp	r3, #2
 8007004:	d004      	beq.n	8007010 <HAL_RCC_OscConfig+0x49c>
 8007006:	f640 6103 	movw	r1, #3587	; 0xe03
 800700a:	4886      	ldr	r0, [pc, #536]	; (8007224 <HAL_RCC_OscConfig+0x6b0>)
 800700c:	f7f9 ff73 	bl	8000ef6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 80fd 	beq.w	8007214 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800701a:	4b81      	ldr	r3, [pc, #516]	; (8007220 <HAL_RCC_OscConfig+0x6ac>)
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f003 030c 	and.w	r3, r3, #12
 8007022:	2b08      	cmp	r3, #8
 8007024:	f000 80b6 	beq.w	8007194 <HAL_RCC_OscConfig+0x620>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	2b02      	cmp	r3, #2
 800702e:	f040 809a 	bne.w	8007166 <HAL_RCC_OscConfig+0x5f2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d009      	beq.n	800704e <HAL_RCC_OscConfig+0x4da>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007042:	d004      	beq.n	800704e <HAL_RCC_OscConfig+0x4da>
 8007044:	f640 610c 	movw	r1, #3596	; 0xe0c
 8007048:	4876      	ldr	r0, [pc, #472]	; (8007224 <HAL_RCC_OscConfig+0x6b0>)
 800704a:	f7f9 ff54 	bl	8000ef6 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	2b3f      	cmp	r3, #63	; 0x3f
 8007054:	d904      	bls.n	8007060 <HAL_RCC_OscConfig+0x4ec>
 8007056:	f640 610d 	movw	r1, #3597	; 0xe0d
 800705a:	4872      	ldr	r0, [pc, #456]	; (8007224 <HAL_RCC_OscConfig+0x6b0>)
 800705c:	f7f9 ff4b 	bl	8000ef6 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	2b31      	cmp	r3, #49	; 0x31
 8007066:	d904      	bls.n	8007072 <HAL_RCC_OscConfig+0x4fe>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007070:	d904      	bls.n	800707c <HAL_RCC_OscConfig+0x508>
 8007072:	f640 610e 	movw	r1, #3598	; 0xe0e
 8007076:	486b      	ldr	r0, [pc, #428]	; (8007224 <HAL_RCC_OscConfig+0x6b0>)
 8007078:	f7f9 ff3d 	bl	8000ef6 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007080:	2b02      	cmp	r3, #2
 8007082:	d010      	beq.n	80070a6 <HAL_RCC_OscConfig+0x532>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007088:	2b04      	cmp	r3, #4
 800708a:	d00c      	beq.n	80070a6 <HAL_RCC_OscConfig+0x532>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007090:	2b06      	cmp	r3, #6
 8007092:	d008      	beq.n	80070a6 <HAL_RCC_OscConfig+0x532>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007098:	2b08      	cmp	r3, #8
 800709a:	d004      	beq.n	80070a6 <HAL_RCC_OscConfig+0x532>
 800709c:	f640 610f 	movw	r1, #3599	; 0xe0f
 80070a0:	4860      	ldr	r0, [pc, #384]	; (8007224 <HAL_RCC_OscConfig+0x6b0>)
 80070a2:	f7f9 ff28 	bl	8000ef6 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d903      	bls.n	80070b6 <HAL_RCC_OscConfig+0x542>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b2:	2b0f      	cmp	r3, #15
 80070b4:	d904      	bls.n	80070c0 <HAL_RCC_OscConfig+0x54c>
 80070b6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80070ba:	485a      	ldr	r0, [pc, #360]	; (8007224 <HAL_RCC_OscConfig+0x6b0>)
 80070bc:	f7f9 ff1b 	bl	8000ef6 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d903      	bls.n	80070d0 <HAL_RCC_OscConfig+0x55c>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070cc:	2b07      	cmp	r3, #7
 80070ce:	d904      	bls.n	80070da <HAL_RCC_OscConfig+0x566>
 80070d0:	f640 6111 	movw	r1, #3601	; 0xe11
 80070d4:	4853      	ldr	r0, [pc, #332]	; (8007224 <HAL_RCC_OscConfig+0x6b0>)
 80070d6:	f7f9 ff0e 	bl	8000ef6 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070da:	4b53      	ldr	r3, [pc, #332]	; (8007228 <HAL_RCC_OscConfig+0x6b4>)
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e0:	f7fa fa2c 	bl	800153c <HAL_GetTick>
 80070e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070e6:	e008      	b.n	80070fa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070e8:	f7fa fa28 	bl	800153c <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d901      	bls.n	80070fa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e08d      	b.n	8007216 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070fa:	4b49      	ldr	r3, [pc, #292]	; (8007220 <HAL_RCC_OscConfig+0x6ac>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1f0      	bne.n	80070e8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	69da      	ldr	r2, [r3, #28]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	431a      	orrs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	019b      	lsls	r3, r3, #6
 8007116:	431a      	orrs	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711c:	085b      	lsrs	r3, r3, #1
 800711e:	3b01      	subs	r3, #1
 8007120:	041b      	lsls	r3, r3, #16
 8007122:	431a      	orrs	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007128:	061b      	lsls	r3, r3, #24
 800712a:	431a      	orrs	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007130:	071b      	lsls	r3, r3, #28
 8007132:	493b      	ldr	r1, [pc, #236]	; (8007220 <HAL_RCC_OscConfig+0x6ac>)
 8007134:	4313      	orrs	r3, r2
 8007136:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007138:	4b3b      	ldr	r3, [pc, #236]	; (8007228 <HAL_RCC_OscConfig+0x6b4>)
 800713a:	2201      	movs	r2, #1
 800713c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713e:	f7fa f9fd 	bl	800153c <HAL_GetTick>
 8007142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007144:	e008      	b.n	8007158 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007146:	f7fa f9f9 	bl	800153c <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	2b02      	cmp	r3, #2
 8007152:	d901      	bls.n	8007158 <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e05e      	b.n	8007216 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007158:	4b31      	ldr	r3, [pc, #196]	; (8007220 <HAL_RCC_OscConfig+0x6ac>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d0f0      	beq.n	8007146 <HAL_RCC_OscConfig+0x5d2>
 8007164:	e056      	b.n	8007214 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007166:	4b30      	ldr	r3, [pc, #192]	; (8007228 <HAL_RCC_OscConfig+0x6b4>)
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800716c:	f7fa f9e6 	bl	800153c <HAL_GetTick>
 8007170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007172:	e008      	b.n	8007186 <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007174:	f7fa f9e2 	bl	800153c <HAL_GetTick>
 8007178:	4602      	mov	r2, r0
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	2b02      	cmp	r3, #2
 8007180:	d901      	bls.n	8007186 <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e047      	b.n	8007216 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007186:	4b26      	ldr	r3, [pc, #152]	; (8007220 <HAL_RCC_OscConfig+0x6ac>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1f0      	bne.n	8007174 <HAL_RCC_OscConfig+0x600>
 8007192:	e03f      	b.n	8007214 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d101      	bne.n	80071a0 <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e03a      	b.n	8007216 <HAL_RCC_OscConfig+0x6a2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071a0:	4b1f      	ldr	r3, [pc, #124]	; (8007220 <HAL_RCC_OscConfig+0x6ac>)
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d030      	beq.n	8007210 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d129      	bne.n	8007210 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d122      	bne.n	8007210 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80071d0:	4013      	ands	r3, r2
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071d8:	4293      	cmp	r3, r2
 80071da:	d119      	bne.n	8007210 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e6:	085b      	lsrs	r3, r3, #1
 80071e8:	3b01      	subs	r3, #1
 80071ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d10f      	bne.n	8007210 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d107      	bne.n	8007210 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800720c:	429a      	cmp	r2, r3
 800720e:	d001      	beq.n	8007214 <HAL_RCC_OscConfig+0x6a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e000      	b.n	8007216 <HAL_RCC_OscConfig+0x6a2>
        }
      }
    }
  }
  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	40023800 	.word	0x40023800
 8007224:	08009c5c 	.word	0x08009c5c
 8007228:	42470060 	.word	0x42470060

0800722c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e1a4      	b.n	8007588 <HAL_SPI_Init+0x35c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a72      	ldr	r2, [pc, #456]	; (800740c <HAL_SPI_Init+0x1e0>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d013      	beq.n	8007270 <HAL_SPI_Init+0x44>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a70      	ldr	r2, [pc, #448]	; (8007410 <HAL_SPI_Init+0x1e4>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d00e      	beq.n	8007270 <HAL_SPI_Init+0x44>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a6f      	ldr	r2, [pc, #444]	; (8007414 <HAL_SPI_Init+0x1e8>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d009      	beq.n	8007270 <HAL_SPI_Init+0x44>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a6d      	ldr	r2, [pc, #436]	; (8007418 <HAL_SPI_Init+0x1ec>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d004      	beq.n	8007270 <HAL_SPI_Init+0x44>
 8007266:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800726a:	486c      	ldr	r0, [pc, #432]	; (800741c <HAL_SPI_Init+0x1f0>)
 800726c:	f7f9 fe43 	bl	8000ef6 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d009      	beq.n	800728c <HAL_SPI_Init+0x60>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007280:	d004      	beq.n	800728c <HAL_SPI_Init+0x60>
 8007282:	f240 1141 	movw	r1, #321	; 0x141
 8007286:	4865      	ldr	r0, [pc, #404]	; (800741c <HAL_SPI_Init+0x1f0>)
 8007288:	f7f9 fe35 	bl	8000ef6 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00e      	beq.n	80072b2 <HAL_SPI_Init+0x86>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800729c:	d009      	beq.n	80072b2 <HAL_SPI_Init+0x86>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072a6:	d004      	beq.n	80072b2 <HAL_SPI_Init+0x86>
 80072a8:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80072ac:	485b      	ldr	r0, [pc, #364]	; (800741c <HAL_SPI_Init+0x1f0>)
 80072ae:	f7f9 fe22 	bl	8000ef6 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072ba:	d008      	beq.n	80072ce <HAL_SPI_Init+0xa2>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d004      	beq.n	80072ce <HAL_SPI_Init+0xa2>
 80072c4:	f240 1143 	movw	r1, #323	; 0x143
 80072c8:	4854      	ldr	r0, [pc, #336]	; (800741c <HAL_SPI_Init+0x1f0>)
 80072ca:	f7f9 fe14 	bl	8000ef6 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072d6:	d00d      	beq.n	80072f4 <HAL_SPI_Init+0xc8>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d009      	beq.n	80072f4 <HAL_SPI_Init+0xc8>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072e8:	d004      	beq.n	80072f4 <HAL_SPI_Init+0xc8>
 80072ea:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80072ee:	484b      	ldr	r0, [pc, #300]	; (800741c <HAL_SPI_Init+0x1f0>)
 80072f0:	f7f9 fe01 	bl	8000ef6 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d020      	beq.n	800733e <HAL_SPI_Init+0x112>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	69db      	ldr	r3, [r3, #28]
 8007300:	2b08      	cmp	r3, #8
 8007302:	d01c      	beq.n	800733e <HAL_SPI_Init+0x112>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	2b10      	cmp	r3, #16
 800730a:	d018      	beq.n	800733e <HAL_SPI_Init+0x112>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	69db      	ldr	r3, [r3, #28]
 8007310:	2b18      	cmp	r3, #24
 8007312:	d014      	beq.n	800733e <HAL_SPI_Init+0x112>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	2b20      	cmp	r3, #32
 800731a:	d010      	beq.n	800733e <HAL_SPI_Init+0x112>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	2b28      	cmp	r3, #40	; 0x28
 8007322:	d00c      	beq.n	800733e <HAL_SPI_Init+0x112>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	2b30      	cmp	r3, #48	; 0x30
 800732a:	d008      	beq.n	800733e <HAL_SPI_Init+0x112>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	2b38      	cmp	r3, #56	; 0x38
 8007332:	d004      	beq.n	800733e <HAL_SPI_Init+0x112>
 8007334:	f240 1145 	movw	r1, #325	; 0x145
 8007338:	4838      	ldr	r0, [pc, #224]	; (800741c <HAL_SPI_Init+0x1f0>)
 800733a:	f7f9 fddc 	bl	8000ef6 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d008      	beq.n	8007358 <HAL_SPI_Init+0x12c>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	2b80      	cmp	r3, #128	; 0x80
 800734c:	d004      	beq.n	8007358 <HAL_SPI_Init+0x12c>
 800734e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8007352:	4832      	ldr	r0, [pc, #200]	; (800741c <HAL_SPI_Init+0x1f0>)
 8007354:	f7f9 fdcf 	bl	8000ef6 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	2b00      	cmp	r3, #0
 800735e:	d008      	beq.n	8007372 <HAL_SPI_Init+0x146>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	2b10      	cmp	r3, #16
 8007366:	d004      	beq.n	8007372 <HAL_SPI_Init+0x146>
 8007368:	f240 1147 	movw	r1, #327	; 0x147
 800736c:	482b      	ldr	r0, [pc, #172]	; (800741c <HAL_SPI_Init+0x1f0>)
 800736e:	f7f9 fdc2 	bl	8000ef6 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007376:	2b00      	cmp	r3, #0
 8007378:	d152      	bne.n	8007420 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d008      	beq.n	8007394 <HAL_SPI_Init+0x168>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	2b02      	cmp	r3, #2
 8007388:	d004      	beq.n	8007394 <HAL_SPI_Init+0x168>
 800738a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800738e:	4823      	ldr	r0, [pc, #140]	; (800741c <HAL_SPI_Init+0x1f0>)
 8007390:	f7f9 fdb1 	bl	8000ef6 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d008      	beq.n	80073ae <HAL_SPI_Init+0x182>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d004      	beq.n	80073ae <HAL_SPI_Init+0x182>
 80073a4:	f240 114b 	movw	r1, #331	; 0x14b
 80073a8:	481c      	ldr	r0, [pc, #112]	; (800741c <HAL_SPI_Init+0x1f0>)
 80073aa:	f7f9 fda4 	bl	8000ef6 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073b6:	d125      	bne.n	8007404 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d05a      	beq.n	8007476 <HAL_SPI_Init+0x24a>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d056      	beq.n	8007476 <HAL_SPI_Init+0x24a>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	69db      	ldr	r3, [r3, #28]
 80073cc:	2b10      	cmp	r3, #16
 80073ce:	d052      	beq.n	8007476 <HAL_SPI_Init+0x24a>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	69db      	ldr	r3, [r3, #28]
 80073d4:	2b18      	cmp	r3, #24
 80073d6:	d04e      	beq.n	8007476 <HAL_SPI_Init+0x24a>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	2b20      	cmp	r3, #32
 80073de:	d04a      	beq.n	8007476 <HAL_SPI_Init+0x24a>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	2b28      	cmp	r3, #40	; 0x28
 80073e6:	d046      	beq.n	8007476 <HAL_SPI_Init+0x24a>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	69db      	ldr	r3, [r3, #28]
 80073ec:	2b30      	cmp	r3, #48	; 0x30
 80073ee:	d042      	beq.n	8007476 <HAL_SPI_Init+0x24a>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	2b38      	cmp	r3, #56	; 0x38
 80073f6:	d03e      	beq.n	8007476 <HAL_SPI_Init+0x24a>
 80073f8:	f240 114f 	movw	r1, #335	; 0x14f
 80073fc:	4807      	ldr	r0, [pc, #28]	; (800741c <HAL_SPI_Init+0x1f0>)
 80073fe:	f7f9 fd7a 	bl	8000ef6 <assert_failed>
 8007402:	e038      	b.n	8007476 <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	61da      	str	r2, [r3, #28]
 800740a:	e034      	b.n	8007476 <HAL_SPI_Init+0x24a>
 800740c:	40013000 	.word	0x40013000
 8007410:	40003800 	.word	0x40003800
 8007414:	40003c00 	.word	0x40003c00
 8007418:	40013400 	.word	0x40013400
 800741c:	08009c98 	.word	0x08009c98
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	69db      	ldr	r3, [r3, #28]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d020      	beq.n	800746a <HAL_SPI_Init+0x23e>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	2b08      	cmp	r3, #8
 800742e:	d01c      	beq.n	800746a <HAL_SPI_Init+0x23e>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	2b10      	cmp	r3, #16
 8007436:	d018      	beq.n	800746a <HAL_SPI_Init+0x23e>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	69db      	ldr	r3, [r3, #28]
 800743c:	2b18      	cmp	r3, #24
 800743e:	d014      	beq.n	800746a <HAL_SPI_Init+0x23e>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	2b20      	cmp	r3, #32
 8007446:	d010      	beq.n	800746a <HAL_SPI_Init+0x23e>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	69db      	ldr	r3, [r3, #28]
 800744c:	2b28      	cmp	r3, #40	; 0x28
 800744e:	d00c      	beq.n	800746a <HAL_SPI_Init+0x23e>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	2b30      	cmp	r3, #48	; 0x30
 8007456:	d008      	beq.n	800746a <HAL_SPI_Init+0x23e>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	69db      	ldr	r3, [r3, #28]
 800745c:	2b38      	cmp	r3, #56	; 0x38
 800745e:	d004      	beq.n	800746a <HAL_SPI_Init+0x23e>
 8007460:	f240 1159 	movw	r1, #345	; 0x159
 8007464:	484a      	ldr	r0, [pc, #296]	; (8007590 <HAL_SPI_Init+0x364>)
 8007466:	f7f9 fd46 	bl	8000ef6 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007482:	b2db      	uxtb	r3, r3
 8007484:	2b00      	cmp	r3, #0
 8007486:	d126      	bne.n	80074d6 <HAL_SPI_Init+0x2aa>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a40      	ldr	r2, [pc, #256]	; (8007594 <HAL_SPI_Init+0x368>)
 8007494:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a3f      	ldr	r2, [pc, #252]	; (8007598 <HAL_SPI_Init+0x36c>)
 800749a:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a3f      	ldr	r2, [pc, #252]	; (800759c <HAL_SPI_Init+0x370>)
 80074a0:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a3e      	ldr	r2, [pc, #248]	; (80075a0 <HAL_SPI_Init+0x374>)
 80074a6:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a3e      	ldr	r2, [pc, #248]	; (80075a4 <HAL_SPI_Init+0x378>)
 80074ac:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a3d      	ldr	r2, [pc, #244]	; (80075a8 <HAL_SPI_Init+0x37c>)
 80074b2:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a3d      	ldr	r2, [pc, #244]	; (80075ac <HAL_SPI_Init+0x380>)
 80074b8:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a3c      	ldr	r2, [pc, #240]	; (80075b0 <HAL_SPI_Init+0x384>)
 80074be:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d102      	bne.n	80074ce <HAL_SPI_Init+0x2a2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a3a      	ldr	r2, [pc, #232]	; (80075b4 <HAL_SPI_Init+0x388>)
 80074cc:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2202      	movs	r2, #2
 80074da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074fe:	431a      	orrs	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007508:	431a      	orrs	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	431a      	orrs	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	431a      	orrs	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007526:	431a      	orrs	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007530:	431a      	orrs	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800753a:	ea42 0103 	orr.w	r1, r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007542:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	430a      	orrs	r2, r1
 800754c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	0c1b      	lsrs	r3, r3, #16
 8007554:	f003 0104 	and.w	r1, r3, #4
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	f003 0210 	and.w	r2, r3, #16
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	430a      	orrs	r2, r1
 8007566:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	69da      	ldr	r2, [r3, #28]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007576:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	08009c98 	.word	0x08009c98
 8007594:	080077b9 	.word	0x080077b9
 8007598:	080077cd 	.word	0x080077cd
 800759c:	080077e1 	.word	0x080077e1
 80075a0:	080077f5 	.word	0x080077f5
 80075a4:	08007809 	.word	0x08007809
 80075a8:	0800781d 	.word	0x0800781d
 80075ac:	08007831 	.word	0x08007831
 80075b0:	08007845 	.word	0x08007845
 80075b4:	08000f79 	.word	0x08000f79

080075b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	099b      	lsrs	r3, r3, #6
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10f      	bne.n	80075fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00a      	beq.n	80075fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	099b      	lsrs	r3, r3, #6
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d004      	beq.n	80075fc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	4798      	blx	r3
    return;
 80075fa:	e0d8      	b.n	80077ae <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	085b      	lsrs	r3, r3, #1
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00a      	beq.n	800761e <HAL_SPI_IRQHandler+0x66>
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	09db      	lsrs	r3, r3, #7
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	2b00      	cmp	r3, #0
 8007612:	d004      	beq.n	800761e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	4798      	blx	r3
    return;
 800761c:	e0c7      	b.n	80077ae <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	095b      	lsrs	r3, r3, #5
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10c      	bne.n	8007644 <HAL_SPI_IRQHandler+0x8c>
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	099b      	lsrs	r3, r3, #6
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	d106      	bne.n	8007644 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	0a1b      	lsrs	r3, r3, #8
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 80b5 	beq.w	80077ae <HAL_SPI_IRQHandler+0x1f6>
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	095b      	lsrs	r3, r3, #5
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 80ae 	beq.w	80077ae <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	099b      	lsrs	r3, r3, #6
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	2b00      	cmp	r3, #0
 800765c:	d023      	beq.n	80076a6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b03      	cmp	r3, #3
 8007668:	d011      	beq.n	800768e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800766e:	f043 0204 	orr.w	r2, r3, #4
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007676:	2300      	movs	r3, #0
 8007678:	617b      	str	r3, [r7, #20]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	617b      	str	r3, [r7, #20]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	617b      	str	r3, [r7, #20]
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	e00b      	b.n	80076a6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800768e:	2300      	movs	r3, #0
 8007690:	613b      	str	r3, [r7, #16]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	613b      	str	r3, [r7, #16]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	613b      	str	r3, [r7, #16]
 80076a2:	693b      	ldr	r3, [r7, #16]
        return;
 80076a4:	e083      	b.n	80077ae <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	095b      	lsrs	r3, r3, #5
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d014      	beq.n	80076dc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b6:	f043 0201 	orr.w	r2, r3, #1
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80076be:	2300      	movs	r3, #0
 80076c0:	60fb      	str	r3, [r7, #12]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	60fb      	str	r3, [r7, #12]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	0a1b      	lsrs	r3, r3, #8
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00c      	beq.n	8007702 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ec:	f043 0208 	orr.w	r2, r3, #8
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80076f4:	2300      	movs	r3, #0
 80076f6:	60bb      	str	r3, [r7, #8]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	60bb      	str	r3, [r7, #8]
 8007700:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007706:	2b00      	cmp	r3, #0
 8007708:	d050      	beq.n	80077ac <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007718:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	2b00      	cmp	r3, #0
 800772a:	d104      	bne.n	8007736 <HAL_SPI_IRQHandler+0x17e>
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	d034      	beq.n	80077a0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685a      	ldr	r2, [r3, #4]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 0203 	bic.w	r2, r2, #3
 8007744:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800774a:	2b00      	cmp	r3, #0
 800774c:	d011      	beq.n	8007772 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007752:	4a18      	ldr	r2, [pc, #96]	; (80077b4 <HAL_SPI_IRQHandler+0x1fc>)
 8007754:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800775a:	4618      	mov	r0, r3
 800775c:	f7fb fac4 	bl	8002ce8 <HAL_DMA_Abort_IT>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d005      	beq.n	8007772 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007776:	2b00      	cmp	r3, #0
 8007778:	d017      	beq.n	80077aa <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800777e:	4a0d      	ldr	r2, [pc, #52]	; (80077b4 <HAL_SPI_IRQHandler+0x1fc>)
 8007780:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007786:	4618      	mov	r0, r3
 8007788:	f7fb faae 	bl	8002ce8 <HAL_DMA_Abort_IT>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00b      	beq.n	80077aa <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007796:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800779e:	e004      	b.n	80077aa <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80077a8:	e000      	b.n	80077ac <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 80077aa:	bf00      	nop
    return;
 80077ac:	bf00      	nop
  }
}
 80077ae:	3720      	adds	r7, #32
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	08007859 	.word	0x08007859

080077b8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007864:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800787a:	bf00      	nop
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
	...

08007884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e0c5      	b.n	8007a22 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a64      	ldr	r2, [pc, #400]	; (8007a2c <HAL_TIM_Base_Init+0x1a8>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d045      	beq.n	800792c <HAL_TIM_Base_Init+0xa8>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078a8:	d040      	beq.n	800792c <HAL_TIM_Base_Init+0xa8>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a60      	ldr	r2, [pc, #384]	; (8007a30 <HAL_TIM_Base_Init+0x1ac>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d03b      	beq.n	800792c <HAL_TIM_Base_Init+0xa8>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a5e      	ldr	r2, [pc, #376]	; (8007a34 <HAL_TIM_Base_Init+0x1b0>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d036      	beq.n	800792c <HAL_TIM_Base_Init+0xa8>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a5d      	ldr	r2, [pc, #372]	; (8007a38 <HAL_TIM_Base_Init+0x1b4>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d031      	beq.n	800792c <HAL_TIM_Base_Init+0xa8>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a5b      	ldr	r2, [pc, #364]	; (8007a3c <HAL_TIM_Base_Init+0x1b8>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d02c      	beq.n	800792c <HAL_TIM_Base_Init+0xa8>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a5a      	ldr	r2, [pc, #360]	; (8007a40 <HAL_TIM_Base_Init+0x1bc>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d027      	beq.n	800792c <HAL_TIM_Base_Init+0xa8>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a58      	ldr	r2, [pc, #352]	; (8007a44 <HAL_TIM_Base_Init+0x1c0>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d022      	beq.n	800792c <HAL_TIM_Base_Init+0xa8>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a57      	ldr	r2, [pc, #348]	; (8007a48 <HAL_TIM_Base_Init+0x1c4>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d01d      	beq.n	800792c <HAL_TIM_Base_Init+0xa8>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a55      	ldr	r2, [pc, #340]	; (8007a4c <HAL_TIM_Base_Init+0x1c8>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d018      	beq.n	800792c <HAL_TIM_Base_Init+0xa8>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a54      	ldr	r2, [pc, #336]	; (8007a50 <HAL_TIM_Base_Init+0x1cc>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d013      	beq.n	800792c <HAL_TIM_Base_Init+0xa8>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a52      	ldr	r2, [pc, #328]	; (8007a54 <HAL_TIM_Base_Init+0x1d0>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d00e      	beq.n	800792c <HAL_TIM_Base_Init+0xa8>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a51      	ldr	r2, [pc, #324]	; (8007a58 <HAL_TIM_Base_Init+0x1d4>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d009      	beq.n	800792c <HAL_TIM_Base_Init+0xa8>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a4f      	ldr	r2, [pc, #316]	; (8007a5c <HAL_TIM_Base_Init+0x1d8>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d004      	beq.n	800792c <HAL_TIM_Base_Init+0xa8>
 8007922:	f240 1113 	movw	r1, #275	; 0x113
 8007926:	484e      	ldr	r0, [pc, #312]	; (8007a60 <HAL_TIM_Base_Init+0x1dc>)
 8007928:	f7f9 fae5 	bl	8000ef6 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d014      	beq.n	800795e <HAL_TIM_Base_Init+0xda>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	2b10      	cmp	r3, #16
 800793a:	d010      	beq.n	800795e <HAL_TIM_Base_Init+0xda>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	2b20      	cmp	r3, #32
 8007942:	d00c      	beq.n	800795e <HAL_TIM_Base_Init+0xda>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	2b40      	cmp	r3, #64	; 0x40
 800794a:	d008      	beq.n	800795e <HAL_TIM_Base_Init+0xda>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	2b60      	cmp	r3, #96	; 0x60
 8007952:	d004      	beq.n	800795e <HAL_TIM_Base_Init+0xda>
 8007954:	f44f 718a 	mov.w	r1, #276	; 0x114
 8007958:	4841      	ldr	r0, [pc, #260]	; (8007a60 <HAL_TIM_Base_Init+0x1dc>)
 800795a:	f7f9 facc 	bl	8000ef6 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00e      	beq.n	8007984 <HAL_TIM_Base_Init+0x100>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800796e:	d009      	beq.n	8007984 <HAL_TIM_Base_Init+0x100>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007978:	d004      	beq.n	8007984 <HAL_TIM_Base_Init+0x100>
 800797a:	f240 1115 	movw	r1, #277	; 0x115
 800797e:	4838      	ldr	r0, [pc, #224]	; (8007a60 <HAL_TIM_Base_Init+0x1dc>)
 8007980:	f7f9 fab9 	bl	8000ef6 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d008      	beq.n	800799e <HAL_TIM_Base_Init+0x11a>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	2b80      	cmp	r3, #128	; 0x80
 8007992:	d004      	beq.n	800799e <HAL_TIM_Base_Init+0x11a>
 8007994:	f44f 718b 	mov.w	r1, #278	; 0x116
 8007998:	4831      	ldr	r0, [pc, #196]	; (8007a60 <HAL_TIM_Base_Init+0x1dc>)
 800799a:	f7f9 faac 	bl	8000ef6 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d106      	bne.n	80079b8 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f856 	bl	8007a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2202      	movs	r2, #2
 80079bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3304      	adds	r3, #4
 80079c8:	4619      	mov	r1, r3
 80079ca:	4610      	mov	r0, r2
 80079cc:	f000 fa4a 	bl	8007e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	40010000 	.word	0x40010000
 8007a30:	40000400 	.word	0x40000400
 8007a34:	40000800 	.word	0x40000800
 8007a38:	40000c00 	.word	0x40000c00
 8007a3c:	40001000 	.word	0x40001000
 8007a40:	40001400 	.word	0x40001400
 8007a44:	40010400 	.word	0x40010400
 8007a48:	40014000 	.word	0x40014000
 8007a4c:	40014400 	.word	0x40014400
 8007a50:	40014800 	.word	0x40014800
 8007a54:	40001800 	.word	0x40001800
 8007a58:	40001c00 	.word	0x40001c00
 8007a5c:	40002000 	.word	0x40002000
 8007a60:	08009cd0 	.word	0x08009cd0

08007a64 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a51      	ldr	r2, [pc, #324]	; (8007bcc <HAL_TIM_Base_Start_IT+0x154>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d045      	beq.n	8007b16 <HAL_TIM_Base_Start_IT+0x9e>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a92:	d040      	beq.n	8007b16 <HAL_TIM_Base_Start_IT+0x9e>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a4d      	ldr	r2, [pc, #308]	; (8007bd0 <HAL_TIM_Base_Start_IT+0x158>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d03b      	beq.n	8007b16 <HAL_TIM_Base_Start_IT+0x9e>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a4c      	ldr	r2, [pc, #304]	; (8007bd4 <HAL_TIM_Base_Start_IT+0x15c>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d036      	beq.n	8007b16 <HAL_TIM_Base_Start_IT+0x9e>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a4a      	ldr	r2, [pc, #296]	; (8007bd8 <HAL_TIM_Base_Start_IT+0x160>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d031      	beq.n	8007b16 <HAL_TIM_Base_Start_IT+0x9e>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a49      	ldr	r2, [pc, #292]	; (8007bdc <HAL_TIM_Base_Start_IT+0x164>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d02c      	beq.n	8007b16 <HAL_TIM_Base_Start_IT+0x9e>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a47      	ldr	r2, [pc, #284]	; (8007be0 <HAL_TIM_Base_Start_IT+0x168>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d027      	beq.n	8007b16 <HAL_TIM_Base_Start_IT+0x9e>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a46      	ldr	r2, [pc, #280]	; (8007be4 <HAL_TIM_Base_Start_IT+0x16c>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d022      	beq.n	8007b16 <HAL_TIM_Base_Start_IT+0x9e>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a44      	ldr	r2, [pc, #272]	; (8007be8 <HAL_TIM_Base_Start_IT+0x170>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d01d      	beq.n	8007b16 <HAL_TIM_Base_Start_IT+0x9e>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a43      	ldr	r2, [pc, #268]	; (8007bec <HAL_TIM_Base_Start_IT+0x174>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d018      	beq.n	8007b16 <HAL_TIM_Base_Start_IT+0x9e>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a41      	ldr	r2, [pc, #260]	; (8007bf0 <HAL_TIM_Base_Start_IT+0x178>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d013      	beq.n	8007b16 <HAL_TIM_Base_Start_IT+0x9e>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a40      	ldr	r2, [pc, #256]	; (8007bf4 <HAL_TIM_Base_Start_IT+0x17c>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d00e      	beq.n	8007b16 <HAL_TIM_Base_Start_IT+0x9e>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a3e      	ldr	r2, [pc, #248]	; (8007bf8 <HAL_TIM_Base_Start_IT+0x180>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d009      	beq.n	8007b16 <HAL_TIM_Base_Start_IT+0x9e>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a3d      	ldr	r2, [pc, #244]	; (8007bfc <HAL_TIM_Base_Start_IT+0x184>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d004      	beq.n	8007b16 <HAL_TIM_Base_Start_IT+0x9e>
 8007b0c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8007b10:	483b      	ldr	r0, [pc, #236]	; (8007c00 <HAL_TIM_Base_Start_IT+0x188>)
 8007b12:	f7f9 f9f0 	bl	8000ef6 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d001      	beq.n	8007b26 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e04e      	b.n	8007bc4 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2202      	movs	r2, #2
 8007b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68da      	ldr	r2, [r3, #12]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f042 0201 	orr.w	r2, r2, #1
 8007b3c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a22      	ldr	r2, [pc, #136]	; (8007bcc <HAL_TIM_Base_Start_IT+0x154>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d022      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0x116>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b50:	d01d      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0x116>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a1e      	ldr	r2, [pc, #120]	; (8007bd0 <HAL_TIM_Base_Start_IT+0x158>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d018      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0x116>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a1c      	ldr	r2, [pc, #112]	; (8007bd4 <HAL_TIM_Base_Start_IT+0x15c>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d013      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0x116>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a1b      	ldr	r2, [pc, #108]	; (8007bd8 <HAL_TIM_Base_Start_IT+0x160>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d00e      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0x116>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a1b      	ldr	r2, [pc, #108]	; (8007be4 <HAL_TIM_Base_Start_IT+0x16c>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d009      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0x116>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a1a      	ldr	r2, [pc, #104]	; (8007be8 <HAL_TIM_Base_Start_IT+0x170>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d004      	beq.n	8007b8e <HAL_TIM_Base_Start_IT+0x116>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a1a      	ldr	r2, [pc, #104]	; (8007bf4 <HAL_TIM_Base_Start_IT+0x17c>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d111      	bne.n	8007bb2 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f003 0307 	and.w	r3, r3, #7
 8007b98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2b06      	cmp	r3, #6
 8007b9e:	d010      	beq.n	8007bc2 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f042 0201 	orr.w	r2, r2, #1
 8007bae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bb0:	e007      	b.n	8007bc2 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f042 0201 	orr.w	r2, r2, #1
 8007bc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	40010000 	.word	0x40010000
 8007bd0:	40000400 	.word	0x40000400
 8007bd4:	40000800 	.word	0x40000800
 8007bd8:	40000c00 	.word	0x40000c00
 8007bdc:	40001000 	.word	0x40001000
 8007be0:	40001400 	.word	0x40001400
 8007be4:	40010400 	.word	0x40010400
 8007be8:	40014000 	.word	0x40014000
 8007bec:	40014400 	.word	0x40014400
 8007bf0:	40014800 	.word	0x40014800
 8007bf4:	40001800 	.word	0x40001800
 8007bf8:	40001c00 	.word	0x40001c00
 8007bfc:	40002000 	.word	0x40002000
 8007c00:	08009cd0 	.word	0x08009cd0

08007c04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d122      	bne.n	8007c60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d11b      	bne.n	8007c60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f06f 0202 	mvn.w	r2, #2
 8007c30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	f003 0303 	and.w	r3, r3, #3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f8ee 	bl	8007e28 <HAL_TIM_IC_CaptureCallback>
 8007c4c:	e005      	b.n	8007c5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f8e0 	bl	8007e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f8f1 	bl	8007e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	f003 0304 	and.w	r3, r3, #4
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d122      	bne.n	8007cb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b04      	cmp	r3, #4
 8007c7a:	d11b      	bne.n	8007cb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f06f 0204 	mvn.w	r2, #4
 8007c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f8c4 	bl	8007e28 <HAL_TIM_IC_CaptureCallback>
 8007ca0:	e005      	b.n	8007cae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f8b6 	bl	8007e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f8c7 	bl	8007e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	f003 0308 	and.w	r3, r3, #8
 8007cbe:	2b08      	cmp	r3, #8
 8007cc0:	d122      	bne.n	8007d08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	f003 0308 	and.w	r3, r3, #8
 8007ccc:	2b08      	cmp	r3, #8
 8007cce:	d11b      	bne.n	8007d08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f06f 0208 	mvn.w	r2, #8
 8007cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2204      	movs	r2, #4
 8007cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	f003 0303 	and.w	r3, r3, #3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f89a 	bl	8007e28 <HAL_TIM_IC_CaptureCallback>
 8007cf4:	e005      	b.n	8007d02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f88c 	bl	8007e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f89d 	bl	8007e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	f003 0310 	and.w	r3, r3, #16
 8007d12:	2b10      	cmp	r3, #16
 8007d14:	d122      	bne.n	8007d5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	f003 0310 	and.w	r3, r3, #16
 8007d20:	2b10      	cmp	r3, #16
 8007d22:	d11b      	bne.n	8007d5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f06f 0210 	mvn.w	r2, #16
 8007d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2208      	movs	r2, #8
 8007d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d003      	beq.n	8007d4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f870 	bl	8007e28 <HAL_TIM_IC_CaptureCallback>
 8007d48:	e005      	b.n	8007d56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f862 	bl	8007e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f873 	bl	8007e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	f003 0301 	and.w	r3, r3, #1
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d10e      	bne.n	8007d88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d107      	bne.n	8007d88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f06f 0201 	mvn.w	r2, #1
 8007d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f7f9 f8a0 	bl	8000ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d92:	2b80      	cmp	r3, #128	; 0x80
 8007d94:	d10e      	bne.n	8007db4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da0:	2b80      	cmp	r3, #128	; 0x80
 8007da2:	d107      	bne.n	8007db4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f902 	bl	8007fb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dbe:	2b40      	cmp	r3, #64	; 0x40
 8007dc0:	d10e      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dcc:	2b40      	cmp	r3, #64	; 0x40
 8007dce:	d107      	bne.n	8007de0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f838 	bl	8007e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	f003 0320 	and.w	r3, r3, #32
 8007dea:	2b20      	cmp	r3, #32
 8007dec:	d10e      	bne.n	8007e0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	f003 0320 	and.w	r3, r3, #32
 8007df8:	2b20      	cmp	r3, #32
 8007dfa:	d107      	bne.n	8007e0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f06f 0220 	mvn.w	r2, #32
 8007e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f8cc 	bl	8007fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e0c:	bf00      	nop
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a40      	ldr	r2, [pc, #256]	; (8007f78 <TIM_Base_SetConfig+0x114>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d013      	beq.n	8007ea4 <TIM_Base_SetConfig+0x40>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e82:	d00f      	beq.n	8007ea4 <TIM_Base_SetConfig+0x40>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a3d      	ldr	r2, [pc, #244]	; (8007f7c <TIM_Base_SetConfig+0x118>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d00b      	beq.n	8007ea4 <TIM_Base_SetConfig+0x40>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a3c      	ldr	r2, [pc, #240]	; (8007f80 <TIM_Base_SetConfig+0x11c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d007      	beq.n	8007ea4 <TIM_Base_SetConfig+0x40>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a3b      	ldr	r2, [pc, #236]	; (8007f84 <TIM_Base_SetConfig+0x120>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d003      	beq.n	8007ea4 <TIM_Base_SetConfig+0x40>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a3a      	ldr	r2, [pc, #232]	; (8007f88 <TIM_Base_SetConfig+0x124>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d108      	bne.n	8007eb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a2f      	ldr	r2, [pc, #188]	; (8007f78 <TIM_Base_SetConfig+0x114>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d02b      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ec4:	d027      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a2c      	ldr	r2, [pc, #176]	; (8007f7c <TIM_Base_SetConfig+0x118>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d023      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a2b      	ldr	r2, [pc, #172]	; (8007f80 <TIM_Base_SetConfig+0x11c>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d01f      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a2a      	ldr	r2, [pc, #168]	; (8007f84 <TIM_Base_SetConfig+0x120>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d01b      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a29      	ldr	r2, [pc, #164]	; (8007f88 <TIM_Base_SetConfig+0x124>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d017      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a28      	ldr	r2, [pc, #160]	; (8007f8c <TIM_Base_SetConfig+0x128>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d013      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a27      	ldr	r2, [pc, #156]	; (8007f90 <TIM_Base_SetConfig+0x12c>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d00f      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a26      	ldr	r2, [pc, #152]	; (8007f94 <TIM_Base_SetConfig+0x130>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d00b      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a25      	ldr	r2, [pc, #148]	; (8007f98 <TIM_Base_SetConfig+0x134>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d007      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a24      	ldr	r2, [pc, #144]	; (8007f9c <TIM_Base_SetConfig+0x138>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d003      	beq.n	8007f16 <TIM_Base_SetConfig+0xb2>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a23      	ldr	r2, [pc, #140]	; (8007fa0 <TIM_Base_SetConfig+0x13c>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d108      	bne.n	8007f28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	689a      	ldr	r2, [r3, #8]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a0a      	ldr	r2, [pc, #40]	; (8007f78 <TIM_Base_SetConfig+0x114>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d003      	beq.n	8007f5c <TIM_Base_SetConfig+0xf8>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a0c      	ldr	r2, [pc, #48]	; (8007f88 <TIM_Base_SetConfig+0x124>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d103      	bne.n	8007f64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	691a      	ldr	r2, [r3, #16]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	615a      	str	r2, [r3, #20]
}
 8007f6a:	bf00      	nop
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	40010000 	.word	0x40010000
 8007f7c:	40000400 	.word	0x40000400
 8007f80:	40000800 	.word	0x40000800
 8007f84:	40000c00 	.word	0x40000c00
 8007f88:	40010400 	.word	0x40010400
 8007f8c:	40014000 	.word	0x40014000
 8007f90:	40014400 	.word	0x40014400
 8007f94:	40014800 	.word	0x40014800
 8007f98:	40001800 	.word	0x40001800
 8007f9c:	40001c00 	.word	0x40001c00
 8007fa0:	40002000 	.word	0x40002000

08007fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fe2:	d10e      	bne.n	8008002 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d107      	bne.n	8008002 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f06f 0201 	mvn.w	r2, #1
 8007ffa:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f804 	bl	800800a <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8008002:	bf00      	nop
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 8008012:	bf00      	nop
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr

0800801e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800801e:	b480      	push	{r7}
 8008020:	b085      	sub	sp, #20
 8008022:	af00      	add	r7, sp, #0
 8008024:	4603      	mov	r3, r0
 8008026:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008028:	2300      	movs	r3, #0
 800802a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800802c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008030:	2b84      	cmp	r3, #132	; 0x84
 8008032:	d005      	beq.n	8008040 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008034:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	4413      	add	r3, r2
 800803c:	3303      	adds	r3, #3
 800803e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008040:	68fb      	ldr	r3, [r7, #12]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008052:	f000 fc57 	bl	8008904 <vTaskStartScheduler>
  
  return osOK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	bd80      	pop	{r7, pc}

0800805c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800805c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800805e:	b089      	sub	sp, #36	; 0x24
 8008060:	af04      	add	r7, sp, #16
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d020      	beq.n	80080b0 <osThreadCreate+0x54>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d01c      	beq.n	80080b0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685c      	ldr	r4, [r3, #4]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681d      	ldr	r5, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	691e      	ldr	r6, [r3, #16]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008088:	4618      	mov	r0, r3
 800808a:	f7ff ffc8 	bl	800801e <makeFreeRtosPriority>
 800808e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008098:	9202      	str	r2, [sp, #8]
 800809a:	9301      	str	r3, [sp, #4]
 800809c:	9100      	str	r1, [sp, #0]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	4632      	mov	r2, r6
 80080a2:	4629      	mov	r1, r5
 80080a4:	4620      	mov	r0, r4
 80080a6:	f000 fa4e 	bl	8008546 <xTaskCreateStatic>
 80080aa:	4603      	mov	r3, r0
 80080ac:	60fb      	str	r3, [r7, #12]
 80080ae:	e01c      	b.n	80080ea <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685c      	ldr	r4, [r3, #4]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80080bc:	b29e      	uxth	r6, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7ff ffaa 	bl	800801e <makeFreeRtosPriority>
 80080ca:	4602      	mov	r2, r0
 80080cc:	f107 030c 	add.w	r3, r7, #12
 80080d0:	9301      	str	r3, [sp, #4]
 80080d2:	9200      	str	r2, [sp, #0]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	4632      	mov	r2, r6
 80080d8:	4629      	mov	r1, r5
 80080da:	4620      	mov	r0, r4
 80080dc:	f000 fa90 	bl	8008600 <xTaskCreate>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d001      	beq.n	80080ea <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80080e6:	2300      	movs	r3, #0
 80080e8:	e000      	b.n	80080ec <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80080ea:	68fb      	ldr	r3, [r7, #12]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080f4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d001      	beq.n	800810a <osDelay+0x16>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	e000      	b.n	800810c <osDelay+0x18>
 800810a:	2301      	movs	r3, #1
 800810c:	4618      	mov	r0, r3
 800810e:	f000 fbc5 	bl	800889c <vTaskDelay>
  
  return osOK;
 8008112:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800811c:	b590      	push	{r4, r7, lr}
 800811e:	b085      	sub	sp, #20
 8008120:	af02      	add	r7, sp, #8
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d011      	beq.n	8008152 <osMessageCreate+0x36>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00d      	beq.n	8008152 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6818      	ldr	r0, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6859      	ldr	r1, [r3, #4]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	689a      	ldr	r2, [r3, #8]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	2400      	movs	r4, #0
 8008148:	9400      	str	r4, [sp, #0]
 800814a:	f000 f92b 	bl	80083a4 <xQueueGenericCreateStatic>
 800814e:	4603      	mov	r3, r0
 8008150:	e008      	b.n	8008164 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6818      	ldr	r0, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	4619      	mov	r1, r3
 800815e:	f000 f999 	bl	8008494 <xQueueGenericCreate>
 8008162:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008164:	4618      	mov	r0, r3
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	bd90      	pop	{r4, r7, pc}

0800816c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f103 0208 	add.w	r2, r3, #8
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f04f 32ff 	mov.w	r2, #4294967295
 8008184:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f103 0208 	add.w	r2, r3, #8
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f103 0208 	add.w	r2, r3, #8
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80081ba:	bf00      	nop
 80081bc:	370c      	adds	r7, #12
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081c6:	b480      	push	{r7}
 80081c8:	b085      	sub	sp, #20
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	689a      	ldr	r2, [r3, #8]
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	683a      	ldr	r2, [r7, #0]
 80081ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	1c5a      	adds	r2, r3, #1
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	601a      	str	r2, [r3, #0]
}
 8008202:	bf00      	nop
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800820e:	b480      	push	{r7}
 8008210:	b085      	sub	sp, #20
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008224:	d103      	bne.n	800822e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	60fb      	str	r3, [r7, #12]
 800822c:	e00c      	b.n	8008248 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	3308      	adds	r3, #8
 8008232:	60fb      	str	r3, [r7, #12]
 8008234:	e002      	b.n	800823c <vListInsert+0x2e>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	429a      	cmp	r2, r3
 8008246:	d2f6      	bcs.n	8008236 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	683a      	ldr	r2, [r7, #0]
 8008256:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	1c5a      	adds	r2, r3, #1
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	601a      	str	r2, [r3, #0]
}
 8008274:	bf00      	nop
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	6892      	ldr	r2, [r2, #8]
 8008296:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	6852      	ldr	r2, [r2, #4]
 80082a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d103      	bne.n	80082b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	689a      	ldr	r2, [r3, #8]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	1e5a      	subs	r2, r3, #1
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10a      	bne.n	80082fe <xQueueGenericReset+0x2a>
	__asm volatile
 80082e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	60bb      	str	r3, [r7, #8]
}
 80082fa:	bf00      	nop
 80082fc:	e7fe      	b.n	80082fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80082fe:	f001 f801 	bl	8009304 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800830a:	68f9      	ldr	r1, [r7, #12]
 800830c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800830e:	fb01 f303 	mul.w	r3, r1, r3
 8008312:	441a      	add	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832e:	3b01      	subs	r3, #1
 8008330:	68f9      	ldr	r1, [r7, #12]
 8008332:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008334:	fb01 f303 	mul.w	r3, r1, r3
 8008338:	441a      	add	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	22ff      	movs	r2, #255	; 0xff
 8008342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	22ff      	movs	r2, #255	; 0xff
 800834a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d114      	bne.n	800837e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d01a      	beq.n	8008392 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	3310      	adds	r3, #16
 8008360:	4618      	mov	r0, r3
 8008362:	f000 fcfd 	bl	8008d60 <xTaskRemoveFromEventList>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d012      	beq.n	8008392 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800836c:	4b0c      	ldr	r3, [pc, #48]	; (80083a0 <xQueueGenericReset+0xcc>)
 800836e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008372:	601a      	str	r2, [r3, #0]
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	e009      	b.n	8008392 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3310      	adds	r3, #16
 8008382:	4618      	mov	r0, r3
 8008384:	f7ff fef2 	bl	800816c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	3324      	adds	r3, #36	; 0x24
 800838c:	4618      	mov	r0, r3
 800838e:	f7ff feed 	bl	800816c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008392:	f000 ffe7 	bl	8009364 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008396:	2301      	movs	r3, #1
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	e000ed04 	.word	0xe000ed04

080083a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b08e      	sub	sp, #56	; 0x38
 80083a8:	af02      	add	r7, sp, #8
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
 80083b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10a      	bne.n	80083ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80083b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083bc:	f383 8811 	msr	BASEPRI, r3
 80083c0:	f3bf 8f6f 	isb	sy
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083ca:	bf00      	nop
 80083cc:	e7fe      	b.n	80083cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10a      	bne.n	80083ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80083d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d8:	f383 8811 	msr	BASEPRI, r3
 80083dc:	f3bf 8f6f 	isb	sy
 80083e0:	f3bf 8f4f 	dsb	sy
 80083e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083e6:	bf00      	nop
 80083e8:	e7fe      	b.n	80083e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d002      	beq.n	80083f6 <xQueueGenericCreateStatic+0x52>
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d001      	beq.n	80083fa <xQueueGenericCreateStatic+0x56>
 80083f6:	2301      	movs	r3, #1
 80083f8:	e000      	b.n	80083fc <xQueueGenericCreateStatic+0x58>
 80083fa:	2300      	movs	r3, #0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10a      	bne.n	8008416 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	623b      	str	r3, [r7, #32]
}
 8008412:	bf00      	nop
 8008414:	e7fe      	b.n	8008414 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d102      	bne.n	8008422 <xQueueGenericCreateStatic+0x7e>
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <xQueueGenericCreateStatic+0x82>
 8008422:	2301      	movs	r3, #1
 8008424:	e000      	b.n	8008428 <xQueueGenericCreateStatic+0x84>
 8008426:	2300      	movs	r3, #0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d10a      	bne.n	8008442 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800842c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008430:	f383 8811 	msr	BASEPRI, r3
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	61fb      	str	r3, [r7, #28]
}
 800843e:	bf00      	nop
 8008440:	e7fe      	b.n	8008440 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008442:	2348      	movs	r3, #72	; 0x48
 8008444:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	2b48      	cmp	r3, #72	; 0x48
 800844a:	d00a      	beq.n	8008462 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	61bb      	str	r3, [r7, #24]
}
 800845e:	bf00      	nop
 8008460:	e7fe      	b.n	8008460 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008462:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00d      	beq.n	800848a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800846e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008476:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800847a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	4613      	mov	r3, r2
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	68b9      	ldr	r1, [r7, #8]
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f000 f83f 	bl	8008508 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800848a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800848c:	4618      	mov	r0, r3
 800848e:	3730      	adds	r7, #48	; 0x30
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008494:	b580      	push	{r7, lr}
 8008496:	b08a      	sub	sp, #40	; 0x28
 8008498:	af02      	add	r7, sp, #8
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	4613      	mov	r3, r2
 80084a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10a      	bne.n	80084be <xQueueGenericCreate+0x2a>
	__asm volatile
 80084a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ac:	f383 8811 	msr	BASEPRI, r3
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	f3bf 8f4f 	dsb	sy
 80084b8:	613b      	str	r3, [r7, #16]
}
 80084ba:	bf00      	nop
 80084bc:	e7fe      	b.n	80084bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	fb02 f303 	mul.w	r3, r2, r3
 80084c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	3348      	adds	r3, #72	; 0x48
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 fffb 	bl	80094c8 <pvPortMalloc>
 80084d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d011      	beq.n	80084fe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	3348      	adds	r3, #72	; 0x48
 80084e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80084ec:	79fa      	ldrb	r2, [r7, #7]
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	4613      	mov	r3, r2
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	68b9      	ldr	r1, [r7, #8]
 80084f8:	68f8      	ldr	r0, [r7, #12]
 80084fa:	f000 f805 	bl	8008508 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80084fe:	69bb      	ldr	r3, [r7, #24]
	}
 8008500:	4618      	mov	r0, r3
 8008502:	3720      	adds	r7, #32
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
 8008514:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d103      	bne.n	8008524 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	69ba      	ldr	r2, [r7, #24]
 8008520:	601a      	str	r2, [r3, #0]
 8008522:	e002      	b.n	800852a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008536:	2101      	movs	r1, #1
 8008538:	69b8      	ldr	r0, [r7, #24]
 800853a:	f7ff fecb 	bl	80082d4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800853e:	bf00      	nop
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008546:	b580      	push	{r7, lr}
 8008548:	b08e      	sub	sp, #56	; 0x38
 800854a:	af04      	add	r7, sp, #16
 800854c:	60f8      	str	r0, [r7, #12]
 800854e:	60b9      	str	r1, [r7, #8]
 8008550:	607a      	str	r2, [r7, #4]
 8008552:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10a      	bne.n	8008570 <xTaskCreateStatic+0x2a>
	__asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	623b      	str	r3, [r7, #32]
}
 800856c:	bf00      	nop
 800856e:	e7fe      	b.n	800856e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008572:	2b00      	cmp	r3, #0
 8008574:	d10a      	bne.n	800858c <xTaskCreateStatic+0x46>
	__asm volatile
 8008576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	61fb      	str	r3, [r7, #28]
}
 8008588:	bf00      	nop
 800858a:	e7fe      	b.n	800858a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800858c:	23b4      	movs	r3, #180	; 0xb4
 800858e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	2bb4      	cmp	r3, #180	; 0xb4
 8008594:	d00a      	beq.n	80085ac <xTaskCreateStatic+0x66>
	__asm volatile
 8008596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	61bb      	str	r3, [r7, #24]
}
 80085a8:	bf00      	nop
 80085aa:	e7fe      	b.n	80085aa <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80085ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80085ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d01e      	beq.n	80085f2 <xTaskCreateStatic+0xac>
 80085b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d01b      	beq.n	80085f2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085bc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085c2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	2202      	movs	r2, #2
 80085c8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80085cc:	2300      	movs	r3, #0
 80085ce:	9303      	str	r3, [sp, #12]
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	9302      	str	r3, [sp, #8]
 80085d4:	f107 0314 	add.w	r3, r7, #20
 80085d8:	9301      	str	r3, [sp, #4]
 80085da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	68b9      	ldr	r1, [r7, #8]
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 f851 	bl	800868c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085ec:	f000 f8ec 	bl	80087c8 <prvAddNewTaskToReadyList>
 80085f0:	e001      	b.n	80085f6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80085f2:	2300      	movs	r3, #0
 80085f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80085f6:	697b      	ldr	r3, [r7, #20]
	}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3728      	adds	r7, #40	; 0x28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008600:	b580      	push	{r7, lr}
 8008602:	b08c      	sub	sp, #48	; 0x30
 8008604:	af04      	add	r7, sp, #16
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	603b      	str	r3, [r7, #0]
 800860c:	4613      	mov	r3, r2
 800860e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008610:	88fb      	ldrh	r3, [r7, #6]
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4618      	mov	r0, r3
 8008616:	f000 ff57 	bl	80094c8 <pvPortMalloc>
 800861a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00e      	beq.n	8008640 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008622:	20b4      	movs	r0, #180	; 0xb4
 8008624:	f000 ff50 	bl	80094c8 <pvPortMalloc>
 8008628:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d003      	beq.n	8008638 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	631a      	str	r2, [r3, #48]	; 0x30
 8008636:	e005      	b.n	8008644 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008638:	6978      	ldr	r0, [r7, #20]
 800863a:	f001 f811 	bl	8009660 <vPortFree>
 800863e:	e001      	b.n	8008644 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008640:	2300      	movs	r3, #0
 8008642:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d017      	beq.n	800867a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008652:	88fa      	ldrh	r2, [r7, #6]
 8008654:	2300      	movs	r3, #0
 8008656:	9303      	str	r3, [sp, #12]
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	9302      	str	r3, [sp, #8]
 800865c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865e:	9301      	str	r3, [sp, #4]
 8008660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	68b9      	ldr	r1, [r7, #8]
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f000 f80f 	bl	800868c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800866e:	69f8      	ldr	r0, [r7, #28]
 8008670:	f000 f8aa 	bl	80087c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008674:	2301      	movs	r3, #1
 8008676:	61bb      	str	r3, [r7, #24]
 8008678:	e002      	b.n	8008680 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800867a:	f04f 33ff 	mov.w	r3, #4294967295
 800867e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008680:	69bb      	ldr	r3, [r7, #24]
	}
 8008682:	4618      	mov	r0, r3
 8008684:	3720      	adds	r7, #32
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
	...

0800868c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
 8008698:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80086a4:	3b01      	subs	r3, #1
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4413      	add	r3, r2
 80086aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	f023 0307 	bic.w	r3, r3, #7
 80086b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	f003 0307 	and.w	r3, r3, #7
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00a      	beq.n	80086d4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	617b      	str	r3, [r7, #20]
}
 80086d0:	bf00      	nop
 80086d2:	e7fe      	b.n	80086d2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d01f      	beq.n	800871a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80086da:	2300      	movs	r3, #0
 80086dc:	61fb      	str	r3, [r7, #28]
 80086de:	e012      	b.n	8008706 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	4413      	add	r3, r2
 80086e6:	7819      	ldrb	r1, [r3, #0]
 80086e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	4413      	add	r3, r2
 80086ee:	3334      	adds	r3, #52	; 0x34
 80086f0:	460a      	mov	r2, r1
 80086f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80086f4:	68ba      	ldr	r2, [r7, #8]
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	4413      	add	r3, r2
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d006      	beq.n	800870e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	3301      	adds	r3, #1
 8008704:	61fb      	str	r3, [r7, #28]
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	2b0f      	cmp	r3, #15
 800870a:	d9e9      	bls.n	80086e0 <prvInitialiseNewTask+0x54>
 800870c:	e000      	b.n	8008710 <prvInitialiseNewTask+0x84>
			{
				break;
 800870e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008712:	2200      	movs	r2, #0
 8008714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008718:	e003      	b.n	8008722 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800871a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871c:	2200      	movs	r2, #0
 800871e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008724:	2b06      	cmp	r3, #6
 8008726:	d901      	bls.n	800872c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008728:	2306      	movs	r3, #6
 800872a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800872c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008730:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008734:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008736:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873a:	2200      	movs	r2, #0
 800873c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800873e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008740:	3304      	adds	r3, #4
 8008742:	4618      	mov	r0, r3
 8008744:	f7ff fd32 	bl	80081ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	3318      	adds	r3, #24
 800874c:	4618      	mov	r0, r3
 800874e:	f7ff fd2d 	bl	80081ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008756:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875a:	f1c3 0207 	rsb	r2, r3, #7
 800875e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008760:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008766:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876a:	2200      	movs	r2, #0
 800876c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008772:	2200      	movs	r2, #0
 8008774:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877a:	334c      	adds	r3, #76	; 0x4c
 800877c:	2260      	movs	r2, #96	; 0x60
 800877e:	2100      	movs	r1, #0
 8008780:	4618      	mov	r0, r3
 8008782:	f001 f8af 	bl	80098e4 <memset>
 8008786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008788:	4a0c      	ldr	r2, [pc, #48]	; (80087bc <prvInitialiseNewTask+0x130>)
 800878a:	651a      	str	r2, [r3, #80]	; 0x50
 800878c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878e:	4a0c      	ldr	r2, [pc, #48]	; (80087c0 <prvInitialiseNewTask+0x134>)
 8008790:	655a      	str	r2, [r3, #84]	; 0x54
 8008792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008794:	4a0b      	ldr	r2, [pc, #44]	; (80087c4 <prvInitialiseNewTask+0x138>)
 8008796:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008798:	683a      	ldr	r2, [r7, #0]
 800879a:	68f9      	ldr	r1, [r7, #12]
 800879c:	69b8      	ldr	r0, [r7, #24]
 800879e:	f000 fc81 	bl	80090a4 <pxPortInitialiseStack>
 80087a2:	4602      	mov	r2, r0
 80087a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80087a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d002      	beq.n	80087b4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80087ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087b4:	bf00      	nop
 80087b6:	3720      	adds	r7, #32
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	08009d50 	.word	0x08009d50
 80087c0:	08009d70 	.word	0x08009d70
 80087c4:	08009d30 	.word	0x08009d30

080087c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80087d0:	f000 fd98 	bl	8009304 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80087d4:	4b2a      	ldr	r3, [pc, #168]	; (8008880 <prvAddNewTaskToReadyList+0xb8>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	3301      	adds	r3, #1
 80087da:	4a29      	ldr	r2, [pc, #164]	; (8008880 <prvAddNewTaskToReadyList+0xb8>)
 80087dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80087de:	4b29      	ldr	r3, [pc, #164]	; (8008884 <prvAddNewTaskToReadyList+0xbc>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d109      	bne.n	80087fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80087e6:	4a27      	ldr	r2, [pc, #156]	; (8008884 <prvAddNewTaskToReadyList+0xbc>)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80087ec:	4b24      	ldr	r3, [pc, #144]	; (8008880 <prvAddNewTaskToReadyList+0xb8>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d110      	bne.n	8008816 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80087f4:	f000 fb2e 	bl	8008e54 <prvInitialiseTaskLists>
 80087f8:	e00d      	b.n	8008816 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80087fa:	4b23      	ldr	r3, [pc, #140]	; (8008888 <prvAddNewTaskToReadyList+0xc0>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d109      	bne.n	8008816 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008802:	4b20      	ldr	r3, [pc, #128]	; (8008884 <prvAddNewTaskToReadyList+0xbc>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880c:	429a      	cmp	r2, r3
 800880e:	d802      	bhi.n	8008816 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008810:	4a1c      	ldr	r2, [pc, #112]	; (8008884 <prvAddNewTaskToReadyList+0xbc>)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008816:	4b1d      	ldr	r3, [pc, #116]	; (800888c <prvAddNewTaskToReadyList+0xc4>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	3301      	adds	r3, #1
 800881c:	4a1b      	ldr	r2, [pc, #108]	; (800888c <prvAddNewTaskToReadyList+0xc4>)
 800881e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008824:	2201      	movs	r2, #1
 8008826:	409a      	lsls	r2, r3
 8008828:	4b19      	ldr	r3, [pc, #100]	; (8008890 <prvAddNewTaskToReadyList+0xc8>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4313      	orrs	r3, r2
 800882e:	4a18      	ldr	r2, [pc, #96]	; (8008890 <prvAddNewTaskToReadyList+0xc8>)
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008836:	4613      	mov	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4a15      	ldr	r2, [pc, #84]	; (8008894 <prvAddNewTaskToReadyList+0xcc>)
 8008840:	441a      	add	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	3304      	adds	r3, #4
 8008846:	4619      	mov	r1, r3
 8008848:	4610      	mov	r0, r2
 800884a:	f7ff fcbc 	bl	80081c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800884e:	f000 fd89 	bl	8009364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008852:	4b0d      	ldr	r3, [pc, #52]	; (8008888 <prvAddNewTaskToReadyList+0xc0>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00e      	beq.n	8008878 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800885a:	4b0a      	ldr	r3, [pc, #40]	; (8008884 <prvAddNewTaskToReadyList+0xbc>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008864:	429a      	cmp	r2, r3
 8008866:	d207      	bcs.n	8008878 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008868:	4b0b      	ldr	r3, [pc, #44]	; (8008898 <prvAddNewTaskToReadyList+0xd0>)
 800886a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800886e:	601a      	str	r2, [r3, #0]
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008878:	bf00      	nop
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	200007d8 	.word	0x200007d8
 8008884:	200006d8 	.word	0x200006d8
 8008888:	200007e4 	.word	0x200007e4
 800888c:	200007f4 	.word	0x200007f4
 8008890:	200007e0 	.word	0x200007e0
 8008894:	200006dc 	.word	0x200006dc
 8008898:	e000ed04 	.word	0xe000ed04

0800889c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80088a4:	2300      	movs	r3, #0
 80088a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d017      	beq.n	80088de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80088ae:	4b13      	ldr	r3, [pc, #76]	; (80088fc <vTaskDelay+0x60>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00a      	beq.n	80088cc <vTaskDelay+0x30>
	__asm volatile
 80088b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ba:	f383 8811 	msr	BASEPRI, r3
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f3bf 8f4f 	dsb	sy
 80088c6:	60bb      	str	r3, [r7, #8]
}
 80088c8:	bf00      	nop
 80088ca:	e7fe      	b.n	80088ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80088cc:	f000 f884 	bl	80089d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088d0:	2100      	movs	r1, #0
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fb80 	bl	8008fd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80088d8:	f000 f88c 	bl	80089f4 <xTaskResumeAll>
 80088dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d107      	bne.n	80088f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80088e4:	4b06      	ldr	r3, [pc, #24]	; (8008900 <vTaskDelay+0x64>)
 80088e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80088f4:	bf00      	nop
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	20000800 	.word	0x20000800
 8008900:	e000ed04 	.word	0xe000ed04

08008904 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b08a      	sub	sp, #40	; 0x28
 8008908:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800890a:	2300      	movs	r3, #0
 800890c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800890e:	2300      	movs	r3, #0
 8008910:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008912:	463a      	mov	r2, r7
 8008914:	1d39      	adds	r1, r7, #4
 8008916:	f107 0308 	add.w	r3, r7, #8
 800891a:	4618      	mov	r0, r3
 800891c:	f7f8 f824 	bl	8000968 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	9202      	str	r2, [sp, #8]
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	2300      	movs	r3, #0
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	2300      	movs	r3, #0
 8008930:	460a      	mov	r2, r1
 8008932:	4921      	ldr	r1, [pc, #132]	; (80089b8 <vTaskStartScheduler+0xb4>)
 8008934:	4821      	ldr	r0, [pc, #132]	; (80089bc <vTaskStartScheduler+0xb8>)
 8008936:	f7ff fe06 	bl	8008546 <xTaskCreateStatic>
 800893a:	4603      	mov	r3, r0
 800893c:	4a20      	ldr	r2, [pc, #128]	; (80089c0 <vTaskStartScheduler+0xbc>)
 800893e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008940:	4b1f      	ldr	r3, [pc, #124]	; (80089c0 <vTaskStartScheduler+0xbc>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d002      	beq.n	800894e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008948:	2301      	movs	r3, #1
 800894a:	617b      	str	r3, [r7, #20]
 800894c:	e001      	b.n	8008952 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800894e:	2300      	movs	r3, #0
 8008950:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d11b      	bne.n	8008990 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895c:	f383 8811 	msr	BASEPRI, r3
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	613b      	str	r3, [r7, #16]
}
 800896a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800896c:	4b15      	ldr	r3, [pc, #84]	; (80089c4 <vTaskStartScheduler+0xc0>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	334c      	adds	r3, #76	; 0x4c
 8008972:	4a15      	ldr	r2, [pc, #84]	; (80089c8 <vTaskStartScheduler+0xc4>)
 8008974:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008976:	4b15      	ldr	r3, [pc, #84]	; (80089cc <vTaskStartScheduler+0xc8>)
 8008978:	f04f 32ff 	mov.w	r2, #4294967295
 800897c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800897e:	4b14      	ldr	r3, [pc, #80]	; (80089d0 <vTaskStartScheduler+0xcc>)
 8008980:	2201      	movs	r2, #1
 8008982:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008984:	4b13      	ldr	r3, [pc, #76]	; (80089d4 <vTaskStartScheduler+0xd0>)
 8008986:	2200      	movs	r2, #0
 8008988:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800898a:	f000 fc19 	bl	80091c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800898e:	e00e      	b.n	80089ae <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008996:	d10a      	bne.n	80089ae <vTaskStartScheduler+0xaa>
	__asm volatile
 8008998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	60fb      	str	r3, [r7, #12]
}
 80089aa:	bf00      	nop
 80089ac:	e7fe      	b.n	80089ac <vTaskStartScheduler+0xa8>
}
 80089ae:	bf00      	nop
 80089b0:	3718      	adds	r7, #24
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	08009d08 	.word	0x08009d08
 80089bc:	08008e25 	.word	0x08008e25
 80089c0:	200007fc 	.word	0x200007fc
 80089c4:	200006d8 	.word	0x200006d8
 80089c8:	20000010 	.word	0x20000010
 80089cc:	200007f8 	.word	0x200007f8
 80089d0:	200007e4 	.word	0x200007e4
 80089d4:	200007dc 	.word	0x200007dc

080089d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80089d8:	b480      	push	{r7}
 80089da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80089dc:	4b04      	ldr	r3, [pc, #16]	; (80089f0 <vTaskSuspendAll+0x18>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	3301      	adds	r3, #1
 80089e2:	4a03      	ldr	r2, [pc, #12]	; (80089f0 <vTaskSuspendAll+0x18>)
 80089e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80089e6:	bf00      	nop
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	20000800 	.word	0x20000800

080089f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80089fa:	2300      	movs	r3, #0
 80089fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80089fe:	2300      	movs	r3, #0
 8008a00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a02:	4b41      	ldr	r3, [pc, #260]	; (8008b08 <xTaskResumeAll+0x114>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10a      	bne.n	8008a20 <xTaskResumeAll+0x2c>
	__asm volatile
 8008a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	603b      	str	r3, [r7, #0]
}
 8008a1c:	bf00      	nop
 8008a1e:	e7fe      	b.n	8008a1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a20:	f000 fc70 	bl	8009304 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a24:	4b38      	ldr	r3, [pc, #224]	; (8008b08 <xTaskResumeAll+0x114>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	4a37      	ldr	r2, [pc, #220]	; (8008b08 <xTaskResumeAll+0x114>)
 8008a2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a2e:	4b36      	ldr	r3, [pc, #216]	; (8008b08 <xTaskResumeAll+0x114>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d161      	bne.n	8008afa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a36:	4b35      	ldr	r3, [pc, #212]	; (8008b0c <xTaskResumeAll+0x118>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d05d      	beq.n	8008afa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a3e:	e02e      	b.n	8008a9e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a40:	4b33      	ldr	r3, [pc, #204]	; (8008b10 <xTaskResumeAll+0x11c>)
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	3318      	adds	r3, #24
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7ff fc17 	bl	8008280 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	3304      	adds	r3, #4
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7ff fc12 	bl	8008280 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a60:	2201      	movs	r2, #1
 8008a62:	409a      	lsls	r2, r3
 8008a64:	4b2b      	ldr	r3, [pc, #172]	; (8008b14 <xTaskResumeAll+0x120>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	4a2a      	ldr	r2, [pc, #168]	; (8008b14 <xTaskResumeAll+0x120>)
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a72:	4613      	mov	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4a27      	ldr	r2, [pc, #156]	; (8008b18 <xTaskResumeAll+0x124>)
 8008a7c:	441a      	add	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	3304      	adds	r3, #4
 8008a82:	4619      	mov	r1, r3
 8008a84:	4610      	mov	r0, r2
 8008a86:	f7ff fb9e 	bl	80081c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a8e:	4b23      	ldr	r3, [pc, #140]	; (8008b1c <xTaskResumeAll+0x128>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d302      	bcc.n	8008a9e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008a98:	4b21      	ldr	r3, [pc, #132]	; (8008b20 <xTaskResumeAll+0x12c>)
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a9e:	4b1c      	ldr	r3, [pc, #112]	; (8008b10 <xTaskResumeAll+0x11c>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1cc      	bne.n	8008a40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008aac:	f000 fa74 	bl	8008f98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008ab0:	4b1c      	ldr	r3, [pc, #112]	; (8008b24 <xTaskResumeAll+0x130>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d010      	beq.n	8008ade <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008abc:	f000 f836 	bl	8008b2c <xTaskIncrementTick>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008ac6:	4b16      	ldr	r3, [pc, #88]	; (8008b20 <xTaskResumeAll+0x12c>)
 8008ac8:	2201      	movs	r2, #1
 8008aca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1f1      	bne.n	8008abc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008ad8:	4b12      	ldr	r3, [pc, #72]	; (8008b24 <xTaskResumeAll+0x130>)
 8008ada:	2200      	movs	r2, #0
 8008adc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ade:	4b10      	ldr	r3, [pc, #64]	; (8008b20 <xTaskResumeAll+0x12c>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d009      	beq.n	8008afa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008aea:	4b0f      	ldr	r3, [pc, #60]	; (8008b28 <xTaskResumeAll+0x134>)
 8008aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008af0:	601a      	str	r2, [r3, #0]
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008afa:	f000 fc33 	bl	8009364 <vPortExitCritical>

	return xAlreadyYielded;
 8008afe:	68bb      	ldr	r3, [r7, #8]
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	20000800 	.word	0x20000800
 8008b0c:	200007d8 	.word	0x200007d8
 8008b10:	20000798 	.word	0x20000798
 8008b14:	200007e0 	.word	0x200007e0
 8008b18:	200006dc 	.word	0x200006dc
 8008b1c:	200006d8 	.word	0x200006d8
 8008b20:	200007ec 	.word	0x200007ec
 8008b24:	200007e8 	.word	0x200007e8
 8008b28:	e000ed04 	.word	0xe000ed04

08008b2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b32:	2300      	movs	r3, #0
 8008b34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b36:	4b4e      	ldr	r3, [pc, #312]	; (8008c70 <xTaskIncrementTick+0x144>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f040 808e 	bne.w	8008c5c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b40:	4b4c      	ldr	r3, [pc, #304]	; (8008c74 <xTaskIncrementTick+0x148>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	3301      	adds	r3, #1
 8008b46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b48:	4a4a      	ldr	r2, [pc, #296]	; (8008c74 <xTaskIncrementTick+0x148>)
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d120      	bne.n	8008b96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b54:	4b48      	ldr	r3, [pc, #288]	; (8008c78 <xTaskIncrementTick+0x14c>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00a      	beq.n	8008b74 <xTaskIncrementTick+0x48>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	603b      	str	r3, [r7, #0]
}
 8008b70:	bf00      	nop
 8008b72:	e7fe      	b.n	8008b72 <xTaskIncrementTick+0x46>
 8008b74:	4b40      	ldr	r3, [pc, #256]	; (8008c78 <xTaskIncrementTick+0x14c>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	60fb      	str	r3, [r7, #12]
 8008b7a:	4b40      	ldr	r3, [pc, #256]	; (8008c7c <xTaskIncrementTick+0x150>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a3e      	ldr	r2, [pc, #248]	; (8008c78 <xTaskIncrementTick+0x14c>)
 8008b80:	6013      	str	r3, [r2, #0]
 8008b82:	4a3e      	ldr	r2, [pc, #248]	; (8008c7c <xTaskIncrementTick+0x150>)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6013      	str	r3, [r2, #0]
 8008b88:	4b3d      	ldr	r3, [pc, #244]	; (8008c80 <xTaskIncrementTick+0x154>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	4a3c      	ldr	r2, [pc, #240]	; (8008c80 <xTaskIncrementTick+0x154>)
 8008b90:	6013      	str	r3, [r2, #0]
 8008b92:	f000 fa01 	bl	8008f98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b96:	4b3b      	ldr	r3, [pc, #236]	; (8008c84 <xTaskIncrementTick+0x158>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	693a      	ldr	r2, [r7, #16]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d348      	bcc.n	8008c32 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ba0:	4b35      	ldr	r3, [pc, #212]	; (8008c78 <xTaskIncrementTick+0x14c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d104      	bne.n	8008bb4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008baa:	4b36      	ldr	r3, [pc, #216]	; (8008c84 <xTaskIncrementTick+0x158>)
 8008bac:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb0:	601a      	str	r2, [r3, #0]
					break;
 8008bb2:	e03e      	b.n	8008c32 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bb4:	4b30      	ldr	r3, [pc, #192]	; (8008c78 <xTaskIncrementTick+0x14c>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d203      	bcs.n	8008bd4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008bcc:	4a2d      	ldr	r2, [pc, #180]	; (8008c84 <xTaskIncrementTick+0x158>)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008bd2:	e02e      	b.n	8008c32 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	3304      	adds	r3, #4
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7ff fb51 	bl	8008280 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d004      	beq.n	8008bf0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	3318      	adds	r3, #24
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7ff fb48 	bl	8008280 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	409a      	lsls	r2, r3
 8008bf8:	4b23      	ldr	r3, [pc, #140]	; (8008c88 <xTaskIncrementTick+0x15c>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	4a22      	ldr	r2, [pc, #136]	; (8008c88 <xTaskIncrementTick+0x15c>)
 8008c00:	6013      	str	r3, [r2, #0]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c06:	4613      	mov	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4a1f      	ldr	r2, [pc, #124]	; (8008c8c <xTaskIncrementTick+0x160>)
 8008c10:	441a      	add	r2, r3
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	3304      	adds	r3, #4
 8008c16:	4619      	mov	r1, r3
 8008c18:	4610      	mov	r0, r2
 8008c1a:	f7ff fad4 	bl	80081c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c22:	4b1b      	ldr	r3, [pc, #108]	; (8008c90 <xTaskIncrementTick+0x164>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d3b9      	bcc.n	8008ba0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c30:	e7b6      	b.n	8008ba0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c32:	4b17      	ldr	r3, [pc, #92]	; (8008c90 <xTaskIncrementTick+0x164>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c38:	4914      	ldr	r1, [pc, #80]	; (8008c8c <xTaskIncrementTick+0x160>)
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	440b      	add	r3, r1
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d901      	bls.n	8008c4e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008c4e:	4b11      	ldr	r3, [pc, #68]	; (8008c94 <xTaskIncrementTick+0x168>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d007      	beq.n	8008c66 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008c56:	2301      	movs	r3, #1
 8008c58:	617b      	str	r3, [r7, #20]
 8008c5a:	e004      	b.n	8008c66 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008c5c:	4b0e      	ldr	r3, [pc, #56]	; (8008c98 <xTaskIncrementTick+0x16c>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	3301      	adds	r3, #1
 8008c62:	4a0d      	ldr	r2, [pc, #52]	; (8008c98 <xTaskIncrementTick+0x16c>)
 8008c64:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008c66:	697b      	ldr	r3, [r7, #20]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3718      	adds	r7, #24
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	20000800 	.word	0x20000800
 8008c74:	200007dc 	.word	0x200007dc
 8008c78:	20000790 	.word	0x20000790
 8008c7c:	20000794 	.word	0x20000794
 8008c80:	200007f0 	.word	0x200007f0
 8008c84:	200007f8 	.word	0x200007f8
 8008c88:	200007e0 	.word	0x200007e0
 8008c8c:	200006dc 	.word	0x200006dc
 8008c90:	200006d8 	.word	0x200006d8
 8008c94:	200007ec 	.word	0x200007ec
 8008c98:	200007e8 	.word	0x200007e8

08008c9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b087      	sub	sp, #28
 8008ca0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ca2:	4b29      	ldr	r3, [pc, #164]	; (8008d48 <vTaskSwitchContext+0xac>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d003      	beq.n	8008cb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008caa:	4b28      	ldr	r3, [pc, #160]	; (8008d4c <vTaskSwitchContext+0xb0>)
 8008cac:	2201      	movs	r2, #1
 8008cae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008cb0:	e044      	b.n	8008d3c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008cb2:	4b26      	ldr	r3, [pc, #152]	; (8008d4c <vTaskSwitchContext+0xb0>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cb8:	4b25      	ldr	r3, [pc, #148]	; (8008d50 <vTaskSwitchContext+0xb4>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	fab3 f383 	clz	r3, r3
 8008cc4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008cc6:	7afb      	ldrb	r3, [r7, #11]
 8008cc8:	f1c3 031f 	rsb	r3, r3, #31
 8008ccc:	617b      	str	r3, [r7, #20]
 8008cce:	4921      	ldr	r1, [pc, #132]	; (8008d54 <vTaskSwitchContext+0xb8>)
 8008cd0:	697a      	ldr	r2, [r7, #20]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	440b      	add	r3, r1
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10a      	bne.n	8008cf8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	607b      	str	r3, [r7, #4]
}
 8008cf4:	bf00      	nop
 8008cf6:	e7fe      	b.n	8008cf6 <vTaskSwitchContext+0x5a>
 8008cf8:	697a      	ldr	r2, [r7, #20]
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	4413      	add	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4a14      	ldr	r2, [pc, #80]	; (8008d54 <vTaskSwitchContext+0xb8>)
 8008d04:	4413      	add	r3, r2
 8008d06:	613b      	str	r3, [r7, #16]
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	685a      	ldr	r2, [r3, #4]
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	605a      	str	r2, [r3, #4]
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	3308      	adds	r3, #8
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d104      	bne.n	8008d28 <vTaskSwitchContext+0x8c>
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	605a      	str	r2, [r3, #4]
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	4a0a      	ldr	r2, [pc, #40]	; (8008d58 <vTaskSwitchContext+0xbc>)
 8008d30:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008d32:	4b09      	ldr	r3, [pc, #36]	; (8008d58 <vTaskSwitchContext+0xbc>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	334c      	adds	r3, #76	; 0x4c
 8008d38:	4a08      	ldr	r2, [pc, #32]	; (8008d5c <vTaskSwitchContext+0xc0>)
 8008d3a:	6013      	str	r3, [r2, #0]
}
 8008d3c:	bf00      	nop
 8008d3e:	371c      	adds	r7, #28
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	20000800 	.word	0x20000800
 8008d4c:	200007ec 	.word	0x200007ec
 8008d50:	200007e0 	.word	0x200007e0
 8008d54:	200006dc 	.word	0x200006dc
 8008d58:	200006d8 	.word	0x200006d8
 8008d5c:	20000010 	.word	0x20000010

08008d60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10a      	bne.n	8008d8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7a:	f383 8811 	msr	BASEPRI, r3
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	60fb      	str	r3, [r7, #12]
}
 8008d88:	bf00      	nop
 8008d8a:	e7fe      	b.n	8008d8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	3318      	adds	r3, #24
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7ff fa75 	bl	8008280 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d96:	4b1d      	ldr	r3, [pc, #116]	; (8008e0c <xTaskRemoveFromEventList+0xac>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d11c      	bne.n	8008dd8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	3304      	adds	r3, #4
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7ff fa6c 	bl	8008280 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dac:	2201      	movs	r2, #1
 8008dae:	409a      	lsls	r2, r3
 8008db0:	4b17      	ldr	r3, [pc, #92]	; (8008e10 <xTaskRemoveFromEventList+0xb0>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	4a16      	ldr	r2, [pc, #88]	; (8008e10 <xTaskRemoveFromEventList+0xb0>)
 8008db8:	6013      	str	r3, [r2, #0]
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4413      	add	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4a13      	ldr	r2, [pc, #76]	; (8008e14 <xTaskRemoveFromEventList+0xb4>)
 8008dc8:	441a      	add	r2, r3
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	3304      	adds	r3, #4
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	f7ff f9f8 	bl	80081c6 <vListInsertEnd>
 8008dd6:	e005      	b.n	8008de4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	3318      	adds	r3, #24
 8008ddc:	4619      	mov	r1, r3
 8008dde:	480e      	ldr	r0, [pc, #56]	; (8008e18 <xTaskRemoveFromEventList+0xb8>)
 8008de0:	f7ff f9f1 	bl	80081c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de8:	4b0c      	ldr	r3, [pc, #48]	; (8008e1c <xTaskRemoveFromEventList+0xbc>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d905      	bls.n	8008dfe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008df2:	2301      	movs	r3, #1
 8008df4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008df6:	4b0a      	ldr	r3, [pc, #40]	; (8008e20 <xTaskRemoveFromEventList+0xc0>)
 8008df8:	2201      	movs	r2, #1
 8008dfa:	601a      	str	r2, [r3, #0]
 8008dfc:	e001      	b.n	8008e02 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e02:	697b      	ldr	r3, [r7, #20]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3718      	adds	r7, #24
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}
 8008e0c:	20000800 	.word	0x20000800
 8008e10:	200007e0 	.word	0x200007e0
 8008e14:	200006dc 	.word	0x200006dc
 8008e18:	20000798 	.word	0x20000798
 8008e1c:	200006d8 	.word	0x200006d8
 8008e20:	200007ec 	.word	0x200007ec

08008e24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e2c:	f000 f852 	bl	8008ed4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e30:	4b06      	ldr	r3, [pc, #24]	; (8008e4c <prvIdleTask+0x28>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d9f9      	bls.n	8008e2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e38:	4b05      	ldr	r3, [pc, #20]	; (8008e50 <prvIdleTask+0x2c>)
 8008e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e3e:	601a      	str	r2, [r3, #0]
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e48:	e7f0      	b.n	8008e2c <prvIdleTask+0x8>
 8008e4a:	bf00      	nop
 8008e4c:	200006dc 	.word	0x200006dc
 8008e50:	e000ed04 	.word	0xe000ed04

08008e54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	607b      	str	r3, [r7, #4]
 8008e5e:	e00c      	b.n	8008e7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	4613      	mov	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4413      	add	r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4a12      	ldr	r2, [pc, #72]	; (8008eb4 <prvInitialiseTaskLists+0x60>)
 8008e6c:	4413      	add	r3, r2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7ff f97c 	bl	800816c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3301      	adds	r3, #1
 8008e78:	607b      	str	r3, [r7, #4]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b06      	cmp	r3, #6
 8008e7e:	d9ef      	bls.n	8008e60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e80:	480d      	ldr	r0, [pc, #52]	; (8008eb8 <prvInitialiseTaskLists+0x64>)
 8008e82:	f7ff f973 	bl	800816c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e86:	480d      	ldr	r0, [pc, #52]	; (8008ebc <prvInitialiseTaskLists+0x68>)
 8008e88:	f7ff f970 	bl	800816c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e8c:	480c      	ldr	r0, [pc, #48]	; (8008ec0 <prvInitialiseTaskLists+0x6c>)
 8008e8e:	f7ff f96d 	bl	800816c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e92:	480c      	ldr	r0, [pc, #48]	; (8008ec4 <prvInitialiseTaskLists+0x70>)
 8008e94:	f7ff f96a 	bl	800816c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e98:	480b      	ldr	r0, [pc, #44]	; (8008ec8 <prvInitialiseTaskLists+0x74>)
 8008e9a:	f7ff f967 	bl	800816c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e9e:	4b0b      	ldr	r3, [pc, #44]	; (8008ecc <prvInitialiseTaskLists+0x78>)
 8008ea0:	4a05      	ldr	r2, [pc, #20]	; (8008eb8 <prvInitialiseTaskLists+0x64>)
 8008ea2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ea4:	4b0a      	ldr	r3, [pc, #40]	; (8008ed0 <prvInitialiseTaskLists+0x7c>)
 8008ea6:	4a05      	ldr	r2, [pc, #20]	; (8008ebc <prvInitialiseTaskLists+0x68>)
 8008ea8:	601a      	str	r2, [r3, #0]
}
 8008eaa:	bf00      	nop
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	200006dc 	.word	0x200006dc
 8008eb8:	20000768 	.word	0x20000768
 8008ebc:	2000077c 	.word	0x2000077c
 8008ec0:	20000798 	.word	0x20000798
 8008ec4:	200007ac 	.word	0x200007ac
 8008ec8:	200007c4 	.word	0x200007c4
 8008ecc:	20000790 	.word	0x20000790
 8008ed0:	20000794 	.word	0x20000794

08008ed4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008eda:	e019      	b.n	8008f10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008edc:	f000 fa12 	bl	8009304 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ee0:	4b10      	ldr	r3, [pc, #64]	; (8008f24 <prvCheckTasksWaitingTermination+0x50>)
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	3304      	adds	r3, #4
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7ff f9c7 	bl	8008280 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ef2:	4b0d      	ldr	r3, [pc, #52]	; (8008f28 <prvCheckTasksWaitingTermination+0x54>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	4a0b      	ldr	r2, [pc, #44]	; (8008f28 <prvCheckTasksWaitingTermination+0x54>)
 8008efa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008efc:	4b0b      	ldr	r3, [pc, #44]	; (8008f2c <prvCheckTasksWaitingTermination+0x58>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3b01      	subs	r3, #1
 8008f02:	4a0a      	ldr	r2, [pc, #40]	; (8008f2c <prvCheckTasksWaitingTermination+0x58>)
 8008f04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f06:	f000 fa2d 	bl	8009364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 f810 	bl	8008f30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f10:	4b06      	ldr	r3, [pc, #24]	; (8008f2c <prvCheckTasksWaitingTermination+0x58>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1e1      	bne.n	8008edc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f18:	bf00      	nop
 8008f1a:	bf00      	nop
 8008f1c:	3708      	adds	r7, #8
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	200007ac 	.word	0x200007ac
 8008f28:	200007d8 	.word	0x200007d8
 8008f2c:	200007c0 	.word	0x200007c0

08008f30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	334c      	adds	r3, #76	; 0x4c
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f000 fd33 	bl	80099a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d108      	bne.n	8008f5e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 fb85 	bl	8009660 <vPortFree>
				vPortFree( pxTCB );
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fb82 	bl	8009660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f5c:	e018      	b.n	8008f90 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d103      	bne.n	8008f70 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fb79 	bl	8009660 <vPortFree>
	}
 8008f6e:	e00f      	b.n	8008f90 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d00a      	beq.n	8008f90 <prvDeleteTCB+0x60>
	__asm volatile
 8008f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7e:	f383 8811 	msr	BASEPRI, r3
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	60fb      	str	r3, [r7, #12]
}
 8008f8c:	bf00      	nop
 8008f8e:	e7fe      	b.n	8008f8e <prvDeleteTCB+0x5e>
	}
 8008f90:	bf00      	nop
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f9e:	4b0c      	ldr	r3, [pc, #48]	; (8008fd0 <prvResetNextTaskUnblockTime+0x38>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d104      	bne.n	8008fb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008fa8:	4b0a      	ldr	r3, [pc, #40]	; (8008fd4 <prvResetNextTaskUnblockTime+0x3c>)
 8008faa:	f04f 32ff 	mov.w	r2, #4294967295
 8008fae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008fb0:	e008      	b.n	8008fc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fb2:	4b07      	ldr	r3, [pc, #28]	; (8008fd0 <prvResetNextTaskUnblockTime+0x38>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	68db      	ldr	r3, [r3, #12]
 8008fba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	4a04      	ldr	r2, [pc, #16]	; (8008fd4 <prvResetNextTaskUnblockTime+0x3c>)
 8008fc2:	6013      	str	r3, [r2, #0]
}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr
 8008fd0:	20000790 	.word	0x20000790
 8008fd4:	200007f8 	.word	0x200007f8

08008fd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008fe2:	4b29      	ldr	r3, [pc, #164]	; (8009088 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fe8:	4b28      	ldr	r3, [pc, #160]	; (800908c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	3304      	adds	r3, #4
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7ff f946 	bl	8008280 <uxListRemove>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d10b      	bne.n	8009012 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008ffa:	4b24      	ldr	r3, [pc, #144]	; (800908c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009000:	2201      	movs	r2, #1
 8009002:	fa02 f303 	lsl.w	r3, r2, r3
 8009006:	43da      	mvns	r2, r3
 8009008:	4b21      	ldr	r3, [pc, #132]	; (8009090 <prvAddCurrentTaskToDelayedList+0xb8>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4013      	ands	r3, r2
 800900e:	4a20      	ldr	r2, [pc, #128]	; (8009090 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009010:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009018:	d10a      	bne.n	8009030 <prvAddCurrentTaskToDelayedList+0x58>
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d007      	beq.n	8009030 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009020:	4b1a      	ldr	r3, [pc, #104]	; (800908c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	3304      	adds	r3, #4
 8009026:	4619      	mov	r1, r3
 8009028:	481a      	ldr	r0, [pc, #104]	; (8009094 <prvAddCurrentTaskToDelayedList+0xbc>)
 800902a:	f7ff f8cc 	bl	80081c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800902e:	e026      	b.n	800907e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4413      	add	r3, r2
 8009036:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009038:	4b14      	ldr	r3, [pc, #80]	; (800908c <prvAddCurrentTaskToDelayedList+0xb4>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68ba      	ldr	r2, [r7, #8]
 800903e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	429a      	cmp	r2, r3
 8009046:	d209      	bcs.n	800905c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009048:	4b13      	ldr	r3, [pc, #76]	; (8009098 <prvAddCurrentTaskToDelayedList+0xc0>)
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	4b0f      	ldr	r3, [pc, #60]	; (800908c <prvAddCurrentTaskToDelayedList+0xb4>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3304      	adds	r3, #4
 8009052:	4619      	mov	r1, r3
 8009054:	4610      	mov	r0, r2
 8009056:	f7ff f8da 	bl	800820e <vListInsert>
}
 800905a:	e010      	b.n	800907e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800905c:	4b0f      	ldr	r3, [pc, #60]	; (800909c <prvAddCurrentTaskToDelayedList+0xc4>)
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	4b0a      	ldr	r3, [pc, #40]	; (800908c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3304      	adds	r3, #4
 8009066:	4619      	mov	r1, r3
 8009068:	4610      	mov	r0, r2
 800906a:	f7ff f8d0 	bl	800820e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800906e:	4b0c      	ldr	r3, [pc, #48]	; (80090a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	429a      	cmp	r2, r3
 8009076:	d202      	bcs.n	800907e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009078:	4a09      	ldr	r2, [pc, #36]	; (80090a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	6013      	str	r3, [r2, #0]
}
 800907e:	bf00      	nop
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	200007dc 	.word	0x200007dc
 800908c:	200006d8 	.word	0x200006d8
 8009090:	200007e0 	.word	0x200007e0
 8009094:	200007c4 	.word	0x200007c4
 8009098:	20000794 	.word	0x20000794
 800909c:	20000790 	.word	0x20000790
 80090a0:	200007f8 	.word	0x200007f8

080090a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	3b04      	subs	r3, #4
 80090b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80090bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	3b04      	subs	r3, #4
 80090c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	f023 0201 	bic.w	r2, r3, #1
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	3b04      	subs	r3, #4
 80090d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80090d4:	4a0c      	ldr	r2, [pc, #48]	; (8009108 <pxPortInitialiseStack+0x64>)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3b14      	subs	r3, #20
 80090de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	3b04      	subs	r3, #4
 80090ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f06f 0202 	mvn.w	r2, #2
 80090f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	3b20      	subs	r3, #32
 80090f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80090fa:	68fb      	ldr	r3, [r7, #12]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3714      	adds	r7, #20
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr
 8009108:	0800910d 	.word	0x0800910d

0800910c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009112:	2300      	movs	r3, #0
 8009114:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009116:	4b12      	ldr	r3, [pc, #72]	; (8009160 <prvTaskExitError+0x54>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800911e:	d00a      	beq.n	8009136 <prvTaskExitError+0x2a>
	__asm volatile
 8009120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	60fb      	str	r3, [r7, #12]
}
 8009132:	bf00      	nop
 8009134:	e7fe      	b.n	8009134 <prvTaskExitError+0x28>
	__asm volatile
 8009136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913a:	f383 8811 	msr	BASEPRI, r3
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	f3bf 8f4f 	dsb	sy
 8009146:	60bb      	str	r3, [r7, #8]
}
 8009148:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800914a:	bf00      	nop
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d0fc      	beq.n	800914c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009152:	bf00      	nop
 8009154:	bf00      	nop
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	2000000c 	.word	0x2000000c
	...

08009170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009170:	4b07      	ldr	r3, [pc, #28]	; (8009190 <pxCurrentTCBConst2>)
 8009172:	6819      	ldr	r1, [r3, #0]
 8009174:	6808      	ldr	r0, [r1, #0]
 8009176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917a:	f380 8809 	msr	PSP, r0
 800917e:	f3bf 8f6f 	isb	sy
 8009182:	f04f 0000 	mov.w	r0, #0
 8009186:	f380 8811 	msr	BASEPRI, r0
 800918a:	4770      	bx	lr
 800918c:	f3af 8000 	nop.w

08009190 <pxCurrentTCBConst2>:
 8009190:	200006d8 	.word	0x200006d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009194:	bf00      	nop
 8009196:	bf00      	nop

08009198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009198:	4808      	ldr	r0, [pc, #32]	; (80091bc <prvPortStartFirstTask+0x24>)
 800919a:	6800      	ldr	r0, [r0, #0]
 800919c:	6800      	ldr	r0, [r0, #0]
 800919e:	f380 8808 	msr	MSP, r0
 80091a2:	f04f 0000 	mov.w	r0, #0
 80091a6:	f380 8814 	msr	CONTROL, r0
 80091aa:	b662      	cpsie	i
 80091ac:	b661      	cpsie	f
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	df00      	svc	0
 80091b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80091ba:	bf00      	nop
 80091bc:	e000ed08 	.word	0xe000ed08

080091c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80091c6:	4b46      	ldr	r3, [pc, #280]	; (80092e0 <xPortStartScheduler+0x120>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a46      	ldr	r2, [pc, #280]	; (80092e4 <xPortStartScheduler+0x124>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d10a      	bne.n	80091e6 <xPortStartScheduler+0x26>
	__asm volatile
 80091d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	613b      	str	r3, [r7, #16]
}
 80091e2:	bf00      	nop
 80091e4:	e7fe      	b.n	80091e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80091e6:	4b3e      	ldr	r3, [pc, #248]	; (80092e0 <xPortStartScheduler+0x120>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a3f      	ldr	r2, [pc, #252]	; (80092e8 <xPortStartScheduler+0x128>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d10a      	bne.n	8009206 <xPortStartScheduler+0x46>
	__asm volatile
 80091f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	60fb      	str	r3, [r7, #12]
}
 8009202:	bf00      	nop
 8009204:	e7fe      	b.n	8009204 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009206:	4b39      	ldr	r3, [pc, #228]	; (80092ec <xPortStartScheduler+0x12c>)
 8009208:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	b2db      	uxtb	r3, r3
 8009210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	22ff      	movs	r2, #255	; 0xff
 8009216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	b2db      	uxtb	r3, r3
 800921e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009220:	78fb      	ldrb	r3, [r7, #3]
 8009222:	b2db      	uxtb	r3, r3
 8009224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009228:	b2da      	uxtb	r2, r3
 800922a:	4b31      	ldr	r3, [pc, #196]	; (80092f0 <xPortStartScheduler+0x130>)
 800922c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800922e:	4b31      	ldr	r3, [pc, #196]	; (80092f4 <xPortStartScheduler+0x134>)
 8009230:	2207      	movs	r2, #7
 8009232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009234:	e009      	b.n	800924a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009236:	4b2f      	ldr	r3, [pc, #188]	; (80092f4 <xPortStartScheduler+0x134>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	3b01      	subs	r3, #1
 800923c:	4a2d      	ldr	r2, [pc, #180]	; (80092f4 <xPortStartScheduler+0x134>)
 800923e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009240:	78fb      	ldrb	r3, [r7, #3]
 8009242:	b2db      	uxtb	r3, r3
 8009244:	005b      	lsls	r3, r3, #1
 8009246:	b2db      	uxtb	r3, r3
 8009248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800924a:	78fb      	ldrb	r3, [r7, #3]
 800924c:	b2db      	uxtb	r3, r3
 800924e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009252:	2b80      	cmp	r3, #128	; 0x80
 8009254:	d0ef      	beq.n	8009236 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009256:	4b27      	ldr	r3, [pc, #156]	; (80092f4 <xPortStartScheduler+0x134>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f1c3 0307 	rsb	r3, r3, #7
 800925e:	2b04      	cmp	r3, #4
 8009260:	d00a      	beq.n	8009278 <xPortStartScheduler+0xb8>
	__asm volatile
 8009262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	60bb      	str	r3, [r7, #8]
}
 8009274:	bf00      	nop
 8009276:	e7fe      	b.n	8009276 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009278:	4b1e      	ldr	r3, [pc, #120]	; (80092f4 <xPortStartScheduler+0x134>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	021b      	lsls	r3, r3, #8
 800927e:	4a1d      	ldr	r2, [pc, #116]	; (80092f4 <xPortStartScheduler+0x134>)
 8009280:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009282:	4b1c      	ldr	r3, [pc, #112]	; (80092f4 <xPortStartScheduler+0x134>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800928a:	4a1a      	ldr	r2, [pc, #104]	; (80092f4 <xPortStartScheduler+0x134>)
 800928c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	b2da      	uxtb	r2, r3
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009296:	4b18      	ldr	r3, [pc, #96]	; (80092f8 <xPortStartScheduler+0x138>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a17      	ldr	r2, [pc, #92]	; (80092f8 <xPortStartScheduler+0x138>)
 800929c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80092a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80092a2:	4b15      	ldr	r3, [pc, #84]	; (80092f8 <xPortStartScheduler+0x138>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a14      	ldr	r2, [pc, #80]	; (80092f8 <xPortStartScheduler+0x138>)
 80092a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80092ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80092ae:	f000 f8dd 	bl	800946c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80092b2:	4b12      	ldr	r3, [pc, #72]	; (80092fc <xPortStartScheduler+0x13c>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80092b8:	f000 f8fc 	bl	80094b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80092bc:	4b10      	ldr	r3, [pc, #64]	; (8009300 <xPortStartScheduler+0x140>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a0f      	ldr	r2, [pc, #60]	; (8009300 <xPortStartScheduler+0x140>)
 80092c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80092c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80092c8:	f7ff ff66 	bl	8009198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80092cc:	f7ff fce6 	bl	8008c9c <vTaskSwitchContext>
	prvTaskExitError();
 80092d0:	f7ff ff1c 	bl	800910c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3718      	adds	r7, #24
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	e000ed00 	.word	0xe000ed00
 80092e4:	410fc271 	.word	0x410fc271
 80092e8:	410fc270 	.word	0x410fc270
 80092ec:	e000e400 	.word	0xe000e400
 80092f0:	20000804 	.word	0x20000804
 80092f4:	20000808 	.word	0x20000808
 80092f8:	e000ed20 	.word	0xe000ed20
 80092fc:	2000000c 	.word	0x2000000c
 8009300:	e000ef34 	.word	0xe000ef34

08009304 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
	__asm volatile
 800930a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	607b      	str	r3, [r7, #4]
}
 800931c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800931e:	4b0f      	ldr	r3, [pc, #60]	; (800935c <vPortEnterCritical+0x58>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3301      	adds	r3, #1
 8009324:	4a0d      	ldr	r2, [pc, #52]	; (800935c <vPortEnterCritical+0x58>)
 8009326:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009328:	4b0c      	ldr	r3, [pc, #48]	; (800935c <vPortEnterCritical+0x58>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d10f      	bne.n	8009350 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009330:	4b0b      	ldr	r3, [pc, #44]	; (8009360 <vPortEnterCritical+0x5c>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00a      	beq.n	8009350 <vPortEnterCritical+0x4c>
	__asm volatile
 800933a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933e:	f383 8811 	msr	BASEPRI, r3
 8009342:	f3bf 8f6f 	isb	sy
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	603b      	str	r3, [r7, #0]
}
 800934c:	bf00      	nop
 800934e:	e7fe      	b.n	800934e <vPortEnterCritical+0x4a>
	}
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	2000000c 	.word	0x2000000c
 8009360:	e000ed04 	.word	0xe000ed04

08009364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800936a:	4b12      	ldr	r3, [pc, #72]	; (80093b4 <vPortExitCritical+0x50>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10a      	bne.n	8009388 <vPortExitCritical+0x24>
	__asm volatile
 8009372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	607b      	str	r3, [r7, #4]
}
 8009384:	bf00      	nop
 8009386:	e7fe      	b.n	8009386 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009388:	4b0a      	ldr	r3, [pc, #40]	; (80093b4 <vPortExitCritical+0x50>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3b01      	subs	r3, #1
 800938e:	4a09      	ldr	r2, [pc, #36]	; (80093b4 <vPortExitCritical+0x50>)
 8009390:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009392:	4b08      	ldr	r3, [pc, #32]	; (80093b4 <vPortExitCritical+0x50>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d105      	bne.n	80093a6 <vPortExitCritical+0x42>
 800939a:	2300      	movs	r3, #0
 800939c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	f383 8811 	msr	BASEPRI, r3
}
 80093a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80093a6:	bf00      	nop
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	2000000c 	.word	0x2000000c
	...

080093c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80093c0:	f3ef 8009 	mrs	r0, PSP
 80093c4:	f3bf 8f6f 	isb	sy
 80093c8:	4b15      	ldr	r3, [pc, #84]	; (8009420 <pxCurrentTCBConst>)
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	f01e 0f10 	tst.w	lr, #16
 80093d0:	bf08      	it	eq
 80093d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80093d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093da:	6010      	str	r0, [r2, #0]
 80093dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80093e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80093e4:	f380 8811 	msr	BASEPRI, r0
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	f3bf 8f6f 	isb	sy
 80093f0:	f7ff fc54 	bl	8008c9c <vTaskSwitchContext>
 80093f4:	f04f 0000 	mov.w	r0, #0
 80093f8:	f380 8811 	msr	BASEPRI, r0
 80093fc:	bc09      	pop	{r0, r3}
 80093fe:	6819      	ldr	r1, [r3, #0]
 8009400:	6808      	ldr	r0, [r1, #0]
 8009402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009406:	f01e 0f10 	tst.w	lr, #16
 800940a:	bf08      	it	eq
 800940c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009410:	f380 8809 	msr	PSP, r0
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	f3af 8000 	nop.w

08009420 <pxCurrentTCBConst>:
 8009420:	200006d8 	.word	0x200006d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009424:	bf00      	nop
 8009426:	bf00      	nop

08009428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	607b      	str	r3, [r7, #4]
}
 8009440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009442:	f7ff fb73 	bl	8008b2c <xTaskIncrementTick>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d003      	beq.n	8009454 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800944c:	4b06      	ldr	r3, [pc, #24]	; (8009468 <SysTick_Handler+0x40>)
 800944e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009452:	601a      	str	r2, [r3, #0]
 8009454:	2300      	movs	r3, #0
 8009456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	f383 8811 	msr	BASEPRI, r3
}
 800945e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009460:	bf00      	nop
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	e000ed04 	.word	0xe000ed04

0800946c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800946c:	b480      	push	{r7}
 800946e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009470:	4b0b      	ldr	r3, [pc, #44]	; (80094a0 <vPortSetupTimerInterrupt+0x34>)
 8009472:	2200      	movs	r2, #0
 8009474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009476:	4b0b      	ldr	r3, [pc, #44]	; (80094a4 <vPortSetupTimerInterrupt+0x38>)
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800947c:	4b0a      	ldr	r3, [pc, #40]	; (80094a8 <vPortSetupTimerInterrupt+0x3c>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a0a      	ldr	r2, [pc, #40]	; (80094ac <vPortSetupTimerInterrupt+0x40>)
 8009482:	fba2 2303 	umull	r2, r3, r2, r3
 8009486:	099b      	lsrs	r3, r3, #6
 8009488:	4a09      	ldr	r2, [pc, #36]	; (80094b0 <vPortSetupTimerInterrupt+0x44>)
 800948a:	3b01      	subs	r3, #1
 800948c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800948e:	4b04      	ldr	r3, [pc, #16]	; (80094a0 <vPortSetupTimerInterrupt+0x34>)
 8009490:	2207      	movs	r2, #7
 8009492:	601a      	str	r2, [r3, #0]
}
 8009494:	bf00      	nop
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	e000e010 	.word	0xe000e010
 80094a4:	e000e018 	.word	0xe000e018
 80094a8:	20000000 	.word	0x20000000
 80094ac:	10624dd3 	.word	0x10624dd3
 80094b0:	e000e014 	.word	0xe000e014

080094b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80094b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80094c4 <vPortEnableVFP+0x10>
 80094b8:	6801      	ldr	r1, [r0, #0]
 80094ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80094be:	6001      	str	r1, [r0, #0]
 80094c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80094c2:	bf00      	nop
 80094c4:	e000ed88 	.word	0xe000ed88

080094c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b08a      	sub	sp, #40	; 0x28
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80094d0:	2300      	movs	r3, #0
 80094d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80094d4:	f7ff fa80 	bl	80089d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80094d8:	4b5b      	ldr	r3, [pc, #364]	; (8009648 <pvPortMalloc+0x180>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d101      	bne.n	80094e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80094e0:	f000 f920 	bl	8009724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80094e4:	4b59      	ldr	r3, [pc, #356]	; (800964c <pvPortMalloc+0x184>)
 80094e6:	681a      	ldr	r2, [r3, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4013      	ands	r3, r2
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f040 8093 	bne.w	8009618 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d01d      	beq.n	8009534 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80094f8:	2208      	movs	r2, #8
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4413      	add	r3, r2
 80094fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f003 0307 	and.w	r3, r3, #7
 8009506:	2b00      	cmp	r3, #0
 8009508:	d014      	beq.n	8009534 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f023 0307 	bic.w	r3, r3, #7
 8009510:	3308      	adds	r3, #8
 8009512:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f003 0307 	and.w	r3, r3, #7
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00a      	beq.n	8009534 <pvPortMalloc+0x6c>
	__asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	617b      	str	r3, [r7, #20]
}
 8009530:	bf00      	nop
 8009532:	e7fe      	b.n	8009532 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d06e      	beq.n	8009618 <pvPortMalloc+0x150>
 800953a:	4b45      	ldr	r3, [pc, #276]	; (8009650 <pvPortMalloc+0x188>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	429a      	cmp	r2, r3
 8009542:	d869      	bhi.n	8009618 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009544:	4b43      	ldr	r3, [pc, #268]	; (8009654 <pvPortMalloc+0x18c>)
 8009546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009548:	4b42      	ldr	r3, [pc, #264]	; (8009654 <pvPortMalloc+0x18c>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800954e:	e004      	b.n	800955a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800955a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	429a      	cmp	r2, r3
 8009562:	d903      	bls.n	800956c <pvPortMalloc+0xa4>
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1f1      	bne.n	8009550 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800956c:	4b36      	ldr	r3, [pc, #216]	; (8009648 <pvPortMalloc+0x180>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009572:	429a      	cmp	r2, r3
 8009574:	d050      	beq.n	8009618 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009576:	6a3b      	ldr	r3, [r7, #32]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2208      	movs	r2, #8
 800957c:	4413      	add	r3, r2
 800957e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	6a3b      	ldr	r3, [r7, #32]
 8009586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	1ad2      	subs	r2, r2, r3
 8009590:	2308      	movs	r3, #8
 8009592:	005b      	lsls	r3, r3, #1
 8009594:	429a      	cmp	r2, r3
 8009596:	d91f      	bls.n	80095d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4413      	add	r3, r2
 800959e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	f003 0307 	and.w	r3, r3, #7
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00a      	beq.n	80095c0 <pvPortMalloc+0xf8>
	__asm volatile
 80095aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ae:	f383 8811 	msr	BASEPRI, r3
 80095b2:	f3bf 8f6f 	isb	sy
 80095b6:	f3bf 8f4f 	dsb	sy
 80095ba:	613b      	str	r3, [r7, #16]
}
 80095bc:	bf00      	nop
 80095be:	e7fe      	b.n	80095be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80095c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c2:	685a      	ldr	r2, [r3, #4]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	1ad2      	subs	r2, r2, r3
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80095cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80095d2:	69b8      	ldr	r0, [r7, #24]
 80095d4:	f000 f908 	bl	80097e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80095d8:	4b1d      	ldr	r3, [pc, #116]	; (8009650 <pvPortMalloc+0x188>)
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	4a1b      	ldr	r2, [pc, #108]	; (8009650 <pvPortMalloc+0x188>)
 80095e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80095e6:	4b1a      	ldr	r3, [pc, #104]	; (8009650 <pvPortMalloc+0x188>)
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	4b1b      	ldr	r3, [pc, #108]	; (8009658 <pvPortMalloc+0x190>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d203      	bcs.n	80095fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80095f2:	4b17      	ldr	r3, [pc, #92]	; (8009650 <pvPortMalloc+0x188>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a18      	ldr	r2, [pc, #96]	; (8009658 <pvPortMalloc+0x190>)
 80095f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80095fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fc:	685a      	ldr	r2, [r3, #4]
 80095fe:	4b13      	ldr	r3, [pc, #76]	; (800964c <pvPortMalloc+0x184>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	431a      	orrs	r2, r3
 8009604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009606:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960a:	2200      	movs	r2, #0
 800960c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800960e:	4b13      	ldr	r3, [pc, #76]	; (800965c <pvPortMalloc+0x194>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	3301      	adds	r3, #1
 8009614:	4a11      	ldr	r2, [pc, #68]	; (800965c <pvPortMalloc+0x194>)
 8009616:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009618:	f7ff f9ec 	bl	80089f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	f003 0307 	and.w	r3, r3, #7
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00a      	beq.n	800963c <pvPortMalloc+0x174>
	__asm volatile
 8009626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962a:	f383 8811 	msr	BASEPRI, r3
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	60fb      	str	r3, [r7, #12]
}
 8009638:	bf00      	nop
 800963a:	e7fe      	b.n	800963a <pvPortMalloc+0x172>
	return pvReturn;
 800963c:	69fb      	ldr	r3, [r7, #28]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3728      	adds	r7, #40	; 0x28
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	20010214 	.word	0x20010214
 800964c:	20010228 	.word	0x20010228
 8009650:	20010218 	.word	0x20010218
 8009654:	2001020c 	.word	0x2001020c
 8009658:	2001021c 	.word	0x2001021c
 800965c:	20010220 	.word	0x20010220

08009660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b086      	sub	sp, #24
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d04d      	beq.n	800970e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009672:	2308      	movs	r3, #8
 8009674:	425b      	negs	r3, r3
 8009676:	697a      	ldr	r2, [r7, #20]
 8009678:	4413      	add	r3, r2
 800967a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	685a      	ldr	r2, [r3, #4]
 8009684:	4b24      	ldr	r3, [pc, #144]	; (8009718 <vPortFree+0xb8>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4013      	ands	r3, r2
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10a      	bne.n	80096a4 <vPortFree+0x44>
	__asm volatile
 800968e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	60fb      	str	r3, [r7, #12]
}
 80096a0:	bf00      	nop
 80096a2:	e7fe      	b.n	80096a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00a      	beq.n	80096c2 <vPortFree+0x62>
	__asm volatile
 80096ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	60bb      	str	r3, [r7, #8]
}
 80096be:	bf00      	nop
 80096c0:	e7fe      	b.n	80096c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	685a      	ldr	r2, [r3, #4]
 80096c6:	4b14      	ldr	r3, [pc, #80]	; (8009718 <vPortFree+0xb8>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4013      	ands	r3, r2
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d01e      	beq.n	800970e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d11a      	bne.n	800970e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	685a      	ldr	r2, [r3, #4]
 80096dc:	4b0e      	ldr	r3, [pc, #56]	; (8009718 <vPortFree+0xb8>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	43db      	mvns	r3, r3
 80096e2:	401a      	ands	r2, r3
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80096e8:	f7ff f976 	bl	80089d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	685a      	ldr	r2, [r3, #4]
 80096f0:	4b0a      	ldr	r3, [pc, #40]	; (800971c <vPortFree+0xbc>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4413      	add	r3, r2
 80096f6:	4a09      	ldr	r2, [pc, #36]	; (800971c <vPortFree+0xbc>)
 80096f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80096fa:	6938      	ldr	r0, [r7, #16]
 80096fc:	f000 f874 	bl	80097e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009700:	4b07      	ldr	r3, [pc, #28]	; (8009720 <vPortFree+0xc0>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	3301      	adds	r3, #1
 8009706:	4a06      	ldr	r2, [pc, #24]	; (8009720 <vPortFree+0xc0>)
 8009708:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800970a:	f7ff f973 	bl	80089f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800970e:	bf00      	nop
 8009710:	3718      	adds	r7, #24
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	20010228 	.word	0x20010228
 800971c:	20010218 	.word	0x20010218
 8009720:	20010224 	.word	0x20010224

08009724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800972a:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 800972e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009730:	4b27      	ldr	r3, [pc, #156]	; (80097d0 <prvHeapInit+0xac>)
 8009732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f003 0307 	and.w	r3, r3, #7
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00c      	beq.n	8009758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	3307      	adds	r3, #7
 8009742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f023 0307 	bic.w	r3, r3, #7
 800974a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	4a1f      	ldr	r2, [pc, #124]	; (80097d0 <prvHeapInit+0xac>)
 8009754:	4413      	add	r3, r2
 8009756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800975c:	4a1d      	ldr	r2, [pc, #116]	; (80097d4 <prvHeapInit+0xb0>)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009762:	4b1c      	ldr	r3, [pc, #112]	; (80097d4 <prvHeapInit+0xb0>)
 8009764:	2200      	movs	r2, #0
 8009766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	4413      	add	r3, r2
 800976e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009770:	2208      	movs	r2, #8
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	1a9b      	subs	r3, r3, r2
 8009776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f023 0307 	bic.w	r3, r3, #7
 800977e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4a15      	ldr	r2, [pc, #84]	; (80097d8 <prvHeapInit+0xb4>)
 8009784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009786:	4b14      	ldr	r3, [pc, #80]	; (80097d8 <prvHeapInit+0xb4>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2200      	movs	r2, #0
 800978c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800978e:	4b12      	ldr	r3, [pc, #72]	; (80097d8 <prvHeapInit+0xb4>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2200      	movs	r2, #0
 8009794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	1ad2      	subs	r2, r2, r3
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097a4:	4b0c      	ldr	r3, [pc, #48]	; (80097d8 <prvHeapInit+0xb4>)
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	4a0a      	ldr	r2, [pc, #40]	; (80097dc <prvHeapInit+0xb8>)
 80097b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	4a09      	ldr	r2, [pc, #36]	; (80097e0 <prvHeapInit+0xbc>)
 80097ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097bc:	4b09      	ldr	r3, [pc, #36]	; (80097e4 <prvHeapInit+0xc0>)
 80097be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80097c2:	601a      	str	r2, [r3, #0]
}
 80097c4:	bf00      	nop
 80097c6:	3714      	adds	r7, #20
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	2000080c 	.word	0x2000080c
 80097d4:	2001020c 	.word	0x2001020c
 80097d8:	20010214 	.word	0x20010214
 80097dc:	2001021c 	.word	0x2001021c
 80097e0:	20010218 	.word	0x20010218
 80097e4:	20010228 	.word	0x20010228

080097e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80097f0:	4b28      	ldr	r3, [pc, #160]	; (8009894 <prvInsertBlockIntoFreeList+0xac>)
 80097f2:	60fb      	str	r3, [r7, #12]
 80097f4:	e002      	b.n	80097fc <prvInsertBlockIntoFreeList+0x14>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	429a      	cmp	r2, r3
 8009804:	d8f7      	bhi.n	80097f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	4413      	add	r3, r2
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	429a      	cmp	r2, r3
 8009816:	d108      	bne.n	800982a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	685a      	ldr	r2, [r3, #4]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	441a      	add	r2, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	441a      	add	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	429a      	cmp	r2, r3
 800983c:	d118      	bne.n	8009870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	4b15      	ldr	r3, [pc, #84]	; (8009898 <prvInsertBlockIntoFreeList+0xb0>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	429a      	cmp	r2, r3
 8009848:	d00d      	beq.n	8009866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685a      	ldr	r2, [r3, #4]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	441a      	add	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	601a      	str	r2, [r3, #0]
 8009864:	e008      	b.n	8009878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009866:	4b0c      	ldr	r3, [pc, #48]	; (8009898 <prvInsertBlockIntoFreeList+0xb0>)
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	e003      	b.n	8009878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	429a      	cmp	r2, r3
 800987e:	d002      	beq.n	8009886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009886:	bf00      	nop
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	2001020c 	.word	0x2001020c
 8009898:	20010214 	.word	0x20010214

0800989c <__libc_init_array>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	4d0d      	ldr	r5, [pc, #52]	; (80098d4 <__libc_init_array+0x38>)
 80098a0:	4c0d      	ldr	r4, [pc, #52]	; (80098d8 <__libc_init_array+0x3c>)
 80098a2:	1b64      	subs	r4, r4, r5
 80098a4:	10a4      	asrs	r4, r4, #2
 80098a6:	2600      	movs	r6, #0
 80098a8:	42a6      	cmp	r6, r4
 80098aa:	d109      	bne.n	80098c0 <__libc_init_array+0x24>
 80098ac:	4d0b      	ldr	r5, [pc, #44]	; (80098dc <__libc_init_array+0x40>)
 80098ae:	4c0c      	ldr	r4, [pc, #48]	; (80098e0 <__libc_init_array+0x44>)
 80098b0:	f000 f8e2 	bl	8009a78 <_init>
 80098b4:	1b64      	subs	r4, r4, r5
 80098b6:	10a4      	asrs	r4, r4, #2
 80098b8:	2600      	movs	r6, #0
 80098ba:	42a6      	cmp	r6, r4
 80098bc:	d105      	bne.n	80098ca <__libc_init_array+0x2e>
 80098be:	bd70      	pop	{r4, r5, r6, pc}
 80098c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80098c4:	4798      	blx	r3
 80098c6:	3601      	adds	r6, #1
 80098c8:	e7ee      	b.n	80098a8 <__libc_init_array+0xc>
 80098ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80098ce:	4798      	blx	r3
 80098d0:	3601      	adds	r6, #1
 80098d2:	e7f2      	b.n	80098ba <__libc_init_array+0x1e>
 80098d4:	08009d98 	.word	0x08009d98
 80098d8:	08009d98 	.word	0x08009d98
 80098dc:	08009d98 	.word	0x08009d98
 80098e0:	08009d9c 	.word	0x08009d9c

080098e4 <memset>:
 80098e4:	4402      	add	r2, r0
 80098e6:	4603      	mov	r3, r0
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d100      	bne.n	80098ee <memset+0xa>
 80098ec:	4770      	bx	lr
 80098ee:	f803 1b01 	strb.w	r1, [r3], #1
 80098f2:	e7f9      	b.n	80098e8 <memset+0x4>

080098f4 <_free_r>:
 80098f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098f6:	2900      	cmp	r1, #0
 80098f8:	d044      	beq.n	8009984 <_free_r+0x90>
 80098fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098fe:	9001      	str	r0, [sp, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	f1a1 0404 	sub.w	r4, r1, #4
 8009906:	bfb8      	it	lt
 8009908:	18e4      	addlt	r4, r4, r3
 800990a:	f000 f8a9 	bl	8009a60 <__malloc_lock>
 800990e:	4a1e      	ldr	r2, [pc, #120]	; (8009988 <_free_r+0x94>)
 8009910:	9801      	ldr	r0, [sp, #4]
 8009912:	6813      	ldr	r3, [r2, #0]
 8009914:	b933      	cbnz	r3, 8009924 <_free_r+0x30>
 8009916:	6063      	str	r3, [r4, #4]
 8009918:	6014      	str	r4, [r2, #0]
 800991a:	b003      	add	sp, #12
 800991c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009920:	f000 b8a4 	b.w	8009a6c <__malloc_unlock>
 8009924:	42a3      	cmp	r3, r4
 8009926:	d908      	bls.n	800993a <_free_r+0x46>
 8009928:	6825      	ldr	r5, [r4, #0]
 800992a:	1961      	adds	r1, r4, r5
 800992c:	428b      	cmp	r3, r1
 800992e:	bf01      	itttt	eq
 8009930:	6819      	ldreq	r1, [r3, #0]
 8009932:	685b      	ldreq	r3, [r3, #4]
 8009934:	1949      	addeq	r1, r1, r5
 8009936:	6021      	streq	r1, [r4, #0]
 8009938:	e7ed      	b.n	8009916 <_free_r+0x22>
 800993a:	461a      	mov	r2, r3
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	b10b      	cbz	r3, 8009944 <_free_r+0x50>
 8009940:	42a3      	cmp	r3, r4
 8009942:	d9fa      	bls.n	800993a <_free_r+0x46>
 8009944:	6811      	ldr	r1, [r2, #0]
 8009946:	1855      	adds	r5, r2, r1
 8009948:	42a5      	cmp	r5, r4
 800994a:	d10b      	bne.n	8009964 <_free_r+0x70>
 800994c:	6824      	ldr	r4, [r4, #0]
 800994e:	4421      	add	r1, r4
 8009950:	1854      	adds	r4, r2, r1
 8009952:	42a3      	cmp	r3, r4
 8009954:	6011      	str	r1, [r2, #0]
 8009956:	d1e0      	bne.n	800991a <_free_r+0x26>
 8009958:	681c      	ldr	r4, [r3, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	6053      	str	r3, [r2, #4]
 800995e:	4421      	add	r1, r4
 8009960:	6011      	str	r1, [r2, #0]
 8009962:	e7da      	b.n	800991a <_free_r+0x26>
 8009964:	d902      	bls.n	800996c <_free_r+0x78>
 8009966:	230c      	movs	r3, #12
 8009968:	6003      	str	r3, [r0, #0]
 800996a:	e7d6      	b.n	800991a <_free_r+0x26>
 800996c:	6825      	ldr	r5, [r4, #0]
 800996e:	1961      	adds	r1, r4, r5
 8009970:	428b      	cmp	r3, r1
 8009972:	bf04      	itt	eq
 8009974:	6819      	ldreq	r1, [r3, #0]
 8009976:	685b      	ldreq	r3, [r3, #4]
 8009978:	6063      	str	r3, [r4, #4]
 800997a:	bf04      	itt	eq
 800997c:	1949      	addeq	r1, r1, r5
 800997e:	6021      	streq	r1, [r4, #0]
 8009980:	6054      	str	r4, [r2, #4]
 8009982:	e7ca      	b.n	800991a <_free_r+0x26>
 8009984:	b003      	add	sp, #12
 8009986:	bd30      	pop	{r4, r5, pc}
 8009988:	2001022c 	.word	0x2001022c

0800998c <cleanup_glue>:
 800998c:	b538      	push	{r3, r4, r5, lr}
 800998e:	460c      	mov	r4, r1
 8009990:	6809      	ldr	r1, [r1, #0]
 8009992:	4605      	mov	r5, r0
 8009994:	b109      	cbz	r1, 800999a <cleanup_glue+0xe>
 8009996:	f7ff fff9 	bl	800998c <cleanup_glue>
 800999a:	4621      	mov	r1, r4
 800999c:	4628      	mov	r0, r5
 800999e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099a2:	f7ff bfa7 	b.w	80098f4 <_free_r>
	...

080099a8 <_reclaim_reent>:
 80099a8:	4b2c      	ldr	r3, [pc, #176]	; (8009a5c <_reclaim_reent+0xb4>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4283      	cmp	r3, r0
 80099ae:	b570      	push	{r4, r5, r6, lr}
 80099b0:	4604      	mov	r4, r0
 80099b2:	d051      	beq.n	8009a58 <_reclaim_reent+0xb0>
 80099b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80099b6:	b143      	cbz	r3, 80099ca <_reclaim_reent+0x22>
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d14a      	bne.n	8009a54 <_reclaim_reent+0xac>
 80099be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099c0:	6819      	ldr	r1, [r3, #0]
 80099c2:	b111      	cbz	r1, 80099ca <_reclaim_reent+0x22>
 80099c4:	4620      	mov	r0, r4
 80099c6:	f7ff ff95 	bl	80098f4 <_free_r>
 80099ca:	6961      	ldr	r1, [r4, #20]
 80099cc:	b111      	cbz	r1, 80099d4 <_reclaim_reent+0x2c>
 80099ce:	4620      	mov	r0, r4
 80099d0:	f7ff ff90 	bl	80098f4 <_free_r>
 80099d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80099d6:	b111      	cbz	r1, 80099de <_reclaim_reent+0x36>
 80099d8:	4620      	mov	r0, r4
 80099da:	f7ff ff8b 	bl	80098f4 <_free_r>
 80099de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80099e0:	b111      	cbz	r1, 80099e8 <_reclaim_reent+0x40>
 80099e2:	4620      	mov	r0, r4
 80099e4:	f7ff ff86 	bl	80098f4 <_free_r>
 80099e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80099ea:	b111      	cbz	r1, 80099f2 <_reclaim_reent+0x4a>
 80099ec:	4620      	mov	r0, r4
 80099ee:	f7ff ff81 	bl	80098f4 <_free_r>
 80099f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80099f4:	b111      	cbz	r1, 80099fc <_reclaim_reent+0x54>
 80099f6:	4620      	mov	r0, r4
 80099f8:	f7ff ff7c 	bl	80098f4 <_free_r>
 80099fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80099fe:	b111      	cbz	r1, 8009a06 <_reclaim_reent+0x5e>
 8009a00:	4620      	mov	r0, r4
 8009a02:	f7ff ff77 	bl	80098f4 <_free_r>
 8009a06:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009a08:	b111      	cbz	r1, 8009a10 <_reclaim_reent+0x68>
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	f7ff ff72 	bl	80098f4 <_free_r>
 8009a10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a12:	b111      	cbz	r1, 8009a1a <_reclaim_reent+0x72>
 8009a14:	4620      	mov	r0, r4
 8009a16:	f7ff ff6d 	bl	80098f4 <_free_r>
 8009a1a:	69a3      	ldr	r3, [r4, #24]
 8009a1c:	b1e3      	cbz	r3, 8009a58 <_reclaim_reent+0xb0>
 8009a1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009a20:	4620      	mov	r0, r4
 8009a22:	4798      	blx	r3
 8009a24:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009a26:	b1b9      	cbz	r1, 8009a58 <_reclaim_reent+0xb0>
 8009a28:	4620      	mov	r0, r4
 8009a2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a2e:	f7ff bfad 	b.w	800998c <cleanup_glue>
 8009a32:	5949      	ldr	r1, [r1, r5]
 8009a34:	b941      	cbnz	r1, 8009a48 <_reclaim_reent+0xa0>
 8009a36:	3504      	adds	r5, #4
 8009a38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a3a:	2d80      	cmp	r5, #128	; 0x80
 8009a3c:	68d9      	ldr	r1, [r3, #12]
 8009a3e:	d1f8      	bne.n	8009a32 <_reclaim_reent+0x8a>
 8009a40:	4620      	mov	r0, r4
 8009a42:	f7ff ff57 	bl	80098f4 <_free_r>
 8009a46:	e7ba      	b.n	80099be <_reclaim_reent+0x16>
 8009a48:	680e      	ldr	r6, [r1, #0]
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f7ff ff52 	bl	80098f4 <_free_r>
 8009a50:	4631      	mov	r1, r6
 8009a52:	e7ef      	b.n	8009a34 <_reclaim_reent+0x8c>
 8009a54:	2500      	movs	r5, #0
 8009a56:	e7ef      	b.n	8009a38 <_reclaim_reent+0x90>
 8009a58:	bd70      	pop	{r4, r5, r6, pc}
 8009a5a:	bf00      	nop
 8009a5c:	20000010 	.word	0x20000010

08009a60 <__malloc_lock>:
 8009a60:	4801      	ldr	r0, [pc, #4]	; (8009a68 <__malloc_lock+0x8>)
 8009a62:	f7f7 bd0c 	b.w	800147e <__retarget_lock_acquire_recursive>
 8009a66:	bf00      	nop
 8009a68:	200006c8 	.word	0x200006c8

08009a6c <__malloc_unlock>:
 8009a6c:	4801      	ldr	r0, [pc, #4]	; (8009a74 <__malloc_unlock+0x8>)
 8009a6e:	f7f7 bd1a 	b.w	80014a6 <__retarget_lock_release_recursive>
 8009a72:	bf00      	nop
 8009a74:	200006c8 	.word	0x200006c8

08009a78 <_init>:
 8009a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7a:	bf00      	nop
 8009a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a7e:	bc08      	pop	{r3}
 8009a80:	469e      	mov	lr, r3
 8009a82:	4770      	bx	lr

08009a84 <_fini>:
 8009a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a86:	bf00      	nop
 8009a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a8a:	bc08      	pop	{r3}
 8009a8c:	469e      	mov	lr, r3
 8009a8e:	4770      	bx	lr
