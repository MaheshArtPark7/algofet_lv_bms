
AlgoFetBms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbb4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800bd84  0800bd84  0001bd84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c154  0800c154  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c154  0800c154  0001c154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c15c  0800c15c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c15c  0800c15c  0001c15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c160  0800c160  0001c160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000102e0  20000074  0800c1d8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20010354  0800c1d8  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002654d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005baf  00000000  00000000  000465f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f10  00000000  00000000  0004c1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ca0  00000000  00000000  0004e0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028642  00000000  00000000  0004fd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cffe  00000000  00000000  00078392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f26bc  00000000  00000000  000a5390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00197a4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008504  00000000  00000000  00197a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bd6c 	.word	0x0800bd6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800bd6c 	.word	0x0800bd6c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2f>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000884:	bf24      	itt	cs
 8000886:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800088a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800088e:	d90d      	bls.n	80008ac <__aeabi_d2f+0x30>
 8000890:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000894:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000898:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800089c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008a4:	bf08      	it	eq
 80008a6:	f020 0001 	biceq.w	r0, r0, #1
 80008aa:	4770      	bx	lr
 80008ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008b0:	d121      	bne.n	80008f6 <__aeabi_d2f+0x7a>
 80008b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008b6:	bfbc      	itt	lt
 80008b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008bc:	4770      	bxlt	lr
 80008be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008c6:	f1c2 0218 	rsb	r2, r2, #24
 80008ca:	f1c2 0c20 	rsb	ip, r2, #32
 80008ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80008d2:	fa20 f002 	lsr.w	r0, r0, r2
 80008d6:	bf18      	it	ne
 80008d8:	f040 0001 	orrne.w	r0, r0, #1
 80008dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008e8:	ea40 000c 	orr.w	r0, r0, ip
 80008ec:	fa23 f302 	lsr.w	r3, r3, r2
 80008f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008f4:	e7cc      	b.n	8000890 <__aeabi_d2f+0x14>
 80008f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008fa:	d107      	bne.n	800090c <__aeabi_d2f+0x90>
 80008fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000900:	bf1e      	ittt	ne
 8000902:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000906:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800090a:	4770      	bxne	lr
 800090c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000910:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000914:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <__aeabi_uldivmod>:
 800091c:	b953      	cbnz	r3, 8000934 <__aeabi_uldivmod+0x18>
 800091e:	b94a      	cbnz	r2, 8000934 <__aeabi_uldivmod+0x18>
 8000920:	2900      	cmp	r1, #0
 8000922:	bf08      	it	eq
 8000924:	2800      	cmpeq	r0, #0
 8000926:	bf1c      	itt	ne
 8000928:	f04f 31ff 	movne.w	r1, #4294967295
 800092c:	f04f 30ff 	movne.w	r0, #4294967295
 8000930:	f000 b974 	b.w	8000c1c <__aeabi_idiv0>
 8000934:	f1ad 0c08 	sub.w	ip, sp, #8
 8000938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800093c:	f000 f806 	bl	800094c <__udivmoddi4>
 8000940:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr

0800094c <__udivmoddi4>:
 800094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000950:	9d08      	ldr	r5, [sp, #32]
 8000952:	4604      	mov	r4, r0
 8000954:	468e      	mov	lr, r1
 8000956:	2b00      	cmp	r3, #0
 8000958:	d14d      	bne.n	80009f6 <__udivmoddi4+0xaa>
 800095a:	428a      	cmp	r2, r1
 800095c:	4694      	mov	ip, r2
 800095e:	d969      	bls.n	8000a34 <__udivmoddi4+0xe8>
 8000960:	fab2 f282 	clz	r2, r2
 8000964:	b152      	cbz	r2, 800097c <__udivmoddi4+0x30>
 8000966:	fa01 f302 	lsl.w	r3, r1, r2
 800096a:	f1c2 0120 	rsb	r1, r2, #32
 800096e:	fa20 f101 	lsr.w	r1, r0, r1
 8000972:	fa0c fc02 	lsl.w	ip, ip, r2
 8000976:	ea41 0e03 	orr.w	lr, r1, r3
 800097a:	4094      	lsls	r4, r2
 800097c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000980:	0c21      	lsrs	r1, r4, #16
 8000982:	fbbe f6f8 	udiv	r6, lr, r8
 8000986:	fa1f f78c 	uxth.w	r7, ip
 800098a:	fb08 e316 	mls	r3, r8, r6, lr
 800098e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000992:	fb06 f107 	mul.w	r1, r6, r7
 8000996:	4299      	cmp	r1, r3
 8000998:	d90a      	bls.n	80009b0 <__udivmoddi4+0x64>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f106 30ff 	add.w	r0, r6, #4294967295
 80009a2:	f080 811f 	bcs.w	8000be4 <__udivmoddi4+0x298>
 80009a6:	4299      	cmp	r1, r3
 80009a8:	f240 811c 	bls.w	8000be4 <__udivmoddi4+0x298>
 80009ac:	3e02      	subs	r6, #2
 80009ae:	4463      	add	r3, ip
 80009b0:	1a5b      	subs	r3, r3, r1
 80009b2:	b2a4      	uxth	r4, r4
 80009b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009b8:	fb08 3310 	mls	r3, r8, r0, r3
 80009bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009c0:	fb00 f707 	mul.w	r7, r0, r7
 80009c4:	42a7      	cmp	r7, r4
 80009c6:	d90a      	bls.n	80009de <__udivmoddi4+0x92>
 80009c8:	eb1c 0404 	adds.w	r4, ip, r4
 80009cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80009d0:	f080 810a 	bcs.w	8000be8 <__udivmoddi4+0x29c>
 80009d4:	42a7      	cmp	r7, r4
 80009d6:	f240 8107 	bls.w	8000be8 <__udivmoddi4+0x29c>
 80009da:	4464      	add	r4, ip
 80009dc:	3802      	subs	r0, #2
 80009de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009e2:	1be4      	subs	r4, r4, r7
 80009e4:	2600      	movs	r6, #0
 80009e6:	b11d      	cbz	r5, 80009f0 <__udivmoddi4+0xa4>
 80009e8:	40d4      	lsrs	r4, r2
 80009ea:	2300      	movs	r3, #0
 80009ec:	e9c5 4300 	strd	r4, r3, [r5]
 80009f0:	4631      	mov	r1, r6
 80009f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f6:	428b      	cmp	r3, r1
 80009f8:	d909      	bls.n	8000a0e <__udivmoddi4+0xc2>
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	f000 80ef 	beq.w	8000bde <__udivmoddi4+0x292>
 8000a00:	2600      	movs	r6, #0
 8000a02:	e9c5 0100 	strd	r0, r1, [r5]
 8000a06:	4630      	mov	r0, r6
 8000a08:	4631      	mov	r1, r6
 8000a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a0e:	fab3 f683 	clz	r6, r3
 8000a12:	2e00      	cmp	r6, #0
 8000a14:	d14a      	bne.n	8000aac <__udivmoddi4+0x160>
 8000a16:	428b      	cmp	r3, r1
 8000a18:	d302      	bcc.n	8000a20 <__udivmoddi4+0xd4>
 8000a1a:	4282      	cmp	r2, r0
 8000a1c:	f200 80f9 	bhi.w	8000c12 <__udivmoddi4+0x2c6>
 8000a20:	1a84      	subs	r4, r0, r2
 8000a22:	eb61 0303 	sbc.w	r3, r1, r3
 8000a26:	2001      	movs	r0, #1
 8000a28:	469e      	mov	lr, r3
 8000a2a:	2d00      	cmp	r5, #0
 8000a2c:	d0e0      	beq.n	80009f0 <__udivmoddi4+0xa4>
 8000a2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a32:	e7dd      	b.n	80009f0 <__udivmoddi4+0xa4>
 8000a34:	b902      	cbnz	r2, 8000a38 <__udivmoddi4+0xec>
 8000a36:	deff      	udf	#255	; 0xff
 8000a38:	fab2 f282 	clz	r2, r2
 8000a3c:	2a00      	cmp	r2, #0
 8000a3e:	f040 8092 	bne.w	8000b66 <__udivmoddi4+0x21a>
 8000a42:	eba1 010c 	sub.w	r1, r1, ip
 8000a46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a4a:	fa1f fe8c 	uxth.w	lr, ip
 8000a4e:	2601      	movs	r6, #1
 8000a50:	0c20      	lsrs	r0, r4, #16
 8000a52:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a56:	fb07 1113 	mls	r1, r7, r3, r1
 8000a5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a5e:	fb0e f003 	mul.w	r0, lr, r3
 8000a62:	4288      	cmp	r0, r1
 8000a64:	d908      	bls.n	8000a78 <__udivmoddi4+0x12c>
 8000a66:	eb1c 0101 	adds.w	r1, ip, r1
 8000a6a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a6e:	d202      	bcs.n	8000a76 <__udivmoddi4+0x12a>
 8000a70:	4288      	cmp	r0, r1
 8000a72:	f200 80cb 	bhi.w	8000c0c <__udivmoddi4+0x2c0>
 8000a76:	4643      	mov	r3, r8
 8000a78:	1a09      	subs	r1, r1, r0
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a80:	fb07 1110 	mls	r1, r7, r0, r1
 8000a84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a88:	fb0e fe00 	mul.w	lr, lr, r0
 8000a8c:	45a6      	cmp	lr, r4
 8000a8e:	d908      	bls.n	8000aa2 <__udivmoddi4+0x156>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a98:	d202      	bcs.n	8000aa0 <__udivmoddi4+0x154>
 8000a9a:	45a6      	cmp	lr, r4
 8000a9c:	f200 80bb 	bhi.w	8000c16 <__udivmoddi4+0x2ca>
 8000aa0:	4608      	mov	r0, r1
 8000aa2:	eba4 040e 	sub.w	r4, r4, lr
 8000aa6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aaa:	e79c      	b.n	80009e6 <__udivmoddi4+0x9a>
 8000aac:	f1c6 0720 	rsb	r7, r6, #32
 8000ab0:	40b3      	lsls	r3, r6
 8000ab2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ab6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aba:	fa20 f407 	lsr.w	r4, r0, r7
 8000abe:	fa01 f306 	lsl.w	r3, r1, r6
 8000ac2:	431c      	orrs	r4, r3
 8000ac4:	40f9      	lsrs	r1, r7
 8000ac6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000aca:	fa00 f306 	lsl.w	r3, r0, r6
 8000ace:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ad2:	0c20      	lsrs	r0, r4, #16
 8000ad4:	fa1f fe8c 	uxth.w	lr, ip
 8000ad8:	fb09 1118 	mls	r1, r9, r8, r1
 8000adc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ae4:	4288      	cmp	r0, r1
 8000ae6:	fa02 f206 	lsl.w	r2, r2, r6
 8000aea:	d90b      	bls.n	8000b04 <__udivmoddi4+0x1b8>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000af4:	f080 8088 	bcs.w	8000c08 <__udivmoddi4+0x2bc>
 8000af8:	4288      	cmp	r0, r1
 8000afa:	f240 8085 	bls.w	8000c08 <__udivmoddi4+0x2bc>
 8000afe:	f1a8 0802 	sub.w	r8, r8, #2
 8000b02:	4461      	add	r1, ip
 8000b04:	1a09      	subs	r1, r1, r0
 8000b06:	b2a4      	uxth	r4, r4
 8000b08:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b0c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b18:	458e      	cmp	lr, r1
 8000b1a:	d908      	bls.n	8000b2e <__udivmoddi4+0x1e2>
 8000b1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b20:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b24:	d26c      	bcs.n	8000c00 <__udivmoddi4+0x2b4>
 8000b26:	458e      	cmp	lr, r1
 8000b28:	d96a      	bls.n	8000c00 <__udivmoddi4+0x2b4>
 8000b2a:	3802      	subs	r0, #2
 8000b2c:	4461      	add	r1, ip
 8000b2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b32:	fba0 9402 	umull	r9, r4, r0, r2
 8000b36:	eba1 010e 	sub.w	r1, r1, lr
 8000b3a:	42a1      	cmp	r1, r4
 8000b3c:	46c8      	mov	r8, r9
 8000b3e:	46a6      	mov	lr, r4
 8000b40:	d356      	bcc.n	8000bf0 <__udivmoddi4+0x2a4>
 8000b42:	d053      	beq.n	8000bec <__udivmoddi4+0x2a0>
 8000b44:	b15d      	cbz	r5, 8000b5e <__udivmoddi4+0x212>
 8000b46:	ebb3 0208 	subs.w	r2, r3, r8
 8000b4a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b4e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b52:	fa22 f306 	lsr.w	r3, r2, r6
 8000b56:	40f1      	lsrs	r1, r6
 8000b58:	431f      	orrs	r7, r3
 8000b5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b5e:	2600      	movs	r6, #0
 8000b60:	4631      	mov	r1, r6
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	f1c2 0320 	rsb	r3, r2, #32
 8000b6a:	40d8      	lsrs	r0, r3
 8000b6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b70:	fa21 f303 	lsr.w	r3, r1, r3
 8000b74:	4091      	lsls	r1, r2
 8000b76:	4301      	orrs	r1, r0
 8000b78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7c:	fa1f fe8c 	uxth.w	lr, ip
 8000b80:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b84:	fb07 3610 	mls	r6, r7, r0, r3
 8000b88:	0c0b      	lsrs	r3, r1, #16
 8000b8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b8e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b92:	429e      	cmp	r6, r3
 8000b94:	fa04 f402 	lsl.w	r4, r4, r2
 8000b98:	d908      	bls.n	8000bac <__udivmoddi4+0x260>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ba2:	d22f      	bcs.n	8000c04 <__udivmoddi4+0x2b8>
 8000ba4:	429e      	cmp	r6, r3
 8000ba6:	d92d      	bls.n	8000c04 <__udivmoddi4+0x2b8>
 8000ba8:	3802      	subs	r0, #2
 8000baa:	4463      	add	r3, ip
 8000bac:	1b9b      	subs	r3, r3, r6
 8000bae:	b289      	uxth	r1, r1
 8000bb0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bb4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bbc:	fb06 f30e 	mul.w	r3, r6, lr
 8000bc0:	428b      	cmp	r3, r1
 8000bc2:	d908      	bls.n	8000bd6 <__udivmoddi4+0x28a>
 8000bc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000bcc:	d216      	bcs.n	8000bfc <__udivmoddi4+0x2b0>
 8000bce:	428b      	cmp	r3, r1
 8000bd0:	d914      	bls.n	8000bfc <__udivmoddi4+0x2b0>
 8000bd2:	3e02      	subs	r6, #2
 8000bd4:	4461      	add	r1, ip
 8000bd6:	1ac9      	subs	r1, r1, r3
 8000bd8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bdc:	e738      	b.n	8000a50 <__udivmoddi4+0x104>
 8000bde:	462e      	mov	r6, r5
 8000be0:	4628      	mov	r0, r5
 8000be2:	e705      	b.n	80009f0 <__udivmoddi4+0xa4>
 8000be4:	4606      	mov	r6, r0
 8000be6:	e6e3      	b.n	80009b0 <__udivmoddi4+0x64>
 8000be8:	4618      	mov	r0, r3
 8000bea:	e6f8      	b.n	80009de <__udivmoddi4+0x92>
 8000bec:	454b      	cmp	r3, r9
 8000bee:	d2a9      	bcs.n	8000b44 <__udivmoddi4+0x1f8>
 8000bf0:	ebb9 0802 	subs.w	r8, r9, r2
 8000bf4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bf8:	3801      	subs	r0, #1
 8000bfa:	e7a3      	b.n	8000b44 <__udivmoddi4+0x1f8>
 8000bfc:	4646      	mov	r6, r8
 8000bfe:	e7ea      	b.n	8000bd6 <__udivmoddi4+0x28a>
 8000c00:	4620      	mov	r0, r4
 8000c02:	e794      	b.n	8000b2e <__udivmoddi4+0x1e2>
 8000c04:	4640      	mov	r0, r8
 8000c06:	e7d1      	b.n	8000bac <__udivmoddi4+0x260>
 8000c08:	46d0      	mov	r8, sl
 8000c0a:	e77b      	b.n	8000b04 <__udivmoddi4+0x1b8>
 8000c0c:	3b02      	subs	r3, #2
 8000c0e:	4461      	add	r1, ip
 8000c10:	e732      	b.n	8000a78 <__udivmoddi4+0x12c>
 8000c12:	4630      	mov	r0, r6
 8000c14:	e709      	b.n	8000a2a <__udivmoddi4+0xde>
 8000c16:	4464      	add	r4, ip
 8000c18:	3802      	subs	r0, #2
 8000c1a:	e742      	b.n	8000aa2 <__udivmoddi4+0x156>

08000c1c <__aeabi_idiv0>:
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <Unpack_FCU_STATE_REQUEST_can_codegen>:

#endif // CAN_CODEGEN_USE_DIAG_MONITORS


uint32_t Unpack_FCU_STATE_REQUEST_can_codegen(FCU_STATE_REQUEST_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->FCU_StateRequest = (_d[0] & (0x07U));
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	701a      	strb	r2, [r3, #0]
  _m->mon1.frame_cnt++;

  FMon_FCU_STATE_REQUEST_can_codegen(&_m->mon1, FCU_STATE_REQUEST_CANID);
#endif // CAN_CODEGEN_USE_DIAG_MONITORS

  return FCU_STATE_REQUEST_CANID;
 8000c3c:	f240 1301 	movw	r3, #257	; 0x101
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <Pack_BAT_GAUGE_OvrVIEW_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_GAUGE_OvrVIEW_can_codegen(BAT_GAUGE_OvrVIEW_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_GAUGE_OvrVIEW_DLC) && (i < 8); cframe->Data[i++] = 0);
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]
 8000c5a:	e007      	b.n	8000c6c <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x20>
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	1c5a      	adds	r2, r3, #1
 8000c60:	73fa      	strb	r2, [r7, #15]
 8000c62:	461a      	mov	r2, r3
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	2200      	movs	r2, #0
 8000c6a:	715a      	strb	r2, [r3, #5]
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d802      	bhi.n	8000c78 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x2c>
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	2b07      	cmp	r3, #7
 8000c76:	d9f1      	bls.n	8000c5c <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_gauge_SoC & (0xFFU));
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	795a      	ldrb	r2, [r3, #5]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= (_m->BAT_gauge_SoH & (0xFFU));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	799a      	ldrb	r2, [r3, #6]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	785b      	ldrb	r3, [r3, #1]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_gauge_cycleCount & (0xFFU));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	79da      	ldrb	r2, [r3, #7]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	885b      	ldrh	r3, [r3, #2]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_gauge_cycleCount >> 8) & (0xFFU));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	7a1a      	ldrb	r2, [r3, #8]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	885b      	ldrh	r3, [r3, #2]
 8000cb2:	0a1b      	lsrs	r3, r3, #8
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	721a      	strb	r2, [r3, #8]

  cframe->MsgId = BAT_GAUGE_OvrVIEW_CANID;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x94>)
 8000cc4:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_GAUGE_OvrVIEW_DLC;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	2204      	movs	r2, #4
 8000cca:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_GAUGE_OvrVIEW_IDE;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	735a      	strb	r2, [r3, #13]
  return BAT_GAUGE_OvrVIEW_CANID;
 8000cd2:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x94>)
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	001ff810 	.word	0x001ff810

08000ce4 <bq76952_init>:
static float bq76952_ReadTemp(uint8_t cmd);
//------------------------------------------------------------------------------
// Static Functions definition

int16_t bq76952_init(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
    int16_t ret_val = SYS_ERR;
 8000cea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cee:	80fb      	strh	r3, [r7, #6]
    do
    {
        uint16_t device_number = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	80bb      	strh	r3, [r7, #4]
        TsBmsPower_cfg_t.power_cfg_reg = PowerConfig;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <bq76952_init+0x3c>)
 8000cf6:	f249 2234 	movw	r2, #37428	; 0x9234
 8000cfa:	80da      	strh	r2, [r3, #6]
        TsBmsPower_cfg_t.reg_val = 0x2D80;
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <bq76952_init+0x3c>)
 8000cfe:	f44f 5236 	mov.w	r2, #11648	; 0x2d80
 8000d02:	809a      	strh	r2, [r3, #4]
        TsBmsPower_cfg_t.len = 4;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <bq76952_init+0x3c>)
 8000d06:	2204      	movs	r2, #4
 8000d08:	701a      	strb	r2, [r3, #0]
        //SCDThreshold --> 0x02				#40mV across 1mohm, i.e, 40A. Refer to TRM page 168
        //SCDDelay --> 0x03					#30us. Enabled with a delay of (value - 1) * 15 us; min value of 1
        //SCDLLatchLimit --> 0x01			#Only with load removal. Refer to TRM page 170


        ret_val = SYS_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	80fb      	strh	r3, [r7, #6]
    } while (false);

    return ret_val;
 8000d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000090 	.word	0x20000090

08000d24 <bq76952_FETs_enable>:
	ret_val = SYS_OK;
	return ret_val;
}

static int16_t bq76952_FETs_enable(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
	// Enables all the FETs to be controlled
	int16_t ret_val = SYS_ERR;
 8000d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d2e:	80fb      	strh	r3, [r7, #6]
	do
	{
	    if (SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, FET_ENABLE))
 8000d30:	2122      	movs	r1, #34	; 0x22
 8000d32:	203e      	movs	r0, #62	; 0x3e
 8000d34:	f000 f86c 	bl	8000e10 <bq76952_write_sub_cmd>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
	    {
	       break;
	    }
	} while (false);
	ret_val = SYS_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	80fb      	strh	r3, [r7, #6]
	return ret_val;
 8000d40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <bq76952_FETs_call>:
}*/


//FET Control call
extern int16_t bq76952_FETs_call(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	//For calling all FET Commands
	bq76952_AFE_reset();
 8000d50:	f000 f80b 	bl	8000d6a <bq76952_AFE_reset>
	HAL_Delay(100);
 8000d54:	2064      	movs	r0, #100	; 0x64
 8000d56:	f001 fb01 	bl	800235c <HAL_Delay>
	//bq76952_FETs_SleepDisable();
	//HAL_Delay(100);
	//bq76952_init();
	//HAL_Delay(100);
	bq76952_FETs_enable();
 8000d5a:	f7ff ffe3 	bl	8000d24 <bq76952_FETs_enable>
	HAL_Delay(100);
 8000d5e:	2064      	movs	r0, #100	; 0x64
 8000d60:	f001 fafc 	bl	800235c <HAL_Delay>
	//HAL_Delay(100);
	//bq76952_dischargeOFF();
	//HAL_Delay(100);
	//bq76952_chargeOFF();
	//HAL_Delay(100);
}
 8000d64:	bf00      	nop
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <bq76952_AFE_reset>:


//------------------------------------------------------------------------------------------------------------
//AFE Functions
static int16_t bq76952_AFE_reset(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
	// Resets all the registers of the AFE
	int16_t ret_val = SYS_ERR;
 8000d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d74:	80fb      	strh	r3, [r7, #6]
    do
    {
        if (SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, RESET))
 8000d76:	2112      	movs	r1, #18
 8000d78:	203e      	movs	r0, #62	; 0x3e
 8000d7a:	f000 f849 	bl	8000e10 <bq76952_write_sub_cmd>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
        {
            break;
        }
    } while (false);
    ret_val = SYS_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	80fb      	strh	r3, [r7, #6]
    return ret_val;
 8000d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <CRC8>:
    }
    return crc;
}
static uint8_t CRC8(uint8_t *ptr, uint8_t len)
//Calculates CRC8 for passed bytes.
{
 8000d92:	b480      	push	{r7}
 8000d94:	b085      	sub	sp, #20
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	70fb      	strb	r3, [r7, #3]
	uint8_t i;
	uint8_t crc=0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73bb      	strb	r3, [r7, #14]
	while(len--!=0)
 8000da2:	e029      	b.n	8000df8 <CRC8+0x66>
	{
		for(i=0x80; i!=0; i/=2)
 8000da4:	2380      	movs	r3, #128	; 0x80
 8000da6:	73fb      	strb	r3, [r7, #15]
 8000da8:	e020      	b.n	8000dec <CRC8+0x5a>
		{
			if((crc & 0x80) != 0)
 8000daa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	da09      	bge.n	8000dc6 <CRC8+0x34>
			{
				crc *= 2;
 8000db2:	7bbb      	ldrb	r3, [r7, #14]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	73bb      	strb	r3, [r7, #14]
				crc ^= 0x107;
 8000db8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dbc:	f083 0307 	eor.w	r3, r3, #7
 8000dc0:	b25b      	sxtb	r3, r3
 8000dc2:	73bb      	strb	r3, [r7, #14]
 8000dc4:	e002      	b.n	8000dcc <CRC8+0x3a>
			}
			else
				crc *= 2;
 8000dc6:	7bbb      	ldrb	r3, [r7, #14]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	73bb      	strb	r3, [r7, #14]

			if((*ptr & i)!=0)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	781a      	ldrb	r2, [r3, #0]
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d005      	beq.n	8000de6 <CRC8+0x54>
				crc ^= 0x107;
 8000dda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dde:	f083 0307 	eor.w	r3, r3, #7
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	73bb      	strb	r3, [r7, #14]
		for(i=0x80; i!=0; i/=2)
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	085b      	lsrs	r3, r3, #1
 8000dea:	73fb      	strb	r3, [r7, #15]
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1db      	bne.n	8000daa <CRC8+0x18>
		}
		ptr++;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3301      	adds	r3, #1
 8000df6:	607b      	str	r3, [r7, #4]
	while(len--!=0)
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	1e5a      	subs	r2, r3, #1
 8000dfc:	70fa      	strb	r2, [r7, #3]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1d0      	bne.n	8000da4 <CRC8+0x12>
	}
	return(crc);
 8000e02:	7bbb      	ldrb	r3, [r7, #14]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <bq76952_write_sub_cmd>:

//-----------------------------------------------------------------------------------------------------------------------------
// READ/WRITE FUNCTIONS FOR DIRECT COMMANDS and SUBCOMMANDS

static int16_t bq76952_write_sub_cmd(uint8_t subCmdRegAddr, uint16_t subCmd)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af02      	add	r7, sp, #8
 8000e16:	4603      	mov	r3, r0
 8000e18:	460a      	mov	r2, r1
 8000e1a:	71fb      	strb	r3, [r7, #7]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	80bb      	strh	r3, [r7, #4]
	//To write data to subcommand address register (0x3E)
	uint8_t subCmdRegAddrWRITE = subCmdRegAddr | 0x80u; //Changes the leftmost bit to 1 since W Operation
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e26:	76fb      	strb	r3, [r7, #27]
    int16_t ret_val = SYS_ERR;
 8000e28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e2c:	83fb      	strh	r3, [r7, #30]
    uint8_t pTxData[SPI_SUB_CMD_FRAME_LEN] = {0};
 8000e2e:	4b38      	ldr	r3, [pc, #224]	; (8000f10 <bq76952_write_sub_cmd+0x100>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	823b      	strh	r3, [r7, #16]
 8000e34:	2300      	movs	r3, #0
 8000e36:	74bb      	strb	r3, [r7, #18]
    uint8_t pRxData[SPI_SUB_CMD_FRAME_LEN] = {0};
 8000e38:	4b35      	ldr	r3, [pc, #212]	; (8000f10 <bq76952_write_sub_cmd+0x100>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	81bb      	strh	r3, [r7, #12]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	73bb      	strb	r3, [r7, #14]
    uint8_t retry_cnt = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	777b      	strb	r3, [r7, #29]
    uint16_t TxByte, RxByte = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	833b      	strh	r3, [r7, #24]
    for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	773b      	strb	r3, [r7, #28]
 8000e4e:	e055      	b.n	8000efc <bq76952_write_sub_cmd+0xec>
    {
        pTxData[0] = subCmdRegAddrWRITE + i;
 8000e50:	7efa      	ldrb	r2, [r7, #27]
 8000e52:	7f3b      	ldrb	r3, [r7, #28]
 8000e54:	4413      	add	r3, r2
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	743b      	strb	r3, [r7, #16]
        pTxData[1] = subCmd >>(i*8); //To retrieve the lower byte and then the higher byte subsequently
 8000e5a:	88ba      	ldrh	r2, [r7, #4]
 8000e5c:	7f3b      	ldrb	r3, [r7, #28]
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	fa42 f303 	asr.w	r3, r2, r3
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	747b      	strb	r3, [r7, #17]
        pTxData[2] = CRC8(pTxData, SUB_CMD_LEN );
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff8f 	bl	8000d92 <CRC8>
 8000e74:	4603      	mov	r3, r0
 8000e76:	74bb      	strb	r3, [r7, #18]
        TxByte = pTxData[0] | (pTxData[1] << 8);
 8000e78:	7c3b      	ldrb	r3, [r7, #16]
 8000e7a:	b21a      	sxth	r2, r3
 8000e7c:	7c7b      	ldrb	r3, [r7, #17]
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	b21b      	sxth	r3, r3
 8000e82:	4313      	orrs	r3, r2
 8000e84:	b21b      	sxth	r3, r3
 8000e86:	82fb      	strh	r3, [r7, #22]
        do
        {
            HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);                                          // Enable CS
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2110      	movs	r1, #16
 8000e8c:	4821      	ldr	r0, [pc, #132]	; (8000f14 <bq76952_write_sub_cmd+0x104>)
 8000e8e:	f004 fa19 	bl	80052c4 <HAL_GPIO_WritePin>
            HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, SPI_SUB_CMD_FRAME_LEN, SPI_WR_TIMEOUT_MS); // Rx & Tx simultaneously (Full Duplex)
 8000e92:	f107 020c 	add.w	r2, r7, #12
 8000e96:	f107 0110 	add.w	r1, r7, #16
 8000e9a:	230a      	movs	r3, #10
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	481d      	ldr	r0, [pc, #116]	; (8000f18 <bq76952_write_sub_cmd+0x108>)
 8000ea2:	f007 fa97 	bl	80083d4 <HAL_SPI_TransmitReceive>
            HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);                                          // Disable CS
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2110      	movs	r1, #16
 8000eaa:	481a      	ldr	r0, [pc, #104]	; (8000f14 <bq76952_write_sub_cmd+0x104>)
 8000eac:	f004 fa0a 	bl	80052c4 <HAL_GPIO_WritePin>
            HAL_Delay(2);
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f001 fa53 	bl	800235c <HAL_Delay>
            RxByte = pRxData[0] | (pRxData[1] << 8);
 8000eb6:	7b3b      	ldrb	r3, [r7, #12]
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	7b7b      	ldrb	r3, [r7, #13]
 8000ebc:	021b      	lsls	r3, r3, #8
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b21b      	sxth	r3, r3
 8000ec4:	833b      	strh	r3, [r7, #24]
            retry_cnt++;
 8000ec6:	7f7b      	ldrb	r3, [r7, #29]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	777b      	strb	r3, [r7, #29]
        } while ((TxByte != RxByte) && (retry_cnt < 3));
 8000ecc:	8afa      	ldrh	r2, [r7, #22]
 8000ece:	8b3b      	ldrh	r3, [r7, #24]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d002      	beq.n	8000eda <bq76952_write_sub_cmd+0xca>
 8000ed4:	7f7b      	ldrb	r3, [r7, #29]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d9d6      	bls.n	8000e88 <bq76952_write_sub_cmd+0x78>
        if ((TxByte == RxByte) && (retry_cnt < 4))
 8000eda:	8afa      	ldrh	r2, [r7, #22]
 8000edc:	8b3b      	ldrh	r3, [r7, #24]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d108      	bne.n	8000ef4 <bq76952_write_sub_cmd+0xe4>
 8000ee2:	7f7b      	ldrb	r3, [r7, #29]
 8000ee4:	2b03      	cmp	r3, #3
 8000ee6:	d805      	bhi.n	8000ef4 <bq76952_write_sub_cmd+0xe4>
        {
            ret_val = SYS_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8000eec:	7f3b      	ldrb	r3, [r7, #28]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	773b      	strb	r3, [r7, #28]
 8000ef2:	e003      	b.n	8000efc <bq76952_write_sub_cmd+0xec>
        }
        else
        {
            ret_val = SYS_ERR;
 8000ef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ef8:	83fb      	strh	r3, [r7, #30]
            break;
 8000efa:	e002      	b.n	8000f02 <bq76952_write_sub_cmd+0xf2>
    for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8000efc:	7f3b      	ldrb	r3, [r7, #28]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d9a6      	bls.n	8000e50 <bq76952_write_sub_cmd+0x40>
        }
    }
    return ret_val;
 8000f02:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3720      	adds	r7, #32
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	0800bd84 	.word	0x0800bd84
 8000f14:	40020800 	.word	0x40020800
 8000f18:	20000600 	.word	0x20000600

08000f1c <app_afe_init>:
#include "app_defines.h"
#include "bq76952.h"
#include "main.h"

int16_t app_afe_init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8000f22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f26:	80fb      	strh	r3, [r7, #6]
	do
	{
		HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2110      	movs	r1, #16
 8000f2c:	4806      	ldr	r0, [pc, #24]	; (8000f48 <app_afe_init+0x2c>)
 8000f2e:	f004 f9c9 	bl	80052c4 <HAL_GPIO_WritePin>
	    bq76952_init();
 8000f32:	f7ff fed7 	bl	8000ce4 <bq76952_init>
		ret_val = SYS_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	80fb      	strh	r3, [r7, #6]
	}while(false);

	return ret_val;
 8000f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40020800 	.word	0x40020800

08000f4c <app_gauge_init>:

	return ret_val;
}

int16_t app_gauge_init(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
    int16_t ret_val = SYS_ERR;
 8000f52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f56:	80fb      	strh	r3, [r7, #6]

    // Config block reads
    block_read_cfg[eAlgoFet_BLOCK0].Addr = 0x02u;
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <app_gauge_init+0x2c>)
 8000f5a:	2202      	movs	r2, #2
 8000f5c:	701a      	strb	r2, [r3, #0]
    block_read_cfg[eAlgoFet_BLOCK0].Len = 18u;
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <app_gauge_init+0x2c>)
 8000f60:	2212      	movs	r2, #18
 8000f62:	705a      	strb	r2, [r3, #1]

    ret_val = SYS_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	80fb      	strh	r3, [r7, #6]

    return ret_val;
 8000f68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	20000098 	.word	0x20000098

08000f7c <app_sys_init>:
#include "spi.h"
#include "app_afe.h"
#include "app_fuel_gauge.h"

int16_t app_sys_init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8000f82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f86:	80fb      	strh	r3, [r7, #6]
	do
	{
		// TODO:
		// IO Init
		(void) MX_GPIO_Init();
 8000f88:	f000 fb9c 	bl	80016c4 <MX_GPIO_Init>
		// I2C Init
		(void) MX_I2C1_Init();
 8000f8c:	f000 fc76 	bl	800187c <MX_I2C1_Init>
		// SPI Init
		(void) MX_SPI1_Init();
 8000f90:	f000 fe04 	bl	8001b9c <MX_SPI1_Init>
		// CAN Init
		(void) MX_CAN1_Init();
 8000f94:	f000 f940 	bl	8001218 <MX_CAN1_Init>
		// PWM Init
		(void) MX_DMA_Init();
 8000f98:	f000 fa82 	bl	80014a0 <MX_DMA_Init>
		// ADC Init
		(void) MX_ADC1_Init();
 8000f9c:	f000 f824 	bl	8000fe8 <MX_ADC1_Init>
		// huart Init
		(void) MX_USART1_UART_Init();
 8000fa0:	f001 f87c 	bl	800209c <MX_USART1_UART_Init>

	}while(false);

	return ret_val;
 8000fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <app_sys_peripheral_init>:

int16_t app_sys_peripheral_init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8000fb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fba:	80fb      	strh	r3, [r7, #6]
	do
	{
		// TODO:
		// AFE Init
		if(SYS_OK != app_afe_init())
 8000fbc:	f7ff ffae 	bl	8000f1c <app_afe_init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d107      	bne.n	8000fd6 <app_sys_peripheral_init+0x26>
		{
			break;
		}
		// Fuel Gauge Init
		if(SYS_OK != app_gauge_init())
 8000fc6:	f7ff ffc1 	bl	8000f4c <app_gauge_init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d104      	bne.n	8000fda <app_sys_peripheral_init+0x2a>
//		{
//		    break;
//		}
		// CAN NW Init

		ret_val = SYS_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	80fb      	strh	r3, [r7, #6]
 8000fd4:	e002      	b.n	8000fdc <app_sys_peripheral_init+0x2c>
			break;
 8000fd6:	bf00      	nop
 8000fd8:	e000      	b.n	8000fdc <app_sys_peripheral_init+0x2c>
			break;
 8000fda:	bf00      	nop
	}while(false);

	return ret_val;
 8000fdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fee:	463b      	mov	r3, r7
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <MX_ADC1_Init+0x98>)
 8000ffc:	4a21      	ldr	r2, [pc, #132]	; (8001084 <MX_ADC1_Init+0x9c>)
 8000ffe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_ADC1_Init+0x98>)
 8001002:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001006:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001008:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <MX_ADC1_Init+0x98>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800100e:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_ADC1_Init+0x98>)
 8001010:	2201      	movs	r2, #1
 8001012:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_ADC1_Init+0x98>)
 8001016:	2201      	movs	r2, #1
 8001018:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_ADC1_Init+0x98>)
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <MX_ADC1_Init+0x98>)
 8001024:	2200      	movs	r2, #0
 8001026:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_ADC1_Init+0x98>)
 800102a:	4a17      	ldr	r2, [pc, #92]	; (8001088 <MX_ADC1_Init+0xa0>)
 800102c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_ADC1_Init+0x98>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <MX_ADC1_Init+0x98>)
 8001036:	2201      	movs	r2, #1
 8001038:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_ADC1_Init+0x98>)
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_ADC1_Init+0x98>)
 8001044:	2201      	movs	r2, #1
 8001046:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <MX_ADC1_Init+0x98>)
 800104a:	f001 f9ab 	bl	80023a4 <HAL_ADC_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001054:	f000 fd92 	bl	8001b7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001058:	230a      	movs	r3, #10
 800105a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800105c:	2301      	movs	r3, #1
 800105e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001064:	463b      	mov	r3, r7
 8001066:	4619      	mov	r1, r3
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_ADC1_Init+0x98>)
 800106a:	f001 fd69 	bl	8002b40 <HAL_ADC_ConfigChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001074:	f000 fd82 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	200000a0 	.word	0x200000a0
 8001084:	40012000 	.word	0x40012000
 8001088:	0f000001 	.word	0x0f000001

0800108c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a32      	ldr	r2, [pc, #200]	; (8001174 <HAL_ADC_MspInit+0xe8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d15e      	bne.n	800116c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	4b31      	ldr	r3, [pc, #196]	; (8001178 <HAL_ADC_MspInit+0xec>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a30      	ldr	r2, [pc, #192]	; (8001178 <HAL_ADC_MspInit+0xec>)
 80010b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <HAL_ADC_MspInit+0xec>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <HAL_ADC_MspInit+0xec>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a29      	ldr	r2, [pc, #164]	; (8001178 <HAL_ADC_MspInit+0xec>)
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b27      	ldr	r3, [pc, #156]	; (8001178 <HAL_ADC_MspInit+0xec>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|TEMP2_IN_Pin|NTC_Pin;
 80010e6:	2307      	movs	r3, #7
 80010e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ea:	2303      	movs	r3, #3
 80010ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	4820      	ldr	r0, [pc, #128]	; (800117c <HAL_ADC_MspInit+0xf0>)
 80010fa:	f003 fdbf 	bl	8004c7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80010fe:	4b20      	ldr	r3, [pc, #128]	; (8001180 <HAL_ADC_MspInit+0xf4>)
 8001100:	4a20      	ldr	r2, [pc, #128]	; (8001184 <HAL_ADC_MspInit+0xf8>)
 8001102:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <HAL_ADC_MspInit+0xf4>)
 8001106:	2200      	movs	r2, #0
 8001108:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <HAL_ADC_MspInit+0xf4>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <HAL_ADC_MspInit+0xf4>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <HAL_ADC_MspInit+0xf4>)
 8001118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800111c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800111e:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_ADC_MspInit+0xf4>)
 8001120:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001124:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <HAL_ADC_MspInit+0xf4>)
 8001128:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800112c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <HAL_ADC_MspInit+0xf4>)
 8001130:	2200      	movs	r2, #0
 8001132:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_ADC_MspInit+0xf4>)
 8001136:	2200      	movs	r2, #0
 8001138:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <HAL_ADC_MspInit+0xf4>)
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001140:	480f      	ldr	r0, [pc, #60]	; (8001180 <HAL_ADC_MspInit+0xf4>)
 8001142:	f003 f915 	bl	8004370 <HAL_DMA_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800114c:	f000 fd16 	bl	8001b7c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <HAL_ADC_MspInit+0xf4>)
 8001154:	639a      	str	r2, [r3, #56]	; 0x38
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <HAL_ADC_MspInit+0xf4>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2105      	movs	r1, #5
 8001160:	2012      	movs	r0, #18
 8001162:	f003 f8c1 	bl	80042e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001166:	2012      	movs	r0, #18
 8001168:	f003 f8ea 	bl	8004340 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800116c:	bf00      	nop
 800116e:	3728      	adds	r7, #40	; 0x28
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40012000 	.word	0x40012000
 8001178:	40023800 	.word	0x40023800
 800117c:	40020800 	.word	0x40020800
 8001180:	200000e8 	.word	0x200000e8
 8001184:	40026470 	.word	0x40026470

08001188 <testBenchTempCheck>:
}

/* USER CODE BEGIN 1 */

void testBenchTempCheck()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
	//HAL_ADCEx_Calibration_Start(&hadc1);
	HAL_ADC_Start(&hadc1);
 800118e:	481a      	ldr	r0, [pc, #104]	; (80011f8 <testBenchTempCheck+0x70>)
 8001190:	f001 fa74 	bl	800267c <HAL_ADC_Start>
	uint16_t val = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	81fb      	strh	r3, [r7, #14]
	char str;

	val = HAL_ADC_GetValue(&hadc1);
 8001198:	4817      	ldr	r0, [pc, #92]	; (80011f8 <testBenchTempCheck+0x70>)
 800119a:	f001 fca5 	bl	8002ae8 <HAL_ADC_GetValue>
 800119e:	4603      	mov	r3, r0
 80011a0:	81fb      	strh	r3, [r7, #14]

	float voltage = (float)val/4096*3.3;
 80011a2:	89fb      	ldrh	r3, [r7, #14]
 80011a4:	ee07 3a90 	vmov	s15, r3
 80011a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ac:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80011fc <testBenchTempCheck+0x74>
 80011b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011b4:	ee16 0a90 	vmov	r0, s13
 80011b8:	f7ff fb08 	bl	80007cc <__aeabi_f2d>
 80011bc:	a30c      	add	r3, pc, #48	; (adr r3, 80011f0 <testBenchTempCheck+0x68>)
 80011be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c2:	f7ff f875 	bl	80002b0 <__aeabi_dmul>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4610      	mov	r0, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	f7ff fb55 	bl	800087c <__aeabi_d2f>
 80011d2:	4603      	mov	r3, r0
 80011d4:	60bb      	str	r3, [r7, #8]
	sprintf (str, "%d", val);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	89fb      	ldrh	r3, [r7, #14]
 80011dc:	461a      	mov	r2, r3
 80011de:	4908      	ldr	r1, [pc, #32]	; (8001200 <testBenchTempCheck+0x78>)
 80011e0:	f00a fa56 	bl	800b690 <siprintf>
	//HAL_UART_Transmit(&huart, (uint8_t)val, 1, 50);
		}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	f3af 8000 	nop.w
 80011f0:	66666666 	.word	0x66666666
 80011f4:	400a6666 	.word	0x400a6666
 80011f8:	200000a0 	.word	0x200000a0
 80011fc:	45800000 	.word	0x45800000
 8001200:	0800bd88 	.word	0x0800bd88

08001204 <HAL_CAN_RxFifo0MsgPendingCallback>:

int count = 0;


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800121c:	4b17      	ldr	r3, [pc, #92]	; (800127c <MX_CAN1_Init+0x64>)
 800121e:	4a18      	ldr	r2, [pc, #96]	; (8001280 <MX_CAN1_Init+0x68>)
 8001220:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <MX_CAN1_Init+0x64>)
 8001224:	2205      	movs	r2, #5
 8001226:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001228:	4b14      	ldr	r3, [pc, #80]	; (800127c <MX_CAN1_Init+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_CAN1_Init+0x64>)
 8001230:	2200      	movs	r2, #0
 8001232:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001234:	4b11      	ldr	r3, [pc, #68]	; (800127c <MX_CAN1_Init+0x64>)
 8001236:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800123a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_CAN1_Init+0x64>)
 800123e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001242:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001244:	4b0d      	ldr	r3, [pc, #52]	; (800127c <MX_CAN1_Init+0x64>)
 8001246:	2200      	movs	r2, #0
 8001248:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_CAN1_Init+0x64>)
 800124c:	2200      	movs	r2, #0
 800124e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <MX_CAN1_Init+0x64>)
 8001252:	2200      	movs	r2, #0
 8001254:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_CAN1_Init+0x64>)
 8001258:	2200      	movs	r2, #0
 800125a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <MX_CAN1_Init+0x64>)
 800125e:	2200      	movs	r2, #0
 8001260:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <MX_CAN1_Init+0x64>)
 8001264:	2200      	movs	r2, #0
 8001266:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001268:	4804      	ldr	r0, [pc, #16]	; (800127c <MX_CAN1_Init+0x64>)
 800126a:	f001 fef3 	bl	8003054 <HAL_CAN_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001274:	f000 fc82 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200001c0 	.word	0x200001c0
 8001280:	40006400 	.word	0x40006400

08001284 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a29      	ldr	r2, [pc, #164]	; (8001348 <HAL_CAN_MspInit+0xc4>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d14c      	bne.n	8001340 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b28      	ldr	r3, [pc, #160]	; (800134c <HAL_CAN_MspInit+0xc8>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a27      	ldr	r2, [pc, #156]	; (800134c <HAL_CAN_MspInit+0xc8>)
 80012b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
 80012b6:	4b25      	ldr	r3, [pc, #148]	; (800134c <HAL_CAN_MspInit+0xc8>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <HAL_CAN_MspInit+0xc8>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a20      	ldr	r2, [pc, #128]	; (800134c <HAL_CAN_MspInit+0xc8>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b1e      	ldr	r3, [pc, #120]	; (800134c <HAL_CAN_MspInit+0xc8>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80012f0:	2309      	movs	r3, #9
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4815      	ldr	r0, [pc, #84]	; (8001350 <HAL_CAN_MspInit+0xcc>)
 80012fc:	f003 fcbe 	bl	8004c7c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001300:	2200      	movs	r2, #0
 8001302:	2105      	movs	r1, #5
 8001304:	2013      	movs	r0, #19
 8001306:	f002 ffef 	bl	80042e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800130a:	2013      	movs	r0, #19
 800130c:	f003 f818 	bl	8004340 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2105      	movs	r1, #5
 8001314:	2014      	movs	r0, #20
 8001316:	f002 ffe7 	bl	80042e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800131a:	2014      	movs	r0, #20
 800131c:	f003 f810 	bl	8004340 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2105      	movs	r1, #5
 8001324:	2015      	movs	r0, #21
 8001326:	f002 ffdf 	bl	80042e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800132a:	2015      	movs	r0, #21
 800132c:	f003 f808 	bl	8004340 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2105      	movs	r1, #5
 8001334:	2016      	movs	r0, #22
 8001336:	f002 ffd7 	bl	80042e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800133a:	2016      	movs	r0, #22
 800133c:	f003 f800 	bl	8004340 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001340:	bf00      	nop
 8001342:	3728      	adds	r7, #40	; 0x28
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40006400 	.word	0x40006400
 800134c:	40023800 	.word	0x40023800
 8001350:	40020000 	.word	0x40020000

08001354 <writeCanBatVolt>:
  }
}

/* USER CODE BEGIN 1 */
void writeCanBatVolt()
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
	TxHeader.DLC = 8;
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <writeCanBatVolt+0x58>)
 800135c:	2208      	movs	r2, #8
 800135e:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <writeCanBatVolt+0x58>)
 8001362:	2200      	movs	r2, #0
 8001364:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <writeCanBatVolt+0x58>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <writeCanBatVolt+0x58>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x0;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <writeCanBatVolt+0x58>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <writeCanBatVolt+0x58>)
 800137a:	2200      	movs	r2, #0
 800137c:	751a      	strb	r2, [r3, #20]

	HAL_CAN_Start(&hcan1);
 800137e:	480c      	ldr	r0, [pc, #48]	; (80013b0 <writeCanBatVolt+0x5c>)
 8001380:	f002 fa20 	bl	80037c4 <HAL_CAN_Start>
	uint32_t id = Pack_BAT_GAUGE_OvrVIEW_can_codegen(&batGauge, &canFrame);
 8001384:	490b      	ldr	r1, [pc, #44]	; (80013b4 <writeCanBatVolt+0x60>)
 8001386:	480c      	ldr	r0, [pc, #48]	; (80013b8 <writeCanBatVolt+0x64>)
 8001388:	f7ff fc60 	bl	8000c4c <Pack_BAT_GAUGE_OvrVIEW_can_codegen>
 800138c:	6078      	str	r0, [r7, #4]
	if(id == 0x1ff810)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <writeCanBatVolt+0x68>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d105      	bne.n	80013a2 <writeCanBatVolt+0x4e>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, canFrame.Data, &mailbox);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <writeCanBatVolt+0x6c>)
 8001398:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <writeCanBatVolt+0x70>)
 800139a:	4904      	ldr	r1, [pc, #16]	; (80013ac <writeCanBatVolt+0x58>)
 800139c:	4804      	ldr	r0, [pc, #16]	; (80013b0 <writeCanBatVolt+0x5c>)
 800139e:	f002 fa55 	bl	800384c <HAL_CAN_AddTxMessage>




}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000188 	.word	0x20000188
 80013b0:	200001c0 	.word	0x200001c0
 80013b4:	20000170 	.word	0x20000170
 80013b8:	20000180 	.word	0x20000180
 80013bc:	001ff810 	.word	0x001ff810
 80013c0:	200001bc 	.word	0x200001bc
 80013c4:	20000175 	.word	0x20000175

080013c8 <readFCU_state>:

void readFCU_state()
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
	uint32_t id;
	RxHeader.DLC = 8;
 80013ce:	4b2f      	ldr	r3, [pc, #188]	; (800148c <readFCU_state+0xc4>)
 80013d0:	2208      	movs	r2, #8
 80013d2:	611a      	str	r2, [r3, #16]
	RxHeader.ExtId = 0;
 80013d4:	4b2d      	ldr	r3, [pc, #180]	; (800148c <readFCU_state+0xc4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	605a      	str	r2, [r3, #4]
	RxHeader.IDE = CAN_ID_STD;
 80013da:	4b2c      	ldr	r3, [pc, #176]	; (800148c <readFCU_state+0xc4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_REMOTE;
 80013e0:	4b2a      	ldr	r3, [pc, #168]	; (800148c <readFCU_state+0xc4>)
 80013e2:	2202      	movs	r2, #2
 80013e4:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = 0x01;
 80013e6:	4b29      	ldr	r3, [pc, #164]	; (800148c <readFCU_state+0xc4>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	601a      	str	r2, [r3, #0]



	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80013ec:	4b28      	ldr	r3, [pc, #160]	; (8001490 <readFCU_state+0xc8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
	filterConfig.FilterActivation = ENABLE;
 80013f2:	4b27      	ldr	r3, [pc, #156]	; (8001490 <readFCU_state+0xc8>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	621a      	str	r2, [r3, #32]
	filterConfig.FilterBank = 2;
 80013f8:	4b25      	ldr	r3, [pc, #148]	; (8001490 <readFCU_state+0xc8>)
 80013fa:	2202      	movs	r2, #2
 80013fc:	615a      	str	r2, [r3, #20]
	filterConfig.FilterIdHigh = 0x0000;
 80013fe:	4b24      	ldr	r3, [pc, #144]	; (8001490 <readFCU_state+0xc8>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
	filterConfig.FilterIdLow = 0x0101;
 8001404:	4b22      	ldr	r3, [pc, #136]	; (8001490 <readFCU_state+0xc8>)
 8001406:	f240 1201 	movw	r2, #257	; 0x101
 800140a:	605a      	str	r2, [r3, #4]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800140c:	4b20      	ldr	r3, [pc, #128]	; (8001490 <readFCU_state+0xc8>)
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001412:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <readFCU_state+0xc8>)
 8001414:	2201      	movs	r2, #1
 8001416:	61da      	str	r2, [r3, #28]
	filterConfig.SlaveStartFilterBank = 3;
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <readFCU_state+0xc8>)
 800141a:	2203      	movs	r2, #3
 800141c:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 800141e:	491c      	ldr	r1, [pc, #112]	; (8001490 <readFCU_state+0xc8>)
 8001420:	481c      	ldr	r0, [pc, #112]	; (8001494 <readFCU_state+0xcc>)
 8001422:	f002 f881 	bl	8003528 <HAL_CAN_ConfigFilter>

	uint8_t state[8];
	uint8_t dlc = 1;
 8001426:	2301      	movs	r3, #1
 8001428:	73fb      	strb	r3, [r7, #15]
	HAL_CAN_Start(&hcan1);
 800142a:	481a      	ldr	r0, [pc, #104]	; (8001494 <readFCU_state+0xcc>)
 800142c:	f002 f9ca 	bl	80037c4 <HAL_CAN_Start>
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, state) == HAL_OK)
 8001430:	463b      	mov	r3, r7
 8001432:	4a16      	ldr	r2, [pc, #88]	; (800148c <readFCU_state+0xc4>)
 8001434:	2100      	movs	r1, #0
 8001436:	4817      	ldr	r0, [pc, #92]	; (8001494 <readFCU_state+0xcc>)
 8001438:	f002 fb2c 	bl	8003a94 <HAL_CAN_GetRxMessage>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d120      	bne.n	8001484 <readFCU_state+0xbc>
		{
		id = Unpack_FCU_STATE_REQUEST_can_codegen(&fcuState, &state, dlc);
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	463b      	mov	r3, r7
 8001446:	4619      	mov	r1, r3
 8001448:	4813      	ldr	r0, [pc, #76]	; (8001498 <readFCU_state+0xd0>)
 800144a:	f7ff fbe9 	bl	8000c20 <Unpack_FCU_STATE_REQUEST_can_codegen>
 800144e:	60b8      	str	r0, [r7, #8]
		if(state[0] == 1)
 8001450:	783b      	ldrb	r3, [r7, #0]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d106      	bne.n	8001464 <readFCU_state+0x9c>
		{
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);  // replace with all fets on function call
 8001456:	2201      	movs	r2, #1
 8001458:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800145c:	480f      	ldr	r0, [pc, #60]	; (800149c <readFCU_state+0xd4>)
 800145e:	f003 ff31 	bl	80052c4 <HAL_GPIO_WritePin>
		else
		{
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);  // replace with afe reset function call
		}
		}
}
 8001462:	e00f      	b.n	8001484 <readFCU_state+0xbc>
		else if(state[0] == 0)
 8001464:	783b      	ldrb	r3, [r7, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d106      	bne.n	8001478 <readFCU_state+0xb0>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);  //replace with all fets off function call
 800146a:	2201      	movs	r2, #1
 800146c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001470:	480a      	ldr	r0, [pc, #40]	; (800149c <readFCU_state+0xd4>)
 8001472:	f003 ff27 	bl	80052c4 <HAL_GPIO_WritePin>
}
 8001476:	e005      	b.n	8001484 <readFCU_state+0xbc>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);  // replace with afe reset function call
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800147e:	4807      	ldr	r0, [pc, #28]	; (800149c <readFCU_state+0xd4>)
 8001480:	f003 ff20 	bl	80052c4 <HAL_GPIO_WritePin>
}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200001a0 	.word	0x200001a0
 8001490:	20000148 	.word	0x20000148
 8001494:	200001c0 	.word	0x200001c0
 8001498:	20000184 	.word	0x20000184
 800149c:	40020400 	.word	0x40020400

080014a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4b23      	ldr	r3, [pc, #140]	; (8001538 <MX_DMA_Init+0x98>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a22      	ldr	r2, [pc, #136]	; (8001538 <MX_DMA_Init+0x98>)
 80014b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <MX_DMA_Init+0x98>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <MX_DMA_Init+0x98>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a1b      	ldr	r2, [pc, #108]	; (8001538 <MX_DMA_Init+0x98>)
 80014cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <MX_DMA_Init+0x98>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2105      	movs	r1, #5
 80014e2:	200b      	movs	r0, #11
 80014e4:	f002 ff00 	bl	80042e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80014e8:	200b      	movs	r0, #11
 80014ea:	f002 ff29 	bl	8004340 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2105      	movs	r1, #5
 80014f2:	2011      	movs	r0, #17
 80014f4:	f002 fef8 	bl	80042e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80014f8:	2011      	movs	r0, #17
 80014fa:	f002 ff21 	bl	8004340 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2105      	movs	r1, #5
 8001502:	2038      	movs	r0, #56	; 0x38
 8001504:	f002 fef0 	bl	80042e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001508:	2038      	movs	r0, #56	; 0x38
 800150a:	f002 ff19 	bl	8004340 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2105      	movs	r1, #5
 8001512:	203b      	movs	r0, #59	; 0x3b
 8001514:	f002 fee8 	bl	80042e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001518:	203b      	movs	r0, #59	; 0x3b
 800151a:	f002 ff11 	bl	8004340 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2105      	movs	r1, #5
 8001522:	203c      	movs	r0, #60	; 0x3c
 8001524:	f002 fee0 	bl	80042e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001528:	203c      	movs	r0, #60	; 0x3c
 800152a:	f002 ff09 	bl	8004340 <HAL_NVIC_EnableIRQ>

}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800

0800153c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4a07      	ldr	r2, [pc, #28]	; (8001568 <vApplicationGetIdleTaskMemory+0x2c>)
 800154c:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	4a06      	ldr	r2, [pc, #24]	; (800156c <vApplicationGetIdleTaskMemory+0x30>)
 8001552:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2280      	movs	r2, #128	; 0x80
 8001558:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 800155a:	bf00      	nop
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000238 	.word	0x20000238
 800156c:	200002ec 	.word	0x200002ec

08001570 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001570:	b5b0      	push	{r4, r5, r7, lr}
 8001572:	b09e      	sub	sp, #120	; 0x78
 8001574:	af00      	add	r7, sp, #0
    /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of can_tx_queue */
  osMessageQDef(can_tx_queue, 512, uint8_t);
 8001576:	4b2c      	ldr	r3, [pc, #176]	; (8001628 <MX_FREERTOS_Init+0xb8>)
 8001578:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800157c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800157e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  can_tx_queueHandle = osMessageCreate(osMessageQ(can_tx_queue), NULL);
 8001582:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001586:	2100      	movs	r1, #0
 8001588:	4618      	mov	r0, r3
 800158a:	f008 facd 	bl	8009b28 <osMessageCreate>
 800158e:	4603      	mov	r3, r0
 8001590:	4a26      	ldr	r2, [pc, #152]	; (800162c <MX_FREERTOS_Init+0xbc>)
 8001592:	6013      	str	r3, [r2, #0]

  /* definition and creation of can_rx_queue */
  osMessageQDef(can_rx_queue, 512, uint8_t);
 8001594:	4b24      	ldr	r3, [pc, #144]	; (8001628 <MX_FREERTOS_Init+0xb8>)
 8001596:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800159a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800159c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  can_rx_queueHandle = osMessageCreate(osMessageQ(can_rx_queue), NULL);
 80015a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f008 fabe 	bl	8009b28 <osMessageCreate>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4a20      	ldr	r2, [pc, #128]	; (8001630 <MX_FREERTOS_Init+0xc0>)
 80015b0:	6013      	str	r3, [r2, #0]
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of APP_1HZ_TASK */
  osThreadDef(APP_1HZ_TASK, app_task_1Hz, osPriorityNormal, 0, 128);
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <MX_FREERTOS_Init+0xc4>)
 80015b4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80015b8:	461d      	mov	r5, r3
 80015ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_1HZ_TASKHandle = osThreadCreate(osThread(APP_1HZ_TASK), NULL);
 80015c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f008 fa5f 	bl	8009a90 <osThreadCreate>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4a18      	ldr	r2, [pc, #96]	; (8001638 <MX_FREERTOS_Init+0xc8>)
 80015d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of APP_10HZ_TASK */
  osThreadDef(APP_10HZ_TASK, app_task_10hz, osPriorityAboveNormal, 0, 128);
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <MX_FREERTOS_Init+0xcc>)
 80015da:	f107 0420 	add.w	r4, r7, #32
 80015de:	461d      	mov	r5, r3
 80015e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_10HZ_TASKHandle = osThreadCreate(osThread(APP_10HZ_TASK), NULL);
 80015ec:	f107 0320 	add.w	r3, r7, #32
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f008 fa4c 	bl	8009a90 <osThreadCreate>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4a11      	ldr	r2, [pc, #68]	; (8001640 <MX_FREERTOS_Init+0xd0>)
 80015fc:	6013      	str	r3, [r2, #0]

  /* definition and creation of APP_100HZ_TASK */
  osThreadDef(APP_100HZ_TASK, app_task_100hz, osPriorityHigh, 0, 128);
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_FREERTOS_Init+0xd4>)
 8001600:	1d3c      	adds	r4, r7, #4
 8001602:	461d      	mov	r5, r3
 8001604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001608:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800160c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_100HZ_TASKHandle = osThreadCreate(osThread(APP_100HZ_TASK), NULL);
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f008 fa3b 	bl	8009a90 <osThreadCreate>
 800161a:	4603      	mov	r3, r0
 800161c:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <MX_FREERTOS_Init+0xd8>)
 800161e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001620:	bf00      	nop
 8001622:	3778      	adds	r7, #120	; 0x78
 8001624:	46bd      	mov	sp, r7
 8001626:	bdb0      	pop	{r4, r5, r7, pc}
 8001628:	0800bdbc 	.word	0x0800bdbc
 800162c:	20000230 	.word	0x20000230
 8001630:	20000234 	.word	0x20000234
 8001634:	0800bdcc 	.word	0x0800bdcc
 8001638:	20000224 	.word	0x20000224
 800163c:	0800bde8 	.word	0x0800bde8
 8001640:	20000228 	.word	0x20000228
 8001644:	0800be04 	.word	0x0800be04
 8001648:	2000022c 	.word	0x2000022c

0800164c <app_task_1Hz>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_app_task_1Hz */
void app_task_1Hz(void const * argument)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_task_1Hz */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 1000;
 8001654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001658:	60fb      	str	r3, [r7, #12]
    xLastWakeTime = xTaskGetTickCount();
 800165a:	f008 ffb7 	bl	800a5cc <xTaskGetTickCount>
 800165e:	4603      	mov	r3, r0
 8001660:	60bb      	str	r3, [r7, #8]
    /* Infinite loop */
    for (;;)
    {
        //app_gauge_tick();

     vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	68f9      	ldr	r1, [r7, #12]
 8001668:	4618      	mov	r0, r3
 800166a:	f008 fe1d 	bl	800a2a8 <vTaskDelayUntil>
 800166e:	e7f8      	b.n	8001662 <app_task_1Hz+0x16>

08001670 <app_task_10hz>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_app_task_10hz */
void app_task_10hz(void const * argument)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_task_10hz */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 100;
 8001678:	2364      	movs	r3, #100	; 0x64
 800167a:	60fb      	str	r3, [r7, #12]
    xLastWakeTime = xTaskGetTickCount();
 800167c:	f008 ffa6 	bl	800a5cc <xTaskGetTickCount>
 8001680:	4603      	mov	r3, r0
 8001682:	60bb      	str	r3, [r7, #8]

    bq76952_FETs_call();  //Calls the FET Commands
 8001684:	f7ff fb62 	bl	8000d4c <bq76952_FETs_call>
    /* Infinite loop */
    for (;;)
    {
    
    //led_blink();
    writeCanBatVolt();  //writing battery voltage from mcu to CAN line
 8001688:	f7ff fe64 	bl	8001354 <writeCanBatVolt>
    testBenchTempCheck();  //checking FET temperature using NTC
 800168c:	f7ff fd7c 	bl	8001188 <testBenchTempCheck>
    vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001690:	f107 0308 	add.w	r3, r7, #8
 8001694:	68f9      	ldr	r1, [r7, #12]
 8001696:	4618      	mov	r0, r3
 8001698:	f008 fe06 	bl	800a2a8 <vTaskDelayUntil>
    {
 800169c:	e7f4      	b.n	8001688 <app_task_10hz+0x18>

0800169e <app_task_100hz>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_app_task_100hz */
void app_task_100hz(void const * argument)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_task_100hz */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 10;
 80016a6:	230a      	movs	r3, #10
 80016a8:	60fb      	str	r3, [r7, #12]
    xLastWakeTime = xTaskGetTickCount();
 80016aa:	f008 ff8f 	bl	800a5cc <xTaskGetTickCount>
 80016ae:	4603      	mov	r3, r0
 80016b0:	60bb      	str	r3, [r7, #8]
    /* Infinite loop */
    for (;;)
    {
        // Battery State Machine
       readFCU_state();  //Getting FCU state over CAN line to control FET operations.
 80016b2:	f7ff fe89 	bl	80013c8 <readFCU_state>
       vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	68f9      	ldr	r1, [r7, #12]
 80016bc:	4618      	mov	r0, r3
 80016be:	f008 fdf3 	bl	800a2a8 <vTaskDelayUntil>
    {
 80016c2:	e7f6      	b.n	80016b2 <app_task_100hz+0x14>

080016c4 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PC2   ------> ADCx_IN12
*/
void MX_GPIO_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b62      	ldr	r3, [pc, #392]	; (8001868 <MX_GPIO_Init+0x1a4>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a61      	ldr	r2, [pc, #388]	; (8001868 <MX_GPIO_Init+0x1a4>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b5f      	ldr	r3, [pc, #380]	; (8001868 <MX_GPIO_Init+0x1a4>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b5b      	ldr	r3, [pc, #364]	; (8001868 <MX_GPIO_Init+0x1a4>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a5a      	ldr	r2, [pc, #360]	; (8001868 <MX_GPIO_Init+0x1a4>)
 8001700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b58      	ldr	r3, [pc, #352]	; (8001868 <MX_GPIO_Init+0x1a4>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	4b54      	ldr	r3, [pc, #336]	; (8001868 <MX_GPIO_Init+0x1a4>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a53      	ldr	r2, [pc, #332]	; (8001868 <MX_GPIO_Init+0x1a4>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b51      	ldr	r3, [pc, #324]	; (8001868 <MX_GPIO_Init+0x1a4>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	4b4d      	ldr	r3, [pc, #308]	; (8001868 <MX_GPIO_Init+0x1a4>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a4c      	ldr	r2, [pc, #304]	; (8001868 <MX_GPIO_Init+0x1a4>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b4a      	ldr	r3, [pc, #296]	; (8001868 <MX_GPIO_Init+0x1a4>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	4b46      	ldr	r3, [pc, #280]	; (8001868 <MX_GPIO_Init+0x1a4>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a45      	ldr	r2, [pc, #276]	; (8001868 <MX_GPIO_Init+0x1a4>)
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b43      	ldr	r3, [pc, #268]	; (8001868 <MX_GPIO_Init+0x1a4>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_SHUT_Pin|AFE_WAKE_Pin, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	2106      	movs	r1, #6
 800176a:	4840      	ldr	r0, [pc, #256]	; (800186c <MX_GPIO_Init+0x1a8>)
 800176c:	f003 fdaa 	bl	80052c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SP1_CS_Pin|DFETOFF_OUT_Pin|LED3_OUT_Pin|LED2_OUT_Pin
 8001770:	2200      	movs	r2, #0
 8001772:	f44f 611f 	mov.w	r1, #2544	; 0x9f0
 8001776:	483e      	ldr	r0, [pc, #248]	; (8001870 <MX_GPIO_Init+0x1ac>)
 8001778:	f003 fda4 	bl	80052c4 <HAL_GPIO_WritePin>
                          |LED1_OUT_Pin|PWR5V_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DDSG_IN_Pin|LED5_OUT_BLUE_Pin|LED5_OUT_GREEN_Pin|LED5_OUT_RED_Pin
 800177c:	2200      	movs	r2, #0
 800177e:	f24f 0104 	movw	r1, #61444	; 0xf004
 8001782:	483c      	ldr	r0, [pc, #240]	; (8001874 <MX_GPIO_Init+0x1b0>)
 8001784:	f003 fd9e 	bl	80052c4 <HAL_GPIO_WritePin>
                          |LED4_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 PCPin
                           PC3 PC9 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|NTC_Pin
 8001788:	f24f 630c 	movw	r3, #62988	; 0xf60c
 800178c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178e:	2303      	movs	r3, #3
 8001790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001796:	f107 0314 	add.w	r3, r7, #20
 800179a:	4619      	mov	r1, r3
 800179c:	4834      	ldr	r0, [pc, #208]	; (8001870 <MX_GPIO_Init+0x1ac>)
 800179e:	f003 fa6d 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 80017a2:	f248 1319 	movw	r3, #33049	; 0x8119
 80017a6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a8:	2303      	movs	r3, #3
 80017aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	4619      	mov	r1, r3
 80017b6:	482d      	ldr	r0, [pc, #180]	; (800186c <MX_GPIO_Init+0x1a8>)
 80017b8:	f003 fa60 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RST_SHUT_Pin|AFE_WAKE_Pin;
 80017bc:	2306      	movs	r3, #6
 80017be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	4826      	ldr	r0, [pc, #152]	; (800186c <MX_GPIO_Init+0x1a8>)
 80017d4:	f003 fa52 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = SP1_CS_Pin|DFETOFF_OUT_Pin|LED3_OUT_Pin|LED2_OUT_Pin
 80017d8:	f44f 631f 	mov.w	r3, #2544	; 0x9f0
 80017dc:	617b      	str	r3, [r7, #20]
                          |LED1_OUT_Pin|PWR5V_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017de:	2301      	movs	r3, #1
 80017e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	481f      	ldr	r0, [pc, #124]	; (8001870 <MX_GPIO_Init+0x1ac>)
 80017f2:	f003 fa43 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AFE_ALERT_IN_Pin|DCHG_IN_Pin;
 80017f6:	2303      	movs	r3, #3
 80017f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	481a      	ldr	r0, [pc, #104]	; (8001874 <MX_GPIO_Init+0x1b0>)
 800180a:	f003 fa37 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DDSG_IN_Pin|LED5_OUT_BLUE_Pin|LED5_OUT_GREEN_Pin|LED5_OUT_RED_Pin
 800180e:	f24f 0304 	movw	r3, #61444	; 0xf004
 8001812:	617b      	str	r3, [r7, #20]
                          |LED4_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001814:	2301      	movs	r3, #1
 8001816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4619      	mov	r1, r3
 8001826:	4813      	ldr	r0, [pc, #76]	; (8001874 <MX_GPIO_Init+0x1b0>)
 8001828:	f003 fa28 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 800182c:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 8001830:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001832:	2303      	movs	r3, #3
 8001834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	480c      	ldr	r0, [pc, #48]	; (8001874 <MX_GPIO_Init+0x1b0>)
 8001842:	f003 fa1b 	bl	8004c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_IN_Pin;
 8001846:	2304      	movs	r3, #4
 8001848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184a:	2300      	movs	r3, #0
 800184c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_IN_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4619      	mov	r1, r3
 8001858:	4807      	ldr	r0, [pc, #28]	; (8001878 <MX_GPIO_Init+0x1b4>)
 800185a:	f003 fa0f 	bl	8004c7c <HAL_GPIO_Init>

}
 800185e:	bf00      	nop
 8001860:	3728      	adds	r7, #40	; 0x28
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800
 800186c:	40020000 	.word	0x40020000
 8001870:	40020800 	.word	0x40020800
 8001874:	40020400 	.word	0x40020400
 8001878:	40020c00 	.word	0x40020c00

0800187c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <MX_I2C1_Init+0x50>)
 8001882:	4a13      	ldr	r2, [pc, #76]	; (80018d0 <MX_I2C1_Init+0x54>)
 8001884:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_I2C1_Init+0x50>)
 8001888:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <MX_I2C1_Init+0x58>)
 800188a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <MX_I2C1_Init+0x50>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 168;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <MX_I2C1_Init+0x50>)
 8001894:	22a8      	movs	r2, #168	; 0xa8
 8001896:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_I2C1_Init+0x50>)
 800189a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800189e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018a0:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <MX_I2C1_Init+0x50>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_I2C1_Init+0x50>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <MX_I2C1_Init+0x50>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_I2C1_Init+0x50>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018b8:	4804      	ldr	r0, [pc, #16]	; (80018cc <MX_I2C1_Init+0x50>)
 80018ba:	f003 fd35 	bl	8005328 <HAL_I2C_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018c4:	f000 f95a 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200004ec 	.word	0x200004ec
 80018d0:	40005400 	.word	0x40005400
 80018d4:	000186a0 	.word	0x000186a0

080018d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a50      	ldr	r2, [pc, #320]	; (8001a38 <HAL_I2C_MspInit+0x160>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	f040 809a 	bne.w	8001a30 <HAL_I2C_MspInit+0x158>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	4b4e      	ldr	r3, [pc, #312]	; (8001a3c <HAL_I2C_MspInit+0x164>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	4a4d      	ldr	r2, [pc, #308]	; (8001a3c <HAL_I2C_MspInit+0x164>)
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	6313      	str	r3, [r2, #48]	; 0x30
 800190c:	4b4b      	ldr	r3, [pc, #300]	; (8001a3c <HAL_I2C_MspInit+0x164>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001918:	23c0      	movs	r3, #192	; 0xc0
 800191a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800191c:	2312      	movs	r3, #18
 800191e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001928:	2304      	movs	r3, #4
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	4843      	ldr	r0, [pc, #268]	; (8001a40 <HAL_I2C_MspInit+0x168>)
 8001934:	f003 f9a2 	bl	8004c7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	4b3f      	ldr	r3, [pc, #252]	; (8001a3c <HAL_I2C_MspInit+0x164>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	4a3e      	ldr	r2, [pc, #248]	; (8001a3c <HAL_I2C_MspInit+0x164>)
 8001942:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001946:	6413      	str	r3, [r2, #64]	; 0x40
 8001948:	4b3c      	ldr	r3, [pc, #240]	; (8001a3c <HAL_I2C_MspInit+0x164>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001954:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <HAL_I2C_MspInit+0x16c>)
 8001956:	4a3c      	ldr	r2, [pc, #240]	; (8001a48 <HAL_I2C_MspInit+0x170>)
 8001958:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800195a:	4b3a      	ldr	r3, [pc, #232]	; (8001a44 <HAL_I2C_MspInit+0x16c>)
 800195c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001960:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001962:	4b38      	ldr	r3, [pc, #224]	; (8001a44 <HAL_I2C_MspInit+0x16c>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001968:	4b36      	ldr	r3, [pc, #216]	; (8001a44 <HAL_I2C_MspInit+0x16c>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800196e:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <HAL_I2C_MspInit+0x16c>)
 8001970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001974:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001976:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <HAL_I2C_MspInit+0x16c>)
 8001978:	2200      	movs	r2, #0
 800197a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800197c:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <HAL_I2C_MspInit+0x16c>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001982:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_I2C_MspInit+0x16c>)
 8001984:	2200      	movs	r2, #0
 8001986:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001988:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <HAL_I2C_MspInit+0x16c>)
 800198a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800198e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001990:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <HAL_I2C_MspInit+0x16c>)
 8001992:	2200      	movs	r2, #0
 8001994:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001996:	482b      	ldr	r0, [pc, #172]	; (8001a44 <HAL_I2C_MspInit+0x16c>)
 8001998:	f002 fcea 	bl	8004370 <HAL_DMA_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 80019a2:	f000 f8eb 	bl	8001b7c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a26      	ldr	r2, [pc, #152]	; (8001a44 <HAL_I2C_MspInit+0x16c>)
 80019aa:	639a      	str	r2, [r3, #56]	; 0x38
 80019ac:	4a25      	ldr	r2, [pc, #148]	; (8001a44 <HAL_I2C_MspInit+0x16c>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80019b2:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <HAL_I2C_MspInit+0x174>)
 80019b4:	4a26      	ldr	r2, [pc, #152]	; (8001a50 <HAL_I2C_MspInit+0x178>)
 80019b6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80019b8:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <HAL_I2C_MspInit+0x174>)
 80019ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019be:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019c0:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <HAL_I2C_MspInit+0x174>)
 80019c2:	2240      	movs	r2, #64	; 0x40
 80019c4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c6:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <HAL_I2C_MspInit+0x174>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <HAL_I2C_MspInit+0x174>)
 80019ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019d2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <HAL_I2C_MspInit+0x174>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <HAL_I2C_MspInit+0x174>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_I2C_MspInit+0x174>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_I2C_MspInit+0x174>)
 80019e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019ec:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <HAL_I2C_MspInit+0x174>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80019f4:	4815      	ldr	r0, [pc, #84]	; (8001a4c <HAL_I2C_MspInit+0x174>)
 80019f6:	f002 fcbb 	bl	8004370 <HAL_DMA_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8001a00:	f000 f8bc 	bl	8001b7c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a11      	ldr	r2, [pc, #68]	; (8001a4c <HAL_I2C_MspInit+0x174>)
 8001a08:	635a      	str	r2, [r3, #52]	; 0x34
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <HAL_I2C_MspInit+0x174>)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	2105      	movs	r1, #5
 8001a14:	201f      	movs	r0, #31
 8001a16:	f002 fc67 	bl	80042e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a1a:	201f      	movs	r0, #31
 8001a1c:	f002 fc90 	bl	8004340 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2105      	movs	r1, #5
 8001a24:	2020      	movs	r0, #32
 8001a26:	f002 fc5f 	bl	80042e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a2a:	2020      	movs	r0, #32
 8001a2c:	f002 fc88 	bl	8004340 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a30:	bf00      	nop
 8001a32:	3728      	adds	r7, #40	; 0x28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40005400 	.word	0x40005400
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020400 	.word	0x40020400
 8001a44:	20000540 	.word	0x20000540
 8001a48:	40026010 	.word	0x40026010
 8001a4c:	200005a0 	.word	0x200005a0
 8001a50:	400260a0 	.word	0x400260a0

08001a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a58:	f000 fc3e 	bl	80022d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */
  (void)SystemClock_Config();
 8001a5c:	f000 f80a 	bl	8001a74 <SystemClock_Config>
  // TODO: Sys_Init - HW
  (void)app_sys_init();
 8001a60:	f7ff fa8c 	bl	8000f7c <app_sys_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  // TODO: Sys_Init - SW Modules
  (void)app_sys_peripheral_init();
 8001a64:	f7ff faa4 	bl	8000fb0 <app_sys_peripheral_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001a68:	f7ff fd82 	bl	8001570 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001a6c:	f008 f809 	bl	8009a82 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <main+0x1c>
	...

08001a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b094      	sub	sp, #80	; 0x50
 8001a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	2234      	movs	r2, #52	; 0x34
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f009 fca2 	bl	800b3cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a88:	f107 0308 	add.w	r3, r7, #8
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a98:	2300      	movs	r3, #0
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	4b2c      	ldr	r3, [pc, #176]	; (8001b50 <SystemClock_Config+0xdc>)
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	4a2b      	ldr	r2, [pc, #172]	; (8001b50 <SystemClock_Config+0xdc>)
 8001aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa8:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <SystemClock_Config+0xdc>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <SystemClock_Config+0xe0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a25      	ldr	r2, [pc, #148]	; (8001b54 <SystemClock_Config+0xe0>)
 8001abe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b23      	ldr	r3, [pc, #140]	; (8001b54 <SystemClock_Config+0xe0>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ad4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ad8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ada:	2302      	movs	r3, #2
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ade:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ae4:	2304      	movs	r3, #4
 8001ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001ae8:	23b4      	movs	r3, #180	; 0xb4
 8001aea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aec:	2302      	movs	r3, #2
 8001aee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001af0:	2302      	movs	r3, #2
 8001af2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001af4:	2302      	movs	r3, #2
 8001af6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	4618      	mov	r0, r3
 8001afe:	f005 ff47 	bl	8007990 <HAL_RCC_OscConfig>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001b08:	f000 f838 	bl	8001b7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b0c:	f005 fab4 	bl	8007078 <HAL_PWREx_EnableOverDrive>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b16:	f000 f831 	bl	8001b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b1a:	230f      	movs	r3, #15
 8001b1c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b26:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b30:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	2105      	movs	r1, #5
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f005 faed 	bl	8007118 <HAL_RCC_ClockConfig>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001b44:	f000 f81a 	bl	8001b7c <Error_Handler>
  }
}
 8001b48:	bf00      	nop
 8001b4a:	3750      	adds	r7, #80	; 0x50
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40007000 	.word	0x40007000

08001b58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d101      	bne.n	8001b6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b6a:	f000 fbd7 	bl	800231c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40010000 	.word	0x40010000

08001b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b80:	b672      	cpsid	i
}
 8001b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <Error_Handler+0x8>

08001b86 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ba0:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001ba2:	4a18      	ldr	r2, [pc, #96]	; (8001c04 <MX_SPI1_Init+0x68>)
 8001ba4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001ba8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bcc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001bd0:	2238      	movs	r2, #56	; 0x38
 8001bd2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001be8:	220a      	movs	r2, #10
 8001bea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <MX_SPI1_Init+0x64>)
 8001bee:	f006 fa2b 	bl	8008048 <HAL_SPI_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001bf8:	f7ff ffc0 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000600 	.word	0x20000600
 8001c04:	40013000 	.word	0x40013000

08001c08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a4c      	ldr	r2, [pc, #304]	; (8001d58 <HAL_SPI_MspInit+0x150>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	f040 8092 	bne.w	8001d50 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	4b4a      	ldr	r3, [pc, #296]	; (8001d5c <HAL_SPI_MspInit+0x154>)
 8001c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c34:	4a49      	ldr	r2, [pc, #292]	; (8001d5c <HAL_SPI_MspInit+0x154>)
 8001c36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c3a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3c:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <HAL_SPI_MspInit+0x154>)
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	4b43      	ldr	r3, [pc, #268]	; (8001d5c <HAL_SPI_MspInit+0x154>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	4a42      	ldr	r2, [pc, #264]	; (8001d5c <HAL_SPI_MspInit+0x154>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6313      	str	r3, [r2, #48]	; 0x30
 8001c58:	4b40      	ldr	r3, [pc, #256]	; (8001d5c <HAL_SPI_MspInit+0x154>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c64:	23e0      	movs	r3, #224	; 0xe0
 8001c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c70:	2303      	movs	r3, #3
 8001c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c74:	2305      	movs	r3, #5
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4838      	ldr	r0, [pc, #224]	; (8001d60 <HAL_SPI_MspInit+0x158>)
 8001c80:	f002 fffc 	bl	8004c7c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001c84:	4b37      	ldr	r3, [pc, #220]	; (8001d64 <HAL_SPI_MspInit+0x15c>)
 8001c86:	4a38      	ldr	r2, [pc, #224]	; (8001d68 <HAL_SPI_MspInit+0x160>)
 8001c88:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001c8a:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <HAL_SPI_MspInit+0x15c>)
 8001c8c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001c90:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c92:	4b34      	ldr	r3, [pc, #208]	; (8001d64 <HAL_SPI_MspInit+0x15c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c98:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <HAL_SPI_MspInit+0x15c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c9e:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <HAL_SPI_MspInit+0x15c>)
 8001ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ca4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ca6:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <HAL_SPI_MspInit+0x15c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cac:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <HAL_SPI_MspInit+0x15c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001cb2:	4b2c      	ldr	r3, [pc, #176]	; (8001d64 <HAL_SPI_MspInit+0x15c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001cb8:	4b2a      	ldr	r3, [pc, #168]	; (8001d64 <HAL_SPI_MspInit+0x15c>)
 8001cba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001cbe:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cc0:	4b28      	ldr	r3, [pc, #160]	; (8001d64 <HAL_SPI_MspInit+0x15c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001cc6:	4827      	ldr	r0, [pc, #156]	; (8001d64 <HAL_SPI_MspInit+0x15c>)
 8001cc8:	f002 fb52 	bl	8004370 <HAL_DMA_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001cd2:	f7ff ff53 	bl	8001b7c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a22      	ldr	r2, [pc, #136]	; (8001d64 <HAL_SPI_MspInit+0x15c>)
 8001cda:	64da      	str	r2, [r3, #76]	; 0x4c
 8001cdc:	4a21      	ldr	r2, [pc, #132]	; (8001d64 <HAL_SPI_MspInit+0x15c>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001ce2:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <HAL_SPI_MspInit+0x164>)
 8001ce4:	4a22      	ldr	r2, [pc, #136]	; (8001d70 <HAL_SPI_MspInit+0x168>)
 8001ce6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001ce8:	4b20      	ldr	r3, [pc, #128]	; (8001d6c <HAL_SPI_MspInit+0x164>)
 8001cea:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001cee:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <HAL_SPI_MspInit+0x164>)
 8001cf2:	2240      	movs	r2, #64	; 0x40
 8001cf4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_SPI_MspInit+0x164>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <HAL_SPI_MspInit+0x164>)
 8001cfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d02:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d04:	4b19      	ldr	r3, [pc, #100]	; (8001d6c <HAL_SPI_MspInit+0x164>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_SPI_MspInit+0x164>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001d10:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <HAL_SPI_MspInit+0x164>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_SPI_MspInit+0x164>)
 8001d18:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d1c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <HAL_SPI_MspInit+0x164>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001d24:	4811      	ldr	r0, [pc, #68]	; (8001d6c <HAL_SPI_MspInit+0x164>)
 8001d26:	f002 fb23 	bl	8004370 <HAL_DMA_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8001d30:	f7ff ff24 	bl	8001b7c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <HAL_SPI_MspInit+0x164>)
 8001d38:	649a      	str	r2, [r3, #72]	; 0x48
 8001d3a:	4a0c      	ldr	r2, [pc, #48]	; (8001d6c <HAL_SPI_MspInit+0x164>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001d40:	2200      	movs	r2, #0
 8001d42:	2105      	movs	r1, #5
 8001d44:	2023      	movs	r0, #35	; 0x23
 8001d46:	f002 facf 	bl	80042e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001d4a:	2023      	movs	r0, #35	; 0x23
 8001d4c:	f002 faf8 	bl	8004340 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d50:	bf00      	nop
 8001d52:	3728      	adds	r7, #40	; 0x28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40013000 	.word	0x40013000
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40020000 	.word	0x40020000
 8001d64:	20000680 	.word	0x20000680
 8001d68:	40026410 	.word	0x40026410
 8001d6c:	200006e0 	.word	0x200006e0
 8001d70:	40026458 	.word	0x40026458

08001d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	607b      	str	r3, [r7, #4]
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_MspInit+0x54>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	4a11      	ldr	r2, [pc, #68]	; (8001dc8 <HAL_MspInit+0x54>)
 8001d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d88:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <HAL_MspInit+0x54>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	603b      	str	r3, [r7, #0]
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_MspInit+0x54>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_MspInit+0x54>)
 8001da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da4:	6413      	str	r3, [r2, #64]	; 0x40
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_MspInit+0x54>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	210f      	movs	r1, #15
 8001db6:	f06f 0001 	mvn.w	r0, #1
 8001dba:	f002 fa95 	bl	80042e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800

08001dcc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08c      	sub	sp, #48	; 0x30
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <HAL_InitTick+0xd4>)
 8001de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de4:	4a2e      	ldr	r2, [pc, #184]	; (8001ea0 <HAL_InitTick+0xd4>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6453      	str	r3, [r2, #68]	; 0x44
 8001dec:	4b2c      	ldr	r3, [pc, #176]	; (8001ea0 <HAL_InitTick+0xd4>)
 8001dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001df8:	f107 020c 	add.w	r2, r7, #12
 8001dfc:	f107 0310 	add.w	r3, r7, #16
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f005 fb62 	bl	80074cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001e08:	f005 fb4c 	bl	80074a4 <HAL_RCC_GetPCLK2Freq>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e14:	4a23      	ldr	r2, [pc, #140]	; (8001ea4 <HAL_InitTick+0xd8>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	0c9b      	lsrs	r3, r3, #18
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e20:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <HAL_InitTick+0xdc>)
 8001e22:	4a22      	ldr	r2, [pc, #136]	; (8001eac <HAL_InitTick+0xe0>)
 8001e24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001e26:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <HAL_InitTick+0xdc>)
 8001e28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e2c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ea8 <HAL_InitTick+0xdc>)
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e34:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <HAL_InitTick+0xdc>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <HAL_InitTick+0xdc>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <HAL_InitTick+0xdc>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001e46:	4818      	ldr	r0, [pc, #96]	; (8001ea8 <HAL_InitTick+0xdc>)
 8001e48:	f006 fea2 	bl	8008b90 <HAL_TIM_Base_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d11b      	bne.n	8001e92 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001e5a:	4813      	ldr	r0, [pc, #76]	; (8001ea8 <HAL_InitTick+0xdc>)
 8001e5c:	f006 ff92 	bl	8008d84 <HAL_TIM_Base_Start_IT>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001e66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d111      	bne.n	8001e92 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e6e:	2019      	movs	r0, #25
 8001e70:	f002 fa66 	bl	8004340 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b0f      	cmp	r3, #15
 8001e78:	d808      	bhi.n	8001e8c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	2019      	movs	r0, #25
 8001e80:	f002 fa32 	bl	80042e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e84:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <HAL_InitTick+0xe4>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	e002      	b.n	8001e92 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3730      	adds	r7, #48	; 0x30
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	431bde83 	.word	0x431bde83
 8001ea8:	20000740 	.word	0x20000740
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	20000004 	.word	0x20000004

08001eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <NMI_Handler+0x4>

08001eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ebe:	e7fe      	b.n	8001ebe <HardFault_Handler+0x4>

08001ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <MemManage_Handler+0x4>

08001ec6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eca:	e7fe      	b.n	8001eca <BusFault_Handler+0x4>

08001ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <UsageFault_Handler+0x4>

08001ed2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <WWDG_IRQHandler+0x10>)
 8001ee6:	f007 fd8b 	bl	8009a00 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200007d0 	.word	0x200007d0

08001ef4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <DMA1_Stream0_IRQHandler+0x10>)
 8001efa:	f002 fc75 	bl	80047e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000540 	.word	0x20000540

08001f08 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <DMA1_Stream6_IRQHandler+0x10>)
 8001f0e:	f002 fc6b 	bl	80047e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200005a0 	.word	0x200005a0

08001f1c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <ADC_IRQHandler+0x10>)
 8001f22:	f000 fca3 	bl	800286c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200000a0 	.word	0x200000a0

08001f30 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f34:	4802      	ldr	r0, [pc, #8]	; (8001f40 <CAN1_TX_IRQHandler+0x10>)
 8001f36:	f001 fecb 	bl	8003cd0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200001c0 	.word	0x200001c0

08001f44 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f48:	4802      	ldr	r0, [pc, #8]	; (8001f54 <CAN1_RX0_IRQHandler+0x10>)
 8001f4a:	f001 fec1 	bl	8003cd0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200001c0 	.word	0x200001c0

08001f58 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <CAN1_RX1_IRQHandler+0x10>)
 8001f5e:	f001 feb7 	bl	8003cd0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200001c0 	.word	0x200001c0

08001f6c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f70:	4802      	ldr	r0, [pc, #8]	; (8001f7c <CAN1_SCE_IRQHandler+0x10>)
 8001f72:	f001 fead 	bl	8003cd0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200001c0 	.word	0x200001c0

08001f80 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f84:	4802      	ldr	r0, [pc, #8]	; (8001f90 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f86:	f006 ffc3 	bl	8008f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	20000740 	.word	0x20000740

08001f94 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f98:	4802      	ldr	r0, [pc, #8]	; (8001fa4 <I2C1_EV_IRQHandler+0x10>)
 8001f9a:	f003 fb91 	bl	80056c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	200004ec 	.word	0x200004ec

08001fa8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <I2C1_ER_IRQHandler+0x10>)
 8001fae:	f003 fcf8 	bl	80059a2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200004ec 	.word	0x200004ec

08001fbc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <SPI1_IRQHandler+0x10>)
 8001fc2:	f006 fbb5 	bl	8008730 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000600 	.word	0x20000600

08001fd0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001fd4:	4802      	ldr	r0, [pc, #8]	; (8001fe0 <DMA2_Stream0_IRQHandler+0x10>)
 8001fd6:	f002 fc07 	bl	80047e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000680 	.word	0x20000680

08001fe4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001fe8:	4802      	ldr	r0, [pc, #8]	; (8001ff4 <DMA2_Stream3_IRQHandler+0x10>)
 8001fea:	f002 fbfd 	bl	80047e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200006e0 	.word	0x200006e0

08001ff8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ffc:	4802      	ldr	r0, [pc, #8]	; (8002008 <DMA2_Stream4_IRQHandler+0x10>)
 8001ffe:	f002 fbf3 	bl	80047e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200000e8 	.word	0x200000e8

0800200c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002014:	4a14      	ldr	r2, [pc, #80]	; (8002068 <_sbrk+0x5c>)
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <_sbrk+0x60>)
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002020:	4b13      	ldr	r3, [pc, #76]	; (8002070 <_sbrk+0x64>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d102      	bne.n	800202e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <_sbrk+0x64>)
 800202a:	4a12      	ldr	r2, [pc, #72]	; (8002074 <_sbrk+0x68>)
 800202c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <_sbrk+0x64>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	429a      	cmp	r2, r3
 800203a:	d207      	bcs.n	800204c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800203c:	f009 f98e 	bl	800b35c <__errno>
 8002040:	4603      	mov	r3, r0
 8002042:	220c      	movs	r2, #12
 8002044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002046:	f04f 33ff 	mov.w	r3, #4294967295
 800204a:	e009      	b.n	8002060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <_sbrk+0x64>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002052:	4b07      	ldr	r3, [pc, #28]	; (8002070 <_sbrk+0x64>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	4a05      	ldr	r2, [pc, #20]	; (8002070 <_sbrk+0x64>)
 800205c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800205e:	68fb      	ldr	r3, [r7, #12]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20020000 	.word	0x20020000
 800206c:	00000400 	.word	0x00000400
 8002070:	20000788 	.word	0x20000788
 8002074:	20010358 	.word	0x20010358

08002078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <SystemInit+0x20>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002082:	4a05      	ldr	r2, [pc, #20]	; (8002098 <SystemInit+0x20>)
 8002084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <MX_USART1_UART_Init+0x4c>)
 80020a2:	4a12      	ldr	r2, [pc, #72]	; (80020ec <MX_USART1_UART_Init+0x50>)
 80020a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <MX_USART1_UART_Init+0x4c>)
 80020a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <MX_USART1_UART_Init+0x4c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <MX_USART1_UART_Init+0x4c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020ba:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <MX_USART1_UART_Init+0x4c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <MX_USART1_UART_Init+0x4c>)
 80020c2:	220c      	movs	r2, #12
 80020c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020c6:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <MX_USART1_UART_Init+0x4c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <MX_USART1_UART_Init+0x4c>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020d2:	4805      	ldr	r0, [pc, #20]	; (80020e8 <MX_USART1_UART_Init+0x4c>)
 80020d4:	f007 f900 	bl	80092d8 <HAL_UART_Init>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020de:	f7ff fd4d 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	2000078c 	.word	0x2000078c
 80020ec:	40011000 	.word	0x40011000

080020f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a19      	ldr	r2, [pc, #100]	; (8002174 <HAL_UART_MspInit+0x84>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d12c      	bne.n	800216c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	4b18      	ldr	r3, [pc, #96]	; (8002178 <HAL_UART_MspInit+0x88>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	4a17      	ldr	r2, [pc, #92]	; (8002178 <HAL_UART_MspInit+0x88>)
 800211c:	f043 0310 	orr.w	r3, r3, #16
 8002120:	6453      	str	r3, [r2, #68]	; 0x44
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <HAL_UART_MspInit+0x88>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_UART_MspInit+0x88>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a10      	ldr	r2, [pc, #64]	; (8002178 <HAL_UART_MspInit+0x88>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <HAL_UART_MspInit+0x88>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800214a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800214e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	2302      	movs	r3, #2
 8002152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002158:	2303      	movs	r3, #3
 800215a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800215c:	2307      	movs	r3, #7
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	4619      	mov	r1, r3
 8002166:	4805      	ldr	r0, [pc, #20]	; (800217c <HAL_UART_MspInit+0x8c>)
 8002168:	f002 fd88 	bl	8004c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800216c:	bf00      	nop
 800216e:	3728      	adds	r7, #40	; 0x28
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40011000 	.word	0x40011000
 8002178:	40023800 	.word	0x40023800
 800217c:	40020000 	.word	0x40020000

08002180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002180:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002184:	480d      	ldr	r0, [pc, #52]	; (80021bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002186:	490e      	ldr	r1, [pc, #56]	; (80021c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002188:	4a0e      	ldr	r2, [pc, #56]	; (80021c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800218c:	e002      	b.n	8002194 <LoopCopyDataInit>

0800218e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002192:	3304      	adds	r3, #4

08002194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002198:	d3f9      	bcc.n	800218e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219a:	4a0b      	ldr	r2, [pc, #44]	; (80021c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800219c:	4c0b      	ldr	r4, [pc, #44]	; (80021cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a0:	e001      	b.n	80021a6 <LoopFillZerobss>

080021a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a4:	3204      	adds	r2, #4

080021a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a8:	d3fb      	bcc.n	80021a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021aa:	f7ff ff65 	bl	8002078 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ae:	f009 f8db 	bl	800b368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021b2:	f7ff fc4f 	bl	8001a54 <main>
  bx  lr    
 80021b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80021c4:	0800c164 	.word	0x0800c164
  ldr r2, =_sbss
 80021c8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80021cc:	20010354 	.word	0x20010354

080021d0 <CAN2_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d0:	e7fe      	b.n	80021d0 <CAN2_RX0_IRQHandler>

080021d2 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d104      	bne.n	80021ea <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80021e0:	b672      	cpsid	i
}
 80021e2:	bf00      	nop
 80021e4:	f7ff fcca 	bl	8001b7c <Error_Handler>
 80021e8:	e7fe      	b.n	80021e8 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	7a1b      	ldrb	r3, [r3, #8]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d904      	bls.n	80021fc <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80021f2:	b672      	cpsid	i
}
 80021f4:	bf00      	nop
 80021f6:	f7ff fcc1 	bl	8001b7c <Error_Handler>
 80021fa:	e7fe      	b.n	80021fa <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7a1b      	ldrb	r3, [r3, #8]
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	b2d1      	uxtb	r1, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	7211      	strb	r1, [r2, #8]
 8002208:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800220a:	f3ef 8211 	mrs	r2, BASEPRI
 800220e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002212:	f383 8811 	msr	BASEPRI, r3
 8002216:	f3bf 8f6f 	isb	sy
 800221a:	f3bf 8f4f 	dsb	sy
 800221e:	60fa      	str	r2, [r7, #12]
 8002220:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d104      	bne.n	800224a <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002240:	b672      	cpsid	i
}
 8002242:	bf00      	nop
 8002244:	f7ff fc9a 	bl	8001b7c <Error_Handler>
 8002248:	e7fe      	b.n	8002248 <stm32_lock_release+0x16>
  lock->nesting_level--;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7a1b      	ldrb	r3, [r3, #8]
 800224e:	3b01      	subs	r3, #1
 8002250:	b2da      	uxtb	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7a1b      	ldrb	r3, [r3, #8]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d904      	bls.n	8002268 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800225e:	b672      	cpsid	i
}
 8002260:	bf00      	nop
 8002262:	f7ff fc8b 	bl	8001b7c <Error_Handler>
 8002266:	e7fe      	b.n	8002266 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7a1b      	ldrb	r3, [r3, #8]
 800226c:	461a      	mov	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002274:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800227c:	bf00      	nop
}
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d104      	bne.n	800229e <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002294:	b672      	cpsid	i
}
 8002296:	bf00      	nop
 8002298:	f7ff fc70 	bl	8001b7c <Error_Handler>
 800229c:	e7fe      	b.n	800229c <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff96 	bl	80021d2 <stm32_lock_acquire>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d104      	bne.n	80022c6 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80022bc:	b672      	cpsid	i
}
 80022be:	bf00      	nop
 80022c0:	f7ff fc5c 	bl	8001b7c <Error_Handler>
 80022c4:	e7fe      	b.n	80022c4 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ffb2 	bl	8002232 <stm32_lock_release>
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022dc:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <HAL_Init+0x40>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0d      	ldr	r2, [pc, #52]	; (8002318 <HAL_Init+0x40>)
 80022e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_Init+0x40>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <HAL_Init+0x40>)
 80022ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <HAL_Init+0x40>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a07      	ldr	r2, [pc, #28]	; (8002318 <HAL_Init+0x40>)
 80022fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002300:	2003      	movs	r0, #3
 8002302:	f001 ffd1 	bl	80042a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002306:	200f      	movs	r0, #15
 8002308:	f7ff fd60 	bl	8001dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800230c:	f7ff fd32 	bl	8001d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40023c00 	.word	0x40023c00

0800231c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_IncTick+0x20>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	461a      	mov	r2, r3
 8002326:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_IncTick+0x24>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4413      	add	r3, r2
 800232c:	4a04      	ldr	r2, [pc, #16]	; (8002340 <HAL_IncTick+0x24>)
 800232e:	6013      	str	r3, [r2, #0]
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000008 	.word	0x20000008
 8002340:	200007f0 	.word	0x200007f0

08002344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return uwTick;
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <HAL_GetTick+0x14>)
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	200007f0 	.word	0x200007f0

0800235c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002364:	f7ff ffee 	bl	8002344 <HAL_GetTick>
 8002368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002374:	d005      	beq.n	8002382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <HAL_Delay+0x44>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4413      	add	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002382:	bf00      	nop
 8002384:	f7ff ffde 	bl	8002344 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	429a      	cmp	r2, r3
 8002392:	d8f7      	bhi.n	8002384 <HAL_Delay+0x28>
  {
  }
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000008 	.word	0x20000008

080023a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e15c      	b.n	8002674 <HAL_ADC_Init+0x2d0>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a8e      	ldr	r2, [pc, #568]	; (80025f8 <HAL_ADC_Init+0x254>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d00e      	beq.n	80023e2 <HAL_ADC_Init+0x3e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a8c      	ldr	r2, [pc, #560]	; (80025fc <HAL_ADC_Init+0x258>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d009      	beq.n	80023e2 <HAL_ADC_Init+0x3e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a8b      	ldr	r2, [pc, #556]	; (8002600 <HAL_ADC_Init+0x25c>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d004      	beq.n	80023e2 <HAL_ADC_Init+0x3e>
 80023d8:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80023dc:	4889      	ldr	r0, [pc, #548]	; (8002604 <HAL_ADC_Init+0x260>)
 80023de:	f7ff fbd2 	bl	8001b86 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d013      	beq.n	8002412 <HAL_ADC_Init+0x6e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f2:	d00e      	beq.n	8002412 <HAL_ADC_Init+0x6e>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023fc:	d009      	beq.n	8002412 <HAL_ADC_Init+0x6e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002406:	d004      	beq.n	8002412 <HAL_ADC_Init+0x6e>
 8002408:	f240 1143 	movw	r1, #323	; 0x143
 800240c:	487d      	ldr	r0, [pc, #500]	; (8002604 <HAL_ADC_Init+0x260>)
 800240e:	f7ff fbba 	bl	8001b86 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d013      	beq.n	8002442 <HAL_ADC_Init+0x9e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002422:	d00e      	beq.n	8002442 <HAL_ADC_Init+0x9e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800242c:	d009      	beq.n	8002442 <HAL_ADC_Init+0x9e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002436:	d004      	beq.n	8002442 <HAL_ADC_Init+0x9e>
 8002438:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800243c:	4871      	ldr	r0, [pc, #452]	; (8002604 <HAL_ADC_Init+0x260>)
 800243e:	f7ff fba2 	bl	8001b86 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d008      	beq.n	800245c <HAL_ADC_Init+0xb8>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d004      	beq.n	800245c <HAL_ADC_Init+0xb8>
 8002452:	f240 1145 	movw	r1, #325	; 0x145
 8002456:	486b      	ldr	r0, [pc, #428]	; (8002604 <HAL_ADC_Init+0x260>)
 8002458:	f7ff fb95 	bl	8001b86 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7e1b      	ldrb	r3, [r3, #24]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <HAL_ADC_Init+0xd2>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7e1b      	ldrb	r3, [r3, #24]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d004      	beq.n	8002476 <HAL_ADC_Init+0xd2>
 800246c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002470:	4864      	ldr	r0, [pc, #400]	; (8002604 <HAL_ADC_Init+0x260>)
 8002472:	f7ff fb88 	bl	8001b86 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	2b00      	cmp	r3, #0
 800247c:	d054      	beq.n	8002528 <HAL_ADC_Init+0x184>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002486:	d04f      	beq.n	8002528 <HAL_ADC_Init+0x184>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002490:	d04a      	beq.n	8002528 <HAL_ADC_Init+0x184>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002496:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800249a:	d045      	beq.n	8002528 <HAL_ADC_Init+0x184>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024a4:	d040      	beq.n	8002528 <HAL_ADC_Init+0x184>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024aa:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80024ae:	d03b      	beq.n	8002528 <HAL_ADC_Init+0x184>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80024b8:	d036      	beq.n	8002528 <HAL_ADC_Init+0x184>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 80024c2:	d031      	beq.n	8002528 <HAL_ADC_Init+0x184>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024cc:	d02c      	beq.n	8002528 <HAL_ADC_Init+0x184>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 80024d6:	d027      	beq.n	8002528 <HAL_ADC_Init+0x184>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80024e0:	d022      	beq.n	8002528 <HAL_ADC_Init+0x184>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 80024ea:	d01d      	beq.n	8002528 <HAL_ADC_Init+0x184>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80024f4:	d018      	beq.n	8002528 <HAL_ADC_Init+0x184>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 80024fe:	d013      	beq.n	8002528 <HAL_ADC_Init+0x184>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002504:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8002508:	d00e      	beq.n	8002528 <HAL_ADC_Init+0x184>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8002512:	d009      	beq.n	8002528 <HAL_ADC_Init+0x184>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	4a3b      	ldr	r2, [pc, #236]	; (8002608 <HAL_ADC_Init+0x264>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d004      	beq.n	8002528 <HAL_ADC_Init+0x184>
 800251e:	f240 1147 	movw	r1, #327	; 0x147
 8002522:	4838      	ldr	r0, [pc, #224]	; (8002604 <HAL_ADC_Init+0x260>)
 8002524:	f7ff fb2f 	bl	8001b86 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d009      	beq.n	8002544 <HAL_ADC_Init+0x1a0>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002538:	d004      	beq.n	8002544 <HAL_ADC_Init+0x1a0>
 800253a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800253e:	4831      	ldr	r0, [pc, #196]	; (8002604 <HAL_ADC_Init+0x260>)
 8002540:	f7ff fb21 	bl	8001b86 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_ADC_Init+0x1b0>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	2b10      	cmp	r3, #16
 8002552:	d904      	bls.n	800255e <HAL_ADC_Init+0x1ba>
 8002554:	f240 1149 	movw	r1, #329	; 0x149
 8002558:	482a      	ldr	r0, [pc, #168]	; (8002604 <HAL_ADC_Init+0x260>)
 800255a:	f7ff fb14 	bl	8001b86 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002564:	2b00      	cmp	r3, #0
 8002566:	d009      	beq.n	800257c <HAL_ADC_Init+0x1d8>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800256e:	2b01      	cmp	r3, #1
 8002570:	d004      	beq.n	800257c <HAL_ADC_Init+0x1d8>
 8002572:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002576:	4823      	ldr	r0, [pc, #140]	; (8002604 <HAL_ADC_Init+0x260>)
 8002578:	f7ff fb05 	bl	8001b86 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d00c      	beq.n	800259e <HAL_ADC_Init+0x1fa>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_ADC_Init+0x1fa>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d004      	beq.n	800259e <HAL_ADC_Init+0x1fa>
 8002594:	f240 114b 	movw	r1, #331	; 0x14b
 8002598:	481a      	ldr	r0, [pc, #104]	; (8002604 <HAL_ADC_Init+0x260>)
 800259a:	f7ff faf4 	bl	8001b86 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d009      	beq.n	80025bc <HAL_ADC_Init+0x218>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d004      	beq.n	80025bc <HAL_ADC_Init+0x218>
 80025b2:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80025b6:	4813      	ldr	r0, [pc, #76]	; (8002604 <HAL_ADC_Init+0x260>)
 80025b8:	f7ff fae5 	bl	8001b86 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c0:	4a11      	ldr	r2, [pc, #68]	; (8002608 <HAL_ADC_Init+0x264>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d022      	beq.n	800260c <HAL_ADC_Init+0x268>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d01e      	beq.n	800260c <HAL_ADC_Init+0x268>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025d6:	d019      	beq.n	800260c <HAL_ADC_Init+0x268>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025e0:	d014      	beq.n	800260c <HAL_ADC_Init+0x268>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80025ea:	d00f      	beq.n	800260c <HAL_ADC_Init+0x268>
 80025ec:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80025f0:	4804      	ldr	r0, [pc, #16]	; (8002604 <HAL_ADC_Init+0x260>)
 80025f2:	f7ff fac8 	bl	8001b86 <assert_failed>
 80025f6:	e009      	b.n	800260c <HAL_ADC_Init+0x268>
 80025f8:	40012000 	.word	0x40012000
 80025fc:	40012100 	.word	0x40012100
 8002600:	40012200 	.word	0x40012200
 8002604:	0800be20 	.word	0x0800be20
 8002608:	0f000001 	.word	0x0f000001
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	2b00      	cmp	r3, #0
 8002612:	d109      	bne.n	8002628 <HAL_ADC_Init+0x284>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7fe fd39 	bl	800108c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	2b00      	cmp	r3, #0
 8002632:	d118      	bne.n	8002666 <HAL_ADC_Init+0x2c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800263c:	f023 0302 	bic.w	r3, r3, #2
 8002640:	f043 0202 	orr.w	r2, r3, #2
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 fbef 	bl	8002e2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f023 0303 	bic.w	r3, r3, #3
 800265c:	f043 0201 	orr.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	641a      	str	r2, [r3, #64]	; 0x40
 8002664:	e001      	b.n	800266a <HAL_ADC_Init+0x2c6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002672:	7bfb      	ldrb	r3, [r7, #15]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7e1b      	ldrb	r3, [r3, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_ADC_Start+0x26>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	7e1b      	ldrb	r3, [r3, #24]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d004      	beq.n	80026a2 <HAL_ADC_Start+0x26>
 8002698:	f240 21d2 	movw	r1, #722	; 0x2d2
 800269c:	486c      	ldr	r0, [pc, #432]	; (8002850 <HAL_ADC_Start+0x1d4>)
 800269e:	f7ff fa72 	bl	8001b86 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d013      	beq.n	80026d2 <HAL_ADC_Start+0x56>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026b2:	d00e      	beq.n	80026d2 <HAL_ADC_Start+0x56>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026bc:	d009      	beq.n	80026d2 <HAL_ADC_Start+0x56>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80026c6:	d004      	beq.n	80026d2 <HAL_ADC_Start+0x56>
 80026c8:	f240 21d3 	movw	r1, #723	; 0x2d3
 80026cc:	4860      	ldr	r0, [pc, #384]	; (8002850 <HAL_ADC_Start+0x1d4>)
 80026ce:	f7ff fa5a 	bl	8001b86 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_ADC_Start+0x64>
 80026dc:	2302      	movs	r3, #2
 80026de:	e0b2      	b.n	8002846 <HAL_ADC_Start+0x1ca>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d018      	beq.n	8002728 <HAL_ADC_Start+0xac>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0201 	orr.w	r2, r2, #1
 8002704:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002706:	4b53      	ldr	r3, [pc, #332]	; (8002854 <HAL_ADC_Start+0x1d8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a53      	ldr	r2, [pc, #332]	; (8002858 <HAL_ADC_Start+0x1dc>)
 800270c:	fba2 2303 	umull	r2, r3, r2, r3
 8002710:	0c9a      	lsrs	r2, r3, #18
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800271a:	e002      	b.n	8002722 <HAL_ADC_Start+0xa6>
    {
      counter--;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	3b01      	subs	r3, #1
 8002720:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f9      	bne.n	800271c <HAL_ADC_Start+0xa0>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b01      	cmp	r3, #1
 8002734:	d17a      	bne.n	800282c <HAL_ADC_Start+0x1b0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800273e:	f023 0301 	bic.w	r3, r3, #1
 8002742:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <HAL_ADC_Start+0xec>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002760:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002774:	d106      	bne.n	8002784 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	f023 0206 	bic.w	r2, r3, #6
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	645a      	str	r2, [r3, #68]	; 0x44
 8002782:	e002      	b.n	800278a <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002792:	4b32      	ldr	r3, [pc, #200]	; (800285c <HAL_ADC_Start+0x1e0>)
 8002794:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800279e:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d12a      	bne.n	8002802 <HAL_ADC_Start+0x186>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a2b      	ldr	r2, [pc, #172]	; (8002860 <HAL_ADC_Start+0x1e4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d015      	beq.n	80027e2 <HAL_ADC_Start+0x166>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a2a      	ldr	r2, [pc, #168]	; (8002864 <HAL_ADC_Start+0x1e8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d105      	bne.n	80027cc <HAL_ADC_Start+0x150>
 80027c0:	4b26      	ldr	r3, [pc, #152]	; (800285c <HAL_ADC_Start+0x1e0>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_ADC_Start+0x166>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a25      	ldr	r2, [pc, #148]	; (8002868 <HAL_ADC_Start+0x1ec>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d136      	bne.n	8002844 <HAL_ADC_Start+0x1c8>
 80027d6:	4b21      	ldr	r3, [pc, #132]	; (800285c <HAL_ADC_Start+0x1e0>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d130      	bne.n	8002844 <HAL_ADC_Start+0x1c8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d129      	bne.n	8002844 <HAL_ADC_Start+0x1c8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	e020      	b.n	8002844 <HAL_ADC_Start+0x1c8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a16      	ldr	r2, [pc, #88]	; (8002860 <HAL_ADC_Start+0x1e4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d11b      	bne.n	8002844 <HAL_ADC_Start+0x1c8>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d114      	bne.n	8002844 <HAL_ADC_Start+0x1c8>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	e00b      	b.n	8002844 <HAL_ADC_Start+0x1c8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	f043 0210 	orr.w	r2, r3, #16
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	f043 0201 	orr.w	r2, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	0800be20 	.word	0x0800be20
 8002854:	20000000 	.word	0x20000000
 8002858:	431bde83 	.word	0x431bde83
 800285c:	40012300 	.word	0x40012300
 8002860:	40012000 	.word	0x40012000
 8002864:	40012100 	.word	0x40012100
 8002868:	40012200 	.word	0x40012200

0800286c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	7e1b      	ldrb	r3, [r3, #24]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_ADC_IRQHandler+0x3a>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	7e1b      	ldrb	r3, [r3, #24]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d004      	beq.n	80028a6 <HAL_ADC_IRQHandler+0x3a>
 800289c:	f240 41b7 	movw	r1, #1207	; 0x4b7
 80028a0:	4890      	ldr	r0, [pc, #576]	; (8002ae4 <HAL_ADC_IRQHandler+0x278>)
 80028a2:	f7ff f970 	bl	8001b86 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_ADC_IRQHandler+0x4a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	2b10      	cmp	r3, #16
 80028b4:	d904      	bls.n	80028c0 <HAL_ADC_IRQHandler+0x54>
 80028b6:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
 80028ba:	488a      	ldr	r0, [pc, #552]	; (8002ae4 <HAL_ADC_IRQHandler+0x278>)
 80028bc:	f7ff f963 	bl	8001b86 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d00c      	beq.n	80028e2 <HAL_ADC_IRQHandler+0x76>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_ADC_IRQHandler+0x76>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d004      	beq.n	80028e2 <HAL_ADC_IRQHandler+0x76>
 80028d8:	f240 41b9 	movw	r1, #1209	; 0x4b9
 80028dc:	4881      	ldr	r0, [pc, #516]	; (8002ae4 <HAL_ADC_IRQHandler+0x278>)
 80028de:	f7ff f952 	bl	8001b86 <assert_failed>
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d049      	beq.n	800298c <HAL_ADC_IRQHandler+0x120>
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d046      	beq.n	800298c <HAL_ADC_IRQHandler+0x120>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b00      	cmp	r3, #0
 8002908:	d105      	bne.n	8002916 <HAL_ADC_IRQHandler+0xaa>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d12b      	bne.n	800297c <HAL_ADC_IRQHandler+0x110>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002928:	2b00      	cmp	r3, #0
 800292a:	d127      	bne.n	800297c <HAL_ADC_IRQHandler+0x110>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002936:	2b00      	cmp	r3, #0
 8002938:	d006      	beq.n	8002948 <HAL_ADC_IRQHandler+0xdc>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002944:	2b00      	cmp	r3, #0
 8002946:	d119      	bne.n	800297c <HAL_ADC_IRQHandler+0x110>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0220 	bic.w	r2, r2, #32
 8002956:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d105      	bne.n	800297c <HAL_ADC_IRQHandler+0x110>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	f043 0201 	orr.w	r2, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f8c0 	bl	8002b02 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f06f 0212 	mvn.w	r2, #18
 800298a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d057      	beq.n	8002a52 <HAL_ADC_IRQHandler+0x1e6>
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d054      	beq.n	8002a52 <HAL_ADC_IRQHandler+0x1e6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d105      	bne.n	80029c0 <HAL_ADC_IRQHandler+0x154>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d139      	bne.n	8002a42 <HAL_ADC_IRQHandler+0x1d6>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d006      	beq.n	80029ea <HAL_ADC_IRQHandler+0x17e>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d12b      	bne.n	8002a42 <HAL_ADC_IRQHandler+0x1d6>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d124      	bne.n	8002a42 <HAL_ADC_IRQHandler+0x1d6>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d11d      	bne.n	8002a42 <HAL_ADC_IRQHandler+0x1d6>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d119      	bne.n	8002a42 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a1c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d105      	bne.n	8002a42 <HAL_ADC_IRQHandler+0x1d6>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f043 0201 	orr.w	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fafc 	bl	8003040 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 020c 	mvn.w	r2, #12
 8002a50:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a60:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d017      	beq.n	8002a98 <HAL_ADC_IRQHandler+0x22c>
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d014      	beq.n	8002a98 <HAL_ADC_IRQHandler+0x22c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d10d      	bne.n	8002a98 <HAL_ADC_IRQHandler+0x22c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f844 	bl	8002b16 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f06f 0201 	mvn.w	r2, #1
 8002a96:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aa6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d015      	beq.n	8002ada <HAL_ADC_IRQHandler+0x26e>
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d012      	beq.n	8002ada <HAL_ADC_IRQHandler+0x26e>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab8:	f043 0202 	orr.w	r2, r3, #2
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0220 	mvn.w	r2, #32
 8002ac8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f82d 	bl	8002b2a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0220 	mvn.w	r2, #32
 8002ad8:	601a      	str	r2, [r3, #0]
  }
}
 8002ada:	bf00      	nop
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	0800be20 	.word	0x0800be20

08002ae8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b12      	cmp	r3, #18
 8002b54:	d909      	bls.n	8002b6a <HAL_ADC_ConfigChannel+0x2a>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a72      	ldr	r2, [pc, #456]	; (8002d24 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d004      	beq.n	8002b6a <HAL_ADC_ConfigChannel+0x2a>
 8002b60:	f240 618b 	movw	r1, #1675	; 0x68b
 8002b64:	4870      	ldr	r0, [pc, #448]	; (8002d28 <HAL_ADC_ConfigChannel+0x1e8>)
 8002b66:	f7ff f80e 	bl	8001b86 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_ADC_ConfigChannel+0x3a>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b10      	cmp	r3, #16
 8002b78:	d904      	bls.n	8002b84 <HAL_ADC_ConfigChannel+0x44>
 8002b7a:	f240 618c 	movw	r1, #1676	; 0x68c
 8002b7e:	486a      	ldr	r0, [pc, #424]	; (8002d28 <HAL_ADC_ConfigChannel+0x1e8>)
 8002b80:	f7ff f801 	bl	8001b86 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d020      	beq.n	8002bce <HAL_ADC_ConfigChannel+0x8e>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d01c      	beq.n	8002bce <HAL_ADC_ConfigChannel+0x8e>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d018      	beq.n	8002bce <HAL_ADC_ConfigChannel+0x8e>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d014      	beq.n	8002bce <HAL_ADC_ConfigChannel+0x8e>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d010      	beq.n	8002bce <HAL_ADC_ConfigChannel+0x8e>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	d00c      	beq.n	8002bce <HAL_ADC_ConfigChannel+0x8e>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b06      	cmp	r3, #6
 8002bba:	d008      	beq.n	8002bce <HAL_ADC_ConfigChannel+0x8e>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b07      	cmp	r3, #7
 8002bc2:	d004      	beq.n	8002bce <HAL_ADC_ConfigChannel+0x8e>
 8002bc4:	f240 618d 	movw	r1, #1677	; 0x68d
 8002bc8:	4857      	ldr	r0, [pc, #348]	; (8002d28 <HAL_ADC_ConfigChannel+0x1e8>)
 8002bca:	f7fe ffdc 	bl	8001b86 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x9c>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e118      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x2ce>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b09      	cmp	r3, #9
 8002bea:	d925      	bls.n	8002c38 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68d9      	ldr	r1, [r3, #12]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	4413      	add	r3, r2
 8002c00:	3b1e      	subs	r3, #30
 8002c02:	2207      	movs	r2, #7
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	400a      	ands	r2, r1
 8002c10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68d9      	ldr	r1, [r3, #12]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	4618      	mov	r0, r3
 8002c24:	4603      	mov	r3, r0
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4403      	add	r3, r0
 8002c2a:	3b1e      	subs	r3, #30
 8002c2c:	409a      	lsls	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	e022      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6919      	ldr	r1, [r3, #16]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	461a      	mov	r2, r3
 8002c46:	4613      	mov	r3, r2
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4413      	add	r3, r2
 8002c4c:	2207      	movs	r2, #7
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43da      	mvns	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	400a      	ands	r2, r1
 8002c5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6919      	ldr	r1, [r3, #16]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	4603      	mov	r3, r0
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4403      	add	r3, r0
 8002c74:	409a      	lsls	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b06      	cmp	r3, #6
 8002c84:	d824      	bhi.n	8002cd0 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	3b05      	subs	r3, #5
 8002c98:	221f      	movs	r2, #31
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43da      	mvns	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	400a      	ands	r2, r1
 8002ca6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3b05      	subs	r3, #5
 8002cc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	635a      	str	r2, [r3, #52]	; 0x34
 8002cce:	e051      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b0c      	cmp	r3, #12
 8002cd6:	d829      	bhi.n	8002d2c <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3b23      	subs	r3, #35	; 0x23
 8002cea:	221f      	movs	r2, #31
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43da      	mvns	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	400a      	ands	r2, r1
 8002cf8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	4618      	mov	r0, r3
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	3b23      	subs	r3, #35	; 0x23
 8002d14:	fa00 f203 	lsl.w	r2, r0, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	631a      	str	r2, [r3, #48]	; 0x30
 8002d20:	e028      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x234>
 8002d22:	bf00      	nop
 8002d24:	10000012 	.word	0x10000012
 8002d28:	0800be20 	.word	0x0800be20
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3b41      	subs	r3, #65	; 0x41
 8002d3e:	221f      	movs	r2, #31
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43da      	mvns	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	400a      	ands	r2, r1
 8002d4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	3b41      	subs	r3, #65	; 0x41
 8002d68:	fa00 f203 	lsl.w	r2, r0, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d74:	4b28      	ldr	r3, [pc, #160]	; (8002e18 <HAL_ADC_ConfigChannel+0x2d8>)
 8002d76:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a27      	ldr	r2, [pc, #156]	; (8002e1c <HAL_ADC_ConfigChannel+0x2dc>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d10f      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x262>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b12      	cmp	r3, #18
 8002d88:	d10b      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a1d      	ldr	r2, [pc, #116]	; (8002e1c <HAL_ADC_ConfigChannel+0x2dc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d12b      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x2c4>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a1b      	ldr	r2, [pc, #108]	; (8002e20 <HAL_ADC_ConfigChannel+0x2e0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d003      	beq.n	8002dbe <HAL_ADC_ConfigChannel+0x27e>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b11      	cmp	r3, #17
 8002dbc:	d122      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a11      	ldr	r2, [pc, #68]	; (8002e20 <HAL_ADC_ConfigChannel+0x2e0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d111      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002de0:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <HAL_ADC_ConfigChannel+0x2e4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a10      	ldr	r2, [pc, #64]	; (8002e28 <HAL_ADC_ConfigChannel+0x2e8>)
 8002de6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dea:	0c9a      	lsrs	r2, r3, #18
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002df6:	e002      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1f9      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40012300 	.word	0x40012300
 8002e1c:	40012000 	.word	0x40012000
 8002e20:	10000012 	.word	0x10000012
 8002e24:	20000000 	.word	0x20000000
 8002e28:	431bde83 	.word	0x431bde83

08002e2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e34:	4b7f      	ldr	r3, [pc, #508]	; (8003034 <ADC_Init+0x208>)
 8002e36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6859      	ldr	r1, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	021a      	lsls	r2, r3, #8
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ea6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6899      	ldr	r1, [r3, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebe:	4a5e      	ldr	r2, [pc, #376]	; (8003038 <ADC_Init+0x20c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d022      	beq.n	8002f0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ed2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6899      	ldr	r1, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ef4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6899      	ldr	r1, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	609a      	str	r2, [r3, #8]
 8002f08:	e00f      	b.n	8002f2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0202 	bic.w	r2, r2, #2
 8002f38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6899      	ldr	r1, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	7e1b      	ldrb	r3, [r3, #24]
 8002f44:	005a      	lsls	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d028      	beq.n	8002faa <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <ADC_Init+0x13c>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d904      	bls.n	8002f72 <ADC_Init+0x146>
 8002f68:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8002f6c:	4833      	ldr	r0, [pc, #204]	; (800303c <ADC_Init+0x210>)
 8002f6e:	f7fe fe0a 	bl	8001b86 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f80:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f90:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6859      	ldr	r1, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	035a      	lsls	r2, r3, #13
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	605a      	str	r2, [r3, #4]
 8002fa8:	e007      	b.n	8002fba <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb8:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	051a      	lsls	r2, r3, #20
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6899      	ldr	r1, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ffc:	025a      	lsls	r2, r3, #9
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003014:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6899      	ldr	r1, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	029a      	lsls	r2, r3, #10
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	609a      	str	r2, [r3, #8]
}
 800302a:	bf00      	nop
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40012300 	.word	0x40012300
 8003038:	0f000001 	.word	0x0f000001
 800303c:	0800be20 	.word	0x0800be20

08003040 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e243      	b.n	80034ee <HAL_CAN_Init+0x49a>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a93      	ldr	r2, [pc, #588]	; (80032b8 <HAL_CAN_Init+0x264>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d009      	beq.n	8003084 <HAL_CAN_Init+0x30>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a91      	ldr	r2, [pc, #580]	; (80032bc <HAL_CAN_Init+0x268>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d004      	beq.n	8003084 <HAL_CAN_Init+0x30>
 800307a:	f240 111d 	movw	r1, #285	; 0x11d
 800307e:	4890      	ldr	r0, [pc, #576]	; (80032c0 <HAL_CAN_Init+0x26c>)
 8003080:	f7fe fd81 	bl	8001b86 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	7e1b      	ldrb	r3, [r3, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_CAN_Init+0x4a>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	7e1b      	ldrb	r3, [r3, #24]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d004      	beq.n	800309e <HAL_CAN_Init+0x4a>
 8003094:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003098:	4889      	ldr	r0, [pc, #548]	; (80032c0 <HAL_CAN_Init+0x26c>)
 800309a:	f7fe fd74 	bl	8001b86 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	7e5b      	ldrb	r3, [r3, #25]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d008      	beq.n	80030b8 <HAL_CAN_Init+0x64>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	7e5b      	ldrb	r3, [r3, #25]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d004      	beq.n	80030b8 <HAL_CAN_Init+0x64>
 80030ae:	f240 111f 	movw	r1, #287	; 0x11f
 80030b2:	4883      	ldr	r0, [pc, #524]	; (80032c0 <HAL_CAN_Init+0x26c>)
 80030b4:	f7fe fd67 	bl	8001b86 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	7e9b      	ldrb	r3, [r3, #26]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_CAN_Init+0x7e>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	7e9b      	ldrb	r3, [r3, #26]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d004      	beq.n	80030d2 <HAL_CAN_Init+0x7e>
 80030c8:	f44f 7190 	mov.w	r1, #288	; 0x120
 80030cc:	487c      	ldr	r0, [pc, #496]	; (80032c0 <HAL_CAN_Init+0x26c>)
 80030ce:	f7fe fd5a 	bl	8001b86 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	7edb      	ldrb	r3, [r3, #27]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d008      	beq.n	80030ec <HAL_CAN_Init+0x98>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	7edb      	ldrb	r3, [r3, #27]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d004      	beq.n	80030ec <HAL_CAN_Init+0x98>
 80030e2:	f240 1121 	movw	r1, #289	; 0x121
 80030e6:	4876      	ldr	r0, [pc, #472]	; (80032c0 <HAL_CAN_Init+0x26c>)
 80030e8:	f7fe fd4d 	bl	8001b86 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	7f1b      	ldrb	r3, [r3, #28]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_CAN_Init+0xb2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	7f1b      	ldrb	r3, [r3, #28]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d004      	beq.n	8003106 <HAL_CAN_Init+0xb2>
 80030fc:	f44f 7191 	mov.w	r1, #290	; 0x122
 8003100:	486f      	ldr	r0, [pc, #444]	; (80032c0 <HAL_CAN_Init+0x26c>)
 8003102:	f7fe fd40 	bl	8001b86 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	7f5b      	ldrb	r3, [r3, #29]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d008      	beq.n	8003120 <HAL_CAN_Init+0xcc>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	7f5b      	ldrb	r3, [r3, #29]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d004      	beq.n	8003120 <HAL_CAN_Init+0xcc>
 8003116:	f240 1123 	movw	r1, #291	; 0x123
 800311a:	4869      	ldr	r0, [pc, #420]	; (80032c0 <HAL_CAN_Init+0x26c>)
 800311c:	f7fe fd33 	bl	8001b86 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d013      	beq.n	8003150 <HAL_CAN_Init+0xfc>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003130:	d00e      	beq.n	8003150 <HAL_CAN_Init+0xfc>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800313a:	d009      	beq.n	8003150 <HAL_CAN_Init+0xfc>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003144:	d004      	beq.n	8003150 <HAL_CAN_Init+0xfc>
 8003146:	f44f 7192 	mov.w	r1, #292	; 0x124
 800314a:	485d      	ldr	r0, [pc, #372]	; (80032c0 <HAL_CAN_Init+0x26c>)
 800314c:	f7fe fd1b 	bl	8001b86 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d013      	beq.n	8003180 <HAL_CAN_Init+0x12c>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003160:	d00e      	beq.n	8003180 <HAL_CAN_Init+0x12c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800316a:	d009      	beq.n	8003180 <HAL_CAN_Init+0x12c>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003174:	d004      	beq.n	8003180 <HAL_CAN_Init+0x12c>
 8003176:	f240 1125 	movw	r1, #293	; 0x125
 800317a:	4851      	ldr	r0, [pc, #324]	; (80032c0 <HAL_CAN_Init+0x26c>)
 800317c:	f7fe fd03 	bl	8001b86 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d04f      	beq.n	8003228 <HAL_CAN_Init+0x1d4>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003190:	d04a      	beq.n	8003228 <HAL_CAN_Init+0x1d4>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800319a:	d045      	beq.n	8003228 <HAL_CAN_Init+0x1d4>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031a4:	d040      	beq.n	8003228 <HAL_CAN_Init+0x1d4>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031ae:	d03b      	beq.n	8003228 <HAL_CAN_Init+0x1d4>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b8:	d036      	beq.n	8003228 <HAL_CAN_Init+0x1d4>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80031c2:	d031      	beq.n	8003228 <HAL_CAN_Init+0x1d4>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80031cc:	d02c      	beq.n	8003228 <HAL_CAN_Init+0x1d4>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031d6:	d027      	beq.n	8003228 <HAL_CAN_Init+0x1d4>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 80031e0:	d022      	beq.n	8003228 <HAL_CAN_Init+0x1d4>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80031ea:	d01d      	beq.n	8003228 <HAL_CAN_Init+0x1d4>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 80031f4:	d018      	beq.n	8003228 <HAL_CAN_Init+0x1d4>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031fe:	d013      	beq.n	8003228 <HAL_CAN_Init+0x1d4>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8003208:	d00e      	beq.n	8003228 <HAL_CAN_Init+0x1d4>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003212:	d009      	beq.n	8003228 <HAL_CAN_Init+0x1d4>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 800321c:	d004      	beq.n	8003228 <HAL_CAN_Init+0x1d4>
 800321e:	f44f 7193 	mov.w	r1, #294	; 0x126
 8003222:	4827      	ldr	r0, [pc, #156]	; (80032c0 <HAL_CAN_Init+0x26c>)
 8003224:	f7fe fcaf 	bl	8001b86 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d027      	beq.n	8003280 <HAL_CAN_Init+0x22c>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003238:	d022      	beq.n	8003280 <HAL_CAN_Init+0x22c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003242:	d01d      	beq.n	8003280 <HAL_CAN_Init+0x22c>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800324c:	d018      	beq.n	8003280 <HAL_CAN_Init+0x22c>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003256:	d013      	beq.n	8003280 <HAL_CAN_Init+0x22c>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003260:	d00e      	beq.n	8003280 <HAL_CAN_Init+0x22c>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800326a:	d009      	beq.n	8003280 <HAL_CAN_Init+0x22c>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8003274:	d004      	beq.n	8003280 <HAL_CAN_Init+0x22c>
 8003276:	f240 1127 	movw	r1, #295	; 0x127
 800327a:	4811      	ldr	r0, [pc, #68]	; (80032c0 <HAL_CAN_Init+0x26c>)
 800327c:	f7fe fc83 	bl	8001b86 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d004      	beq.n	8003292 <HAL_CAN_Init+0x23e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003290:	d904      	bls.n	800329c <HAL_CAN_Init+0x248>
 8003292:	f44f 7194 	mov.w	r1, #296	; 0x128
 8003296:	480a      	ldr	r0, [pc, #40]	; (80032c0 <HAL_CAN_Init+0x26c>)
 8003298:	f7fe fc75 	bl	8001b86 <assert_failed>

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d13d      	bne.n	8003324 <HAL_CAN_Init+0x2d0>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a06      	ldr	r2, [pc, #24]	; (80032c4 <HAL_CAN_Init+0x270>)
 80032ac:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <HAL_CAN_Init+0x274>)
 80032b2:	645a      	str	r2, [r3, #68]	; 0x44
 80032b4:	e00a      	b.n	80032cc <HAL_CAN_Init+0x278>
 80032b6:	bf00      	nop
 80032b8:	40006400 	.word	0x40006400
 80032bc:	40006800 	.word	0x40006800
 80032c0:	0800be58 	.word	0x0800be58
 80032c4:	08001205 	.word	0x08001205
 80032c8:	080040d3 	.word	0x080040d3
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a8a      	ldr	r2, [pc, #552]	; (80034f8 <HAL_CAN_Init+0x4a4>)
 80032d0:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a89      	ldr	r2, [pc, #548]	; (80034fc <HAL_CAN_Init+0x4a8>)
 80032d6:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a89      	ldr	r2, [pc, #548]	; (8003500 <HAL_CAN_Init+0x4ac>)
 80032dc:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a88      	ldr	r2, [pc, #544]	; (8003504 <HAL_CAN_Init+0x4b0>)
 80032e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a88      	ldr	r2, [pc, #544]	; (8003508 <HAL_CAN_Init+0x4b4>)
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a87      	ldr	r2, [pc, #540]	; (800350c <HAL_CAN_Init+0x4b8>)
 80032ee:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a87      	ldr	r2, [pc, #540]	; (8003510 <HAL_CAN_Init+0x4bc>)
 80032f4:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a86      	ldr	r2, [pc, #536]	; (8003514 <HAL_CAN_Init+0x4c0>)
 80032fa:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a86      	ldr	r2, [pc, #536]	; (8003518 <HAL_CAN_Init+0x4c4>)
 8003300:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a85      	ldr	r2, [pc, #532]	; (800351c <HAL_CAN_Init+0x4c8>)
 8003306:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a85      	ldr	r2, [pc, #532]	; (8003520 <HAL_CAN_Init+0x4cc>)
 800330c:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <HAL_CAN_Init+0x2c8>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a82      	ldr	r2, [pc, #520]	; (8003524 <HAL_CAN_Init+0x4d0>)
 800331a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003334:	f7ff f806 	bl	8002344 <HAL_GetTick>
 8003338:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800333a:	e012      	b.n	8003362 <HAL_CAN_Init+0x30e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800333c:	f7ff f802 	bl	8002344 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b0a      	cmp	r3, #10
 8003348:	d90b      	bls.n	8003362 <HAL_CAN_Init+0x30e>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2205      	movs	r2, #5
 800335a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e0c5      	b.n	80034ee <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0e5      	beq.n	800333c <HAL_CAN_Init+0x2e8>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0202 	bic.w	r2, r2, #2
 800337e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003380:	f7fe ffe0 	bl	8002344 <HAL_GetTick>
 8003384:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003386:	e012      	b.n	80033ae <HAL_CAN_Init+0x35a>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003388:	f7fe ffdc 	bl	8002344 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b0a      	cmp	r3, #10
 8003394:	d90b      	bls.n	80033ae <HAL_CAN_Init+0x35a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2205      	movs	r2, #5
 80033a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e09f      	b.n	80034ee <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1e5      	bne.n	8003388 <HAL_CAN_Init+0x334>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	7e1b      	ldrb	r3, [r3, #24]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d108      	bne.n	80033d6 <HAL_CAN_Init+0x382>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	e007      	b.n	80033e6 <HAL_CAN_Init+0x392>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	7e5b      	ldrb	r3, [r3, #25]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d108      	bne.n	8003400 <HAL_CAN_Init+0x3ac>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	e007      	b.n	8003410 <HAL_CAN_Init+0x3bc>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800340e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	7e9b      	ldrb	r3, [r3, #26]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d108      	bne.n	800342a <HAL_CAN_Init+0x3d6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0220 	orr.w	r2, r2, #32
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	e007      	b.n	800343a <HAL_CAN_Init+0x3e6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0220 	bic.w	r2, r2, #32
 8003438:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	7edb      	ldrb	r3, [r3, #27]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d108      	bne.n	8003454 <HAL_CAN_Init+0x400>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 0210 	bic.w	r2, r2, #16
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	e007      	b.n	8003464 <HAL_CAN_Init+0x410>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0210 	orr.w	r2, r2, #16
 8003462:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	7f1b      	ldrb	r3, [r3, #28]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d108      	bne.n	800347e <HAL_CAN_Init+0x42a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0208 	orr.w	r2, r2, #8
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	e007      	b.n	800348e <HAL_CAN_Init+0x43a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0208 	bic.w	r2, r2, #8
 800348c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	7f5b      	ldrb	r3, [r3, #29]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d108      	bne.n	80034a8 <HAL_CAN_Init+0x454>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0204 	orr.w	r2, r2, #4
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	e007      	b.n	80034b8 <HAL_CAN_Init+0x464>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0204 	bic.w	r2, r2, #4
 80034b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	ea42 0103 	orr.w	r1, r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	1e5a      	subs	r2, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	080040e7 	.word	0x080040e7
 80034fc:	080040fb 	.word	0x080040fb
 8003500:	0800405b 	.word	0x0800405b
 8003504:	0800406f 	.word	0x0800406f
 8003508:	08004083 	.word	0x08004083
 800350c:	08004097 	.word	0x08004097
 8003510:	080040ab 	.word	0x080040ab
 8003514:	080040bf 	.word	0x080040bf
 8003518:	0800410f 	.word	0x0800410f
 800351c:	08004123 	.word	0x08004123
 8003520:	08004137 	.word	0x08004137
 8003524:	08001285 	.word	0x08001285

08003528 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800353e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003540:	7cfb      	ldrb	r3, [r7, #19]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d003      	beq.n	800354e <HAL_CAN_ConfigFilter+0x26>
 8003546:	7cfb      	ldrb	r3, [r7, #19]
 8003548:	2b02      	cmp	r3, #2
 800354a:	f040 812c 	bne.w	80037a6 <HAL_CAN_ConfigFilter+0x27e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003556:	d304      	bcc.n	8003562 <HAL_CAN_ConfigFilter+0x3a>
 8003558:	f44f 7154 	mov.w	r1, #848	; 0x350
 800355c:	4897      	ldr	r0, [pc, #604]	; (80037bc <HAL_CAN_ConfigFilter+0x294>)
 800355e:	f7fe fb12 	bl	8001b86 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356a:	d304      	bcc.n	8003576 <HAL_CAN_ConfigFilter+0x4e>
 800356c:	f240 3151 	movw	r1, #849	; 0x351
 8003570:	4892      	ldr	r0, [pc, #584]	; (80037bc <HAL_CAN_ConfigFilter+0x294>)
 8003572:	f7fe fb08 	bl	8001b86 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357e:	d304      	bcc.n	800358a <HAL_CAN_ConfigFilter+0x62>
 8003580:	f240 3152 	movw	r1, #850	; 0x352
 8003584:	488d      	ldr	r0, [pc, #564]	; (80037bc <HAL_CAN_ConfigFilter+0x294>)
 8003586:	f7fe fafe 	bl	8001b86 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003592:	d304      	bcc.n	800359e <HAL_CAN_ConfigFilter+0x76>
 8003594:	f240 3153 	movw	r1, #851	; 0x353
 8003598:	4888      	ldr	r0, [pc, #544]	; (80037bc <HAL_CAN_ConfigFilter+0x294>)
 800359a:	f7fe faf4 	bl	8001b86 <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_CAN_ConfigFilter+0x90>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d004      	beq.n	80035b8 <HAL_CAN_ConfigFilter+0x90>
 80035ae:	f44f 7155 	mov.w	r1, #852	; 0x354
 80035b2:	4882      	ldr	r0, [pc, #520]	; (80037bc <HAL_CAN_ConfigFilter+0x294>)
 80035b4:	f7fe fae7 	bl	8001b86 <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_CAN_ConfigFilter+0xaa>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d004      	beq.n	80035d2 <HAL_CAN_ConfigFilter+0xaa>
 80035c8:	f240 3155 	movw	r1, #853	; 0x355
 80035cc:	487b      	ldr	r0, [pc, #492]	; (80037bc <HAL_CAN_ConfigFilter+0x294>)
 80035ce:	f7fe fada 	bl	8001b86 <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d008      	beq.n	80035ec <HAL_CAN_ConfigFilter+0xc4>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d004      	beq.n	80035ec <HAL_CAN_ConfigFilter+0xc4>
 80035e2:	f240 3156 	movw	r1, #854	; 0x356
 80035e6:	4875      	ldr	r0, [pc, #468]	; (80037bc <HAL_CAN_ConfigFilter+0x294>)
 80035e8:	f7fe facd 	bl	8001b86 <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_CAN_ConfigFilter+0xde>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d004      	beq.n	8003606 <HAL_CAN_ConfigFilter+0xde>
 80035fc:	f240 3157 	movw	r1, #855	; 0x357
 8003600:	486e      	ldr	r0, [pc, #440]	; (80037bc <HAL_CAN_ConfigFilter+0x294>)
 8003602:	f7fe fac0 	bl	8001b86 <assert_failed>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003606:	4b6e      	ldr	r3, [pc, #440]	; (80037c0 <HAL_CAN_ConfigFilter+0x298>)
 8003608:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	2b1b      	cmp	r3, #27
 8003610:	d904      	bls.n	800361c <HAL_CAN_ConfigFilter+0xf4>
 8003612:	f240 3172 	movw	r1, #882	; 0x372
 8003616:	4869      	ldr	r0, [pc, #420]	; (80037bc <HAL_CAN_ConfigFilter+0x294>)
 8003618:	f7fe fab5 	bl	8001b86 <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	2b1b      	cmp	r3, #27
 8003622:	d904      	bls.n	800362e <HAL_CAN_ConfigFilter+0x106>
 8003624:	f240 3173 	movw	r1, #883	; 0x373
 8003628:	4864      	ldr	r0, [pc, #400]	; (80037bc <HAL_CAN_ConfigFilter+0x294>)
 800362a:	f7fe faac 	bl	8001b86 <assert_failed>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003634:	f043 0201 	orr.w	r2, r3, #1
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003644:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	021b      	lsls	r3, r3, #8
 800365a:	431a      	orrs	r2, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	2201      	movs	r2, #1
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	43db      	mvns	r3, r3
 800367c:	401a      	ands	r2, r3
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d123      	bne.n	80036d4 <HAL_CAN_ConfigFilter+0x1ac>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	43db      	mvns	r3, r3
 8003696:	401a      	ands	r2, r3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80036ae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	3248      	adds	r2, #72	; 0x48
 80036b4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80036c8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80036ca:	6979      	ldr	r1, [r7, #20]
 80036cc:	3348      	adds	r3, #72	; 0x48
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	440b      	add	r3, r1
 80036d2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d122      	bne.n	8003722 <HAL_CAN_ConfigFilter+0x1fa>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80036fc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	3248      	adds	r2, #72	; 0x48
 8003702:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003716:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003718:	6979      	ldr	r1, [r7, #20]
 800371a:	3348      	adds	r3, #72	; 0x48
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	440b      	add	r3, r1
 8003720:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d109      	bne.n	800373e <HAL_CAN_ConfigFilter+0x216>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	43db      	mvns	r3, r3
 8003734:	401a      	ands	r2, r3
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800373c:	e007      	b.n	800374e <HAL_CAN_ConfigFilter+0x226>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	431a      	orrs	r2, r3
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d109      	bne.n	800376a <HAL_CAN_ConfigFilter+0x242>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	43db      	mvns	r3, r3
 8003760:	401a      	ands	r2, r3
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003768:	e007      	b.n	800377a <HAL_CAN_ConfigFilter+0x252>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	431a      	orrs	r2, r3
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d107      	bne.n	8003792 <HAL_CAN_ConfigFilter+0x26a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	431a      	orrs	r2, r3
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003798:	f023 0201 	bic.w	r2, r3, #1
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	e006      	b.n	80037b4 <HAL_CAN_ConfigFilter+0x28c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
  }
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	0800be58 	.word	0x0800be58
 80037c0:	40006400 	.word	0x40006400

080037c4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d12e      	bne.n	8003836 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037f0:	f7fe fda8 	bl	8002344 <HAL_GetTick>
 80037f4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80037f6:	e012      	b.n	800381e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037f8:	f7fe fda4 	bl	8002344 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b0a      	cmp	r3, #10
 8003804:	d90b      	bls.n	800381e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2205      	movs	r2, #5
 8003816:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e012      	b.n	8003844 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e5      	bne.n	80037f8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	e006      	b.n	8003844 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
  }
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003860:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d008      	beq.n	8003884 <HAL_CAN_AddTxMessage+0x38>
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b04      	cmp	r3, #4
 8003878:	d004      	beq.n	8003884 <HAL_CAN_AddTxMessage+0x38>
 800387a:	f240 41e9 	movw	r1, #1257	; 0x4e9
 800387e:	4884      	ldr	r0, [pc, #528]	; (8003a90 <HAL_CAN_AddTxMessage+0x244>)
 8003880:	f7fe f981 	bl	8001b86 <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_CAN_AddTxMessage+0x52>
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d004      	beq.n	800389e <HAL_CAN_AddTxMessage+0x52>
 8003894:	f240 41ea 	movw	r1, #1258	; 0x4ea
 8003898:	487d      	ldr	r0, [pc, #500]	; (8003a90 <HAL_CAN_AddTxMessage+0x244>)
 800389a:	f7fe f974 	bl	8001b86 <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d904      	bls.n	80038b0 <HAL_CAN_AddTxMessage+0x64>
 80038a6:	f240 41eb 	movw	r1, #1259	; 0x4eb
 80038aa:	4879      	ldr	r0, [pc, #484]	; (8003a90 <HAL_CAN_AddTxMessage+0x244>)
 80038ac:	f7fe f96b 	bl	8001b86 <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10a      	bne.n	80038ce <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c0:	d30f      	bcc.n	80038e2 <HAL_CAN_AddTxMessage+0x96>
 80038c2:	f240 41ee 	movw	r1, #1262	; 0x4ee
 80038c6:	4872      	ldr	r0, [pc, #456]	; (8003a90 <HAL_CAN_AddTxMessage+0x244>)
 80038c8:	f7fe f95d 	bl	8001b86 <assert_failed>
 80038cc:	e009      	b.n	80038e2 <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038d6:	d304      	bcc.n	80038e2 <HAL_CAN_AddTxMessage+0x96>
 80038d8:	f240 41f2 	movw	r1, #1266	; 0x4f2
 80038dc:	486c      	ldr	r0, [pc, #432]	; (8003a90 <HAL_CAN_AddTxMessage+0x244>)
 80038de:	f7fe f952 	bl	8001b86 <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	7d1b      	ldrb	r3, [r3, #20]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d008      	beq.n	80038fc <HAL_CAN_AddTxMessage+0xb0>
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	7d1b      	ldrb	r3, [r3, #20]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d004      	beq.n	80038fc <HAL_CAN_AddTxMessage+0xb0>
 80038f2:	f240 41f4 	movw	r1, #1268	; 0x4f4
 80038f6:	4866      	ldr	r0, [pc, #408]	; (8003a90 <HAL_CAN_AddTxMessage+0x244>)
 80038f8:	f7fe f945 	bl	8001b86 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 80038fc:	7ffb      	ldrb	r3, [r7, #31]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d003      	beq.n	800390a <HAL_CAN_AddTxMessage+0xbe>
 8003902:	7ffb      	ldrb	r3, [r7, #31]
 8003904:	2b02      	cmp	r3, #2
 8003906:	f040 80b8 	bne.w	8003a7a <HAL_CAN_AddTxMessage+0x22e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10a      	bne.n	800392a <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800391a:	2b00      	cmp	r3, #0
 800391c:	d105      	bne.n	800392a <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 80a0 	beq.w	8003a6a <HAL_CAN_AddTxMessage+0x21e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	0e1b      	lsrs	r3, r3, #24
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d907      	bls.n	800394a <HAL_CAN_AddTxMessage+0xfe>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e09e      	b.n	8003a88 <HAL_CAN_AddTxMessage+0x23c>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800394a:	2201      	movs	r2, #1
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	409a      	lsls	r2, r3
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10d      	bne.n	8003978 <HAL_CAN_AddTxMessage+0x12c>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003966:	68f9      	ldr	r1, [r7, #12]
 8003968:	6809      	ldr	r1, [r1, #0]
 800396a:	431a      	orrs	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	3318      	adds	r3, #24
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	440b      	add	r3, r1
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	e00f      	b.n	8003998 <HAL_CAN_AddTxMessage+0x14c>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003982:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003988:	68f9      	ldr	r1, [r7, #12]
 800398a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800398c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	3318      	adds	r3, #24
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	440b      	add	r3, r1
 8003996:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6819      	ldr	r1, [r3, #0]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	3318      	adds	r3, #24
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	440b      	add	r3, r1
 80039a8:	3304      	adds	r3, #4
 80039aa:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	7d1b      	ldrb	r3, [r3, #20]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d111      	bne.n	80039d8 <HAL_CAN_AddTxMessage+0x18c>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	3318      	adds	r3, #24
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	4413      	add	r3, r2
 80039c0:	3304      	adds	r3, #4
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	6811      	ldr	r1, [r2, #0]
 80039c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	3318      	adds	r3, #24
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	440b      	add	r3, r1
 80039d4:	3304      	adds	r3, #4
 80039d6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3307      	adds	r3, #7
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	061a      	lsls	r2, r3, #24
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3306      	adds	r3, #6
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	041b      	lsls	r3, r3, #16
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3305      	adds	r3, #5
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	021b      	lsls	r3, r3, #8
 80039f2:	4313      	orrs	r3, r2
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	3204      	adds	r2, #4
 80039f8:	7812      	ldrb	r2, [r2, #0]
 80039fa:	4610      	mov	r0, r2
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	6811      	ldr	r1, [r2, #0]
 8003a00:	ea43 0200 	orr.w	r2, r3, r0
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	440b      	add	r3, r1
 8003a0a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003a0e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3303      	adds	r3, #3
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	061a      	lsls	r2, r3, #24
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3302      	adds	r3, #2
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	041b      	lsls	r3, r3, #16
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3301      	adds	r3, #1
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	7812      	ldrb	r2, [r2, #0]
 8003a30:	4610      	mov	r0, r2
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	6811      	ldr	r1, [r2, #0]
 8003a36:	ea43 0200 	orr.w	r2, r3, r0
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	440b      	add	r3, r1
 8003a40:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003a44:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	3318      	adds	r3, #24
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	4413      	add	r3, r2
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	6811      	ldr	r1, [r2, #0]
 8003a58:	f043 0201 	orr.w	r2, r3, #1
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	3318      	adds	r3, #24
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	440b      	add	r3, r1
 8003a64:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	e00e      	b.n	8003a88 <HAL_CAN_AddTxMessage+0x23c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e006      	b.n	8003a88 <HAL_CAN_AddTxMessage+0x23c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
  }
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3720      	adds	r7, #32
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	0800be58 	.word	0x0800be58

08003a94 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aa8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d007      	beq.n	8003ac0 <HAL_CAN_GetRxMessage+0x2c>
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d004      	beq.n	8003ac0 <HAL_CAN_GetRxMessage+0x2c>
 8003ab6:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 8003aba:	4884      	ldr	r0, [pc, #528]	; (8003ccc <HAL_CAN_GetRxMessage+0x238>)
 8003abc:	f7fe f863 	bl	8001b86 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d003      	beq.n	8003ace <HAL_CAN_GetRxMessage+0x3a>
 8003ac6:	7dfb      	ldrb	r3, [r7, #23]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	f040 80f3 	bne.w	8003cb4 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10e      	bne.n	8003af2 <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d116      	bne.n	8003b10 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e0e7      	b.n	8003cc2 <HAL_CAN_GetRxMessage+0x22e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d107      	bne.n	8003b10 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0d8      	b.n	8003cc2 <HAL_CAN_GetRxMessage+0x22e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	331b      	adds	r3, #27
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	4413      	add	r3, r2
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0204 	and.w	r2, r3, #4
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10c      	bne.n	8003b48 <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	331b      	adds	r3, #27
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	4413      	add	r3, r2
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	0d5b      	lsrs	r3, r3, #21
 8003b3e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	e00b      	b.n	8003b60 <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	331b      	adds	r3, #27
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	4413      	add	r3, r2
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	08db      	lsrs	r3, r3, #3
 8003b58:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	331b      	adds	r3, #27
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	4413      	add	r3, r2
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0202 	and.w	r2, r3, #2
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	331b      	adds	r3, #27
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	4413      	add	r3, r2
 8003b82:	3304      	adds	r3, #4
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 020f 	and.w	r2, r3, #15
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	331b      	adds	r3, #27
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	4413      	add	r3, r2
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	0a1b      	lsrs	r3, r3, #8
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	331b      	adds	r3, #27
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	0c1b      	lsrs	r3, r3, #16
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	0a1a      	lsrs	r2, r3, #8
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	3301      	adds	r3, #1
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	0c1a      	lsrs	r2, r3, #16
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	3302      	adds	r3, #2
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	0e1a      	lsrs	r2, r3, #24
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	3303      	adds	r3, #3
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	3304      	adds	r3, #4
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	0a1a      	lsrs	r2, r3, #8
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	3305      	adds	r3, #5
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	0c1a      	lsrs	r2, r3, #16
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	3306      	adds	r3, #6
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	0e1a      	lsrs	r2, r3, #24
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	3307      	adds	r3, #7
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d108      	bne.n	8003ca0 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0220 	orr.w	r2, r2, #32
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	e007      	b.n	8003cb0 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691a      	ldr	r2, [r3, #16]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0220 	orr.w	r2, r2, #32
 8003cae:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e006      	b.n	8003cc2 <HAL_CAN_GetRxMessage+0x22e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
  }
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	0800be58 	.word	0x0800be58

08003cd0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08a      	sub	sp, #40	; 0x28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 8083 	beq.w	8003e1e <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d025      	beq.n	8003d6e <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2201      	movs	r2, #1
 8003d28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d004      	beq.n	8003d3e <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	4798      	blx	r3
 8003d3c:	e017      	b.n	8003d6e <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d004      	beq.n	8003d52 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d50:	e00d      	b.n	8003d6e <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d004      	beq.n	8003d66 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24
 8003d64:	e003      	b.n	8003d6e <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d026      	beq.n	8003dc6 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d004      	beq.n	8003d96 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	4798      	blx	r3
 8003d94:	e017      	b.n	8003dc6 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d004      	beq.n	8003daa <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
 8003da8:	e00d      	b.n	8003dc6 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d004      	beq.n	8003dbe <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
 8003dbc:	e003      	b.n	8003dc6 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d026      	beq.n	8003e1e <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003dd8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d004      	beq.n	8003dee <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	4798      	blx	r3
 8003dec:	e017      	b.n	8003e1e <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d004      	beq.n	8003e02 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003e00:	e00d      	b.n	8003e1e <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d004      	beq.n	8003e16 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
 8003e14:	e003      	b.n	8003e1e <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00c      	beq.n	8003e42 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f003 0310 	and.w	r3, r3, #16
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d007      	beq.n	8003e42 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2210      	movs	r2, #16
 8003e40:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00c      	beq.n	8003e66 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d007      	beq.n	8003e66 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00a      	beq.n	8003e86 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00c      	beq.n	8003eaa <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f003 0310 	and.w	r3, r3, #16
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2210      	movs	r2, #16
 8003ea8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00c      	beq.n	8003ece <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d007      	beq.n	8003ece <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2208      	movs	r2, #8
 8003ec4:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	f003 0310 	and.w	r3, r3, #16
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00c      	beq.n	8003f12 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d007      	beq.n	8003f12 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2210      	movs	r2, #16
 8003f08:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00c      	beq.n	8003f36 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d007      	beq.n	8003f36 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2208      	movs	r2, #8
 8003f2c:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d07b      	beq.n	8004038 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d072      	beq.n	8004030 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	f043 0301 	orr.w	r3, r3, #1
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	f043 0302 	orr.w	r3, r3, #2
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	f043 0304 	orr.w	r3, r3, #4
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d043      	beq.n	8004030 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d03e      	beq.n	8004030 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fb8:	2b60      	cmp	r3, #96	; 0x60
 8003fba:	d02b      	beq.n	8004014 <HAL_CAN_IRQHandler+0x344>
 8003fbc:	2b60      	cmp	r3, #96	; 0x60
 8003fbe:	d82e      	bhi.n	800401e <HAL_CAN_IRQHandler+0x34e>
 8003fc0:	2b50      	cmp	r3, #80	; 0x50
 8003fc2:	d022      	beq.n	800400a <HAL_CAN_IRQHandler+0x33a>
 8003fc4:	2b50      	cmp	r3, #80	; 0x50
 8003fc6:	d82a      	bhi.n	800401e <HAL_CAN_IRQHandler+0x34e>
 8003fc8:	2b40      	cmp	r3, #64	; 0x40
 8003fca:	d019      	beq.n	8004000 <HAL_CAN_IRQHandler+0x330>
 8003fcc:	2b40      	cmp	r3, #64	; 0x40
 8003fce:	d826      	bhi.n	800401e <HAL_CAN_IRQHandler+0x34e>
 8003fd0:	2b30      	cmp	r3, #48	; 0x30
 8003fd2:	d010      	beq.n	8003ff6 <HAL_CAN_IRQHandler+0x326>
 8003fd4:	2b30      	cmp	r3, #48	; 0x30
 8003fd6:	d822      	bhi.n	800401e <HAL_CAN_IRQHandler+0x34e>
 8003fd8:	2b10      	cmp	r3, #16
 8003fda:	d002      	beq.n	8003fe2 <HAL_CAN_IRQHandler+0x312>
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d005      	beq.n	8003fec <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003fe0:	e01d      	b.n	800401e <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	f043 0308 	orr.w	r3, r3, #8
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003fea:	e019      	b.n	8004020 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	f043 0310 	orr.w	r3, r3, #16
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ff4:	e014      	b.n	8004020 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	f043 0320 	orr.w	r3, r3, #32
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ffe:	e00f      	b.n	8004020 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004008:	e00a      	b.n	8004020 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004012:	e005      	b.n	8004020 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800401c:	e000      	b.n	8004020 <HAL_CAN_IRQHandler+0x350>
            break;
 800401e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800402e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2204      	movs	r2, #4
 8004036:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	2b00      	cmp	r3, #0
 800403c:	d009      	beq.n	8004052 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	431a      	orrs	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004052:	bf00      	nop
 8004054:	3728      	adds	r7, #40	; 0x28
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004082:	b480      	push	{r7}
 8004084:	b083      	sub	sp, #12
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800409e:	bf00      	nop
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80040c6:	bf00      	nop
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
	...

0800414c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800415c:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <__NVIC_SetPriorityGrouping+0x44>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004168:	4013      	ands	r3, r2
 800416a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800417c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800417e:	4a04      	ldr	r2, [pc, #16]	; (8004190 <__NVIC_SetPriorityGrouping+0x44>)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	60d3      	str	r3, [r2, #12]
}
 8004184:	bf00      	nop
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	e000ed00 	.word	0xe000ed00

08004194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <__NVIC_GetPriorityGrouping+0x18>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	0a1b      	lsrs	r3, r3, #8
 800419e:	f003 0307 	and.w	r3, r3, #7
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	e000ed00 	.word	0xe000ed00

080041b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	db0b      	blt.n	80041da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	f003 021f 	and.w	r2, r3, #31
 80041c8:	4907      	ldr	r1, [pc, #28]	; (80041e8 <__NVIC_EnableIRQ+0x38>)
 80041ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	2001      	movs	r0, #1
 80041d2:	fa00 f202 	lsl.w	r2, r0, r2
 80041d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	e000e100 	.word	0xe000e100

080041ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	4603      	mov	r3, r0
 80041f4:	6039      	str	r1, [r7, #0]
 80041f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	db0a      	blt.n	8004216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	b2da      	uxtb	r2, r3
 8004204:	490c      	ldr	r1, [pc, #48]	; (8004238 <__NVIC_SetPriority+0x4c>)
 8004206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420a:	0112      	lsls	r2, r2, #4
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	440b      	add	r3, r1
 8004210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004214:	e00a      	b.n	800422c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	b2da      	uxtb	r2, r3
 800421a:	4908      	ldr	r1, [pc, #32]	; (800423c <__NVIC_SetPriority+0x50>)
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	3b04      	subs	r3, #4
 8004224:	0112      	lsls	r2, r2, #4
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	440b      	add	r3, r1
 800422a:	761a      	strb	r2, [r3, #24]
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	e000e100 	.word	0xe000e100
 800423c:	e000ed00 	.word	0xe000ed00

08004240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004240:	b480      	push	{r7}
 8004242:	b089      	sub	sp, #36	; 0x24
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f1c3 0307 	rsb	r3, r3, #7
 800425a:	2b04      	cmp	r3, #4
 800425c:	bf28      	it	cs
 800425e:	2304      	movcs	r3, #4
 8004260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	3304      	adds	r3, #4
 8004266:	2b06      	cmp	r3, #6
 8004268:	d902      	bls.n	8004270 <NVIC_EncodePriority+0x30>
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	3b03      	subs	r3, #3
 800426e:	e000      	b.n	8004272 <NVIC_EncodePriority+0x32>
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004274:	f04f 32ff 	mov.w	r2, #4294967295
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43da      	mvns	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	401a      	ands	r2, r3
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004288:	f04f 31ff 	mov.w	r1, #4294967295
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	fa01 f303 	lsl.w	r3, r1, r3
 8004292:	43d9      	mvns	r1, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004298:	4313      	orrs	r3, r2
         );
}
 800429a:	4618      	mov	r0, r3
 800429c:	3724      	adds	r7, #36	; 0x24
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
	...

080042a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b07      	cmp	r3, #7
 80042b4:	d00f      	beq.n	80042d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b06      	cmp	r3, #6
 80042ba:	d00c      	beq.n	80042d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b05      	cmp	r3, #5
 80042c0:	d009      	beq.n	80042d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d006      	beq.n	80042d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d003      	beq.n	80042d6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80042ce:	2190      	movs	r1, #144	; 0x90
 80042d0:	4804      	ldr	r0, [pc, #16]	; (80042e4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80042d2:	f7fd fc58 	bl	8001b86 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff ff38 	bl	800414c <__NVIC_SetPriorityGrouping>
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	0800be90 	.word	0x0800be90

080042e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b0f      	cmp	r3, #15
 80042fe:	d903      	bls.n	8004308 <HAL_NVIC_SetPriority+0x20>
 8004300:	21a8      	movs	r1, #168	; 0xa8
 8004302:	480e      	ldr	r0, [pc, #56]	; (800433c <HAL_NVIC_SetPriority+0x54>)
 8004304:	f7fd fc3f 	bl	8001b86 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b0f      	cmp	r3, #15
 800430c:	d903      	bls.n	8004316 <HAL_NVIC_SetPriority+0x2e>
 800430e:	21a9      	movs	r1, #169	; 0xa9
 8004310:	480a      	ldr	r0, [pc, #40]	; (800433c <HAL_NVIC_SetPriority+0x54>)
 8004312:	f7fd fc38 	bl	8001b86 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004316:	f7ff ff3d 	bl	8004194 <__NVIC_GetPriorityGrouping>
 800431a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	68b9      	ldr	r1, [r7, #8]
 8004320:	6978      	ldr	r0, [r7, #20]
 8004322:	f7ff ff8d 	bl	8004240 <NVIC_EncodePriority>
 8004326:	4602      	mov	r2, r0
 8004328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800432c:	4611      	mov	r1, r2
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff ff5c 	bl	80041ec <__NVIC_SetPriority>
}
 8004334:	bf00      	nop
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	0800be90 	.word	0x0800be90

08004340 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800434a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434e:	2b00      	cmp	r3, #0
 8004350:	da03      	bge.n	800435a <HAL_NVIC_EnableIRQ+0x1a>
 8004352:	21bc      	movs	r1, #188	; 0xbc
 8004354:	4805      	ldr	r0, [pc, #20]	; (800436c <HAL_NVIC_EnableIRQ+0x2c>)
 8004356:	f7fd fc16 	bl	8001b86 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800435a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff ff26 	bl	80041b0 <__NVIC_EnableIRQ>
}
 8004364:	bf00      	nop
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	0800be90 	.word	0x0800be90

08004370 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800437c:	f7fd ffe2 	bl	8002344 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e203      	b.n	8004794 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a8b      	ldr	r2, [pc, #556]	; (80045c0 <HAL_DMA_Init+0x250>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d04e      	beq.n	8004434 <HAL_DMA_Init+0xc4>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a8a      	ldr	r2, [pc, #552]	; (80045c4 <HAL_DMA_Init+0x254>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d049      	beq.n	8004434 <HAL_DMA_Init+0xc4>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a88      	ldr	r2, [pc, #544]	; (80045c8 <HAL_DMA_Init+0x258>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d044      	beq.n	8004434 <HAL_DMA_Init+0xc4>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a87      	ldr	r2, [pc, #540]	; (80045cc <HAL_DMA_Init+0x25c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d03f      	beq.n	8004434 <HAL_DMA_Init+0xc4>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a85      	ldr	r2, [pc, #532]	; (80045d0 <HAL_DMA_Init+0x260>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d03a      	beq.n	8004434 <HAL_DMA_Init+0xc4>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a84      	ldr	r2, [pc, #528]	; (80045d4 <HAL_DMA_Init+0x264>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d035      	beq.n	8004434 <HAL_DMA_Init+0xc4>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a82      	ldr	r2, [pc, #520]	; (80045d8 <HAL_DMA_Init+0x268>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d030      	beq.n	8004434 <HAL_DMA_Init+0xc4>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a81      	ldr	r2, [pc, #516]	; (80045dc <HAL_DMA_Init+0x26c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d02b      	beq.n	8004434 <HAL_DMA_Init+0xc4>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a7f      	ldr	r2, [pc, #508]	; (80045e0 <HAL_DMA_Init+0x270>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d026      	beq.n	8004434 <HAL_DMA_Init+0xc4>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a7e      	ldr	r2, [pc, #504]	; (80045e4 <HAL_DMA_Init+0x274>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d021      	beq.n	8004434 <HAL_DMA_Init+0xc4>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a7c      	ldr	r2, [pc, #496]	; (80045e8 <HAL_DMA_Init+0x278>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d01c      	beq.n	8004434 <HAL_DMA_Init+0xc4>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a7b      	ldr	r2, [pc, #492]	; (80045ec <HAL_DMA_Init+0x27c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d017      	beq.n	8004434 <HAL_DMA_Init+0xc4>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a79      	ldr	r2, [pc, #484]	; (80045f0 <HAL_DMA_Init+0x280>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d012      	beq.n	8004434 <HAL_DMA_Init+0xc4>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a78      	ldr	r2, [pc, #480]	; (80045f4 <HAL_DMA_Init+0x284>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d00d      	beq.n	8004434 <HAL_DMA_Init+0xc4>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a76      	ldr	r2, [pc, #472]	; (80045f8 <HAL_DMA_Init+0x288>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d008      	beq.n	8004434 <HAL_DMA_Init+0xc4>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a75      	ldr	r2, [pc, #468]	; (80045fc <HAL_DMA_Init+0x28c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d003      	beq.n	8004434 <HAL_DMA_Init+0xc4>
 800442c:	21b7      	movs	r1, #183	; 0xb7
 800442e:	4874      	ldr	r0, [pc, #464]	; (8004600 <HAL_DMA_Init+0x290>)
 8004430:	f7fd fba9 	bl	8001b86 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d026      	beq.n	800448a <HAL_DMA_Init+0x11a>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004444:	d021      	beq.n	800448a <HAL_DMA_Init+0x11a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800444e:	d01c      	beq.n	800448a <HAL_DMA_Init+0x11a>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004458:	d017      	beq.n	800448a <HAL_DMA_Init+0x11a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004462:	d012      	beq.n	800448a <HAL_DMA_Init+0x11a>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800446c:	d00d      	beq.n	800448a <HAL_DMA_Init+0x11a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004476:	d008      	beq.n	800448a <HAL_DMA_Init+0x11a>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004480:	d003      	beq.n	800448a <HAL_DMA_Init+0x11a>
 8004482:	21b8      	movs	r1, #184	; 0xb8
 8004484:	485e      	ldr	r0, [pc, #376]	; (8004600 <HAL_DMA_Init+0x290>)
 8004486:	f7fd fb7e 	bl	8001b86 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00b      	beq.n	80044aa <HAL_DMA_Init+0x13a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b40      	cmp	r3, #64	; 0x40
 8004498:	d007      	beq.n	80044aa <HAL_DMA_Init+0x13a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2b80      	cmp	r3, #128	; 0x80
 80044a0:	d003      	beq.n	80044aa <HAL_DMA_Init+0x13a>
 80044a2:	21b9      	movs	r1, #185	; 0xb9
 80044a4:	4856      	ldr	r0, [pc, #344]	; (8004600 <HAL_DMA_Init+0x290>)
 80044a6:	f7fd fb6e 	bl	8001b86 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b2:	d007      	beq.n	80044c4 <HAL_DMA_Init+0x154>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <HAL_DMA_Init+0x154>
 80044bc:	21ba      	movs	r1, #186	; 0xba
 80044be:	4850      	ldr	r0, [pc, #320]	; (8004600 <HAL_DMA_Init+0x290>)
 80044c0:	f7fd fb61 	bl	8001b86 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044cc:	d007      	beq.n	80044de <HAL_DMA_Init+0x16e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_DMA_Init+0x16e>
 80044d6:	21bb      	movs	r1, #187	; 0xbb
 80044d8:	4849      	ldr	r0, [pc, #292]	; (8004600 <HAL_DMA_Init+0x290>)
 80044da:	f7fd fb54 	bl	8001b86 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00d      	beq.n	8004502 <HAL_DMA_Init+0x192>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ee:	d008      	beq.n	8004502 <HAL_DMA_Init+0x192>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f8:	d003      	beq.n	8004502 <HAL_DMA_Init+0x192>
 80044fa:	21bc      	movs	r1, #188	; 0xbc
 80044fc:	4840      	ldr	r0, [pc, #256]	; (8004600 <HAL_DMA_Init+0x290>)
 80044fe:	f7fd fb42 	bl	8001b86 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00d      	beq.n	8004526 <HAL_DMA_Init+0x1b6>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004512:	d008      	beq.n	8004526 <HAL_DMA_Init+0x1b6>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800451c:	d003      	beq.n	8004526 <HAL_DMA_Init+0x1b6>
 800451e:	21bd      	movs	r1, #189	; 0xbd
 8004520:	4837      	ldr	r0, [pc, #220]	; (8004600 <HAL_DMA_Init+0x290>)
 8004522:	f7fd fb30 	bl	8001b86 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00c      	beq.n	8004548 <HAL_DMA_Init+0x1d8>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004536:	d007      	beq.n	8004548 <HAL_DMA_Init+0x1d8>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	2b20      	cmp	r3, #32
 800453e:	d003      	beq.n	8004548 <HAL_DMA_Init+0x1d8>
 8004540:	21be      	movs	r1, #190	; 0xbe
 8004542:	482f      	ldr	r0, [pc, #188]	; (8004600 <HAL_DMA_Init+0x290>)
 8004544:	f7fd fb1f 	bl	8001b86 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d012      	beq.n	8004576 <HAL_DMA_Init+0x206>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004558:	d00d      	beq.n	8004576 <HAL_DMA_Init+0x206>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004562:	d008      	beq.n	8004576 <HAL_DMA_Init+0x206>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800456c:	d003      	beq.n	8004576 <HAL_DMA_Init+0x206>
 800456e:	21bf      	movs	r1, #191	; 0xbf
 8004570:	4823      	ldr	r0, [pc, #140]	; (8004600 <HAL_DMA_Init+0x290>)
 8004572:	f7fd fb08 	bl	8001b86 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	2b00      	cmp	r3, #0
 800457c:	d007      	beq.n	800458e <HAL_DMA_Init+0x21e>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	2b04      	cmp	r3, #4
 8004584:	d003      	beq.n	800458e <HAL_DMA_Init+0x21e>
 8004586:	21c0      	movs	r1, #192	; 0xc0
 8004588:	481d      	ldr	r0, [pc, #116]	; (8004600 <HAL_DMA_Init+0x290>)
 800458a:	f7fd fafc 	bl	8001b86 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	2b00      	cmp	r3, #0
 8004594:	d064      	beq.n	8004660 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459a:	2b00      	cmp	r3, #0
 800459c:	d032      	beq.n	8004604 <HAL_DMA_Init+0x294>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d02e      	beq.n	8004604 <HAL_DMA_Init+0x294>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d02a      	beq.n	8004604 <HAL_DMA_Init+0x294>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d026      	beq.n	8004604 <HAL_DMA_Init+0x294>
 80045b6:	21c5      	movs	r1, #197	; 0xc5
 80045b8:	4811      	ldr	r0, [pc, #68]	; (8004600 <HAL_DMA_Init+0x290>)
 80045ba:	f7fd fae4 	bl	8001b86 <assert_failed>
 80045be:	e021      	b.n	8004604 <HAL_DMA_Init+0x294>
 80045c0:	40026010 	.word	0x40026010
 80045c4:	40026028 	.word	0x40026028
 80045c8:	40026040 	.word	0x40026040
 80045cc:	40026058 	.word	0x40026058
 80045d0:	40026070 	.word	0x40026070
 80045d4:	40026088 	.word	0x40026088
 80045d8:	400260a0 	.word	0x400260a0
 80045dc:	400260b8 	.word	0x400260b8
 80045e0:	40026410 	.word	0x40026410
 80045e4:	40026428 	.word	0x40026428
 80045e8:	40026440 	.word	0x40026440
 80045ec:	40026458 	.word	0x40026458
 80045f0:	40026470 	.word	0x40026470
 80045f4:	40026488 	.word	0x40026488
 80045f8:	400264a0 	.word	0x400264a0
 80045fc:	400264b8 	.word	0x400264b8
 8004600:	0800becc 	.word	0x0800becc
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	2b00      	cmp	r3, #0
 800460a:	d012      	beq.n	8004632 <HAL_DMA_Init+0x2c2>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004614:	d00d      	beq.n	8004632 <HAL_DMA_Init+0x2c2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800461e:	d008      	beq.n	8004632 <HAL_DMA_Init+0x2c2>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004628:	d003      	beq.n	8004632 <HAL_DMA_Init+0x2c2>
 800462a:	21c6      	movs	r1, #198	; 0xc6
 800462c:	485b      	ldr	r0, [pc, #364]	; (800479c <HAL_DMA_Init+0x42c>)
 800462e:	f7fd faaa 	bl	8001b86 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	2b00      	cmp	r3, #0
 8004638:	d012      	beq.n	8004660 <HAL_DMA_Init+0x2f0>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004642:	d00d      	beq.n	8004660 <HAL_DMA_Init+0x2f0>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800464c:	d008      	beq.n	8004660 <HAL_DMA_Init+0x2f0>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004656:	d003      	beq.n	8004660 <HAL_DMA_Init+0x2f0>
 8004658:	21c7      	movs	r1, #199	; 0xc7
 800465a:	4850      	ldr	r0, [pc, #320]	; (800479c <HAL_DMA_Init+0x42c>)
 800465c:	f7fd fa93 	bl	8001b86 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0201 	bic.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004680:	e00f      	b.n	80046a2 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004682:	f7fd fe5f 	bl	8002344 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b05      	cmp	r3, #5
 800468e:	d908      	bls.n	80046a2 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2203      	movs	r2, #3
 800469a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e078      	b.n	8004794 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e8      	bne.n	8004682 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4b39      	ldr	r3, [pc, #228]	; (80047a0 <HAL_DMA_Init+0x430>)
 80046bc:	4013      	ands	r3, r2
 80046be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d107      	bne.n	800470c <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	4313      	orrs	r3, r2
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f023 0307 	bic.w	r3, r3, #7
 8004722:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	2b04      	cmp	r3, #4
 8004734:	d117      	bne.n	8004766 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00e      	beq.n	8004766 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fa1b 	bl	8004b84 <DMA_CheckFifoParam>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d008      	beq.n	8004766 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2240      	movs	r2, #64	; 0x40
 8004758:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004762:	2301      	movs	r3, #1
 8004764:	e016      	b.n	8004794 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f9d2 	bl	8004b18 <DMA_CalcBaseAndBitshift>
 8004774:	4603      	mov	r3, r0
 8004776:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477c:	223f      	movs	r2, #63	; 0x3f
 800477e:	409a      	lsls	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	0800becc 	.word	0x0800becc
 80047a0:	f010803f 	.word	0xf010803f

080047a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d004      	beq.n	80047c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2280      	movs	r2, #128	; 0x80
 80047bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e00c      	b.n	80047dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2205      	movs	r2, #5
 80047c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0201 	bic.w	r2, r2, #1
 80047d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047f4:	4b8e      	ldr	r3, [pc, #568]	; (8004a30 <HAL_DMA_IRQHandler+0x248>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a8e      	ldr	r2, [pc, #568]	; (8004a34 <HAL_DMA_IRQHandler+0x24c>)
 80047fa:	fba2 2303 	umull	r2, r3, r2, r3
 80047fe:	0a9b      	lsrs	r3, r3, #10
 8004800:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004806:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004812:	2208      	movs	r2, #8
 8004814:	409a      	lsls	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4013      	ands	r3, r2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d01a      	beq.n	8004854 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d013      	beq.n	8004854 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0204 	bic.w	r2, r2, #4
 800483a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004840:	2208      	movs	r2, #8
 8004842:	409a      	lsls	r2, r3
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484c:	f043 0201 	orr.w	r2, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004858:	2201      	movs	r2, #1
 800485a:	409a      	lsls	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4013      	ands	r3, r2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d012      	beq.n	800488a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00b      	beq.n	800488a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004876:	2201      	movs	r2, #1
 8004878:	409a      	lsls	r2, r3
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004882:	f043 0202 	orr.w	r2, r3, #2
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488e:	2204      	movs	r2, #4
 8004890:	409a      	lsls	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4013      	ands	r3, r2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d012      	beq.n	80048c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00b      	beq.n	80048c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ac:	2204      	movs	r2, #4
 80048ae:	409a      	lsls	r2, r3
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b8:	f043 0204 	orr.w	r2, r3, #4
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c4:	2210      	movs	r2, #16
 80048c6:	409a      	lsls	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d043      	beq.n	8004958 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d03c      	beq.n	8004958 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e2:	2210      	movs	r2, #16
 80048e4:	409a      	lsls	r2, r3
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d018      	beq.n	800492a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d108      	bne.n	8004918 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	2b00      	cmp	r3, #0
 800490c:	d024      	beq.n	8004958 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	4798      	blx	r3
 8004916:	e01f      	b.n	8004958 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491c:	2b00      	cmp	r3, #0
 800491e:	d01b      	beq.n	8004958 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	4798      	blx	r3
 8004928:	e016      	b.n	8004958 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004934:	2b00      	cmp	r3, #0
 8004936:	d107      	bne.n	8004948 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0208 	bic.w	r2, r2, #8
 8004946:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800495c:	2220      	movs	r2, #32
 800495e:	409a      	lsls	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4013      	ands	r3, r2
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 808f 	beq.w	8004a88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 8087 	beq.w	8004a88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497e:	2220      	movs	r2, #32
 8004980:	409a      	lsls	r2, r3
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b05      	cmp	r3, #5
 8004990:	d136      	bne.n	8004a00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0216 	bic.w	r2, r2, #22
 80049a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695a      	ldr	r2, [r3, #20]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d103      	bne.n	80049c2 <HAL_DMA_IRQHandler+0x1da>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d007      	beq.n	80049d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0208 	bic.w	r2, r2, #8
 80049d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d6:	223f      	movs	r2, #63	; 0x3f
 80049d8:	409a      	lsls	r2, r3
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d07e      	beq.n	8004af4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	4798      	blx	r3
        }
        return;
 80049fe:	e079      	b.n	8004af4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d01d      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10d      	bne.n	8004a38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d031      	beq.n	8004a88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	4798      	blx	r3
 8004a2c:	e02c      	b.n	8004a88 <HAL_DMA_IRQHandler+0x2a0>
 8004a2e:	bf00      	nop
 8004a30:	20000000 	.word	0x20000000
 8004a34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d023      	beq.n	8004a88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	4798      	blx	r3
 8004a48:	e01e      	b.n	8004a88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10f      	bne.n	8004a78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0210 	bic.w	r2, r2, #16
 8004a66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d032      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d022      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2205      	movs	r2, #5
 8004aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0201 	bic.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d307      	bcc.n	8004ad0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f2      	bne.n	8004ab4 <HAL_DMA_IRQHandler+0x2cc>
 8004ace:	e000      	b.n	8004ad2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ad0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d005      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	4798      	blx	r3
 8004af2:	e000      	b.n	8004af6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004af4:	bf00      	nop
    }
  }
}
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b0a:	b2db      	uxtb	r3, r3
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	3b10      	subs	r3, #16
 8004b28:	4a14      	ldr	r2, [pc, #80]	; (8004b7c <DMA_CalcBaseAndBitshift+0x64>)
 8004b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2e:	091b      	lsrs	r3, r3, #4
 8004b30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b32:	4a13      	ldr	r2, [pc, #76]	; (8004b80 <DMA_CalcBaseAndBitshift+0x68>)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4413      	add	r3, r2
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d909      	bls.n	8004b5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b4e:	f023 0303 	bic.w	r3, r3, #3
 8004b52:	1d1a      	adds	r2, r3, #4
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	659a      	str	r2, [r3, #88]	; 0x58
 8004b58:	e007      	b.n	8004b6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b62:	f023 0303 	bic.w	r3, r3, #3
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	aaaaaaab 	.word	0xaaaaaaab
 8004b80:	0800c0b8 	.word	0x0800c0b8

08004b84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d11f      	bne.n	8004bde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d856      	bhi.n	8004c52 <DMA_CheckFifoParam+0xce>
 8004ba4:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <DMA_CheckFifoParam+0x28>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004bbd 	.word	0x08004bbd
 8004bb0:	08004bcf 	.word	0x08004bcf
 8004bb4:	08004bbd 	.word	0x08004bbd
 8004bb8:	08004c53 	.word	0x08004c53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d046      	beq.n	8004c56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bcc:	e043      	b.n	8004c56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bd6:	d140      	bne.n	8004c5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bdc:	e03d      	b.n	8004c5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be6:	d121      	bne.n	8004c2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d837      	bhi.n	8004c5e <DMA_CheckFifoParam+0xda>
 8004bee:	a201      	add	r2, pc, #4	; (adr r2, 8004bf4 <DMA_CheckFifoParam+0x70>)
 8004bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf4:	08004c05 	.word	0x08004c05
 8004bf8:	08004c0b 	.word	0x08004c0b
 8004bfc:	08004c05 	.word	0x08004c05
 8004c00:	08004c1d 	.word	0x08004c1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
      break;
 8004c08:	e030      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d025      	beq.n	8004c62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c1a:	e022      	b.n	8004c62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c24:	d11f      	bne.n	8004c66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c2a:	e01c      	b.n	8004c66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d903      	bls.n	8004c3a <DMA_CheckFifoParam+0xb6>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d003      	beq.n	8004c40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c38:	e018      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c3e:	e015      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00e      	beq.n	8004c6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c50:	e00b      	b.n	8004c6a <DMA_CheckFifoParam+0xe6>
      break;
 8004c52:	bf00      	nop
 8004c54:	e00a      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;
 8004c56:	bf00      	nop
 8004c58:	e008      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;
 8004c5a:	bf00      	nop
 8004c5c:	e006      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;
 8004c5e:	bf00      	nop
 8004c60:	e004      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;
 8004c62:	bf00      	nop
 8004c64:	e002      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;   
 8004c66:	bf00      	nop
 8004c68:	e000      	b.n	8004c6c <DMA_CheckFifoParam+0xe8>
      break;
 8004c6a:	bf00      	nop
    }
  } 
  
  return status; 
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop

08004c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a37      	ldr	r2, [pc, #220]	; (8004d74 <HAL_GPIO_Init+0xf8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d01f      	beq.n	8004cda <HAL_GPIO_Init+0x5e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a36      	ldr	r2, [pc, #216]	; (8004d78 <HAL_GPIO_Init+0xfc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01b      	beq.n	8004cda <HAL_GPIO_Init+0x5e>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a35      	ldr	r2, [pc, #212]	; (8004d7c <HAL_GPIO_Init+0x100>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d017      	beq.n	8004cda <HAL_GPIO_Init+0x5e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a34      	ldr	r2, [pc, #208]	; (8004d80 <HAL_GPIO_Init+0x104>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <HAL_GPIO_Init+0x5e>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a33      	ldr	r2, [pc, #204]	; (8004d84 <HAL_GPIO_Init+0x108>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d00f      	beq.n	8004cda <HAL_GPIO_Init+0x5e>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a32      	ldr	r2, [pc, #200]	; (8004d88 <HAL_GPIO_Init+0x10c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d00b      	beq.n	8004cda <HAL_GPIO_Init+0x5e>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a31      	ldr	r2, [pc, #196]	; (8004d8c <HAL_GPIO_Init+0x110>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d007      	beq.n	8004cda <HAL_GPIO_Init+0x5e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a30      	ldr	r2, [pc, #192]	; (8004d90 <HAL_GPIO_Init+0x114>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d003      	beq.n	8004cda <HAL_GPIO_Init+0x5e>
 8004cd2:	21ac      	movs	r1, #172	; 0xac
 8004cd4:	482f      	ldr	r0, [pc, #188]	; (8004d94 <HAL_GPIO_Init+0x118>)
 8004cd6:	f7fc ff56 	bl	8001b86 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_GPIO_Init+0x74>
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	0c1b      	lsrs	r3, r3, #16
 8004cea:	041b      	lsls	r3, r3, #16
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_GPIO_Init+0x7c>
 8004cf0:	21ad      	movs	r1, #173	; 0xad
 8004cf2:	4828      	ldr	r0, [pc, #160]	; (8004d94 <HAL_GPIO_Init+0x118>)
 8004cf4:	f7fc ff47 	bl	8001b86 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d035      	beq.n	8004d6c <HAL_GPIO_Init+0xf0>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d031      	beq.n	8004d6c <HAL_GPIO_Init+0xf0>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b11      	cmp	r3, #17
 8004d0e:	d02d      	beq.n	8004d6c <HAL_GPIO_Init+0xf0>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d029      	beq.n	8004d6c <HAL_GPIO_Init+0xf0>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b12      	cmp	r3, #18
 8004d1e:	d025      	beq.n	8004d6c <HAL_GPIO_Init+0xf0>
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8004d28:	d020      	beq.n	8004d6c <HAL_GPIO_Init+0xf0>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004d32:	d01b      	beq.n	8004d6c <HAL_GPIO_Init+0xf0>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8004d3c:	d016      	beq.n	8004d6c <HAL_GPIO_Init+0xf0>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8004d46:	d011      	beq.n	8004d6c <HAL_GPIO_Init+0xf0>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8004d50:	d00c      	beq.n	8004d6c <HAL_GPIO_Init+0xf0>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8004d5a:	d007      	beq.n	8004d6c <HAL_GPIO_Init+0xf0>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b03      	cmp	r3, #3
 8004d62:	d003      	beq.n	8004d6c <HAL_GPIO_Init+0xf0>
 8004d64:	21ae      	movs	r1, #174	; 0xae
 8004d66:	480b      	ldr	r0, [pc, #44]	; (8004d94 <HAL_GPIO_Init+0x118>)
 8004d68:	f7fc ff0d 	bl	8001b86 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	61fb      	str	r3, [r7, #28]
 8004d70:	e289      	b.n	8005286 <HAL_GPIO_Init+0x60a>
 8004d72:	bf00      	nop
 8004d74:	40020000 	.word	0x40020000
 8004d78:	40020400 	.word	0x40020400
 8004d7c:	40020800 	.word	0x40020800
 8004d80:	40020c00 	.word	0x40020c00
 8004d84:	40021000 	.word	0x40021000
 8004d88:	40021400 	.word	0x40021400
 8004d8c:	40021800 	.word	0x40021800
 8004d90:	40021c00 	.word	0x40021c00
 8004d94:	0800bf04 	.word	0x0800bf04
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d98:	2201      	movs	r2, #1
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4013      	ands	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	f040 8265 	bne.w	8005280 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d005      	beq.n	8004dce <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d144      	bne.n	8004e58 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00f      	beq.n	8004df6 <HAL_GPIO_Init+0x17a>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d00b      	beq.n	8004df6 <HAL_GPIO_Init+0x17a>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d007      	beq.n	8004df6 <HAL_GPIO_Init+0x17a>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	2b03      	cmp	r3, #3
 8004dec:	d003      	beq.n	8004df6 <HAL_GPIO_Init+0x17a>
 8004dee:	21c0      	movs	r1, #192	; 0xc0
 8004df0:	4831      	ldr	r0, [pc, #196]	; (8004eb8 <HAL_GPIO_Init+0x23c>)
 8004df2:	f7fc fec8 	bl	8001b86 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	2203      	movs	r2, #3
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	43db      	mvns	r3, r3
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	43db      	mvns	r3, r3
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	091b      	lsrs	r3, r3, #4
 8004e42:	f003 0201 	and.w	r2, r3, #1
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f003 0303 	and.w	r3, r3, #3
 8004e60:	2b03      	cmp	r3, #3
 8004e62:	d02b      	beq.n	8004ebc <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00b      	beq.n	8004e84 <HAL_GPIO_Init+0x208>
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d007      	beq.n	8004e84 <HAL_GPIO_Init+0x208>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d003      	beq.n	8004e84 <HAL_GPIO_Init+0x208>
 8004e7c:	21d1      	movs	r1, #209	; 0xd1
 8004e7e:	480e      	ldr	r0, [pc, #56]	; (8004eb8 <HAL_GPIO_Init+0x23c>)
 8004e80:	f7fc fe81 	bl	8001b86 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	2203      	movs	r2, #3
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	43db      	mvns	r3, r3
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	60da      	str	r2, [r3, #12]
 8004eb4:	e002      	b.n	8004ebc <HAL_GPIO_Init+0x240>
 8004eb6:	bf00      	nop
 8004eb8:	0800bf04 	.word	0x0800bf04
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f003 0303 	and.w	r3, r3, #3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	f040 810c 	bne.w	80050e2 <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 80e3 	beq.w	800509a <HAL_GPIO_Init+0x41e>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	2b09      	cmp	r3, #9
 8004eda:	f000 80de 	beq.w	800509a <HAL_GPIO_Init+0x41e>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 80d9 	beq.w	800509a <HAL_GPIO_Init+0x41e>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 80d4 	beq.w	800509a <HAL_GPIO_Init+0x41e>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 80cf 	beq.w	800509a <HAL_GPIO_Init+0x41e>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 80ca 	beq.w	800509a <HAL_GPIO_Init+0x41e>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	f000 80c5 	beq.w	800509a <HAL_GPIO_Init+0x41e>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	f000 80c0 	beq.w	800509a <HAL_GPIO_Init+0x41e>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	f000 80bb 	beq.w	800509a <HAL_GPIO_Init+0x41e>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	f000 80b6 	beq.w	800509a <HAL_GPIO_Init+0x41e>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	f000 80b1 	beq.w	800509a <HAL_GPIO_Init+0x41e>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	f000 80ac 	beq.w	800509a <HAL_GPIO_Init+0x41e>
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	f000 80a7 	beq.w	800509a <HAL_GPIO_Init+0x41e>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	f000 80a2 	beq.w	800509a <HAL_GPIO_Init+0x41e>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	f000 809d 	beq.w	800509a <HAL_GPIO_Init+0x41e>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	2b05      	cmp	r3, #5
 8004f66:	f000 8098 	beq.w	800509a <HAL_GPIO_Init+0x41e>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	2b05      	cmp	r3, #5
 8004f70:	f000 8093 	beq.w	800509a <HAL_GPIO_Init+0x41e>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b09      	cmp	r3, #9
 8004f7a:	f000 808e 	beq.w	800509a <HAL_GPIO_Init+0x41e>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	2b06      	cmp	r3, #6
 8004f84:	f000 8089 	beq.w	800509a <HAL_GPIO_Init+0x41e>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	2b09      	cmp	r3, #9
 8004f8e:	f000 8084 	beq.w	800509a <HAL_GPIO_Init+0x41e>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	2b07      	cmp	r3, #7
 8004f98:	d07f      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	2b07      	cmp	r3, #7
 8004fa0:	d07b      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	2b07      	cmp	r3, #7
 8004fa8:	d077      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d073      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d06f      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d06b      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	2b09      	cmp	r3, #9
 8004fc8:	d067      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	2b09      	cmp	r3, #9
 8004fd0:	d063      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	2b0a      	cmp	r3, #10
 8004fd8:	d05f      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	2b0a      	cmp	r3, #10
 8004fe0:	d05b      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	2b0b      	cmp	r3, #11
 8004fe8:	d057      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	2b0c      	cmp	r3, #12
 8004ff0:	d053      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	2b0c      	cmp	r3, #12
 8004ff8:	d04f      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	2b0d      	cmp	r3, #13
 8005000:	d04b      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	2b0f      	cmp	r3, #15
 8005008:	d047      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	2b05      	cmp	r3, #5
 8005010:	d043      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	2b0c      	cmp	r3, #12
 8005018:	d03f      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	2b06      	cmp	r3, #6
 8005020:	d03b      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	2b03      	cmp	r3, #3
 8005028:	d037      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	2b04      	cmp	r3, #4
 8005030:	d033      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	2b05      	cmp	r3, #5
 8005038:	d02f      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	2b06      	cmp	r3, #6
 8005040:	d02b      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	2b06      	cmp	r3, #6
 8005048:	d027      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	2b07      	cmp	r3, #7
 8005050:	d023      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b07      	cmp	r3, #7
 8005058:	d01f      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b07      	cmp	r3, #7
 8005060:	d01b      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	2b07      	cmp	r3, #7
 8005068:	d017      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	2b08      	cmp	r3, #8
 8005070:	d013      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	2b08      	cmp	r3, #8
 8005078:	d00f      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	2b09      	cmp	r3, #9
 8005080:	d00b      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	2b0a      	cmp	r3, #10
 8005088:	d007      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	2b0a      	cmp	r3, #10
 8005090:	d003      	beq.n	800509a <HAL_GPIO_Init+0x41e>
 8005092:	21de      	movs	r1, #222	; 0xde
 8005094:	4880      	ldr	r0, [pc, #512]	; (8005298 <HAL_GPIO_Init+0x61c>)
 8005096:	f7fc fd76 	bl	8001b86 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	08da      	lsrs	r2, r3, #3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3208      	adds	r2, #8
 80050a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	220f      	movs	r2, #15
 80050b2:	fa02 f303 	lsl.w	r3, r2, r3
 80050b6:	43db      	mvns	r3, r3
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	4013      	ands	r3, r2
 80050bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	691a      	ldr	r2, [r3, #16]
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	08da      	lsrs	r2, r3, #3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3208      	adds	r2, #8
 80050dc:	69b9      	ldr	r1, [r7, #24]
 80050de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	2203      	movs	r2, #3
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	43db      	mvns	r3, r3
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	4013      	ands	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f003 0203 	and.w	r2, r3, #3
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4313      	orrs	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 80ae 	beq.w	8005280 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	4b5c      	ldr	r3, [pc, #368]	; (800529c <HAL_GPIO_Init+0x620>)
 800512a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512c:	4a5b      	ldr	r2, [pc, #364]	; (800529c <HAL_GPIO_Init+0x620>)
 800512e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005132:	6453      	str	r3, [r2, #68]	; 0x44
 8005134:	4b59      	ldr	r3, [pc, #356]	; (800529c <HAL_GPIO_Init+0x620>)
 8005136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005140:	4a57      	ldr	r2, [pc, #348]	; (80052a0 <HAL_GPIO_Init+0x624>)
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	089b      	lsrs	r3, r3, #2
 8005146:	3302      	adds	r3, #2
 8005148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800514c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	f003 0303 	and.w	r3, r3, #3
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	220f      	movs	r2, #15
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	43db      	mvns	r3, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4013      	ands	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a4f      	ldr	r2, [pc, #316]	; (80052a4 <HAL_GPIO_Init+0x628>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d025      	beq.n	80051b8 <HAL_GPIO_Init+0x53c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a4e      	ldr	r2, [pc, #312]	; (80052a8 <HAL_GPIO_Init+0x62c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d01f      	beq.n	80051b4 <HAL_GPIO_Init+0x538>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a4d      	ldr	r2, [pc, #308]	; (80052ac <HAL_GPIO_Init+0x630>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d019      	beq.n	80051b0 <HAL_GPIO_Init+0x534>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a4c      	ldr	r2, [pc, #304]	; (80052b0 <HAL_GPIO_Init+0x634>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d013      	beq.n	80051ac <HAL_GPIO_Init+0x530>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a4b      	ldr	r2, [pc, #300]	; (80052b4 <HAL_GPIO_Init+0x638>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00d      	beq.n	80051a8 <HAL_GPIO_Init+0x52c>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a4a      	ldr	r2, [pc, #296]	; (80052b8 <HAL_GPIO_Init+0x63c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d007      	beq.n	80051a4 <HAL_GPIO_Init+0x528>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a49      	ldr	r2, [pc, #292]	; (80052bc <HAL_GPIO_Init+0x640>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d101      	bne.n	80051a0 <HAL_GPIO_Init+0x524>
 800519c:	2306      	movs	r3, #6
 800519e:	e00c      	b.n	80051ba <HAL_GPIO_Init+0x53e>
 80051a0:	2307      	movs	r3, #7
 80051a2:	e00a      	b.n	80051ba <HAL_GPIO_Init+0x53e>
 80051a4:	2305      	movs	r3, #5
 80051a6:	e008      	b.n	80051ba <HAL_GPIO_Init+0x53e>
 80051a8:	2304      	movs	r3, #4
 80051aa:	e006      	b.n	80051ba <HAL_GPIO_Init+0x53e>
 80051ac:	2303      	movs	r3, #3
 80051ae:	e004      	b.n	80051ba <HAL_GPIO_Init+0x53e>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e002      	b.n	80051ba <HAL_GPIO_Init+0x53e>
 80051b4:	2301      	movs	r3, #1
 80051b6:	e000      	b.n	80051ba <HAL_GPIO_Init+0x53e>
 80051b8:	2300      	movs	r3, #0
 80051ba:	69fa      	ldr	r2, [r7, #28]
 80051bc:	f002 0203 	and.w	r2, r2, #3
 80051c0:	0092      	lsls	r2, r2, #2
 80051c2:	4093      	lsls	r3, r2
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051ca:	4935      	ldr	r1, [pc, #212]	; (80052a0 <HAL_GPIO_Init+0x624>)
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	089b      	lsrs	r3, r3, #2
 80051d0:	3302      	adds	r3, #2
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051d8:	4b39      	ldr	r3, [pc, #228]	; (80052c0 <HAL_GPIO_Init+0x644>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	43db      	mvns	r3, r3
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	4013      	ands	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051fc:	4a30      	ldr	r2, [pc, #192]	; (80052c0 <HAL_GPIO_Init+0x644>)
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005202:	4b2f      	ldr	r3, [pc, #188]	; (80052c0 <HAL_GPIO_Init+0x644>)
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	43db      	mvns	r3, r3
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	4013      	ands	r3, r2
 8005210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005226:	4a26      	ldr	r2, [pc, #152]	; (80052c0 <HAL_GPIO_Init+0x644>)
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800522c:	4b24      	ldr	r3, [pc, #144]	; (80052c0 <HAL_GPIO_Init+0x644>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	43db      	mvns	r3, r3
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	4013      	ands	r3, r2
 800523a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005250:	4a1b      	ldr	r2, [pc, #108]	; (80052c0 <HAL_GPIO_Init+0x644>)
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005256:	4b1a      	ldr	r3, [pc, #104]	; (80052c0 <HAL_GPIO_Init+0x644>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	43db      	mvns	r3, r3
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	4013      	ands	r3, r2
 8005264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800527a:	4a11      	ldr	r2, [pc, #68]	; (80052c0 <HAL_GPIO_Init+0x644>)
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	3301      	adds	r3, #1
 8005284:	61fb      	str	r3, [r7, #28]
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	2b0f      	cmp	r3, #15
 800528a:	f67f ad85 	bls.w	8004d98 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 800528e:	bf00      	nop
 8005290:	bf00      	nop
 8005292:	3720      	adds	r7, #32
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	0800bf04 	.word	0x0800bf04
 800529c:	40023800 	.word	0x40023800
 80052a0:	40013800 	.word	0x40013800
 80052a4:	40020000 	.word	0x40020000
 80052a8:	40020400 	.word	0x40020400
 80052ac:	40020800 	.word	0x40020800
 80052b0:	40020c00 	.word	0x40020c00
 80052b4:	40021000 	.word	0x40021000
 80052b8:	40021400 	.word	0x40021400
 80052bc:	40021800 	.word	0x40021800
 80052c0:	40013c00 	.word	0x40013c00

080052c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	807b      	strh	r3, [r7, #2]
 80052d0:	4613      	mov	r3, r2
 80052d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80052d4:	887b      	ldrh	r3, [r7, #2]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d004      	beq.n	80052e4 <HAL_GPIO_WritePin+0x20>
 80052da:	887b      	ldrh	r3, [r7, #2]
 80052dc:	0c1b      	lsrs	r3, r3, #16
 80052de:	041b      	lsls	r3, r3, #16
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d004      	beq.n	80052ee <HAL_GPIO_WritePin+0x2a>
 80052e4:	f240 119d 	movw	r1, #413	; 0x19d
 80052e8:	480e      	ldr	r0, [pc, #56]	; (8005324 <HAL_GPIO_WritePin+0x60>)
 80052ea:	f7fc fc4c 	bl	8001b86 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80052ee:	787b      	ldrb	r3, [r7, #1]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d007      	beq.n	8005304 <HAL_GPIO_WritePin+0x40>
 80052f4:	787b      	ldrb	r3, [r7, #1]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d004      	beq.n	8005304 <HAL_GPIO_WritePin+0x40>
 80052fa:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80052fe:	4809      	ldr	r0, [pc, #36]	; (8005324 <HAL_GPIO_WritePin+0x60>)
 8005300:	f7fc fc41 	bl	8001b86 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8005304:	787b      	ldrb	r3, [r7, #1]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800530a:	887a      	ldrh	r2, [r7, #2]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005310:	e003      	b.n	800531a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005312:	887b      	ldrh	r3, [r7, #2]
 8005314:	041a      	lsls	r2, r3, #16
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	619a      	str	r2, [r3, #24]
}
 800531a:	bf00      	nop
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	0800bf04 	.word	0x0800bf04

08005328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e1bd      	b.n	80056b6 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a93      	ldr	r2, [pc, #588]	; (800558c <HAL_I2C_Init+0x264>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d00e      	beq.n	8005362 <HAL_I2C_Init+0x3a>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a91      	ldr	r2, [pc, #580]	; (8005590 <HAL_I2C_Init+0x268>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d009      	beq.n	8005362 <HAL_I2C_Init+0x3a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a90      	ldr	r2, [pc, #576]	; (8005594 <HAL_I2C_Init+0x26c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d004      	beq.n	8005362 <HAL_I2C_Init+0x3a>
 8005358:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800535c:	488e      	ldr	r0, [pc, #568]	; (8005598 <HAL_I2C_Init+0x270>)
 800535e:	f7fc fc12 	bl	8001b86 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d004      	beq.n	8005374 <HAL_I2C_Init+0x4c>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	4a8b      	ldr	r2, [pc, #556]	; (800559c <HAL_I2C_Init+0x274>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d904      	bls.n	800537e <HAL_I2C_Init+0x56>
 8005374:	f240 11bf 	movw	r1, #447	; 0x1bf
 8005378:	4887      	ldr	r0, [pc, #540]	; (8005598 <HAL_I2C_Init+0x270>)
 800537a:	f7fc fc04 	bl	8001b86 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d009      	beq.n	800539a <HAL_I2C_Init+0x72>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800538e:	d004      	beq.n	800539a <HAL_I2C_Init+0x72>
 8005390:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005394:	4880      	ldr	r0, [pc, #512]	; (8005598 <HAL_I2C_Init+0x270>)
 8005396:	f7fc fbf6 	bl	8001b86 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80053a2:	f023 0303 	bic.w	r3, r3, #3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d004      	beq.n	80053b4 <HAL_I2C_Init+0x8c>
 80053aa:	f240 11c1 	movw	r1, #449	; 0x1c1
 80053ae:	487a      	ldr	r0, [pc, #488]	; (8005598 <HAL_I2C_Init+0x270>)
 80053b0:	f7fc fbe9 	bl	8001b86 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053bc:	d009      	beq.n	80053d2 <HAL_I2C_Init+0xaa>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80053c6:	d004      	beq.n	80053d2 <HAL_I2C_Init+0xaa>
 80053c8:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80053cc:	4872      	ldr	r0, [pc, #456]	; (8005598 <HAL_I2C_Init+0x270>)
 80053ce:	f7fc fbda 	bl	8001b86 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d008      	beq.n	80053ec <HAL_I2C_Init+0xc4>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d004      	beq.n	80053ec <HAL_I2C_Init+0xc4>
 80053e2:	f240 11c3 	movw	r1, #451	; 0x1c3
 80053e6:	486c      	ldr	r0, [pc, #432]	; (8005598 <HAL_I2C_Init+0x270>)
 80053e8:	f7fc fbcd 	bl	8001b86 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d004      	beq.n	8005402 <HAL_I2C_Init+0xda>
 80053f8:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80053fc:	4866      	ldr	r0, [pc, #408]	; (8005598 <HAL_I2C_Init+0x270>)
 80053fe:	f7fc fbc2 	bl	8001b86 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d008      	beq.n	800541c <HAL_I2C_Init+0xf4>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	2b40      	cmp	r3, #64	; 0x40
 8005410:	d004      	beq.n	800541c <HAL_I2C_Init+0xf4>
 8005412:	f240 11c5 	movw	r1, #453	; 0x1c5
 8005416:	4860      	ldr	r0, [pc, #384]	; (8005598 <HAL_I2C_Init+0x270>)
 8005418:	f7fc fbb5 	bl	8001b86 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d008      	beq.n	8005436 <HAL_I2C_Init+0x10e>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	2b80      	cmp	r3, #128	; 0x80
 800542a:	d004      	beq.n	8005436 <HAL_I2C_Init+0x10e>
 800542c:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8005430:	4859      	ldr	r0, [pc, #356]	; (8005598 <HAL_I2C_Init+0x270>)
 8005432:	f7fc fba8 	bl	8001b86 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d106      	bne.n	8005450 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fc fa44 	bl	80018d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2224      	movs	r2, #36	; 0x24
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0201 	bic.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005476:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005486:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005488:	f001 fff8 	bl	800747c <HAL_RCC_GetPCLK1Freq>
 800548c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	4a43      	ldr	r2, [pc, #268]	; (80055a0 <HAL_I2C_Init+0x278>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d807      	bhi.n	80054a8 <HAL_I2C_Init+0x180>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4a42      	ldr	r2, [pc, #264]	; (80055a4 <HAL_I2C_Init+0x27c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	bf94      	ite	ls
 80054a0:	2301      	movls	r3, #1
 80054a2:	2300      	movhi	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	e006      	b.n	80054b6 <HAL_I2C_Init+0x18e>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4a3f      	ldr	r2, [pc, #252]	; (80055a8 <HAL_I2C_Init+0x280>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	bf94      	ite	ls
 80054b0:	2301      	movls	r3, #1
 80054b2:	2300      	movhi	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e0fb      	b.n	80056b6 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4a3a      	ldr	r2, [pc, #232]	; (80055ac <HAL_I2C_Init+0x284>)
 80054c2:	fba2 2303 	umull	r2, r3, r2, r3
 80054c6:	0c9b      	lsrs	r3, r3, #18
 80054c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	430a      	orrs	r2, r1
 80054dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	4a2c      	ldr	r2, [pc, #176]	; (80055a0 <HAL_I2C_Init+0x278>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d802      	bhi.n	80054f8 <HAL_I2C_Init+0x1d0>
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	3301      	adds	r3, #1
 80054f6:	e009      	b.n	800550c <HAL_I2C_Init+0x1e4>
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80054fe:	fb02 f303 	mul.w	r3, r2, r3
 8005502:	4a2b      	ldr	r2, [pc, #172]	; (80055b0 <HAL_I2C_Init+0x288>)
 8005504:	fba2 2303 	umull	r2, r3, r2, r3
 8005508:	099b      	lsrs	r3, r3, #6
 800550a:	3301      	adds	r3, #1
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6812      	ldr	r2, [r2, #0]
 8005510:	430b      	orrs	r3, r1
 8005512:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800551e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	491e      	ldr	r1, [pc, #120]	; (80055a0 <HAL_I2C_Init+0x278>)
 8005528:	428b      	cmp	r3, r1
 800552a:	d819      	bhi.n	8005560 <HAL_I2C_Init+0x238>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	1e59      	subs	r1, r3, #1
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	fbb1 f3f3 	udiv	r3, r1, r3
 800553a:	1c59      	adds	r1, r3, #1
 800553c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005540:	400b      	ands	r3, r1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <HAL_I2C_Init+0x234>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	1e59      	subs	r1, r3, #1
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	fbb1 f3f3 	udiv	r3, r1, r3
 8005554:	3301      	adds	r3, #1
 8005556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800555a:	e065      	b.n	8005628 <HAL_I2C_Init+0x300>
 800555c:	2304      	movs	r3, #4
 800555e:	e063      	b.n	8005628 <HAL_I2C_Init+0x300>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d125      	bne.n	80055b4 <HAL_I2C_Init+0x28c>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	1e58      	subs	r0, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6859      	ldr	r1, [r3, #4]
 8005570:	460b      	mov	r3, r1
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	440b      	add	r3, r1
 8005576:	fbb0 f3f3 	udiv	r3, r0, r3
 800557a:	3301      	adds	r3, #1
 800557c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005580:	2b00      	cmp	r3, #0
 8005582:	bf0c      	ite	eq
 8005584:	2301      	moveq	r3, #1
 8005586:	2300      	movne	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	e026      	b.n	80055da <HAL_I2C_Init+0x2b2>
 800558c:	40005400 	.word	0x40005400
 8005590:	40005800 	.word	0x40005800
 8005594:	40005c00 	.word	0x40005c00
 8005598:	0800bf40 	.word	0x0800bf40
 800559c:	00061a80 	.word	0x00061a80
 80055a0:	000186a0 	.word	0x000186a0
 80055a4:	001e847f 	.word	0x001e847f
 80055a8:	003d08ff 	.word	0x003d08ff
 80055ac:	431bde83 	.word	0x431bde83
 80055b0:	10624dd3 	.word	0x10624dd3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	1e58      	subs	r0, r3, #1
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6859      	ldr	r1, [r3, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	0099      	lsls	r1, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ca:	3301      	adds	r3, #1
 80055cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	bf0c      	ite	eq
 80055d4:	2301      	moveq	r3, #1
 80055d6:	2300      	movne	r3, #0
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <HAL_I2C_Init+0x2ba>
 80055de:	2301      	movs	r3, #1
 80055e0:	e022      	b.n	8005628 <HAL_I2C_Init+0x300>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10e      	bne.n	8005608 <HAL_I2C_Init+0x2e0>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	1e58      	subs	r0, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6859      	ldr	r1, [r3, #4]
 80055f2:	460b      	mov	r3, r1
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	440b      	add	r3, r1
 80055f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80055fc:	3301      	adds	r3, #1
 80055fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005606:	e00f      	b.n	8005628 <HAL_I2C_Init+0x300>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	1e58      	subs	r0, r3, #1
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6859      	ldr	r1, [r3, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	0099      	lsls	r1, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	fbb0 f3f3 	udiv	r3, r0, r3
 800561e:	3301      	adds	r3, #1
 8005620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	6809      	ldr	r1, [r1, #0]
 800562c:	4313      	orrs	r3, r2
 800562e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69da      	ldr	r2, [r3, #28]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005656:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6911      	ldr	r1, [r2, #16]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	68d2      	ldr	r2, [r2, #12]
 8005662:	4311      	orrs	r1, r2
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	430b      	orrs	r3, r1
 800566a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695a      	ldr	r2, [r3, #20]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop

080056c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056e0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d003      	beq.n	80056f8 <HAL_I2C_EV_IRQHandler+0x38>
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	2b40      	cmp	r3, #64	; 0x40
 80056f4:	f040 80c1 	bne.w	800587a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10d      	bne.n	800572e <HAL_I2C_EV_IRQHandler+0x6e>
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005718:	d003      	beq.n	8005722 <HAL_I2C_EV_IRQHandler+0x62>
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005720:	d101      	bne.n	8005726 <HAL_I2C_EV_IRQHandler+0x66>
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <HAL_I2C_EV_IRQHandler+0x68>
 8005726:	2300      	movs	r3, #0
 8005728:	2b01      	cmp	r3, #1
 800572a:	f000 8132 	beq.w	8005992 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00c      	beq.n	8005752 <HAL_I2C_EV_IRQHandler+0x92>
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	0a5b      	lsrs	r3, r3, #9
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d006      	beq.n	8005752 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f001 fc7b 	bl	8007040 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fd83 	bl	8006256 <I2C_Master_SB>
 8005750:	e092      	b.n	8005878 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	08db      	lsrs	r3, r3, #3
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d009      	beq.n	8005772 <HAL_I2C_EV_IRQHandler+0xb2>
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	0a5b      	lsrs	r3, r3, #9
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fdf9 	bl	8006362 <I2C_Master_ADD10>
 8005770:	e082      	b.n	8005878 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	085b      	lsrs	r3, r3, #1
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d009      	beq.n	8005792 <HAL_I2C_EV_IRQHandler+0xd2>
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	0a5b      	lsrs	r3, r3, #9
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fe13 	bl	80063b6 <I2C_Master_ADDR>
 8005790:	e072      	b.n	8005878 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	089b      	lsrs	r3, r3, #2
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d03b      	beq.n	8005816 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ac:	f000 80f3 	beq.w	8005996 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	09db      	lsrs	r3, r3, #7
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00f      	beq.n	80057dc <HAL_I2C_EV_IRQHandler+0x11c>
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	0a9b      	lsrs	r3, r3, #10
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d009      	beq.n	80057dc <HAL_I2C_EV_IRQHandler+0x11c>
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	089b      	lsrs	r3, r3, #2
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d103      	bne.n	80057dc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f9f3 	bl	8005bc0 <I2C_MasterTransmit_TXE>
 80057da:	e04d      	b.n	8005878 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	089b      	lsrs	r3, r3, #2
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80d6 	beq.w	8005996 <HAL_I2C_EV_IRQHandler+0x2d6>
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	0a5b      	lsrs	r3, r3, #9
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 80cf 	beq.w	8005996 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80057f8:	7bbb      	ldrb	r3, [r7, #14]
 80057fa:	2b21      	cmp	r3, #33	; 0x21
 80057fc:	d103      	bne.n	8005806 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fa7a 	bl	8005cf8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005804:	e0c7      	b.n	8005996 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005806:	7bfb      	ldrb	r3, [r7, #15]
 8005808:	2b40      	cmp	r3, #64	; 0x40
 800580a:	f040 80c4 	bne.w	8005996 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fae8 	bl	8005de4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005814:	e0bf      	b.n	8005996 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005824:	f000 80b7 	beq.w	8005996 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	099b      	lsrs	r3, r3, #6
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00f      	beq.n	8005854 <HAL_I2C_EV_IRQHandler+0x194>
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	0a9b      	lsrs	r3, r3, #10
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d009      	beq.n	8005854 <HAL_I2C_EV_IRQHandler+0x194>
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	089b      	lsrs	r3, r3, #2
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d103      	bne.n	8005854 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fb5d 	bl	8005f0c <I2C_MasterReceive_RXNE>
 8005852:	e011      	b.n	8005878 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	089b      	lsrs	r3, r3, #2
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 809a 	beq.w	8005996 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	0a5b      	lsrs	r3, r3, #9
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 8093 	beq.w	8005996 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fc06 	bl	8006082 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005876:	e08e      	b.n	8005996 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005878:	e08d      	b.n	8005996 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	2b00      	cmp	r3, #0
 8005880:	d004      	beq.n	800588c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	61fb      	str	r3, [r7, #28]
 800588a:	e007      	b.n	800589c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	085b      	lsrs	r3, r3, #1
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d012      	beq.n	80058ce <HAL_I2C_EV_IRQHandler+0x20e>
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	0a5b      	lsrs	r3, r3, #9
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00c      	beq.n	80058ce <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80058c4:	69b9      	ldr	r1, [r7, #24]
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 ffc4 	bl	8006854 <I2C_Slave_ADDR>
 80058cc:	e066      	b.n	800599c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	091b      	lsrs	r3, r3, #4
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d009      	beq.n	80058ee <HAL_I2C_EV_IRQHandler+0x22e>
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	0a5b      	lsrs	r3, r3, #9
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fffe 	bl	80068e8 <I2C_Slave_STOPF>
 80058ec:	e056      	b.n	800599c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80058ee:	7bbb      	ldrb	r3, [r7, #14]
 80058f0:	2b21      	cmp	r3, #33	; 0x21
 80058f2:	d002      	beq.n	80058fa <HAL_I2C_EV_IRQHandler+0x23a>
 80058f4:	7bbb      	ldrb	r3, [r7, #14]
 80058f6:	2b29      	cmp	r3, #41	; 0x29
 80058f8:	d125      	bne.n	8005946 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	09db      	lsrs	r3, r3, #7
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00f      	beq.n	8005926 <HAL_I2C_EV_IRQHandler+0x266>
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	0a9b      	lsrs	r3, r3, #10
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <HAL_I2C_EV_IRQHandler+0x266>
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	089b      	lsrs	r3, r3, #2
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d103      	bne.n	8005926 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 feda 	bl	80066d8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005924:	e039      	b.n	800599a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	089b      	lsrs	r3, r3, #2
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d033      	beq.n	800599a <HAL_I2C_EV_IRQHandler+0x2da>
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	0a5b      	lsrs	r3, r3, #9
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d02d      	beq.n	800599a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 ff07 	bl	8006752 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005944:	e029      	b.n	800599a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	099b      	lsrs	r3, r3, #6
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00f      	beq.n	8005972 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	0a9b      	lsrs	r3, r3, #10
 8005956:	f003 0301 	and.w	r3, r3, #1
 800595a:	2b00      	cmp	r3, #0
 800595c:	d009      	beq.n	8005972 <HAL_I2C_EV_IRQHandler+0x2b2>
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	089b      	lsrs	r3, r3, #2
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d103      	bne.n	8005972 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 ff12 	bl	8006794 <I2C_SlaveReceive_RXNE>
 8005970:	e014      	b.n	800599c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	089b      	lsrs	r3, r3, #2
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00e      	beq.n	800599c <HAL_I2C_EV_IRQHandler+0x2dc>
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	0a5b      	lsrs	r3, r3, #9
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d008      	beq.n	800599c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 ff40 	bl	8006810 <I2C_SlaveReceive_BTF>
 8005990:	e004      	b.n	800599c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005992:	bf00      	nop
 8005994:	e002      	b.n	800599c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005996:	bf00      	nop
 8005998:	e000      	b.n	800599c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800599a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800599c:	3720      	adds	r7, #32
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b08a      	sub	sp, #40	; 0x28
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80059ba:	2300      	movs	r3, #0
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059c4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	0a1b      	lsrs	r3, r3, #8
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00e      	beq.n	80059f0 <HAL_I2C_ER_IRQHandler+0x4e>
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	0a1b      	lsrs	r3, r3, #8
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d008      	beq.n	80059f0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	f043 0301 	orr.w	r3, r3, #1
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059ee:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	0a5b      	lsrs	r3, r3, #9
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00e      	beq.n	8005a1a <HAL_I2C_ER_IRQHandler+0x78>
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	0a1b      	lsrs	r3, r3, #8
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d008      	beq.n	8005a1a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	f043 0302 	orr.w	r3, r3, #2
 8005a0e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005a18:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	0a9b      	lsrs	r3, r3, #10
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d03f      	beq.n	8005aa6 <HAL_I2C_ER_IRQHandler+0x104>
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	0a1b      	lsrs	r3, r3, #8
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d039      	beq.n	8005aa6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005a32:	7efb      	ldrb	r3, [r7, #27]
 8005a34:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a44:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005a4c:	7ebb      	ldrb	r3, [r7, #26]
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	d112      	bne.n	8005a78 <HAL_I2C_ER_IRQHandler+0xd6>
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10f      	bne.n	8005a78 <HAL_I2C_ER_IRQHandler+0xd6>
 8005a58:	7cfb      	ldrb	r3, [r7, #19]
 8005a5a:	2b21      	cmp	r3, #33	; 0x21
 8005a5c:	d008      	beq.n	8005a70 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005a5e:	7cfb      	ldrb	r3, [r7, #19]
 8005a60:	2b29      	cmp	r3, #41	; 0x29
 8005a62:	d005      	beq.n	8005a70 <HAL_I2C_ER_IRQHandler+0xce>
 8005a64:	7cfb      	ldrb	r3, [r7, #19]
 8005a66:	2b28      	cmp	r3, #40	; 0x28
 8005a68:	d106      	bne.n	8005a78 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b21      	cmp	r3, #33	; 0x21
 8005a6e:	d103      	bne.n	8005a78 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f001 f869 	bl	8006b48 <I2C_Slave_AF>
 8005a76:	e016      	b.n	8005aa6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a80:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	f043 0304 	orr.w	r3, r3, #4
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005a8a:	7efb      	ldrb	r3, [r7, #27]
 8005a8c:	2b10      	cmp	r3, #16
 8005a8e:	d002      	beq.n	8005a96 <HAL_I2C_ER_IRQHandler+0xf4>
 8005a90:	7efb      	ldrb	r3, [r7, #27]
 8005a92:	2b40      	cmp	r3, #64	; 0x40
 8005a94:	d107      	bne.n	8005aa6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aa4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	0adb      	lsrs	r3, r3, #11
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00e      	beq.n	8005ad0 <HAL_I2C_ER_IRQHandler+0x12e>
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	0a1b      	lsrs	r3, r3, #8
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d008      	beq.n	8005ad0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	f043 0308 	orr.w	r3, r3, #8
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005ace:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d008      	beq.n	8005ae8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	431a      	orrs	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f001 f8a0 	bl	8006c28 <I2C_ITError>
  }
}
 8005ae8:	bf00      	nop
 8005aea:	3728      	adds	r7, #40	; 0x28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	70fb      	strb	r3, [r7, #3]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bd6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bdc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d150      	bne.n	8005c88 <I2C_MasterTransmit_TXE+0xc8>
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	2b21      	cmp	r3, #33	; 0x21
 8005bea:	d14d      	bne.n	8005c88 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	d01d      	beq.n	8005c2e <I2C_MasterTransmit_TXE+0x6e>
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2b20      	cmp	r3, #32
 8005bf6:	d01a      	beq.n	8005c2e <I2C_MasterTransmit_TXE+0x6e>
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bfe:	d016      	beq.n	8005c2e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c0e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2211      	movs	r2, #17
 8005c14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7ff ff62 	bl	8005af0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c2c:	e060      	b.n	8005cf0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c3c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c4c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b40      	cmp	r3, #64	; 0x40
 8005c66:	d107      	bne.n	8005c78 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7ff ff7d 	bl	8005b70 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c76:	e03b      	b.n	8005cf0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff ff35 	bl	8005af0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c86:	e033      	b.n	8005cf0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
 8005c8a:	2b21      	cmp	r3, #33	; 0x21
 8005c8c:	d005      	beq.n	8005c9a <I2C_MasterTransmit_TXE+0xda>
 8005c8e:	7bbb      	ldrb	r3, [r7, #14]
 8005c90:	2b40      	cmp	r3, #64	; 0x40
 8005c92:	d12d      	bne.n	8005cf0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	2b22      	cmp	r3, #34	; 0x22
 8005c98:	d12a      	bne.n	8005cf0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d108      	bne.n	8005cb6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cb2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005cb4:	e01c      	b.n	8005cf0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b40      	cmp	r3, #64	; 0x40
 8005cc0:	d103      	bne.n	8005cca <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f88e 	bl	8005de4 <I2C_MemoryTransmit_TXE_BTF>
}
 8005cc8:	e012      	b.n	8005cf0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	781a      	ldrb	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005cee:	e7ff      	b.n	8005cf0 <I2C_MasterTransmit_TXE+0x130>
 8005cf0:	bf00      	nop
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b21      	cmp	r3, #33	; 0x21
 8005d10:	d164      	bne.n	8005ddc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d012      	beq.n	8005d42 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	781a      	ldrb	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005d40:	e04c      	b.n	8005ddc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2b08      	cmp	r3, #8
 8005d46:	d01d      	beq.n	8005d84 <I2C_MasterTransmit_BTF+0x8c>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b20      	cmp	r3, #32
 8005d4c:	d01a      	beq.n	8005d84 <I2C_MasterTransmit_BTF+0x8c>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d54:	d016      	beq.n	8005d84 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d64:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2211      	movs	r2, #17
 8005d6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff feb7 	bl	8005af0 <HAL_I2C_MasterTxCpltCallback>
}
 8005d82:	e02b      	b.n	8005ddc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d92:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005da2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b40      	cmp	r3, #64	; 0x40
 8005dbc:	d107      	bne.n	8005dce <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f7ff fed2 	bl	8005b70 <HAL_I2C_MemTxCpltCallback>
}
 8005dcc:	e006      	b.n	8005ddc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7ff fe8a 	bl	8005af0 <HAL_I2C_MasterTxCpltCallback>
}
 8005ddc:	bf00      	nop
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d11d      	bne.n	8005e38 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d10b      	bne.n	8005e1c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e14:	1c9a      	adds	r2, r3, #2
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005e1a:	e073      	b.n	8005f04 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	121b      	asrs	r3, r3, #8
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005e36:	e065      	b.n	8005f04 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d10b      	bne.n	8005e58 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e50:	1c5a      	adds	r2, r3, #1
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005e56:	e055      	b.n	8005f04 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d151      	bne.n	8005f04 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
 8005e62:	2b22      	cmp	r3, #34	; 0x22
 8005e64:	d10d      	bne.n	8005e82 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e74:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005e80:	e040      	b.n	8005f04 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d015      	beq.n	8005eb8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	2b21      	cmp	r3, #33	; 0x21
 8005e90:	d112      	bne.n	8005eb8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	781a      	ldrb	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005eb6:	e025      	b.n	8005f04 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d120      	bne.n	8005f04 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
 8005ec4:	2b21      	cmp	r3, #33	; 0x21
 8005ec6:	d11d      	bne.n	8005f04 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ed6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ee6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7ff fe36 	bl	8005b70 <HAL_I2C_MemTxCpltCallback>
}
 8005f04:	bf00      	nop
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b22      	cmp	r3, #34	; 0x22
 8005f1e:	f040 80ac 	bne.w	800607a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d921      	bls.n	8005f74 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	691a      	ldr	r2, [r3, #16]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	2b03      	cmp	r3, #3
 8005f5e:	f040 808c 	bne.w	800607a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f70:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005f72:	e082      	b.n	800607a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d075      	beq.n	8006068 <I2C_MasterReceive_RXNE+0x15c>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d002      	beq.n	8005f88 <I2C_MasterReceive_RXNE+0x7c>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d16f      	bne.n	8006068 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f001 f827 	bl	8006fdc <I2C_WaitOnSTOPRequestThroughIT>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d142      	bne.n	800601a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fa2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fb2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691a      	ldr	r2, [r3, #16]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	1c5a      	adds	r2, r3, #1
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b40      	cmp	r3, #64	; 0x40
 8005fec:	d10a      	bne.n	8006004 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff fdc1 	bl	8005b84 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006002:	e03a      	b.n	800607a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2212      	movs	r2, #18
 8006010:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff fd76 	bl	8005b04 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006018:	e02f      	b.n	800607a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006028:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	691a      	ldr	r2, [r3, #16]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006046:	b29b      	uxth	r3, r3
 8006048:	3b01      	subs	r3, #1
 800604a:	b29a      	uxth	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff fd99 	bl	8005b98 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006066:	e008      	b.n	800607a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006076:	605a      	str	r2, [r3, #4]
}
 8006078:	e7ff      	b.n	800607a <I2C_MasterReceive_RXNE+0x16e>
 800607a:	bf00      	nop
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006094:	b29b      	uxth	r3, r3
 8006096:	2b04      	cmp	r3, #4
 8006098:	d11b      	bne.n	80060d2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	691a      	ldr	r2, [r3, #16]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	b2d2      	uxtb	r2, r2
 80060b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80060d0:	e0bd      	b.n	800624e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d129      	bne.n	8006130 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ea:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d00a      	beq.n	8006108 <I2C_MasterReceive_BTF+0x86>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d007      	beq.n	8006108 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006106:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691a      	ldr	r2, [r3, #16]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006112:	b2d2      	uxtb	r2, r2
 8006114:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006124:	b29b      	uxth	r3, r3
 8006126:	3b01      	subs	r3, #1
 8006128:	b29a      	uxth	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800612e:	e08e      	b.n	800624e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d176      	bne.n	8006228 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d002      	beq.n	8006146 <I2C_MasterReceive_BTF+0xc4>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2b10      	cmp	r3, #16
 8006144:	d108      	bne.n	8006158 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	e019      	b.n	800618c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b04      	cmp	r3, #4
 800615c:	d002      	beq.n	8006164 <I2C_MasterReceive_BTF+0xe2>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b02      	cmp	r3, #2
 8006162:	d108      	bne.n	8006176 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	e00a      	b.n	800618c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b10      	cmp	r3, #16
 800617a:	d007      	beq.n	800618c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800618a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691a      	ldr	r2, [r3, #16]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	691a      	ldr	r2, [r3, #16]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80061e6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b40      	cmp	r3, #64	; 0x40
 80061fa:	d10a      	bne.n	8006212 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7ff fcba 	bl	8005b84 <HAL_I2C_MemRxCpltCallback>
}
 8006210:	e01d      	b.n	800624e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2212      	movs	r2, #18
 800621e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff fc6f 	bl	8005b04 <HAL_I2C_MasterRxCpltCallback>
}
 8006226:	e012      	b.n	800624e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691a      	ldr	r2, [r3, #16]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006244:	b29b      	uxth	r3, r3
 8006246:	3b01      	subs	r3, #1
 8006248:	b29a      	uxth	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800624e:	bf00      	nop
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b40      	cmp	r3, #64	; 0x40
 8006268:	d117      	bne.n	800629a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800626e:	2b00      	cmp	r3, #0
 8006270:	d109      	bne.n	8006286 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006276:	b2db      	uxtb	r3, r3
 8006278:	461a      	mov	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006282:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006284:	e067      	b.n	8006356 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628a:	b2db      	uxtb	r3, r3
 800628c:	f043 0301 	orr.w	r3, r3, #1
 8006290:	b2da      	uxtb	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	611a      	str	r2, [r3, #16]
}
 8006298:	e05d      	b.n	8006356 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062a2:	d133      	bne.n	800630c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b21      	cmp	r3, #33	; 0x21
 80062ae:	d109      	bne.n	80062c4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	461a      	mov	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062c0:	611a      	str	r2, [r3, #16]
 80062c2:	e008      	b.n	80062d6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	f043 0301 	orr.w	r3, r3, #1
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d004      	beq.n	80062e8 <I2C_Master_SB+0x92>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d108      	bne.n	80062fa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d032      	beq.n	8006356 <I2C_Master_SB+0x100>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d02d      	beq.n	8006356 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006308:	605a      	str	r2, [r3, #4]
}
 800630a:	e024      	b.n	8006356 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10e      	bne.n	8006332 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006318:	b29b      	uxth	r3, r3
 800631a:	11db      	asrs	r3, r3, #7
 800631c:	b2db      	uxtb	r3, r3
 800631e:	f003 0306 	and.w	r3, r3, #6
 8006322:	b2db      	uxtb	r3, r3
 8006324:	f063 030f 	orn	r3, r3, #15
 8006328:	b2da      	uxtb	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	611a      	str	r2, [r3, #16]
}
 8006330:	e011      	b.n	8006356 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006336:	2b01      	cmp	r3, #1
 8006338:	d10d      	bne.n	8006356 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633e:	b29b      	uxth	r3, r3
 8006340:	11db      	asrs	r3, r3, #7
 8006342:	b2db      	uxtb	r3, r3
 8006344:	f003 0306 	and.w	r3, r3, #6
 8006348:	b2db      	uxtb	r3, r3
 800634a:	f063 030e 	orn	r3, r3, #14
 800634e:	b2da      	uxtb	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	611a      	str	r2, [r3, #16]
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006362:	b480      	push	{r7}
 8006364:	b083      	sub	sp, #12
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636e:	b2da      	uxtb	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637a:	2b00      	cmp	r3, #0
 800637c:	d004      	beq.n	8006388 <I2C_Master_ADD10+0x26>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006384:	2b00      	cmp	r3, #0
 8006386:	d108      	bne.n	800639a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00c      	beq.n	80063aa <I2C_Master_ADD10+0x48>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006396:	2b00      	cmp	r3, #0
 8006398:	d007      	beq.n	80063aa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063a8:	605a      	str	r2, [r3, #4]
  }
}
 80063aa:	bf00      	nop
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b091      	sub	sp, #68	; 0x44
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	2b22      	cmp	r3, #34	; 0x22
 80063de:	f040 8169 	bne.w	80066b4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10f      	bne.n	800640a <I2C_Master_ADDR+0x54>
 80063ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80063ee:	2b40      	cmp	r3, #64	; 0x40
 80063f0:	d10b      	bne.n	800640a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063f2:	2300      	movs	r3, #0
 80063f4:	633b      	str	r3, [r7, #48]	; 0x30
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	633b      	str	r3, [r7, #48]	; 0x30
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	633b      	str	r3, [r7, #48]	; 0x30
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	e160      	b.n	80066cc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800640e:	2b00      	cmp	r3, #0
 8006410:	d11d      	bne.n	800644e <I2C_Master_ADDR+0x98>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800641a:	d118      	bne.n	800644e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800641c:	2300      	movs	r3, #0
 800641e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006430:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006440:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	651a      	str	r2, [r3, #80]	; 0x50
 800644c:	e13e      	b.n	80066cc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006452:	b29b      	uxth	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d113      	bne.n	8006480 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006458:	2300      	movs	r3, #0
 800645a:	62bb      	str	r3, [r7, #40]	; 0x28
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	62bb      	str	r3, [r7, #40]	; 0x28
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	62bb      	str	r3, [r7, #40]	; 0x28
 800646c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	e115      	b.n	80066ac <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006484:	b29b      	uxth	r3, r3
 8006486:	2b01      	cmp	r3, #1
 8006488:	f040 808a 	bne.w	80065a0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800648c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006492:	d137      	bne.n	8006504 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064a2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064b2:	d113      	bne.n	80064dc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064c4:	2300      	movs	r3, #0
 80064c6:	627b      	str	r3, [r7, #36]	; 0x24
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	e0e7      	b.n	80066ac <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064dc:	2300      	movs	r3, #0
 80064de:	623b      	str	r3, [r7, #32]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	623b      	str	r3, [r7, #32]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	623b      	str	r3, [r7, #32]
 80064f0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	e0d3      	b.n	80066ac <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006506:	2b08      	cmp	r3, #8
 8006508:	d02e      	beq.n	8006568 <I2C_Master_ADDR+0x1b2>
 800650a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650c:	2b20      	cmp	r3, #32
 800650e:	d02b      	beq.n	8006568 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006512:	2b12      	cmp	r3, #18
 8006514:	d102      	bne.n	800651c <I2C_Master_ADDR+0x166>
 8006516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006518:	2b01      	cmp	r3, #1
 800651a:	d125      	bne.n	8006568 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800651c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800651e:	2b04      	cmp	r3, #4
 8006520:	d00e      	beq.n	8006540 <I2C_Master_ADDR+0x18a>
 8006522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006524:	2b02      	cmp	r3, #2
 8006526:	d00b      	beq.n	8006540 <I2C_Master_ADDR+0x18a>
 8006528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652a:	2b10      	cmp	r3, #16
 800652c:	d008      	beq.n	8006540 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	e007      	b.n	8006550 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800654e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006550:	2300      	movs	r3, #0
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	61fb      	str	r3, [r7, #28]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	61fb      	str	r3, [r7, #28]
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	e0a1      	b.n	80066ac <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006576:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006578:	2300      	movs	r3, #0
 800657a:	61bb      	str	r3, [r7, #24]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	61bb      	str	r3, [r7, #24]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	61bb      	str	r3, [r7, #24]
 800658c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	e085      	b.n	80066ac <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d14d      	bne.n	8006646 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80065aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ac:	2b04      	cmp	r3, #4
 80065ae:	d016      	beq.n	80065de <I2C_Master_ADDR+0x228>
 80065b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d013      	beq.n	80065de <I2C_Master_ADDR+0x228>
 80065b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b8:	2b10      	cmp	r3, #16
 80065ba:	d010      	beq.n	80065de <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ca:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	e007      	b.n	80065ee <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065ec:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065fc:	d117      	bne.n	800662e <I2C_Master_ADDR+0x278>
 80065fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006600:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006604:	d00b      	beq.n	800661e <I2C_Master_ADDR+0x268>
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	2b01      	cmp	r3, #1
 800660a:	d008      	beq.n	800661e <I2C_Master_ADDR+0x268>
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	2b08      	cmp	r3, #8
 8006610:	d005      	beq.n	800661e <I2C_Master_ADDR+0x268>
 8006612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006614:	2b10      	cmp	r3, #16
 8006616:	d002      	beq.n	800661e <I2C_Master_ADDR+0x268>
 8006618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661a:	2b20      	cmp	r3, #32
 800661c:	d107      	bne.n	800662e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800662c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800662e:	2300      	movs	r3, #0
 8006630:	617b      	str	r3, [r7, #20]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	617b      	str	r3, [r7, #20]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	617b      	str	r3, [r7, #20]
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	e032      	b.n	80066ac <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006654:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006664:	d117      	bne.n	8006696 <I2C_Master_ADDR+0x2e0>
 8006666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006668:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800666c:	d00b      	beq.n	8006686 <I2C_Master_ADDR+0x2d0>
 800666e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006670:	2b01      	cmp	r3, #1
 8006672:	d008      	beq.n	8006686 <I2C_Master_ADDR+0x2d0>
 8006674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006676:	2b08      	cmp	r3, #8
 8006678:	d005      	beq.n	8006686 <I2C_Master_ADDR+0x2d0>
 800667a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667c:	2b10      	cmp	r3, #16
 800667e:	d002      	beq.n	8006686 <I2C_Master_ADDR+0x2d0>
 8006680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006682:	2b20      	cmp	r3, #32
 8006684:	d107      	bne.n	8006696 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006694:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006696:	2300      	movs	r3, #0
 8006698:	613b      	str	r3, [r7, #16]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	613b      	str	r3, [r7, #16]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	613b      	str	r3, [r7, #16]
 80066aa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80066b2:	e00b      	b.n	80066cc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066b4:	2300      	movs	r3, #0
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	68fb      	ldr	r3, [r7, #12]
}
 80066ca:	e7ff      	b.n	80066cc <I2C_Master_ADDR+0x316>
 80066cc:	bf00      	nop
 80066ce:	3744      	adds	r7, #68	; 0x44
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d02b      	beq.n	800674a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	781a      	ldrb	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670c:	b29b      	uxth	r3, r3
 800670e:	3b01      	subs	r3, #1
 8006710:	b29a      	uxth	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671a:	b29b      	uxth	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	d114      	bne.n	800674a <I2C_SlaveTransmit_TXE+0x72>
 8006720:	7bfb      	ldrb	r3, [r7, #15]
 8006722:	2b29      	cmp	r3, #41	; 0x29
 8006724:	d111      	bne.n	800674a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006734:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2221      	movs	r2, #33	; 0x21
 800673a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2228      	movs	r2, #40	; 0x28
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7ff f9e7 	bl	8005b18 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800674a:	bf00      	nop
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006752:	b480      	push	{r7}
 8006754:	b083      	sub	sp, #12
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800675e:	b29b      	uxth	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d011      	beq.n	8006788 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	781a      	ldrb	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800677e:	b29b      	uxth	r3, r3
 8006780:	3b01      	subs	r3, #1
 8006782:	b29a      	uxth	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d02c      	beq.n	8006808 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	691a      	ldr	r2, [r3, #16]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	3b01      	subs	r3, #1
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d8:	b29b      	uxth	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d114      	bne.n	8006808 <I2C_SlaveReceive_RXNE+0x74>
 80067de:	7bfb      	ldrb	r3, [r7, #15]
 80067e0:	2b2a      	cmp	r3, #42	; 0x2a
 80067e2:	d111      	bne.n	8006808 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067f2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2222      	movs	r2, #34	; 0x22
 80067f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2228      	movs	r2, #40	; 0x28
 80067fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7ff f992 	bl	8005b2c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006808:	bf00      	nop
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d012      	beq.n	8006848 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	691a      	ldr	r2, [r3, #16]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683e:	b29b      	uxth	r3, r3
 8006840:	3b01      	subs	r3, #1
 8006842:	b29a      	uxth	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800685e:	2300      	movs	r3, #0
 8006860:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006868:	b2db      	uxtb	r3, r3
 800686a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800686e:	2b28      	cmp	r3, #40	; 0x28
 8006870:	d127      	bne.n	80068c2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006880:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	089b      	lsrs	r3, r3, #2
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800688e:	2301      	movs	r3, #1
 8006890:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	09db      	lsrs	r3, r3, #7
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d103      	bne.n	80068a6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	81bb      	strh	r3, [r7, #12]
 80068a4:	e002      	b.n	80068ac <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80068b4:	89ba      	ldrh	r2, [r7, #12]
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7ff f940 	bl	8005b40 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80068c0:	e00e      	b.n	80068e0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068c2:	2300      	movs	r3, #0
 80068c4:	60bb      	str	r3, [r7, #8]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	60bb      	str	r3, [r7, #8]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	60bb      	str	r3, [r7, #8]
 80068d6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80068e0:	bf00      	nop
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006906:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006908:	2300      	movs	r3, #0
 800690a:	60bb      	str	r3, [r7, #8]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	60bb      	str	r3, [r7, #8]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f042 0201 	orr.w	r2, r2, #1
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006934:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006944:	d172      	bne.n	8006a2c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006946:	7bfb      	ldrb	r3, [r7, #15]
 8006948:	2b22      	cmp	r3, #34	; 0x22
 800694a:	d002      	beq.n	8006952 <I2C_Slave_STOPF+0x6a>
 800694c:	7bfb      	ldrb	r3, [r7, #15]
 800694e:	2b2a      	cmp	r3, #42	; 0x2a
 8006950:	d135      	bne.n	80069be <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	b29a      	uxth	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006964:	b29b      	uxth	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d005      	beq.n	8006976 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	f043 0204 	orr.w	r2, r3, #4
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006984:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698a:	4618      	mov	r0, r3
 800698c:	f7fe f8b6 	bl	8004afc <HAL_DMA_GetState>
 8006990:	4603      	mov	r3, r0
 8006992:	2b01      	cmp	r3, #1
 8006994:	d049      	beq.n	8006a2a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699a:	4a69      	ldr	r2, [pc, #420]	; (8006b40 <I2C_Slave_STOPF+0x258>)
 800699c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fd fefe 	bl	80047a4 <HAL_DMA_Abort_IT>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d03d      	beq.n	8006a2a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069b8:	4610      	mov	r0, r2
 80069ba:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069bc:	e035      	b.n	8006a2a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d005      	beq.n	80069e2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	f043 0204 	orr.w	r2, r3, #4
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fe f880 	bl	8004afc <HAL_DMA_GetState>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d014      	beq.n	8006a2c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a06:	4a4e      	ldr	r2, [pc, #312]	; (8006b40 <I2C_Slave_STOPF+0x258>)
 8006a08:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fd fec8 	bl	80047a4 <HAL_DMA_Abort_IT>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d008      	beq.n	8006a2c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a24:	4610      	mov	r0, r2
 8006a26:	4798      	blx	r3
 8006a28:	e000      	b.n	8006a2c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a2a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d03e      	beq.n	8006ab4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b04      	cmp	r3, #4
 8006a42:	d112      	bne.n	8006a6a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	691a      	ldr	r2, [r3, #16]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	b2d2      	uxtb	r2, r2
 8006a50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	3b01      	subs	r3, #1
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a74:	2b40      	cmp	r3, #64	; 0x40
 8006a76:	d112      	bne.n	8006a9e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	691a      	ldr	r2, [r3, #16]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	3b01      	subs	r3, #1
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d005      	beq.n	8006ab4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aac:	f043 0204 	orr.w	r2, r3, #4
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f8b3 	bl	8006c28 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006ac2:	e039      	b.n	8006b38 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
 8006ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ac8:	d109      	bne.n	8006ade <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2228      	movs	r2, #40	; 0x28
 8006ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f7ff f827 	bl	8005b2c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b28      	cmp	r3, #40	; 0x28
 8006ae8:	d111      	bne.n	8006b0e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a15      	ldr	r2, [pc, #84]	; (8006b44 <I2C_Slave_STOPF+0x25c>)
 8006aee:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7ff f828 	bl	8005b5c <HAL_I2C_ListenCpltCallback>
}
 8006b0c:	e014      	b.n	8006b38 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b12:	2b22      	cmp	r3, #34	; 0x22
 8006b14:	d002      	beq.n	8006b1c <I2C_Slave_STOPF+0x234>
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
 8006b18:	2b22      	cmp	r3, #34	; 0x22
 8006b1a:	d10d      	bne.n	8006b38 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2220      	movs	r2, #32
 8006b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f7fe fffa 	bl	8005b2c <HAL_I2C_SlaveRxCpltCallback>
}
 8006b38:	bf00      	nop
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	08006e8d 	.word	0x08006e8d
 8006b44:	ffff0000 	.word	0xffff0000

08006b48 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b56:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2b08      	cmp	r3, #8
 8006b62:	d002      	beq.n	8006b6a <I2C_Slave_AF+0x22>
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	2b20      	cmp	r3, #32
 8006b68:	d129      	bne.n	8006bbe <I2C_Slave_AF+0x76>
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	2b28      	cmp	r3, #40	; 0x28
 8006b6e:	d126      	bne.n	8006bbe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a2c      	ldr	r2, [pc, #176]	; (8006c24 <I2C_Slave_AF+0xdc>)
 8006b74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006b84:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b8e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b9e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7fe ffd0 	bl	8005b5c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006bbc:	e02e      	b.n	8006c1c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	2b21      	cmp	r3, #33	; 0x21
 8006bc2:	d126      	bne.n	8006c12 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a17      	ldr	r2, [pc, #92]	; (8006c24 <I2C_Slave_AF+0xdc>)
 8006bc8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2221      	movs	r2, #33	; 0x21
 8006bce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bee:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006bf8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c08:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7fe ff84 	bl	8005b18 <HAL_I2C_SlaveTxCpltCallback>
}
 8006c10:	e004      	b.n	8006c1c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c1a:	615a      	str	r2, [r3, #20]
}
 8006c1c:	bf00      	nop
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	ffff0000 	.word	0xffff0000

08006c28 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c36:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c3e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006c40:	7bbb      	ldrb	r3, [r7, #14]
 8006c42:	2b10      	cmp	r3, #16
 8006c44:	d002      	beq.n	8006c4c <I2C_ITError+0x24>
 8006c46:	7bbb      	ldrb	r3, [r7, #14]
 8006c48:	2b40      	cmp	r3, #64	; 0x40
 8006c4a:	d10a      	bne.n	8006c62 <I2C_ITError+0x3a>
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
 8006c4e:	2b22      	cmp	r3, #34	; 0x22
 8006c50:	d107      	bne.n	8006c62 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c60:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c68:	2b28      	cmp	r3, #40	; 0x28
 8006c6a:	d107      	bne.n	8006c7c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2228      	movs	r2, #40	; 0x28
 8006c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c7a:	e015      	b.n	8006ca8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c8a:	d00a      	beq.n	8006ca2 <I2C_ITError+0x7a>
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	2b60      	cmp	r3, #96	; 0x60
 8006c90:	d007      	beq.n	8006ca2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2220      	movs	r2, #32
 8006c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cb6:	d162      	bne.n	8006d7e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cc6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d020      	beq.n	8006d18 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cda:	4a6a      	ldr	r2, [pc, #424]	; (8006e84 <I2C_ITError+0x25c>)
 8006cdc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fd fd5e 	bl	80047a4 <HAL_DMA_Abort_IT>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 8089 	beq.w	8006e02 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0201 	bic.w	r2, r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2220      	movs	r2, #32
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d12:	4610      	mov	r0, r2
 8006d14:	4798      	blx	r3
 8006d16:	e074      	b.n	8006e02 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1c:	4a59      	ldr	r2, [pc, #356]	; (8006e84 <I2C_ITError+0x25c>)
 8006d1e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fd fd3d 	bl	80047a4 <HAL_DMA_Abort_IT>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d068      	beq.n	8006e02 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3a:	2b40      	cmp	r3, #64	; 0x40
 8006d3c:	d10b      	bne.n	8006d56 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	691a      	ldr	r2, [r3, #16]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	b2d2      	uxtb	r2, r2
 8006d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 0201 	bic.w	r2, r2, #1
 8006d64:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2220      	movs	r2, #32
 8006d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d78:	4610      	mov	r0, r2
 8006d7a:	4798      	blx	r3
 8006d7c:	e041      	b.n	8006e02 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b60      	cmp	r3, #96	; 0x60
 8006d88:	d125      	bne.n	8006dd6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da2:	2b40      	cmp	r3, #64	; 0x40
 8006da4:	d10b      	bne.n	8006dbe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	691a      	ldr	r2, [r3, #16]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	b2d2      	uxtb	r2, r2
 8006db2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 0201 	bic.w	r2, r2, #1
 8006dcc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7fe feec 	bl	8005bac <HAL_I2C_AbortCpltCallback>
 8006dd4:	e015      	b.n	8006e02 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de0:	2b40      	cmp	r3, #64	; 0x40
 8006de2:	d10b      	bne.n	8006dfc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	691a      	ldr	r2, [r3, #16]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dee:	b2d2      	uxtb	r2, r2
 8006df0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7fe fecb 	bl	8005b98 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e06:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10e      	bne.n	8006e30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d109      	bne.n	8006e30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d104      	bne.n	8006e30 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d007      	beq.n	8006e40 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e3e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e46:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4c:	f003 0304 	and.w	r3, r3, #4
 8006e50:	2b04      	cmp	r3, #4
 8006e52:	d113      	bne.n	8006e7c <I2C_ITError+0x254>
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
 8006e56:	2b28      	cmp	r3, #40	; 0x28
 8006e58:	d110      	bne.n	8006e7c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a0a      	ldr	r2, [pc, #40]	; (8006e88 <I2C_ITError+0x260>)
 8006e5e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2220      	movs	r2, #32
 8006e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7fe fe70 	bl	8005b5c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e7c:	bf00      	nop
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	08006e8d 	.word	0x08006e8d
 8006e88:	ffff0000 	.word	0xffff0000

08006e8c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006ea6:	4b4b      	ldr	r3, [pc, #300]	; (8006fd4 <I2C_DMAAbort+0x148>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	08db      	lsrs	r3, r3, #3
 8006eac:	4a4a      	ldr	r2, [pc, #296]	; (8006fd8 <I2C_DMAAbort+0x14c>)
 8006eae:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb2:	0a1a      	lsrs	r2, r3, #8
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4413      	add	r3, r2
 8006eba:	00da      	lsls	r2, r3, #3
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d106      	bne.n	8006ed4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	f043 0220 	orr.w	r2, r3, #32
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006ed2:	e00a      	b.n	8006eea <I2C_DMAAbort+0x5e>
    }
    count--;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee8:	d0ea      	beq.n	8006ec0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f06:	2200      	movs	r2, #0
 8006f08:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f18:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d003      	beq.n	8006f30 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d003      	beq.n	8006f40 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f022 0201 	bic.w	r2, r2, #1
 8006f4e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b60      	cmp	r3, #96	; 0x60
 8006f5a:	d10e      	bne.n	8006f7a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006f72:	6978      	ldr	r0, [r7, #20]
 8006f74:	f7fe fe1a 	bl	8005bac <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f78:	e027      	b.n	8006fca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f7a:	7cfb      	ldrb	r3, [r7, #19]
 8006f7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f80:	2b28      	cmp	r3, #40	; 0x28
 8006f82:	d117      	bne.n	8006fb4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f042 0201 	orr.w	r2, r2, #1
 8006f92:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fa2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2228      	movs	r2, #40	; 0x28
 8006fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006fb2:	e007      	b.n	8006fc4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006fc4:	6978      	ldr	r0, [r7, #20]
 8006fc6:	f7fe fde7 	bl	8005b98 <HAL_I2C_ErrorCallback>
}
 8006fca:	bf00      	nop
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	20000000 	.word	0x20000000
 8006fd8:	14f8b589 	.word	0x14f8b589

08006fdc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006fe8:	4b13      	ldr	r3, [pc, #76]	; (8007038 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	08db      	lsrs	r3, r3, #3
 8006fee:	4a13      	ldr	r2, [pc, #76]	; (800703c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff4:	0a1a      	lsrs	r2, r3, #8
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3b01      	subs	r3, #1
 8007002:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d107      	bne.n	800701a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	f043 0220 	orr.w	r2, r3, #32
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e008      	b.n	800702c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007028:	d0e9      	beq.n	8006ffe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	20000000 	.word	0x20000000
 800703c:	14f8b589 	.word	0x14f8b589

08007040 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007050:	d103      	bne.n	800705a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007058:	e007      	b.n	800706a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007062:	d102      	bne.n	800706a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2208      	movs	r2, #8
 8007068:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800706a:	bf00      	nop
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
	...

08007078 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007082:	2300      	movs	r3, #0
 8007084:	603b      	str	r3, [r7, #0]
 8007086:	4b20      	ldr	r3, [pc, #128]	; (8007108 <HAL_PWREx_EnableOverDrive+0x90>)
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	4a1f      	ldr	r2, [pc, #124]	; (8007108 <HAL_PWREx_EnableOverDrive+0x90>)
 800708c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007090:	6413      	str	r3, [r2, #64]	; 0x40
 8007092:	4b1d      	ldr	r3, [pc, #116]	; (8007108 <HAL_PWREx_EnableOverDrive+0x90>)
 8007094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800709a:	603b      	str	r3, [r7, #0]
 800709c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800709e:	4b1b      	ldr	r3, [pc, #108]	; (800710c <HAL_PWREx_EnableOverDrive+0x94>)
 80070a0:	2201      	movs	r2, #1
 80070a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80070a4:	f7fb f94e 	bl	8002344 <HAL_GetTick>
 80070a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80070aa:	e009      	b.n	80070c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80070ac:	f7fb f94a 	bl	8002344 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070ba:	d901      	bls.n	80070c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e01f      	b.n	8007100 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80070c0:	4b13      	ldr	r3, [pc, #76]	; (8007110 <HAL_PWREx_EnableOverDrive+0x98>)
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070cc:	d1ee      	bne.n	80070ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80070ce:	4b11      	ldr	r3, [pc, #68]	; (8007114 <HAL_PWREx_EnableOverDrive+0x9c>)
 80070d0:	2201      	movs	r2, #1
 80070d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80070d4:	f7fb f936 	bl	8002344 <HAL_GetTick>
 80070d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80070da:	e009      	b.n	80070f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80070dc:	f7fb f932 	bl	8002344 <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070ea:	d901      	bls.n	80070f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e007      	b.n	8007100 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80070f0:	4b07      	ldr	r3, [pc, #28]	; (8007110 <HAL_PWREx_EnableOverDrive+0x98>)
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070fc:	d1ee      	bne.n	80070dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	40023800 	.word	0x40023800
 800710c:	420e0040 	.word	0x420e0040
 8007110:	40007000 	.word	0x40007000
 8007114:	420e0044 	.word	0x420e0044

08007118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e18c      	b.n	8007446 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <HAL_RCC_ClockConfig+0x24>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b0f      	cmp	r3, #15
 800713a:	d904      	bls.n	8007146 <HAL_RCC_ClockConfig+0x2e>
 800713c:	f240 215a 	movw	r1, #602	; 0x25a
 8007140:	4887      	ldr	r0, [pc, #540]	; (8007360 <HAL_RCC_ClockConfig+0x248>)
 8007142:	f7fa fd20 	bl	8001b86 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d031      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x98>
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d02e      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x98>
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2b02      	cmp	r3, #2
 8007156:	d02b      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x98>
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	2b03      	cmp	r3, #3
 800715c:	d028      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x98>
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b04      	cmp	r3, #4
 8007162:	d025      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x98>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	2b05      	cmp	r3, #5
 8007168:	d022      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x98>
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	2b06      	cmp	r3, #6
 800716e:	d01f      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x98>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b07      	cmp	r3, #7
 8007174:	d01c      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x98>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b08      	cmp	r3, #8
 800717a:	d019      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x98>
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	2b09      	cmp	r3, #9
 8007180:	d016      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x98>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b0a      	cmp	r3, #10
 8007186:	d013      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x98>
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	2b0b      	cmp	r3, #11
 800718c:	d010      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x98>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b0c      	cmp	r3, #12
 8007192:	d00d      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x98>
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	2b0d      	cmp	r3, #13
 8007198:	d00a      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x98>
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b0e      	cmp	r3, #14
 800719e:	d007      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x98>
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	2b0f      	cmp	r3, #15
 80071a4:	d004      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x98>
 80071a6:	f240 215b 	movw	r1, #603	; 0x25b
 80071aa:	486d      	ldr	r0, [pc, #436]	; (8007360 <HAL_RCC_ClockConfig+0x248>)
 80071ac:	f7fa fceb 	bl	8001b86 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071b0:	4b6c      	ldr	r3, [pc, #432]	; (8007364 <HAL_RCC_ClockConfig+0x24c>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 030f 	and.w	r3, r3, #15
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d90c      	bls.n	80071d8 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071be:	4b69      	ldr	r3, [pc, #420]	; (8007364 <HAL_RCC_ClockConfig+0x24c>)
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071c6:	4b67      	ldr	r3, [pc, #412]	; (8007364 <HAL_RCC_ClockConfig+0x24c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d001      	beq.n	80071d8 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e136      	b.n	8007446 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0302 	and.w	r3, r3, #2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d049      	beq.n	8007278 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0304 	and.w	r3, r3, #4
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d005      	beq.n	80071fc <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071f0:	4b5d      	ldr	r3, [pc, #372]	; (8007368 <HAL_RCC_ClockConfig+0x250>)
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	4a5c      	ldr	r2, [pc, #368]	; (8007368 <HAL_RCC_ClockConfig+0x250>)
 80071f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80071fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0308 	and.w	r3, r3, #8
 8007204:	2b00      	cmp	r3, #0
 8007206:	d005      	beq.n	8007214 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007208:	4b57      	ldr	r3, [pc, #348]	; (8007368 <HAL_RCC_ClockConfig+0x250>)
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	4a56      	ldr	r2, [pc, #344]	; (8007368 <HAL_RCC_ClockConfig+0x250>)
 800720e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007212:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d024      	beq.n	8007266 <HAL_RCC_ClockConfig+0x14e>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	2b80      	cmp	r3, #128	; 0x80
 8007222:	d020      	beq.n	8007266 <HAL_RCC_ClockConfig+0x14e>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	2b90      	cmp	r3, #144	; 0x90
 800722a:	d01c      	beq.n	8007266 <HAL_RCC_ClockConfig+0x14e>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	2ba0      	cmp	r3, #160	; 0xa0
 8007232:	d018      	beq.n	8007266 <HAL_RCC_ClockConfig+0x14e>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	2bb0      	cmp	r3, #176	; 0xb0
 800723a:	d014      	beq.n	8007266 <HAL_RCC_ClockConfig+0x14e>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	2bc0      	cmp	r3, #192	; 0xc0
 8007242:	d010      	beq.n	8007266 <HAL_RCC_ClockConfig+0x14e>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	2bd0      	cmp	r3, #208	; 0xd0
 800724a:	d00c      	beq.n	8007266 <HAL_RCC_ClockConfig+0x14e>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	2be0      	cmp	r3, #224	; 0xe0
 8007252:	d008      	beq.n	8007266 <HAL_RCC_ClockConfig+0x14e>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	2bf0      	cmp	r3, #240	; 0xf0
 800725a:	d004      	beq.n	8007266 <HAL_RCC_ClockConfig+0x14e>
 800725c:	f240 217e 	movw	r1, #638	; 0x27e
 8007260:	483f      	ldr	r0, [pc, #252]	; (8007360 <HAL_RCC_ClockConfig+0x248>)
 8007262:	f7fa fc90 	bl	8001b86 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007266:	4b40      	ldr	r3, [pc, #256]	; (8007368 <HAL_RCC_ClockConfig+0x250>)
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	493d      	ldr	r1, [pc, #244]	; (8007368 <HAL_RCC_ClockConfig+0x250>)
 8007274:	4313      	orrs	r3, r2
 8007276:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	d059      	beq.n	8007338 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d010      	beq.n	80072ae <HAL_RCC_ClockConfig+0x196>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d00c      	beq.n	80072ae <HAL_RCC_ClockConfig+0x196>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	2b02      	cmp	r3, #2
 800729a:	d008      	beq.n	80072ae <HAL_RCC_ClockConfig+0x196>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	2b03      	cmp	r3, #3
 80072a2:	d004      	beq.n	80072ae <HAL_RCC_ClockConfig+0x196>
 80072a4:	f240 2185 	movw	r1, #645	; 0x285
 80072a8:	482d      	ldr	r0, [pc, #180]	; (8007360 <HAL_RCC_ClockConfig+0x248>)
 80072aa:	f7fa fc6c 	bl	8001b86 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d107      	bne.n	80072c6 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072b6:	4b2c      	ldr	r3, [pc, #176]	; (8007368 <HAL_RCC_ClockConfig+0x250>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d119      	bne.n	80072f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e0bf      	b.n	8007446 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d003      	beq.n	80072d6 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d107      	bne.n	80072e6 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072d6:	4b24      	ldr	r3, [pc, #144]	; (8007368 <HAL_RCC_ClockConfig+0x250>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d109      	bne.n	80072f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e0af      	b.n	8007446 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072e6:	4b20      	ldr	r3, [pc, #128]	; (8007368 <HAL_RCC_ClockConfig+0x250>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e0a7      	b.n	8007446 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072f6:	4b1c      	ldr	r3, [pc, #112]	; (8007368 <HAL_RCC_ClockConfig+0x250>)
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f023 0203 	bic.w	r2, r3, #3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	4919      	ldr	r1, [pc, #100]	; (8007368 <HAL_RCC_ClockConfig+0x250>)
 8007304:	4313      	orrs	r3, r2
 8007306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007308:	f7fb f81c 	bl	8002344 <HAL_GetTick>
 800730c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800730e:	e00a      	b.n	8007326 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007310:	f7fb f818 	bl	8002344 <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	f241 3288 	movw	r2, #5000	; 0x1388
 800731e:	4293      	cmp	r3, r2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e08f      	b.n	8007446 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007326:	4b10      	ldr	r3, [pc, #64]	; (8007368 <HAL_RCC_ClockConfig+0x250>)
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	f003 020c 	and.w	r2, r3, #12
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	429a      	cmp	r2, r3
 8007336:	d1eb      	bne.n	8007310 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007338:	4b0a      	ldr	r3, [pc, #40]	; (8007364 <HAL_RCC_ClockConfig+0x24c>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	429a      	cmp	r2, r3
 8007344:	d212      	bcs.n	800736c <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007346:	4b07      	ldr	r3, [pc, #28]	; (8007364 <HAL_RCC_ClockConfig+0x24c>)
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	b2d2      	uxtb	r2, r2
 800734c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800734e:	4b05      	ldr	r3, [pc, #20]	; (8007364 <HAL_RCC_ClockConfig+0x24c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 030f 	and.w	r3, r3, #15
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	429a      	cmp	r2, r3
 800735a:	d007      	beq.n	800736c <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e072      	b.n	8007446 <HAL_RCC_ClockConfig+0x32e>
 8007360:	0800bf78 	.word	0x0800bf78
 8007364:	40023c00 	.word	0x40023c00
 8007368:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0304 	and.w	r3, r3, #4
 8007374:	2b00      	cmp	r3, #0
 8007376:	d025      	beq.n	80073c4 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d018      	beq.n	80073b2 <HAL_RCC_ClockConfig+0x29a>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007388:	d013      	beq.n	80073b2 <HAL_RCC_ClockConfig+0x29a>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007392:	d00e      	beq.n	80073b2 <HAL_RCC_ClockConfig+0x29a>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800739c:	d009      	beq.n	80073b2 <HAL_RCC_ClockConfig+0x29a>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80073a6:	d004      	beq.n	80073b2 <HAL_RCC_ClockConfig+0x29a>
 80073a8:	f240 21c3 	movw	r1, #707	; 0x2c3
 80073ac:	4828      	ldr	r0, [pc, #160]	; (8007450 <HAL_RCC_ClockConfig+0x338>)
 80073ae:	f7fa fbea 	bl	8001b86 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073b2:	4b28      	ldr	r3, [pc, #160]	; (8007454 <HAL_RCC_ClockConfig+0x33c>)
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	4925      	ldr	r1, [pc, #148]	; (8007454 <HAL_RCC_ClockConfig+0x33c>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0308 	and.w	r3, r3, #8
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d026      	beq.n	800741e <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d018      	beq.n	800740a <HAL_RCC_ClockConfig+0x2f2>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e0:	d013      	beq.n	800740a <HAL_RCC_ClockConfig+0x2f2>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80073ea:	d00e      	beq.n	800740a <HAL_RCC_ClockConfig+0x2f2>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80073f4:	d009      	beq.n	800740a <HAL_RCC_ClockConfig+0x2f2>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80073fe:	d004      	beq.n	800740a <HAL_RCC_ClockConfig+0x2f2>
 8007400:	f240 21ca 	movw	r1, #714	; 0x2ca
 8007404:	4812      	ldr	r0, [pc, #72]	; (8007450 <HAL_RCC_ClockConfig+0x338>)
 8007406:	f7fa fbbe 	bl	8001b86 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800740a:	4b12      	ldr	r3, [pc, #72]	; (8007454 <HAL_RCC_ClockConfig+0x33c>)
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	00db      	lsls	r3, r3, #3
 8007418:	490e      	ldr	r1, [pc, #56]	; (8007454 <HAL_RCC_ClockConfig+0x33c>)
 800741a:	4313      	orrs	r3, r2
 800741c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800741e:	f000 f887 	bl	8007530 <HAL_RCC_GetSysClockFreq>
 8007422:	4602      	mov	r2, r0
 8007424:	4b0b      	ldr	r3, [pc, #44]	; (8007454 <HAL_RCC_ClockConfig+0x33c>)
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	091b      	lsrs	r3, r3, #4
 800742a:	f003 030f 	and.w	r3, r3, #15
 800742e:	490a      	ldr	r1, [pc, #40]	; (8007458 <HAL_RCC_ClockConfig+0x340>)
 8007430:	5ccb      	ldrb	r3, [r1, r3]
 8007432:	fa22 f303 	lsr.w	r3, r2, r3
 8007436:	4a09      	ldr	r2, [pc, #36]	; (800745c <HAL_RCC_ClockConfig+0x344>)
 8007438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800743a:	4b09      	ldr	r3, [pc, #36]	; (8007460 <HAL_RCC_ClockConfig+0x348>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4618      	mov	r0, r3
 8007440:	f7fa fcc4 	bl	8001dcc <HAL_InitTick>

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	0800bf78 	.word	0x0800bf78
 8007454:	40023800 	.word	0x40023800
 8007458:	0800c0a0 	.word	0x0800c0a0
 800745c:	20000000 	.word	0x20000000
 8007460:	20000004 	.word	0x20000004

08007464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007464:	b480      	push	{r7}
 8007466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007468:	4b03      	ldr	r3, [pc, #12]	; (8007478 <HAL_RCC_GetHCLKFreq+0x14>)
 800746a:	681b      	ldr	r3, [r3, #0]
}
 800746c:	4618      	mov	r0, r3
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	20000000 	.word	0x20000000

0800747c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007480:	f7ff fff0 	bl	8007464 <HAL_RCC_GetHCLKFreq>
 8007484:	4602      	mov	r2, r0
 8007486:	4b05      	ldr	r3, [pc, #20]	; (800749c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	0a9b      	lsrs	r3, r3, #10
 800748c:	f003 0307 	and.w	r3, r3, #7
 8007490:	4903      	ldr	r1, [pc, #12]	; (80074a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007492:	5ccb      	ldrb	r3, [r1, r3]
 8007494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007498:	4618      	mov	r0, r3
 800749a:	bd80      	pop	{r7, pc}
 800749c:	40023800 	.word	0x40023800
 80074a0:	0800c0b0 	.word	0x0800c0b0

080074a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80074a8:	f7ff ffdc 	bl	8007464 <HAL_RCC_GetHCLKFreq>
 80074ac:	4602      	mov	r2, r0
 80074ae:	4b05      	ldr	r3, [pc, #20]	; (80074c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	0b5b      	lsrs	r3, r3, #13
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	4903      	ldr	r1, [pc, #12]	; (80074c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074ba:	5ccb      	ldrb	r3, [r1, r3]
 80074bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	40023800 	.word	0x40023800
 80074c8:	0800c0b0 	.word	0x0800c0b0

080074cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	220f      	movs	r2, #15
 80074da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80074dc:	4b12      	ldr	r3, [pc, #72]	; (8007528 <HAL_RCC_GetClockConfig+0x5c>)
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f003 0203 	and.w	r2, r3, #3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80074e8:	4b0f      	ldr	r3, [pc, #60]	; (8007528 <HAL_RCC_GetClockConfig+0x5c>)
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80074f4:	4b0c      	ldr	r3, [pc, #48]	; (8007528 <HAL_RCC_GetClockConfig+0x5c>)
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007500:	4b09      	ldr	r3, [pc, #36]	; (8007528 <HAL_RCC_GetClockConfig+0x5c>)
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	08db      	lsrs	r3, r3, #3
 8007506:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800750e:	4b07      	ldr	r3, [pc, #28]	; (800752c <HAL_RCC_GetClockConfig+0x60>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 020f 	and.w	r2, r3, #15
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	601a      	str	r2, [r3, #0]
}
 800751a:	bf00      	nop
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	40023800 	.word	0x40023800
 800752c:	40023c00 	.word	0x40023c00

08007530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007534:	b0ae      	sub	sp, #184	; 0xb8
 8007536:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007544:	2300      	movs	r3, #0
 8007546:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800754a:	2300      	movs	r3, #0
 800754c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007556:	4bcb      	ldr	r3, [pc, #812]	; (8007884 <HAL_RCC_GetSysClockFreq+0x354>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f003 030c 	and.w	r3, r3, #12
 800755e:	2b0c      	cmp	r3, #12
 8007560:	f200 8206 	bhi.w	8007970 <HAL_RCC_GetSysClockFreq+0x440>
 8007564:	a201      	add	r2, pc, #4	; (adr r2, 800756c <HAL_RCC_GetSysClockFreq+0x3c>)
 8007566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756a:	bf00      	nop
 800756c:	080075a1 	.word	0x080075a1
 8007570:	08007971 	.word	0x08007971
 8007574:	08007971 	.word	0x08007971
 8007578:	08007971 	.word	0x08007971
 800757c:	080075a9 	.word	0x080075a9
 8007580:	08007971 	.word	0x08007971
 8007584:	08007971 	.word	0x08007971
 8007588:	08007971 	.word	0x08007971
 800758c:	080075b1 	.word	0x080075b1
 8007590:	08007971 	.word	0x08007971
 8007594:	08007971 	.word	0x08007971
 8007598:	08007971 	.word	0x08007971
 800759c:	080077a1 	.word	0x080077a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80075a0:	4bb9      	ldr	r3, [pc, #740]	; (8007888 <HAL_RCC_GetSysClockFreq+0x358>)
 80075a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80075a6:	e1e7      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80075a8:	4bb8      	ldr	r3, [pc, #736]	; (800788c <HAL_RCC_GetSysClockFreq+0x35c>)
 80075aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80075ae:	e1e3      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80075b0:	4bb4      	ldr	r3, [pc, #720]	; (8007884 <HAL_RCC_GetSysClockFreq+0x354>)
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80075bc:	4bb1      	ldr	r3, [pc, #708]	; (8007884 <HAL_RCC_GetSysClockFreq+0x354>)
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d071      	beq.n	80076ac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075c8:	4bae      	ldr	r3, [pc, #696]	; (8007884 <HAL_RCC_GetSysClockFreq+0x354>)
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	099b      	lsrs	r3, r3, #6
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075d4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80075d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075e4:	2300      	movs	r3, #0
 80075e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80075ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80075ee:	4622      	mov	r2, r4
 80075f0:	462b      	mov	r3, r5
 80075f2:	f04f 0000 	mov.w	r0, #0
 80075f6:	f04f 0100 	mov.w	r1, #0
 80075fa:	0159      	lsls	r1, r3, #5
 80075fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007600:	0150      	lsls	r0, r2, #5
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	4621      	mov	r1, r4
 8007608:	1a51      	subs	r1, r2, r1
 800760a:	6439      	str	r1, [r7, #64]	; 0x40
 800760c:	4629      	mov	r1, r5
 800760e:	eb63 0301 	sbc.w	r3, r3, r1
 8007612:	647b      	str	r3, [r7, #68]	; 0x44
 8007614:	f04f 0200 	mov.w	r2, #0
 8007618:	f04f 0300 	mov.w	r3, #0
 800761c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007620:	4649      	mov	r1, r9
 8007622:	018b      	lsls	r3, r1, #6
 8007624:	4641      	mov	r1, r8
 8007626:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800762a:	4641      	mov	r1, r8
 800762c:	018a      	lsls	r2, r1, #6
 800762e:	4641      	mov	r1, r8
 8007630:	1a51      	subs	r1, r2, r1
 8007632:	63b9      	str	r1, [r7, #56]	; 0x38
 8007634:	4649      	mov	r1, r9
 8007636:	eb63 0301 	sbc.w	r3, r3, r1
 800763a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800763c:	f04f 0200 	mov.w	r2, #0
 8007640:	f04f 0300 	mov.w	r3, #0
 8007644:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007648:	4649      	mov	r1, r9
 800764a:	00cb      	lsls	r3, r1, #3
 800764c:	4641      	mov	r1, r8
 800764e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007652:	4641      	mov	r1, r8
 8007654:	00ca      	lsls	r2, r1, #3
 8007656:	4610      	mov	r0, r2
 8007658:	4619      	mov	r1, r3
 800765a:	4603      	mov	r3, r0
 800765c:	4622      	mov	r2, r4
 800765e:	189b      	adds	r3, r3, r2
 8007660:	633b      	str	r3, [r7, #48]	; 0x30
 8007662:	462b      	mov	r3, r5
 8007664:	460a      	mov	r2, r1
 8007666:	eb42 0303 	adc.w	r3, r2, r3
 800766a:	637b      	str	r3, [r7, #52]	; 0x34
 800766c:	f04f 0200 	mov.w	r2, #0
 8007670:	f04f 0300 	mov.w	r3, #0
 8007674:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007678:	4629      	mov	r1, r5
 800767a:	024b      	lsls	r3, r1, #9
 800767c:	4621      	mov	r1, r4
 800767e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007682:	4621      	mov	r1, r4
 8007684:	024a      	lsls	r2, r1, #9
 8007686:	4610      	mov	r0, r2
 8007688:	4619      	mov	r1, r3
 800768a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800768e:	2200      	movs	r2, #0
 8007690:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007694:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007698:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800769c:	f7f9 f93e 	bl	800091c <__aeabi_uldivmod>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	4613      	mov	r3, r2
 80076a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076aa:	e067      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076ac:	4b75      	ldr	r3, [pc, #468]	; (8007884 <HAL_RCC_GetSysClockFreq+0x354>)
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	099b      	lsrs	r3, r3, #6
 80076b2:	2200      	movs	r2, #0
 80076b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076b8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80076bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80076c6:	2300      	movs	r3, #0
 80076c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80076ca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80076ce:	4622      	mov	r2, r4
 80076d0:	462b      	mov	r3, r5
 80076d2:	f04f 0000 	mov.w	r0, #0
 80076d6:	f04f 0100 	mov.w	r1, #0
 80076da:	0159      	lsls	r1, r3, #5
 80076dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076e0:	0150      	lsls	r0, r2, #5
 80076e2:	4602      	mov	r2, r0
 80076e4:	460b      	mov	r3, r1
 80076e6:	4621      	mov	r1, r4
 80076e8:	1a51      	subs	r1, r2, r1
 80076ea:	62b9      	str	r1, [r7, #40]	; 0x28
 80076ec:	4629      	mov	r1, r5
 80076ee:	eb63 0301 	sbc.w	r3, r3, r1
 80076f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076f4:	f04f 0200 	mov.w	r2, #0
 80076f8:	f04f 0300 	mov.w	r3, #0
 80076fc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007700:	4649      	mov	r1, r9
 8007702:	018b      	lsls	r3, r1, #6
 8007704:	4641      	mov	r1, r8
 8007706:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800770a:	4641      	mov	r1, r8
 800770c:	018a      	lsls	r2, r1, #6
 800770e:	4641      	mov	r1, r8
 8007710:	ebb2 0a01 	subs.w	sl, r2, r1
 8007714:	4649      	mov	r1, r9
 8007716:	eb63 0b01 	sbc.w	fp, r3, r1
 800771a:	f04f 0200 	mov.w	r2, #0
 800771e:	f04f 0300 	mov.w	r3, #0
 8007722:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007726:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800772a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800772e:	4692      	mov	sl, r2
 8007730:	469b      	mov	fp, r3
 8007732:	4623      	mov	r3, r4
 8007734:	eb1a 0303 	adds.w	r3, sl, r3
 8007738:	623b      	str	r3, [r7, #32]
 800773a:	462b      	mov	r3, r5
 800773c:	eb4b 0303 	adc.w	r3, fp, r3
 8007740:	627b      	str	r3, [r7, #36]	; 0x24
 8007742:	f04f 0200 	mov.w	r2, #0
 8007746:	f04f 0300 	mov.w	r3, #0
 800774a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800774e:	4629      	mov	r1, r5
 8007750:	028b      	lsls	r3, r1, #10
 8007752:	4621      	mov	r1, r4
 8007754:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007758:	4621      	mov	r1, r4
 800775a:	028a      	lsls	r2, r1, #10
 800775c:	4610      	mov	r0, r2
 800775e:	4619      	mov	r1, r3
 8007760:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007764:	2200      	movs	r2, #0
 8007766:	673b      	str	r3, [r7, #112]	; 0x70
 8007768:	677a      	str	r2, [r7, #116]	; 0x74
 800776a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800776e:	f7f9 f8d5 	bl	800091c <__aeabi_uldivmod>
 8007772:	4602      	mov	r2, r0
 8007774:	460b      	mov	r3, r1
 8007776:	4613      	mov	r3, r2
 8007778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800777c:	4b41      	ldr	r3, [pc, #260]	; (8007884 <HAL_RCC_GetSysClockFreq+0x354>)
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	0c1b      	lsrs	r3, r3, #16
 8007782:	f003 0303 	and.w	r3, r3, #3
 8007786:	3301      	adds	r3, #1
 8007788:	005b      	lsls	r3, r3, #1
 800778a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800778e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007792:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007796:	fbb2 f3f3 	udiv	r3, r2, r3
 800779a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800779e:	e0eb      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077a0:	4b38      	ldr	r3, [pc, #224]	; (8007884 <HAL_RCC_GetSysClockFreq+0x354>)
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077ac:	4b35      	ldr	r3, [pc, #212]	; (8007884 <HAL_RCC_GetSysClockFreq+0x354>)
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d06b      	beq.n	8007890 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077b8:	4b32      	ldr	r3, [pc, #200]	; (8007884 <HAL_RCC_GetSysClockFreq+0x354>)
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	099b      	lsrs	r3, r3, #6
 80077be:	2200      	movs	r2, #0
 80077c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80077c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80077c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ca:	663b      	str	r3, [r7, #96]	; 0x60
 80077cc:	2300      	movs	r3, #0
 80077ce:	667b      	str	r3, [r7, #100]	; 0x64
 80077d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80077d4:	4622      	mov	r2, r4
 80077d6:	462b      	mov	r3, r5
 80077d8:	f04f 0000 	mov.w	r0, #0
 80077dc:	f04f 0100 	mov.w	r1, #0
 80077e0:	0159      	lsls	r1, r3, #5
 80077e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077e6:	0150      	lsls	r0, r2, #5
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	4621      	mov	r1, r4
 80077ee:	1a51      	subs	r1, r2, r1
 80077f0:	61b9      	str	r1, [r7, #24]
 80077f2:	4629      	mov	r1, r5
 80077f4:	eb63 0301 	sbc.w	r3, r3, r1
 80077f8:	61fb      	str	r3, [r7, #28]
 80077fa:	f04f 0200 	mov.w	r2, #0
 80077fe:	f04f 0300 	mov.w	r3, #0
 8007802:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007806:	4659      	mov	r1, fp
 8007808:	018b      	lsls	r3, r1, #6
 800780a:	4651      	mov	r1, sl
 800780c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007810:	4651      	mov	r1, sl
 8007812:	018a      	lsls	r2, r1, #6
 8007814:	4651      	mov	r1, sl
 8007816:	ebb2 0801 	subs.w	r8, r2, r1
 800781a:	4659      	mov	r1, fp
 800781c:	eb63 0901 	sbc.w	r9, r3, r1
 8007820:	f04f 0200 	mov.w	r2, #0
 8007824:	f04f 0300 	mov.w	r3, #0
 8007828:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800782c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007830:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007834:	4690      	mov	r8, r2
 8007836:	4699      	mov	r9, r3
 8007838:	4623      	mov	r3, r4
 800783a:	eb18 0303 	adds.w	r3, r8, r3
 800783e:	613b      	str	r3, [r7, #16]
 8007840:	462b      	mov	r3, r5
 8007842:	eb49 0303 	adc.w	r3, r9, r3
 8007846:	617b      	str	r3, [r7, #20]
 8007848:	f04f 0200 	mov.w	r2, #0
 800784c:	f04f 0300 	mov.w	r3, #0
 8007850:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007854:	4629      	mov	r1, r5
 8007856:	024b      	lsls	r3, r1, #9
 8007858:	4621      	mov	r1, r4
 800785a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800785e:	4621      	mov	r1, r4
 8007860:	024a      	lsls	r2, r1, #9
 8007862:	4610      	mov	r0, r2
 8007864:	4619      	mov	r1, r3
 8007866:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800786a:	2200      	movs	r2, #0
 800786c:	65bb      	str	r3, [r7, #88]	; 0x58
 800786e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007870:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007874:	f7f9 f852 	bl	800091c <__aeabi_uldivmod>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	4613      	mov	r3, r2
 800787e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007882:	e065      	b.n	8007950 <HAL_RCC_GetSysClockFreq+0x420>
 8007884:	40023800 	.word	0x40023800
 8007888:	00f42400 	.word	0x00f42400
 800788c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007890:	4b3d      	ldr	r3, [pc, #244]	; (8007988 <HAL_RCC_GetSysClockFreq+0x458>)
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	099b      	lsrs	r3, r3, #6
 8007896:	2200      	movs	r2, #0
 8007898:	4618      	mov	r0, r3
 800789a:	4611      	mov	r1, r2
 800789c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80078a0:	653b      	str	r3, [r7, #80]	; 0x50
 80078a2:	2300      	movs	r3, #0
 80078a4:	657b      	str	r3, [r7, #84]	; 0x54
 80078a6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80078aa:	4642      	mov	r2, r8
 80078ac:	464b      	mov	r3, r9
 80078ae:	f04f 0000 	mov.w	r0, #0
 80078b2:	f04f 0100 	mov.w	r1, #0
 80078b6:	0159      	lsls	r1, r3, #5
 80078b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078bc:	0150      	lsls	r0, r2, #5
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	4641      	mov	r1, r8
 80078c4:	1a51      	subs	r1, r2, r1
 80078c6:	60b9      	str	r1, [r7, #8]
 80078c8:	4649      	mov	r1, r9
 80078ca:	eb63 0301 	sbc.w	r3, r3, r1
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	f04f 0200 	mov.w	r2, #0
 80078d4:	f04f 0300 	mov.w	r3, #0
 80078d8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80078dc:	4659      	mov	r1, fp
 80078de:	018b      	lsls	r3, r1, #6
 80078e0:	4651      	mov	r1, sl
 80078e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80078e6:	4651      	mov	r1, sl
 80078e8:	018a      	lsls	r2, r1, #6
 80078ea:	4651      	mov	r1, sl
 80078ec:	1a54      	subs	r4, r2, r1
 80078ee:	4659      	mov	r1, fp
 80078f0:	eb63 0501 	sbc.w	r5, r3, r1
 80078f4:	f04f 0200 	mov.w	r2, #0
 80078f8:	f04f 0300 	mov.w	r3, #0
 80078fc:	00eb      	lsls	r3, r5, #3
 80078fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007902:	00e2      	lsls	r2, r4, #3
 8007904:	4614      	mov	r4, r2
 8007906:	461d      	mov	r5, r3
 8007908:	4643      	mov	r3, r8
 800790a:	18e3      	adds	r3, r4, r3
 800790c:	603b      	str	r3, [r7, #0]
 800790e:	464b      	mov	r3, r9
 8007910:	eb45 0303 	adc.w	r3, r5, r3
 8007914:	607b      	str	r3, [r7, #4]
 8007916:	f04f 0200 	mov.w	r2, #0
 800791a:	f04f 0300 	mov.w	r3, #0
 800791e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007922:	4629      	mov	r1, r5
 8007924:	028b      	lsls	r3, r1, #10
 8007926:	4621      	mov	r1, r4
 8007928:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800792c:	4621      	mov	r1, r4
 800792e:	028a      	lsls	r2, r1, #10
 8007930:	4610      	mov	r0, r2
 8007932:	4619      	mov	r1, r3
 8007934:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007938:	2200      	movs	r2, #0
 800793a:	64bb      	str	r3, [r7, #72]	; 0x48
 800793c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800793e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007942:	f7f8 ffeb 	bl	800091c <__aeabi_uldivmod>
 8007946:	4602      	mov	r2, r0
 8007948:	460b      	mov	r3, r1
 800794a:	4613      	mov	r3, r2
 800794c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007950:	4b0d      	ldr	r3, [pc, #52]	; (8007988 <HAL_RCC_GetSysClockFreq+0x458>)
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	0f1b      	lsrs	r3, r3, #28
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800795e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007962:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007966:	fbb2 f3f3 	udiv	r3, r2, r3
 800796a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800796e:	e003      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007970:	4b06      	ldr	r3, [pc, #24]	; (800798c <HAL_RCC_GetSysClockFreq+0x45c>)
 8007972:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007976:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007978:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800797c:	4618      	mov	r0, r3
 800797e:	37b8      	adds	r7, #184	; 0xb8
 8007980:	46bd      	mov	sp, r7
 8007982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007986:	bf00      	nop
 8007988:	40023800 	.word	0x40023800
 800798c:	00f42400 	.word	0x00f42400

08007990 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e347      	b.n	8008032 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b0f      	cmp	r3, #15
 80079a8:	d904      	bls.n	80079b4 <HAL_RCC_OscConfig+0x24>
 80079aa:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 80079ae:	4893      	ldr	r0, [pc, #588]	; (8007bfc <HAL_RCC_OscConfig+0x26c>)
 80079b0:	f7fa f8e9 	bl	8001b86 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f000 8096 	beq.w	8007aee <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00e      	beq.n	80079e8 <HAL_RCC_OscConfig+0x58>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079d2:	d009      	beq.n	80079e8 <HAL_RCC_OscConfig+0x58>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079dc:	d004      	beq.n	80079e8 <HAL_RCC_OscConfig+0x58>
 80079de:	f640 5115 	movw	r1, #3349	; 0xd15
 80079e2:	4886      	ldr	r0, [pc, #536]	; (8007bfc <HAL_RCC_OscConfig+0x26c>)
 80079e4:	f7fa f8cf 	bl	8001b86 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80079e8:	4b85      	ldr	r3, [pc, #532]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f003 030c 	and.w	r3, r3, #12
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d019      	beq.n	8007a28 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80079f4:	4b82      	ldr	r3, [pc, #520]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d106      	bne.n	8007a0e <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007a00:	4b7f      	ldr	r3, [pc, #508]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a0c:	d00c      	beq.n	8007a28 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a0e:	4b7c      	ldr	r3, [pc, #496]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007a16:	2b0c      	cmp	r3, #12
 8007a18:	d112      	bne.n	8007a40 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a1a:	4b79      	ldr	r3, [pc, #484]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a26:	d10b      	bne.n	8007a40 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a28:	4b75      	ldr	r3, [pc, #468]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d05b      	beq.n	8007aec <HAL_RCC_OscConfig+0x15c>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d157      	bne.n	8007aec <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e2f8      	b.n	8008032 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a48:	d106      	bne.n	8007a58 <HAL_RCC_OscConfig+0xc8>
 8007a4a:	4b6d      	ldr	r3, [pc, #436]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a6c      	ldr	r2, [pc, #432]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a54:	6013      	str	r3, [r2, #0]
 8007a56:	e01d      	b.n	8007a94 <HAL_RCC_OscConfig+0x104>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a60:	d10c      	bne.n	8007a7c <HAL_RCC_OscConfig+0xec>
 8007a62:	4b67      	ldr	r3, [pc, #412]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a66      	ldr	r2, [pc, #408]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a6c:	6013      	str	r3, [r2, #0]
 8007a6e:	4b64      	ldr	r3, [pc, #400]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a63      	ldr	r2, [pc, #396]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a78:	6013      	str	r3, [r2, #0]
 8007a7a:	e00b      	b.n	8007a94 <HAL_RCC_OscConfig+0x104>
 8007a7c:	4b60      	ldr	r3, [pc, #384]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a5f      	ldr	r2, [pc, #380]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a86:	6013      	str	r3, [r2, #0]
 8007a88:	4b5d      	ldr	r3, [pc, #372]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a5c      	ldr	r2, [pc, #368]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d013      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a9c:	f7fa fc52 	bl	8002344 <HAL_GetTick>
 8007aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aa2:	e008      	b.n	8007ab6 <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007aa4:	f7fa fc4e 	bl	8002344 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b64      	cmp	r3, #100	; 0x64
 8007ab0:	d901      	bls.n	8007ab6 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e2bd      	b.n	8008032 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ab6:	4b52      	ldr	r3, [pc, #328]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0f0      	beq.n	8007aa4 <HAL_RCC_OscConfig+0x114>
 8007ac2:	e014      	b.n	8007aee <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ac4:	f7fa fc3e 	bl	8002344 <HAL_GetTick>
 8007ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aca:	e008      	b.n	8007ade <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007acc:	f7fa fc3a 	bl	8002344 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	2b64      	cmp	r3, #100	; 0x64
 8007ad8:	d901      	bls.n	8007ade <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e2a9      	b.n	8008032 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ade:	4b48      	ldr	r3, [pc, #288]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1f0      	bne.n	8007acc <HAL_RCC_OscConfig+0x13c>
 8007aea:	e000      	b.n	8007aee <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f000 808c 	beq.w	8007c14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d008      	beq.n	8007b16 <HAL_RCC_OscConfig+0x186>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d004      	beq.n	8007b16 <HAL_RCC_OscConfig+0x186>
 8007b0c:	f640 514d 	movw	r1, #3405	; 0xd4d
 8007b10:	483a      	ldr	r0, [pc, #232]	; (8007bfc <HAL_RCC_OscConfig+0x26c>)
 8007b12:	f7fa f838 	bl	8001b86 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	2b1f      	cmp	r3, #31
 8007b1c:	d904      	bls.n	8007b28 <HAL_RCC_OscConfig+0x198>
 8007b1e:	f640 514e 	movw	r1, #3406	; 0xd4e
 8007b22:	4836      	ldr	r0, [pc, #216]	; (8007bfc <HAL_RCC_OscConfig+0x26c>)
 8007b24:	f7fa f82f 	bl	8001b86 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007b28:	4b35      	ldr	r3, [pc, #212]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f003 030c 	and.w	r3, r3, #12
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d017      	beq.n	8007b64 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007b34:	4b32      	ldr	r3, [pc, #200]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007b3c:	2b08      	cmp	r3, #8
 8007b3e:	d105      	bne.n	8007b4c <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007b40:	4b2f      	ldr	r3, [pc, #188]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00b      	beq.n	8007b64 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b4c:	4b2c      	ldr	r3, [pc, #176]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007b54:	2b0c      	cmp	r3, #12
 8007b56:	d11c      	bne.n	8007b92 <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b58:	4b29      	ldr	r3, [pc, #164]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d116      	bne.n	8007b92 <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b64:	4b26      	ldr	r3, [pc, #152]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0302 	and.w	r3, r3, #2
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d005      	beq.n	8007b7c <HAL_RCC_OscConfig+0x1ec>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d001      	beq.n	8007b7c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e25a      	b.n	8008032 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b7c:	4b20      	ldr	r3, [pc, #128]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	00db      	lsls	r3, r3, #3
 8007b8a:	491d      	ldr	r1, [pc, #116]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b90:	e040      	b.n	8007c14 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d020      	beq.n	8007bdc <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b9a:	4b1a      	ldr	r3, [pc, #104]	; (8007c04 <HAL_RCC_OscConfig+0x274>)
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ba0:	f7fa fbd0 	bl	8002344 <HAL_GetTick>
 8007ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ba6:	e008      	b.n	8007bba <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ba8:	f7fa fbcc 	bl	8002344 <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d901      	bls.n	8007bba <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e23b      	b.n	8008032 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bba:	4b11      	ldr	r3, [pc, #68]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0302 	and.w	r3, r3, #2
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d0f0      	beq.n	8007ba8 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bc6:	4b0e      	ldr	r3, [pc, #56]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	00db      	lsls	r3, r3, #3
 8007bd4:	490a      	ldr	r1, [pc, #40]	; (8007c00 <HAL_RCC_OscConfig+0x270>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	600b      	str	r3, [r1, #0]
 8007bda:	e01b      	b.n	8007c14 <HAL_RCC_OscConfig+0x284>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bdc:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <HAL_RCC_OscConfig+0x274>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be2:	f7fa fbaf 	bl	8002344 <HAL_GetTick>
 8007be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007be8:	e00e      	b.n	8007c08 <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bea:	f7fa fbab 	bl	8002344 <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d907      	bls.n	8007c08 <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e21a      	b.n	8008032 <HAL_RCC_OscConfig+0x6a2>
 8007bfc:	0800bfb0 	.word	0x0800bfb0
 8007c00:	40023800 	.word	0x40023800
 8007c04:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c08:	4b74      	ldr	r3, [pc, #464]	; (8007ddc <HAL_RCC_OscConfig+0x44c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0302 	and.w	r3, r3, #2
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1ea      	bne.n	8007bea <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0308 	and.w	r3, r3, #8
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d03d      	beq.n	8007c9c <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d008      	beq.n	8007c3a <HAL_RCC_OscConfig+0x2aa>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d004      	beq.n	8007c3a <HAL_RCC_OscConfig+0x2aa>
 8007c30:	f640 5194 	movw	r1, #3476	; 0xd94
 8007c34:	486a      	ldr	r0, [pc, #424]	; (8007de0 <HAL_RCC_OscConfig+0x450>)
 8007c36:	f7f9 ffa6 	bl	8001b86 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d016      	beq.n	8007c70 <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c42:	4b68      	ldr	r3, [pc, #416]	; (8007de4 <HAL_RCC_OscConfig+0x454>)
 8007c44:	2201      	movs	r2, #1
 8007c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c48:	f7fa fb7c 	bl	8002344 <HAL_GetTick>
 8007c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c4e:	e008      	b.n	8007c62 <HAL_RCC_OscConfig+0x2d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c50:	f7fa fb78 	bl	8002344 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d901      	bls.n	8007c62 <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e1e7      	b.n	8008032 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c62:	4b5e      	ldr	r3, [pc, #376]	; (8007ddc <HAL_RCC_OscConfig+0x44c>)
 8007c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d0f0      	beq.n	8007c50 <HAL_RCC_OscConfig+0x2c0>
 8007c6e:	e015      	b.n	8007c9c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c70:	4b5c      	ldr	r3, [pc, #368]	; (8007de4 <HAL_RCC_OscConfig+0x454>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c76:	f7fa fb65 	bl	8002344 <HAL_GetTick>
 8007c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c7c:	e008      	b.n	8007c90 <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c7e:	f7fa fb61 	bl	8002344 <HAL_GetTick>
 8007c82:	4602      	mov	r2, r0
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d901      	bls.n	8007c90 <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e1d0      	b.n	8008032 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c90:	4b52      	ldr	r3, [pc, #328]	; (8007ddc <HAL_RCC_OscConfig+0x44c>)
 8007c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c94:	f003 0302 	and.w	r3, r3, #2
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1f0      	bne.n	8007c7e <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0304 	and.w	r3, r3, #4
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 80b0 	beq.w	8007e0a <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007caa:	2300      	movs	r3, #0
 8007cac:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00c      	beq.n	8007cd0 <HAL_RCC_OscConfig+0x340>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d008      	beq.n	8007cd0 <HAL_RCC_OscConfig+0x340>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	2b05      	cmp	r3, #5
 8007cc4:	d004      	beq.n	8007cd0 <HAL_RCC_OscConfig+0x340>
 8007cc6:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8007cca:	4845      	ldr	r0, [pc, #276]	; (8007de0 <HAL_RCC_OscConfig+0x450>)
 8007ccc:	f7f9 ff5b 	bl	8001b86 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cd0:	4b42      	ldr	r3, [pc, #264]	; (8007ddc <HAL_RCC_OscConfig+0x44c>)
 8007cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10f      	bne.n	8007cfc <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cdc:	2300      	movs	r3, #0
 8007cde:	60bb      	str	r3, [r7, #8]
 8007ce0:	4b3e      	ldr	r3, [pc, #248]	; (8007ddc <HAL_RCC_OscConfig+0x44c>)
 8007ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce4:	4a3d      	ldr	r2, [pc, #244]	; (8007ddc <HAL_RCC_OscConfig+0x44c>)
 8007ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cea:	6413      	str	r3, [r2, #64]	; 0x40
 8007cec:	4b3b      	ldr	r3, [pc, #236]	; (8007ddc <HAL_RCC_OscConfig+0x44c>)
 8007cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cf4:	60bb      	str	r3, [r7, #8]
 8007cf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cfc:	4b3a      	ldr	r3, [pc, #232]	; (8007de8 <HAL_RCC_OscConfig+0x458>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d118      	bne.n	8007d3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d08:	4b37      	ldr	r3, [pc, #220]	; (8007de8 <HAL_RCC_OscConfig+0x458>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a36      	ldr	r2, [pc, #216]	; (8007de8 <HAL_RCC_OscConfig+0x458>)
 8007d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d14:	f7fa fb16 	bl	8002344 <HAL_GetTick>
 8007d18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d1a:	e008      	b.n	8007d2e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d1c:	f7fa fb12 	bl	8002344 <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d901      	bls.n	8007d2e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e181      	b.n	8008032 <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d2e:	4b2e      	ldr	r3, [pc, #184]	; (8007de8 <HAL_RCC_OscConfig+0x458>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0f0      	beq.n	8007d1c <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d106      	bne.n	8007d50 <HAL_RCC_OscConfig+0x3c0>
 8007d42:	4b26      	ldr	r3, [pc, #152]	; (8007ddc <HAL_RCC_OscConfig+0x44c>)
 8007d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d46:	4a25      	ldr	r2, [pc, #148]	; (8007ddc <HAL_RCC_OscConfig+0x44c>)
 8007d48:	f043 0301 	orr.w	r3, r3, #1
 8007d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8007d4e:	e01c      	b.n	8007d8a <HAL_RCC_OscConfig+0x3fa>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	2b05      	cmp	r3, #5
 8007d56:	d10c      	bne.n	8007d72 <HAL_RCC_OscConfig+0x3e2>
 8007d58:	4b20      	ldr	r3, [pc, #128]	; (8007ddc <HAL_RCC_OscConfig+0x44c>)
 8007d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d5c:	4a1f      	ldr	r2, [pc, #124]	; (8007ddc <HAL_RCC_OscConfig+0x44c>)
 8007d5e:	f043 0304 	orr.w	r3, r3, #4
 8007d62:	6713      	str	r3, [r2, #112]	; 0x70
 8007d64:	4b1d      	ldr	r3, [pc, #116]	; (8007ddc <HAL_RCC_OscConfig+0x44c>)
 8007d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d68:	4a1c      	ldr	r2, [pc, #112]	; (8007ddc <HAL_RCC_OscConfig+0x44c>)
 8007d6a:	f043 0301 	orr.w	r3, r3, #1
 8007d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d70:	e00b      	b.n	8007d8a <HAL_RCC_OscConfig+0x3fa>
 8007d72:	4b1a      	ldr	r3, [pc, #104]	; (8007ddc <HAL_RCC_OscConfig+0x44c>)
 8007d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d76:	4a19      	ldr	r2, [pc, #100]	; (8007ddc <HAL_RCC_OscConfig+0x44c>)
 8007d78:	f023 0301 	bic.w	r3, r3, #1
 8007d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8007d7e:	4b17      	ldr	r3, [pc, #92]	; (8007ddc <HAL_RCC_OscConfig+0x44c>)
 8007d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d82:	4a16      	ldr	r2, [pc, #88]	; (8007ddc <HAL_RCC_OscConfig+0x44c>)
 8007d84:	f023 0304 	bic.w	r3, r3, #4
 8007d88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d015      	beq.n	8007dbe <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d92:	f7fa fad7 	bl	8002344 <HAL_GetTick>
 8007d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d98:	e00a      	b.n	8007db0 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d9a:	f7fa fad3 	bl	8002344 <HAL_GetTick>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d901      	bls.n	8007db0 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e140      	b.n	8008032 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007db0:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <HAL_RCC_OscConfig+0x44c>)
 8007db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db4:	f003 0302 	and.w	r3, r3, #2
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d0ee      	beq.n	8007d9a <HAL_RCC_OscConfig+0x40a>
 8007dbc:	e01c      	b.n	8007df8 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dbe:	f7fa fac1 	bl	8002344 <HAL_GetTick>
 8007dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dc4:	e012      	b.n	8007dec <HAL_RCC_OscConfig+0x45c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007dc6:	f7fa fabd 	bl	8002344 <HAL_GetTick>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d909      	bls.n	8007dec <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e12a      	b.n	8008032 <HAL_RCC_OscConfig+0x6a2>
 8007ddc:	40023800 	.word	0x40023800
 8007de0:	0800bfb0 	.word	0x0800bfb0
 8007de4:	42470e80 	.word	0x42470e80
 8007de8:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dec:	4b93      	ldr	r3, [pc, #588]	; (800803c <HAL_RCC_OscConfig+0x6ac>)
 8007dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1e6      	bne.n	8007dc6 <HAL_RCC_OscConfig+0x436>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d105      	bne.n	8007e0a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dfe:	4b8f      	ldr	r3, [pc, #572]	; (800803c <HAL_RCC_OscConfig+0x6ac>)
 8007e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e02:	4a8e      	ldr	r2, [pc, #568]	; (800803c <HAL_RCC_OscConfig+0x6ac>)
 8007e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00c      	beq.n	8007e2c <HAL_RCC_OscConfig+0x49c>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d008      	beq.n	8007e2c <HAL_RCC_OscConfig+0x49c>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d004      	beq.n	8007e2c <HAL_RCC_OscConfig+0x49c>
 8007e22:	f640 6103 	movw	r1, #3587	; 0xe03
 8007e26:	4886      	ldr	r0, [pc, #536]	; (8008040 <HAL_RCC_OscConfig+0x6b0>)
 8007e28:	f7f9 fead 	bl	8001b86 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 80fd 	beq.w	8008030 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e36:	4b81      	ldr	r3, [pc, #516]	; (800803c <HAL_RCC_OscConfig+0x6ac>)
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	f003 030c 	and.w	r3, r3, #12
 8007e3e:	2b08      	cmp	r3, #8
 8007e40:	f000 80b6 	beq.w	8007fb0 <HAL_RCC_OscConfig+0x620>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	699b      	ldr	r3, [r3, #24]
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	f040 809a 	bne.w	8007f82 <HAL_RCC_OscConfig+0x5f2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d009      	beq.n	8007e6a <HAL_RCC_OscConfig+0x4da>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e5e:	d004      	beq.n	8007e6a <HAL_RCC_OscConfig+0x4da>
 8007e60:	f640 610c 	movw	r1, #3596	; 0xe0c
 8007e64:	4876      	ldr	r0, [pc, #472]	; (8008040 <HAL_RCC_OscConfig+0x6b0>)
 8007e66:	f7f9 fe8e 	bl	8001b86 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	2b3f      	cmp	r3, #63	; 0x3f
 8007e70:	d904      	bls.n	8007e7c <HAL_RCC_OscConfig+0x4ec>
 8007e72:	f640 610d 	movw	r1, #3597	; 0xe0d
 8007e76:	4872      	ldr	r0, [pc, #456]	; (8008040 <HAL_RCC_OscConfig+0x6b0>)
 8007e78:	f7f9 fe85 	bl	8001b86 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	2b31      	cmp	r3, #49	; 0x31
 8007e82:	d904      	bls.n	8007e8e <HAL_RCC_OscConfig+0x4fe>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e88:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8007e8c:	d904      	bls.n	8007e98 <HAL_RCC_OscConfig+0x508>
 8007e8e:	f640 610e 	movw	r1, #3598	; 0xe0e
 8007e92:	486b      	ldr	r0, [pc, #428]	; (8008040 <HAL_RCC_OscConfig+0x6b0>)
 8007e94:	f7f9 fe77 	bl	8001b86 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d010      	beq.n	8007ec2 <HAL_RCC_OscConfig+0x532>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea4:	2b04      	cmp	r3, #4
 8007ea6:	d00c      	beq.n	8007ec2 <HAL_RCC_OscConfig+0x532>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eac:	2b06      	cmp	r3, #6
 8007eae:	d008      	beq.n	8007ec2 <HAL_RCC_OscConfig+0x532>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	d004      	beq.n	8007ec2 <HAL_RCC_OscConfig+0x532>
 8007eb8:	f640 610f 	movw	r1, #3599	; 0xe0f
 8007ebc:	4860      	ldr	r0, [pc, #384]	; (8008040 <HAL_RCC_OscConfig+0x6b0>)
 8007ebe:	f7f9 fe62 	bl	8001b86 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d903      	bls.n	8007ed2 <HAL_RCC_OscConfig+0x542>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ece:	2b0f      	cmp	r3, #15
 8007ed0:	d904      	bls.n	8007edc <HAL_RCC_OscConfig+0x54c>
 8007ed2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007ed6:	485a      	ldr	r0, [pc, #360]	; (8008040 <HAL_RCC_OscConfig+0x6b0>)
 8007ed8:	f7f9 fe55 	bl	8001b86 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d903      	bls.n	8007eec <HAL_RCC_OscConfig+0x55c>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee8:	2b07      	cmp	r3, #7
 8007eea:	d904      	bls.n	8007ef6 <HAL_RCC_OscConfig+0x566>
 8007eec:	f640 6111 	movw	r1, #3601	; 0xe11
 8007ef0:	4853      	ldr	r0, [pc, #332]	; (8008040 <HAL_RCC_OscConfig+0x6b0>)
 8007ef2:	f7f9 fe48 	bl	8001b86 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ef6:	4b53      	ldr	r3, [pc, #332]	; (8008044 <HAL_RCC_OscConfig+0x6b4>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007efc:	f7fa fa22 	bl	8002344 <HAL_GetTick>
 8007f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f02:	e008      	b.n	8007f16 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f04:	f7fa fa1e 	bl	8002344 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d901      	bls.n	8007f16 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e08d      	b.n	8008032 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f16:	4b49      	ldr	r3, [pc, #292]	; (800803c <HAL_RCC_OscConfig+0x6ac>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1f0      	bne.n	8007f04 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	69da      	ldr	r2, [r3, #28]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	431a      	orrs	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f30:	019b      	lsls	r3, r3, #6
 8007f32:	431a      	orrs	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f38:	085b      	lsrs	r3, r3, #1
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	041b      	lsls	r3, r3, #16
 8007f3e:	431a      	orrs	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f44:	061b      	lsls	r3, r3, #24
 8007f46:	431a      	orrs	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4c:	071b      	lsls	r3, r3, #28
 8007f4e:	493b      	ldr	r1, [pc, #236]	; (800803c <HAL_RCC_OscConfig+0x6ac>)
 8007f50:	4313      	orrs	r3, r2
 8007f52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f54:	4b3b      	ldr	r3, [pc, #236]	; (8008044 <HAL_RCC_OscConfig+0x6b4>)
 8007f56:	2201      	movs	r2, #1
 8007f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f5a:	f7fa f9f3 	bl	8002344 <HAL_GetTick>
 8007f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f60:	e008      	b.n	8007f74 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f62:	f7fa f9ef 	bl	8002344 <HAL_GetTick>
 8007f66:	4602      	mov	r2, r0
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d901      	bls.n	8007f74 <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e05e      	b.n	8008032 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f74:	4b31      	ldr	r3, [pc, #196]	; (800803c <HAL_RCC_OscConfig+0x6ac>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d0f0      	beq.n	8007f62 <HAL_RCC_OscConfig+0x5d2>
 8007f80:	e056      	b.n	8008030 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f82:	4b30      	ldr	r3, [pc, #192]	; (8008044 <HAL_RCC_OscConfig+0x6b4>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f88:	f7fa f9dc 	bl	8002344 <HAL_GetTick>
 8007f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f8e:	e008      	b.n	8007fa2 <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f90:	f7fa f9d8 	bl	8002344 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d901      	bls.n	8007fa2 <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e047      	b.n	8008032 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fa2:	4b26      	ldr	r3, [pc, #152]	; (800803c <HAL_RCC_OscConfig+0x6ac>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1f0      	bne.n	8007f90 <HAL_RCC_OscConfig+0x600>
 8007fae:	e03f      	b.n	8008030 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d101      	bne.n	8007fbc <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e03a      	b.n	8008032 <HAL_RCC_OscConfig+0x6a2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007fbc:	4b1f      	ldr	r3, [pc, #124]	; (800803c <HAL_RCC_OscConfig+0x6ac>)
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d030      	beq.n	800802c <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d129      	bne.n	800802c <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d122      	bne.n	800802c <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007fec:	4013      	ands	r3, r2
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007ff2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d119      	bne.n	800802c <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008002:	085b      	lsrs	r3, r3, #1
 8008004:	3b01      	subs	r3, #1
 8008006:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008008:	429a      	cmp	r2, r3
 800800a:	d10f      	bne.n	800802c <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008016:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008018:	429a      	cmp	r2, r3
 800801a:	d107      	bne.n	800802c <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008026:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008028:	429a      	cmp	r2, r3
 800802a:	d001      	beq.n	8008030 <HAL_RCC_OscConfig+0x6a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e000      	b.n	8008032 <HAL_RCC_OscConfig+0x6a2>
        }
      }
    }
  }
  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3718      	adds	r7, #24
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	40023800 	.word	0x40023800
 8008040:	0800bfb0 	.word	0x0800bfb0
 8008044:	42470060 	.word	0x42470060

08008048 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e1a4      	b.n	80083a4 <HAL_SPI_Init+0x35c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a72      	ldr	r2, [pc, #456]	; (8008228 <HAL_SPI_Init+0x1e0>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d013      	beq.n	800808c <HAL_SPI_Init+0x44>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a70      	ldr	r2, [pc, #448]	; (800822c <HAL_SPI_Init+0x1e4>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d00e      	beq.n	800808c <HAL_SPI_Init+0x44>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a6f      	ldr	r2, [pc, #444]	; (8008230 <HAL_SPI_Init+0x1e8>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d009      	beq.n	800808c <HAL_SPI_Init+0x44>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a6d      	ldr	r2, [pc, #436]	; (8008234 <HAL_SPI_Init+0x1ec>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d004      	beq.n	800808c <HAL_SPI_Init+0x44>
 8008082:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008086:	486c      	ldr	r0, [pc, #432]	; (8008238 <HAL_SPI_Init+0x1f0>)
 8008088:	f7f9 fd7d 	bl	8001b86 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d009      	beq.n	80080a8 <HAL_SPI_Init+0x60>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800809c:	d004      	beq.n	80080a8 <HAL_SPI_Init+0x60>
 800809e:	f240 1141 	movw	r1, #321	; 0x141
 80080a2:	4865      	ldr	r0, [pc, #404]	; (8008238 <HAL_SPI_Init+0x1f0>)
 80080a4:	f7f9 fd6f 	bl	8001b86 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00e      	beq.n	80080ce <HAL_SPI_Init+0x86>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080b8:	d009      	beq.n	80080ce <HAL_SPI_Init+0x86>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080c2:	d004      	beq.n	80080ce <HAL_SPI_Init+0x86>
 80080c4:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80080c8:	485b      	ldr	r0, [pc, #364]	; (8008238 <HAL_SPI_Init+0x1f0>)
 80080ca:	f7f9 fd5c 	bl	8001b86 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080d6:	d008      	beq.n	80080ea <HAL_SPI_Init+0xa2>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d004      	beq.n	80080ea <HAL_SPI_Init+0xa2>
 80080e0:	f240 1143 	movw	r1, #323	; 0x143
 80080e4:	4854      	ldr	r0, [pc, #336]	; (8008238 <HAL_SPI_Init+0x1f0>)
 80080e6:	f7f9 fd4e 	bl	8001b86 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080f2:	d00d      	beq.n	8008110 <HAL_SPI_Init+0xc8>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d009      	beq.n	8008110 <HAL_SPI_Init+0xc8>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008104:	d004      	beq.n	8008110 <HAL_SPI_Init+0xc8>
 8008106:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800810a:	484b      	ldr	r0, [pc, #300]	; (8008238 <HAL_SPI_Init+0x1f0>)
 800810c:	f7f9 fd3b 	bl	8001b86 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	69db      	ldr	r3, [r3, #28]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d020      	beq.n	800815a <HAL_SPI_Init+0x112>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	69db      	ldr	r3, [r3, #28]
 800811c:	2b08      	cmp	r3, #8
 800811e:	d01c      	beq.n	800815a <HAL_SPI_Init+0x112>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	69db      	ldr	r3, [r3, #28]
 8008124:	2b10      	cmp	r3, #16
 8008126:	d018      	beq.n	800815a <HAL_SPI_Init+0x112>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	69db      	ldr	r3, [r3, #28]
 800812c:	2b18      	cmp	r3, #24
 800812e:	d014      	beq.n	800815a <HAL_SPI_Init+0x112>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	69db      	ldr	r3, [r3, #28]
 8008134:	2b20      	cmp	r3, #32
 8008136:	d010      	beq.n	800815a <HAL_SPI_Init+0x112>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	2b28      	cmp	r3, #40	; 0x28
 800813e:	d00c      	beq.n	800815a <HAL_SPI_Init+0x112>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	69db      	ldr	r3, [r3, #28]
 8008144:	2b30      	cmp	r3, #48	; 0x30
 8008146:	d008      	beq.n	800815a <HAL_SPI_Init+0x112>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	69db      	ldr	r3, [r3, #28]
 800814c:	2b38      	cmp	r3, #56	; 0x38
 800814e:	d004      	beq.n	800815a <HAL_SPI_Init+0x112>
 8008150:	f240 1145 	movw	r1, #325	; 0x145
 8008154:	4838      	ldr	r0, [pc, #224]	; (8008238 <HAL_SPI_Init+0x1f0>)
 8008156:	f7f9 fd16 	bl	8001b86 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d008      	beq.n	8008174 <HAL_SPI_Init+0x12c>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	2b80      	cmp	r3, #128	; 0x80
 8008168:	d004      	beq.n	8008174 <HAL_SPI_Init+0x12c>
 800816a:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800816e:	4832      	ldr	r0, [pc, #200]	; (8008238 <HAL_SPI_Init+0x1f0>)
 8008170:	f7f9 fd09 	bl	8001b86 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	2b00      	cmp	r3, #0
 800817a:	d008      	beq.n	800818e <HAL_SPI_Init+0x146>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008180:	2b10      	cmp	r3, #16
 8008182:	d004      	beq.n	800818e <HAL_SPI_Init+0x146>
 8008184:	f240 1147 	movw	r1, #327	; 0x147
 8008188:	482b      	ldr	r0, [pc, #172]	; (8008238 <HAL_SPI_Init+0x1f0>)
 800818a:	f7f9 fcfc 	bl	8001b86 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008192:	2b00      	cmp	r3, #0
 8008194:	d152      	bne.n	800823c <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d008      	beq.n	80081b0 <HAL_SPI_Init+0x168>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d004      	beq.n	80081b0 <HAL_SPI_Init+0x168>
 80081a6:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80081aa:	4823      	ldr	r0, [pc, #140]	; (8008238 <HAL_SPI_Init+0x1f0>)
 80081ac:	f7f9 fceb 	bl	8001b86 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	695b      	ldr	r3, [r3, #20]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d008      	beq.n	80081ca <HAL_SPI_Init+0x182>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	695b      	ldr	r3, [r3, #20]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d004      	beq.n	80081ca <HAL_SPI_Init+0x182>
 80081c0:	f240 114b 	movw	r1, #331	; 0x14b
 80081c4:	481c      	ldr	r0, [pc, #112]	; (8008238 <HAL_SPI_Init+0x1f0>)
 80081c6:	f7f9 fcde 	bl	8001b86 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081d2:	d125      	bne.n	8008220 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	69db      	ldr	r3, [r3, #28]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d05a      	beq.n	8008292 <HAL_SPI_Init+0x24a>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	69db      	ldr	r3, [r3, #28]
 80081e0:	2b08      	cmp	r3, #8
 80081e2:	d056      	beq.n	8008292 <HAL_SPI_Init+0x24a>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	69db      	ldr	r3, [r3, #28]
 80081e8:	2b10      	cmp	r3, #16
 80081ea:	d052      	beq.n	8008292 <HAL_SPI_Init+0x24a>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	2b18      	cmp	r3, #24
 80081f2:	d04e      	beq.n	8008292 <HAL_SPI_Init+0x24a>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	2b20      	cmp	r3, #32
 80081fa:	d04a      	beq.n	8008292 <HAL_SPI_Init+0x24a>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	69db      	ldr	r3, [r3, #28]
 8008200:	2b28      	cmp	r3, #40	; 0x28
 8008202:	d046      	beq.n	8008292 <HAL_SPI_Init+0x24a>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	69db      	ldr	r3, [r3, #28]
 8008208:	2b30      	cmp	r3, #48	; 0x30
 800820a:	d042      	beq.n	8008292 <HAL_SPI_Init+0x24a>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	2b38      	cmp	r3, #56	; 0x38
 8008212:	d03e      	beq.n	8008292 <HAL_SPI_Init+0x24a>
 8008214:	f240 114f 	movw	r1, #335	; 0x14f
 8008218:	4807      	ldr	r0, [pc, #28]	; (8008238 <HAL_SPI_Init+0x1f0>)
 800821a:	f7f9 fcb4 	bl	8001b86 <assert_failed>
 800821e:	e038      	b.n	8008292 <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	61da      	str	r2, [r3, #28]
 8008226:	e034      	b.n	8008292 <HAL_SPI_Init+0x24a>
 8008228:	40013000 	.word	0x40013000
 800822c:	40003800 	.word	0x40003800
 8008230:	40003c00 	.word	0x40003c00
 8008234:	40013400 	.word	0x40013400
 8008238:	0800bfec 	.word	0x0800bfec
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	69db      	ldr	r3, [r3, #28]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d020      	beq.n	8008286 <HAL_SPI_Init+0x23e>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	69db      	ldr	r3, [r3, #28]
 8008248:	2b08      	cmp	r3, #8
 800824a:	d01c      	beq.n	8008286 <HAL_SPI_Init+0x23e>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	69db      	ldr	r3, [r3, #28]
 8008250:	2b10      	cmp	r3, #16
 8008252:	d018      	beq.n	8008286 <HAL_SPI_Init+0x23e>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	2b18      	cmp	r3, #24
 800825a:	d014      	beq.n	8008286 <HAL_SPI_Init+0x23e>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	2b20      	cmp	r3, #32
 8008262:	d010      	beq.n	8008286 <HAL_SPI_Init+0x23e>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	69db      	ldr	r3, [r3, #28]
 8008268:	2b28      	cmp	r3, #40	; 0x28
 800826a:	d00c      	beq.n	8008286 <HAL_SPI_Init+0x23e>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	2b30      	cmp	r3, #48	; 0x30
 8008272:	d008      	beq.n	8008286 <HAL_SPI_Init+0x23e>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	69db      	ldr	r3, [r3, #28]
 8008278:	2b38      	cmp	r3, #56	; 0x38
 800827a:	d004      	beq.n	8008286 <HAL_SPI_Init+0x23e>
 800827c:	f240 1159 	movw	r1, #345	; 0x159
 8008280:	484a      	ldr	r0, [pc, #296]	; (80083ac <HAL_SPI_Init+0x364>)
 8008282:	f7f9 fc80 	bl	8001b86 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d126      	bne.n	80082f2 <HAL_SPI_Init+0x2aa>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a40      	ldr	r2, [pc, #256]	; (80083b0 <HAL_SPI_Init+0x368>)
 80082b0:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a3f      	ldr	r2, [pc, #252]	; (80083b4 <HAL_SPI_Init+0x36c>)
 80082b6:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a3f      	ldr	r2, [pc, #252]	; (80083b8 <HAL_SPI_Init+0x370>)
 80082bc:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a3e      	ldr	r2, [pc, #248]	; (80083bc <HAL_SPI_Init+0x374>)
 80082c2:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a3e      	ldr	r2, [pc, #248]	; (80083c0 <HAL_SPI_Init+0x378>)
 80082c8:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a3d      	ldr	r2, [pc, #244]	; (80083c4 <HAL_SPI_Init+0x37c>)
 80082ce:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a3d      	ldr	r2, [pc, #244]	; (80083c8 <HAL_SPI_Init+0x380>)
 80082d4:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a3c      	ldr	r2, [pc, #240]	; (80083cc <HAL_SPI_Init+0x384>)
 80082da:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d102      	bne.n	80082ea <HAL_SPI_Init+0x2a2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a3a      	ldr	r2, [pc, #232]	; (80083d0 <HAL_SPI_Init+0x388>)
 80082e8:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2202      	movs	r2, #2
 80082f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008308:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800831a:	431a      	orrs	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008324:	431a      	orrs	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	f003 0302 	and.w	r3, r3, #2
 800832e:	431a      	orrs	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	695b      	ldr	r3, [r3, #20]
 8008334:	f003 0301 	and.w	r3, r3, #1
 8008338:	431a      	orrs	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008342:	431a      	orrs	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	69db      	ldr	r3, [r3, #28]
 8008348:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800834c:	431a      	orrs	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008356:	ea42 0103 	orr.w	r1, r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	0c1b      	lsrs	r3, r3, #16
 8008370:	f003 0104 	and.w	r1, r3, #4
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	f003 0210 	and.w	r2, r3, #16
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	430a      	orrs	r2, r1
 8008382:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	69da      	ldr	r2, [r3, #28]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008392:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	0800bfec 	.word	0x0800bfec
 80083b0:	08008931 	.word	0x08008931
 80083b4:	08008945 	.word	0x08008945
 80083b8:	08008959 	.word	0x08008959
 80083bc:	0800896d 	.word	0x0800896d
 80083c0:	08008981 	.word	0x08008981
 80083c4:	08008995 	.word	0x08008995
 80083c8:	080089a9 	.word	0x080089a9
 80083cc:	080089bd 	.word	0x080089bd
 80083d0:	08001c09 	.word	0x08001c09

080083d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08c      	sub	sp, #48	; 0x30
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
 80083e0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80083e2:	2301      	movs	r3, #1
 80083e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d004      	beq.n	80083fe <HAL_SPI_TransmitReceive+0x2a>
 80083f4:	f240 417c 	movw	r1, #1148	; 0x47c
 80083f8:	4884      	ldr	r0, [pc, #528]	; (800860c <HAL_SPI_TransmitReceive+0x238>)
 80083fa:	f7f9 fbc4 	bl	8001b86 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008404:	2b01      	cmp	r3, #1
 8008406:	d101      	bne.n	800840c <HAL_SPI_TransmitReceive+0x38>
 8008408:	2302      	movs	r3, #2
 800840a:	e18d      	b.n	8008728 <HAL_SPI_TransmitReceive+0x354>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008414:	f7f9 ff96 	bl	8002344 <HAL_GetTick>
 8008418:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008420:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800842a:	887b      	ldrh	r3, [r7, #2]
 800842c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800842e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008432:	2b01      	cmp	r3, #1
 8008434:	d00f      	beq.n	8008456 <HAL_SPI_TransmitReceive+0x82>
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800843c:	d107      	bne.n	800844e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d103      	bne.n	800844e <HAL_SPI_TransmitReceive+0x7a>
 8008446:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800844a:	2b04      	cmp	r3, #4
 800844c:	d003      	beq.n	8008456 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 800844e:	2302      	movs	r3, #2
 8008450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008454:	e15e      	b.n	8008714 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d005      	beq.n	8008468 <HAL_SPI_TransmitReceive+0x94>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d002      	beq.n	8008468 <HAL_SPI_TransmitReceive+0x94>
 8008462:	887b      	ldrh	r3, [r7, #2]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d103      	bne.n	8008470 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800846e:	e151      	b.n	8008714 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b04      	cmp	r3, #4
 800847a:	d003      	beq.n	8008484 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2205      	movs	r2, #5
 8008480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	887a      	ldrh	r2, [r7, #2]
 8008494:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	887a      	ldrh	r2, [r7, #2]
 800849a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	887a      	ldrh	r2, [r7, #2]
 80084a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	887a      	ldrh	r2, [r7, #2]
 80084ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c4:	2b40      	cmp	r3, #64	; 0x40
 80084c6:	d007      	beq.n	80084d8 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084e0:	d178      	bne.n	80085d4 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d002      	beq.n	80084f0 <HAL_SPI_TransmitReceive+0x11c>
 80084ea:	8b7b      	ldrh	r3, [r7, #26]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d166      	bne.n	80085be <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f4:	881a      	ldrh	r2, [r3, #0]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008500:	1c9a      	adds	r2, r3, #2
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800850a:	b29b      	uxth	r3, r3
 800850c:	3b01      	subs	r3, #1
 800850e:	b29a      	uxth	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008514:	e053      	b.n	80085be <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b02      	cmp	r3, #2
 8008522:	d11b      	bne.n	800855c <HAL_SPI_TransmitReceive+0x188>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008528:	b29b      	uxth	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	d016      	beq.n	800855c <HAL_SPI_TransmitReceive+0x188>
 800852e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008530:	2b01      	cmp	r3, #1
 8008532:	d113      	bne.n	800855c <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008538:	881a      	ldrh	r2, [r3, #0]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008544:	1c9a      	adds	r2, r3, #2
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800854e:	b29b      	uxth	r3, r3
 8008550:	3b01      	subs	r3, #1
 8008552:	b29a      	uxth	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008558:	2300      	movs	r3, #0
 800855a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	2b01      	cmp	r3, #1
 8008568:	d119      	bne.n	800859e <HAL_SPI_TransmitReceive+0x1ca>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800856e:	b29b      	uxth	r3, r3
 8008570:	2b00      	cmp	r3, #0
 8008572:	d014      	beq.n	800859e <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68da      	ldr	r2, [r3, #12]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857e:	b292      	uxth	r2, r2
 8008580:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008586:	1c9a      	adds	r2, r3, #2
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008590:	b29b      	uxth	r3, r3
 8008592:	3b01      	subs	r3, #1
 8008594:	b29a      	uxth	r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800859a:	2301      	movs	r3, #1
 800859c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800859e:	f7f9 fed1 	bl	8002344 <HAL_GetTick>
 80085a2:	4602      	mov	r2, r0
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d807      	bhi.n	80085be <HAL_SPI_TransmitReceive+0x1ea>
 80085ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b4:	d003      	beq.n	80085be <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80085bc:	e0aa      	b.n	8008714 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1a6      	bne.n	8008516 <HAL_SPI_TransmitReceive+0x142>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1a1      	bne.n	8008516 <HAL_SPI_TransmitReceive+0x142>
 80085d2:	e07f      	b.n	80086d4 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d002      	beq.n	80085e2 <HAL_SPI_TransmitReceive+0x20e>
 80085dc:	8b7b      	ldrh	r3, [r7, #26]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d16e      	bne.n	80086c0 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	330c      	adds	r3, #12
 80085ec:	7812      	ldrb	r2, [r2, #0]
 80085ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085fe:	b29b      	uxth	r3, r3
 8008600:	3b01      	subs	r3, #1
 8008602:	b29a      	uxth	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008608:	e05a      	b.n	80086c0 <HAL_SPI_TransmitReceive+0x2ec>
 800860a:	bf00      	nop
 800860c:	0800bfec 	.word	0x0800bfec
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	f003 0302 	and.w	r3, r3, #2
 800861a:	2b02      	cmp	r3, #2
 800861c:	d11c      	bne.n	8008658 <HAL_SPI_TransmitReceive+0x284>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008622:	b29b      	uxth	r3, r3
 8008624:	2b00      	cmp	r3, #0
 8008626:	d017      	beq.n	8008658 <HAL_SPI_TransmitReceive+0x284>
 8008628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862a:	2b01      	cmp	r3, #1
 800862c:	d114      	bne.n	8008658 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	330c      	adds	r3, #12
 8008638:	7812      	ldrb	r2, [r2, #0]
 800863a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008640:	1c5a      	adds	r2, r3, #1
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800864a:	b29b      	uxth	r3, r3
 800864c:	3b01      	subs	r3, #1
 800864e:	b29a      	uxth	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008654:	2300      	movs	r3, #0
 8008656:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f003 0301 	and.w	r3, r3, #1
 8008662:	2b01      	cmp	r3, #1
 8008664:	d119      	bne.n	800869a <HAL_SPI_TransmitReceive+0x2c6>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800866a:	b29b      	uxth	r3, r3
 800866c:	2b00      	cmp	r3, #0
 800866e:	d014      	beq.n	800869a <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867a:	b2d2      	uxtb	r2, r2
 800867c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008682:	1c5a      	adds	r2, r3, #1
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800868c:	b29b      	uxth	r3, r3
 800868e:	3b01      	subs	r3, #1
 8008690:	b29a      	uxth	r2, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008696:	2301      	movs	r3, #1
 8008698:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800869a:	f7f9 fe53 	bl	8002344 <HAL_GetTick>
 800869e:	4602      	mov	r2, r0
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d803      	bhi.n	80086b2 <HAL_SPI_TransmitReceive+0x2de>
 80086aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b0:	d102      	bne.n	80086b8 <HAL_SPI_TransmitReceive+0x2e4>
 80086b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d103      	bne.n	80086c0 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80086be:	e029      	b.n	8008714 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1a2      	bne.n	8008610 <HAL_SPI_TransmitReceive+0x23c>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d19d      	bne.n	8008610 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f000 fa17 	bl	8008b0c <SPI_EndRxTxTransaction>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d006      	beq.n	80086f2 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2220      	movs	r2, #32
 80086ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80086f0:	e010      	b.n	8008714 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d10b      	bne.n	8008712 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086fa:	2300      	movs	r3, #0
 80086fc:	617b      	str	r3, [r7, #20]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	617b      	str	r3, [r7, #20]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	617b      	str	r3, [r7, #20]
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	e000      	b.n	8008714 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8008712:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008724:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008728:	4618      	mov	r0, r3
 800872a:	3730      	adds	r7, #48	; 0x30
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b088      	sub	sp, #32
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	099b      	lsrs	r3, r3, #6
 800874c:	f003 0301 	and.w	r3, r3, #1
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10f      	bne.n	8008774 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	099b      	lsrs	r3, r3, #6
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	2b00      	cmp	r3, #0
 8008768:	d004      	beq.n	8008774 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	4798      	blx	r3
    return;
 8008772:	e0d8      	b.n	8008926 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	085b      	lsrs	r3, r3, #1
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00a      	beq.n	8008796 <HAL_SPI_IRQHandler+0x66>
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	09db      	lsrs	r3, r3, #7
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	2b00      	cmp	r3, #0
 800878a:	d004      	beq.n	8008796 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	4798      	blx	r3
    return;
 8008794:	e0c7      	b.n	8008926 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	095b      	lsrs	r3, r3, #5
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10c      	bne.n	80087bc <HAL_SPI_IRQHandler+0x8c>
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	099b      	lsrs	r3, r3, #6
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d106      	bne.n	80087bc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	0a1b      	lsrs	r3, r3, #8
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 80b5 	beq.w	8008926 <HAL_SPI_IRQHandler+0x1f6>
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	095b      	lsrs	r3, r3, #5
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 80ae 	beq.w	8008926 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	099b      	lsrs	r3, r3, #6
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d023      	beq.n	800881e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d011      	beq.n	8008806 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e6:	f043 0204 	orr.w	r2, r3, #4
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80087ee:	2300      	movs	r3, #0
 80087f0:	617b      	str	r3, [r7, #20]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	617b      	str	r3, [r7, #20]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	617b      	str	r3, [r7, #20]
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	e00b      	b.n	800881e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008806:	2300      	movs	r3, #0
 8008808:	613b      	str	r3, [r7, #16]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	613b      	str	r3, [r7, #16]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	613b      	str	r3, [r7, #16]
 800881a:	693b      	ldr	r3, [r7, #16]
        return;
 800881c:	e083      	b.n	8008926 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	095b      	lsrs	r3, r3, #5
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	2b00      	cmp	r3, #0
 8008828:	d014      	beq.n	8008854 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800882e:	f043 0201 	orr.w	r2, r3, #1
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008836:	2300      	movs	r3, #0
 8008838:	60fb      	str	r3, [r7, #12]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	60fb      	str	r3, [r7, #12]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008850:	601a      	str	r2, [r3, #0]
 8008852:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	0a1b      	lsrs	r3, r3, #8
 8008858:	f003 0301 	and.w	r3, r3, #1
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00c      	beq.n	800887a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008864:	f043 0208 	orr.w	r2, r3, #8
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800886c:	2300      	movs	r3, #0
 800886e:	60bb      	str	r3, [r7, #8]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	60bb      	str	r3, [r7, #8]
 8008878:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800887e:	2b00      	cmp	r3, #0
 8008880:	d050      	beq.n	8008924 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	685a      	ldr	r2, [r3, #4]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008890:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	f003 0302 	and.w	r3, r3, #2
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d104      	bne.n	80088ae <HAL_SPI_IRQHandler+0x17e>
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d034      	beq.n	8008918 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	685a      	ldr	r2, [r3, #4]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f022 0203 	bic.w	r2, r2, #3
 80088bc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d011      	beq.n	80088ea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ca:	4a18      	ldr	r2, [pc, #96]	; (800892c <HAL_SPI_IRQHandler+0x1fc>)
 80088cc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fb ff66 	bl	80047a4 <HAL_DMA_Abort_IT>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d005      	beq.n	80088ea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d017      	beq.n	8008922 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088f6:	4a0d      	ldr	r2, [pc, #52]	; (800892c <HAL_SPI_IRQHandler+0x1fc>)
 80088f8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fb ff50 	bl	80047a4 <HAL_DMA_Abort_IT>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d00b      	beq.n	8008922 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800890e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008916:	e004      	b.n	8008922 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008920:	e000      	b.n	8008924 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8008922:	bf00      	nop
    return;
 8008924:	bf00      	nop
  }
}
 8008926:	3720      	adds	r7, #32
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	080089d1 	.word	0x080089d1

08008930 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800894c:	bf00      	nop
 800894e:	370c      	adds	r7, #12
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr

08008958 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008958:	b480      	push	{r7}
 800895a:	b083      	sub	sp, #12
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800899c:	bf00      	nop
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80089b0:	bf00      	nop
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089dc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80089f2:	bf00      	nop
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
	...

080089fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b088      	sub	sp, #32
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	603b      	str	r3, [r7, #0]
 8008a08:	4613      	mov	r3, r2
 8008a0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008a0c:	f7f9 fc9a 	bl	8002344 <HAL_GetTick>
 8008a10:	4602      	mov	r2, r0
 8008a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a14:	1a9b      	subs	r3, r3, r2
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	4413      	add	r3, r2
 8008a1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008a1c:	f7f9 fc92 	bl	8002344 <HAL_GetTick>
 8008a20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008a22:	4b39      	ldr	r3, [pc, #228]	; (8008b08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	015b      	lsls	r3, r3, #5
 8008a28:	0d1b      	lsrs	r3, r3, #20
 8008a2a:	69fa      	ldr	r2, [r7, #28]
 8008a2c:	fb02 f303 	mul.w	r3, r2, r3
 8008a30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a32:	e054      	b.n	8008ade <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3a:	d050      	beq.n	8008ade <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a3c:	f7f9 fc82 	bl	8002344 <HAL_GetTick>
 8008a40:	4602      	mov	r2, r0
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	69fa      	ldr	r2, [r7, #28]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d902      	bls.n	8008a52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d13d      	bne.n	8008ace <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008a60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a6a:	d111      	bne.n	8008a90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a74:	d004      	beq.n	8008a80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a7e:	d107      	bne.n	8008a90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a98:	d10f      	bne.n	8008aba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ab8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2201      	movs	r2, #1
 8008abe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e017      	b.n	8008afe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	3b01      	subs	r3, #1
 8008adc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	689a      	ldr	r2, [r3, #8]
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	bf0c      	ite	eq
 8008aee:	2301      	moveq	r3, #1
 8008af0:	2300      	movne	r3, #0
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	461a      	mov	r2, r3
 8008af6:	79fb      	ldrb	r3, [r7, #7]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d19b      	bne.n	8008a34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3720      	adds	r7, #32
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	20000000 	.word	0x20000000

08008b0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b088      	sub	sp, #32
 8008b10:	af02      	add	r7, sp, #8
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008b18:	4b1b      	ldr	r3, [pc, #108]	; (8008b88 <SPI_EndRxTxTransaction+0x7c>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a1b      	ldr	r2, [pc, #108]	; (8008b8c <SPI_EndRxTxTransaction+0x80>)
 8008b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b22:	0d5b      	lsrs	r3, r3, #21
 8008b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008b28:	fb02 f303 	mul.w	r3, r2, r3
 8008b2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b36:	d112      	bne.n	8008b5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	2180      	movs	r1, #128	; 0x80
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f7ff ff5a 	bl	80089fc <SPI_WaitFlagStateUntilTimeout>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d016      	beq.n	8008b7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b52:	f043 0220 	orr.w	r2, r3, #32
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e00f      	b.n	8008b7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00a      	beq.n	8008b7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	3b01      	subs	r3, #1
 8008b68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b74:	2b80      	cmp	r3, #128	; 0x80
 8008b76:	d0f2      	beq.n	8008b5e <SPI_EndRxTxTransaction+0x52>
 8008b78:	e000      	b.n	8008b7c <SPI_EndRxTxTransaction+0x70>
        break;
 8008b7a:	bf00      	nop
  }

  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3718      	adds	r7, #24
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	20000000 	.word	0x20000000
 8008b8c:	165e9f81 	.word	0x165e9f81

08008b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e0c5      	b.n	8008d2e <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a64      	ldr	r2, [pc, #400]	; (8008d38 <HAL_TIM_Base_Init+0x1a8>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d045      	beq.n	8008c38 <HAL_TIM_Base_Init+0xa8>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bb4:	d040      	beq.n	8008c38 <HAL_TIM_Base_Init+0xa8>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a60      	ldr	r2, [pc, #384]	; (8008d3c <HAL_TIM_Base_Init+0x1ac>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d03b      	beq.n	8008c38 <HAL_TIM_Base_Init+0xa8>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a5e      	ldr	r2, [pc, #376]	; (8008d40 <HAL_TIM_Base_Init+0x1b0>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d036      	beq.n	8008c38 <HAL_TIM_Base_Init+0xa8>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a5d      	ldr	r2, [pc, #372]	; (8008d44 <HAL_TIM_Base_Init+0x1b4>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d031      	beq.n	8008c38 <HAL_TIM_Base_Init+0xa8>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a5b      	ldr	r2, [pc, #364]	; (8008d48 <HAL_TIM_Base_Init+0x1b8>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d02c      	beq.n	8008c38 <HAL_TIM_Base_Init+0xa8>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a5a      	ldr	r2, [pc, #360]	; (8008d4c <HAL_TIM_Base_Init+0x1bc>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d027      	beq.n	8008c38 <HAL_TIM_Base_Init+0xa8>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a58      	ldr	r2, [pc, #352]	; (8008d50 <HAL_TIM_Base_Init+0x1c0>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d022      	beq.n	8008c38 <HAL_TIM_Base_Init+0xa8>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a57      	ldr	r2, [pc, #348]	; (8008d54 <HAL_TIM_Base_Init+0x1c4>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d01d      	beq.n	8008c38 <HAL_TIM_Base_Init+0xa8>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a55      	ldr	r2, [pc, #340]	; (8008d58 <HAL_TIM_Base_Init+0x1c8>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d018      	beq.n	8008c38 <HAL_TIM_Base_Init+0xa8>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a54      	ldr	r2, [pc, #336]	; (8008d5c <HAL_TIM_Base_Init+0x1cc>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d013      	beq.n	8008c38 <HAL_TIM_Base_Init+0xa8>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a52      	ldr	r2, [pc, #328]	; (8008d60 <HAL_TIM_Base_Init+0x1d0>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d00e      	beq.n	8008c38 <HAL_TIM_Base_Init+0xa8>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a51      	ldr	r2, [pc, #324]	; (8008d64 <HAL_TIM_Base_Init+0x1d4>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d009      	beq.n	8008c38 <HAL_TIM_Base_Init+0xa8>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a4f      	ldr	r2, [pc, #316]	; (8008d68 <HAL_TIM_Base_Init+0x1d8>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d004      	beq.n	8008c38 <HAL_TIM_Base_Init+0xa8>
 8008c2e:	f240 1113 	movw	r1, #275	; 0x113
 8008c32:	484e      	ldr	r0, [pc, #312]	; (8008d6c <HAL_TIM_Base_Init+0x1dc>)
 8008c34:	f7f8 ffa7 	bl	8001b86 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d014      	beq.n	8008c6a <HAL_TIM_Base_Init+0xda>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	2b10      	cmp	r3, #16
 8008c46:	d010      	beq.n	8008c6a <HAL_TIM_Base_Init+0xda>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	2b20      	cmp	r3, #32
 8008c4e:	d00c      	beq.n	8008c6a <HAL_TIM_Base_Init+0xda>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	2b40      	cmp	r3, #64	; 0x40
 8008c56:	d008      	beq.n	8008c6a <HAL_TIM_Base_Init+0xda>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	2b60      	cmp	r3, #96	; 0x60
 8008c5e:	d004      	beq.n	8008c6a <HAL_TIM_Base_Init+0xda>
 8008c60:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008c64:	4841      	ldr	r0, [pc, #260]	; (8008d6c <HAL_TIM_Base_Init+0x1dc>)
 8008c66:	f7f8 ff8e 	bl	8001b86 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00e      	beq.n	8008c90 <HAL_TIM_Base_Init+0x100>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c7a:	d009      	beq.n	8008c90 <HAL_TIM_Base_Init+0x100>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c84:	d004      	beq.n	8008c90 <HAL_TIM_Base_Init+0x100>
 8008c86:	f240 1115 	movw	r1, #277	; 0x115
 8008c8a:	4838      	ldr	r0, [pc, #224]	; (8008d6c <HAL_TIM_Base_Init+0x1dc>)
 8008c8c:	f7f8 ff7b 	bl	8001b86 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	699b      	ldr	r3, [r3, #24]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d008      	beq.n	8008caa <HAL_TIM_Base_Init+0x11a>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	2b80      	cmp	r3, #128	; 0x80
 8008c9e:	d004      	beq.n	8008caa <HAL_TIM_Base_Init+0x11a>
 8008ca0:	f44f 718b 	mov.w	r1, #278	; 0x116
 8008ca4:	4831      	ldr	r0, [pc, #196]	; (8008d6c <HAL_TIM_Base_Init+0x1dc>)
 8008ca6:	f7f8 ff6e 	bl	8001b86 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d106      	bne.n	8008cc4 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f856 	bl	8008d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	3304      	adds	r3, #4
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	4610      	mov	r0, r2
 8008cd8:	f000 fa4a 	bl	8009170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	40010000 	.word	0x40010000
 8008d3c:	40000400 	.word	0x40000400
 8008d40:	40000800 	.word	0x40000800
 8008d44:	40000c00 	.word	0x40000c00
 8008d48:	40001000 	.word	0x40001000
 8008d4c:	40001400 	.word	0x40001400
 8008d50:	40010400 	.word	0x40010400
 8008d54:	40014000 	.word	0x40014000
 8008d58:	40014400 	.word	0x40014400
 8008d5c:	40014800 	.word	0x40014800
 8008d60:	40001800 	.word	0x40001800
 8008d64:	40001c00 	.word	0x40001c00
 8008d68:	40002000 	.word	0x40002000
 8008d6c:	0800c024 	.word	0x0800c024

08008d70 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a51      	ldr	r2, [pc, #324]	; (8008ed8 <HAL_TIM_Base_Start_IT+0x154>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d045      	beq.n	8008e22 <HAL_TIM_Base_Start_IT+0x9e>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d9e:	d040      	beq.n	8008e22 <HAL_TIM_Base_Start_IT+0x9e>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a4d      	ldr	r2, [pc, #308]	; (8008edc <HAL_TIM_Base_Start_IT+0x158>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d03b      	beq.n	8008e22 <HAL_TIM_Base_Start_IT+0x9e>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a4c      	ldr	r2, [pc, #304]	; (8008ee0 <HAL_TIM_Base_Start_IT+0x15c>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d036      	beq.n	8008e22 <HAL_TIM_Base_Start_IT+0x9e>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a4a      	ldr	r2, [pc, #296]	; (8008ee4 <HAL_TIM_Base_Start_IT+0x160>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d031      	beq.n	8008e22 <HAL_TIM_Base_Start_IT+0x9e>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a49      	ldr	r2, [pc, #292]	; (8008ee8 <HAL_TIM_Base_Start_IT+0x164>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d02c      	beq.n	8008e22 <HAL_TIM_Base_Start_IT+0x9e>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a47      	ldr	r2, [pc, #284]	; (8008eec <HAL_TIM_Base_Start_IT+0x168>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d027      	beq.n	8008e22 <HAL_TIM_Base_Start_IT+0x9e>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a46      	ldr	r2, [pc, #280]	; (8008ef0 <HAL_TIM_Base_Start_IT+0x16c>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d022      	beq.n	8008e22 <HAL_TIM_Base_Start_IT+0x9e>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a44      	ldr	r2, [pc, #272]	; (8008ef4 <HAL_TIM_Base_Start_IT+0x170>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d01d      	beq.n	8008e22 <HAL_TIM_Base_Start_IT+0x9e>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a43      	ldr	r2, [pc, #268]	; (8008ef8 <HAL_TIM_Base_Start_IT+0x174>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d018      	beq.n	8008e22 <HAL_TIM_Base_Start_IT+0x9e>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a41      	ldr	r2, [pc, #260]	; (8008efc <HAL_TIM_Base_Start_IT+0x178>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d013      	beq.n	8008e22 <HAL_TIM_Base_Start_IT+0x9e>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a40      	ldr	r2, [pc, #256]	; (8008f00 <HAL_TIM_Base_Start_IT+0x17c>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d00e      	beq.n	8008e22 <HAL_TIM_Base_Start_IT+0x9e>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a3e      	ldr	r2, [pc, #248]	; (8008f04 <HAL_TIM_Base_Start_IT+0x180>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d009      	beq.n	8008e22 <HAL_TIM_Base_Start_IT+0x9e>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a3d      	ldr	r2, [pc, #244]	; (8008f08 <HAL_TIM_Base_Start_IT+0x184>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d004      	beq.n	8008e22 <HAL_TIM_Base_Start_IT+0x9e>
 8008e18:	f240 11cf 	movw	r1, #463	; 0x1cf
 8008e1c:	483b      	ldr	r0, [pc, #236]	; (8008f0c <HAL_TIM_Base_Start_IT+0x188>)
 8008e1e:	f7f8 feb2 	bl	8001b86 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d001      	beq.n	8008e32 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e04e      	b.n	8008ed0 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2202      	movs	r2, #2
 8008e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68da      	ldr	r2, [r3, #12]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f042 0201 	orr.w	r2, r2, #1
 8008e48:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a22      	ldr	r2, [pc, #136]	; (8008ed8 <HAL_TIM_Base_Start_IT+0x154>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d022      	beq.n	8008e9a <HAL_TIM_Base_Start_IT+0x116>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e5c:	d01d      	beq.n	8008e9a <HAL_TIM_Base_Start_IT+0x116>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a1e      	ldr	r2, [pc, #120]	; (8008edc <HAL_TIM_Base_Start_IT+0x158>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d018      	beq.n	8008e9a <HAL_TIM_Base_Start_IT+0x116>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a1c      	ldr	r2, [pc, #112]	; (8008ee0 <HAL_TIM_Base_Start_IT+0x15c>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d013      	beq.n	8008e9a <HAL_TIM_Base_Start_IT+0x116>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a1b      	ldr	r2, [pc, #108]	; (8008ee4 <HAL_TIM_Base_Start_IT+0x160>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d00e      	beq.n	8008e9a <HAL_TIM_Base_Start_IT+0x116>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a1b      	ldr	r2, [pc, #108]	; (8008ef0 <HAL_TIM_Base_Start_IT+0x16c>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d009      	beq.n	8008e9a <HAL_TIM_Base_Start_IT+0x116>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a1a      	ldr	r2, [pc, #104]	; (8008ef4 <HAL_TIM_Base_Start_IT+0x170>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d004      	beq.n	8008e9a <HAL_TIM_Base_Start_IT+0x116>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a1a      	ldr	r2, [pc, #104]	; (8008f00 <HAL_TIM_Base_Start_IT+0x17c>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d111      	bne.n	8008ebe <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f003 0307 	and.w	r3, r3, #7
 8008ea4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2b06      	cmp	r3, #6
 8008eaa:	d010      	beq.n	8008ece <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f042 0201 	orr.w	r2, r2, #1
 8008eba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ebc:	e007      	b.n	8008ece <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f042 0201 	orr.w	r2, r2, #1
 8008ecc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	40010000 	.word	0x40010000
 8008edc:	40000400 	.word	0x40000400
 8008ee0:	40000800 	.word	0x40000800
 8008ee4:	40000c00 	.word	0x40000c00
 8008ee8:	40001000 	.word	0x40001000
 8008eec:	40001400 	.word	0x40001400
 8008ef0:	40010400 	.word	0x40010400
 8008ef4:	40014000 	.word	0x40014000
 8008ef8:	40014400 	.word	0x40014400
 8008efc:	40014800 	.word	0x40014800
 8008f00:	40001800 	.word	0x40001800
 8008f04:	40001c00 	.word	0x40001c00
 8008f08:	40002000 	.word	0x40002000
 8008f0c:	0800c024 	.word	0x0800c024

08008f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	f003 0302 	and.w	r3, r3, #2
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d122      	bne.n	8008f6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	f003 0302 	and.w	r3, r3, #2
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d11b      	bne.n	8008f6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f06f 0202 	mvn.w	r2, #2
 8008f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	699b      	ldr	r3, [r3, #24]
 8008f4a:	f003 0303 	and.w	r3, r3, #3
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d003      	beq.n	8008f5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f8ee 	bl	8009134 <HAL_TIM_IC_CaptureCallback>
 8008f58:	e005      	b.n	8008f66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f8e0 	bl	8009120 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f8f1 	bl	8009148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	f003 0304 	and.w	r3, r3, #4
 8008f76:	2b04      	cmp	r3, #4
 8008f78:	d122      	bne.n	8008fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	f003 0304 	and.w	r3, r3, #4
 8008f84:	2b04      	cmp	r3, #4
 8008f86:	d11b      	bne.n	8008fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f06f 0204 	mvn.w	r2, #4
 8008f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2202      	movs	r2, #2
 8008f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d003      	beq.n	8008fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f8c4 	bl	8009134 <HAL_TIM_IC_CaptureCallback>
 8008fac:	e005      	b.n	8008fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f8b6 	bl	8009120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f8c7 	bl	8009148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	f003 0308 	and.w	r3, r3, #8
 8008fca:	2b08      	cmp	r3, #8
 8008fcc:	d122      	bne.n	8009014 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	f003 0308 	and.w	r3, r3, #8
 8008fd8:	2b08      	cmp	r3, #8
 8008fda:	d11b      	bne.n	8009014 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f06f 0208 	mvn.w	r2, #8
 8008fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2204      	movs	r2, #4
 8008fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	f003 0303 	and.w	r3, r3, #3
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d003      	beq.n	8009002 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f89a 	bl	8009134 <HAL_TIM_IC_CaptureCallback>
 8009000:	e005      	b.n	800900e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f88c 	bl	8009120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 f89d 	bl	8009148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	f003 0310 	and.w	r3, r3, #16
 800901e:	2b10      	cmp	r3, #16
 8009020:	d122      	bne.n	8009068 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	f003 0310 	and.w	r3, r3, #16
 800902c:	2b10      	cmp	r3, #16
 800902e:	d11b      	bne.n	8009068 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f06f 0210 	mvn.w	r2, #16
 8009038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2208      	movs	r2, #8
 800903e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f870 	bl	8009134 <HAL_TIM_IC_CaptureCallback>
 8009054:	e005      	b.n	8009062 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 f862 	bl	8009120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f873 	bl	8009148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	2b01      	cmp	r3, #1
 8009074:	d10e      	bne.n	8009094 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	f003 0301 	and.w	r3, r3, #1
 8009080:	2b01      	cmp	r3, #1
 8009082:	d107      	bne.n	8009094 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f06f 0201 	mvn.w	r2, #1
 800908c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f7f8 fd62 	bl	8001b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800909e:	2b80      	cmp	r3, #128	; 0x80
 80090a0:	d10e      	bne.n	80090c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ac:	2b80      	cmp	r3, #128	; 0x80
 80090ae:	d107      	bne.n	80090c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80090b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f902 	bl	80092c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ca:	2b40      	cmp	r3, #64	; 0x40
 80090cc:	d10e      	bne.n	80090ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090d8:	2b40      	cmp	r3, #64	; 0x40
 80090da:	d107      	bne.n	80090ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80090e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f838 	bl	800915c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	f003 0320 	and.w	r3, r3, #32
 80090f6:	2b20      	cmp	r3, #32
 80090f8:	d10e      	bne.n	8009118 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	f003 0320 	and.w	r3, r3, #32
 8009104:	2b20      	cmp	r3, #32
 8009106:	d107      	bne.n	8009118 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f06f 0220 	mvn.w	r2, #32
 8009110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f8cc 	bl	80092b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009128:	bf00      	nop
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800913c:	bf00      	nop
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009164:	bf00      	nop
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a40      	ldr	r2, [pc, #256]	; (8009284 <TIM_Base_SetConfig+0x114>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d013      	beq.n	80091b0 <TIM_Base_SetConfig+0x40>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800918e:	d00f      	beq.n	80091b0 <TIM_Base_SetConfig+0x40>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a3d      	ldr	r2, [pc, #244]	; (8009288 <TIM_Base_SetConfig+0x118>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d00b      	beq.n	80091b0 <TIM_Base_SetConfig+0x40>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a3c      	ldr	r2, [pc, #240]	; (800928c <TIM_Base_SetConfig+0x11c>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d007      	beq.n	80091b0 <TIM_Base_SetConfig+0x40>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a3b      	ldr	r2, [pc, #236]	; (8009290 <TIM_Base_SetConfig+0x120>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d003      	beq.n	80091b0 <TIM_Base_SetConfig+0x40>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a3a      	ldr	r2, [pc, #232]	; (8009294 <TIM_Base_SetConfig+0x124>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d108      	bne.n	80091c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	4313      	orrs	r3, r2
 80091c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a2f      	ldr	r2, [pc, #188]	; (8009284 <TIM_Base_SetConfig+0x114>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d02b      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091d0:	d027      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a2c      	ldr	r2, [pc, #176]	; (8009288 <TIM_Base_SetConfig+0x118>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d023      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a2b      	ldr	r2, [pc, #172]	; (800928c <TIM_Base_SetConfig+0x11c>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d01f      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a2a      	ldr	r2, [pc, #168]	; (8009290 <TIM_Base_SetConfig+0x120>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d01b      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a29      	ldr	r2, [pc, #164]	; (8009294 <TIM_Base_SetConfig+0x124>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d017      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a28      	ldr	r2, [pc, #160]	; (8009298 <TIM_Base_SetConfig+0x128>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d013      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a27      	ldr	r2, [pc, #156]	; (800929c <TIM_Base_SetConfig+0x12c>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d00f      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a26      	ldr	r2, [pc, #152]	; (80092a0 <TIM_Base_SetConfig+0x130>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d00b      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a25      	ldr	r2, [pc, #148]	; (80092a4 <TIM_Base_SetConfig+0x134>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d007      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a24      	ldr	r2, [pc, #144]	; (80092a8 <TIM_Base_SetConfig+0x138>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d003      	beq.n	8009222 <TIM_Base_SetConfig+0xb2>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a23      	ldr	r2, [pc, #140]	; (80092ac <TIM_Base_SetConfig+0x13c>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d108      	bne.n	8009234 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	4313      	orrs	r3, r2
 8009232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	4313      	orrs	r3, r2
 8009240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	689a      	ldr	r2, [r3, #8]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a0a      	ldr	r2, [pc, #40]	; (8009284 <TIM_Base_SetConfig+0x114>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d003      	beq.n	8009268 <TIM_Base_SetConfig+0xf8>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a0c      	ldr	r2, [pc, #48]	; (8009294 <TIM_Base_SetConfig+0x124>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d103      	bne.n	8009270 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	691a      	ldr	r2, [r3, #16]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	615a      	str	r2, [r3, #20]
}
 8009276:	bf00      	nop
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	40010000 	.word	0x40010000
 8009288:	40000400 	.word	0x40000400
 800928c:	40000800 	.word	0x40000800
 8009290:	40000c00 	.word	0x40000c00
 8009294:	40010400 	.word	0x40010400
 8009298:	40014000 	.word	0x40014000
 800929c:	40014400 	.word	0x40014400
 80092a0:	40014800 	.word	0x40014800
 80092a4:	40001800 	.word	0x40001800
 80092a8:	40001c00 	.word	0x40001c00
 80092ac:	40002000 	.word	0x40002000

080092b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80092b8:	bf00      	nop
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80092cc:	bf00      	nop
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d101      	bne.n	80092ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	e0be      	b.n	8009468 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d03b      	beq.n	800936a <HAL_UART_Init+0x92>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a5e      	ldr	r2, [pc, #376]	; (8009470 <HAL_UART_Init+0x198>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d01d      	beq.n	8009338 <HAL_UART_Init+0x60>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a5c      	ldr	r2, [pc, #368]	; (8009474 <HAL_UART_Init+0x19c>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d018      	beq.n	8009338 <HAL_UART_Init+0x60>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a5b      	ldr	r2, [pc, #364]	; (8009478 <HAL_UART_Init+0x1a0>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d013      	beq.n	8009338 <HAL_UART_Init+0x60>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a59      	ldr	r2, [pc, #356]	; (800947c <HAL_UART_Init+0x1a4>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d00e      	beq.n	8009338 <HAL_UART_Init+0x60>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a58      	ldr	r2, [pc, #352]	; (8009480 <HAL_UART_Init+0x1a8>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d009      	beq.n	8009338 <HAL_UART_Init+0x60>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a56      	ldr	r2, [pc, #344]	; (8009484 <HAL_UART_Init+0x1ac>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d004      	beq.n	8009338 <HAL_UART_Init+0x60>
 800932e:	f240 1173 	movw	r1, #371	; 0x173
 8009332:	4855      	ldr	r0, [pc, #340]	; (8009488 <HAL_UART_Init+0x1b0>)
 8009334:	f7f8 fc27 	bl	8001b86 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d037      	beq.n	80093b0 <HAL_UART_Init+0xd8>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009348:	d032      	beq.n	80093b0 <HAL_UART_Init+0xd8>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009352:	d02d      	beq.n	80093b0 <HAL_UART_Init+0xd8>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	699b      	ldr	r3, [r3, #24]
 8009358:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800935c:	d028      	beq.n	80093b0 <HAL_UART_Init+0xd8>
 800935e:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8009362:	4849      	ldr	r0, [pc, #292]	; (8009488 <HAL_UART_Init+0x1b0>)
 8009364:	f7f8 fc0f 	bl	8001b86 <assert_failed>
 8009368:	e022      	b.n	80093b0 <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a40      	ldr	r2, [pc, #256]	; (8009470 <HAL_UART_Init+0x198>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d01d      	beq.n	80093b0 <HAL_UART_Init+0xd8>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a3e      	ldr	r2, [pc, #248]	; (8009474 <HAL_UART_Init+0x19c>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d018      	beq.n	80093b0 <HAL_UART_Init+0xd8>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a3d      	ldr	r2, [pc, #244]	; (8009478 <HAL_UART_Init+0x1a0>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d013      	beq.n	80093b0 <HAL_UART_Init+0xd8>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a3b      	ldr	r2, [pc, #236]	; (800947c <HAL_UART_Init+0x1a4>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d00e      	beq.n	80093b0 <HAL_UART_Init+0xd8>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a3a      	ldr	r2, [pc, #232]	; (8009480 <HAL_UART_Init+0x1a8>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d009      	beq.n	80093b0 <HAL_UART_Init+0xd8>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a38      	ldr	r2, [pc, #224]	; (8009484 <HAL_UART_Init+0x1ac>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d004      	beq.n	80093b0 <HAL_UART_Init+0xd8>
 80093a6:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80093aa:	4837      	ldr	r0, [pc, #220]	; (8009488 <HAL_UART_Init+0x1b0>)
 80093ac:	f7f8 fbeb 	bl	8001b86 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d009      	beq.n	80093cc <HAL_UART_Init+0xf4>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093c0:	d004      	beq.n	80093cc <HAL_UART_Init+0xf4>
 80093c2:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 80093c6:	4830      	ldr	r0, [pc, #192]	; (8009488 <HAL_UART_Init+0x1b0>)
 80093c8:	f7f8 fbdd 	bl	8001b86 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	69db      	ldr	r3, [r3, #28]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d009      	beq.n	80093e8 <HAL_UART_Init+0x110>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	69db      	ldr	r3, [r3, #28]
 80093d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093dc:	d004      	beq.n	80093e8 <HAL_UART_Init+0x110>
 80093de:	f240 117b 	movw	r1, #379	; 0x17b
 80093e2:	4829      	ldr	r0, [pc, #164]	; (8009488 <HAL_UART_Init+0x1b0>)
 80093e4:	f7f8 fbcf 	bl	8001b86 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d106      	bne.n	8009402 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7f8 fe77 	bl	80020f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2224      	movs	r2, #36	; 0x24
 8009406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68da      	ldr	r2, [r3, #12]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009418:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f836 	bl	800948c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	691a      	ldr	r2, [r3, #16]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800942e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	695a      	ldr	r2, [r3, #20]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800943e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68da      	ldr	r2, [r3, #12]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800944e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2220      	movs	r2, #32
 800945a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2220      	movs	r2, #32
 8009462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	40011000 	.word	0x40011000
 8009474:	40004400 	.word	0x40004400
 8009478:	40004800 	.word	0x40004800
 800947c:	40004c00 	.word	0x40004c00
 8009480:	40005000 	.word	0x40005000
 8009484:	40011400 	.word	0x40011400
 8009488:	0800c05c 	.word	0x0800c05c

0800948c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800948c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009490:	b0c0      	sub	sp, #256	; 0x100
 8009492:	af00      	add	r7, sp, #0
 8009494:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8009498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800949c:	685a      	ldr	r2, [r3, #4]
 800949e:	4bcf      	ldr	r3, [pc, #828]	; (80097dc <UART_SetConfig+0x350>)
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d904      	bls.n	80094ae <UART_SetConfig+0x22>
 80094a4:	f640 6161 	movw	r1, #3681	; 0xe61
 80094a8:	48cd      	ldr	r0, [pc, #820]	; (80097e0 <UART_SetConfig+0x354>)
 80094aa:	f7f8 fb6c 	bl	8001b86 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80094ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00a      	beq.n	80094ce <UART_SetConfig+0x42>
 80094b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094c2:	d004      	beq.n	80094ce <UART_SetConfig+0x42>
 80094c4:	f640 6162 	movw	r1, #3682	; 0xe62
 80094c8:	48c5      	ldr	r0, [pc, #788]	; (80097e0 <UART_SetConfig+0x354>)
 80094ca:	f7f8 fb5c 	bl	8001b86 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80094ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d010      	beq.n	80094fa <UART_SetConfig+0x6e>
 80094d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094e2:	d00a      	beq.n	80094fa <UART_SetConfig+0x6e>
 80094e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80094ee:	d004      	beq.n	80094fa <UART_SetConfig+0x6e>
 80094f0:	f640 6163 	movw	r1, #3683	; 0xe63
 80094f4:	48ba      	ldr	r0, [pc, #744]	; (80097e0 <UART_SetConfig+0x354>)
 80094f6:	f7f8 fb46 	bl	8001b86 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80094fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094fe:	695a      	ldr	r2, [r3, #20]
 8009500:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8009504:	4013      	ands	r3, r2
 8009506:	2b00      	cmp	r3, #0
 8009508:	d104      	bne.n	8009514 <UART_SetConfig+0x88>
 800950a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800950e:	695b      	ldr	r3, [r3, #20]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d104      	bne.n	800951e <UART_SetConfig+0x92>
 8009514:	f640 6164 	movw	r1, #3684	; 0xe64
 8009518:	48b1      	ldr	r0, [pc, #708]	; (80097e0 <UART_SetConfig+0x354>)
 800951a:	f7f8 fb34 	bl	8001b86 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800951e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800952a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800952e:	68d9      	ldr	r1, [r3, #12]
 8009530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	ea40 0301 	orr.w	r3, r0, r1
 800953a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800953c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009540:	689a      	ldr	r2, [r3, #8]
 8009542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	431a      	orrs	r2, r3
 800954a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800954e:	695b      	ldr	r3, [r3, #20]
 8009550:	431a      	orrs	r2, r3
 8009552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009556:	69db      	ldr	r3, [r3, #28]
 8009558:	4313      	orrs	r3, r2
 800955a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800955e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800956a:	f021 010c 	bic.w	r1, r1, #12
 800956e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009578:	430b      	orrs	r3, r1
 800957a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800957c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	695b      	ldr	r3, [r3, #20]
 8009584:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800958c:	6999      	ldr	r1, [r3, #24]
 800958e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	ea40 0301 	orr.w	r3, r0, r1
 8009598:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800959a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	4b90      	ldr	r3, [pc, #576]	; (80097e4 <UART_SetConfig+0x358>)
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d005      	beq.n	80095b2 <UART_SetConfig+0x126>
 80095a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	4b8e      	ldr	r3, [pc, #568]	; (80097e8 <UART_SetConfig+0x35c>)
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d104      	bne.n	80095bc <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80095b2:	f7fd ff77 	bl	80074a4 <HAL_RCC_GetPCLK2Freq>
 80095b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80095ba:	e003      	b.n	80095c4 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80095bc:	f7fd ff5e 	bl	800747c <HAL_RCC_GetPCLK1Freq>
 80095c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095c8:	69db      	ldr	r3, [r3, #28]
 80095ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095ce:	f040 810f 	bne.w	80097f0 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095d6:	2200      	movs	r2, #0
 80095d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095dc:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80095e0:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80095e4:	4622      	mov	r2, r4
 80095e6:	462b      	mov	r3, r5
 80095e8:	1891      	adds	r1, r2, r2
 80095ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80095ec:	415b      	adcs	r3, r3
 80095ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80095f4:	4621      	mov	r1, r4
 80095f6:	eb12 0801 	adds.w	r8, r2, r1
 80095fa:	4629      	mov	r1, r5
 80095fc:	eb43 0901 	adc.w	r9, r3, r1
 8009600:	f04f 0200 	mov.w	r2, #0
 8009604:	f04f 0300 	mov.w	r3, #0
 8009608:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800960c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009610:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009614:	4690      	mov	r8, r2
 8009616:	4699      	mov	r9, r3
 8009618:	4623      	mov	r3, r4
 800961a:	eb18 0303 	adds.w	r3, r8, r3
 800961e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009622:	462b      	mov	r3, r5
 8009624:	eb49 0303 	adc.w	r3, r9, r3
 8009628:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800962c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009638:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800963c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009640:	460b      	mov	r3, r1
 8009642:	18db      	adds	r3, r3, r3
 8009644:	653b      	str	r3, [r7, #80]	; 0x50
 8009646:	4613      	mov	r3, r2
 8009648:	eb42 0303 	adc.w	r3, r2, r3
 800964c:	657b      	str	r3, [r7, #84]	; 0x54
 800964e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009652:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009656:	f7f7 f961 	bl	800091c <__aeabi_uldivmod>
 800965a:	4602      	mov	r2, r0
 800965c:	460b      	mov	r3, r1
 800965e:	4b63      	ldr	r3, [pc, #396]	; (80097ec <UART_SetConfig+0x360>)
 8009660:	fba3 2302 	umull	r2, r3, r3, r2
 8009664:	095b      	lsrs	r3, r3, #5
 8009666:	011c      	lsls	r4, r3, #4
 8009668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800966c:	2200      	movs	r2, #0
 800966e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009672:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009676:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800967a:	4642      	mov	r2, r8
 800967c:	464b      	mov	r3, r9
 800967e:	1891      	adds	r1, r2, r2
 8009680:	64b9      	str	r1, [r7, #72]	; 0x48
 8009682:	415b      	adcs	r3, r3
 8009684:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009686:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800968a:	4641      	mov	r1, r8
 800968c:	eb12 0a01 	adds.w	sl, r2, r1
 8009690:	4649      	mov	r1, r9
 8009692:	eb43 0b01 	adc.w	fp, r3, r1
 8009696:	f04f 0200 	mov.w	r2, #0
 800969a:	f04f 0300 	mov.w	r3, #0
 800969e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80096a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80096a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096aa:	4692      	mov	sl, r2
 80096ac:	469b      	mov	fp, r3
 80096ae:	4643      	mov	r3, r8
 80096b0:	eb1a 0303 	adds.w	r3, sl, r3
 80096b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80096b8:	464b      	mov	r3, r9
 80096ba:	eb4b 0303 	adc.w	r3, fp, r3
 80096be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80096c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096ce:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80096d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80096d6:	460b      	mov	r3, r1
 80096d8:	18db      	adds	r3, r3, r3
 80096da:	643b      	str	r3, [r7, #64]	; 0x40
 80096dc:	4613      	mov	r3, r2
 80096de:	eb42 0303 	adc.w	r3, r2, r3
 80096e2:	647b      	str	r3, [r7, #68]	; 0x44
 80096e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80096e8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80096ec:	f7f7 f916 	bl	800091c <__aeabi_uldivmod>
 80096f0:	4602      	mov	r2, r0
 80096f2:	460b      	mov	r3, r1
 80096f4:	4611      	mov	r1, r2
 80096f6:	4b3d      	ldr	r3, [pc, #244]	; (80097ec <UART_SetConfig+0x360>)
 80096f8:	fba3 2301 	umull	r2, r3, r3, r1
 80096fc:	095b      	lsrs	r3, r3, #5
 80096fe:	2264      	movs	r2, #100	; 0x64
 8009700:	fb02 f303 	mul.w	r3, r2, r3
 8009704:	1acb      	subs	r3, r1, r3
 8009706:	00db      	lsls	r3, r3, #3
 8009708:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800970c:	4b37      	ldr	r3, [pc, #220]	; (80097ec <UART_SetConfig+0x360>)
 800970e:	fba3 2302 	umull	r2, r3, r3, r2
 8009712:	095b      	lsrs	r3, r3, #5
 8009714:	005b      	lsls	r3, r3, #1
 8009716:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800971a:	441c      	add	r4, r3
 800971c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009720:	2200      	movs	r2, #0
 8009722:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009726:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800972a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800972e:	4642      	mov	r2, r8
 8009730:	464b      	mov	r3, r9
 8009732:	1891      	adds	r1, r2, r2
 8009734:	63b9      	str	r1, [r7, #56]	; 0x38
 8009736:	415b      	adcs	r3, r3
 8009738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800973a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800973e:	4641      	mov	r1, r8
 8009740:	1851      	adds	r1, r2, r1
 8009742:	6339      	str	r1, [r7, #48]	; 0x30
 8009744:	4649      	mov	r1, r9
 8009746:	414b      	adcs	r3, r1
 8009748:	637b      	str	r3, [r7, #52]	; 0x34
 800974a:	f04f 0200 	mov.w	r2, #0
 800974e:	f04f 0300 	mov.w	r3, #0
 8009752:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009756:	4659      	mov	r1, fp
 8009758:	00cb      	lsls	r3, r1, #3
 800975a:	4651      	mov	r1, sl
 800975c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009760:	4651      	mov	r1, sl
 8009762:	00ca      	lsls	r2, r1, #3
 8009764:	4610      	mov	r0, r2
 8009766:	4619      	mov	r1, r3
 8009768:	4603      	mov	r3, r0
 800976a:	4642      	mov	r2, r8
 800976c:	189b      	adds	r3, r3, r2
 800976e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009772:	464b      	mov	r3, r9
 8009774:	460a      	mov	r2, r1
 8009776:	eb42 0303 	adc.w	r3, r2, r3
 800977a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800977e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800978a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800978e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009792:	460b      	mov	r3, r1
 8009794:	18db      	adds	r3, r3, r3
 8009796:	62bb      	str	r3, [r7, #40]	; 0x28
 8009798:	4613      	mov	r3, r2
 800979a:	eb42 0303 	adc.w	r3, r2, r3
 800979e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097a4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80097a8:	f7f7 f8b8 	bl	800091c <__aeabi_uldivmod>
 80097ac:	4602      	mov	r2, r0
 80097ae:	460b      	mov	r3, r1
 80097b0:	4b0e      	ldr	r3, [pc, #56]	; (80097ec <UART_SetConfig+0x360>)
 80097b2:	fba3 1302 	umull	r1, r3, r3, r2
 80097b6:	095b      	lsrs	r3, r3, #5
 80097b8:	2164      	movs	r1, #100	; 0x64
 80097ba:	fb01 f303 	mul.w	r3, r1, r3
 80097be:	1ad3      	subs	r3, r2, r3
 80097c0:	00db      	lsls	r3, r3, #3
 80097c2:	3332      	adds	r3, #50	; 0x32
 80097c4:	4a09      	ldr	r2, [pc, #36]	; (80097ec <UART_SetConfig+0x360>)
 80097c6:	fba2 2303 	umull	r2, r3, r2, r3
 80097ca:	095b      	lsrs	r3, r3, #5
 80097cc:	f003 0207 	and.w	r2, r3, #7
 80097d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4422      	add	r2, r4
 80097d8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80097da:	e108      	b.n	80099ee <UART_SetConfig+0x562>
 80097dc:	00a037a0 	.word	0x00a037a0
 80097e0:	0800c05c 	.word	0x0800c05c
 80097e4:	40011000 	.word	0x40011000
 80097e8:	40011400 	.word	0x40011400
 80097ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097f4:	2200      	movs	r2, #0
 80097f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80097fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80097fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009802:	4642      	mov	r2, r8
 8009804:	464b      	mov	r3, r9
 8009806:	1891      	adds	r1, r2, r2
 8009808:	6239      	str	r1, [r7, #32]
 800980a:	415b      	adcs	r3, r3
 800980c:	627b      	str	r3, [r7, #36]	; 0x24
 800980e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009812:	4641      	mov	r1, r8
 8009814:	1854      	adds	r4, r2, r1
 8009816:	4649      	mov	r1, r9
 8009818:	eb43 0501 	adc.w	r5, r3, r1
 800981c:	f04f 0200 	mov.w	r2, #0
 8009820:	f04f 0300 	mov.w	r3, #0
 8009824:	00eb      	lsls	r3, r5, #3
 8009826:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800982a:	00e2      	lsls	r2, r4, #3
 800982c:	4614      	mov	r4, r2
 800982e:	461d      	mov	r5, r3
 8009830:	4643      	mov	r3, r8
 8009832:	18e3      	adds	r3, r4, r3
 8009834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009838:	464b      	mov	r3, r9
 800983a:	eb45 0303 	adc.w	r3, r5, r3
 800983e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800984e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009852:	f04f 0200 	mov.w	r2, #0
 8009856:	f04f 0300 	mov.w	r3, #0
 800985a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800985e:	4629      	mov	r1, r5
 8009860:	008b      	lsls	r3, r1, #2
 8009862:	4621      	mov	r1, r4
 8009864:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009868:	4621      	mov	r1, r4
 800986a:	008a      	lsls	r2, r1, #2
 800986c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009870:	f7f7 f854 	bl	800091c <__aeabi_uldivmod>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	4b60      	ldr	r3, [pc, #384]	; (80099fc <UART_SetConfig+0x570>)
 800987a:	fba3 2302 	umull	r2, r3, r3, r2
 800987e:	095b      	lsrs	r3, r3, #5
 8009880:	011c      	lsls	r4, r3, #4
 8009882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009886:	2200      	movs	r2, #0
 8009888:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800988c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009890:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009894:	4642      	mov	r2, r8
 8009896:	464b      	mov	r3, r9
 8009898:	1891      	adds	r1, r2, r2
 800989a:	61b9      	str	r1, [r7, #24]
 800989c:	415b      	adcs	r3, r3
 800989e:	61fb      	str	r3, [r7, #28]
 80098a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80098a4:	4641      	mov	r1, r8
 80098a6:	1851      	adds	r1, r2, r1
 80098a8:	6139      	str	r1, [r7, #16]
 80098aa:	4649      	mov	r1, r9
 80098ac:	414b      	adcs	r3, r1
 80098ae:	617b      	str	r3, [r7, #20]
 80098b0:	f04f 0200 	mov.w	r2, #0
 80098b4:	f04f 0300 	mov.w	r3, #0
 80098b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098bc:	4659      	mov	r1, fp
 80098be:	00cb      	lsls	r3, r1, #3
 80098c0:	4651      	mov	r1, sl
 80098c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098c6:	4651      	mov	r1, sl
 80098c8:	00ca      	lsls	r2, r1, #3
 80098ca:	4610      	mov	r0, r2
 80098cc:	4619      	mov	r1, r3
 80098ce:	4603      	mov	r3, r0
 80098d0:	4642      	mov	r2, r8
 80098d2:	189b      	adds	r3, r3, r2
 80098d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098d8:	464b      	mov	r3, r9
 80098da:	460a      	mov	r2, r1
 80098dc:	eb42 0303 	adc.w	r3, r2, r3
 80098e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80098e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80098ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80098f0:	f04f 0200 	mov.w	r2, #0
 80098f4:	f04f 0300 	mov.w	r3, #0
 80098f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80098fc:	4649      	mov	r1, r9
 80098fe:	008b      	lsls	r3, r1, #2
 8009900:	4641      	mov	r1, r8
 8009902:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009906:	4641      	mov	r1, r8
 8009908:	008a      	lsls	r2, r1, #2
 800990a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800990e:	f7f7 f805 	bl	800091c <__aeabi_uldivmod>
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	4b39      	ldr	r3, [pc, #228]	; (80099fc <UART_SetConfig+0x570>)
 8009918:	fba3 1302 	umull	r1, r3, r3, r2
 800991c:	095b      	lsrs	r3, r3, #5
 800991e:	2164      	movs	r1, #100	; 0x64
 8009920:	fb01 f303 	mul.w	r3, r1, r3
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	011b      	lsls	r3, r3, #4
 8009928:	3332      	adds	r3, #50	; 0x32
 800992a:	4a34      	ldr	r2, [pc, #208]	; (80099fc <UART_SetConfig+0x570>)
 800992c:	fba2 2303 	umull	r2, r3, r2, r3
 8009930:	095b      	lsrs	r3, r3, #5
 8009932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009936:	441c      	add	r4, r3
 8009938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800993c:	2200      	movs	r2, #0
 800993e:	673b      	str	r3, [r7, #112]	; 0x70
 8009940:	677a      	str	r2, [r7, #116]	; 0x74
 8009942:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009946:	4642      	mov	r2, r8
 8009948:	464b      	mov	r3, r9
 800994a:	1891      	adds	r1, r2, r2
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	415b      	adcs	r3, r3
 8009950:	60fb      	str	r3, [r7, #12]
 8009952:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009956:	4641      	mov	r1, r8
 8009958:	1851      	adds	r1, r2, r1
 800995a:	6039      	str	r1, [r7, #0]
 800995c:	4649      	mov	r1, r9
 800995e:	414b      	adcs	r3, r1
 8009960:	607b      	str	r3, [r7, #4]
 8009962:	f04f 0200 	mov.w	r2, #0
 8009966:	f04f 0300 	mov.w	r3, #0
 800996a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800996e:	4659      	mov	r1, fp
 8009970:	00cb      	lsls	r3, r1, #3
 8009972:	4651      	mov	r1, sl
 8009974:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009978:	4651      	mov	r1, sl
 800997a:	00ca      	lsls	r2, r1, #3
 800997c:	4610      	mov	r0, r2
 800997e:	4619      	mov	r1, r3
 8009980:	4603      	mov	r3, r0
 8009982:	4642      	mov	r2, r8
 8009984:	189b      	adds	r3, r3, r2
 8009986:	66bb      	str	r3, [r7, #104]	; 0x68
 8009988:	464b      	mov	r3, r9
 800998a:	460a      	mov	r2, r1
 800998c:	eb42 0303 	adc.w	r3, r2, r3
 8009990:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	663b      	str	r3, [r7, #96]	; 0x60
 800999c:	667a      	str	r2, [r7, #100]	; 0x64
 800999e:	f04f 0200 	mov.w	r2, #0
 80099a2:	f04f 0300 	mov.w	r3, #0
 80099a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80099aa:	4649      	mov	r1, r9
 80099ac:	008b      	lsls	r3, r1, #2
 80099ae:	4641      	mov	r1, r8
 80099b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099b4:	4641      	mov	r1, r8
 80099b6:	008a      	lsls	r2, r1, #2
 80099b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80099bc:	f7f6 ffae 	bl	800091c <__aeabi_uldivmod>
 80099c0:	4602      	mov	r2, r0
 80099c2:	460b      	mov	r3, r1
 80099c4:	4b0d      	ldr	r3, [pc, #52]	; (80099fc <UART_SetConfig+0x570>)
 80099c6:	fba3 1302 	umull	r1, r3, r3, r2
 80099ca:	095b      	lsrs	r3, r3, #5
 80099cc:	2164      	movs	r1, #100	; 0x64
 80099ce:	fb01 f303 	mul.w	r3, r1, r3
 80099d2:	1ad3      	subs	r3, r2, r3
 80099d4:	011b      	lsls	r3, r3, #4
 80099d6:	3332      	adds	r3, #50	; 0x32
 80099d8:	4a08      	ldr	r2, [pc, #32]	; (80099fc <UART_SetConfig+0x570>)
 80099da:	fba2 2303 	umull	r2, r3, r2, r3
 80099de:	095b      	lsrs	r3, r3, #5
 80099e0:	f003 020f 	and.w	r2, r3, #15
 80099e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4422      	add	r2, r4
 80099ec:	609a      	str	r2, [r3, #8]
}
 80099ee:	bf00      	nop
 80099f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80099f4:	46bd      	mov	sp, r7
 80099f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099fa:	bf00      	nop
 80099fc:	51eb851f 	.word	0x51eb851f

08009a00 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a16:	d10e      	bne.n	8009a36 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	f003 0301 	and.w	r3, r3, #1
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d107      	bne.n	8009a36 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f06f 0201 	mvn.w	r2, #1
 8009a2e:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 f804 	bl	8009a3e <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8009a36:	bf00      	nop
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b083      	sub	sp, #12
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 8009a46:	bf00      	nop
 8009a48:	370c      	adds	r7, #12
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009a52:	b480      	push	{r7}
 8009a54:	b085      	sub	sp, #20
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	4603      	mov	r3, r0
 8009a5a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009a60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a64:	2b84      	cmp	r3, #132	; 0x84
 8009a66:	d005      	beq.n	8009a74 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009a68:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	4413      	add	r3, r2
 8009a70:	3303      	adds	r3, #3
 8009a72:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009a74:	68fb      	ldr	r3, [r7, #12]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr

08009a82 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009a86:	f000 fc8d 	bl	800a3a4 <vTaskStartScheduler>
  
  return osOK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a92:	b089      	sub	sp, #36	; 0x24
 8009a94:	af04      	add	r7, sp, #16
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	695b      	ldr	r3, [r3, #20]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d020      	beq.n	8009ae4 <osThreadCreate+0x54>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	699b      	ldr	r3, [r3, #24]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d01c      	beq.n	8009ae4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	685c      	ldr	r4, [r3, #4]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681d      	ldr	r5, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	691e      	ldr	r6, [r3, #16]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7ff ffc8 	bl	8009a52 <makeFreeRtosPriority>
 8009ac2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	695b      	ldr	r3, [r3, #20]
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009acc:	9202      	str	r2, [sp, #8]
 8009ace:	9301      	str	r3, [sp, #4]
 8009ad0:	9100      	str	r1, [sp, #0]
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	4632      	mov	r2, r6
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f000 fa3a 	bl	8009f52 <xTaskCreateStatic>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	60fb      	str	r3, [r7, #12]
 8009ae2:	e01c      	b.n	8009b1e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	685c      	ldr	r4, [r3, #4]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009af0:	b29e      	uxth	r6, r3
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7ff ffaa 	bl	8009a52 <makeFreeRtosPriority>
 8009afe:	4602      	mov	r2, r0
 8009b00:	f107 030c 	add.w	r3, r7, #12
 8009b04:	9301      	str	r3, [sp, #4]
 8009b06:	9200      	str	r2, [sp, #0]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	4632      	mov	r2, r6
 8009b0c:	4629      	mov	r1, r5
 8009b0e:	4620      	mov	r0, r4
 8009b10:	f000 fa7c 	bl	800a00c <xTaskCreate>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d001      	beq.n	8009b1e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	e000      	b.n	8009b20 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3714      	adds	r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b28 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009b28:	b590      	push	{r4, r7, lr}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af02      	add	r7, sp, #8
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d011      	beq.n	8009b5e <osMessageCreate+0x36>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00d      	beq.n	8009b5e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6818      	ldr	r0, [r3, #0]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6859      	ldr	r1, [r3, #4]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	689a      	ldr	r2, [r3, #8]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	2400      	movs	r4, #0
 8009b54:	9400      	str	r4, [sp, #0]
 8009b56:	f000 f92b 	bl	8009db0 <xQueueGenericCreateStatic>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	e008      	b.n	8009b70 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6818      	ldr	r0, [r3, #0]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	4619      	mov	r1, r3
 8009b6a:	f000 f999 	bl	8009ea0 <xQueueGenericCreate>
 8009b6e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd90      	pop	{r4, r7, pc}

08009b78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f103 0208 	add.w	r2, r3, #8
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f103 0208 	add.w	r2, r3, #8
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f103 0208 	add.w	r2, r3, #8
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009bac:	bf00      	nop
 8009bae:	370c      	adds	r7, #12
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009bc6:	bf00      	nop
 8009bc8:	370c      	adds	r7, #12
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b085      	sub	sp, #20
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	68fa      	ldr	r2, [r7, #12]
 8009be6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	689a      	ldr	r2, [r3, #8]
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	683a      	ldr	r2, [r7, #0]
 8009bf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	683a      	ldr	r2, [r7, #0]
 8009bfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	1c5a      	adds	r2, r3, #1
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	601a      	str	r2, [r3, #0]
}
 8009c0e:	bf00      	nop
 8009c10:	3714      	adds	r7, #20
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b085      	sub	sp, #20
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
 8009c22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c30:	d103      	bne.n	8009c3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	60fb      	str	r3, [r7, #12]
 8009c38:	e00c      	b.n	8009c54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	3308      	adds	r3, #8
 8009c3e:	60fb      	str	r3, [r7, #12]
 8009c40:	e002      	b.n	8009c48 <vListInsert+0x2e>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	60fb      	str	r3, [r7, #12]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68ba      	ldr	r2, [r7, #8]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d2f6      	bcs.n	8009c42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	685a      	ldr	r2, [r3, #4]
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	683a      	ldr	r2, [r7, #0]
 8009c62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	683a      	ldr	r2, [r7, #0]
 8009c6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	1c5a      	adds	r2, r3, #1
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	601a      	str	r2, [r3, #0]
}
 8009c80:	bf00      	nop
 8009c82:	3714      	adds	r7, #20
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b085      	sub	sp, #20
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	691b      	ldr	r3, [r3, #16]
 8009c98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	6892      	ldr	r2, [r2, #8]
 8009ca2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	6852      	ldr	r2, [r2, #4]
 8009cac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d103      	bne.n	8009cc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	689a      	ldr	r2, [r3, #8]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	1e5a      	subs	r2, r3, #1
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3714      	adds	r7, #20
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d10a      	bne.n	8009d0a <xQueueGenericReset+0x2a>
	__asm volatile
 8009cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf8:	f383 8811 	msr	BASEPRI, r3
 8009cfc:	f3bf 8f6f 	isb	sy
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	60bb      	str	r3, [r7, #8]
}
 8009d06:	bf00      	nop
 8009d08:	e7fe      	b.n	8009d08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009d0a:	f001 f85b 	bl	800adc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d16:	68f9      	ldr	r1, [r7, #12]
 8009d18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d1a:	fb01 f303 	mul.w	r3, r1, r3
 8009d1e:	441a      	add	r2, r3
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	68f9      	ldr	r1, [r7, #12]
 8009d3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009d40:	fb01 f303 	mul.w	r3, r1, r3
 8009d44:	441a      	add	r2, r3
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	22ff      	movs	r2, #255	; 0xff
 8009d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	22ff      	movs	r2, #255	; 0xff
 8009d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d114      	bne.n	8009d8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	691b      	ldr	r3, [r3, #16]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d01a      	beq.n	8009d9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	3310      	adds	r3, #16
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f000 fd57 	bl	800a820 <xTaskRemoveFromEventList>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d012      	beq.n	8009d9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d78:	4b0c      	ldr	r3, [pc, #48]	; (8009dac <xQueueGenericReset+0xcc>)
 8009d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d7e:	601a      	str	r2, [r3, #0]
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	f3bf 8f6f 	isb	sy
 8009d88:	e009      	b.n	8009d9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	3310      	adds	r3, #16
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7ff fef2 	bl	8009b78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	3324      	adds	r3, #36	; 0x24
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7ff feed 	bl	8009b78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d9e:	f001 f841 	bl	800ae24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009da2:	2301      	movs	r3, #1
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	e000ed04 	.word	0xe000ed04

08009db0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b08e      	sub	sp, #56	; 0x38
 8009db4:	af02      	add	r7, sp, #8
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	607a      	str	r2, [r7, #4]
 8009dbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10a      	bne.n	8009dda <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009dd6:	bf00      	nop
 8009dd8:	e7fe      	b.n	8009dd8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d10a      	bne.n	8009df6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de4:	f383 8811 	msr	BASEPRI, r3
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009df2:	bf00      	nop
 8009df4:	e7fe      	b.n	8009df4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d002      	beq.n	8009e02 <xQueueGenericCreateStatic+0x52>
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d001      	beq.n	8009e06 <xQueueGenericCreateStatic+0x56>
 8009e02:	2301      	movs	r3, #1
 8009e04:	e000      	b.n	8009e08 <xQueueGenericCreateStatic+0x58>
 8009e06:	2300      	movs	r3, #0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10a      	bne.n	8009e22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	623b      	str	r3, [r7, #32]
}
 8009e1e:	bf00      	nop
 8009e20:	e7fe      	b.n	8009e20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d102      	bne.n	8009e2e <xQueueGenericCreateStatic+0x7e>
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <xQueueGenericCreateStatic+0x82>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e000      	b.n	8009e34 <xQueueGenericCreateStatic+0x84>
 8009e32:	2300      	movs	r3, #0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d10a      	bne.n	8009e4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3c:	f383 8811 	msr	BASEPRI, r3
 8009e40:	f3bf 8f6f 	isb	sy
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	61fb      	str	r3, [r7, #28]
}
 8009e4a:	bf00      	nop
 8009e4c:	e7fe      	b.n	8009e4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e4e:	2348      	movs	r3, #72	; 0x48
 8009e50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	2b48      	cmp	r3, #72	; 0x48
 8009e56:	d00a      	beq.n	8009e6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5c:	f383 8811 	msr	BASEPRI, r3
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	61bb      	str	r3, [r7, #24]
}
 8009e6a:	bf00      	nop
 8009e6c:	e7fe      	b.n	8009e6c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009e6e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00d      	beq.n	8009e96 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	68b9      	ldr	r1, [r7, #8]
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f000 f83f 	bl	8009f14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3730      	adds	r7, #48	; 0x30
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b08a      	sub	sp, #40	; 0x28
 8009ea4:	af02      	add	r7, sp, #8
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	4613      	mov	r3, r2
 8009eac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d10a      	bne.n	8009eca <xQueueGenericCreate+0x2a>
	__asm volatile
 8009eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb8:	f383 8811 	msr	BASEPRI, r3
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	613b      	str	r3, [r7, #16]
}
 8009ec6:	bf00      	nop
 8009ec8:	e7fe      	b.n	8009ec8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	fb02 f303 	mul.w	r3, r2, r3
 8009ed2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	3348      	adds	r3, #72	; 0x48
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f001 f855 	bl	800af88 <pvPortMalloc>
 8009ede:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d011      	beq.n	8009f0a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	3348      	adds	r3, #72	; 0x48
 8009eee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ef8:	79fa      	ldrb	r2, [r7, #7]
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	4613      	mov	r3, r2
 8009f00:	697a      	ldr	r2, [r7, #20]
 8009f02:	68b9      	ldr	r1, [r7, #8]
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f000 f805 	bl	8009f14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f0a:	69bb      	ldr	r3, [r7, #24]
	}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3720      	adds	r7, #32
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
 8009f20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d103      	bne.n	8009f30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	69ba      	ldr	r2, [r7, #24]
 8009f2c:	601a      	str	r2, [r3, #0]
 8009f2e:	e002      	b.n	8009f36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f42:	2101      	movs	r1, #1
 8009f44:	69b8      	ldr	r0, [r7, #24]
 8009f46:	f7ff fecb 	bl	8009ce0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f4a:	bf00      	nop
 8009f4c:	3710      	adds	r7, #16
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009f52:	b580      	push	{r7, lr}
 8009f54:	b08e      	sub	sp, #56	; 0x38
 8009f56:	af04      	add	r7, sp, #16
 8009f58:	60f8      	str	r0, [r7, #12]
 8009f5a:	60b9      	str	r1, [r7, #8]
 8009f5c:	607a      	str	r2, [r7, #4]
 8009f5e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d10a      	bne.n	8009f7c <xTaskCreateStatic+0x2a>
	__asm volatile
 8009f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f6a:	f383 8811 	msr	BASEPRI, r3
 8009f6e:	f3bf 8f6f 	isb	sy
 8009f72:	f3bf 8f4f 	dsb	sy
 8009f76:	623b      	str	r3, [r7, #32]
}
 8009f78:	bf00      	nop
 8009f7a:	e7fe      	b.n	8009f7a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10a      	bne.n	8009f98 <xTaskCreateStatic+0x46>
	__asm volatile
 8009f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f86:	f383 8811 	msr	BASEPRI, r3
 8009f8a:	f3bf 8f6f 	isb	sy
 8009f8e:	f3bf 8f4f 	dsb	sy
 8009f92:	61fb      	str	r3, [r7, #28]
}
 8009f94:	bf00      	nop
 8009f96:	e7fe      	b.n	8009f96 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009f98:	23b4      	movs	r3, #180	; 0xb4
 8009f9a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	2bb4      	cmp	r3, #180	; 0xb4
 8009fa0:	d00a      	beq.n	8009fb8 <xTaskCreateStatic+0x66>
	__asm volatile
 8009fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	61bb      	str	r3, [r7, #24]
}
 8009fb4:	bf00      	nop
 8009fb6:	e7fe      	b.n	8009fb6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009fb8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d01e      	beq.n	8009ffe <xTaskCreateStatic+0xac>
 8009fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d01b      	beq.n	8009ffe <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd2:	2202      	movs	r2, #2
 8009fd4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009fd8:	2300      	movs	r3, #0
 8009fda:	9303      	str	r3, [sp, #12]
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fde:	9302      	str	r3, [sp, #8]
 8009fe0:	f107 0314 	add.w	r3, r7, #20
 8009fe4:	9301      	str	r3, [sp, #4]
 8009fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	68b9      	ldr	r1, [r7, #8]
 8009ff0:	68f8      	ldr	r0, [r7, #12]
 8009ff2:	f000 f851 	bl	800a098 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ff6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ff8:	f000 f8ec 	bl	800a1d4 <prvAddNewTaskToReadyList>
 8009ffc:	e001      	b.n	800a002 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009ffe:	2300      	movs	r3, #0
 800a000:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a002:	697b      	ldr	r3, [r7, #20]
	}
 800a004:	4618      	mov	r0, r3
 800a006:	3728      	adds	r7, #40	; 0x28
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b08c      	sub	sp, #48	; 0x30
 800a010:	af04      	add	r7, sp, #16
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	603b      	str	r3, [r7, #0]
 800a018:	4613      	mov	r3, r2
 800a01a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a01c:	88fb      	ldrh	r3, [r7, #6]
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	4618      	mov	r0, r3
 800a022:	f000 ffb1 	bl	800af88 <pvPortMalloc>
 800a026:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00e      	beq.n	800a04c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a02e:	20b4      	movs	r0, #180	; 0xb4
 800a030:	f000 ffaa 	bl	800af88 <pvPortMalloc>
 800a034:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d003      	beq.n	800a044 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	631a      	str	r2, [r3, #48]	; 0x30
 800a042:	e005      	b.n	800a050 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a044:	6978      	ldr	r0, [r7, #20]
 800a046:	f001 f86b 	bl	800b120 <vPortFree>
 800a04a:	e001      	b.n	800a050 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a04c:	2300      	movs	r3, #0
 800a04e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d017      	beq.n	800a086 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a05e:	88fa      	ldrh	r2, [r7, #6]
 800a060:	2300      	movs	r3, #0
 800a062:	9303      	str	r3, [sp, #12]
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	9302      	str	r3, [sp, #8]
 800a068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06a:	9301      	str	r3, [sp, #4]
 800a06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	68b9      	ldr	r1, [r7, #8]
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f000 f80f 	bl	800a098 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a07a:	69f8      	ldr	r0, [r7, #28]
 800a07c:	f000 f8aa 	bl	800a1d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a080:	2301      	movs	r3, #1
 800a082:	61bb      	str	r3, [r7, #24]
 800a084:	e002      	b.n	800a08c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a086:	f04f 33ff 	mov.w	r3, #4294967295
 800a08a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a08c:	69bb      	ldr	r3, [r7, #24]
	}
 800a08e:	4618      	mov	r0, r3
 800a090:	3720      	adds	r7, #32
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
	...

0800a098 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b088      	sub	sp, #32
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
 800a0a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	4413      	add	r3, r2
 800a0b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	f023 0307 	bic.w	r3, r3, #7
 800a0be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	f003 0307 	and.w	r3, r3, #7
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00a      	beq.n	800a0e0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	617b      	str	r3, [r7, #20]
}
 800a0dc:	bf00      	nop
 800a0de:	e7fe      	b.n	800a0de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d01f      	beq.n	800a126 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	61fb      	str	r3, [r7, #28]
 800a0ea:	e012      	b.n	800a112 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	7819      	ldrb	r1, [r3, #0]
 800a0f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	3334      	adds	r3, #52	; 0x34
 800a0fc:	460a      	mov	r2, r1
 800a0fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	4413      	add	r3, r2
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d006      	beq.n	800a11a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	3301      	adds	r3, #1
 800a110:	61fb      	str	r3, [r7, #28]
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	2b0f      	cmp	r3, #15
 800a116:	d9e9      	bls.n	800a0ec <prvInitialiseNewTask+0x54>
 800a118:	e000      	b.n	800a11c <prvInitialiseNewTask+0x84>
			{
				break;
 800a11a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11e:	2200      	movs	r2, #0
 800a120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a124:	e003      	b.n	800a12e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a130:	2b06      	cmp	r3, #6
 800a132:	d901      	bls.n	800a138 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a134:	2306      	movs	r3, #6
 800a136:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a13c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a142:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a146:	2200      	movs	r2, #0
 800a148:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14c:	3304      	adds	r3, #4
 800a14e:	4618      	mov	r0, r3
 800a150:	f7ff fd32 	bl	8009bb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a156:	3318      	adds	r3, #24
 800a158:	4618      	mov	r0, r3
 800a15a:	f7ff fd2d 	bl	8009bb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a162:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a166:	f1c3 0207 	rsb	r2, r3, #7
 800a16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a172:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a176:	2200      	movs	r2, #0
 800a178:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a186:	334c      	adds	r3, #76	; 0x4c
 800a188:	2260      	movs	r2, #96	; 0x60
 800a18a:	2100      	movs	r1, #0
 800a18c:	4618      	mov	r0, r3
 800a18e:	f001 f91d 	bl	800b3cc <memset>
 800a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a194:	4a0c      	ldr	r2, [pc, #48]	; (800a1c8 <prvInitialiseNewTask+0x130>)
 800a196:	651a      	str	r2, [r3, #80]	; 0x50
 800a198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19a:	4a0c      	ldr	r2, [pc, #48]	; (800a1cc <prvInitialiseNewTask+0x134>)
 800a19c:	655a      	str	r2, [r3, #84]	; 0x54
 800a19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a0:	4a0b      	ldr	r2, [pc, #44]	; (800a1d0 <prvInitialiseNewTask+0x138>)
 800a1a2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a1a4:	683a      	ldr	r2, [r7, #0]
 800a1a6:	68f9      	ldr	r1, [r7, #12]
 800a1a8:	69b8      	ldr	r0, [r7, #24]
 800a1aa:	f000 fcdb 	bl	800ab64 <pxPortInitialiseStack>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d002      	beq.n	800a1c0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1c0:	bf00      	nop
 800a1c2:	3720      	adds	r7, #32
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	0800c0e0 	.word	0x0800c0e0
 800a1cc:	0800c100 	.word	0x0800c100
 800a1d0:	0800c0c0 	.word	0x0800c0c0

0800a1d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a1dc:	f000 fdf2 	bl	800adc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a1e0:	4b2a      	ldr	r3, [pc, #168]	; (800a28c <prvAddNewTaskToReadyList+0xb8>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	4a29      	ldr	r2, [pc, #164]	; (800a28c <prvAddNewTaskToReadyList+0xb8>)
 800a1e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a1ea:	4b29      	ldr	r3, [pc, #164]	; (800a290 <prvAddNewTaskToReadyList+0xbc>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d109      	bne.n	800a206 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a1f2:	4a27      	ldr	r2, [pc, #156]	; (800a290 <prvAddNewTaskToReadyList+0xbc>)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a1f8:	4b24      	ldr	r3, [pc, #144]	; (800a28c <prvAddNewTaskToReadyList+0xb8>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d110      	bne.n	800a222 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a200:	f000 fb88 	bl	800a914 <prvInitialiseTaskLists>
 800a204:	e00d      	b.n	800a222 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a206:	4b23      	ldr	r3, [pc, #140]	; (800a294 <prvAddNewTaskToReadyList+0xc0>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d109      	bne.n	800a222 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a20e:	4b20      	ldr	r3, [pc, #128]	; (800a290 <prvAddNewTaskToReadyList+0xbc>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a218:	429a      	cmp	r2, r3
 800a21a:	d802      	bhi.n	800a222 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a21c:	4a1c      	ldr	r2, [pc, #112]	; (800a290 <prvAddNewTaskToReadyList+0xbc>)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a222:	4b1d      	ldr	r3, [pc, #116]	; (800a298 <prvAddNewTaskToReadyList+0xc4>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	3301      	adds	r3, #1
 800a228:	4a1b      	ldr	r2, [pc, #108]	; (800a298 <prvAddNewTaskToReadyList+0xc4>)
 800a22a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a230:	2201      	movs	r2, #1
 800a232:	409a      	lsls	r2, r3
 800a234:	4b19      	ldr	r3, [pc, #100]	; (800a29c <prvAddNewTaskToReadyList+0xc8>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4313      	orrs	r3, r2
 800a23a:	4a18      	ldr	r2, [pc, #96]	; (800a29c <prvAddNewTaskToReadyList+0xc8>)
 800a23c:	6013      	str	r3, [r2, #0]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a242:	4613      	mov	r3, r2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	4413      	add	r3, r2
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	4a15      	ldr	r2, [pc, #84]	; (800a2a0 <prvAddNewTaskToReadyList+0xcc>)
 800a24c:	441a      	add	r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	3304      	adds	r3, #4
 800a252:	4619      	mov	r1, r3
 800a254:	4610      	mov	r0, r2
 800a256:	f7ff fcbc 	bl	8009bd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a25a:	f000 fde3 	bl	800ae24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a25e:	4b0d      	ldr	r3, [pc, #52]	; (800a294 <prvAddNewTaskToReadyList+0xc0>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00e      	beq.n	800a284 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a266:	4b0a      	ldr	r3, [pc, #40]	; (800a290 <prvAddNewTaskToReadyList+0xbc>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a270:	429a      	cmp	r2, r3
 800a272:	d207      	bcs.n	800a284 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a274:	4b0b      	ldr	r3, [pc, #44]	; (800a2a4 <prvAddNewTaskToReadyList+0xd0>)
 800a276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a27a:	601a      	str	r2, [r3, #0]
 800a27c:	f3bf 8f4f 	dsb	sy
 800a280:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a284:	bf00      	nop
 800a286:	3708      	adds	r7, #8
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	200008f4 	.word	0x200008f4
 800a290:	200007f4 	.word	0x200007f4
 800a294:	20000900 	.word	0x20000900
 800a298:	20000910 	.word	0x20000910
 800a29c:	200008fc 	.word	0x200008fc
 800a2a0:	200007f8 	.word	0x200007f8
 800a2a4:	e000ed04 	.word	0xe000ed04

0800a2a8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b08a      	sub	sp, #40	; 0x28
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d10a      	bne.n	800a2d2 <vTaskDelayUntil+0x2a>
	__asm volatile
 800a2bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c0:	f383 8811 	msr	BASEPRI, r3
 800a2c4:	f3bf 8f6f 	isb	sy
 800a2c8:	f3bf 8f4f 	dsb	sy
 800a2cc:	617b      	str	r3, [r7, #20]
}
 800a2ce:	bf00      	nop
 800a2d0:	e7fe      	b.n	800a2d0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10a      	bne.n	800a2ee <vTaskDelayUntil+0x46>
	__asm volatile
 800a2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2dc:	f383 8811 	msr	BASEPRI, r3
 800a2e0:	f3bf 8f6f 	isb	sy
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	613b      	str	r3, [r7, #16]
}
 800a2ea:	bf00      	nop
 800a2ec:	e7fe      	b.n	800a2ec <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a2ee:	4b2a      	ldr	r3, [pc, #168]	; (800a398 <vTaskDelayUntil+0xf0>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d00a      	beq.n	800a30c <vTaskDelayUntil+0x64>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	60fb      	str	r3, [r7, #12]
}
 800a308:	bf00      	nop
 800a30a:	e7fe      	b.n	800a30a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a30c:	f000 f8b4 	bl	800a478 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a310:	4b22      	ldr	r3, [pc, #136]	; (800a39c <vTaskDelayUntil+0xf4>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	683a      	ldr	r2, [r7, #0]
 800a31c:	4413      	add	r3, r2
 800a31e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	6a3a      	ldr	r2, [r7, #32]
 800a326:	429a      	cmp	r2, r3
 800a328:	d20b      	bcs.n	800a342 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	69fa      	ldr	r2, [r7, #28]
 800a330:	429a      	cmp	r2, r3
 800a332:	d211      	bcs.n	800a358 <vTaskDelayUntil+0xb0>
 800a334:	69fa      	ldr	r2, [r7, #28]
 800a336:	6a3b      	ldr	r3, [r7, #32]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d90d      	bls.n	800a358 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a33c:	2301      	movs	r3, #1
 800a33e:	627b      	str	r3, [r7, #36]	; 0x24
 800a340:	e00a      	b.n	800a358 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	69fa      	ldr	r2, [r7, #28]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d303      	bcc.n	800a354 <vTaskDelayUntil+0xac>
 800a34c:	69fa      	ldr	r2, [r7, #28]
 800a34e:	6a3b      	ldr	r3, [r7, #32]
 800a350:	429a      	cmp	r2, r3
 800a352:	d901      	bls.n	800a358 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a354:	2301      	movs	r3, #1
 800a356:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	69fa      	ldr	r2, [r7, #28]
 800a35c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a360:	2b00      	cmp	r3, #0
 800a362:	d006      	beq.n	800a372 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a364:	69fa      	ldr	r2, [r7, #28]
 800a366:	6a3b      	ldr	r3, [r7, #32]
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	2100      	movs	r1, #0
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 fb93 	bl	800aa98 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a372:	f000 f88f 	bl	800a494 <xTaskResumeAll>
 800a376:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d107      	bne.n	800a38e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a37e:	4b08      	ldr	r3, [pc, #32]	; (800a3a0 <vTaskDelayUntil+0xf8>)
 800a380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a384:	601a      	str	r2, [r3, #0]
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a38e:	bf00      	nop
 800a390:	3728      	adds	r7, #40	; 0x28
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	2000091c 	.word	0x2000091c
 800a39c:	200008f8 	.word	0x200008f8
 800a3a0:	e000ed04 	.word	0xe000ed04

0800a3a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b08a      	sub	sp, #40	; 0x28
 800a3a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a3b2:	463a      	mov	r2, r7
 800a3b4:	1d39      	adds	r1, r7, #4
 800a3b6:	f107 0308 	add.w	r3, r7, #8
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7f7 f8be 	bl	800153c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a3c0:	6839      	ldr	r1, [r7, #0]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	68ba      	ldr	r2, [r7, #8]
 800a3c6:	9202      	str	r2, [sp, #8]
 800a3c8:	9301      	str	r3, [sp, #4]
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	9300      	str	r3, [sp, #0]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	460a      	mov	r2, r1
 800a3d2:	4921      	ldr	r1, [pc, #132]	; (800a458 <vTaskStartScheduler+0xb4>)
 800a3d4:	4821      	ldr	r0, [pc, #132]	; (800a45c <vTaskStartScheduler+0xb8>)
 800a3d6:	f7ff fdbc 	bl	8009f52 <xTaskCreateStatic>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	4a20      	ldr	r2, [pc, #128]	; (800a460 <vTaskStartScheduler+0xbc>)
 800a3de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a3e0:	4b1f      	ldr	r3, [pc, #124]	; (800a460 <vTaskStartScheduler+0xbc>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d002      	beq.n	800a3ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	617b      	str	r3, [r7, #20]
 800a3ec:	e001      	b.n	800a3f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d11b      	bne.n	800a430 <vTaskStartScheduler+0x8c>
	__asm volatile
 800a3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fc:	f383 8811 	msr	BASEPRI, r3
 800a400:	f3bf 8f6f 	isb	sy
 800a404:	f3bf 8f4f 	dsb	sy
 800a408:	613b      	str	r3, [r7, #16]
}
 800a40a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a40c:	4b15      	ldr	r3, [pc, #84]	; (800a464 <vTaskStartScheduler+0xc0>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	334c      	adds	r3, #76	; 0x4c
 800a412:	4a15      	ldr	r2, [pc, #84]	; (800a468 <vTaskStartScheduler+0xc4>)
 800a414:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a416:	4b15      	ldr	r3, [pc, #84]	; (800a46c <vTaskStartScheduler+0xc8>)
 800a418:	f04f 32ff 	mov.w	r2, #4294967295
 800a41c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a41e:	4b14      	ldr	r3, [pc, #80]	; (800a470 <vTaskStartScheduler+0xcc>)
 800a420:	2201      	movs	r2, #1
 800a422:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a424:	4b13      	ldr	r3, [pc, #76]	; (800a474 <vTaskStartScheduler+0xd0>)
 800a426:	2200      	movs	r2, #0
 800a428:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a42a:	f000 fc29 	bl	800ac80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a42e:	e00e      	b.n	800a44e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a436:	d10a      	bne.n	800a44e <vTaskStartScheduler+0xaa>
	__asm volatile
 800a438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43c:	f383 8811 	msr	BASEPRI, r3
 800a440:	f3bf 8f6f 	isb	sy
 800a444:	f3bf 8f4f 	dsb	sy
 800a448:	60fb      	str	r3, [r7, #12]
}
 800a44a:	bf00      	nop
 800a44c:	e7fe      	b.n	800a44c <vTaskStartScheduler+0xa8>
}
 800a44e:	bf00      	nop
 800a450:	3718      	adds	r7, #24
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	0800c098 	.word	0x0800c098
 800a45c:	0800a8e5 	.word	0x0800a8e5
 800a460:	20000918 	.word	0x20000918
 800a464:	200007f4 	.word	0x200007f4
 800a468:	20000010 	.word	0x20000010
 800a46c:	20000914 	.word	0x20000914
 800a470:	20000900 	.word	0x20000900
 800a474:	200008f8 	.word	0x200008f8

0800a478 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a478:	b480      	push	{r7}
 800a47a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a47c:	4b04      	ldr	r3, [pc, #16]	; (800a490 <vTaskSuspendAll+0x18>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	3301      	adds	r3, #1
 800a482:	4a03      	ldr	r2, [pc, #12]	; (800a490 <vTaskSuspendAll+0x18>)
 800a484:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a486:	bf00      	nop
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr
 800a490:	2000091c 	.word	0x2000091c

0800a494 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a49a:	2300      	movs	r3, #0
 800a49c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a4a2:	4b41      	ldr	r3, [pc, #260]	; (800a5a8 <xTaskResumeAll+0x114>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10a      	bne.n	800a4c0 <xTaskResumeAll+0x2c>
	__asm volatile
 800a4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ae:	f383 8811 	msr	BASEPRI, r3
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	f3bf 8f4f 	dsb	sy
 800a4ba:	603b      	str	r3, [r7, #0]
}
 800a4bc:	bf00      	nop
 800a4be:	e7fe      	b.n	800a4be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a4c0:	f000 fc80 	bl	800adc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a4c4:	4b38      	ldr	r3, [pc, #224]	; (800a5a8 <xTaskResumeAll+0x114>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	4a37      	ldr	r2, [pc, #220]	; (800a5a8 <xTaskResumeAll+0x114>)
 800a4cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4ce:	4b36      	ldr	r3, [pc, #216]	; (800a5a8 <xTaskResumeAll+0x114>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d161      	bne.n	800a59a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a4d6:	4b35      	ldr	r3, [pc, #212]	; (800a5ac <xTaskResumeAll+0x118>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d05d      	beq.n	800a59a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4de:	e02e      	b.n	800a53e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4e0:	4b33      	ldr	r3, [pc, #204]	; (800a5b0 <xTaskResumeAll+0x11c>)
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	68db      	ldr	r3, [r3, #12]
 800a4e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	3318      	adds	r3, #24
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7ff fbcd 	bl	8009c8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7ff fbc8 	bl	8009c8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a500:	2201      	movs	r2, #1
 800a502:	409a      	lsls	r2, r3
 800a504:	4b2b      	ldr	r3, [pc, #172]	; (800a5b4 <xTaskResumeAll+0x120>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4313      	orrs	r3, r2
 800a50a:	4a2a      	ldr	r2, [pc, #168]	; (800a5b4 <xTaskResumeAll+0x120>)
 800a50c:	6013      	str	r3, [r2, #0]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a512:	4613      	mov	r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	4413      	add	r3, r2
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	4a27      	ldr	r2, [pc, #156]	; (800a5b8 <xTaskResumeAll+0x124>)
 800a51c:	441a      	add	r2, r3
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	3304      	adds	r3, #4
 800a522:	4619      	mov	r1, r3
 800a524:	4610      	mov	r0, r2
 800a526:	f7ff fb54 	bl	8009bd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52e:	4b23      	ldr	r3, [pc, #140]	; (800a5bc <xTaskResumeAll+0x128>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a534:	429a      	cmp	r2, r3
 800a536:	d302      	bcc.n	800a53e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a538:	4b21      	ldr	r3, [pc, #132]	; (800a5c0 <xTaskResumeAll+0x12c>)
 800a53a:	2201      	movs	r2, #1
 800a53c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a53e:	4b1c      	ldr	r3, [pc, #112]	; (800a5b0 <xTaskResumeAll+0x11c>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d1cc      	bne.n	800a4e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d001      	beq.n	800a550 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a54c:	f000 fa84 	bl	800aa58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a550:	4b1c      	ldr	r3, [pc, #112]	; (800a5c4 <xTaskResumeAll+0x130>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d010      	beq.n	800a57e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a55c:	f000 f846 	bl	800a5ec <xTaskIncrementTick>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d002      	beq.n	800a56c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a566:	4b16      	ldr	r3, [pc, #88]	; (800a5c0 <xTaskResumeAll+0x12c>)
 800a568:	2201      	movs	r2, #1
 800a56a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	3b01      	subs	r3, #1
 800a570:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1f1      	bne.n	800a55c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a578:	4b12      	ldr	r3, [pc, #72]	; (800a5c4 <xTaskResumeAll+0x130>)
 800a57a:	2200      	movs	r2, #0
 800a57c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a57e:	4b10      	ldr	r3, [pc, #64]	; (800a5c0 <xTaskResumeAll+0x12c>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d009      	beq.n	800a59a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a586:	2301      	movs	r3, #1
 800a588:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a58a:	4b0f      	ldr	r3, [pc, #60]	; (800a5c8 <xTaskResumeAll+0x134>)
 800a58c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a590:	601a      	str	r2, [r3, #0]
 800a592:	f3bf 8f4f 	dsb	sy
 800a596:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a59a:	f000 fc43 	bl	800ae24 <vPortExitCritical>

	return xAlreadyYielded;
 800a59e:	68bb      	ldr	r3, [r7, #8]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3710      	adds	r7, #16
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	2000091c 	.word	0x2000091c
 800a5ac:	200008f4 	.word	0x200008f4
 800a5b0:	200008b4 	.word	0x200008b4
 800a5b4:	200008fc 	.word	0x200008fc
 800a5b8:	200007f8 	.word	0x200007f8
 800a5bc:	200007f4 	.word	0x200007f4
 800a5c0:	20000908 	.word	0x20000908
 800a5c4:	20000904 	.word	0x20000904
 800a5c8:	e000ed04 	.word	0xe000ed04

0800a5cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a5d2:	4b05      	ldr	r3, [pc, #20]	; (800a5e8 <xTaskGetTickCount+0x1c>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a5d8:	687b      	ldr	r3, [r7, #4]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop
 800a5e8:	200008f8 	.word	0x200008f8

0800a5ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b086      	sub	sp, #24
 800a5f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5f6:	4b4e      	ldr	r3, [pc, #312]	; (800a730 <xTaskIncrementTick+0x144>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f040 808e 	bne.w	800a71c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a600:	4b4c      	ldr	r3, [pc, #304]	; (800a734 <xTaskIncrementTick+0x148>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	3301      	adds	r3, #1
 800a606:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a608:	4a4a      	ldr	r2, [pc, #296]	; (800a734 <xTaskIncrementTick+0x148>)
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d120      	bne.n	800a656 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a614:	4b48      	ldr	r3, [pc, #288]	; (800a738 <xTaskIncrementTick+0x14c>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00a      	beq.n	800a634 <xTaskIncrementTick+0x48>
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	603b      	str	r3, [r7, #0]
}
 800a630:	bf00      	nop
 800a632:	e7fe      	b.n	800a632 <xTaskIncrementTick+0x46>
 800a634:	4b40      	ldr	r3, [pc, #256]	; (800a738 <xTaskIncrementTick+0x14c>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	60fb      	str	r3, [r7, #12]
 800a63a:	4b40      	ldr	r3, [pc, #256]	; (800a73c <xTaskIncrementTick+0x150>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a3e      	ldr	r2, [pc, #248]	; (800a738 <xTaskIncrementTick+0x14c>)
 800a640:	6013      	str	r3, [r2, #0]
 800a642:	4a3e      	ldr	r2, [pc, #248]	; (800a73c <xTaskIncrementTick+0x150>)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6013      	str	r3, [r2, #0]
 800a648:	4b3d      	ldr	r3, [pc, #244]	; (800a740 <xTaskIncrementTick+0x154>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	3301      	adds	r3, #1
 800a64e:	4a3c      	ldr	r2, [pc, #240]	; (800a740 <xTaskIncrementTick+0x154>)
 800a650:	6013      	str	r3, [r2, #0]
 800a652:	f000 fa01 	bl	800aa58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a656:	4b3b      	ldr	r3, [pc, #236]	; (800a744 <xTaskIncrementTick+0x158>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	693a      	ldr	r2, [r7, #16]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d348      	bcc.n	800a6f2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a660:	4b35      	ldr	r3, [pc, #212]	; (800a738 <xTaskIncrementTick+0x14c>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d104      	bne.n	800a674 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a66a:	4b36      	ldr	r3, [pc, #216]	; (800a744 <xTaskIncrementTick+0x158>)
 800a66c:	f04f 32ff 	mov.w	r2, #4294967295
 800a670:	601a      	str	r2, [r3, #0]
					break;
 800a672:	e03e      	b.n	800a6f2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a674:	4b30      	ldr	r3, [pc, #192]	; (800a738 <xTaskIncrementTick+0x14c>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a684:	693a      	ldr	r2, [r7, #16]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d203      	bcs.n	800a694 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a68c:	4a2d      	ldr	r2, [pc, #180]	; (800a744 <xTaskIncrementTick+0x158>)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a692:	e02e      	b.n	800a6f2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	3304      	adds	r3, #4
 800a698:	4618      	mov	r0, r3
 800a69a:	f7ff faf7 	bl	8009c8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d004      	beq.n	800a6b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	3318      	adds	r3, #24
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7ff faee 	bl	8009c8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	409a      	lsls	r2, r3
 800a6b8:	4b23      	ldr	r3, [pc, #140]	; (800a748 <xTaskIncrementTick+0x15c>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	4a22      	ldr	r2, [pc, #136]	; (800a748 <xTaskIncrementTick+0x15c>)
 800a6c0:	6013      	str	r3, [r2, #0]
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4413      	add	r3, r2
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	4a1f      	ldr	r2, [pc, #124]	; (800a74c <xTaskIncrementTick+0x160>)
 800a6d0:	441a      	add	r2, r3
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	3304      	adds	r3, #4
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	4610      	mov	r0, r2
 800a6da:	f7ff fa7a 	bl	8009bd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e2:	4b1b      	ldr	r3, [pc, #108]	; (800a750 <xTaskIncrementTick+0x164>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d3b9      	bcc.n	800a660 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6f0:	e7b6      	b.n	800a660 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a6f2:	4b17      	ldr	r3, [pc, #92]	; (800a750 <xTaskIncrementTick+0x164>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6f8:	4914      	ldr	r1, [pc, #80]	; (800a74c <xTaskIncrementTick+0x160>)
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	4413      	add	r3, r2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	440b      	add	r3, r1
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2b01      	cmp	r3, #1
 800a708:	d901      	bls.n	800a70e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a70a:	2301      	movs	r3, #1
 800a70c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a70e:	4b11      	ldr	r3, [pc, #68]	; (800a754 <xTaskIncrementTick+0x168>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d007      	beq.n	800a726 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a716:	2301      	movs	r3, #1
 800a718:	617b      	str	r3, [r7, #20]
 800a71a:	e004      	b.n	800a726 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a71c:	4b0e      	ldr	r3, [pc, #56]	; (800a758 <xTaskIncrementTick+0x16c>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	3301      	adds	r3, #1
 800a722:	4a0d      	ldr	r2, [pc, #52]	; (800a758 <xTaskIncrementTick+0x16c>)
 800a724:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a726:	697b      	ldr	r3, [r7, #20]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3718      	adds	r7, #24
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	2000091c 	.word	0x2000091c
 800a734:	200008f8 	.word	0x200008f8
 800a738:	200008ac 	.word	0x200008ac
 800a73c:	200008b0 	.word	0x200008b0
 800a740:	2000090c 	.word	0x2000090c
 800a744:	20000914 	.word	0x20000914
 800a748:	200008fc 	.word	0x200008fc
 800a74c:	200007f8 	.word	0x200007f8
 800a750:	200007f4 	.word	0x200007f4
 800a754:	20000908 	.word	0x20000908
 800a758:	20000904 	.word	0x20000904

0800a75c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a75c:	b480      	push	{r7}
 800a75e:	b087      	sub	sp, #28
 800a760:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a762:	4b29      	ldr	r3, [pc, #164]	; (800a808 <vTaskSwitchContext+0xac>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d003      	beq.n	800a772 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a76a:	4b28      	ldr	r3, [pc, #160]	; (800a80c <vTaskSwitchContext+0xb0>)
 800a76c:	2201      	movs	r2, #1
 800a76e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a770:	e044      	b.n	800a7fc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a772:	4b26      	ldr	r3, [pc, #152]	; (800a80c <vTaskSwitchContext+0xb0>)
 800a774:	2200      	movs	r2, #0
 800a776:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a778:	4b25      	ldr	r3, [pc, #148]	; (800a810 <vTaskSwitchContext+0xb4>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	fab3 f383 	clz	r3, r3
 800a784:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a786:	7afb      	ldrb	r3, [r7, #11]
 800a788:	f1c3 031f 	rsb	r3, r3, #31
 800a78c:	617b      	str	r3, [r7, #20]
 800a78e:	4921      	ldr	r1, [pc, #132]	; (800a814 <vTaskSwitchContext+0xb8>)
 800a790:	697a      	ldr	r2, [r7, #20]
 800a792:	4613      	mov	r3, r2
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	4413      	add	r3, r2
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	440b      	add	r3, r1
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10a      	bne.n	800a7b8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a6:	f383 8811 	msr	BASEPRI, r3
 800a7aa:	f3bf 8f6f 	isb	sy
 800a7ae:	f3bf 8f4f 	dsb	sy
 800a7b2:	607b      	str	r3, [r7, #4]
}
 800a7b4:	bf00      	nop
 800a7b6:	e7fe      	b.n	800a7b6 <vTaskSwitchContext+0x5a>
 800a7b8:	697a      	ldr	r2, [r7, #20]
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4413      	add	r3, r2
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	4a14      	ldr	r2, [pc, #80]	; (800a814 <vTaskSwitchContext+0xb8>)
 800a7c4:	4413      	add	r3, r2
 800a7c6:	613b      	str	r3, [r7, #16]
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	685a      	ldr	r2, [r3, #4]
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	605a      	str	r2, [r3, #4]
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	685a      	ldr	r2, [r3, #4]
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	3308      	adds	r3, #8
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d104      	bne.n	800a7e8 <vTaskSwitchContext+0x8c>
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	685a      	ldr	r2, [r3, #4]
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	605a      	str	r2, [r3, #4]
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	4a0a      	ldr	r2, [pc, #40]	; (800a818 <vTaskSwitchContext+0xbc>)
 800a7f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a7f2:	4b09      	ldr	r3, [pc, #36]	; (800a818 <vTaskSwitchContext+0xbc>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	334c      	adds	r3, #76	; 0x4c
 800a7f8:	4a08      	ldr	r2, [pc, #32]	; (800a81c <vTaskSwitchContext+0xc0>)
 800a7fa:	6013      	str	r3, [r2, #0]
}
 800a7fc:	bf00      	nop
 800a7fe:	371c      	adds	r7, #28
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr
 800a808:	2000091c 	.word	0x2000091c
 800a80c:	20000908 	.word	0x20000908
 800a810:	200008fc 	.word	0x200008fc
 800a814:	200007f8 	.word	0x200007f8
 800a818:	200007f4 	.word	0x200007f4
 800a81c:	20000010 	.word	0x20000010

0800a820 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d10a      	bne.n	800a84c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	60fb      	str	r3, [r7, #12]
}
 800a848:	bf00      	nop
 800a84a:	e7fe      	b.n	800a84a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	3318      	adds	r3, #24
 800a850:	4618      	mov	r0, r3
 800a852:	f7ff fa1b 	bl	8009c8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a856:	4b1d      	ldr	r3, [pc, #116]	; (800a8cc <xTaskRemoveFromEventList+0xac>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d11c      	bne.n	800a898 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	3304      	adds	r3, #4
 800a862:	4618      	mov	r0, r3
 800a864:	f7ff fa12 	bl	8009c8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a86c:	2201      	movs	r2, #1
 800a86e:	409a      	lsls	r2, r3
 800a870:	4b17      	ldr	r3, [pc, #92]	; (800a8d0 <xTaskRemoveFromEventList+0xb0>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4313      	orrs	r3, r2
 800a876:	4a16      	ldr	r2, [pc, #88]	; (800a8d0 <xTaskRemoveFromEventList+0xb0>)
 800a878:	6013      	str	r3, [r2, #0]
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a87e:	4613      	mov	r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	4413      	add	r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4a13      	ldr	r2, [pc, #76]	; (800a8d4 <xTaskRemoveFromEventList+0xb4>)
 800a888:	441a      	add	r2, r3
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	3304      	adds	r3, #4
 800a88e:	4619      	mov	r1, r3
 800a890:	4610      	mov	r0, r2
 800a892:	f7ff f99e 	bl	8009bd2 <vListInsertEnd>
 800a896:	e005      	b.n	800a8a4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	3318      	adds	r3, #24
 800a89c:	4619      	mov	r1, r3
 800a89e:	480e      	ldr	r0, [pc, #56]	; (800a8d8 <xTaskRemoveFromEventList+0xb8>)
 800a8a0:	f7ff f997 	bl	8009bd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8a8:	4b0c      	ldr	r3, [pc, #48]	; (800a8dc <xTaskRemoveFromEventList+0xbc>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d905      	bls.n	800a8be <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a8b6:	4b0a      	ldr	r3, [pc, #40]	; (800a8e0 <xTaskRemoveFromEventList+0xc0>)
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	601a      	str	r2, [r3, #0]
 800a8bc:	e001      	b.n	800a8c2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a8c2:	697b      	ldr	r3, [r7, #20]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3718      	adds	r7, #24
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	2000091c 	.word	0x2000091c
 800a8d0:	200008fc 	.word	0x200008fc
 800a8d4:	200007f8 	.word	0x200007f8
 800a8d8:	200008b4 	.word	0x200008b4
 800a8dc:	200007f4 	.word	0x200007f4
 800a8e0:	20000908 	.word	0x20000908

0800a8e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a8ec:	f000 f852 	bl	800a994 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a8f0:	4b06      	ldr	r3, [pc, #24]	; (800a90c <prvIdleTask+0x28>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d9f9      	bls.n	800a8ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800a8f8:	4b05      	ldr	r3, [pc, #20]	; (800a910 <prvIdleTask+0x2c>)
 800a8fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8fe:	601a      	str	r2, [r3, #0]
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a908:	e7f0      	b.n	800a8ec <prvIdleTask+0x8>
 800a90a:	bf00      	nop
 800a90c:	200007f8 	.word	0x200007f8
 800a910:	e000ed04 	.word	0xe000ed04

0800a914 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a91a:	2300      	movs	r3, #0
 800a91c:	607b      	str	r3, [r7, #4]
 800a91e:	e00c      	b.n	800a93a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	4613      	mov	r3, r2
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	4413      	add	r3, r2
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	4a12      	ldr	r2, [pc, #72]	; (800a974 <prvInitialiseTaskLists+0x60>)
 800a92c:	4413      	add	r3, r2
 800a92e:	4618      	mov	r0, r3
 800a930:	f7ff f922 	bl	8009b78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	3301      	adds	r3, #1
 800a938:	607b      	str	r3, [r7, #4]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2b06      	cmp	r3, #6
 800a93e:	d9ef      	bls.n	800a920 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a940:	480d      	ldr	r0, [pc, #52]	; (800a978 <prvInitialiseTaskLists+0x64>)
 800a942:	f7ff f919 	bl	8009b78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a946:	480d      	ldr	r0, [pc, #52]	; (800a97c <prvInitialiseTaskLists+0x68>)
 800a948:	f7ff f916 	bl	8009b78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a94c:	480c      	ldr	r0, [pc, #48]	; (800a980 <prvInitialiseTaskLists+0x6c>)
 800a94e:	f7ff f913 	bl	8009b78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a952:	480c      	ldr	r0, [pc, #48]	; (800a984 <prvInitialiseTaskLists+0x70>)
 800a954:	f7ff f910 	bl	8009b78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a958:	480b      	ldr	r0, [pc, #44]	; (800a988 <prvInitialiseTaskLists+0x74>)
 800a95a:	f7ff f90d 	bl	8009b78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a95e:	4b0b      	ldr	r3, [pc, #44]	; (800a98c <prvInitialiseTaskLists+0x78>)
 800a960:	4a05      	ldr	r2, [pc, #20]	; (800a978 <prvInitialiseTaskLists+0x64>)
 800a962:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a964:	4b0a      	ldr	r3, [pc, #40]	; (800a990 <prvInitialiseTaskLists+0x7c>)
 800a966:	4a05      	ldr	r2, [pc, #20]	; (800a97c <prvInitialiseTaskLists+0x68>)
 800a968:	601a      	str	r2, [r3, #0]
}
 800a96a:	bf00      	nop
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	200007f8 	.word	0x200007f8
 800a978:	20000884 	.word	0x20000884
 800a97c:	20000898 	.word	0x20000898
 800a980:	200008b4 	.word	0x200008b4
 800a984:	200008c8 	.word	0x200008c8
 800a988:	200008e0 	.word	0x200008e0
 800a98c:	200008ac 	.word	0x200008ac
 800a990:	200008b0 	.word	0x200008b0

0800a994 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a99a:	e019      	b.n	800a9d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a99c:	f000 fa12 	bl	800adc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9a0:	4b10      	ldr	r3, [pc, #64]	; (800a9e4 <prvCheckTasksWaitingTermination+0x50>)
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	3304      	adds	r3, #4
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7ff f96d 	bl	8009c8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a9b2:	4b0d      	ldr	r3, [pc, #52]	; (800a9e8 <prvCheckTasksWaitingTermination+0x54>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	4a0b      	ldr	r2, [pc, #44]	; (800a9e8 <prvCheckTasksWaitingTermination+0x54>)
 800a9ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a9bc:	4b0b      	ldr	r3, [pc, #44]	; (800a9ec <prvCheckTasksWaitingTermination+0x58>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	4a0a      	ldr	r2, [pc, #40]	; (800a9ec <prvCheckTasksWaitingTermination+0x58>)
 800a9c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a9c6:	f000 fa2d 	bl	800ae24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 f810 	bl	800a9f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9d0:	4b06      	ldr	r3, [pc, #24]	; (800a9ec <prvCheckTasksWaitingTermination+0x58>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1e1      	bne.n	800a99c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a9d8:	bf00      	nop
 800a9da:	bf00      	nop
 800a9dc:	3708      	adds	r7, #8
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	200008c8 	.word	0x200008c8
 800a9e8:	200008f4 	.word	0x200008f4
 800a9ec:	200008dc 	.word	0x200008dc

0800a9f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	334c      	adds	r3, #76	; 0x4c
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f000 fddb 	bl	800b5b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d108      	bne.n	800aa1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa10:	4618      	mov	r0, r3
 800aa12:	f000 fb85 	bl	800b120 <vPortFree>
				vPortFree( pxTCB );
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 fb82 	bl	800b120 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa1c:	e018      	b.n	800aa50 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d103      	bne.n	800aa30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 fb79 	bl	800b120 <vPortFree>
	}
 800aa2e:	e00f      	b.n	800aa50 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	d00a      	beq.n	800aa50 <prvDeleteTCB+0x60>
	__asm volatile
 800aa3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3e:	f383 8811 	msr	BASEPRI, r3
 800aa42:	f3bf 8f6f 	isb	sy
 800aa46:	f3bf 8f4f 	dsb	sy
 800aa4a:	60fb      	str	r3, [r7, #12]
}
 800aa4c:	bf00      	nop
 800aa4e:	e7fe      	b.n	800aa4e <prvDeleteTCB+0x5e>
	}
 800aa50:	bf00      	nop
 800aa52:	3710      	adds	r7, #16
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa5e:	4b0c      	ldr	r3, [pc, #48]	; (800aa90 <prvResetNextTaskUnblockTime+0x38>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d104      	bne.n	800aa72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa68:	4b0a      	ldr	r3, [pc, #40]	; (800aa94 <prvResetNextTaskUnblockTime+0x3c>)
 800aa6a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa70:	e008      	b.n	800aa84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa72:	4b07      	ldr	r3, [pc, #28]	; (800aa90 <prvResetNextTaskUnblockTime+0x38>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	68db      	ldr	r3, [r3, #12]
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	4a04      	ldr	r2, [pc, #16]	; (800aa94 <prvResetNextTaskUnblockTime+0x3c>)
 800aa82:	6013      	str	r3, [r2, #0]
}
 800aa84:	bf00      	nop
 800aa86:	370c      	adds	r7, #12
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr
 800aa90:	200008ac 	.word	0x200008ac
 800aa94:	20000914 	.word	0x20000914

0800aa98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aaa2:	4b29      	ldr	r3, [pc, #164]	; (800ab48 <prvAddCurrentTaskToDelayedList+0xb0>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aaa8:	4b28      	ldr	r3, [pc, #160]	; (800ab4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	3304      	adds	r3, #4
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7ff f8ec 	bl	8009c8c <uxListRemove>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d10b      	bne.n	800aad2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800aaba:	4b24      	ldr	r3, [pc, #144]	; (800ab4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac0:	2201      	movs	r2, #1
 800aac2:	fa02 f303 	lsl.w	r3, r2, r3
 800aac6:	43da      	mvns	r2, r3
 800aac8:	4b21      	ldr	r3, [pc, #132]	; (800ab50 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4013      	ands	r3, r2
 800aace:	4a20      	ldr	r2, [pc, #128]	; (800ab50 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aad0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad8:	d10a      	bne.n	800aaf0 <prvAddCurrentTaskToDelayedList+0x58>
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d007      	beq.n	800aaf0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aae0:	4b1a      	ldr	r3, [pc, #104]	; (800ab4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	3304      	adds	r3, #4
 800aae6:	4619      	mov	r1, r3
 800aae8:	481a      	ldr	r0, [pc, #104]	; (800ab54 <prvAddCurrentTaskToDelayedList+0xbc>)
 800aaea:	f7ff f872 	bl	8009bd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aaee:	e026      	b.n	800ab3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aaf0:	68fa      	ldr	r2, [r7, #12]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aaf8:	4b14      	ldr	r3, [pc, #80]	; (800ab4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	68ba      	ldr	r2, [r7, #8]
 800aafe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ab00:	68ba      	ldr	r2, [r7, #8]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d209      	bcs.n	800ab1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab08:	4b13      	ldr	r3, [pc, #76]	; (800ab58 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	4b0f      	ldr	r3, [pc, #60]	; (800ab4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	3304      	adds	r3, #4
 800ab12:	4619      	mov	r1, r3
 800ab14:	4610      	mov	r0, r2
 800ab16:	f7ff f880 	bl	8009c1a <vListInsert>
}
 800ab1a:	e010      	b.n	800ab3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab1c:	4b0f      	ldr	r3, [pc, #60]	; (800ab5c <prvAddCurrentTaskToDelayedList+0xc4>)
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	4b0a      	ldr	r3, [pc, #40]	; (800ab4c <prvAddCurrentTaskToDelayedList+0xb4>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	3304      	adds	r3, #4
 800ab26:	4619      	mov	r1, r3
 800ab28:	4610      	mov	r0, r2
 800ab2a:	f7ff f876 	bl	8009c1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab2e:	4b0c      	ldr	r3, [pc, #48]	; (800ab60 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	68ba      	ldr	r2, [r7, #8]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d202      	bcs.n	800ab3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ab38:	4a09      	ldr	r2, [pc, #36]	; (800ab60 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	6013      	str	r3, [r2, #0]
}
 800ab3e:	bf00      	nop
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	200008f8 	.word	0x200008f8
 800ab4c:	200007f4 	.word	0x200007f4
 800ab50:	200008fc 	.word	0x200008fc
 800ab54:	200008e0 	.word	0x200008e0
 800ab58:	200008b0 	.word	0x200008b0
 800ab5c:	200008ac 	.word	0x200008ac
 800ab60:	20000914 	.word	0x20000914

0800ab64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	3b04      	subs	r3, #4
 800ab74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ab7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	3b04      	subs	r3, #4
 800ab82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	f023 0201 	bic.w	r2, r3, #1
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	3b04      	subs	r3, #4
 800ab92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ab94:	4a0c      	ldr	r2, [pc, #48]	; (800abc8 <pxPortInitialiseStack+0x64>)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	3b14      	subs	r3, #20
 800ab9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	3b04      	subs	r3, #4
 800abaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f06f 0202 	mvn.w	r2, #2
 800abb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	3b20      	subs	r3, #32
 800abb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800abba:	68fb      	ldr	r3, [r7, #12]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3714      	adds	r7, #20
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr
 800abc8:	0800abcd 	.word	0x0800abcd

0800abcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800abd2:	2300      	movs	r3, #0
 800abd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800abd6:	4b12      	ldr	r3, [pc, #72]	; (800ac20 <prvTaskExitError+0x54>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abde:	d00a      	beq.n	800abf6 <prvTaskExitError+0x2a>
	__asm volatile
 800abe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe4:	f383 8811 	msr	BASEPRI, r3
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	60fb      	str	r3, [r7, #12]
}
 800abf2:	bf00      	nop
 800abf4:	e7fe      	b.n	800abf4 <prvTaskExitError+0x28>
	__asm volatile
 800abf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfa:	f383 8811 	msr	BASEPRI, r3
 800abfe:	f3bf 8f6f 	isb	sy
 800ac02:	f3bf 8f4f 	dsb	sy
 800ac06:	60bb      	str	r3, [r7, #8]
}
 800ac08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac0a:	bf00      	nop
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d0fc      	beq.n	800ac0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac12:	bf00      	nop
 800ac14:	bf00      	nop
 800ac16:	3714      	adds	r7, #20
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr
 800ac20:	2000000c 	.word	0x2000000c
	...

0800ac30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac30:	4b07      	ldr	r3, [pc, #28]	; (800ac50 <pxCurrentTCBConst2>)
 800ac32:	6819      	ldr	r1, [r3, #0]
 800ac34:	6808      	ldr	r0, [r1, #0]
 800ac36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3a:	f380 8809 	msr	PSP, r0
 800ac3e:	f3bf 8f6f 	isb	sy
 800ac42:	f04f 0000 	mov.w	r0, #0
 800ac46:	f380 8811 	msr	BASEPRI, r0
 800ac4a:	4770      	bx	lr
 800ac4c:	f3af 8000 	nop.w

0800ac50 <pxCurrentTCBConst2>:
 800ac50:	200007f4 	.word	0x200007f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ac54:	bf00      	nop
 800ac56:	bf00      	nop

0800ac58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ac58:	4808      	ldr	r0, [pc, #32]	; (800ac7c <prvPortStartFirstTask+0x24>)
 800ac5a:	6800      	ldr	r0, [r0, #0]
 800ac5c:	6800      	ldr	r0, [r0, #0]
 800ac5e:	f380 8808 	msr	MSP, r0
 800ac62:	f04f 0000 	mov.w	r0, #0
 800ac66:	f380 8814 	msr	CONTROL, r0
 800ac6a:	b662      	cpsie	i
 800ac6c:	b661      	cpsie	f
 800ac6e:	f3bf 8f4f 	dsb	sy
 800ac72:	f3bf 8f6f 	isb	sy
 800ac76:	df00      	svc	0
 800ac78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ac7a:	bf00      	nop
 800ac7c:	e000ed08 	.word	0xe000ed08

0800ac80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ac86:	4b46      	ldr	r3, [pc, #280]	; (800ada0 <xPortStartScheduler+0x120>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a46      	ldr	r2, [pc, #280]	; (800ada4 <xPortStartScheduler+0x124>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d10a      	bne.n	800aca6 <xPortStartScheduler+0x26>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	613b      	str	r3, [r7, #16]
}
 800aca2:	bf00      	nop
 800aca4:	e7fe      	b.n	800aca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aca6:	4b3e      	ldr	r3, [pc, #248]	; (800ada0 <xPortStartScheduler+0x120>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a3f      	ldr	r2, [pc, #252]	; (800ada8 <xPortStartScheduler+0x128>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d10a      	bne.n	800acc6 <xPortStartScheduler+0x46>
	__asm volatile
 800acb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb4:	f383 8811 	msr	BASEPRI, r3
 800acb8:	f3bf 8f6f 	isb	sy
 800acbc:	f3bf 8f4f 	dsb	sy
 800acc0:	60fb      	str	r3, [r7, #12]
}
 800acc2:	bf00      	nop
 800acc4:	e7fe      	b.n	800acc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800acc6:	4b39      	ldr	r3, [pc, #228]	; (800adac <xPortStartScheduler+0x12c>)
 800acc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	22ff      	movs	r2, #255	; 0xff
 800acd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ace0:	78fb      	ldrb	r3, [r7, #3]
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ace8:	b2da      	uxtb	r2, r3
 800acea:	4b31      	ldr	r3, [pc, #196]	; (800adb0 <xPortStartScheduler+0x130>)
 800acec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800acee:	4b31      	ldr	r3, [pc, #196]	; (800adb4 <xPortStartScheduler+0x134>)
 800acf0:	2207      	movs	r2, #7
 800acf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800acf4:	e009      	b.n	800ad0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800acf6:	4b2f      	ldr	r3, [pc, #188]	; (800adb4 <xPortStartScheduler+0x134>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	3b01      	subs	r3, #1
 800acfc:	4a2d      	ldr	r2, [pc, #180]	; (800adb4 <xPortStartScheduler+0x134>)
 800acfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad00:	78fb      	ldrb	r3, [r7, #3]
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	005b      	lsls	r3, r3, #1
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad0a:	78fb      	ldrb	r3, [r7, #3]
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad12:	2b80      	cmp	r3, #128	; 0x80
 800ad14:	d0ef      	beq.n	800acf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad16:	4b27      	ldr	r3, [pc, #156]	; (800adb4 <xPortStartScheduler+0x134>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f1c3 0307 	rsb	r3, r3, #7
 800ad1e:	2b04      	cmp	r3, #4
 800ad20:	d00a      	beq.n	800ad38 <xPortStartScheduler+0xb8>
	__asm volatile
 800ad22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad26:	f383 8811 	msr	BASEPRI, r3
 800ad2a:	f3bf 8f6f 	isb	sy
 800ad2e:	f3bf 8f4f 	dsb	sy
 800ad32:	60bb      	str	r3, [r7, #8]
}
 800ad34:	bf00      	nop
 800ad36:	e7fe      	b.n	800ad36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad38:	4b1e      	ldr	r3, [pc, #120]	; (800adb4 <xPortStartScheduler+0x134>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	021b      	lsls	r3, r3, #8
 800ad3e:	4a1d      	ldr	r2, [pc, #116]	; (800adb4 <xPortStartScheduler+0x134>)
 800ad40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad42:	4b1c      	ldr	r3, [pc, #112]	; (800adb4 <xPortStartScheduler+0x134>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad4a:	4a1a      	ldr	r2, [pc, #104]	; (800adb4 <xPortStartScheduler+0x134>)
 800ad4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	b2da      	uxtb	r2, r3
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad56:	4b18      	ldr	r3, [pc, #96]	; (800adb8 <xPortStartScheduler+0x138>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a17      	ldr	r2, [pc, #92]	; (800adb8 <xPortStartScheduler+0x138>)
 800ad5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ad60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad62:	4b15      	ldr	r3, [pc, #84]	; (800adb8 <xPortStartScheduler+0x138>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a14      	ldr	r2, [pc, #80]	; (800adb8 <xPortStartScheduler+0x138>)
 800ad68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ad6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ad6e:	f000 f8dd 	bl	800af2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ad72:	4b12      	ldr	r3, [pc, #72]	; (800adbc <xPortStartScheduler+0x13c>)
 800ad74:	2200      	movs	r2, #0
 800ad76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ad78:	f000 f8fc 	bl	800af74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ad7c:	4b10      	ldr	r3, [pc, #64]	; (800adc0 <xPortStartScheduler+0x140>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a0f      	ldr	r2, [pc, #60]	; (800adc0 <xPortStartScheduler+0x140>)
 800ad82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ad86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ad88:	f7ff ff66 	bl	800ac58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ad8c:	f7ff fce6 	bl	800a75c <vTaskSwitchContext>
	prvTaskExitError();
 800ad90:	f7ff ff1c 	bl	800abcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3718      	adds	r7, #24
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	e000ed00 	.word	0xe000ed00
 800ada4:	410fc271 	.word	0x410fc271
 800ada8:	410fc270 	.word	0x410fc270
 800adac:	e000e400 	.word	0xe000e400
 800adb0:	20000920 	.word	0x20000920
 800adb4:	20000924 	.word	0x20000924
 800adb8:	e000ed20 	.word	0xe000ed20
 800adbc:	2000000c 	.word	0x2000000c
 800adc0:	e000ef34 	.word	0xe000ef34

0800adc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
	__asm volatile
 800adca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adce:	f383 8811 	msr	BASEPRI, r3
 800add2:	f3bf 8f6f 	isb	sy
 800add6:	f3bf 8f4f 	dsb	sy
 800adda:	607b      	str	r3, [r7, #4]
}
 800addc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800adde:	4b0f      	ldr	r3, [pc, #60]	; (800ae1c <vPortEnterCritical+0x58>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	3301      	adds	r3, #1
 800ade4:	4a0d      	ldr	r2, [pc, #52]	; (800ae1c <vPortEnterCritical+0x58>)
 800ade6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ade8:	4b0c      	ldr	r3, [pc, #48]	; (800ae1c <vPortEnterCritical+0x58>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2b01      	cmp	r3, #1
 800adee:	d10f      	bne.n	800ae10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800adf0:	4b0b      	ldr	r3, [pc, #44]	; (800ae20 <vPortEnterCritical+0x5c>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00a      	beq.n	800ae10 <vPortEnterCritical+0x4c>
	__asm volatile
 800adfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfe:	f383 8811 	msr	BASEPRI, r3
 800ae02:	f3bf 8f6f 	isb	sy
 800ae06:	f3bf 8f4f 	dsb	sy
 800ae0a:	603b      	str	r3, [r7, #0]
}
 800ae0c:	bf00      	nop
 800ae0e:	e7fe      	b.n	800ae0e <vPortEnterCritical+0x4a>
	}
}
 800ae10:	bf00      	nop
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr
 800ae1c:	2000000c 	.word	0x2000000c
 800ae20:	e000ed04 	.word	0xe000ed04

0800ae24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae2a:	4b12      	ldr	r3, [pc, #72]	; (800ae74 <vPortExitCritical+0x50>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d10a      	bne.n	800ae48 <vPortExitCritical+0x24>
	__asm volatile
 800ae32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae36:	f383 8811 	msr	BASEPRI, r3
 800ae3a:	f3bf 8f6f 	isb	sy
 800ae3e:	f3bf 8f4f 	dsb	sy
 800ae42:	607b      	str	r3, [r7, #4]
}
 800ae44:	bf00      	nop
 800ae46:	e7fe      	b.n	800ae46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ae48:	4b0a      	ldr	r3, [pc, #40]	; (800ae74 <vPortExitCritical+0x50>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	4a09      	ldr	r2, [pc, #36]	; (800ae74 <vPortExitCritical+0x50>)
 800ae50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae52:	4b08      	ldr	r3, [pc, #32]	; (800ae74 <vPortExitCritical+0x50>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d105      	bne.n	800ae66 <vPortExitCritical+0x42>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	f383 8811 	msr	BASEPRI, r3
}
 800ae64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae66:	bf00      	nop
 800ae68:	370c      	adds	r7, #12
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	2000000c 	.word	0x2000000c
	...

0800ae80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ae80:	f3ef 8009 	mrs	r0, PSP
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	4b15      	ldr	r3, [pc, #84]	; (800aee0 <pxCurrentTCBConst>)
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	f01e 0f10 	tst.w	lr, #16
 800ae90:	bf08      	it	eq
 800ae92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ae96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae9a:	6010      	str	r0, [r2, #0]
 800ae9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aea4:	f380 8811 	msr	BASEPRI, r0
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	f3bf 8f6f 	isb	sy
 800aeb0:	f7ff fc54 	bl	800a75c <vTaskSwitchContext>
 800aeb4:	f04f 0000 	mov.w	r0, #0
 800aeb8:	f380 8811 	msr	BASEPRI, r0
 800aebc:	bc09      	pop	{r0, r3}
 800aebe:	6819      	ldr	r1, [r3, #0]
 800aec0:	6808      	ldr	r0, [r1, #0]
 800aec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec6:	f01e 0f10 	tst.w	lr, #16
 800aeca:	bf08      	it	eq
 800aecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aed0:	f380 8809 	msr	PSP, r0
 800aed4:	f3bf 8f6f 	isb	sy
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop
 800aedc:	f3af 8000 	nop.w

0800aee0 <pxCurrentTCBConst>:
 800aee0:	200007f4 	.word	0x200007f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aee4:	bf00      	nop
 800aee6:	bf00      	nop

0800aee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
	__asm volatile
 800aeee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	607b      	str	r3, [r7, #4]
}
 800af00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af02:	f7ff fb73 	bl	800a5ec <xTaskIncrementTick>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d003      	beq.n	800af14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af0c:	4b06      	ldr	r3, [pc, #24]	; (800af28 <SysTick_Handler+0x40>)
 800af0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af12:	601a      	str	r2, [r3, #0]
 800af14:	2300      	movs	r3, #0
 800af16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	f383 8811 	msr	BASEPRI, r3
}
 800af1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af20:	bf00      	nop
 800af22:	3708      	adds	r7, #8
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	e000ed04 	.word	0xe000ed04

0800af2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af2c:	b480      	push	{r7}
 800af2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af30:	4b0b      	ldr	r3, [pc, #44]	; (800af60 <vPortSetupTimerInterrupt+0x34>)
 800af32:	2200      	movs	r2, #0
 800af34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af36:	4b0b      	ldr	r3, [pc, #44]	; (800af64 <vPortSetupTimerInterrupt+0x38>)
 800af38:	2200      	movs	r2, #0
 800af3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af3c:	4b0a      	ldr	r3, [pc, #40]	; (800af68 <vPortSetupTimerInterrupt+0x3c>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a0a      	ldr	r2, [pc, #40]	; (800af6c <vPortSetupTimerInterrupt+0x40>)
 800af42:	fba2 2303 	umull	r2, r3, r2, r3
 800af46:	099b      	lsrs	r3, r3, #6
 800af48:	4a09      	ldr	r2, [pc, #36]	; (800af70 <vPortSetupTimerInterrupt+0x44>)
 800af4a:	3b01      	subs	r3, #1
 800af4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af4e:	4b04      	ldr	r3, [pc, #16]	; (800af60 <vPortSetupTimerInterrupt+0x34>)
 800af50:	2207      	movs	r2, #7
 800af52:	601a      	str	r2, [r3, #0]
}
 800af54:	bf00      	nop
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop
 800af60:	e000e010 	.word	0xe000e010
 800af64:	e000e018 	.word	0xe000e018
 800af68:	20000000 	.word	0x20000000
 800af6c:	10624dd3 	.word	0x10624dd3
 800af70:	e000e014 	.word	0xe000e014

0800af74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800af74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800af84 <vPortEnableVFP+0x10>
 800af78:	6801      	ldr	r1, [r0, #0]
 800af7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800af7e:	6001      	str	r1, [r0, #0]
 800af80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800af82:	bf00      	nop
 800af84:	e000ed88 	.word	0xe000ed88

0800af88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b08a      	sub	sp, #40	; 0x28
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af90:	2300      	movs	r3, #0
 800af92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af94:	f7ff fa70 	bl	800a478 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af98:	4b5b      	ldr	r3, [pc, #364]	; (800b108 <pvPortMalloc+0x180>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d101      	bne.n	800afa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800afa0:	f000 f920 	bl	800b1e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800afa4:	4b59      	ldr	r3, [pc, #356]	; (800b10c <pvPortMalloc+0x184>)
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4013      	ands	r3, r2
 800afac:	2b00      	cmp	r3, #0
 800afae:	f040 8093 	bne.w	800b0d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d01d      	beq.n	800aff4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800afb8:	2208      	movs	r2, #8
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	4413      	add	r3, r2
 800afbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f003 0307 	and.w	r3, r3, #7
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d014      	beq.n	800aff4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f023 0307 	bic.w	r3, r3, #7
 800afd0:	3308      	adds	r3, #8
 800afd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f003 0307 	and.w	r3, r3, #7
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00a      	beq.n	800aff4 <pvPortMalloc+0x6c>
	__asm volatile
 800afde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe2:	f383 8811 	msr	BASEPRI, r3
 800afe6:	f3bf 8f6f 	isb	sy
 800afea:	f3bf 8f4f 	dsb	sy
 800afee:	617b      	str	r3, [r7, #20]
}
 800aff0:	bf00      	nop
 800aff2:	e7fe      	b.n	800aff2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d06e      	beq.n	800b0d8 <pvPortMalloc+0x150>
 800affa:	4b45      	ldr	r3, [pc, #276]	; (800b110 <pvPortMalloc+0x188>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	429a      	cmp	r2, r3
 800b002:	d869      	bhi.n	800b0d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b004:	4b43      	ldr	r3, [pc, #268]	; (800b114 <pvPortMalloc+0x18c>)
 800b006:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b008:	4b42      	ldr	r3, [pc, #264]	; (800b114 <pvPortMalloc+0x18c>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b00e:	e004      	b.n	800b01a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b012:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	429a      	cmp	r2, r3
 800b022:	d903      	bls.n	800b02c <pvPortMalloc+0xa4>
 800b024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d1f1      	bne.n	800b010 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b02c:	4b36      	ldr	r3, [pc, #216]	; (800b108 <pvPortMalloc+0x180>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b032:	429a      	cmp	r2, r3
 800b034:	d050      	beq.n	800b0d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b036:	6a3b      	ldr	r3, [r7, #32]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2208      	movs	r2, #8
 800b03c:	4413      	add	r3, r2
 800b03e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	6a3b      	ldr	r3, [r7, #32]
 800b046:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04a:	685a      	ldr	r2, [r3, #4]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	1ad2      	subs	r2, r2, r3
 800b050:	2308      	movs	r3, #8
 800b052:	005b      	lsls	r3, r3, #1
 800b054:	429a      	cmp	r2, r3
 800b056:	d91f      	bls.n	800b098 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4413      	add	r3, r2
 800b05e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b060:	69bb      	ldr	r3, [r7, #24]
 800b062:	f003 0307 	and.w	r3, r3, #7
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00a      	beq.n	800b080 <pvPortMalloc+0xf8>
	__asm volatile
 800b06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06e:	f383 8811 	msr	BASEPRI, r3
 800b072:	f3bf 8f6f 	isb	sy
 800b076:	f3bf 8f4f 	dsb	sy
 800b07a:	613b      	str	r3, [r7, #16]
}
 800b07c:	bf00      	nop
 800b07e:	e7fe      	b.n	800b07e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b082:	685a      	ldr	r2, [r3, #4]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	1ad2      	subs	r2, r2, r3
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b092:	69b8      	ldr	r0, [r7, #24]
 800b094:	f000 f908 	bl	800b2a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b098:	4b1d      	ldr	r3, [pc, #116]	; (800b110 <pvPortMalloc+0x188>)
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	1ad3      	subs	r3, r2, r3
 800b0a2:	4a1b      	ldr	r2, [pc, #108]	; (800b110 <pvPortMalloc+0x188>)
 800b0a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b0a6:	4b1a      	ldr	r3, [pc, #104]	; (800b110 <pvPortMalloc+0x188>)
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	4b1b      	ldr	r3, [pc, #108]	; (800b118 <pvPortMalloc+0x190>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d203      	bcs.n	800b0ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b0b2:	4b17      	ldr	r3, [pc, #92]	; (800b110 <pvPortMalloc+0x188>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a18      	ldr	r2, [pc, #96]	; (800b118 <pvPortMalloc+0x190>)
 800b0b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0bc:	685a      	ldr	r2, [r3, #4]
 800b0be:	4b13      	ldr	r3, [pc, #76]	; (800b10c <pvPortMalloc+0x184>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	431a      	orrs	r2, r3
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b0ce:	4b13      	ldr	r3, [pc, #76]	; (800b11c <pvPortMalloc+0x194>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	4a11      	ldr	r2, [pc, #68]	; (800b11c <pvPortMalloc+0x194>)
 800b0d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b0d8:	f7ff f9dc 	bl	800a494 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	f003 0307 	and.w	r3, r3, #7
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00a      	beq.n	800b0fc <pvPortMalloc+0x174>
	__asm volatile
 800b0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ea:	f383 8811 	msr	BASEPRI, r3
 800b0ee:	f3bf 8f6f 	isb	sy
 800b0f2:	f3bf 8f4f 	dsb	sy
 800b0f6:	60fb      	str	r3, [r7, #12]
}
 800b0f8:	bf00      	nop
 800b0fa:	e7fe      	b.n	800b0fa <pvPortMalloc+0x172>
	return pvReturn;
 800b0fc:	69fb      	ldr	r3, [r7, #28]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3728      	adds	r7, #40	; 0x28
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	20010330 	.word	0x20010330
 800b10c:	20010344 	.word	0x20010344
 800b110:	20010334 	.word	0x20010334
 800b114:	20010328 	.word	0x20010328
 800b118:	20010338 	.word	0x20010338
 800b11c:	2001033c 	.word	0x2001033c

0800b120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b086      	sub	sp, #24
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d04d      	beq.n	800b1ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b132:	2308      	movs	r3, #8
 800b134:	425b      	negs	r3, r3
 800b136:	697a      	ldr	r2, [r7, #20]
 800b138:	4413      	add	r3, r2
 800b13a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	685a      	ldr	r2, [r3, #4]
 800b144:	4b24      	ldr	r3, [pc, #144]	; (800b1d8 <vPortFree+0xb8>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4013      	ands	r3, r2
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d10a      	bne.n	800b164 <vPortFree+0x44>
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	60fb      	str	r3, [r7, #12]
}
 800b160:	bf00      	nop
 800b162:	e7fe      	b.n	800b162 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d00a      	beq.n	800b182 <vPortFree+0x62>
	__asm volatile
 800b16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b170:	f383 8811 	msr	BASEPRI, r3
 800b174:	f3bf 8f6f 	isb	sy
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	60bb      	str	r3, [r7, #8]
}
 800b17e:	bf00      	nop
 800b180:	e7fe      	b.n	800b180 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	685a      	ldr	r2, [r3, #4]
 800b186:	4b14      	ldr	r3, [pc, #80]	; (800b1d8 <vPortFree+0xb8>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4013      	ands	r3, r2
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d01e      	beq.n	800b1ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d11a      	bne.n	800b1ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	685a      	ldr	r2, [r3, #4]
 800b19c:	4b0e      	ldr	r3, [pc, #56]	; (800b1d8 <vPortFree+0xb8>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	43db      	mvns	r3, r3
 800b1a2:	401a      	ands	r2, r3
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b1a8:	f7ff f966 	bl	800a478 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	685a      	ldr	r2, [r3, #4]
 800b1b0:	4b0a      	ldr	r3, [pc, #40]	; (800b1dc <vPortFree+0xbc>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	4a09      	ldr	r2, [pc, #36]	; (800b1dc <vPortFree+0xbc>)
 800b1b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b1ba:	6938      	ldr	r0, [r7, #16]
 800b1bc:	f000 f874 	bl	800b2a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b1c0:	4b07      	ldr	r3, [pc, #28]	; (800b1e0 <vPortFree+0xc0>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	4a06      	ldr	r2, [pc, #24]	; (800b1e0 <vPortFree+0xc0>)
 800b1c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b1ca:	f7ff f963 	bl	800a494 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b1ce:	bf00      	nop
 800b1d0:	3718      	adds	r7, #24
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	20010344 	.word	0x20010344
 800b1dc:	20010334 	.word	0x20010334
 800b1e0:	20010340 	.word	0x20010340

0800b1e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b1ea:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 800b1ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b1f0:	4b27      	ldr	r3, [pc, #156]	; (800b290 <prvHeapInit+0xac>)
 800b1f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f003 0307 	and.w	r3, r3, #7
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d00c      	beq.n	800b218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	3307      	adds	r3, #7
 800b202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f023 0307 	bic.w	r3, r3, #7
 800b20a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b20c:	68ba      	ldr	r2, [r7, #8]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	4a1f      	ldr	r2, [pc, #124]	; (800b290 <prvHeapInit+0xac>)
 800b214:	4413      	add	r3, r2
 800b216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b21c:	4a1d      	ldr	r2, [pc, #116]	; (800b294 <prvHeapInit+0xb0>)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b222:	4b1c      	ldr	r3, [pc, #112]	; (800b294 <prvHeapInit+0xb0>)
 800b224:	2200      	movs	r2, #0
 800b226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	68ba      	ldr	r2, [r7, #8]
 800b22c:	4413      	add	r3, r2
 800b22e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b230:	2208      	movs	r2, #8
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	1a9b      	subs	r3, r3, r2
 800b236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f023 0307 	bic.w	r3, r3, #7
 800b23e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	4a15      	ldr	r2, [pc, #84]	; (800b298 <prvHeapInit+0xb4>)
 800b244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b246:	4b14      	ldr	r3, [pc, #80]	; (800b298 <prvHeapInit+0xb4>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2200      	movs	r2, #0
 800b24c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b24e:	4b12      	ldr	r3, [pc, #72]	; (800b298 <prvHeapInit+0xb4>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2200      	movs	r2, #0
 800b254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	1ad2      	subs	r2, r2, r3
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b264:	4b0c      	ldr	r3, [pc, #48]	; (800b298 <prvHeapInit+0xb4>)
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	4a0a      	ldr	r2, [pc, #40]	; (800b29c <prvHeapInit+0xb8>)
 800b272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	685b      	ldr	r3, [r3, #4]
 800b278:	4a09      	ldr	r2, [pc, #36]	; (800b2a0 <prvHeapInit+0xbc>)
 800b27a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b27c:	4b09      	ldr	r3, [pc, #36]	; (800b2a4 <prvHeapInit+0xc0>)
 800b27e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b282:	601a      	str	r2, [r3, #0]
}
 800b284:	bf00      	nop
 800b286:	3714      	adds	r7, #20
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr
 800b290:	20000928 	.word	0x20000928
 800b294:	20010328 	.word	0x20010328
 800b298:	20010330 	.word	0x20010330
 800b29c:	20010338 	.word	0x20010338
 800b2a0:	20010334 	.word	0x20010334
 800b2a4:	20010344 	.word	0x20010344

0800b2a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b2b0:	4b28      	ldr	r3, [pc, #160]	; (800b354 <prvInsertBlockIntoFreeList+0xac>)
 800b2b2:	60fb      	str	r3, [r7, #12]
 800b2b4:	e002      	b.n	800b2bc <prvInsertBlockIntoFreeList+0x14>
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	60fb      	str	r3, [r7, #12]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d8f7      	bhi.n	800b2b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	68ba      	ldr	r2, [r7, #8]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d108      	bne.n	800b2ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	685a      	ldr	r2, [r3, #4]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	441a      	add	r2, r3
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	441a      	add	r2, r3
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d118      	bne.n	800b330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	4b15      	ldr	r3, [pc, #84]	; (800b358 <prvInsertBlockIntoFreeList+0xb0>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	429a      	cmp	r2, r3
 800b308:	d00d      	beq.n	800b326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	685a      	ldr	r2, [r3, #4]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	441a      	add	r2, r3
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	601a      	str	r2, [r3, #0]
 800b324:	e008      	b.n	800b338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b326:	4b0c      	ldr	r3, [pc, #48]	; (800b358 <prvInsertBlockIntoFreeList+0xb0>)
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	601a      	str	r2, [r3, #0]
 800b32e:	e003      	b.n	800b338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d002      	beq.n	800b346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b346:	bf00      	nop
 800b348:	3714      	adds	r7, #20
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr
 800b352:	bf00      	nop
 800b354:	20010328 	.word	0x20010328
 800b358:	20010330 	.word	0x20010330

0800b35c <__errno>:
 800b35c:	4b01      	ldr	r3, [pc, #4]	; (800b364 <__errno+0x8>)
 800b35e:	6818      	ldr	r0, [r3, #0]
 800b360:	4770      	bx	lr
 800b362:	bf00      	nop
 800b364:	20000010 	.word	0x20000010

0800b368 <__libc_init_array>:
 800b368:	b570      	push	{r4, r5, r6, lr}
 800b36a:	4d0d      	ldr	r5, [pc, #52]	; (800b3a0 <__libc_init_array+0x38>)
 800b36c:	4c0d      	ldr	r4, [pc, #52]	; (800b3a4 <__libc_init_array+0x3c>)
 800b36e:	1b64      	subs	r4, r4, r5
 800b370:	10a4      	asrs	r4, r4, #2
 800b372:	2600      	movs	r6, #0
 800b374:	42a6      	cmp	r6, r4
 800b376:	d109      	bne.n	800b38c <__libc_init_array+0x24>
 800b378:	4d0b      	ldr	r5, [pc, #44]	; (800b3a8 <__libc_init_array+0x40>)
 800b37a:	4c0c      	ldr	r4, [pc, #48]	; (800b3ac <__libc_init_array+0x44>)
 800b37c:	f000 fcf6 	bl	800bd6c <_init>
 800b380:	1b64      	subs	r4, r4, r5
 800b382:	10a4      	asrs	r4, r4, #2
 800b384:	2600      	movs	r6, #0
 800b386:	42a6      	cmp	r6, r4
 800b388:	d105      	bne.n	800b396 <__libc_init_array+0x2e>
 800b38a:	bd70      	pop	{r4, r5, r6, pc}
 800b38c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b390:	4798      	blx	r3
 800b392:	3601      	adds	r6, #1
 800b394:	e7ee      	b.n	800b374 <__libc_init_array+0xc>
 800b396:	f855 3b04 	ldr.w	r3, [r5], #4
 800b39a:	4798      	blx	r3
 800b39c:	3601      	adds	r6, #1
 800b39e:	e7f2      	b.n	800b386 <__libc_init_array+0x1e>
 800b3a0:	0800c15c 	.word	0x0800c15c
 800b3a4:	0800c15c 	.word	0x0800c15c
 800b3a8:	0800c15c 	.word	0x0800c15c
 800b3ac:	0800c160 	.word	0x0800c160

0800b3b0 <memcpy>:
 800b3b0:	440a      	add	r2, r1
 800b3b2:	4291      	cmp	r1, r2
 800b3b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3b8:	d100      	bne.n	800b3bc <memcpy+0xc>
 800b3ba:	4770      	bx	lr
 800b3bc:	b510      	push	{r4, lr}
 800b3be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3c6:	4291      	cmp	r1, r2
 800b3c8:	d1f9      	bne.n	800b3be <memcpy+0xe>
 800b3ca:	bd10      	pop	{r4, pc}

0800b3cc <memset>:
 800b3cc:	4402      	add	r2, r0
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d100      	bne.n	800b3d6 <memset+0xa>
 800b3d4:	4770      	bx	lr
 800b3d6:	f803 1b01 	strb.w	r1, [r3], #1
 800b3da:	e7f9      	b.n	800b3d0 <memset+0x4>

0800b3dc <_free_r>:
 800b3dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3de:	2900      	cmp	r1, #0
 800b3e0:	d044      	beq.n	800b46c <_free_r+0x90>
 800b3e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3e6:	9001      	str	r0, [sp, #4]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f1a1 0404 	sub.w	r4, r1, #4
 800b3ee:	bfb8      	it	lt
 800b3f0:	18e4      	addlt	r4, r4, r3
 800b3f2:	f000 f96d 	bl	800b6d0 <__malloc_lock>
 800b3f6:	4a1e      	ldr	r2, [pc, #120]	; (800b470 <_free_r+0x94>)
 800b3f8:	9801      	ldr	r0, [sp, #4]
 800b3fa:	6813      	ldr	r3, [r2, #0]
 800b3fc:	b933      	cbnz	r3, 800b40c <_free_r+0x30>
 800b3fe:	6063      	str	r3, [r4, #4]
 800b400:	6014      	str	r4, [r2, #0]
 800b402:	b003      	add	sp, #12
 800b404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b408:	f000 b968 	b.w	800b6dc <__malloc_unlock>
 800b40c:	42a3      	cmp	r3, r4
 800b40e:	d908      	bls.n	800b422 <_free_r+0x46>
 800b410:	6825      	ldr	r5, [r4, #0]
 800b412:	1961      	adds	r1, r4, r5
 800b414:	428b      	cmp	r3, r1
 800b416:	bf01      	itttt	eq
 800b418:	6819      	ldreq	r1, [r3, #0]
 800b41a:	685b      	ldreq	r3, [r3, #4]
 800b41c:	1949      	addeq	r1, r1, r5
 800b41e:	6021      	streq	r1, [r4, #0]
 800b420:	e7ed      	b.n	800b3fe <_free_r+0x22>
 800b422:	461a      	mov	r2, r3
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	b10b      	cbz	r3, 800b42c <_free_r+0x50>
 800b428:	42a3      	cmp	r3, r4
 800b42a:	d9fa      	bls.n	800b422 <_free_r+0x46>
 800b42c:	6811      	ldr	r1, [r2, #0]
 800b42e:	1855      	adds	r5, r2, r1
 800b430:	42a5      	cmp	r5, r4
 800b432:	d10b      	bne.n	800b44c <_free_r+0x70>
 800b434:	6824      	ldr	r4, [r4, #0]
 800b436:	4421      	add	r1, r4
 800b438:	1854      	adds	r4, r2, r1
 800b43a:	42a3      	cmp	r3, r4
 800b43c:	6011      	str	r1, [r2, #0]
 800b43e:	d1e0      	bne.n	800b402 <_free_r+0x26>
 800b440:	681c      	ldr	r4, [r3, #0]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	6053      	str	r3, [r2, #4]
 800b446:	4421      	add	r1, r4
 800b448:	6011      	str	r1, [r2, #0]
 800b44a:	e7da      	b.n	800b402 <_free_r+0x26>
 800b44c:	d902      	bls.n	800b454 <_free_r+0x78>
 800b44e:	230c      	movs	r3, #12
 800b450:	6003      	str	r3, [r0, #0]
 800b452:	e7d6      	b.n	800b402 <_free_r+0x26>
 800b454:	6825      	ldr	r5, [r4, #0]
 800b456:	1961      	adds	r1, r4, r5
 800b458:	428b      	cmp	r3, r1
 800b45a:	bf04      	itt	eq
 800b45c:	6819      	ldreq	r1, [r3, #0]
 800b45e:	685b      	ldreq	r3, [r3, #4]
 800b460:	6063      	str	r3, [r4, #4]
 800b462:	bf04      	itt	eq
 800b464:	1949      	addeq	r1, r1, r5
 800b466:	6021      	streq	r1, [r4, #0]
 800b468:	6054      	str	r4, [r2, #4]
 800b46a:	e7ca      	b.n	800b402 <_free_r+0x26>
 800b46c:	b003      	add	sp, #12
 800b46e:	bd30      	pop	{r4, r5, pc}
 800b470:	20010348 	.word	0x20010348

0800b474 <sbrk_aligned>:
 800b474:	b570      	push	{r4, r5, r6, lr}
 800b476:	4e0e      	ldr	r6, [pc, #56]	; (800b4b0 <sbrk_aligned+0x3c>)
 800b478:	460c      	mov	r4, r1
 800b47a:	6831      	ldr	r1, [r6, #0]
 800b47c:	4605      	mov	r5, r0
 800b47e:	b911      	cbnz	r1, 800b486 <sbrk_aligned+0x12>
 800b480:	f000 f8f6 	bl	800b670 <_sbrk_r>
 800b484:	6030      	str	r0, [r6, #0]
 800b486:	4621      	mov	r1, r4
 800b488:	4628      	mov	r0, r5
 800b48a:	f000 f8f1 	bl	800b670 <_sbrk_r>
 800b48e:	1c43      	adds	r3, r0, #1
 800b490:	d00a      	beq.n	800b4a8 <sbrk_aligned+0x34>
 800b492:	1cc4      	adds	r4, r0, #3
 800b494:	f024 0403 	bic.w	r4, r4, #3
 800b498:	42a0      	cmp	r0, r4
 800b49a:	d007      	beq.n	800b4ac <sbrk_aligned+0x38>
 800b49c:	1a21      	subs	r1, r4, r0
 800b49e:	4628      	mov	r0, r5
 800b4a0:	f000 f8e6 	bl	800b670 <_sbrk_r>
 800b4a4:	3001      	adds	r0, #1
 800b4a6:	d101      	bne.n	800b4ac <sbrk_aligned+0x38>
 800b4a8:	f04f 34ff 	mov.w	r4, #4294967295
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	bd70      	pop	{r4, r5, r6, pc}
 800b4b0:	2001034c 	.word	0x2001034c

0800b4b4 <_malloc_r>:
 800b4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b8:	1ccd      	adds	r5, r1, #3
 800b4ba:	f025 0503 	bic.w	r5, r5, #3
 800b4be:	3508      	adds	r5, #8
 800b4c0:	2d0c      	cmp	r5, #12
 800b4c2:	bf38      	it	cc
 800b4c4:	250c      	movcc	r5, #12
 800b4c6:	2d00      	cmp	r5, #0
 800b4c8:	4607      	mov	r7, r0
 800b4ca:	db01      	blt.n	800b4d0 <_malloc_r+0x1c>
 800b4cc:	42a9      	cmp	r1, r5
 800b4ce:	d905      	bls.n	800b4dc <_malloc_r+0x28>
 800b4d0:	230c      	movs	r3, #12
 800b4d2:	603b      	str	r3, [r7, #0]
 800b4d4:	2600      	movs	r6, #0
 800b4d6:	4630      	mov	r0, r6
 800b4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4dc:	4e2e      	ldr	r6, [pc, #184]	; (800b598 <_malloc_r+0xe4>)
 800b4de:	f000 f8f7 	bl	800b6d0 <__malloc_lock>
 800b4e2:	6833      	ldr	r3, [r6, #0]
 800b4e4:	461c      	mov	r4, r3
 800b4e6:	bb34      	cbnz	r4, 800b536 <_malloc_r+0x82>
 800b4e8:	4629      	mov	r1, r5
 800b4ea:	4638      	mov	r0, r7
 800b4ec:	f7ff ffc2 	bl	800b474 <sbrk_aligned>
 800b4f0:	1c43      	adds	r3, r0, #1
 800b4f2:	4604      	mov	r4, r0
 800b4f4:	d14d      	bne.n	800b592 <_malloc_r+0xde>
 800b4f6:	6834      	ldr	r4, [r6, #0]
 800b4f8:	4626      	mov	r6, r4
 800b4fa:	2e00      	cmp	r6, #0
 800b4fc:	d140      	bne.n	800b580 <_malloc_r+0xcc>
 800b4fe:	6823      	ldr	r3, [r4, #0]
 800b500:	4631      	mov	r1, r6
 800b502:	4638      	mov	r0, r7
 800b504:	eb04 0803 	add.w	r8, r4, r3
 800b508:	f000 f8b2 	bl	800b670 <_sbrk_r>
 800b50c:	4580      	cmp	r8, r0
 800b50e:	d13a      	bne.n	800b586 <_malloc_r+0xd2>
 800b510:	6821      	ldr	r1, [r4, #0]
 800b512:	3503      	adds	r5, #3
 800b514:	1a6d      	subs	r5, r5, r1
 800b516:	f025 0503 	bic.w	r5, r5, #3
 800b51a:	3508      	adds	r5, #8
 800b51c:	2d0c      	cmp	r5, #12
 800b51e:	bf38      	it	cc
 800b520:	250c      	movcc	r5, #12
 800b522:	4629      	mov	r1, r5
 800b524:	4638      	mov	r0, r7
 800b526:	f7ff ffa5 	bl	800b474 <sbrk_aligned>
 800b52a:	3001      	adds	r0, #1
 800b52c:	d02b      	beq.n	800b586 <_malloc_r+0xd2>
 800b52e:	6823      	ldr	r3, [r4, #0]
 800b530:	442b      	add	r3, r5
 800b532:	6023      	str	r3, [r4, #0]
 800b534:	e00e      	b.n	800b554 <_malloc_r+0xa0>
 800b536:	6822      	ldr	r2, [r4, #0]
 800b538:	1b52      	subs	r2, r2, r5
 800b53a:	d41e      	bmi.n	800b57a <_malloc_r+0xc6>
 800b53c:	2a0b      	cmp	r2, #11
 800b53e:	d916      	bls.n	800b56e <_malloc_r+0xba>
 800b540:	1961      	adds	r1, r4, r5
 800b542:	42a3      	cmp	r3, r4
 800b544:	6025      	str	r5, [r4, #0]
 800b546:	bf18      	it	ne
 800b548:	6059      	strne	r1, [r3, #4]
 800b54a:	6863      	ldr	r3, [r4, #4]
 800b54c:	bf08      	it	eq
 800b54e:	6031      	streq	r1, [r6, #0]
 800b550:	5162      	str	r2, [r4, r5]
 800b552:	604b      	str	r3, [r1, #4]
 800b554:	4638      	mov	r0, r7
 800b556:	f104 060b 	add.w	r6, r4, #11
 800b55a:	f000 f8bf 	bl	800b6dc <__malloc_unlock>
 800b55e:	f026 0607 	bic.w	r6, r6, #7
 800b562:	1d23      	adds	r3, r4, #4
 800b564:	1af2      	subs	r2, r6, r3
 800b566:	d0b6      	beq.n	800b4d6 <_malloc_r+0x22>
 800b568:	1b9b      	subs	r3, r3, r6
 800b56a:	50a3      	str	r3, [r4, r2]
 800b56c:	e7b3      	b.n	800b4d6 <_malloc_r+0x22>
 800b56e:	6862      	ldr	r2, [r4, #4]
 800b570:	42a3      	cmp	r3, r4
 800b572:	bf0c      	ite	eq
 800b574:	6032      	streq	r2, [r6, #0]
 800b576:	605a      	strne	r2, [r3, #4]
 800b578:	e7ec      	b.n	800b554 <_malloc_r+0xa0>
 800b57a:	4623      	mov	r3, r4
 800b57c:	6864      	ldr	r4, [r4, #4]
 800b57e:	e7b2      	b.n	800b4e6 <_malloc_r+0x32>
 800b580:	4634      	mov	r4, r6
 800b582:	6876      	ldr	r6, [r6, #4]
 800b584:	e7b9      	b.n	800b4fa <_malloc_r+0x46>
 800b586:	230c      	movs	r3, #12
 800b588:	603b      	str	r3, [r7, #0]
 800b58a:	4638      	mov	r0, r7
 800b58c:	f000 f8a6 	bl	800b6dc <__malloc_unlock>
 800b590:	e7a1      	b.n	800b4d6 <_malloc_r+0x22>
 800b592:	6025      	str	r5, [r4, #0]
 800b594:	e7de      	b.n	800b554 <_malloc_r+0xa0>
 800b596:	bf00      	nop
 800b598:	20010348 	.word	0x20010348

0800b59c <cleanup_glue>:
 800b59c:	b538      	push	{r3, r4, r5, lr}
 800b59e:	460c      	mov	r4, r1
 800b5a0:	6809      	ldr	r1, [r1, #0]
 800b5a2:	4605      	mov	r5, r0
 800b5a4:	b109      	cbz	r1, 800b5aa <cleanup_glue+0xe>
 800b5a6:	f7ff fff9 	bl	800b59c <cleanup_glue>
 800b5aa:	4621      	mov	r1, r4
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5b2:	f7ff bf13 	b.w	800b3dc <_free_r>
	...

0800b5b8 <_reclaim_reent>:
 800b5b8:	4b2c      	ldr	r3, [pc, #176]	; (800b66c <_reclaim_reent+0xb4>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4283      	cmp	r3, r0
 800b5be:	b570      	push	{r4, r5, r6, lr}
 800b5c0:	4604      	mov	r4, r0
 800b5c2:	d051      	beq.n	800b668 <_reclaim_reent+0xb0>
 800b5c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b5c6:	b143      	cbz	r3, 800b5da <_reclaim_reent+0x22>
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d14a      	bne.n	800b664 <_reclaim_reent+0xac>
 800b5ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5d0:	6819      	ldr	r1, [r3, #0]
 800b5d2:	b111      	cbz	r1, 800b5da <_reclaim_reent+0x22>
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	f7ff ff01 	bl	800b3dc <_free_r>
 800b5da:	6961      	ldr	r1, [r4, #20]
 800b5dc:	b111      	cbz	r1, 800b5e4 <_reclaim_reent+0x2c>
 800b5de:	4620      	mov	r0, r4
 800b5e0:	f7ff fefc 	bl	800b3dc <_free_r>
 800b5e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b5e6:	b111      	cbz	r1, 800b5ee <_reclaim_reent+0x36>
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	f7ff fef7 	bl	800b3dc <_free_r>
 800b5ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b5f0:	b111      	cbz	r1, 800b5f8 <_reclaim_reent+0x40>
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f7ff fef2 	bl	800b3dc <_free_r>
 800b5f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b5fa:	b111      	cbz	r1, 800b602 <_reclaim_reent+0x4a>
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f7ff feed 	bl	800b3dc <_free_r>
 800b602:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b604:	b111      	cbz	r1, 800b60c <_reclaim_reent+0x54>
 800b606:	4620      	mov	r0, r4
 800b608:	f7ff fee8 	bl	800b3dc <_free_r>
 800b60c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b60e:	b111      	cbz	r1, 800b616 <_reclaim_reent+0x5e>
 800b610:	4620      	mov	r0, r4
 800b612:	f7ff fee3 	bl	800b3dc <_free_r>
 800b616:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b618:	b111      	cbz	r1, 800b620 <_reclaim_reent+0x68>
 800b61a:	4620      	mov	r0, r4
 800b61c:	f7ff fede 	bl	800b3dc <_free_r>
 800b620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b622:	b111      	cbz	r1, 800b62a <_reclaim_reent+0x72>
 800b624:	4620      	mov	r0, r4
 800b626:	f7ff fed9 	bl	800b3dc <_free_r>
 800b62a:	69a3      	ldr	r3, [r4, #24]
 800b62c:	b1e3      	cbz	r3, 800b668 <_reclaim_reent+0xb0>
 800b62e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b630:	4620      	mov	r0, r4
 800b632:	4798      	blx	r3
 800b634:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b636:	b1b9      	cbz	r1, 800b668 <_reclaim_reent+0xb0>
 800b638:	4620      	mov	r0, r4
 800b63a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b63e:	f7ff bfad 	b.w	800b59c <cleanup_glue>
 800b642:	5949      	ldr	r1, [r1, r5]
 800b644:	b941      	cbnz	r1, 800b658 <_reclaim_reent+0xa0>
 800b646:	3504      	adds	r5, #4
 800b648:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b64a:	2d80      	cmp	r5, #128	; 0x80
 800b64c:	68d9      	ldr	r1, [r3, #12]
 800b64e:	d1f8      	bne.n	800b642 <_reclaim_reent+0x8a>
 800b650:	4620      	mov	r0, r4
 800b652:	f7ff fec3 	bl	800b3dc <_free_r>
 800b656:	e7ba      	b.n	800b5ce <_reclaim_reent+0x16>
 800b658:	680e      	ldr	r6, [r1, #0]
 800b65a:	4620      	mov	r0, r4
 800b65c:	f7ff febe 	bl	800b3dc <_free_r>
 800b660:	4631      	mov	r1, r6
 800b662:	e7ef      	b.n	800b644 <_reclaim_reent+0x8c>
 800b664:	2500      	movs	r5, #0
 800b666:	e7ef      	b.n	800b648 <_reclaim_reent+0x90>
 800b668:	bd70      	pop	{r4, r5, r6, pc}
 800b66a:	bf00      	nop
 800b66c:	20000010 	.word	0x20000010

0800b670 <_sbrk_r>:
 800b670:	b538      	push	{r3, r4, r5, lr}
 800b672:	4d06      	ldr	r5, [pc, #24]	; (800b68c <_sbrk_r+0x1c>)
 800b674:	2300      	movs	r3, #0
 800b676:	4604      	mov	r4, r0
 800b678:	4608      	mov	r0, r1
 800b67a:	602b      	str	r3, [r5, #0]
 800b67c:	f7f6 fcc6 	bl	800200c <_sbrk>
 800b680:	1c43      	adds	r3, r0, #1
 800b682:	d102      	bne.n	800b68a <_sbrk_r+0x1a>
 800b684:	682b      	ldr	r3, [r5, #0]
 800b686:	b103      	cbz	r3, 800b68a <_sbrk_r+0x1a>
 800b688:	6023      	str	r3, [r4, #0]
 800b68a:	bd38      	pop	{r3, r4, r5, pc}
 800b68c:	20010350 	.word	0x20010350

0800b690 <siprintf>:
 800b690:	b40e      	push	{r1, r2, r3}
 800b692:	b500      	push	{lr}
 800b694:	b09c      	sub	sp, #112	; 0x70
 800b696:	ab1d      	add	r3, sp, #116	; 0x74
 800b698:	9002      	str	r0, [sp, #8]
 800b69a:	9006      	str	r0, [sp, #24]
 800b69c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b6a0:	4809      	ldr	r0, [pc, #36]	; (800b6c8 <siprintf+0x38>)
 800b6a2:	9107      	str	r1, [sp, #28]
 800b6a4:	9104      	str	r1, [sp, #16]
 800b6a6:	4909      	ldr	r1, [pc, #36]	; (800b6cc <siprintf+0x3c>)
 800b6a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6ac:	9105      	str	r1, [sp, #20]
 800b6ae:	6800      	ldr	r0, [r0, #0]
 800b6b0:	9301      	str	r3, [sp, #4]
 800b6b2:	a902      	add	r1, sp, #8
 800b6b4:	f000 f874 	bl	800b7a0 <_svfiprintf_r>
 800b6b8:	9b02      	ldr	r3, [sp, #8]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	701a      	strb	r2, [r3, #0]
 800b6be:	b01c      	add	sp, #112	; 0x70
 800b6c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6c4:	b003      	add	sp, #12
 800b6c6:	4770      	bx	lr
 800b6c8:	20000010 	.word	0x20000010
 800b6cc:	ffff0208 	.word	0xffff0208

0800b6d0 <__malloc_lock>:
 800b6d0:	4801      	ldr	r0, [pc, #4]	; (800b6d8 <__malloc_lock+0x8>)
 800b6d2:	f7f6 bdd8 	b.w	8002286 <__retarget_lock_acquire_recursive>
 800b6d6:	bf00      	nop
 800b6d8:	200007e4 	.word	0x200007e4

0800b6dc <__malloc_unlock>:
 800b6dc:	4801      	ldr	r0, [pc, #4]	; (800b6e4 <__malloc_unlock+0x8>)
 800b6de:	f7f6 bde6 	b.w	80022ae <__retarget_lock_release_recursive>
 800b6e2:	bf00      	nop
 800b6e4:	200007e4 	.word	0x200007e4

0800b6e8 <__ssputs_r>:
 800b6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6ec:	688e      	ldr	r6, [r1, #8]
 800b6ee:	429e      	cmp	r6, r3
 800b6f0:	4682      	mov	sl, r0
 800b6f2:	460c      	mov	r4, r1
 800b6f4:	4690      	mov	r8, r2
 800b6f6:	461f      	mov	r7, r3
 800b6f8:	d838      	bhi.n	800b76c <__ssputs_r+0x84>
 800b6fa:	898a      	ldrh	r2, [r1, #12]
 800b6fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b700:	d032      	beq.n	800b768 <__ssputs_r+0x80>
 800b702:	6825      	ldr	r5, [r4, #0]
 800b704:	6909      	ldr	r1, [r1, #16]
 800b706:	eba5 0901 	sub.w	r9, r5, r1
 800b70a:	6965      	ldr	r5, [r4, #20]
 800b70c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b710:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b714:	3301      	adds	r3, #1
 800b716:	444b      	add	r3, r9
 800b718:	106d      	asrs	r5, r5, #1
 800b71a:	429d      	cmp	r5, r3
 800b71c:	bf38      	it	cc
 800b71e:	461d      	movcc	r5, r3
 800b720:	0553      	lsls	r3, r2, #21
 800b722:	d531      	bpl.n	800b788 <__ssputs_r+0xa0>
 800b724:	4629      	mov	r1, r5
 800b726:	f7ff fec5 	bl	800b4b4 <_malloc_r>
 800b72a:	4606      	mov	r6, r0
 800b72c:	b950      	cbnz	r0, 800b744 <__ssputs_r+0x5c>
 800b72e:	230c      	movs	r3, #12
 800b730:	f8ca 3000 	str.w	r3, [sl]
 800b734:	89a3      	ldrh	r3, [r4, #12]
 800b736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b73a:	81a3      	strh	r3, [r4, #12]
 800b73c:	f04f 30ff 	mov.w	r0, #4294967295
 800b740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b744:	6921      	ldr	r1, [r4, #16]
 800b746:	464a      	mov	r2, r9
 800b748:	f7ff fe32 	bl	800b3b0 <memcpy>
 800b74c:	89a3      	ldrh	r3, [r4, #12]
 800b74e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b756:	81a3      	strh	r3, [r4, #12]
 800b758:	6126      	str	r6, [r4, #16]
 800b75a:	6165      	str	r5, [r4, #20]
 800b75c:	444e      	add	r6, r9
 800b75e:	eba5 0509 	sub.w	r5, r5, r9
 800b762:	6026      	str	r6, [r4, #0]
 800b764:	60a5      	str	r5, [r4, #8]
 800b766:	463e      	mov	r6, r7
 800b768:	42be      	cmp	r6, r7
 800b76a:	d900      	bls.n	800b76e <__ssputs_r+0x86>
 800b76c:	463e      	mov	r6, r7
 800b76e:	6820      	ldr	r0, [r4, #0]
 800b770:	4632      	mov	r2, r6
 800b772:	4641      	mov	r1, r8
 800b774:	f000 faa8 	bl	800bcc8 <memmove>
 800b778:	68a3      	ldr	r3, [r4, #8]
 800b77a:	1b9b      	subs	r3, r3, r6
 800b77c:	60a3      	str	r3, [r4, #8]
 800b77e:	6823      	ldr	r3, [r4, #0]
 800b780:	4433      	add	r3, r6
 800b782:	6023      	str	r3, [r4, #0]
 800b784:	2000      	movs	r0, #0
 800b786:	e7db      	b.n	800b740 <__ssputs_r+0x58>
 800b788:	462a      	mov	r2, r5
 800b78a:	f000 fab7 	bl	800bcfc <_realloc_r>
 800b78e:	4606      	mov	r6, r0
 800b790:	2800      	cmp	r0, #0
 800b792:	d1e1      	bne.n	800b758 <__ssputs_r+0x70>
 800b794:	6921      	ldr	r1, [r4, #16]
 800b796:	4650      	mov	r0, sl
 800b798:	f7ff fe20 	bl	800b3dc <_free_r>
 800b79c:	e7c7      	b.n	800b72e <__ssputs_r+0x46>
	...

0800b7a0 <_svfiprintf_r>:
 800b7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a4:	4698      	mov	r8, r3
 800b7a6:	898b      	ldrh	r3, [r1, #12]
 800b7a8:	061b      	lsls	r3, r3, #24
 800b7aa:	b09d      	sub	sp, #116	; 0x74
 800b7ac:	4607      	mov	r7, r0
 800b7ae:	460d      	mov	r5, r1
 800b7b0:	4614      	mov	r4, r2
 800b7b2:	d50e      	bpl.n	800b7d2 <_svfiprintf_r+0x32>
 800b7b4:	690b      	ldr	r3, [r1, #16]
 800b7b6:	b963      	cbnz	r3, 800b7d2 <_svfiprintf_r+0x32>
 800b7b8:	2140      	movs	r1, #64	; 0x40
 800b7ba:	f7ff fe7b 	bl	800b4b4 <_malloc_r>
 800b7be:	6028      	str	r0, [r5, #0]
 800b7c0:	6128      	str	r0, [r5, #16]
 800b7c2:	b920      	cbnz	r0, 800b7ce <_svfiprintf_r+0x2e>
 800b7c4:	230c      	movs	r3, #12
 800b7c6:	603b      	str	r3, [r7, #0]
 800b7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7cc:	e0d1      	b.n	800b972 <_svfiprintf_r+0x1d2>
 800b7ce:	2340      	movs	r3, #64	; 0x40
 800b7d0:	616b      	str	r3, [r5, #20]
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	9309      	str	r3, [sp, #36]	; 0x24
 800b7d6:	2320      	movs	r3, #32
 800b7d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7e0:	2330      	movs	r3, #48	; 0x30
 800b7e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b98c <_svfiprintf_r+0x1ec>
 800b7e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7ea:	f04f 0901 	mov.w	r9, #1
 800b7ee:	4623      	mov	r3, r4
 800b7f0:	469a      	mov	sl, r3
 800b7f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7f6:	b10a      	cbz	r2, 800b7fc <_svfiprintf_r+0x5c>
 800b7f8:	2a25      	cmp	r2, #37	; 0x25
 800b7fa:	d1f9      	bne.n	800b7f0 <_svfiprintf_r+0x50>
 800b7fc:	ebba 0b04 	subs.w	fp, sl, r4
 800b800:	d00b      	beq.n	800b81a <_svfiprintf_r+0x7a>
 800b802:	465b      	mov	r3, fp
 800b804:	4622      	mov	r2, r4
 800b806:	4629      	mov	r1, r5
 800b808:	4638      	mov	r0, r7
 800b80a:	f7ff ff6d 	bl	800b6e8 <__ssputs_r>
 800b80e:	3001      	adds	r0, #1
 800b810:	f000 80aa 	beq.w	800b968 <_svfiprintf_r+0x1c8>
 800b814:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b816:	445a      	add	r2, fp
 800b818:	9209      	str	r2, [sp, #36]	; 0x24
 800b81a:	f89a 3000 	ldrb.w	r3, [sl]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	f000 80a2 	beq.w	800b968 <_svfiprintf_r+0x1c8>
 800b824:	2300      	movs	r3, #0
 800b826:	f04f 32ff 	mov.w	r2, #4294967295
 800b82a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b82e:	f10a 0a01 	add.w	sl, sl, #1
 800b832:	9304      	str	r3, [sp, #16]
 800b834:	9307      	str	r3, [sp, #28]
 800b836:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b83a:	931a      	str	r3, [sp, #104]	; 0x68
 800b83c:	4654      	mov	r4, sl
 800b83e:	2205      	movs	r2, #5
 800b840:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b844:	4851      	ldr	r0, [pc, #324]	; (800b98c <_svfiprintf_r+0x1ec>)
 800b846:	f7f4 fce3 	bl	8000210 <memchr>
 800b84a:	9a04      	ldr	r2, [sp, #16]
 800b84c:	b9d8      	cbnz	r0, 800b886 <_svfiprintf_r+0xe6>
 800b84e:	06d0      	lsls	r0, r2, #27
 800b850:	bf44      	itt	mi
 800b852:	2320      	movmi	r3, #32
 800b854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b858:	0711      	lsls	r1, r2, #28
 800b85a:	bf44      	itt	mi
 800b85c:	232b      	movmi	r3, #43	; 0x2b
 800b85e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b862:	f89a 3000 	ldrb.w	r3, [sl]
 800b866:	2b2a      	cmp	r3, #42	; 0x2a
 800b868:	d015      	beq.n	800b896 <_svfiprintf_r+0xf6>
 800b86a:	9a07      	ldr	r2, [sp, #28]
 800b86c:	4654      	mov	r4, sl
 800b86e:	2000      	movs	r0, #0
 800b870:	f04f 0c0a 	mov.w	ip, #10
 800b874:	4621      	mov	r1, r4
 800b876:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b87a:	3b30      	subs	r3, #48	; 0x30
 800b87c:	2b09      	cmp	r3, #9
 800b87e:	d94e      	bls.n	800b91e <_svfiprintf_r+0x17e>
 800b880:	b1b0      	cbz	r0, 800b8b0 <_svfiprintf_r+0x110>
 800b882:	9207      	str	r2, [sp, #28]
 800b884:	e014      	b.n	800b8b0 <_svfiprintf_r+0x110>
 800b886:	eba0 0308 	sub.w	r3, r0, r8
 800b88a:	fa09 f303 	lsl.w	r3, r9, r3
 800b88e:	4313      	orrs	r3, r2
 800b890:	9304      	str	r3, [sp, #16]
 800b892:	46a2      	mov	sl, r4
 800b894:	e7d2      	b.n	800b83c <_svfiprintf_r+0x9c>
 800b896:	9b03      	ldr	r3, [sp, #12]
 800b898:	1d19      	adds	r1, r3, #4
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	9103      	str	r1, [sp, #12]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	bfbb      	ittet	lt
 800b8a2:	425b      	neglt	r3, r3
 800b8a4:	f042 0202 	orrlt.w	r2, r2, #2
 800b8a8:	9307      	strge	r3, [sp, #28]
 800b8aa:	9307      	strlt	r3, [sp, #28]
 800b8ac:	bfb8      	it	lt
 800b8ae:	9204      	strlt	r2, [sp, #16]
 800b8b0:	7823      	ldrb	r3, [r4, #0]
 800b8b2:	2b2e      	cmp	r3, #46	; 0x2e
 800b8b4:	d10c      	bne.n	800b8d0 <_svfiprintf_r+0x130>
 800b8b6:	7863      	ldrb	r3, [r4, #1]
 800b8b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b8ba:	d135      	bne.n	800b928 <_svfiprintf_r+0x188>
 800b8bc:	9b03      	ldr	r3, [sp, #12]
 800b8be:	1d1a      	adds	r2, r3, #4
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	9203      	str	r2, [sp, #12]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	bfb8      	it	lt
 800b8c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8cc:	3402      	adds	r4, #2
 800b8ce:	9305      	str	r3, [sp, #20]
 800b8d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b99c <_svfiprintf_r+0x1fc>
 800b8d4:	7821      	ldrb	r1, [r4, #0]
 800b8d6:	2203      	movs	r2, #3
 800b8d8:	4650      	mov	r0, sl
 800b8da:	f7f4 fc99 	bl	8000210 <memchr>
 800b8de:	b140      	cbz	r0, 800b8f2 <_svfiprintf_r+0x152>
 800b8e0:	2340      	movs	r3, #64	; 0x40
 800b8e2:	eba0 000a 	sub.w	r0, r0, sl
 800b8e6:	fa03 f000 	lsl.w	r0, r3, r0
 800b8ea:	9b04      	ldr	r3, [sp, #16]
 800b8ec:	4303      	orrs	r3, r0
 800b8ee:	3401      	adds	r4, #1
 800b8f0:	9304      	str	r3, [sp, #16]
 800b8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8f6:	4826      	ldr	r0, [pc, #152]	; (800b990 <_svfiprintf_r+0x1f0>)
 800b8f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8fc:	2206      	movs	r2, #6
 800b8fe:	f7f4 fc87 	bl	8000210 <memchr>
 800b902:	2800      	cmp	r0, #0
 800b904:	d038      	beq.n	800b978 <_svfiprintf_r+0x1d8>
 800b906:	4b23      	ldr	r3, [pc, #140]	; (800b994 <_svfiprintf_r+0x1f4>)
 800b908:	bb1b      	cbnz	r3, 800b952 <_svfiprintf_r+0x1b2>
 800b90a:	9b03      	ldr	r3, [sp, #12]
 800b90c:	3307      	adds	r3, #7
 800b90e:	f023 0307 	bic.w	r3, r3, #7
 800b912:	3308      	adds	r3, #8
 800b914:	9303      	str	r3, [sp, #12]
 800b916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b918:	4433      	add	r3, r6
 800b91a:	9309      	str	r3, [sp, #36]	; 0x24
 800b91c:	e767      	b.n	800b7ee <_svfiprintf_r+0x4e>
 800b91e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b922:	460c      	mov	r4, r1
 800b924:	2001      	movs	r0, #1
 800b926:	e7a5      	b.n	800b874 <_svfiprintf_r+0xd4>
 800b928:	2300      	movs	r3, #0
 800b92a:	3401      	adds	r4, #1
 800b92c:	9305      	str	r3, [sp, #20]
 800b92e:	4619      	mov	r1, r3
 800b930:	f04f 0c0a 	mov.w	ip, #10
 800b934:	4620      	mov	r0, r4
 800b936:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b93a:	3a30      	subs	r2, #48	; 0x30
 800b93c:	2a09      	cmp	r2, #9
 800b93e:	d903      	bls.n	800b948 <_svfiprintf_r+0x1a8>
 800b940:	2b00      	cmp	r3, #0
 800b942:	d0c5      	beq.n	800b8d0 <_svfiprintf_r+0x130>
 800b944:	9105      	str	r1, [sp, #20]
 800b946:	e7c3      	b.n	800b8d0 <_svfiprintf_r+0x130>
 800b948:	fb0c 2101 	mla	r1, ip, r1, r2
 800b94c:	4604      	mov	r4, r0
 800b94e:	2301      	movs	r3, #1
 800b950:	e7f0      	b.n	800b934 <_svfiprintf_r+0x194>
 800b952:	ab03      	add	r3, sp, #12
 800b954:	9300      	str	r3, [sp, #0]
 800b956:	462a      	mov	r2, r5
 800b958:	4b0f      	ldr	r3, [pc, #60]	; (800b998 <_svfiprintf_r+0x1f8>)
 800b95a:	a904      	add	r1, sp, #16
 800b95c:	4638      	mov	r0, r7
 800b95e:	f3af 8000 	nop.w
 800b962:	1c42      	adds	r2, r0, #1
 800b964:	4606      	mov	r6, r0
 800b966:	d1d6      	bne.n	800b916 <_svfiprintf_r+0x176>
 800b968:	89ab      	ldrh	r3, [r5, #12]
 800b96a:	065b      	lsls	r3, r3, #25
 800b96c:	f53f af2c 	bmi.w	800b7c8 <_svfiprintf_r+0x28>
 800b970:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b972:	b01d      	add	sp, #116	; 0x74
 800b974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b978:	ab03      	add	r3, sp, #12
 800b97a:	9300      	str	r3, [sp, #0]
 800b97c:	462a      	mov	r2, r5
 800b97e:	4b06      	ldr	r3, [pc, #24]	; (800b998 <_svfiprintf_r+0x1f8>)
 800b980:	a904      	add	r1, sp, #16
 800b982:	4638      	mov	r0, r7
 800b984:	f000 f87a 	bl	800ba7c <_printf_i>
 800b988:	e7eb      	b.n	800b962 <_svfiprintf_r+0x1c2>
 800b98a:	bf00      	nop
 800b98c:	0800c120 	.word	0x0800c120
 800b990:	0800c12a 	.word	0x0800c12a
 800b994:	00000000 	.word	0x00000000
 800b998:	0800b6e9 	.word	0x0800b6e9
 800b99c:	0800c126 	.word	0x0800c126

0800b9a0 <_printf_common>:
 800b9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9a4:	4616      	mov	r6, r2
 800b9a6:	4699      	mov	r9, r3
 800b9a8:	688a      	ldr	r2, [r1, #8]
 800b9aa:	690b      	ldr	r3, [r1, #16]
 800b9ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	bfb8      	it	lt
 800b9b4:	4613      	movlt	r3, r2
 800b9b6:	6033      	str	r3, [r6, #0]
 800b9b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b9bc:	4607      	mov	r7, r0
 800b9be:	460c      	mov	r4, r1
 800b9c0:	b10a      	cbz	r2, 800b9c6 <_printf_common+0x26>
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	6033      	str	r3, [r6, #0]
 800b9c6:	6823      	ldr	r3, [r4, #0]
 800b9c8:	0699      	lsls	r1, r3, #26
 800b9ca:	bf42      	ittt	mi
 800b9cc:	6833      	ldrmi	r3, [r6, #0]
 800b9ce:	3302      	addmi	r3, #2
 800b9d0:	6033      	strmi	r3, [r6, #0]
 800b9d2:	6825      	ldr	r5, [r4, #0]
 800b9d4:	f015 0506 	ands.w	r5, r5, #6
 800b9d8:	d106      	bne.n	800b9e8 <_printf_common+0x48>
 800b9da:	f104 0a19 	add.w	sl, r4, #25
 800b9de:	68e3      	ldr	r3, [r4, #12]
 800b9e0:	6832      	ldr	r2, [r6, #0]
 800b9e2:	1a9b      	subs	r3, r3, r2
 800b9e4:	42ab      	cmp	r3, r5
 800b9e6:	dc26      	bgt.n	800ba36 <_printf_common+0x96>
 800b9e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b9ec:	1e13      	subs	r3, r2, #0
 800b9ee:	6822      	ldr	r2, [r4, #0]
 800b9f0:	bf18      	it	ne
 800b9f2:	2301      	movne	r3, #1
 800b9f4:	0692      	lsls	r2, r2, #26
 800b9f6:	d42b      	bmi.n	800ba50 <_printf_common+0xb0>
 800b9f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	4638      	mov	r0, r7
 800ba00:	47c0      	blx	r8
 800ba02:	3001      	adds	r0, #1
 800ba04:	d01e      	beq.n	800ba44 <_printf_common+0xa4>
 800ba06:	6823      	ldr	r3, [r4, #0]
 800ba08:	68e5      	ldr	r5, [r4, #12]
 800ba0a:	6832      	ldr	r2, [r6, #0]
 800ba0c:	f003 0306 	and.w	r3, r3, #6
 800ba10:	2b04      	cmp	r3, #4
 800ba12:	bf08      	it	eq
 800ba14:	1aad      	subeq	r5, r5, r2
 800ba16:	68a3      	ldr	r3, [r4, #8]
 800ba18:	6922      	ldr	r2, [r4, #16]
 800ba1a:	bf0c      	ite	eq
 800ba1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba20:	2500      	movne	r5, #0
 800ba22:	4293      	cmp	r3, r2
 800ba24:	bfc4      	itt	gt
 800ba26:	1a9b      	subgt	r3, r3, r2
 800ba28:	18ed      	addgt	r5, r5, r3
 800ba2a:	2600      	movs	r6, #0
 800ba2c:	341a      	adds	r4, #26
 800ba2e:	42b5      	cmp	r5, r6
 800ba30:	d11a      	bne.n	800ba68 <_printf_common+0xc8>
 800ba32:	2000      	movs	r0, #0
 800ba34:	e008      	b.n	800ba48 <_printf_common+0xa8>
 800ba36:	2301      	movs	r3, #1
 800ba38:	4652      	mov	r2, sl
 800ba3a:	4649      	mov	r1, r9
 800ba3c:	4638      	mov	r0, r7
 800ba3e:	47c0      	blx	r8
 800ba40:	3001      	adds	r0, #1
 800ba42:	d103      	bne.n	800ba4c <_printf_common+0xac>
 800ba44:	f04f 30ff 	mov.w	r0, #4294967295
 800ba48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba4c:	3501      	adds	r5, #1
 800ba4e:	e7c6      	b.n	800b9de <_printf_common+0x3e>
 800ba50:	18e1      	adds	r1, r4, r3
 800ba52:	1c5a      	adds	r2, r3, #1
 800ba54:	2030      	movs	r0, #48	; 0x30
 800ba56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ba5a:	4422      	add	r2, r4
 800ba5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ba60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ba64:	3302      	adds	r3, #2
 800ba66:	e7c7      	b.n	800b9f8 <_printf_common+0x58>
 800ba68:	2301      	movs	r3, #1
 800ba6a:	4622      	mov	r2, r4
 800ba6c:	4649      	mov	r1, r9
 800ba6e:	4638      	mov	r0, r7
 800ba70:	47c0      	blx	r8
 800ba72:	3001      	adds	r0, #1
 800ba74:	d0e6      	beq.n	800ba44 <_printf_common+0xa4>
 800ba76:	3601      	adds	r6, #1
 800ba78:	e7d9      	b.n	800ba2e <_printf_common+0x8e>
	...

0800ba7c <_printf_i>:
 800ba7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba80:	7e0f      	ldrb	r7, [r1, #24]
 800ba82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ba84:	2f78      	cmp	r7, #120	; 0x78
 800ba86:	4691      	mov	r9, r2
 800ba88:	4680      	mov	r8, r0
 800ba8a:	460c      	mov	r4, r1
 800ba8c:	469a      	mov	sl, r3
 800ba8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ba92:	d807      	bhi.n	800baa4 <_printf_i+0x28>
 800ba94:	2f62      	cmp	r7, #98	; 0x62
 800ba96:	d80a      	bhi.n	800baae <_printf_i+0x32>
 800ba98:	2f00      	cmp	r7, #0
 800ba9a:	f000 80d8 	beq.w	800bc4e <_printf_i+0x1d2>
 800ba9e:	2f58      	cmp	r7, #88	; 0x58
 800baa0:	f000 80a3 	beq.w	800bbea <_printf_i+0x16e>
 800baa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800baa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800baac:	e03a      	b.n	800bb24 <_printf_i+0xa8>
 800baae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bab2:	2b15      	cmp	r3, #21
 800bab4:	d8f6      	bhi.n	800baa4 <_printf_i+0x28>
 800bab6:	a101      	add	r1, pc, #4	; (adr r1, 800babc <_printf_i+0x40>)
 800bab8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800babc:	0800bb15 	.word	0x0800bb15
 800bac0:	0800bb29 	.word	0x0800bb29
 800bac4:	0800baa5 	.word	0x0800baa5
 800bac8:	0800baa5 	.word	0x0800baa5
 800bacc:	0800baa5 	.word	0x0800baa5
 800bad0:	0800baa5 	.word	0x0800baa5
 800bad4:	0800bb29 	.word	0x0800bb29
 800bad8:	0800baa5 	.word	0x0800baa5
 800badc:	0800baa5 	.word	0x0800baa5
 800bae0:	0800baa5 	.word	0x0800baa5
 800bae4:	0800baa5 	.word	0x0800baa5
 800bae8:	0800bc35 	.word	0x0800bc35
 800baec:	0800bb59 	.word	0x0800bb59
 800baf0:	0800bc17 	.word	0x0800bc17
 800baf4:	0800baa5 	.word	0x0800baa5
 800baf8:	0800baa5 	.word	0x0800baa5
 800bafc:	0800bc57 	.word	0x0800bc57
 800bb00:	0800baa5 	.word	0x0800baa5
 800bb04:	0800bb59 	.word	0x0800bb59
 800bb08:	0800baa5 	.word	0x0800baa5
 800bb0c:	0800baa5 	.word	0x0800baa5
 800bb10:	0800bc1f 	.word	0x0800bc1f
 800bb14:	682b      	ldr	r3, [r5, #0]
 800bb16:	1d1a      	adds	r2, r3, #4
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	602a      	str	r2, [r5, #0]
 800bb1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb24:	2301      	movs	r3, #1
 800bb26:	e0a3      	b.n	800bc70 <_printf_i+0x1f4>
 800bb28:	6820      	ldr	r0, [r4, #0]
 800bb2a:	6829      	ldr	r1, [r5, #0]
 800bb2c:	0606      	lsls	r6, r0, #24
 800bb2e:	f101 0304 	add.w	r3, r1, #4
 800bb32:	d50a      	bpl.n	800bb4a <_printf_i+0xce>
 800bb34:	680e      	ldr	r6, [r1, #0]
 800bb36:	602b      	str	r3, [r5, #0]
 800bb38:	2e00      	cmp	r6, #0
 800bb3a:	da03      	bge.n	800bb44 <_printf_i+0xc8>
 800bb3c:	232d      	movs	r3, #45	; 0x2d
 800bb3e:	4276      	negs	r6, r6
 800bb40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb44:	485e      	ldr	r0, [pc, #376]	; (800bcc0 <_printf_i+0x244>)
 800bb46:	230a      	movs	r3, #10
 800bb48:	e019      	b.n	800bb7e <_printf_i+0x102>
 800bb4a:	680e      	ldr	r6, [r1, #0]
 800bb4c:	602b      	str	r3, [r5, #0]
 800bb4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bb52:	bf18      	it	ne
 800bb54:	b236      	sxthne	r6, r6
 800bb56:	e7ef      	b.n	800bb38 <_printf_i+0xbc>
 800bb58:	682b      	ldr	r3, [r5, #0]
 800bb5a:	6820      	ldr	r0, [r4, #0]
 800bb5c:	1d19      	adds	r1, r3, #4
 800bb5e:	6029      	str	r1, [r5, #0]
 800bb60:	0601      	lsls	r1, r0, #24
 800bb62:	d501      	bpl.n	800bb68 <_printf_i+0xec>
 800bb64:	681e      	ldr	r6, [r3, #0]
 800bb66:	e002      	b.n	800bb6e <_printf_i+0xf2>
 800bb68:	0646      	lsls	r6, r0, #25
 800bb6a:	d5fb      	bpl.n	800bb64 <_printf_i+0xe8>
 800bb6c:	881e      	ldrh	r6, [r3, #0]
 800bb6e:	4854      	ldr	r0, [pc, #336]	; (800bcc0 <_printf_i+0x244>)
 800bb70:	2f6f      	cmp	r7, #111	; 0x6f
 800bb72:	bf0c      	ite	eq
 800bb74:	2308      	moveq	r3, #8
 800bb76:	230a      	movne	r3, #10
 800bb78:	2100      	movs	r1, #0
 800bb7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bb7e:	6865      	ldr	r5, [r4, #4]
 800bb80:	60a5      	str	r5, [r4, #8]
 800bb82:	2d00      	cmp	r5, #0
 800bb84:	bfa2      	ittt	ge
 800bb86:	6821      	ldrge	r1, [r4, #0]
 800bb88:	f021 0104 	bicge.w	r1, r1, #4
 800bb8c:	6021      	strge	r1, [r4, #0]
 800bb8e:	b90e      	cbnz	r6, 800bb94 <_printf_i+0x118>
 800bb90:	2d00      	cmp	r5, #0
 800bb92:	d04d      	beq.n	800bc30 <_printf_i+0x1b4>
 800bb94:	4615      	mov	r5, r2
 800bb96:	fbb6 f1f3 	udiv	r1, r6, r3
 800bb9a:	fb03 6711 	mls	r7, r3, r1, r6
 800bb9e:	5dc7      	ldrb	r7, [r0, r7]
 800bba0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bba4:	4637      	mov	r7, r6
 800bba6:	42bb      	cmp	r3, r7
 800bba8:	460e      	mov	r6, r1
 800bbaa:	d9f4      	bls.n	800bb96 <_printf_i+0x11a>
 800bbac:	2b08      	cmp	r3, #8
 800bbae:	d10b      	bne.n	800bbc8 <_printf_i+0x14c>
 800bbb0:	6823      	ldr	r3, [r4, #0]
 800bbb2:	07de      	lsls	r6, r3, #31
 800bbb4:	d508      	bpl.n	800bbc8 <_printf_i+0x14c>
 800bbb6:	6923      	ldr	r3, [r4, #16]
 800bbb8:	6861      	ldr	r1, [r4, #4]
 800bbba:	4299      	cmp	r1, r3
 800bbbc:	bfde      	ittt	le
 800bbbe:	2330      	movle	r3, #48	; 0x30
 800bbc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bbc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bbc8:	1b52      	subs	r2, r2, r5
 800bbca:	6122      	str	r2, [r4, #16]
 800bbcc:	f8cd a000 	str.w	sl, [sp]
 800bbd0:	464b      	mov	r3, r9
 800bbd2:	aa03      	add	r2, sp, #12
 800bbd4:	4621      	mov	r1, r4
 800bbd6:	4640      	mov	r0, r8
 800bbd8:	f7ff fee2 	bl	800b9a0 <_printf_common>
 800bbdc:	3001      	adds	r0, #1
 800bbde:	d14c      	bne.n	800bc7a <_printf_i+0x1fe>
 800bbe0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe4:	b004      	add	sp, #16
 800bbe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbea:	4835      	ldr	r0, [pc, #212]	; (800bcc0 <_printf_i+0x244>)
 800bbec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bbf0:	6829      	ldr	r1, [r5, #0]
 800bbf2:	6823      	ldr	r3, [r4, #0]
 800bbf4:	f851 6b04 	ldr.w	r6, [r1], #4
 800bbf8:	6029      	str	r1, [r5, #0]
 800bbfa:	061d      	lsls	r5, r3, #24
 800bbfc:	d514      	bpl.n	800bc28 <_printf_i+0x1ac>
 800bbfe:	07df      	lsls	r7, r3, #31
 800bc00:	bf44      	itt	mi
 800bc02:	f043 0320 	orrmi.w	r3, r3, #32
 800bc06:	6023      	strmi	r3, [r4, #0]
 800bc08:	b91e      	cbnz	r6, 800bc12 <_printf_i+0x196>
 800bc0a:	6823      	ldr	r3, [r4, #0]
 800bc0c:	f023 0320 	bic.w	r3, r3, #32
 800bc10:	6023      	str	r3, [r4, #0]
 800bc12:	2310      	movs	r3, #16
 800bc14:	e7b0      	b.n	800bb78 <_printf_i+0xfc>
 800bc16:	6823      	ldr	r3, [r4, #0]
 800bc18:	f043 0320 	orr.w	r3, r3, #32
 800bc1c:	6023      	str	r3, [r4, #0]
 800bc1e:	2378      	movs	r3, #120	; 0x78
 800bc20:	4828      	ldr	r0, [pc, #160]	; (800bcc4 <_printf_i+0x248>)
 800bc22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc26:	e7e3      	b.n	800bbf0 <_printf_i+0x174>
 800bc28:	0659      	lsls	r1, r3, #25
 800bc2a:	bf48      	it	mi
 800bc2c:	b2b6      	uxthmi	r6, r6
 800bc2e:	e7e6      	b.n	800bbfe <_printf_i+0x182>
 800bc30:	4615      	mov	r5, r2
 800bc32:	e7bb      	b.n	800bbac <_printf_i+0x130>
 800bc34:	682b      	ldr	r3, [r5, #0]
 800bc36:	6826      	ldr	r6, [r4, #0]
 800bc38:	6961      	ldr	r1, [r4, #20]
 800bc3a:	1d18      	adds	r0, r3, #4
 800bc3c:	6028      	str	r0, [r5, #0]
 800bc3e:	0635      	lsls	r5, r6, #24
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	d501      	bpl.n	800bc48 <_printf_i+0x1cc>
 800bc44:	6019      	str	r1, [r3, #0]
 800bc46:	e002      	b.n	800bc4e <_printf_i+0x1d2>
 800bc48:	0670      	lsls	r0, r6, #25
 800bc4a:	d5fb      	bpl.n	800bc44 <_printf_i+0x1c8>
 800bc4c:	8019      	strh	r1, [r3, #0]
 800bc4e:	2300      	movs	r3, #0
 800bc50:	6123      	str	r3, [r4, #16]
 800bc52:	4615      	mov	r5, r2
 800bc54:	e7ba      	b.n	800bbcc <_printf_i+0x150>
 800bc56:	682b      	ldr	r3, [r5, #0]
 800bc58:	1d1a      	adds	r2, r3, #4
 800bc5a:	602a      	str	r2, [r5, #0]
 800bc5c:	681d      	ldr	r5, [r3, #0]
 800bc5e:	6862      	ldr	r2, [r4, #4]
 800bc60:	2100      	movs	r1, #0
 800bc62:	4628      	mov	r0, r5
 800bc64:	f7f4 fad4 	bl	8000210 <memchr>
 800bc68:	b108      	cbz	r0, 800bc6e <_printf_i+0x1f2>
 800bc6a:	1b40      	subs	r0, r0, r5
 800bc6c:	6060      	str	r0, [r4, #4]
 800bc6e:	6863      	ldr	r3, [r4, #4]
 800bc70:	6123      	str	r3, [r4, #16]
 800bc72:	2300      	movs	r3, #0
 800bc74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc78:	e7a8      	b.n	800bbcc <_printf_i+0x150>
 800bc7a:	6923      	ldr	r3, [r4, #16]
 800bc7c:	462a      	mov	r2, r5
 800bc7e:	4649      	mov	r1, r9
 800bc80:	4640      	mov	r0, r8
 800bc82:	47d0      	blx	sl
 800bc84:	3001      	adds	r0, #1
 800bc86:	d0ab      	beq.n	800bbe0 <_printf_i+0x164>
 800bc88:	6823      	ldr	r3, [r4, #0]
 800bc8a:	079b      	lsls	r3, r3, #30
 800bc8c:	d413      	bmi.n	800bcb6 <_printf_i+0x23a>
 800bc8e:	68e0      	ldr	r0, [r4, #12]
 800bc90:	9b03      	ldr	r3, [sp, #12]
 800bc92:	4298      	cmp	r0, r3
 800bc94:	bfb8      	it	lt
 800bc96:	4618      	movlt	r0, r3
 800bc98:	e7a4      	b.n	800bbe4 <_printf_i+0x168>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	4632      	mov	r2, r6
 800bc9e:	4649      	mov	r1, r9
 800bca0:	4640      	mov	r0, r8
 800bca2:	47d0      	blx	sl
 800bca4:	3001      	adds	r0, #1
 800bca6:	d09b      	beq.n	800bbe0 <_printf_i+0x164>
 800bca8:	3501      	adds	r5, #1
 800bcaa:	68e3      	ldr	r3, [r4, #12]
 800bcac:	9903      	ldr	r1, [sp, #12]
 800bcae:	1a5b      	subs	r3, r3, r1
 800bcb0:	42ab      	cmp	r3, r5
 800bcb2:	dcf2      	bgt.n	800bc9a <_printf_i+0x21e>
 800bcb4:	e7eb      	b.n	800bc8e <_printf_i+0x212>
 800bcb6:	2500      	movs	r5, #0
 800bcb8:	f104 0619 	add.w	r6, r4, #25
 800bcbc:	e7f5      	b.n	800bcaa <_printf_i+0x22e>
 800bcbe:	bf00      	nop
 800bcc0:	0800c131 	.word	0x0800c131
 800bcc4:	0800c142 	.word	0x0800c142

0800bcc8 <memmove>:
 800bcc8:	4288      	cmp	r0, r1
 800bcca:	b510      	push	{r4, lr}
 800bccc:	eb01 0402 	add.w	r4, r1, r2
 800bcd0:	d902      	bls.n	800bcd8 <memmove+0x10>
 800bcd2:	4284      	cmp	r4, r0
 800bcd4:	4623      	mov	r3, r4
 800bcd6:	d807      	bhi.n	800bce8 <memmove+0x20>
 800bcd8:	1e43      	subs	r3, r0, #1
 800bcda:	42a1      	cmp	r1, r4
 800bcdc:	d008      	beq.n	800bcf0 <memmove+0x28>
 800bcde:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bce2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bce6:	e7f8      	b.n	800bcda <memmove+0x12>
 800bce8:	4402      	add	r2, r0
 800bcea:	4601      	mov	r1, r0
 800bcec:	428a      	cmp	r2, r1
 800bcee:	d100      	bne.n	800bcf2 <memmove+0x2a>
 800bcf0:	bd10      	pop	{r4, pc}
 800bcf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bcfa:	e7f7      	b.n	800bcec <memmove+0x24>

0800bcfc <_realloc_r>:
 800bcfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd00:	4680      	mov	r8, r0
 800bd02:	4614      	mov	r4, r2
 800bd04:	460e      	mov	r6, r1
 800bd06:	b921      	cbnz	r1, 800bd12 <_realloc_r+0x16>
 800bd08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd0c:	4611      	mov	r1, r2
 800bd0e:	f7ff bbd1 	b.w	800b4b4 <_malloc_r>
 800bd12:	b92a      	cbnz	r2, 800bd20 <_realloc_r+0x24>
 800bd14:	f7ff fb62 	bl	800b3dc <_free_r>
 800bd18:	4625      	mov	r5, r4
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd20:	f000 f81b 	bl	800bd5a <_malloc_usable_size_r>
 800bd24:	4284      	cmp	r4, r0
 800bd26:	4607      	mov	r7, r0
 800bd28:	d802      	bhi.n	800bd30 <_realloc_r+0x34>
 800bd2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd2e:	d812      	bhi.n	800bd56 <_realloc_r+0x5a>
 800bd30:	4621      	mov	r1, r4
 800bd32:	4640      	mov	r0, r8
 800bd34:	f7ff fbbe 	bl	800b4b4 <_malloc_r>
 800bd38:	4605      	mov	r5, r0
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	d0ed      	beq.n	800bd1a <_realloc_r+0x1e>
 800bd3e:	42bc      	cmp	r4, r7
 800bd40:	4622      	mov	r2, r4
 800bd42:	4631      	mov	r1, r6
 800bd44:	bf28      	it	cs
 800bd46:	463a      	movcs	r2, r7
 800bd48:	f7ff fb32 	bl	800b3b0 <memcpy>
 800bd4c:	4631      	mov	r1, r6
 800bd4e:	4640      	mov	r0, r8
 800bd50:	f7ff fb44 	bl	800b3dc <_free_r>
 800bd54:	e7e1      	b.n	800bd1a <_realloc_r+0x1e>
 800bd56:	4635      	mov	r5, r6
 800bd58:	e7df      	b.n	800bd1a <_realloc_r+0x1e>

0800bd5a <_malloc_usable_size_r>:
 800bd5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd5e:	1f18      	subs	r0, r3, #4
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	bfbc      	itt	lt
 800bd64:	580b      	ldrlt	r3, [r1, r0]
 800bd66:	18c0      	addlt	r0, r0, r3
 800bd68:	4770      	bx	lr
	...

0800bd6c <_init>:
 800bd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd6e:	bf00      	nop
 800bd70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd72:	bc08      	pop	{r3}
 800bd74:	469e      	mov	lr, r3
 800bd76:	4770      	bx	lr

0800bd78 <_fini>:
 800bd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd7a:	bf00      	nop
 800bd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd7e:	bc08      	pop	{r3}
 800bd80:	469e      	mov	lr, r3
 800bd82:	4770      	bx	lr
