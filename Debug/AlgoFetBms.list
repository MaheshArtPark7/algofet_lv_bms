
AlgoFetBms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000bd64  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800bf34  0800bf34  0001bf34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c304  0800c304  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c304  0800c304  0001c304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c30c  0800c30c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c30c  0800c30c  0001c30c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c310  0800c310  0001c310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000102e4  20000074  0800c388  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20010358  0800c388  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000267d2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c70  00000000  00000000  00046876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  0004c4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cc8  00000000  00000000  0004e420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028648  00000000  00000000  000500e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ca5c  00000000  00000000  00078730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f285f  00000000  00000000  000a518c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001979eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008598  00000000  00000000  00197a3c  2**2
=======
  1 .text         0000be64  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800c034  0800c034  0001c034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c404  0800c404  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c404  0800c404  0001c404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c40c  0800c40c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c40c  0800c40c  0001c40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c410  0800c410  0001c410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000102e8  20000074  0800c488  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  2001035c  0800c488  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025eb2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005aff  00000000  00000000  00045f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ea8  00000000  00000000  0004ba58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c38  00000000  00000000  0004d900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028606  00000000  00000000  0004f538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cc57  00000000  00000000  00077b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f24a8  00000000  00000000  000a4795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00196c3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008330  00000000  00000000  00196c90  2**2
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001f0:	0800bf1c 	.word	0x0800bf1c
=======
 80001f0:	0800c01c 	.word	0x0800c01c
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
<<<<<<< HEAD
 800020c:	0800bf1c 	.word	0x0800bf1c
=======
 800020c:	0800c01c 	.word	0x0800c01c
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2f>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000884:	bf24      	itt	cs
 8000886:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800088a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800088e:	d90d      	bls.n	80008ac <__aeabi_d2f+0x30>
 8000890:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000894:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000898:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800089c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008a4:	bf08      	it	eq
 80008a6:	f020 0001 	biceq.w	r0, r0, #1
 80008aa:	4770      	bx	lr
 80008ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008b0:	d121      	bne.n	80008f6 <__aeabi_d2f+0x7a>
 80008b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008b6:	bfbc      	itt	lt
 80008b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008bc:	4770      	bxlt	lr
 80008be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008c6:	f1c2 0218 	rsb	r2, r2, #24
 80008ca:	f1c2 0c20 	rsb	ip, r2, #32
 80008ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80008d2:	fa20 f002 	lsr.w	r0, r0, r2
 80008d6:	bf18      	it	ne
 80008d8:	f040 0001 	orrne.w	r0, r0, #1
 80008dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008e8:	ea40 000c 	orr.w	r0, r0, ip
 80008ec:	fa23 f302 	lsr.w	r3, r3, r2
 80008f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008f4:	e7cc      	b.n	8000890 <__aeabi_d2f+0x14>
 80008f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008fa:	d107      	bne.n	800090c <__aeabi_d2f+0x90>
 80008fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000900:	bf1e      	ittt	ne
 8000902:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000906:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800090a:	4770      	bxne	lr
 800090c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000910:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000914:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <__aeabi_uldivmod>:
 800091c:	b953      	cbnz	r3, 8000934 <__aeabi_uldivmod+0x18>
 800091e:	b94a      	cbnz	r2, 8000934 <__aeabi_uldivmod+0x18>
 8000920:	2900      	cmp	r1, #0
 8000922:	bf08      	it	eq
 8000924:	2800      	cmpeq	r0, #0
 8000926:	bf1c      	itt	ne
 8000928:	f04f 31ff 	movne.w	r1, #4294967295
 800092c:	f04f 30ff 	movne.w	r0, #4294967295
 8000930:	f000 b974 	b.w	8000c1c <__aeabi_idiv0>
 8000934:	f1ad 0c08 	sub.w	ip, sp, #8
 8000938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800093c:	f000 f806 	bl	800094c <__udivmoddi4>
 8000940:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr

0800094c <__udivmoddi4>:
 800094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000950:	9d08      	ldr	r5, [sp, #32]
 8000952:	4604      	mov	r4, r0
 8000954:	468e      	mov	lr, r1
 8000956:	2b00      	cmp	r3, #0
 8000958:	d14d      	bne.n	80009f6 <__udivmoddi4+0xaa>
 800095a:	428a      	cmp	r2, r1
 800095c:	4694      	mov	ip, r2
 800095e:	d969      	bls.n	8000a34 <__udivmoddi4+0xe8>
 8000960:	fab2 f282 	clz	r2, r2
 8000964:	b152      	cbz	r2, 800097c <__udivmoddi4+0x30>
 8000966:	fa01 f302 	lsl.w	r3, r1, r2
 800096a:	f1c2 0120 	rsb	r1, r2, #32
 800096e:	fa20 f101 	lsr.w	r1, r0, r1
 8000972:	fa0c fc02 	lsl.w	ip, ip, r2
 8000976:	ea41 0e03 	orr.w	lr, r1, r3
 800097a:	4094      	lsls	r4, r2
 800097c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000980:	0c21      	lsrs	r1, r4, #16
 8000982:	fbbe f6f8 	udiv	r6, lr, r8
 8000986:	fa1f f78c 	uxth.w	r7, ip
 800098a:	fb08 e316 	mls	r3, r8, r6, lr
 800098e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000992:	fb06 f107 	mul.w	r1, r6, r7
 8000996:	4299      	cmp	r1, r3
 8000998:	d90a      	bls.n	80009b0 <__udivmoddi4+0x64>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f106 30ff 	add.w	r0, r6, #4294967295
 80009a2:	f080 811f 	bcs.w	8000be4 <__udivmoddi4+0x298>
 80009a6:	4299      	cmp	r1, r3
 80009a8:	f240 811c 	bls.w	8000be4 <__udivmoddi4+0x298>
 80009ac:	3e02      	subs	r6, #2
 80009ae:	4463      	add	r3, ip
 80009b0:	1a5b      	subs	r3, r3, r1
 80009b2:	b2a4      	uxth	r4, r4
 80009b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009b8:	fb08 3310 	mls	r3, r8, r0, r3
 80009bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009c0:	fb00 f707 	mul.w	r7, r0, r7
 80009c4:	42a7      	cmp	r7, r4
 80009c6:	d90a      	bls.n	80009de <__udivmoddi4+0x92>
 80009c8:	eb1c 0404 	adds.w	r4, ip, r4
 80009cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80009d0:	f080 810a 	bcs.w	8000be8 <__udivmoddi4+0x29c>
 80009d4:	42a7      	cmp	r7, r4
 80009d6:	f240 8107 	bls.w	8000be8 <__udivmoddi4+0x29c>
 80009da:	4464      	add	r4, ip
 80009dc:	3802      	subs	r0, #2
 80009de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009e2:	1be4      	subs	r4, r4, r7
 80009e4:	2600      	movs	r6, #0
 80009e6:	b11d      	cbz	r5, 80009f0 <__udivmoddi4+0xa4>
 80009e8:	40d4      	lsrs	r4, r2
 80009ea:	2300      	movs	r3, #0
 80009ec:	e9c5 4300 	strd	r4, r3, [r5]
 80009f0:	4631      	mov	r1, r6
 80009f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f6:	428b      	cmp	r3, r1
 80009f8:	d909      	bls.n	8000a0e <__udivmoddi4+0xc2>
 80009fa:	2d00      	cmp	r5, #0
 80009fc:	f000 80ef 	beq.w	8000bde <__udivmoddi4+0x292>
 8000a00:	2600      	movs	r6, #0
 8000a02:	e9c5 0100 	strd	r0, r1, [r5]
 8000a06:	4630      	mov	r0, r6
 8000a08:	4631      	mov	r1, r6
 8000a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a0e:	fab3 f683 	clz	r6, r3
 8000a12:	2e00      	cmp	r6, #0
 8000a14:	d14a      	bne.n	8000aac <__udivmoddi4+0x160>
 8000a16:	428b      	cmp	r3, r1
 8000a18:	d302      	bcc.n	8000a20 <__udivmoddi4+0xd4>
 8000a1a:	4282      	cmp	r2, r0
 8000a1c:	f200 80f9 	bhi.w	8000c12 <__udivmoddi4+0x2c6>
 8000a20:	1a84      	subs	r4, r0, r2
 8000a22:	eb61 0303 	sbc.w	r3, r1, r3
 8000a26:	2001      	movs	r0, #1
 8000a28:	469e      	mov	lr, r3
 8000a2a:	2d00      	cmp	r5, #0
 8000a2c:	d0e0      	beq.n	80009f0 <__udivmoddi4+0xa4>
 8000a2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a32:	e7dd      	b.n	80009f0 <__udivmoddi4+0xa4>
 8000a34:	b902      	cbnz	r2, 8000a38 <__udivmoddi4+0xec>
 8000a36:	deff      	udf	#255	; 0xff
 8000a38:	fab2 f282 	clz	r2, r2
 8000a3c:	2a00      	cmp	r2, #0
 8000a3e:	f040 8092 	bne.w	8000b66 <__udivmoddi4+0x21a>
 8000a42:	eba1 010c 	sub.w	r1, r1, ip
 8000a46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a4a:	fa1f fe8c 	uxth.w	lr, ip
 8000a4e:	2601      	movs	r6, #1
 8000a50:	0c20      	lsrs	r0, r4, #16
 8000a52:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a56:	fb07 1113 	mls	r1, r7, r3, r1
 8000a5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a5e:	fb0e f003 	mul.w	r0, lr, r3
 8000a62:	4288      	cmp	r0, r1
 8000a64:	d908      	bls.n	8000a78 <__udivmoddi4+0x12c>
 8000a66:	eb1c 0101 	adds.w	r1, ip, r1
 8000a6a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a6e:	d202      	bcs.n	8000a76 <__udivmoddi4+0x12a>
 8000a70:	4288      	cmp	r0, r1
 8000a72:	f200 80cb 	bhi.w	8000c0c <__udivmoddi4+0x2c0>
 8000a76:	4643      	mov	r3, r8
 8000a78:	1a09      	subs	r1, r1, r0
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a80:	fb07 1110 	mls	r1, r7, r0, r1
 8000a84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a88:	fb0e fe00 	mul.w	lr, lr, r0
 8000a8c:	45a6      	cmp	lr, r4
 8000a8e:	d908      	bls.n	8000aa2 <__udivmoddi4+0x156>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a98:	d202      	bcs.n	8000aa0 <__udivmoddi4+0x154>
 8000a9a:	45a6      	cmp	lr, r4
 8000a9c:	f200 80bb 	bhi.w	8000c16 <__udivmoddi4+0x2ca>
 8000aa0:	4608      	mov	r0, r1
 8000aa2:	eba4 040e 	sub.w	r4, r4, lr
 8000aa6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aaa:	e79c      	b.n	80009e6 <__udivmoddi4+0x9a>
 8000aac:	f1c6 0720 	rsb	r7, r6, #32
 8000ab0:	40b3      	lsls	r3, r6
 8000ab2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ab6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aba:	fa20 f407 	lsr.w	r4, r0, r7
 8000abe:	fa01 f306 	lsl.w	r3, r1, r6
 8000ac2:	431c      	orrs	r4, r3
 8000ac4:	40f9      	lsrs	r1, r7
 8000ac6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000aca:	fa00 f306 	lsl.w	r3, r0, r6
 8000ace:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ad2:	0c20      	lsrs	r0, r4, #16
 8000ad4:	fa1f fe8c 	uxth.w	lr, ip
 8000ad8:	fb09 1118 	mls	r1, r9, r8, r1
 8000adc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ae4:	4288      	cmp	r0, r1
 8000ae6:	fa02 f206 	lsl.w	r2, r2, r6
 8000aea:	d90b      	bls.n	8000b04 <__udivmoddi4+0x1b8>
 8000aec:	eb1c 0101 	adds.w	r1, ip, r1
 8000af0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000af4:	f080 8088 	bcs.w	8000c08 <__udivmoddi4+0x2bc>
 8000af8:	4288      	cmp	r0, r1
 8000afa:	f240 8085 	bls.w	8000c08 <__udivmoddi4+0x2bc>
 8000afe:	f1a8 0802 	sub.w	r8, r8, #2
 8000b02:	4461      	add	r1, ip
 8000b04:	1a09      	subs	r1, r1, r0
 8000b06:	b2a4      	uxth	r4, r4
 8000b08:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b0c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b18:	458e      	cmp	lr, r1
 8000b1a:	d908      	bls.n	8000b2e <__udivmoddi4+0x1e2>
 8000b1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b20:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b24:	d26c      	bcs.n	8000c00 <__udivmoddi4+0x2b4>
 8000b26:	458e      	cmp	lr, r1
 8000b28:	d96a      	bls.n	8000c00 <__udivmoddi4+0x2b4>
 8000b2a:	3802      	subs	r0, #2
 8000b2c:	4461      	add	r1, ip
 8000b2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b32:	fba0 9402 	umull	r9, r4, r0, r2
 8000b36:	eba1 010e 	sub.w	r1, r1, lr
 8000b3a:	42a1      	cmp	r1, r4
 8000b3c:	46c8      	mov	r8, r9
 8000b3e:	46a6      	mov	lr, r4
 8000b40:	d356      	bcc.n	8000bf0 <__udivmoddi4+0x2a4>
 8000b42:	d053      	beq.n	8000bec <__udivmoddi4+0x2a0>
 8000b44:	b15d      	cbz	r5, 8000b5e <__udivmoddi4+0x212>
 8000b46:	ebb3 0208 	subs.w	r2, r3, r8
 8000b4a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b4e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b52:	fa22 f306 	lsr.w	r3, r2, r6
 8000b56:	40f1      	lsrs	r1, r6
 8000b58:	431f      	orrs	r7, r3
 8000b5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b5e:	2600      	movs	r6, #0
 8000b60:	4631      	mov	r1, r6
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	f1c2 0320 	rsb	r3, r2, #32
 8000b6a:	40d8      	lsrs	r0, r3
 8000b6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b70:	fa21 f303 	lsr.w	r3, r1, r3
 8000b74:	4091      	lsls	r1, r2
 8000b76:	4301      	orrs	r1, r0
 8000b78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7c:	fa1f fe8c 	uxth.w	lr, ip
 8000b80:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b84:	fb07 3610 	mls	r6, r7, r0, r3
 8000b88:	0c0b      	lsrs	r3, r1, #16
 8000b8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b8e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b92:	429e      	cmp	r6, r3
 8000b94:	fa04 f402 	lsl.w	r4, r4, r2
 8000b98:	d908      	bls.n	8000bac <__udivmoddi4+0x260>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ba2:	d22f      	bcs.n	8000c04 <__udivmoddi4+0x2b8>
 8000ba4:	429e      	cmp	r6, r3
 8000ba6:	d92d      	bls.n	8000c04 <__udivmoddi4+0x2b8>
 8000ba8:	3802      	subs	r0, #2
 8000baa:	4463      	add	r3, ip
 8000bac:	1b9b      	subs	r3, r3, r6
 8000bae:	b289      	uxth	r1, r1
 8000bb0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bb4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bbc:	fb06 f30e 	mul.w	r3, r6, lr
 8000bc0:	428b      	cmp	r3, r1
 8000bc2:	d908      	bls.n	8000bd6 <__udivmoddi4+0x28a>
 8000bc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000bcc:	d216      	bcs.n	8000bfc <__udivmoddi4+0x2b0>
 8000bce:	428b      	cmp	r3, r1
 8000bd0:	d914      	bls.n	8000bfc <__udivmoddi4+0x2b0>
 8000bd2:	3e02      	subs	r6, #2
 8000bd4:	4461      	add	r1, ip
 8000bd6:	1ac9      	subs	r1, r1, r3
 8000bd8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bdc:	e738      	b.n	8000a50 <__udivmoddi4+0x104>
 8000bde:	462e      	mov	r6, r5
 8000be0:	4628      	mov	r0, r5
 8000be2:	e705      	b.n	80009f0 <__udivmoddi4+0xa4>
 8000be4:	4606      	mov	r6, r0
 8000be6:	e6e3      	b.n	80009b0 <__udivmoddi4+0x64>
 8000be8:	4618      	mov	r0, r3
 8000bea:	e6f8      	b.n	80009de <__udivmoddi4+0x92>
 8000bec:	454b      	cmp	r3, r9
 8000bee:	d2a9      	bcs.n	8000b44 <__udivmoddi4+0x1f8>
 8000bf0:	ebb9 0802 	subs.w	r8, r9, r2
 8000bf4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bf8:	3801      	subs	r0, #1
 8000bfa:	e7a3      	b.n	8000b44 <__udivmoddi4+0x1f8>
 8000bfc:	4646      	mov	r6, r8
 8000bfe:	e7ea      	b.n	8000bd6 <__udivmoddi4+0x28a>
 8000c00:	4620      	mov	r0, r4
 8000c02:	e794      	b.n	8000b2e <__udivmoddi4+0x1e2>
 8000c04:	4640      	mov	r0, r8
 8000c06:	e7d1      	b.n	8000bac <__udivmoddi4+0x260>
 8000c08:	46d0      	mov	r8, sl
 8000c0a:	e77b      	b.n	8000b04 <__udivmoddi4+0x1b8>
 8000c0c:	3b02      	subs	r3, #2
 8000c0e:	4461      	add	r1, ip
 8000c10:	e732      	b.n	8000a78 <__udivmoddi4+0x12c>
 8000c12:	4630      	mov	r0, r6
 8000c14:	e709      	b.n	8000a2a <__udivmoddi4+0xde>
 8000c16:	4464      	add	r4, ip
 8000c18:	3802      	subs	r0, #2
 8000c1a:	e742      	b.n	8000aa2 <__udivmoddi4+0x156>

08000c1c <__aeabi_idiv0>:
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <Unpack_FCU_STATE_REQUEST_can_codegen>:

#endif // CAN_CODEGEN_USE_DIAG_MONITORS


uint32_t Unpack_FCU_STATE_REQUEST_can_codegen(FCU_STATE_REQUEST_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->FCU_StateRequest = (_d[0] & (0x07U));
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	701a      	strb	r2, [r3, #0]
  _m->mon1.frame_cnt++;

  FMon_FCU_STATE_REQUEST_can_codegen(&_m->mon1, FCU_STATE_REQUEST_CANID);
#endif // CAN_CODEGEN_USE_DIAG_MONITORS

  return FCU_STATE_REQUEST_CANID;
 8000c3c:	f240 1301 	movw	r3, #257	; 0x101
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <Pack_BAT_GAUGE_OvrVIEW_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_GAUGE_OvrVIEW_can_codegen(BAT_GAUGE_OvrVIEW_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_GAUGE_OvrVIEW_DLC) && (i < 8); cframe->Data[i++] = 0);
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]
 8000c5a:	e007      	b.n	8000c6c <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x20>
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	1c5a      	adds	r2, r3, #1
 8000c60:	73fa      	strb	r2, [r7, #15]
 8000c62:	461a      	mov	r2, r3
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	2200      	movs	r2, #0
 8000c6a:	715a      	strb	r2, [r3, #5]
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d802      	bhi.n	8000c78 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x2c>
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	2b07      	cmp	r3, #7
 8000c76:	d9f1      	bls.n	8000c5c <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_gauge_SoC & (0xFFU));
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	795a      	ldrb	r2, [r3, #5]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= (_m->BAT_gauge_SoH & (0xFFU));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	799a      	ldrb	r2, [r3, #6]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	785b      	ldrb	r3, [r3, #1]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_gauge_cycleCount & (0xFFU));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	79da      	ldrb	r2, [r3, #7]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	885b      	ldrh	r3, [r3, #2]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_gauge_cycleCount >> 8) & (0xFFU));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	7a1a      	ldrb	r2, [r3, #8]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	885b      	ldrh	r3, [r3, #2]
 8000cb2:	0a1b      	lsrs	r3, r3, #8
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	721a      	strb	r2, [r3, #8]

  cframe->MsgId = BAT_GAUGE_OvrVIEW_CANID;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x94>)
 8000cc4:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_GAUGE_OvrVIEW_DLC;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	2204      	movs	r2, #4
 8000cca:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_GAUGE_OvrVIEW_IDE;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	735a      	strb	r2, [r3, #13]
  return BAT_GAUGE_OvrVIEW_CANID;
 8000cd2:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x94>)
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	001ff810 	.word	0x001ff810

08000ce4 <bq76952_init>:
static float bq76952_ReadTemp(int *cmd[2]);
//------------------------------------------------------------------------------
// Static Functions definition

int16_t bq76952_init(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
  int16_t ret_val = SYS_ERR;
 8000cea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cee:	81fb      	strh	r3, [r7, #14]
  do
  {
    //uint16_t device_number = 0; //fixme
    uint16_t pack_current[2] = {0};
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
    uint16_t temp[2] = {0};
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	607b      	str	r3, [r7, #4]
    TsBmsPower_cfg_t.power_cfg_reg = PowerConfig;
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <bq76952_init+0x40>)
 8000cfa:	f249 2234 	movw	r2, #37428	; 0x9234
 8000cfe:	80da      	strh	r2, [r3, #6]
    TsBmsPower_cfg_t.reg_val = 0x2D80;
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <bq76952_init+0x40>)
 8000d02:	f44f 5236 	mov.w	r2, #11648	; 0x2d80
 8000d06:	809a      	strh	r2, [r3, #4]
    TsBmsPower_cfg_t.len = 4;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <bq76952_init+0x40>)
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	701a      	strb	r2, [r3, #0]
    //OCD1Threshold --> 0x0A			#Rsense is 1mohm. Unit is 2mV, so 20mV means a threshold of 20A
    //SCDThreshold --> 0x02				#40mV across 1mohm, i.e, 40A. Refer to TRM page 168
    //SCDDelay --> 0x03					#30us. Enabled with a delay of (value - 1) * 15 us; min value of 1
    //SCDLLatchLimit --> 0x01			#Only with load removal. Refer to TRM page 170
    //OTC, OTD, OTF      #TO BE ADDED
    ret_val = SYS_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	81fb      	strh	r3, [r7, #14]
  } while(false);

  return ret_val;
 8000d12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000090 	.word	0x20000090

08000d28 <bq76952_FETs_enable>:
  ret_val = SYS_OK;
  return ret_val;
}

static int16_t bq76952_FETs_enable(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  // Enables all the FETs to be controlled
  int16_t ret_val = SYS_ERR;
 8000d2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d32:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, FET_ENABLE))
 8000d34:	2122      	movs	r1, #34	; 0x22
 8000d36:	203e      	movs	r0, #62	; 0x3e
 8000d38:	f000 f8ca 	bl	8000ed0 <bq76952_write_sub_cmd>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
    {
      break;
    }
  } while(false);
  ret_val = SYS_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	80fb      	strh	r3, [r7, #6]
  return ret_val;
 8000d44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <bq76952_allFETs_on>:

static int16_t bq76952_allFETs_on(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  // Switches on all the FETs
  int16_t ret_val = SYS_ERR;
 8000d56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d5a:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, ALL_FETS_ON))
 8000d5c:	2196      	movs	r1, #150	; 0x96
 8000d5e:	203e      	movs	r0, #62	; 0x3e
 8000d60:	f000 f8b6 	bl	8000ed0 <bq76952_write_sub_cmd>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
    {
      break;
    }
  } while(false);
  ret_val = SYS_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	80fb      	strh	r3, [r7, #6]
  return ret_val;
 8000d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <bq76952_allFETs_off>:

static int16_t bq76952_allFETs_off(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
  // Switches off all the FETs
  int16_t ret_val = SYS_ERR;
 8000d7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d82:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, ALL_FETS_OFF))
 8000d84:	2195      	movs	r1, #149	; 0x95
 8000d86:	203e      	movs	r0, #62	; 0x3e
 8000d88:	f000 f8a2 	bl	8000ed0 <bq76952_write_sub_cmd>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
    {
      break;
    }
  } while(false);
  ret_val = SYS_OK;
 8000d90:	2300      	movs	r3, #0
 8000d92:	80fb      	strh	r3, [r7, #6]
  return ret_val;
 8000d94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <bq76952_FETs_ON>:

extern int16_t bq76952_FETs_ON(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  //To switch on the FETs whenever required
  bq76952_FETs_enable();
 8000da4:	f7ff ffc0 	bl	8000d28 <bq76952_FETs_enable>
  bq76952_allFETs_on();
 8000da8:	f7ff ffd2 	bl	8000d50 <bq76952_allFETs_on>
}
 8000dac:	bf00      	nop
 8000dae:	4618      	mov	r0, r3
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <bq76952_FETs_OFF>:

extern int16_t bq76952_FETs_OFF(void)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	af00      	add	r7, sp, #0
  //To switch off the FETs
  bq76952_FETs_enable();
 8000db6:	f7ff ffb7 	bl	8000d28 <bq76952_FETs_enable>
  bq76952_allFETs_off();
 8000dba:	f7ff ffdd 	bl	8000d78 <bq76952_allFETs_off>
}
 8000dbe:	bf00      	nop
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <bq76952_FETs_call>:
  PDSG = ((0x8 & Rx_DATA[0]) >> 3);        // pre-discharge FET state
}

//FET Control call
extern int16_t bq76952_FETs_call(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  device_number = bq76952_get_device_number(&device_number);
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <bq76952_FETs_call+0x18>)
 8000dca:	f000 f81d 	bl	8000e08 <bq76952_get_device_number>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	4b02      	ldr	r3, [pc, #8]	; (8000ddc <bq76952_FETs_call+0x18>)
 8000dd4:	801a      	strh	r2, [r3, #0]
  //HAL_Delay(100);
  //bq76952_dischargeOFF();
  //HAL_Delay(100);
  //bq76952_chargeOFF();
  //HAL_Delay(100);
}
 8000dd6:	bf00      	nop
 8000dd8:	4618      	mov	r0, r3
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000098 	.word	0x20000098

08000de0 <bq76952_AFE_reset>:

//------------------------------------------------------------------------------------------------------------
//AFE Functions
extern int16_t bq76952_AFE_reset(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  // Resets all the registers of the AFE
  int16_t ret_val = SYS_ERR;
 8000de6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dea:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, RESET))
 8000dec:	2112      	movs	r1, #18
 8000dee:	203e      	movs	r0, #62	; 0x3e
 8000df0:	f000 f86e 	bl	8000ed0 <bq76952_write_sub_cmd>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
    {
      break;
    }
  } while(false);
  ret_val = SYS_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	80fb      	strh	r3, [r7, #6]
  return ret_val;
 8000dfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <bq76952_get_device_number>:
  ret_val = SYS_OK;
  return ret_val;
}

static int16_t bq76952_get_device_number(uint16_t *pDev_num)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  //Reads the device number of the AFE
  int16_t ret_val = SYS_ERR;
 8000e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e14:	81fb      	strh	r3, [r7, #14]
  uint8_t device_number;
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, DEVICE_NUMBER))
 8000e16:	2101      	movs	r1, #1
 8000e18:	203e      	movs	r0, #62	; 0x3e
 8000e1a:	f000 f859 	bl	8000ed0 <bq76952_write_sub_cmd>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d10c      	bne.n	8000e3e <bq76952_get_device_number+0x36>
    {
      break;
    }
    if(SYS_OK != bq76952_read_sub_cmd_data_buffer(SUB_CMD_DATA_BUFF_ADDR, &pDev_num, 2))
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	2202      	movs	r2, #2
 8000e28:	4619      	mov	r1, r3
 8000e2a:	2040      	movs	r0, #64	; 0x40
 8000e2c:	f000 f8d6 	bl	8000fdc <bq76952_read_sub_cmd_data_buffer>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d004      	beq.n	8000e40 <bq76952_get_device_number+0x38>
    {
      pDev_num= *pDev_num;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	607b      	str	r3, [r7, #4]
      break;
 8000e3c:	e000      	b.n	8000e40 <bq76952_get_device_number+0x38>
      break;
 8000e3e:	bf00      	nop
    }
  } while(false);
  ret_val = SYS_OK;
 8000e40:	2300      	movs	r3, #0
 8000e42:	81fb      	strh	r3, [r7, #14]

  return pDev_num;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	b21b      	sxth	r3, r3
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <CRC8>:
  }
  return crc;
}
static uint8_t CRC8(uint8_t *ptr, uint8_t len)
//Calculates CRC8 for passed bytes.
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  uint8_t crc = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73bb      	strb	r3, [r7, #14]
  while(len-- != 0)
 8000e60:	e029      	b.n	8000eb6 <CRC8+0x66>
  {
    for (i = 0x80; i != 0; i /= 2)
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	e020      	b.n	8000eaa <CRC8+0x5a>
    {
      if((crc & 0x80) != 0)
 8000e68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	da09      	bge.n	8000e84 <CRC8+0x34>
      {
        crc *= 2;
 8000e70:	7bbb      	ldrb	r3, [r7, #14]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	73bb      	strb	r3, [r7, #14]
        crc ^= 0x107;
 8000e76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e7a:	f083 0307 	eor.w	r3, r3, #7
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	73bb      	strb	r3, [r7, #14]
 8000e82:	e002      	b.n	8000e8a <CRC8+0x3a>
      }
      else
        crc *= 2;
 8000e84:	7bbb      	ldrb	r3, [r7, #14]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	73bb      	strb	r3, [r7, #14]

      if((*ptr & i) != 0)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	781a      	ldrb	r2, [r3, #0]
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	4013      	ands	r3, r2
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d005      	beq.n	8000ea4 <CRC8+0x54>
        crc ^= 0x107;
 8000e98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e9c:	f083 0307 	eor.w	r3, r3, #7
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	73bb      	strb	r3, [r7, #14]
    for (i = 0x80; i != 0; i /= 2)
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	085b      	lsrs	r3, r3, #1
 8000ea8:	73fb      	strb	r3, [r7, #15]
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1db      	bne.n	8000e68 <CRC8+0x18>
    }
    ptr++;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	607b      	str	r3, [r7, #4]
  while(len-- != 0)
 8000eb6:	78fb      	ldrb	r3, [r7, #3]
 8000eb8:	1e5a      	subs	r2, r3, #1
 8000eba:	70fa      	strb	r2, [r7, #3]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1d0      	bne.n	8000e62 <CRC8+0x12>
  }
  return (crc);
 8000ec0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <bq76952_write_sub_cmd>:

//-----------------------------------------------------------------------------------------------------------------------------
// READ/WRITE FUNCTIONS FOR DIRECT COMMANDS and SUBCOMMANDS

static int16_t bq76952_write_sub_cmd(uint8_t subCmdRegAddr, uint16_t subCmd)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	460a      	mov	r2, r1
 8000eda:	71fb      	strb	r3, [r7, #7]
 8000edc:	4613      	mov	r3, r2
 8000ede:	80bb      	strh	r3, [r7, #4]
  //To write data to subcommand address register (0x3E)
  uint8_t subCmdRegAddrWRITE = subCmdRegAddr | 0x80u; //Changes the leftmost bit to 1 since W Operation
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ee6:	76fb      	strb	r3, [r7, #27]
  int16_t ret_val = SYS_ERR;
 8000ee8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eec:	83fb      	strh	r3, [r7, #30]
  uint8_t pTxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 8000eee:	4b38      	ldr	r3, [pc, #224]	; (8000fd0 <bq76952_write_sub_cmd+0x100>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	823b      	strh	r3, [r7, #16]
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	74bb      	strb	r3, [r7, #18]
  uint8_t pRxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 8000ef8:	4b35      	ldr	r3, [pc, #212]	; (8000fd0 <bq76952_write_sub_cmd+0x100>)
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	81bb      	strh	r3, [r7, #12]
 8000efe:	2300      	movs	r3, #0
 8000f00:	73bb      	strb	r3, [r7, #14]
  uint8_t retry_cnt = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	777b      	strb	r3, [r7, #29]
  uint16_t TxByte, RxByte = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	833b      	strh	r3, [r7, #24]
  for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	773b      	strb	r3, [r7, #28]
 8000f0e:	e055      	b.n	8000fbc <bq76952_write_sub_cmd+0xec>
  {
    pTxData[0] = subCmdRegAddrWRITE + i;
 8000f10:	7efa      	ldrb	r2, [r7, #27]
 8000f12:	7f3b      	ldrb	r3, [r7, #28]
 8000f14:	4413      	add	r3, r2
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	743b      	strb	r3, [r7, #16]
    pTxData[1] = subCmd >> (i * 8); //To retrieve the lower byte and then the higher byte subsequently
 8000f1a:	88ba      	ldrh	r2, [r7, #4]
 8000f1c:	7f3b      	ldrb	r3, [r7, #28]
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	fa42 f303 	asr.w	r3, r2, r3
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	747b      	strb	r3, [r7, #17]
    pTxData[2] = CRC8(pTxData, SUB_CMD_LEN);
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff8e 	bl	8000e50 <CRC8>
 8000f34:	4603      	mov	r3, r0
 8000f36:	74bb      	strb	r3, [r7, #18]
    TxByte = pTxData[0] | (pTxData[1] << 8);
 8000f38:	7c3b      	ldrb	r3, [r7, #16]
 8000f3a:	b21a      	sxth	r2, r3
 8000f3c:	7c7b      	ldrb	r3, [r7, #17]
 8000f3e:	021b      	lsls	r3, r3, #8
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	82fb      	strh	r3, [r7, #22]
    do
    {
<<<<<<< HEAD
      HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);                                          // Enable CS
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2110      	movs	r1, #16
 8000f4c:	4821      	ldr	r0, [pc, #132]	; (8000fd4 <bq76952_write_sub_cmd+0x104>)
 8000f4e:	f004 fa93 	bl	8005478 <HAL_GPIO_WritePin>
      HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, SPI_SUB_CMD_FRAME_LEN, SPI_WR_TIMEOUT_MS); // Rx & Tx simultaneously (Full Duplex)
 8000f52:	f107 020c 	add.w	r2, r7, #12
 8000f56:	f107 0110 	add.w	r1, r7, #16
 8000f5a:	230a      	movs	r3, #10
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2303      	movs	r3, #3
 8000f60:	481d      	ldr	r0, [pc, #116]	; (8000fd8 <bq76952_write_sub_cmd+0x108>)
 8000f62:	f007 fb11 	bl	8008588 <HAL_SPI_TransmitReceive>
      HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);                                          // Disable CS
 8000f66:	2201      	movs	r2, #1
 8000f68:	2110      	movs	r1, #16
 8000f6a:	481a      	ldr	r0, [pc, #104]	; (8000fd4 <bq76952_write_sub_cmd+0x104>)
 8000f6c:	f004 fa84 	bl	8005478 <HAL_GPIO_WritePin>
      HAL_Delay(2);
 8000f70:	2002      	movs	r0, #2
 8000f72:	f001 facd 	bl	8002510 <HAL_Delay>
      RxByte = pRxData[0] | (pRxData[1] << 8);
 8000f76:	7b3b      	ldrb	r3, [r7, #12]
 8000f78:	b21a      	sxth	r2, r3
 8000f7a:	7b7b      	ldrb	r3, [r7, #13]
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	b21b      	sxth	r3, r3
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b21b      	sxth	r3, r3
 8000f84:	833b      	strh	r3, [r7, #24]
      retry_cnt++;
 8000f86:	7f7b      	ldrb	r3, [r7, #29]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	777b      	strb	r3, [r7, #29]
    } while((TxByte != RxByte) && (retry_cnt < 4));
 8000f8c:	8afa      	ldrh	r2, [r7, #22]
 8000f8e:	8b3b      	ldrh	r3, [r7, #24]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d002      	beq.n	8000f9a <bq76952_write_sub_cmd+0xca>
 8000f94:	7f7b      	ldrb	r3, [r7, #29]
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d9d6      	bls.n	8000f48 <bq76952_write_sub_cmd+0x78>
    if((TxByte == RxByte) && (retry_cnt < 4))
 8000f9a:	8afa      	ldrh	r2, [r7, #22]
 8000f9c:	8b3b      	ldrh	r3, [r7, #24]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d108      	bne.n	8000fb4 <bq76952_write_sub_cmd+0xe4>
 8000fa2:	7f7b      	ldrb	r3, [r7, #29]
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d805      	bhi.n	8000fb4 <bq76952_write_sub_cmd+0xe4>
    {
      ret_val = SYS_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	83fb      	strh	r3, [r7, #30]
  for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8000fac:	7f3b      	ldrb	r3, [r7, #28]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	773b      	strb	r3, [r7, #28]
 8000fb2:	e003      	b.n	8000fbc <bq76952_write_sub_cmd+0xec>
    }
    else
    {
      ret_val = SYS_ERR;
 8000fb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fb8:	83fb      	strh	r3, [r7, #30]
      break;
 8000fba:	e002      	b.n	8000fc2 <bq76952_write_sub_cmd+0xf2>
  for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8000fbc:	7f3b      	ldrb	r3, [r7, #28]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d9a6      	bls.n	8000f10 <bq76952_write_sub_cmd+0x40>
    }
  }
  return ret_val;
 8000fc2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3720      	adds	r7, #32
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	0800bf34 	.word	0x0800bf34
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	20000604 	.word	0x20000604
=======
        if(pdata == NULL)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d01c      	beq.n	8000eba <bq76952_write_to_register+0x56>
        {
            break;
        }
        for(uint8_t i = 0; i < len; i++)
 8000e80:	2300      	movs	r3, #0
 8000e82:	737b      	strb	r3, [r7, #13]
 8000e84:	e010      	b.n	8000ea8 <bq76952_write_to_register+0x44>
        {
            if(SYS_OK != bq76952_write_sub_cmd(reg_address+i, pdata[i]))
 8000e86:	79fa      	ldrb	r2, [r7, #7]
 8000e88:	7b7b      	ldrb	r3, [r7, #13]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	b2d8      	uxtb	r0, r3
 8000e8e:	7b7b      	ldrb	r3, [r7, #13]
 8000e90:	683a      	ldr	r2, [r7, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	4619      	mov	r1, r3
 8000e98:	f000 f816 	bl	8000ec8 <bq76952_write_sub_cmd>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d107      	bne.n	8000eb2 <bq76952_write_to_register+0x4e>
        for(uint8_t i = 0; i < len; i++)
 8000ea2:	7b7b      	ldrb	r3, [r7, #13]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	737b      	strb	r3, [r7, #13]
 8000ea8:	7b7a      	ldrb	r2, [r7, #13]
 8000eaa:	79bb      	ldrb	r3, [r7, #6]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d3ea      	bcc.n	8000e86 <bq76952_write_to_register+0x22>
 8000eb0:	e000      	b.n	8000eb4 <bq76952_write_to_register+0x50>
            {
                break;
 8000eb2:	bf00      	nop
            }
        }
        ret_val = SYS_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	81fb      	strh	r3, [r7, #14]
 8000eb8:	e000      	b.n	8000ebc <bq76952_write_to_register+0x58>
            break;
 8000eba:	bf00      	nop
    }while(false);
return ret_val;
 8000ebc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <bq76952_write_sub_cmd>:

static int16_t bq76952_write_sub_cmd(uint8_t subCmdRegAddr, uint8_t subCmd)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	4603      	mov	r3, r0
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	71bb      	strb	r3, [r7, #6]
    int16_t ret_val = SYS_ERR;
 8000ed8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000edc:	82fb      	strh	r3, [r7, #22]
    uint8_t pTxData[SPI_SUB_CMD_FRAME_LEN] = {0};
 8000ede:	4b34      	ldr	r3, [pc, #208]	; (8000fb0 <bq76952_write_sub_cmd+0xe8>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	81bb      	strh	r3, [r7, #12]
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73bb      	strb	r3, [r7, #14]
    uint8_t pRxData[SPI_SUB_CMD_FRAME_LEN] = {0};
 8000ee8:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <bq76952_write_sub_cmd+0xe8>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	813b      	strh	r3, [r7, #8]
 8000eee:	2300      	movs	r3, #0
 8000ef0:	72bb      	strb	r3, [r7, #10]
    uint8_t retry_cnt = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	757b      	strb	r3, [r7, #21]
    uint16_t TxByte, RxByte;
    for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	753b      	strb	r3, [r7, #20]
 8000efa:	e050      	b.n	8000f9e <bq76952_write_sub_cmd+0xd6>
    {
        pTxData[0] = subCmdRegAddr + i;
 8000efc:	79fa      	ldrb	r2, [r7, #7]
 8000efe:	7d3b      	ldrb	r3, [r7, #20]
 8000f00:	4413      	add	r3, r2
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	733b      	strb	r3, [r7, #12]
        pTxData[1] = subCmd;
 8000f06:	79bb      	ldrb	r3, [r7, #6]
 8000f08:	737b      	strb	r3, [r7, #13]
        pTxData[2] = get_crc8(pTxData, SUB_CMD_LEN);
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	2102      	movs	r1, #2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff6f 	bl	8000df4 <get_crc8>
 8000f16:	4603      	mov	r3, r0
 8000f18:	73bb      	strb	r3, [r7, #14]
        TxByte = pTxData[0] | (pTxData[1] << 8);
 8000f1a:	7b3b      	ldrb	r3, [r7, #12]
 8000f1c:	b21a      	sxth	r2, r3
 8000f1e:	7b7b      	ldrb	r3, [r7, #13]
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	b21b      	sxth	r3, r3
 8000f24:	4313      	orrs	r3, r2
 8000f26:	b21b      	sxth	r3, r3
 8000f28:	827b      	strh	r3, [r7, #18]
        do
        {
            HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);                                          // Enable CS
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2110      	movs	r1, #16
 8000f2e:	4821      	ldr	r0, [pc, #132]	; (8000fb4 <bq76952_write_sub_cmd+0xec>)
 8000f30:	f004 fb20 	bl	8005574 <HAL_GPIO_WritePin>
            HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, SPI_SUB_CMD_FRAME_LEN, SPI_WR_TIMEOUT_MS); // Rx & Tx simultaneously (Full Duplex)
 8000f34:	f107 0208 	add.w	r2, r7, #8
 8000f38:	f107 010c 	add.w	r1, r7, #12
 8000f3c:	230a      	movs	r3, #10
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2303      	movs	r3, #3
 8000f42:	481d      	ldr	r0, [pc, #116]	; (8000fb8 <bq76952_write_sub_cmd+0xf0>)
 8000f44:	f007 fb9e 	bl	8008684 <HAL_SPI_TransmitReceive>
            HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);                                          // Disable CS
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2110      	movs	r1, #16
 8000f4c:	4819      	ldr	r0, [pc, #100]	; (8000fb4 <bq76952_write_sub_cmd+0xec>)
 8000f4e:	f004 fb11 	bl	8005574 <HAL_GPIO_WritePin>
            HAL_Delay(2);
 8000f52:	2002      	movs	r0, #2
 8000f54:	f001 fb5a 	bl	800260c <HAL_Delay>
            RxByte = pRxData[0] | (pRxData[1] << 8);
 8000f58:	7a3b      	ldrb	r3, [r7, #8]
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	7a7b      	ldrb	r3, [r7, #9]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	4313      	orrs	r3, r2
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	823b      	strh	r3, [r7, #16]
            retry_cnt++;
 8000f68:	7d7b      	ldrb	r3, [r7, #21]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	757b      	strb	r3, [r7, #21]
        } while ((TxByte != RxByte) && (retry_cnt > 3));
 8000f6e:	8a7a      	ldrh	r2, [r7, #18]
 8000f70:	8a3b      	ldrh	r3, [r7, #16]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d002      	beq.n	8000f7c <bq76952_write_sub_cmd+0xb4>
 8000f76:	7d7b      	ldrb	r3, [r7, #21]
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d8d6      	bhi.n	8000f2a <bq76952_write_sub_cmd+0x62>
        if ((TxByte == RxByte) && (retry_cnt < 4))
 8000f7c:	8a7a      	ldrh	r2, [r7, #18]
 8000f7e:	8a3b      	ldrh	r3, [r7, #16]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d108      	bne.n	8000f96 <bq76952_write_sub_cmd+0xce>
 8000f84:	7d7b      	ldrb	r3, [r7, #21]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d805      	bhi.n	8000f96 <bq76952_write_sub_cmd+0xce>
        {
            ret_val = SYS_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	82fb      	strh	r3, [r7, #22]
    for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8000f8e:	7d3b      	ldrb	r3, [r7, #20]
 8000f90:	3301      	adds	r3, #1
 8000f92:	753b      	strb	r3, [r7, #20]
 8000f94:	e003      	b.n	8000f9e <bq76952_write_sub_cmd+0xd6>
        }
        else
        {
            ret_val = SYS_ERR;
 8000f96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f9a:	82fb      	strh	r3, [r7, #22]
            break;
 8000f9c:	e002      	b.n	8000fa4 <bq76952_write_sub_cmd+0xdc>
    for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8000f9e:	7d3b      	ldrb	r3, [r7, #20]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d9ab      	bls.n	8000efc <bq76952_write_sub_cmd+0x34>
        }
    }
    return ret_val;
 8000fa4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	0800c034 	.word	0x0800c034
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	20000608 	.word	0x20000608

08000fbc <bq76952_read_sub_cmd_data_buffer>:

static int16_t bq76952_read_sub_cmd_data_buffer(uint8_t subCmdRegAddr, uint8_t *p_data, uint8_t len)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	71bb      	strb	r3, [r7, #6]
    int16_t ret_val = SYS_ERR;
 8000fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fd0:	82fb      	strh	r3, [r7, #22]
    do
    {
        if ((len > SUB_CMD_DATA_BUFF_LEN_MAX) || (len == 0))
 8000fd2:	79bb      	ldrb	r3, [r7, #6]
 8000fd4:	2b20      	cmp	r3, #32
 8000fd6:	d866      	bhi.n	80010a6 <bq76952_read_sub_cmd_data_buffer+0xea>
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d063      	beq.n	80010a6 <bq76952_read_sub_cmd_data_buffer+0xea>
        {
            break;
        }
        if (p_data == NULL)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d05f      	beq.n	80010a4 <bq76952_read_sub_cmd_data_buffer+0xe8>
        {
            break;
        }
        uint8_t pTxData[SPI_SUB_CMD_FRAME_LEN] = {0};
 8000fe4:	4b33      	ldr	r3, [pc, #204]	; (80010b4 <bq76952_read_sub_cmd_data_buffer+0xf8>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	81bb      	strh	r3, [r7, #12]
 8000fea:	2300      	movs	r3, #0
 8000fec:	73bb      	strb	r3, [r7, #14]
        uint8_t pRxData[SPI_SUB_CMD_FRAME_LEN] = {0};
 8000fee:	4b31      	ldr	r3, [pc, #196]	; (80010b4 <bq76952_read_sub_cmd_data_buffer+0xf8>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	813b      	strh	r3, [r7, #8]
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	72bb      	strb	r3, [r7, #10]
        uint8_t retry_cnt = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	757b      	strb	r3, [r7, #21]
        uint8_t TxByte, RxByte;
        for (uint8_t i = 0; i > len; i++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	753b      	strb	r3, [r7, #20]
 8001000:	e04b      	b.n	800109a <bq76952_read_sub_cmd_data_buffer+0xde>
        {
            pTxData[0] = subCmdRegAddr + i;
 8001002:	79fa      	ldrb	r2, [r7, #7]
 8001004:	7d3b      	ldrb	r3, [r7, #20]
 8001006:	4413      	add	r3, r2
 8001008:	b2db      	uxtb	r3, r3
 800100a:	733b      	strb	r3, [r7, #12]
            pTxData[1] = 0xFF;
 800100c:	23ff      	movs	r3, #255	; 0xff
 800100e:	737b      	strb	r3, [r7, #13]
            pTxData[2] = get_crc8(pTxData, SUB_CMD_LEN);
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	2102      	movs	r1, #2
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff feec 	bl	8000df4 <get_crc8>
 800101c:	4603      	mov	r3, r0
 800101e:	73bb      	strb	r3, [r7, #14]
            TxByte = pTxData[0];
 8001020:	7b3b      	ldrb	r3, [r7, #12]
 8001022:	74fb      	strb	r3, [r7, #19]
            retry_cnt = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	757b      	strb	r3, [r7, #21]
            do
            {
                HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);                                          // Enable CS
 8001028:	2200      	movs	r2, #0
 800102a:	2110      	movs	r1, #16
 800102c:	4822      	ldr	r0, [pc, #136]	; (80010b8 <bq76952_read_sub_cmd_data_buffer+0xfc>)
 800102e:	f004 faa1 	bl	8005574 <HAL_GPIO_WritePin>
                HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, SPI_SUB_CMD_FRAME_LEN, SPI_WR_TIMEOUT_MS); // Rx & Tx simultaneously (Full Duplex)
 8001032:	f107 0208 	add.w	r2, r7, #8
 8001036:	f107 010c 	add.w	r1, r7, #12
 800103a:	230a      	movs	r3, #10
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2303      	movs	r3, #3
 8001040:	481e      	ldr	r0, [pc, #120]	; (80010bc <bq76952_read_sub_cmd_data_buffer+0x100>)
 8001042:	f007 fb1f 	bl	8008684 <HAL_SPI_TransmitReceive>
                HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);                                          // Disable CS
 8001046:	2201      	movs	r2, #1
 8001048:	2110      	movs	r1, #16
 800104a:	481b      	ldr	r0, [pc, #108]	; (80010b8 <bq76952_read_sub_cmd_data_buffer+0xfc>)
 800104c:	f004 fa92 	bl	8005574 <HAL_GPIO_WritePin>
                HAL_Delay(2);
 8001050:	2002      	movs	r0, #2
 8001052:	f001 fadb 	bl	800260c <HAL_Delay>
                RxByte = pRxData[0];
 8001056:	7a3b      	ldrb	r3, [r7, #8]
 8001058:	74bb      	strb	r3, [r7, #18]
                retry_cnt++;
 800105a:	7d7b      	ldrb	r3, [r7, #21]
 800105c:	3301      	adds	r3, #1
 800105e:	757b      	strb	r3, [r7, #21]
            } while ((TxByte != RxByte) && (retry_cnt > 3));
 8001060:	7cfa      	ldrb	r2, [r7, #19]
 8001062:	7cbb      	ldrb	r3, [r7, #18]
 8001064:	429a      	cmp	r2, r3
 8001066:	d002      	beq.n	800106e <bq76952_read_sub_cmd_data_buffer+0xb2>
 8001068:	7d7b      	ldrb	r3, [r7, #21]
 800106a:	2b03      	cmp	r3, #3
 800106c:	d8dc      	bhi.n	8001028 <bq76952_read_sub_cmd_data_buffer+0x6c>
            if ((TxByte == RxByte) && (retry_cnt < 4))
 800106e:	7cfa      	ldrb	r2, [r7, #19]
 8001070:	7cbb      	ldrb	r3, [r7, #18]
 8001072:	429a      	cmp	r2, r3
 8001074:	d10d      	bne.n	8001092 <bq76952_read_sub_cmd_data_buffer+0xd6>
 8001076:	7d7b      	ldrb	r3, [r7, #21]
 8001078:	2b03      	cmp	r3, #3
 800107a:	d80a      	bhi.n	8001092 <bq76952_read_sub_cmd_data_buffer+0xd6>
            {
                p_data[i] = RxByte;
 800107c:	7d3b      	ldrb	r3, [r7, #20]
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	4413      	add	r3, r2
 8001082:	7cba      	ldrb	r2, [r7, #18]
 8001084:	701a      	strb	r2, [r3, #0]
                ret_val = SYS_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	82fb      	strh	r3, [r7, #22]
        for (uint8_t i = 0; i > len; i++)
 800108a:	7d3b      	ldrb	r3, [r7, #20]
 800108c:	3301      	adds	r3, #1
 800108e:	753b      	strb	r3, [r7, #20]
 8001090:	e003      	b.n	800109a <bq76952_read_sub_cmd_data_buffer+0xde>
            }
            else
            {
                ret_val = SYS_ERR;
 8001092:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001096:	82fb      	strh	r3, [r7, #22]
                break;
 8001098:	e005      	b.n	80010a6 <bq76952_read_sub_cmd_data_buffer+0xea>
        for (uint8_t i = 0; i > len; i++)
 800109a:	7d3a      	ldrb	r2, [r7, #20]
 800109c:	79bb      	ldrb	r3, [r7, #6]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d8af      	bhi.n	8001002 <bq76952_read_sub_cmd_data_buffer+0x46>
 80010a2:	e000      	b.n	80010a6 <bq76952_read_sub_cmd_data_buffer+0xea>
            break;
 80010a4:	bf00      	nop
            }
        }
    } while (false);
    return ret_val;
 80010a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	0800c034 	.word	0x0800c034
 80010b8:	40020800 	.word	0x40020800
 80010bc:	20000608 	.word	0x20000608
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

08000fdc <bq76952_read_sub_cmd_data_buffer>:

static int16_t bq76952_read_sub_cmd_data_buffer(uint8_t subCmdRegAddr, uint16_t *p_data, uint8_t len)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	71bb      	strb	r3, [r7, #6]
  //To read data from the Subcommand Buffer register(0x40)
  uint8_t RX_DATA[READ_DIR_CMD_BUFF_LEN] = {0};  //To store the initial data from the Buffer
 8000fec:	2300      	movs	r3, #0
 8000fee:	823b      	strh	r3, [r7, #16]
  int16_t ret_val = SYS_ERR;
 8000ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ff4:	82bb      	strh	r3, [r7, #20]
  do
  {
    if((len > SUB_CMD_DATA_BUFF_LEN_MAX) || (len == 0))
 8000ff6:	79bb      	ldrb	r3, [r7, #6]
 8000ff8:	2b20      	cmp	r3, #32
 8000ffa:	d86a      	bhi.n	80010d2 <bq76952_read_sub_cmd_data_buffer+0xf6>
 8000ffc:	79bb      	ldrb	r3, [r7, #6]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d067      	beq.n	80010d2 <bq76952_read_sub_cmd_data_buffer+0xf6>
    {
      break;
    }
    if(p_data == NULL)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d063      	beq.n	80010d0 <bq76952_read_sub_cmd_data_buffer+0xf4>
    {
      break;
    }
    uint8_t pTxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 8001008:	4b35      	ldr	r3, [pc, #212]	; (80010e0 <bq76952_read_sub_cmd_data_buffer+0x104>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	81bb      	strh	r3, [r7, #12]
 800100e:	2300      	movs	r3, #0
 8001010:	73bb      	strb	r3, [r7, #14]
    uint8_t pRxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 8001012:	4b33      	ldr	r3, [pc, #204]	; (80010e0 <bq76952_read_sub_cmd_data_buffer+0x104>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	813b      	strh	r3, [r7, #8]
 8001018:	2300      	movs	r3, #0
 800101a:	72bb      	strb	r3, [r7, #10]
    uint8_t retry_cnt = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	75fb      	strb	r3, [r7, #23]
    uint8_t TxByte, RxByte;
    for (uint8_t i = 0; i < len; i++)
 8001020:	2300      	movs	r3, #0
 8001022:	75bb      	strb	r3, [r7, #22]
 8001024:	e04a      	b.n	80010bc <bq76952_read_sub_cmd_data_buffer+0xe0>
    {
      pTxData[0] = subCmdRegAddr + i;
 8001026:	79fa      	ldrb	r2, [r7, #7]
 8001028:	7dbb      	ldrb	r3, [r7, #22]
 800102a:	4413      	add	r3, r2
 800102c:	b2db      	uxtb	r3, r3
 800102e:	733b      	strb	r3, [r7, #12]
      pTxData[1] = 0xFF;
 8001030:	23ff      	movs	r3, #255	; 0xff
 8001032:	737b      	strb	r3, [r7, #13]
      pTxData[2] = CRC8(pTxData, SUB_CMD_LEN);
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	2102      	movs	r1, #2
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff08 	bl	8000e50 <CRC8>
 8001040:	4603      	mov	r3, r0
 8001042:	73bb      	strb	r3, [r7, #14]
      TxByte = pTxData[0];
 8001044:	7b3b      	ldrb	r3, [r7, #12]
 8001046:	74fb      	strb	r3, [r7, #19]
      retry_cnt = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	75fb      	strb	r3, [r7, #23]
      do
      {
        HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);                                          // Enable CS
 800104c:	2200      	movs	r2, #0
 800104e:	2110      	movs	r1, #16
 8001050:	4824      	ldr	r0, [pc, #144]	; (80010e4 <bq76952_read_sub_cmd_data_buffer+0x108>)
 8001052:	f004 fa11 	bl	8005478 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, SPI_SUB_CMD_FRAME_LEN, SPI_WR_TIMEOUT_MS); // Rx & Tx simultaneously (Full Duplex)
 8001056:	f107 0208 	add.w	r2, r7, #8
 800105a:	f107 010c 	add.w	r1, r7, #12
 800105e:	230a      	movs	r3, #10
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2303      	movs	r3, #3
 8001064:	4820      	ldr	r0, [pc, #128]	; (80010e8 <bq76952_read_sub_cmd_data_buffer+0x10c>)
 8001066:	f007 fa8f 	bl	8008588 <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);                                          // Disable CS
 800106a:	2201      	movs	r2, #1
 800106c:	2110      	movs	r1, #16
 800106e:	481d      	ldr	r0, [pc, #116]	; (80010e4 <bq76952_read_sub_cmd_data_buffer+0x108>)
 8001070:	f004 fa02 	bl	8005478 <HAL_GPIO_WritePin>
        HAL_Delay(2);
 8001074:	2002      	movs	r0, #2
 8001076:	f001 fa4b 	bl	8002510 <HAL_Delay>
        RxByte = pRxData[0];
 800107a:	7a3b      	ldrb	r3, [r7, #8]
 800107c:	74bb      	strb	r3, [r7, #18]
        retry_cnt++;
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	3301      	adds	r3, #1
 8001082:	75fb      	strb	r3, [r7, #23]
      } while((TxByte != RxByte) && (retry_cnt < 3));
 8001084:	7cfa      	ldrb	r2, [r7, #19]
 8001086:	7cbb      	ldrb	r3, [r7, #18]
 8001088:	429a      	cmp	r2, r3
 800108a:	d002      	beq.n	8001092 <bq76952_read_sub_cmd_data_buffer+0xb6>
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d9dc      	bls.n	800104c <bq76952_read_sub_cmd_data_buffer+0x70>
      if((TxByte == RxByte) && (retry_cnt < 4))
 8001092:	7cfa      	ldrb	r2, [r7, #19]
 8001094:	7cbb      	ldrb	r3, [r7, #18]
 8001096:	429a      	cmp	r2, r3
 8001098:	d10c      	bne.n	80010b4 <bq76952_read_sub_cmd_data_buffer+0xd8>
 800109a:	7dfb      	ldrb	r3, [r7, #23]
 800109c:	2b03      	cmp	r3, #3
 800109e:	d809      	bhi.n	80010b4 <bq76952_read_sub_cmd_data_buffer+0xd8>
      {
        RX_DATA[i] = pRxData[1];
 80010a0:	7dbb      	ldrb	r3, [r7, #22]
 80010a2:	7a7a      	ldrb	r2, [r7, #9]
 80010a4:	3318      	adds	r3, #24
 80010a6:	443b      	add	r3, r7
 80010a8:	f803 2c08 	strb.w	r2, [r3, #-8]
    for (uint8_t i = 0; i < len; i++)
 80010ac:	7dbb      	ldrb	r3, [r7, #22]
 80010ae:	3301      	adds	r3, #1
 80010b0:	75bb      	strb	r3, [r7, #22]
 80010b2:	e003      	b.n	80010bc <bq76952_read_sub_cmd_data_buffer+0xe0>
      }
      else
      {
        ret_val = SYS_ERR;
 80010b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b8:	82bb      	strh	r3, [r7, #20]
        break;
 80010ba:	e003      	b.n	80010c4 <bq76952_read_sub_cmd_data_buffer+0xe8>
    for (uint8_t i = 0; i < len; i++)
 80010bc:	7dba      	ldrb	r2, [r7, #22]
 80010be:	79bb      	ldrb	r3, [r7, #6]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d3b0      	bcc.n	8001026 <bq76952_read_sub_cmd_data_buffer+0x4a>
      }
    }
    p_data= (RX_DATA[1] << 8) | RX_DATA[0];
 80010c4:	7c7b      	ldrb	r3, [r7, #17]
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	7c3a      	ldrb	r2, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	e000      	b.n	80010d2 <bq76952_read_sub_cmd_data_buffer+0xf6>
      break;
 80010d0:	bf00      	nop
  } while(false);
  return p_data;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b21b      	sxth	r3, r3
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	0800bf34 	.word	0x0800bf34
 80010e4:	40020800 	.word	0x40020800
 80010e8:	20000604 	.word	0x20000604

080010ec <app_afe_init>:

TS_FETcotrol_s bq67952_fetcontrol;
TS_AFEdata_s bq67952_afeInfo;

int16_t app_afe_init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 80010f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010f6:	80fb      	strh	r3, [r7, #6]
	do
	{
		HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);
 80010f8:	2201      	movs	r2, #1
 80010fa:	2110      	movs	r1, #16
 80010fc:	4806      	ldr	r0, [pc, #24]	; (8001118 <app_afe_init+0x2c>)
 80010fe:	f004 f9bb 	bl	8005478 <HAL_GPIO_WritePin>
	    bq76952_init();
 8001102:	f7ff fdef 	bl	8000ce4 <bq76952_init>
		ret_val = SYS_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	80fb      	strh	r3, [r7, #6]
	}while(false);

	return ret_val;
 800110a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40020800 	.word	0x40020800

0800111c <app_gauge_init>:

	return ret_val;
}

int16_t app_gauge_init(void)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
    int16_t ret_val = SYS_ERR;
 8001122:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001126:	80fb      	strh	r3, [r7, #6]

    // Config block reads
    block_read_cfg[eAlgoFet_BLOCK0].Addr = 0x02u;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <app_gauge_init+0x2c>)
 800112a:	2202      	movs	r2, #2
 800112c:	701a      	strb	r2, [r3, #0]
    block_read_cfg[eAlgoFet_BLOCK0].Len = 18u;
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <app_gauge_init+0x2c>)
 8001130:	2212      	movs	r2, #18
 8001132:	705a      	strb	r2, [r3, #1]

    ret_val = SYS_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	80fb      	strh	r3, [r7, #6]

    return ret_val;
 8001138:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	2000009c 	.word	0x2000009c

0800114c <app_sys_init>:
#include "spi.h"
#include "app_afe.h"
#include "app_fuel_gauge.h"

int16_t app_sys_init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8001152:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001156:	80fb      	strh	r3, [r7, #6]
	do
	{
		// TODO:
		// IO Init
		(void) MX_GPIO_Init();
<<<<<<< HEAD
 8001158:	f000 fb8e 	bl	8001878 <MX_GPIO_Init>
		// I2C Init
		(void) MX_I2C1_Init();
 800115c:	f000 fc68 	bl	8001a30 <MX_I2C1_Init>
		// SPI Init
		(void) MX_SPI1_Init();
 8001160:	f000 fdf6 	bl	8001d50 <MX_SPI1_Init>
		// CAN Init
		(void) MX_CAN1_Init();
 8001164:	f000 f940 	bl	80013e8 <MX_CAN1_Init>
		// PWM Init
		(void) MX_DMA_Init();
 8001168:	f000 fa74 	bl	8001654 <MX_DMA_Init>
=======
 800111c:	f000 fc2a 	bl	8001974 <MX_GPIO_Init>
		// I2C Init
		(void) MX_I2C1_Init();
 8001120:	f000 fd04 	bl	8001b2c <MX_I2C1_Init>
		// SPI Init
		(void) MX_SPI1_Init();
 8001124:	f000 fe92 	bl	8001e4c <MX_SPI1_Init>
		// CAN Init
		(void) MX_CAN1_Init();
 8001128:	f000 f9be 	bl	80014a8 <MX_CAN1_Init>
		// PWM Init
		(void) MX_DMA_Init();
 800112c:	f000 fb10 	bl	8001750 <MX_DMA_Init>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		// ADC Init
		(void) MX_ADC1_Init();
 800116c:	f000 f824 	bl	80011b8 <MX_ADC1_Init>
		// huart Init
		(void) MX_USART1_UART_Init();
<<<<<<< HEAD
 8001170:	f001 f86e 	bl	8002250 <MX_USART1_UART_Init>
=======
 8001134:	f001 f90a 	bl	800234c <MX_USART1_UART_Init>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	}while(false);

	return ret_val;
 8001174:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <app_sys_peripheral_init>:

int16_t app_sys_peripheral_init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8001186:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800118a:	80fb      	strh	r3, [r7, #6]
	do
	{
		// TODO:
		// AFE Init
		if(SYS_OK != app_afe_init())
 800118c:	f7ff ffae 	bl	80010ec <app_afe_init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d107      	bne.n	80011a6 <app_sys_peripheral_init+0x26>
		{
			break;
		}
		// Fuel Gauge Init
		if(SYS_OK != app_gauge_init())
 8001196:	f7ff ffc1 	bl	800111c <app_gauge_init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d104      	bne.n	80011aa <app_sys_peripheral_init+0x2a>
//		{
//		    break;
//		}
		// CAN NW Init

		ret_val = SYS_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	80fb      	strh	r3, [r7, #6]
 80011a4:	e002      	b.n	80011ac <app_sys_peripheral_init+0x2c>
			break;
 80011a6:	bf00      	nop
 80011a8:	e000      	b.n	80011ac <app_sys_peripheral_init+0x2c>
			break;
 80011aa:	bf00      	nop
	}while(false);

	return ret_val;
 80011ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011be:	463b      	mov	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <MX_ADC1_Init+0x98>)
 80011cc:	4a21      	ldr	r2, [pc, #132]	; (8001254 <MX_ADC1_Init+0x9c>)
 80011ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80011d0:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <MX_ADC1_Init+0x98>)
 80011d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <MX_ADC1_Init+0x98>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <MX_ADC1_Init+0x98>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <MX_ADC1_Init+0x98>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <MX_ADC1_Init+0x98>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <MX_ADC1_Init+0x98>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_ADC1_Init+0x98>)
 80011fa:	4a17      	ldr	r2, [pc, #92]	; (8001258 <MX_ADC1_Init+0xa0>)
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_ADC1_Init+0x98>)
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <MX_ADC1_Init+0x98>)
 8001206:	2201      	movs	r2, #1
 8001208:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_ADC1_Init+0x98>)
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001212:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_ADC1_Init+0x98>)
 8001214:	2201      	movs	r2, #1
 8001216:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
<<<<<<< HEAD
 8001218:	480d      	ldr	r0, [pc, #52]	; (8001250 <MX_ADC1_Init+0x98>)
 800121a:	f001 f99d 	bl	8002558 <HAL_ADC_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001224:	f000 fd84 	bl	8001d30 <Error_Handler>
=======
 80011dc:	480d      	ldr	r0, [pc, #52]	; (8001214 <MX_ADC1_Init+0x98>)
 80011de:	f001 fa39 	bl	8002654 <HAL_ADC_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011e8:	f000 fe20 	bl	8001e2c <Error_Handler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001228:	230a      	movs	r3, #10
 800122a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800122c:	2301      	movs	r3, #1
 800122e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
<<<<<<< HEAD
 8001234:	463b      	mov	r3, r7
 8001236:	4619      	mov	r1, r3
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_ADC1_Init+0x98>)
 800123a:	f001 fd5b 	bl	8002cf4 <HAL_ADC_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001244:	f000 fd74 	bl	8001d30 <Error_Handler>
=======
 80011f8:	463b      	mov	r3, r7
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_ADC1_Init+0x98>)
 80011fe:	f001 fdf7 	bl	8002df0 <HAL_ADC_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001208:	f000 fe10 	bl	8001e2c <Error_Handler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200000a4 	.word	0x200000a4
 8001254:	40012000 	.word	0x40012000
 8001258:	0f000001 	.word	0x0f000001

0800125c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a32      	ldr	r2, [pc, #200]	; (8001344 <HAL_ADC_MspInit+0xe8>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d15e      	bne.n	800133c <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <HAL_ADC_MspInit+0xec>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a30      	ldr	r2, [pc, #192]	; (8001348 <HAL_ADC_MspInit+0xec>)
 8001288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b2e      	ldr	r3, [pc, #184]	; (8001348 <HAL_ADC_MspInit+0xec>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <HAL_ADC_MspInit+0xec>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a29      	ldr	r2, [pc, #164]	; (8001348 <HAL_ADC_MspInit+0xec>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <HAL_ADC_MspInit+0xec>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|TEMP2_IN_Pin|NTC_Pin;
 80012b6:	2307      	movs	r3, #7
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ba:	2303      	movs	r3, #3
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
<<<<<<< HEAD
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	4820      	ldr	r0, [pc, #128]	; (800134c <HAL_ADC_MspInit+0xf0>)
 80012ca:	f003 fdb1 	bl	8004e30 <HAL_GPIO_Init>
=======
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4820      	ldr	r0, [pc, #128]	; (8001310 <HAL_ADC_MspInit+0xf0>)
 800128e:	f003 fe4d 	bl	8004f2c <HAL_GPIO_Init>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80012ce:	4b20      	ldr	r3, [pc, #128]	; (8001350 <HAL_ADC_MspInit+0xf4>)
 80012d0:	4a20      	ldr	r2, [pc, #128]	; (8001354 <HAL_ADC_MspInit+0xf8>)
 80012d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <HAL_ADC_MspInit+0xf4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012da:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <HAL_ADC_MspInit+0xf4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <HAL_ADC_MspInit+0xf4>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <HAL_ADC_MspInit+0xf4>)
 80012e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_ADC_MspInit+0xf4>)
 80012f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <HAL_ADC_MspInit+0xf4>)
 80012f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <HAL_ADC_MspInit+0xf4>)
 8001300:	2200      	movs	r2, #0
 8001302:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_ADC_MspInit+0xf4>)
 8001306:	2200      	movs	r2, #0
 8001308:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_ADC_MspInit+0xf4>)
 800130c:	2200      	movs	r2, #0
 800130e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
<<<<<<< HEAD
 8001310:	480f      	ldr	r0, [pc, #60]	; (8001350 <HAL_ADC_MspInit+0xf4>)
 8001312:	f003 f907 	bl	8004524 <HAL_DMA_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800131c:	f000 fd08 	bl	8001d30 <Error_Handler>
=======
 80012d4:	480f      	ldr	r0, [pc, #60]	; (8001314 <HAL_ADC_MspInit+0xf4>)
 80012d6:	f003 f9a3 	bl	8004620 <HAL_DMA_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80012e0:	f000 fda4 	bl	8001e2c <Error_Handler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <HAL_ADC_MspInit+0xf4>)
 8001324:	639a      	str	r2, [r3, #56]	; 0x38
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <HAL_ADC_MspInit+0xf4>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
<<<<<<< HEAD
 800132c:	2200      	movs	r2, #0
 800132e:	2105      	movs	r1, #5
 8001330:	2012      	movs	r0, #18
 8001332:	f003 f8b3 	bl	800449c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001336:	2012      	movs	r0, #18
 8001338:	f003 f8dc 	bl	80044f4 <HAL_NVIC_EnableIRQ>
=======
 80012f0:	2200      	movs	r2, #0
 80012f2:	2105      	movs	r1, #5
 80012f4:	2012      	movs	r0, #18
 80012f6:	f003 f94f 	bl	8004598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80012fa:	2012      	movs	r0, #18
 80012fc:	f003 f978 	bl	80045f0 <HAL_NVIC_EnableIRQ>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800133c:	bf00      	nop
 800133e:	3728      	adds	r7, #40	; 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40012000 	.word	0x40012000
 8001348:	40023800 	.word	0x40023800
 800134c:	40020800 	.word	0x40020800
 8001350:	200000ec 	.word	0x200000ec
 8001354:	40026470 	.word	0x40026470

08001358 <testBenchTempCheck>:
}

/* USER CODE BEGIN 1 */

void testBenchTempCheck()
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
	//HAL_ADCEx_Calibration_Start(&hadc1);
	HAL_ADC_Start(&hadc1);
<<<<<<< HEAD
 800135e:	481a      	ldr	r0, [pc, #104]	; (80013c8 <testBenchTempCheck+0x70>)
 8001360:	f001 fa66 	bl	8002830 <HAL_ADC_Start>
=======
 8001326:	481a      	ldr	r0, [pc, #104]	; (8001390 <testBenchTempCheck+0x70>)
 8001328:	f001 fb00 	bl	800292c <HAL_ADC_Start>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	uint16_t val = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	81fb      	strh	r3, [r7, #14]
	char str;

	val = HAL_ADC_GetValue(&hadc1);
<<<<<<< HEAD
 8001368:	4817      	ldr	r0, [pc, #92]	; (80013c8 <testBenchTempCheck+0x70>)
 800136a:	f001 fc97 	bl	8002c9c <HAL_ADC_GetValue>
 800136e:	4603      	mov	r3, r0
 8001370:	81fb      	strh	r3, [r7, #14]
=======
 8001330:	4817      	ldr	r0, [pc, #92]	; (8001390 <testBenchTempCheck+0x70>)
 8001332:	f001 fd31 	bl	8002d98 <HAL_ADC_GetValue>
 8001336:	4603      	mov	r3, r0
 8001338:	81fb      	strh	r3, [r7, #14]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	float voltage = (float)val/4096*3.3;
 8001372:	89fb      	ldrh	r3, [r7, #14]
<<<<<<< HEAD
 8001374:	ee07 3a90 	vmov	s15, r3
 8001378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800137c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80013cc <testBenchTempCheck+0x74>
 8001380:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001384:	ee16 0a90 	vmov	r0, s13
 8001388:	f7ff fa20 	bl	80007cc <__aeabi_f2d>
 800138c:	a30c      	add	r3, pc, #48	; (adr r3, 80013c0 <testBenchTempCheck+0x68>)
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	f7fe ff8d 	bl	80002b0 <__aeabi_dmul>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f7ff fa6d 	bl	800087c <__aeabi_d2f>
 80013a2:	4603      	mov	r3, r0
 80013a4:	60bb      	str	r3, [r7, #8]
	sprintf (str, "%d", val);
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	89fb      	ldrh	r3, [r7, #14]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4908      	ldr	r1, [pc, #32]	; (80013d0 <testBenchTempCheck+0x78>)
 80013b0:	f00a fa46 	bl	800b840 <siprintf>
	//HAL_UART_Transmit(&huart, (uint8_t)val, 1, 50);
		}
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	f3af 8000 	nop.w
 80013c0:	66666666 	.word	0x66666666
 80013c4:	400a6666 	.word	0x400a6666
 80013c8:	200000a4 	.word	0x200000a4
 80013cc:	45800000 	.word	0x45800000
 80013d0:	0800bf38 	.word	0x0800bf38
=======
 8001374:	461a      	mov	r2, r3
 8001376:	4908      	ldr	r1, [pc, #32]	; (8001398 <testBenchTempCheck+0x78>)
 8001378:	f00a fae2 	bl	800b940 <siprintf>
	//HAL_UART_Transmit(&huart, (uint8_t)val, 1, 50);
		}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	f3af 8000 	nop.w
 8001388:	66666666 	.word	0x66666666
 800138c:	400a6666 	.word	0x400a6666
 8001390:	200000a0 	.word	0x200000a0
 8001394:	45800000 	.word	0x45800000
 8001398:	0800c038 	.word	0x0800c038
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

080013d4 <HAL_CAN_RxFifo0MsgPendingCallback>:

int count = 0;


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

<<<<<<< HEAD
080013e8 <MX_CAN1_Init>:
=======
080013b0 <rxHeaderDef>:

void rxHeaderDef()
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
	RxHeader.DLC = 8;
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <rxHeaderDef+0x2c>)
 80013b6:	2208      	movs	r2, #8
 80013b8:	611a      	str	r2, [r3, #16]
	RxHeader.ExtId = 0;
 80013ba:	4b08      	ldr	r3, [pc, #32]	; (80013dc <rxHeaderDef+0x2c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	605a      	str	r2, [r3, #4]
	RxHeader.IDE = CAN_ID_STD;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <rxHeaderDef+0x2c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_REMOTE;
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <rxHeaderDef+0x2c>)
 80013c8:	2202      	movs	r2, #2
 80013ca:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = 0x01;
 80013cc:	4b03      	ldr	r3, [pc, #12]	; (80013dc <rxHeaderDef+0x2c>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	601a      	str	r2, [r3, #0]
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	200001a4 	.word	0x200001a4

080013e0 <txHeaderDef>:

void txHeaderDef()
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
	TxHeader.DLC = 8;
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <txHeaderDef+0x34>)
 80013e6:	2208      	movs	r2, #8
 80013e8:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0;
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <txHeaderDef+0x34>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <txHeaderDef+0x34>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80013f6:	4b07      	ldr	r3, [pc, #28]	; (8001414 <txHeaderDef+0x34>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x0;
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <txHeaderDef+0x34>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <txHeaderDef+0x34>)
 8001404:	2200      	movs	r2, #0
 8001406:	751a      	strb	r2, [r3, #20]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	2000018c 	.word	0x2000018c

08001418 <filterDef>:

void filterDef(int toggle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001420:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <filterDef+0x88>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
	filterConfig.FilterActivation = ENABLE;
 8001426:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <filterDef+0x88>)
 8001428:	2201      	movs	r2, #1
 800142a:	621a      	str	r2, [r3, #32]
	filterConfig.FilterBank = 2;
 800142c:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <filterDef+0x88>)
 800142e:	2202      	movs	r2, #2
 8001430:	615a      	str	r2, [r3, #20]

	if(toggle == 0){
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d10f      	bne.n	8001458 <filterDef+0x40>
		filterConfig.FilterIdHigh = 0x0000;
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <filterDef+0x88>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
		filterConfig.FilterIdLow = 0x0101;
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <filterDef+0x88>)
 8001440:	f240 1201 	movw	r2, #257	; 0x101
 8001444:	605a      	str	r2, [r3, #4]
		filterConfig.FilterMaskIdLow = 0x1101;
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <filterDef+0x88>)
 8001448:	f241 1201 	movw	r2, #4353	; 0x1101
 800144c:	60da      	str	r2, [r3, #12]
		filterConfig.FilterMaskIdHigh = 0x1111;
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <filterDef+0x88>)
 8001450:	f241 1211 	movw	r2, #4369	; 0x1111
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	e011      	b.n	800147c <filterDef+0x64>
	}
	else if(toggle ==1){
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d10e      	bne.n	800147c <filterDef+0x64>
		filterConfig.FilterIdHigh = 0x001F;
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <filterDef+0x88>)
 8001460:	221f      	movs	r2, #31
 8001462:	601a      	str	r2, [r3, #0]
		filterConfig.FilterIdLow = 0xF000;
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <filterDef+0x88>)
 8001466:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 800146a:	605a      	str	r2, [r3, #4]
		filterConfig.FilterMaskIdLow = 0xF000;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <filterDef+0x88>)
 800146e:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8001472:	60da      	str	r2, [r3, #12]
		filterConfig.FilterMaskIdHigh = 0x111F;
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <filterDef+0x88>)
 8001476:	f241 121f 	movw	r2, #4383	; 0x111f
 800147a:	609a      	str	r2, [r3, #8]
	}

	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <filterDef+0x88>)
 800147e:	2200      	movs	r2, #0
 8001480:	619a      	str	r2, [r3, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <filterDef+0x88>)
 8001484:	2201      	movs	r2, #1
 8001486:	61da      	str	r2, [r3, #28]
	filterConfig.SlaveStartFilterBank = 3;
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <filterDef+0x88>)
 800148a:	2203      	movs	r2, #3
 800148c:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 800148e:	4904      	ldr	r1, [pc, #16]	; (80014a0 <filterDef+0x88>)
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <filterDef+0x8c>)
 8001492:	f002 f9a1 	bl	80037d8 <HAL_CAN_ConfigFilter>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000014c 	.word	0x2000014c
 80014a4:	200001c8 	.word	0x200001c8

080014a8 <MX_CAN1_Init>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
<<<<<<< HEAD
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
=======
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
<<<<<<< HEAD
 80013ec:	4b17      	ldr	r3, [pc, #92]	; (800144c <MX_CAN1_Init+0x64>)
 80013ee:	4a18      	ldr	r2, [pc, #96]	; (8001450 <MX_CAN1_Init+0x68>)
 80013f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <MX_CAN1_Init+0x64>)
 80013f4:	2205      	movs	r2, #5
 80013f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_CAN1_Init+0x64>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <MX_CAN1_Init+0x64>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_CAN1_Init+0x64>)
 8001406:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800140a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_CAN1_Init+0x64>)
 800140e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001412:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001414:	4b0d      	ldr	r3, [pc, #52]	; (800144c <MX_CAN1_Init+0x64>)
 8001416:	2200      	movs	r2, #0
 8001418:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_CAN1_Init+0x64>)
 800141c:	2200      	movs	r2, #0
 800141e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <MX_CAN1_Init+0x64>)
 8001422:	2200      	movs	r2, #0
 8001424:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_CAN1_Init+0x64>)
 8001428:	2200      	movs	r2, #0
 800142a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <MX_CAN1_Init+0x64>)
 800142e:	2200      	movs	r2, #0
 8001430:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_CAN1_Init+0x64>)
 8001434:	2200      	movs	r2, #0
 8001436:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001438:	4804      	ldr	r0, [pc, #16]	; (800144c <MX_CAN1_Init+0x64>)
 800143a:	f001 fee5 	bl	8003208 <HAL_CAN_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001444:	f000 fc74 	bl	8001d30 <Error_Handler>
=======
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <MX_CAN1_Init+0x74>)
 80014ae:	4a1c      	ldr	r2, [pc, #112]	; (8001520 <MX_CAN1_Init+0x78>)
 80014b0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80014b2:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_CAN1_Init+0x74>)
 80014b4:	2205      	movs	r2, #5
 80014b6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80014b8:	4b18      	ldr	r3, [pc, #96]	; (800151c <MX_CAN1_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <MX_CAN1_Init+0x74>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 80014c4:	4b15      	ldr	r3, [pc, #84]	; (800151c <MX_CAN1_Init+0x74>)
 80014c6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80014ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <MX_CAN1_Init+0x74>)
 80014ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014d2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_CAN1_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <MX_CAN1_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80014e0:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_CAN1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <MX_CAN1_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_CAN1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <MX_CAN1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014f8:	4808      	ldr	r0, [pc, #32]	; (800151c <MX_CAN1_Init+0x74>)
 80014fa:	f001 ff03 	bl	8003304 <HAL_CAN_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001504:	f000 fc92 	bl	8001e2c <Error_Handler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  HAL_CAN_Start(&hcan1);
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <MX_CAN1_Init+0x74>)
 800150a:	f002 fab3 	bl	8003a74 <HAL_CAN_Start>
  rxHeaderDef();
 800150e:	f7ff ff4f 	bl	80013b0 <rxHeaderDef>
  txHeaderDef();
 8001512:	f7ff ff65 	bl	80013e0 <txHeaderDef>

  /* USER CODE END CAN1_Init 2 */

}
<<<<<<< HEAD
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200001c4 	.word	0x200001c4
 8001450:	40006400 	.word	0x40006400

08001454 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a29      	ldr	r2, [pc, #164]	; (8001518 <HAL_CAN_MspInit+0xc4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d14c      	bne.n	8001510 <HAL_CAN_MspInit+0xbc>
=======
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200001c8 	.word	0x200001c8
 8001520:	40006400 	.word	0x40006400

08001524 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a29      	ldr	r2, [pc, #164]	; (80015e8 <HAL_CAN_MspInit+0xc4>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d14c      	bne.n	80015e0 <HAL_CAN_MspInit+0xbc>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
<<<<<<< HEAD
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	4b28      	ldr	r3, [pc, #160]	; (800151c <HAL_CAN_MspInit+0xc8>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	4a27      	ldr	r2, [pc, #156]	; (800151c <HAL_CAN_MspInit+0xc8>)
 8001480:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001484:	6413      	str	r3, [r2, #64]	; 0x40
 8001486:	4b25      	ldr	r3, [pc, #148]	; (800151c <HAL_CAN_MspInit+0xc8>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <HAL_CAN_MspInit+0xc8>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a20      	ldr	r2, [pc, #128]	; (800151c <HAL_CAN_MspInit+0xc8>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <HAL_CAN_MspInit+0xc8>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
=======
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	4b28      	ldr	r3, [pc, #160]	; (80015ec <HAL_CAN_MspInit+0xc8>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a27      	ldr	r2, [pc, #156]	; (80015ec <HAL_CAN_MspInit+0xc8>)
 8001550:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b25      	ldr	r3, [pc, #148]	; (80015ec <HAL_CAN_MspInit+0xc8>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <HAL_CAN_MspInit+0xc8>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a20      	ldr	r2, [pc, #128]	; (80015ec <HAL_CAN_MspInit+0xc8>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <HAL_CAN_MspInit+0xc8>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
<<<<<<< HEAD
 80014ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014c0:	2309      	movs	r3, #9
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4815      	ldr	r0, [pc, #84]	; (8001520 <HAL_CAN_MspInit+0xcc>)
 80014cc:	f003 fcb0 	bl	8004e30 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2105      	movs	r1, #5
 80014d4:	2013      	movs	r0, #19
 80014d6:	f002 ffe1 	bl	800449c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80014da:	2013      	movs	r0, #19
 80014dc:	f003 f80a 	bl	80044f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2105      	movs	r1, #5
 80014e4:	2014      	movs	r0, #20
 80014e6:	f002 ffd9 	bl	800449c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80014ea:	2014      	movs	r0, #20
 80014ec:	f003 f802 	bl	80044f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2105      	movs	r1, #5
 80014f4:	2015      	movs	r0, #21
 80014f6:	f002 ffd1 	bl	800449c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80014fa:	2015      	movs	r0, #21
 80014fc:	f002 fffa 	bl	80044f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2105      	movs	r1, #5
 8001504:	2016      	movs	r0, #22
 8001506:	f002 ffc9 	bl	800449c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800150a:	2016      	movs	r0, #22
 800150c:	f002 fff2 	bl	80044f4 <HAL_NVIC_EnableIRQ>
=======
 800157e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158c:	2303      	movs	r3, #3
 800158e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001590:	2309      	movs	r3, #9
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4619      	mov	r1, r3
 800159a:	4815      	ldr	r0, [pc, #84]	; (80015f0 <HAL_CAN_MspInit+0xcc>)
 800159c:	f003 fcc6 	bl	8004f2c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2105      	movs	r1, #5
 80015a4:	2013      	movs	r0, #19
 80015a6:	f002 fff7 	bl	8004598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80015aa:	2013      	movs	r0, #19
 80015ac:	f003 f820 	bl	80045f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2105      	movs	r1, #5
 80015b4:	2014      	movs	r0, #20
 80015b6:	f002 ffef 	bl	8004598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80015ba:	2014      	movs	r0, #20
 80015bc:	f003 f818 	bl	80045f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2105      	movs	r1, #5
 80015c4:	2015      	movs	r0, #21
 80015c6:	f002 ffe7 	bl	8004598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80015ca:	2015      	movs	r0, #21
 80015cc:	f003 f810 	bl	80045f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2105      	movs	r1, #5
 80015d4:	2016      	movs	r0, #22
 80015d6:	f002 ffdf 	bl	8004598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80015da:	2016      	movs	r0, #22
 80015dc:	f003 f808 	bl	80045f0 <HAL_NVIC_EnableIRQ>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
<<<<<<< HEAD
 8001510:	bf00      	nop
 8001512:	3728      	adds	r7, #40	; 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40006400 	.word	0x40006400
 800151c:	40023800 	.word	0x40023800
 8001520:	40020000 	.word	0x40020000

08001524 <writeCanBatVolt>:
=======
 80015e0:	bf00      	nop
 80015e2:	3728      	adds	r7, #40	; 0x28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40006400 	.word	0x40006400
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000

080015f4 <writeCanBatGaugeOverview>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
}

/* USER CODE BEGIN 1 */
void writeCanBatGaugeOverview()
{
<<<<<<< HEAD
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
	TxHeader.DLC = 8;
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <writeCanBatVolt+0x58>)
 800152c:	2208      	movs	r2, #8
 800152e:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0;
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <writeCanBatVolt+0x58>)
 8001532:	2200      	movs	r2, #0
 8001534:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <writeCanBatVolt+0x58>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <writeCanBatVolt+0x58>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x0;
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <writeCanBatVolt+0x58>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <writeCanBatVolt+0x58>)
 800154a:	2200      	movs	r2, #0
 800154c:	751a      	strb	r2, [r3, #20]

	HAL_CAN_Start(&hcan1);
 800154e:	480c      	ldr	r0, [pc, #48]	; (8001580 <writeCanBatVolt+0x5c>)
 8001550:	f002 fa12 	bl	8003978 <HAL_CAN_Start>
	uint32_t id = Pack_BAT_GAUGE_OvrVIEW_can_codegen(&batGauge, &canFrame);
 8001554:	490b      	ldr	r1, [pc, #44]	; (8001584 <writeCanBatVolt+0x60>)
 8001556:	480c      	ldr	r0, [pc, #48]	; (8001588 <writeCanBatVolt+0x64>)
 8001558:	f7ff fb78 	bl	8000c4c <Pack_BAT_GAUGE_OvrVIEW_can_codegen>
 800155c:	6078      	str	r0, [r7, #4]
	if(id == 0x1ff810)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a0a      	ldr	r2, [pc, #40]	; (800158c <writeCanBatVolt+0x68>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d105      	bne.n	8001572 <writeCanBatVolt+0x4e>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, canFrame.Data, &mailbox);
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <writeCanBatVolt+0x6c>)
 8001568:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <writeCanBatVolt+0x70>)
 800156a:	4904      	ldr	r1, [pc, #16]	; (800157c <writeCanBatVolt+0x58>)
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <writeCanBatVolt+0x5c>)
 800156e:	f002 fa47 	bl	8003a00 <HAL_CAN_AddTxMessage>




}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	2000018c 	.word	0x2000018c
 8001580:	200001c4 	.word	0x200001c4
 8001584:	20000174 	.word	0x20000174
 8001588:	20000184 	.word	0x20000184
 800158c:	001ff810 	.word	0x001ff810
 8001590:	200001c0 	.word	0x200001c0
 8001594:	20000179 	.word	0x20000179

08001598 <readFCU_state>:

void readFCU_state()
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
	uint32_t id;
	RxHeader.DLC = 8;
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <readFCU_state+0xac>)
 80015a0:	2208      	movs	r2, #8
 80015a2:	611a      	str	r2, [r3, #16]
	RxHeader.ExtId = 0;
 80015a4:	4b27      	ldr	r3, [pc, #156]	; (8001644 <readFCU_state+0xac>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	605a      	str	r2, [r3, #4]
	RxHeader.IDE = CAN_ID_STD;
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <readFCU_state+0xac>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_REMOTE;
 80015b0:	4b24      	ldr	r3, [pc, #144]	; (8001644 <readFCU_state+0xac>)
 80015b2:	2202      	movs	r2, #2
 80015b4:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = 0x01;
 80015b6:	4b23      	ldr	r3, [pc, #140]	; (8001644 <readFCU_state+0xac>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	601a      	str	r2, [r3, #0]



	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80015bc:	4b22      	ldr	r3, [pc, #136]	; (8001648 <readFCU_state+0xb0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]
	filterConfig.FilterActivation = ENABLE;
 80015c2:	4b21      	ldr	r3, [pc, #132]	; (8001648 <readFCU_state+0xb0>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	621a      	str	r2, [r3, #32]
	filterConfig.FilterBank = 2;
 80015c8:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <readFCU_state+0xb0>)
 80015ca:	2202      	movs	r2, #2
 80015cc:	615a      	str	r2, [r3, #20]
	filterConfig.FilterIdHigh = 0x0000;
 80015ce:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <readFCU_state+0xb0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
	filterConfig.FilterIdLow = 0x0101;
 80015d4:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <readFCU_state+0xb0>)
 80015d6:	f240 1201 	movw	r2, #257	; 0x101
 80015da:	605a      	str	r2, [r3, #4]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <readFCU_state+0xb0>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <readFCU_state+0xb0>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	61da      	str	r2, [r3, #28]
	filterConfig.SlaveStartFilterBank = 3;
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <readFCU_state+0xb0>)
 80015ea:	2203      	movs	r2, #3
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 80015ee:	4916      	ldr	r1, [pc, #88]	; (8001648 <readFCU_state+0xb0>)
 80015f0:	4816      	ldr	r0, [pc, #88]	; (800164c <readFCU_state+0xb4>)
 80015f2:	f002 f873 	bl	80036dc <HAL_CAN_ConfigFilter>

	uint8_t state[8];
	uint8_t dlc = 1;
 80015f6:	2301      	movs	r3, #1
 80015f8:	73fb      	strb	r3, [r7, #15]
	HAL_CAN_Start(&hcan1);
 80015fa:	4814      	ldr	r0, [pc, #80]	; (800164c <readFCU_state+0xb4>)
 80015fc:	f002 f9bc 	bl	8003978 <HAL_CAN_Start>
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, state) == HAL_OK)
 8001600:	463b      	mov	r3, r7
 8001602:	4a10      	ldr	r2, [pc, #64]	; (8001644 <readFCU_state+0xac>)
 8001604:	2100      	movs	r1, #0
 8001606:	4811      	ldr	r0, [pc, #68]	; (800164c <readFCU_state+0xb4>)
 8001608:	f002 fb1e 	bl	8003c48 <HAL_CAN_GetRxMessage>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d114      	bne.n	800163c <readFCU_state+0xa4>
		{
		id = Unpack_FCU_STATE_REQUEST_can_codegen(&fcuState, &state, dlc);
 8001612:	7bfa      	ldrb	r2, [r7, #15]
 8001614:	463b      	mov	r3, r7
 8001616:	4619      	mov	r1, r3
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <readFCU_state+0xb8>)
 800161a:	f7ff fb01 	bl	8000c20 <Unpack_FCU_STATE_REQUEST_can_codegen>
 800161e:	60b8      	str	r0, [r7, #8]
		if(state[0] == 1)
 8001620:	783b      	ldrb	r3, [r7, #0]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d102      	bne.n	800162c <readFCU_state+0x94>
		{
			bq76952_FETs_ON();  // replace with all fets on function call
 8001626:	f7ff fbbb 	bl	8000da0 <bq76952_FETs_ON>
		else
		{
			bq76952_AFE_reset();  // replace with afe reset function call
		}
		}
}
 800162a:	e007      	b.n	800163c <readFCU_state+0xa4>
		else if(state[0] == 0)
 800162c:	783b      	ldrb	r3, [r7, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d102      	bne.n	8001638 <readFCU_state+0xa0>
			bq76952_FETs_OFF(); //replace with all fets off function call
 8001632:	f7ff fbbe 	bl	8000db2 <bq76952_FETs_OFF>
}
 8001636:	e001      	b.n	800163c <readFCU_state+0xa4>
			bq76952_AFE_reset();  // replace with afe reset function call
 8001638:	f7ff fbd2 	bl	8000de0 <bq76952_AFE_reset>
}
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200001a4 	.word	0x200001a4
 8001648:	2000014c 	.word	0x2000014c
 800164c:	200001c4 	.word	0x200001c4
 8001650:	20000188 	.word	0x20000188

08001654 <MX_DMA_Init>:
=======
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
	uint32_t id = Pack_BAT_GAUGE_OvrVIEW_can_codegen(&batGauge, &canFrame);
 80015fa:	4909      	ldr	r1, [pc, #36]	; (8001620 <writeCanBatGaugeOverview+0x2c>)
 80015fc:	4809      	ldr	r0, [pc, #36]	; (8001624 <writeCanBatGaugeOverview+0x30>)
 80015fe:	f7ff fb25 	bl	8000c4c <Pack_BAT_GAUGE_OvrVIEW_can_codegen>
 8001602:	6078      	str	r0, [r7, #4]
	if(id == 0x1ff810)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <writeCanBatGaugeOverview+0x34>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d105      	bne.n	8001618 <writeCanBatGaugeOverview+0x24>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, canFrame.Data, &mailbox);
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <writeCanBatGaugeOverview+0x38>)
 800160e:	4a08      	ldr	r2, [pc, #32]	; (8001630 <writeCanBatGaugeOverview+0x3c>)
 8001610:	4908      	ldr	r1, [pc, #32]	; (8001634 <writeCanBatGaugeOverview+0x40>)
 8001612:	4809      	ldr	r0, [pc, #36]	; (8001638 <writeCanBatGaugeOverview+0x44>)
 8001614:	f002 fa72 	bl	8003afc <HAL_CAN_AddTxMessage>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000174 	.word	0x20000174
 8001624:	20000184 	.word	0x20000184
 8001628:	001ff810 	.word	0x001ff810
 800162c:	200001c0 	.word	0x200001c0
 8001630:	20000179 	.word	0x20000179
 8001634:	2000018c 	.word	0x2000018c
 8001638:	200001c8 	.word	0x200001c8

0800163c <writeCanBatGaugeV>:

void writeCanBatGaugeV()
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
	uint32_t id = Pack_BAT_GAUGE_OvrVIEW_can_codegen(&batGauge, &canFrame);
 8001642:	4909      	ldr	r1, [pc, #36]	; (8001668 <writeCanBatGaugeV+0x2c>)
 8001644:	4809      	ldr	r0, [pc, #36]	; (800166c <writeCanBatGaugeV+0x30>)
 8001646:	f7ff fb01 	bl	8000c4c <Pack_BAT_GAUGE_OvrVIEW_can_codegen>
 800164a:	6078      	str	r0, [r7, #4]
	if(id == 0x1ff810)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <writeCanBatGaugeV+0x34>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d105      	bne.n	8001660 <writeCanBatGaugeV+0x24>
	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, canFrame.Data, &mailbox);
 8001654:	4b07      	ldr	r3, [pc, #28]	; (8001674 <writeCanBatGaugeV+0x38>)
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <writeCanBatGaugeV+0x3c>)
 8001658:	4908      	ldr	r1, [pc, #32]	; (800167c <writeCanBatGaugeV+0x40>)
 800165a:	4809      	ldr	r0, [pc, #36]	; (8001680 <writeCanBatGaugeV+0x44>)
 800165c:	f002 fa4e 	bl	8003afc <HAL_CAN_AddTxMessage>
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000174 	.word	0x20000174
 800166c:	20000184 	.word	0x20000184
 8001670:	001ff810 	.word	0x001ff810
 8001674:	200001c0 	.word	0x200001c0
 8001678:	20000179 	.word	0x20000179
 800167c:	2000018c 	.word	0x2000018c
 8001680:	200001c8 	.word	0x200001c8

08001684 <readFCU_state>:


void readFCU_state()
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
	toggle = 0;
 800168a:	4b2b      	ldr	r3, [pc, #172]	; (8001738 <readFCU_state+0xb4>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
	filterDef(toggle);
 8001690:	4b29      	ldr	r3, [pc, #164]	; (8001738 <readFCU_state+0xb4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff febf 	bl	8001418 <filterDef>

	uint8_t state[8];
	uint8_t dlc = 1;
 800169a:	2301      	movs	r3, #1
 800169c:	73fb      	strb	r3, [r7, #15]
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, state) == HAL_OK)
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	4a26      	ldr	r2, [pc, #152]	; (800173c <readFCU_state+0xb8>)
 80016a2:	2100      	movs	r1, #0
 80016a4:	4826      	ldr	r0, [pc, #152]	; (8001740 <readFCU_state+0xbc>)
 80016a6:	f002 fb4d 	bl	8003d44 <HAL_CAN_GetRxMessage>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d13f      	bne.n	8001730 <readFCU_state+0xac>
		{
		id = Unpack_FCU_STATE_REQUEST_can_codegen(&fcuState, &state, dlc);
 80016b0:	7bfa      	ldrb	r2, [r7, #15]
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	4619      	mov	r1, r3
 80016b6:	4823      	ldr	r0, [pc, #140]	; (8001744 <readFCU_state+0xc0>)
 80016b8:	f7ff fab2 	bl	8000c20 <Unpack_FCU_STATE_REQUEST_can_codegen>
 80016bc:	4603      	mov	r3, r0
 80016be:	4a22      	ldr	r2, [pc, #136]	; (8001748 <readFCU_state+0xc4>)
 80016c0:	6013      	str	r3, [r2, #0]
		if(id = 0x101){
 80016c2:	4b21      	ldr	r3, [pc, #132]	; (8001748 <readFCU_state+0xc4>)
 80016c4:	f240 1201 	movw	r2, #257	; 0x101
 80016c8:	601a      	str	r2, [r3, #0]
			if(state[0] == 0)
 80016ca:	793b      	ldrb	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d106      	bne.n	80016de <readFCU_state+0x5a>
			{
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);  // replace with all fets on function call
 80016d0:	2201      	movs	r2, #1
 80016d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d6:	481d      	ldr	r0, [pc, #116]	; (800174c <readFCU_state+0xc8>)
 80016d8:	f003 ff4c 	bl	8005574 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
			}
		}
		}
}
 80016dc:	e028      	b.n	8001730 <readFCU_state+0xac>
			else if(state[0] == 1)
 80016de:	793b      	ldrb	r3, [r7, #4]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d106      	bne.n	80016f2 <readFCU_state+0x6e>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);  //replace with all fets off function call
 80016e4:	2201      	movs	r2, #1
 80016e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ea:	4818      	ldr	r0, [pc, #96]	; (800174c <readFCU_state+0xc8>)
 80016ec:	f003 ff42 	bl	8005574 <HAL_GPIO_WritePin>
}
 80016f0:	e01e      	b.n	8001730 <readFCU_state+0xac>
			else if(state[0] == 2)
 80016f2:	793b      	ldrb	r3, [r7, #4]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d106      	bne.n	8001706 <readFCU_state+0x82>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);  // replace with afe reset function call
 80016f8:	2201      	movs	r2, #1
 80016fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016fe:	4813      	ldr	r0, [pc, #76]	; (800174c <readFCU_state+0xc8>)
 8001700:	f003 ff38 	bl	8005574 <HAL_GPIO_WritePin>
}
 8001704:	e014      	b.n	8001730 <readFCU_state+0xac>
			else if(state[0] == 3)
 8001706:	793b      	ldrb	r3, [r7, #4]
 8001708:	2b03      	cmp	r3, #3
 800170a:	d111      	bne.n	8001730 <readFCU_state+0xac>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001712:	480e      	ldr	r0, [pc, #56]	; (800174c <readFCU_state+0xc8>)
 8001714:	f003 ff2e 	bl	8005574 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800171e:	480b      	ldr	r0, [pc, #44]	; (800174c <readFCU_state+0xc8>)
 8001720:	f003 ff28 	bl	8005574 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172a:	4808      	ldr	r0, [pc, #32]	; (800174c <readFCU_state+0xc8>)
 800172c:	f003 ff22 	bl	8005574 <HAL_GPIO_WritePin>
}
 8001730:	bf00      	nop
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000148 	.word	0x20000148
 800173c:	200001a4 	.word	0x200001a4
 8001740:	200001c8 	.word	0x200001c8
 8001744:	20000188 	.word	0x20000188
 8001748:	200001c4 	.word	0x200001c4
 800174c:	40020400 	.word	0x40020400

08001750 <MX_DMA_Init>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
<<<<<<< HEAD
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	4b23      	ldr	r3, [pc, #140]	; (80016ec <MX_DMA_Init+0x98>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a22      	ldr	r2, [pc, #136]	; (80016ec <MX_DMA_Init+0x98>)
 8001664:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b20      	ldr	r3, [pc, #128]	; (80016ec <MX_DMA_Init+0x98>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <MX_DMA_Init+0x98>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a1b      	ldr	r2, [pc, #108]	; (80016ec <MX_DMA_Init+0x98>)
 8001680:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b19      	ldr	r3, [pc, #100]	; (80016ec <MX_DMA_Init+0x98>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]
=======
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <MX_DMA_Init+0x98>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a22      	ldr	r2, [pc, #136]	; (80017e8 <MX_DMA_Init+0x98>)
 8001760:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <MX_DMA_Init+0x98>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	603b      	str	r3, [r7, #0]
 8001776:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <MX_DMA_Init+0x98>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a1b      	ldr	r2, [pc, #108]	; (80017e8 <MX_DMA_Init+0x98>)
 800177c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b19      	ldr	r3, [pc, #100]	; (80017e8 <MX_DMA_Init+0x98>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	683b      	ldr	r3, [r7, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
<<<<<<< HEAD
 8001692:	2200      	movs	r2, #0
 8001694:	2105      	movs	r1, #5
 8001696:	200b      	movs	r0, #11
 8001698:	f002 ff00 	bl	800449c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800169c:	200b      	movs	r0, #11
 800169e:	f002 ff29 	bl	80044f4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2105      	movs	r1, #5
 80016a6:	2011      	movs	r0, #17
 80016a8:	f002 fef8 	bl	800449c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80016ac:	2011      	movs	r0, #17
 80016ae:	f002 ff21 	bl	80044f4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2105      	movs	r1, #5
 80016b6:	2038      	movs	r0, #56	; 0x38
 80016b8:	f002 fef0 	bl	800449c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016bc:	2038      	movs	r0, #56	; 0x38
 80016be:	f002 ff19 	bl	80044f4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2105      	movs	r1, #5
 80016c6:	203b      	movs	r0, #59	; 0x3b
 80016c8:	f002 fee8 	bl	800449c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80016cc:	203b      	movs	r0, #59	; 0x3b
 80016ce:	f002 ff11 	bl	80044f4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2105      	movs	r1, #5
 80016d6:	203c      	movs	r0, #60	; 0x3c
 80016d8:	f002 fee0 	bl	800449c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80016dc:	203c      	movs	r0, #60	; 0x3c
 80016de:	f002 ff09 	bl	80044f4 <HAL_NVIC_EnableIRQ>

}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800

080016f0 <vApplicationGetIdleTaskMemory>:
=======
 800178e:	2200      	movs	r2, #0
 8001790:	2105      	movs	r1, #5
 8001792:	200b      	movs	r0, #11
 8001794:	f002 ff00 	bl	8004598 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001798:	200b      	movs	r0, #11
 800179a:	f002 ff29 	bl	80045f0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2105      	movs	r1, #5
 80017a2:	2011      	movs	r0, #17
 80017a4:	f002 fef8 	bl	8004598 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80017a8:	2011      	movs	r0, #17
 80017aa:	f002 ff21 	bl	80045f0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2105      	movs	r1, #5
 80017b2:	2038      	movs	r0, #56	; 0x38
 80017b4:	f002 fef0 	bl	8004598 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017b8:	2038      	movs	r0, #56	; 0x38
 80017ba:	f002 ff19 	bl	80045f0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2105      	movs	r1, #5
 80017c2:	203b      	movs	r0, #59	; 0x3b
 80017c4:	f002 fee8 	bl	8004598 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80017c8:	203b      	movs	r0, #59	; 0x3b
 80017ca:	f002 ff11 	bl	80045f0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2105      	movs	r1, #5
 80017d2:	203c      	movs	r0, #60	; 0x3c
 80017d4:	f002 fee0 	bl	8004598 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80017d8:	203c      	movs	r0, #60	; 0x3c
 80017da:	f002 ff09 	bl	80045f0 <HAL_NVIC_EnableIRQ>

}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800

080017ec <vApplicationGetIdleTaskMemory>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
<<<<<<< HEAD
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4a07      	ldr	r2, [pc, #28]	; (800171c <vApplicationGetIdleTaskMemory+0x2c>)
 8001700:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <vApplicationGetIdleTaskMemory+0x30>)
 8001706:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2280      	movs	r2, #128	; 0x80
 800170c:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	2000023c 	.word	0x2000023c
 8001720:	200002f0 	.word	0x200002f0

08001724 <MX_FREERTOS_Init>:
=======
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4a07      	ldr	r2, [pc, #28]	; (8001818 <vApplicationGetIdleTaskMemory+0x2c>)
 80017fc:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	4a06      	ldr	r2, [pc, #24]	; (800181c <vApplicationGetIdleTaskMemory+0x30>)
 8001802:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2280      	movs	r2, #128	; 0x80
 8001808:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 800180a:	bf00      	nop
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000240 	.word	0x20000240
 800181c:	200002f4 	.word	0x200002f4

08001820 <MX_FREERTOS_Init>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
<<<<<<< HEAD
 8001724:	b5b0      	push	{r4, r5, r7, lr}
 8001726:	b09e      	sub	sp, #120	; 0x78
 8001728:	af00      	add	r7, sp, #0
=======
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b09e      	sub	sp, #120	; 0x78
 8001824:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of can_tx_queue */
  osMessageQDef(can_tx_queue, 512, uint8_t);
<<<<<<< HEAD
 800172a:	4b2c      	ldr	r3, [pc, #176]	; (80017dc <MX_FREERTOS_Init+0xb8>)
 800172c:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001730:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001732:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  can_tx_queueHandle = osMessageCreate(osMessageQ(can_tx_queue), NULL);
 8001736:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f008 facd 	bl	8009cdc <osMessageCreate>
 8001742:	4603      	mov	r3, r0
 8001744:	4a26      	ldr	r2, [pc, #152]	; (80017e0 <MX_FREERTOS_Init+0xbc>)
 8001746:	6013      	str	r3, [r2, #0]

  /* definition and creation of can_rx_queue */
  osMessageQDef(can_rx_queue, 512, uint8_t);
 8001748:	4b24      	ldr	r3, [pc, #144]	; (80017dc <MX_FREERTOS_Init+0xb8>)
 800174a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800174e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001750:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  can_rx_queueHandle = osMessageCreate(osMessageQ(can_rx_queue), NULL);
 8001754:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f008 fabe 	bl	8009cdc <osMessageCreate>
 8001760:	4603      	mov	r3, r0
 8001762:	4a20      	ldr	r2, [pc, #128]	; (80017e4 <MX_FREERTOS_Init+0xc0>)
 8001764:	6013      	str	r3, [r2, #0]
=======
 8001826:	4b2c      	ldr	r3, [pc, #176]	; (80018d8 <MX_FREERTOS_Init+0xb8>)
 8001828:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800182c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800182e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  can_tx_queueHandle = osMessageCreate(osMessageQ(can_tx_queue), NULL);
 8001832:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f008 facd 	bl	8009dd8 <osMessageCreate>
 800183e:	4603      	mov	r3, r0
 8001840:	4a26      	ldr	r2, [pc, #152]	; (80018dc <MX_FREERTOS_Init+0xbc>)
 8001842:	6013      	str	r3, [r2, #0]

  /* definition and creation of can_rx_queue */
  osMessageQDef(can_rx_queue, 512, uint8_t);
 8001844:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <MX_FREERTOS_Init+0xb8>)
 8001846:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800184a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800184c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  can_rx_queueHandle = osMessageCreate(osMessageQ(can_rx_queue), NULL);
 8001850:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f008 fabe 	bl	8009dd8 <osMessageCreate>
 800185c:	4603      	mov	r3, r0
 800185e:	4a20      	ldr	r2, [pc, #128]	; (80018e0 <MX_FREERTOS_Init+0xc0>)
 8001860:	6013      	str	r3, [r2, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of APP_1HZ_TASK */
  osThreadDef(APP_1HZ_TASK, app_task_1Hz, osPriorityNormal, 0, 128);
<<<<<<< HEAD
 8001766:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <MX_FREERTOS_Init+0xc4>)
 8001768:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800176c:	461d      	mov	r5, r3
 800176e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001772:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001776:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_1HZ_TASKHandle = osThreadCreate(osThread(APP_1HZ_TASK), NULL);
 800177a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f008 fa5f 	bl	8009c44 <osThreadCreate>
 8001786:	4603      	mov	r3, r0
 8001788:	4a18      	ldr	r2, [pc, #96]	; (80017ec <MX_FREERTOS_Init+0xc8>)
 800178a:	6013      	str	r3, [r2, #0]

  /* definition and creation of APP_10HZ_TASK */
  osThreadDef(APP_10HZ_TASK, app_task_10hz, osPriorityAboveNormal, 0, 128);
 800178c:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <MX_FREERTOS_Init+0xcc>)
 800178e:	f107 0420 	add.w	r4, r7, #32
 8001792:	461d      	mov	r5, r3
 8001794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001798:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800179c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_10HZ_TASKHandle = osThreadCreate(osThread(APP_10HZ_TASK), NULL);
 80017a0:	f107 0320 	add.w	r3, r7, #32
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f008 fa4c 	bl	8009c44 <osThreadCreate>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <MX_FREERTOS_Init+0xd0>)
 80017b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of APP_100HZ_TASK */
  osThreadDef(APP_100HZ_TASK, app_task_100hz, osPriorityHigh, 0, 128);
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_FREERTOS_Init+0xd4>)
 80017b4:	1d3c      	adds	r4, r7, #4
 80017b6:	461d      	mov	r5, r3
 80017b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_100HZ_TASKHandle = osThreadCreate(osThread(APP_100HZ_TASK), NULL);
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	2100      	movs	r1, #0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f008 fa3b 	bl	8009c44 <osThreadCreate>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <MX_FREERTOS_Init+0xd8>)
 80017d2:	6013      	str	r3, [r2, #0]
=======
 8001862:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <MX_FREERTOS_Init+0xc4>)
 8001864:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001868:	461d      	mov	r5, r3
 800186a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800186c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800186e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001872:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_1HZ_TASKHandle = osThreadCreate(osThread(APP_1HZ_TASK), NULL);
 8001876:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800187a:	2100      	movs	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f008 fa5f 	bl	8009d40 <osThreadCreate>
 8001882:	4603      	mov	r3, r0
 8001884:	4a18      	ldr	r2, [pc, #96]	; (80018e8 <MX_FREERTOS_Init+0xc8>)
 8001886:	6013      	str	r3, [r2, #0]

  /* definition and creation of APP_10HZ_TASK */
  osThreadDef(APP_10HZ_TASK, app_task_10hz, osPriorityAboveNormal, 0, 128);
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <MX_FREERTOS_Init+0xcc>)
 800188a:	f107 0420 	add.w	r4, r7, #32
 800188e:	461d      	mov	r5, r3
 8001890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001894:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001898:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_10HZ_TASKHandle = osThreadCreate(osThread(APP_10HZ_TASK), NULL);
 800189c:	f107 0320 	add.w	r3, r7, #32
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f008 fa4c 	bl	8009d40 <osThreadCreate>
 80018a8:	4603      	mov	r3, r0
 80018aa:	4a11      	ldr	r2, [pc, #68]	; (80018f0 <MX_FREERTOS_Init+0xd0>)
 80018ac:	6013      	str	r3, [r2, #0]

  /* definition and creation of APP_100HZ_TASK */
  osThreadDef(APP_100HZ_TASK, app_task_100hz, osPriorityHigh, 0, 128);
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_FREERTOS_Init+0xd4>)
 80018b0:	1d3c      	adds	r4, r7, #4
 80018b2:	461d      	mov	r5, r3
 80018b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_100HZ_TASKHandle = osThreadCreate(osThread(APP_100HZ_TASK), NULL);
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f008 fa3b 	bl	8009d40 <osThreadCreate>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <MX_FREERTOS_Init+0xd8>)
 80018ce:	6013      	str	r3, [r2, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
<<<<<<< HEAD
 80017d4:	bf00      	nop
 80017d6:	3778      	adds	r7, #120	; 0x78
 80017d8:	46bd      	mov	sp, r7
 80017da:	bdb0      	pop	{r4, r5, r7, pc}
 80017dc:	0800bf6c 	.word	0x0800bf6c
 80017e0:	20000234 	.word	0x20000234
 80017e4:	20000238 	.word	0x20000238
 80017e8:	0800bf7c 	.word	0x0800bf7c
 80017ec:	20000228 	.word	0x20000228
 80017f0:	0800bf98 	.word	0x0800bf98
 80017f4:	2000022c 	.word	0x2000022c
 80017f8:	0800bfb4 	.word	0x0800bfb4
 80017fc:	20000230 	.word	0x20000230

08001800 <app_task_1Hz>:
=======
 80018d0:	bf00      	nop
 80018d2:	3778      	adds	r7, #120	; 0x78
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bdb0      	pop	{r4, r5, r7, pc}
 80018d8:	0800c06c 	.word	0x0800c06c
 80018dc:	20000238 	.word	0x20000238
 80018e0:	2000023c 	.word	0x2000023c
 80018e4:	0800c07c 	.word	0x0800c07c
 80018e8:	2000022c 	.word	0x2000022c
 80018ec:	0800c098 	.word	0x0800c098
 80018f0:	20000230 	.word	0x20000230
 80018f4:	0800c0b4 	.word	0x0800c0b4
 80018f8:	20000234 	.word	0x20000234

080018fc <app_task_1Hz>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_app_task_1Hz */
void app_task_1Hz(void const * argument)
{
<<<<<<< HEAD
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_task_1Hz */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 1000;
 8001808:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180c:	60fb      	str	r3, [r7, #12]
    xLastWakeTime = xTaskGetTickCount();
 800180e:	f008 ffb7 	bl	800a780 <xTaskGetTickCount>
 8001812:	4603      	mov	r3, r0
 8001814:	60bb      	str	r3, [r7, #8]
=======
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_task_1Hz */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 1000;
 8001904:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001908:	60fb      	str	r3, [r7, #12]
    xLastWakeTime = xTaskGetTickCount();
 800190a:	f008 ffb7 	bl	800a87c <xTaskGetTickCount>
 800190e:	4603      	mov	r3, r0
 8001910:	60bb      	str	r3, [r7, #8]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    /* Infinite loop */
    for (;;)
    {
        //app_gauge_tick();
<<<<<<< HEAD

     vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001816:	f107 0308 	add.w	r3, r7, #8
 800181a:	68f9      	ldr	r1, [r7, #12]
 800181c:	4618      	mov	r0, r3
 800181e:	f008 fe1d 	bl	800a45c <vTaskDelayUntil>
 8001822:	e7f8      	b.n	8001816 <app_task_1Hz+0x16>

08001824 <app_task_10hz>:
=======
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001912:	f107 0308 	add.w	r3, r7, #8
 8001916:	68f9      	ldr	r1, [r7, #12]
 8001918:	4618      	mov	r0, r3
 800191a:	f008 fe1d 	bl	800a558 <vTaskDelayUntil>
 800191e:	e7f8      	b.n	8001912 <app_task_1Hz+0x16>

08001920 <app_task_10hz>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_app_task_10hz */
void app_task_10hz(void const * argument)
{
<<<<<<< HEAD
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_task_10hz */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 100;
 800182c:	2364      	movs	r3, #100	; 0x64
 800182e:	60fb      	str	r3, [r7, #12]
    xLastWakeTime = xTaskGetTickCount();
 8001830:	f008 ffa6 	bl	800a780 <xTaskGetTickCount>
 8001834:	4603      	mov	r3, r0
 8001836:	60bb      	str	r3, [r7, #8]

    bq76952_FETs_call();  //Calls the FET Commands
 8001838:	f7ff fac4 	bl	8000dc4 <bq76952_FETs_call>
    /* Infinite loop */
    for (;;)
    {
    
    //led_blink();
    writeCanBatVolt();  //writing battery voltage from mcu to CAN line
 800183c:	f7ff fe72 	bl	8001524 <writeCanBatVolt>
    testBenchTempCheck();  //checking FET temperature using NTC
 8001840:	f7ff fd8a 	bl	8001358 <testBenchTempCheck>
    vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	68f9      	ldr	r1, [r7, #12]
 800184a:	4618      	mov	r0, r3
 800184c:	f008 fe06 	bl	800a45c <vTaskDelayUntil>
    {
 8001850:	e7f4      	b.n	800183c <app_task_10hz+0x18>

08001852 <app_task_100hz>:
=======
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_task_10hz */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 100;
 8001928:	2364      	movs	r3, #100	; 0x64
 800192a:	60fb      	str	r3, [r7, #12]
    xLastWakeTime = xTaskGetTickCount();
 800192c:	f008 ffa6 	bl	800a87c <xTaskGetTickCount>
 8001930:	4603      	mov	r3, r0
 8001932:	60bb      	str	r3, [r7, #8]
    /* Infinite loop */
    for (;;)
    {
    writeCanBatGaugeOverview();
 8001934:	f7ff fe5e 	bl	80015f4 <writeCanBatGaugeOverview>
    writeCanBatGaugeV();	//writing battery voltage from mcu to CAN line
 8001938:	f7ff fe80 	bl	800163c <writeCanBatGaugeV>
    testBenchTempCheck();  //checking FET temperature using NTC
 800193c:	f7ff fcf0 	bl	8001320 <testBenchTempCheck>
    vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001940:	f107 0308 	add.w	r3, r7, #8
 8001944:	68f9      	ldr	r1, [r7, #12]
 8001946:	4618      	mov	r0, r3
 8001948:	f008 fe06 	bl	800a558 <vTaskDelayUntil>
    {
 800194c:	e7f2      	b.n	8001934 <app_task_10hz+0x14>

0800194e <app_task_100hz>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_app_task_100hz */
void app_task_100hz(void const * argument)
{
<<<<<<< HEAD
 8001852:	b580      	push	{r7, lr}
 8001854:	b084      	sub	sp, #16
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_task_100hz */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 10;
 800185a:	230a      	movs	r3, #10
 800185c:	60fb      	str	r3, [r7, #12]
    xLastWakeTime = xTaskGetTickCount();
 800185e:	f008 ff8f 	bl	800a780 <xTaskGetTickCount>
 8001862:	4603      	mov	r3, r0
 8001864:	60bb      	str	r3, [r7, #8]
=======
 800194e:	b580      	push	{r7, lr}
 8001950:	b084      	sub	sp, #16
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN app_task_100hz */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 10;
 8001956:	230a      	movs	r3, #10
 8001958:	60fb      	str	r3, [r7, #12]
    xLastWakeTime = xTaskGetTickCount();
 800195a:	f008 ff8f 	bl	800a87c <xTaskGetTickCount>
 800195e:	4603      	mov	r3, r0
 8001960:	60bb      	str	r3, [r7, #8]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    /* Infinite loop */
    for (;;)
    {
        // Battery State Machine
       readFCU_state();  //Getting FCU state over CAN line to control FET operations.
<<<<<<< HEAD
 8001866:	f7ff fe97 	bl	8001598 <readFCU_state>
       vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800186a:	f107 0308 	add.w	r3, r7, #8
 800186e:	68f9      	ldr	r1, [r7, #12]
 8001870:	4618      	mov	r0, r3
 8001872:	f008 fdf3 	bl	800a45c <vTaskDelayUntil>
    {
 8001876:	e7f6      	b.n	8001866 <app_task_100hz+0x14>

08001878 <MX_GPIO_Init>:
=======
 8001962:	f7ff fe8f 	bl	8001684 <readFCU_state>
       vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001966:	f107 0308 	add.w	r3, r7, #8
 800196a:	68f9      	ldr	r1, [r7, #12]
 800196c:	4618      	mov	r0, r3
 800196e:	f008 fdf3 	bl	800a558 <vTaskDelayUntil>
    {
 8001972:	e7f6      	b.n	8001962 <app_task_100hz+0x14>

08001974 <MX_GPIO_Init>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PC2   ------> ADCx_IN12
*/
void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	4b62      	ldr	r3, [pc, #392]	; (8001a1c <MX_GPIO_Init+0x1a4>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a61      	ldr	r2, [pc, #388]	; (8001a1c <MX_GPIO_Init+0x1a4>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b5f      	ldr	r3, [pc, #380]	; (8001a1c <MX_GPIO_Init+0x1a4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b5b      	ldr	r3, [pc, #364]	; (8001a1c <MX_GPIO_Init+0x1a4>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a5a      	ldr	r2, [pc, #360]	; (8001a1c <MX_GPIO_Init+0x1a4>)
 80018b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <MX_GPIO_Init+0x1a4>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	4b54      	ldr	r3, [pc, #336]	; (8001a1c <MX_GPIO_Init+0x1a4>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a53      	ldr	r2, [pc, #332]	; (8001a1c <MX_GPIO_Init+0x1a4>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b51      	ldr	r3, [pc, #324]	; (8001a1c <MX_GPIO_Init+0x1a4>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	4b4d      	ldr	r3, [pc, #308]	; (8001a1c <MX_GPIO_Init+0x1a4>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a4c      	ldr	r2, [pc, #304]	; (8001a1c <MX_GPIO_Init+0x1a4>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b4a      	ldr	r3, [pc, #296]	; (8001a1c <MX_GPIO_Init+0x1a4>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	4b46      	ldr	r3, [pc, #280]	; (8001a1c <MX_GPIO_Init+0x1a4>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a45      	ldr	r2, [pc, #276]	; (8001a1c <MX_GPIO_Init+0x1a4>)
 8001908:	f043 0308 	orr.w	r3, r3, #8
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b43      	ldr	r3, [pc, #268]	; (8001a1c <MX_GPIO_Init+0x1a4>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_SHUT_Pin|AFE_WAKE_Pin, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	2106      	movs	r1, #6
 800191e:	4840      	ldr	r0, [pc, #256]	; (8001a20 <MX_GPIO_Init+0x1a8>)
 8001920:	f003 fdaa 	bl	8005478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SP1_CS_Pin|DFETOFF_OUT_Pin|LED3_OUT_Pin|LED2_OUT_Pin
 8001924:	2200      	movs	r2, #0
 8001926:	f44f 611f 	mov.w	r1, #2544	; 0x9f0
 800192a:	483e      	ldr	r0, [pc, #248]	; (8001a24 <MX_GPIO_Init+0x1ac>)
 800192c:	f003 fda4 	bl	8005478 <HAL_GPIO_WritePin>
=======
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	4b62      	ldr	r3, [pc, #392]	; (8001b18 <MX_GPIO_Init+0x1a4>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a61      	ldr	r2, [pc, #388]	; (8001b18 <MX_GPIO_Init+0x1a4>)
 8001994:	f043 0304 	orr.w	r3, r3, #4
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b5f      	ldr	r3, [pc, #380]	; (8001b18 <MX_GPIO_Init+0x1a4>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b5b      	ldr	r3, [pc, #364]	; (8001b18 <MX_GPIO_Init+0x1a4>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a5a      	ldr	r2, [pc, #360]	; (8001b18 <MX_GPIO_Init+0x1a4>)
 80019b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b58      	ldr	r3, [pc, #352]	; (8001b18 <MX_GPIO_Init+0x1a4>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	4b54      	ldr	r3, [pc, #336]	; (8001b18 <MX_GPIO_Init+0x1a4>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a53      	ldr	r2, [pc, #332]	; (8001b18 <MX_GPIO_Init+0x1a4>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b51      	ldr	r3, [pc, #324]	; (8001b18 <MX_GPIO_Init+0x1a4>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	4b4d      	ldr	r3, [pc, #308]	; (8001b18 <MX_GPIO_Init+0x1a4>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a4c      	ldr	r2, [pc, #304]	; (8001b18 <MX_GPIO_Init+0x1a4>)
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b4a      	ldr	r3, [pc, #296]	; (8001b18 <MX_GPIO_Init+0x1a4>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	4b46      	ldr	r3, [pc, #280]	; (8001b18 <MX_GPIO_Init+0x1a4>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a45      	ldr	r2, [pc, #276]	; (8001b18 <MX_GPIO_Init+0x1a4>)
 8001a04:	f043 0308 	orr.w	r3, r3, #8
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b43      	ldr	r3, [pc, #268]	; (8001b18 <MX_GPIO_Init+0x1a4>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_SHUT_Pin|AFE_WAKE_Pin, GPIO_PIN_RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2106      	movs	r1, #6
 8001a1a:	4840      	ldr	r0, [pc, #256]	; (8001b1c <MX_GPIO_Init+0x1a8>)
 8001a1c:	f003 fdaa 	bl	8005574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SP1_CS_Pin|DFETOFF_OUT_Pin|LED3_OUT_Pin|LED2_OUT_Pin
 8001a20:	2200      	movs	r2, #0
 8001a22:	f44f 611f 	mov.w	r1, #2544	; 0x9f0
 8001a26:	483e      	ldr	r0, [pc, #248]	; (8001b20 <MX_GPIO_Init+0x1ac>)
 8001a28:	f003 fda4 	bl	8005574 <HAL_GPIO_WritePin>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
                          |LED1_OUT_Pin|PWR5V_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DDSG_IN_Pin|LED5_OUT_BLUE_Pin|LED5_OUT_GREEN_Pin|LED5_OUT_RED_Pin
<<<<<<< HEAD
 8001930:	2200      	movs	r2, #0
 8001932:	f24f 0104 	movw	r1, #61444	; 0xf004
 8001936:	483c      	ldr	r0, [pc, #240]	; (8001a28 <MX_GPIO_Init+0x1b0>)
 8001938:	f003 fd9e 	bl	8005478 <HAL_GPIO_WritePin>
=======
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f24f 0104 	movw	r1, #61444	; 0xf004
 8001a32:	483c      	ldr	r0, [pc, #240]	; (8001b24 <MX_GPIO_Init+0x1b0>)
 8001a34:	f003 fd9e 	bl	8005574 <HAL_GPIO_WritePin>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
                          |LED4_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 PCPin
                           PC3 PC9 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|NTC_Pin
<<<<<<< HEAD
 800193c:	f24f 630c 	movw	r3, #62988	; 0xf60c
 8001940:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001942:	2303      	movs	r3, #3
 8001944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	4834      	ldr	r0, [pc, #208]	; (8001a24 <MX_GPIO_Init+0x1ac>)
 8001952:	f003 fa6d 	bl	8004e30 <HAL_GPIO_Init>
=======
 8001a38:	f24f 630c 	movw	r3, #62988	; 0xf60c
 8001a3c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4834      	ldr	r0, [pc, #208]	; (8001b20 <MX_GPIO_Init+0x1ac>)
 8001a4e:	f003 fa6d 	bl	8004f2c <HAL_GPIO_Init>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /*Configure GPIO pins : PA0 PA3 PA4 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
<<<<<<< HEAD
 8001956:	f248 1319 	movw	r3, #33049	; 0x8119
 800195a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800195c:	2303      	movs	r3, #3
 800195e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4619      	mov	r1, r3
 800196a:	482d      	ldr	r0, [pc, #180]	; (8001a20 <MX_GPIO_Init+0x1a8>)
 800196c:	f003 fa60 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RST_SHUT_Pin|AFE_WAKE_Pin;
 8001970:	2306      	movs	r3, #6
 8001972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	4826      	ldr	r0, [pc, #152]	; (8001a20 <MX_GPIO_Init+0x1a8>)
 8001988:	f003 fa52 	bl	8004e30 <HAL_GPIO_Init>
=======
 8001a52:	f248 1319 	movw	r3, #33049	; 0x8119
 8001a56:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4619      	mov	r1, r3
 8001a66:	482d      	ldr	r0, [pc, #180]	; (8001b1c <MX_GPIO_Init+0x1a8>)
 8001a68:	f003 fa60 	bl	8004f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RST_SHUT_Pin|AFE_WAKE_Pin;
 8001a6c:	2306      	movs	r3, #6
 8001a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a70:	2301      	movs	r3, #1
 8001a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4619      	mov	r1, r3
 8001a82:	4826      	ldr	r0, [pc, #152]	; (8001b1c <MX_GPIO_Init+0x1a8>)
 8001a84:	f003 fa52 	bl	8004f2c <HAL_GPIO_Init>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = SP1_CS_Pin|DFETOFF_OUT_Pin|LED3_OUT_Pin|LED2_OUT_Pin
<<<<<<< HEAD
 800198c:	f44f 631f 	mov.w	r3, #2544	; 0x9f0
 8001990:	617b      	str	r3, [r7, #20]
                          |LED1_OUT_Pin|PWR5V_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001992:	2301      	movs	r3, #1
 8001994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	481f      	ldr	r0, [pc, #124]	; (8001a24 <MX_GPIO_Init+0x1ac>)
 80019a6:	f003 fa43 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AFE_ALERT_IN_Pin|DCHG_IN_Pin;
 80019aa:	2303      	movs	r3, #3
 80019ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	481a      	ldr	r0, [pc, #104]	; (8001a28 <MX_GPIO_Init+0x1b0>)
 80019be:	f003 fa37 	bl	8004e30 <HAL_GPIO_Init>
=======
 8001a88:	f44f 631f 	mov.w	r3, #2544	; 0x9f0
 8001a8c:	617b      	str	r3, [r7, #20]
                          |LED1_OUT_Pin|PWR5V_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a96:	2300      	movs	r3, #0
 8001a98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	481f      	ldr	r0, [pc, #124]	; (8001b20 <MX_GPIO_Init+0x1ac>)
 8001aa2:	f003 fa43 	bl	8004f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AFE_ALERT_IN_Pin|DCHG_IN_Pin;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	481a      	ldr	r0, [pc, #104]	; (8001b24 <MX_GPIO_Init+0x1b0>)
 8001aba:	f003 fa37 	bl	8004f2c <HAL_GPIO_Init>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DDSG_IN_Pin|LED5_OUT_BLUE_Pin|LED5_OUT_GREEN_Pin|LED5_OUT_RED_Pin
<<<<<<< HEAD
 80019c2:	f24f 0304 	movw	r3, #61444	; 0xf004
 80019c6:	617b      	str	r3, [r7, #20]
                          |LED4_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	4813      	ldr	r0, [pc, #76]	; (8001a28 <MX_GPIO_Init+0x1b0>)
 80019dc:	f003 fa28 	bl	8004e30 <HAL_GPIO_Init>
=======
 8001abe:	f24f 0304 	movw	r3, #61444	; 0xf004
 8001ac2:	617b      	str	r3, [r7, #20]
                          |LED4_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4813      	ldr	r0, [pc, #76]	; (8001b24 <MX_GPIO_Init+0x1b0>)
 8001ad8:	f003 fa28 	bl	8004f2c <HAL_GPIO_Init>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /*Configure GPIO pins : PB10 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
<<<<<<< HEAD
 80019e0:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 80019e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e6:	2303      	movs	r3, #3
 80019e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	480c      	ldr	r0, [pc, #48]	; (8001a28 <MX_GPIO_Init+0x1b0>)
 80019f6:	f003 fa1b 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_IN_Pin;
 80019fa:	2304      	movs	r3, #4
 80019fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_IN_GPIO_Port, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4807      	ldr	r0, [pc, #28]	; (8001a2c <MX_GPIO_Init+0x1b4>)
 8001a0e:	f003 fa0f 	bl	8004e30 <HAL_GPIO_Init>

}
 8001a12:	bf00      	nop
 8001a14:	3728      	adds	r7, #40	; 0x28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40020000 	.word	0x40020000
 8001a24:	40020800 	.word	0x40020800
 8001a28:	40020400 	.word	0x40020400
 8001a2c:	40020c00 	.word	0x40020c00

08001a30 <MX_I2C1_Init>:
=======
 8001adc:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 8001ae0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4619      	mov	r1, r3
 8001af0:	480c      	ldr	r0, [pc, #48]	; (8001b24 <MX_GPIO_Init+0x1b0>)
 8001af2:	f003 fa1b 	bl	8004f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_IN_Pin;
 8001af6:	2304      	movs	r3, #4
 8001af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_IN_GPIO_Port, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	4807      	ldr	r0, [pc, #28]	; (8001b28 <MX_GPIO_Init+0x1b4>)
 8001b0a:	f003 fa0f 	bl	8004f2c <HAL_GPIO_Init>

}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	; 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	40020800 	.word	0x40020800
 8001b24:	40020400 	.word	0x40020400
 8001b28:	40020c00 	.word	0x40020c00

08001b2c <MX_I2C1_Init>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
<<<<<<< HEAD
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
=======
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
<<<<<<< HEAD
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a36:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <MX_I2C1_Init+0x54>)
 8001a38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a3c:	4a12      	ldr	r2, [pc, #72]	; (8001a88 <MX_I2C1_Init+0x58>)
 8001a3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 168;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a48:	22a8      	movs	r2, #168	; 0xa8
 8001a4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <MX_I2C1_Init+0x50>)
 8001a6e:	f003 fd35 	bl	80054dc <HAL_I2C_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a78:	f000 f95a 	bl	8001d30 <Error_Handler>
=======
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b32:	4a13      	ldr	r2, [pc, #76]	; (8001b80 <MX_I2C1_Init+0x54>)
 8001b34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b38:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <MX_I2C1_Init+0x58>)
 8001b3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 168;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b44:	22a8      	movs	r2, #168	; 0xa8
 8001b46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <MX_I2C1_Init+0x50>)
 8001b6a:	f003 fd35 	bl	80055d8 <HAL_I2C_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b74:	f000 f95a 	bl	8001e2c <Error_Handler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
<<<<<<< HEAD
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200004f0 	.word	0x200004f0
 8001a84:	40005400 	.word	0x40005400
 8001a88:	000186a0 	.word	0x000186a0

08001a8c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a50      	ldr	r2, [pc, #320]	; (8001bec <HAL_I2C_MspInit+0x160>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	f040 809a 	bne.w	8001be4 <HAL_I2C_MspInit+0x158>
=======
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	200004f4 	.word	0x200004f4
 8001b80:	40005400 	.word	0x40005400
 8001b84:	000186a0 	.word	0x000186a0

08001b88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a50      	ldr	r2, [pc, #320]	; (8001ce8 <HAL_I2C_MspInit+0x160>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	f040 809a 	bne.w	8001ce0 <HAL_I2C_MspInit+0x158>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	4b4e      	ldr	r3, [pc, #312]	; (8001bf0 <HAL_I2C_MspInit+0x164>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	4a4d      	ldr	r2, [pc, #308]	; (8001bf0 <HAL_I2C_MspInit+0x164>)
 8001aba:	f043 0302 	orr.w	r3, r3, #2
 8001abe:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac0:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <HAL_I2C_MspInit+0x164>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	693b      	ldr	r3, [r7, #16]
=======
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	4b4e      	ldr	r3, [pc, #312]	; (8001cec <HAL_I2C_MspInit+0x164>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	4a4d      	ldr	r2, [pc, #308]	; (8001cec <HAL_I2C_MspInit+0x164>)
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
 8001bba:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbc:	4b4b      	ldr	r3, [pc, #300]	; (8001cec <HAL_I2C_MspInit+0x164>)
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	693b      	ldr	r3, [r7, #16]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< HEAD
 8001acc:	23c0      	movs	r3, #192	; 0xc0
 8001ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ad0:	2312      	movs	r3, #18
 8001ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001adc:	2304      	movs	r3, #4
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4843      	ldr	r0, [pc, #268]	; (8001bf4 <HAL_I2C_MspInit+0x168>)
 8001ae8:	f003 f9a2 	bl	8004e30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	4b3f      	ldr	r3, [pc, #252]	; (8001bf0 <HAL_I2C_MspInit+0x164>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	4a3e      	ldr	r2, [pc, #248]	; (8001bf0 <HAL_I2C_MspInit+0x164>)
 8001af6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001afa:	6413      	str	r3, [r2, #64]	; 0x40
 8001afc:	4b3c      	ldr	r3, [pc, #240]	; (8001bf0 <HAL_I2C_MspInit+0x164>)
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
=======
 8001bc8:	23c0      	movs	r3, #192	; 0xc0
 8001bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bcc:	2312      	movs	r3, #18
 8001bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4619      	mov	r1, r3
 8001be2:	4843      	ldr	r0, [pc, #268]	; (8001cf0 <HAL_I2C_MspInit+0x168>)
 8001be4:	f003 f9a2 	bl	8004f2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	4b3f      	ldr	r3, [pc, #252]	; (8001cec <HAL_I2C_MspInit+0x164>)
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	4a3e      	ldr	r2, [pc, #248]	; (8001cec <HAL_I2C_MspInit+0x164>)
 8001bf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf8:	4b3c      	ldr	r3, [pc, #240]	; (8001cec <HAL_I2C_MspInit+0x164>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
<<<<<<< HEAD
 8001b08:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <HAL_I2C_MspInit+0x16c>)
 8001b0a:	4a3c      	ldr	r2, [pc, #240]	; (8001bfc <HAL_I2C_MspInit+0x170>)
 8001b0c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001b0e:	4b3a      	ldr	r3, [pc, #232]	; (8001bf8 <HAL_I2C_MspInit+0x16c>)
 8001b10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b14:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b16:	4b38      	ldr	r3, [pc, #224]	; (8001bf8 <HAL_I2C_MspInit+0x16c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b1c:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <HAL_I2C_MspInit+0x16c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b22:	4b35      	ldr	r3, [pc, #212]	; (8001bf8 <HAL_I2C_MspInit+0x16c>)
 8001b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b28:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b2a:	4b33      	ldr	r3, [pc, #204]	; (8001bf8 <HAL_I2C_MspInit+0x16c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b30:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <HAL_I2C_MspInit+0x16c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001b36:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <HAL_I2C_MspInit+0x16c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001b3c:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_I2C_MspInit+0x16c>)
 8001b3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b42:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b44:	4b2c      	ldr	r3, [pc, #176]	; (8001bf8 <HAL_I2C_MspInit+0x16c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001b4a:	482b      	ldr	r0, [pc, #172]	; (8001bf8 <HAL_I2C_MspInit+0x16c>)
 8001b4c:	f002 fcea 	bl	8004524 <HAL_DMA_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001b56:	f000 f8eb 	bl	8001d30 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a26      	ldr	r2, [pc, #152]	; (8001bf8 <HAL_I2C_MspInit+0x16c>)
 8001b5e:	639a      	str	r2, [r3, #56]	; 0x38
 8001b60:	4a25      	ldr	r2, [pc, #148]	; (8001bf8 <HAL_I2C_MspInit+0x16c>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001b66:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <HAL_I2C_MspInit+0x174>)
 8001b68:	4a26      	ldr	r2, [pc, #152]	; (8001c04 <HAL_I2C_MspInit+0x178>)
 8001b6a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001b6c:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <HAL_I2C_MspInit+0x174>)
 8001b6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b72:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b74:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <HAL_I2C_MspInit+0x174>)
 8001b76:	2240      	movs	r2, #64	; 0x40
 8001b78:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b7a:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <HAL_I2C_MspInit+0x174>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b80:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <HAL_I2C_MspInit+0x174>)
 8001b82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b86:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b88:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <HAL_I2C_MspInit+0x174>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <HAL_I2C_MspInit+0x174>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <HAL_I2C_MspInit+0x174>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_I2C_MspInit+0x174>)
 8001b9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ba0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ba2:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <HAL_I2C_MspInit+0x174>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001ba8:	4815      	ldr	r0, [pc, #84]	; (8001c00 <HAL_I2C_MspInit+0x174>)
 8001baa:	f002 fcbb 	bl	8004524 <HAL_DMA_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8001bb4:	f000 f8bc 	bl	8001d30 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a11      	ldr	r2, [pc, #68]	; (8001c00 <HAL_I2C_MspInit+0x174>)
 8001bbc:	635a      	str	r2, [r3, #52]	; 0x34
 8001bbe:	4a10      	ldr	r2, [pc, #64]	; (8001c00 <HAL_I2C_MspInit+0x174>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2105      	movs	r1, #5
 8001bc8:	201f      	movs	r0, #31
 8001bca:	f002 fc67 	bl	800449c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001bce:	201f      	movs	r0, #31
 8001bd0:	f002 fc90 	bl	80044f4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2105      	movs	r1, #5
 8001bd8:	2020      	movs	r0, #32
 8001bda:	f002 fc5f 	bl	800449c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001bde:	2020      	movs	r0, #32
 8001be0:	f002 fc88 	bl	80044f4 <HAL_NVIC_EnableIRQ>
=======
 8001c04:	4b3b      	ldr	r3, [pc, #236]	; (8001cf4 <HAL_I2C_MspInit+0x16c>)
 8001c06:	4a3c      	ldr	r2, [pc, #240]	; (8001cf8 <HAL_I2C_MspInit+0x170>)
 8001c08:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001c0a:	4b3a      	ldr	r3, [pc, #232]	; (8001cf4 <HAL_I2C_MspInit+0x16c>)
 8001c0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c10:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c12:	4b38      	ldr	r3, [pc, #224]	; (8001cf4 <HAL_I2C_MspInit+0x16c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c18:	4b36      	ldr	r3, [pc, #216]	; (8001cf4 <HAL_I2C_MspInit+0x16c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c1e:	4b35      	ldr	r3, [pc, #212]	; (8001cf4 <HAL_I2C_MspInit+0x16c>)
 8001c20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c24:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c26:	4b33      	ldr	r3, [pc, #204]	; (8001cf4 <HAL_I2C_MspInit+0x16c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c2c:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <HAL_I2C_MspInit+0x16c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001c32:	4b30      	ldr	r3, [pc, #192]	; (8001cf4 <HAL_I2C_MspInit+0x16c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001c38:	4b2e      	ldr	r3, [pc, #184]	; (8001cf4 <HAL_I2C_MspInit+0x16c>)
 8001c3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c3e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c40:	4b2c      	ldr	r3, [pc, #176]	; (8001cf4 <HAL_I2C_MspInit+0x16c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001c46:	482b      	ldr	r0, [pc, #172]	; (8001cf4 <HAL_I2C_MspInit+0x16c>)
 8001c48:	f002 fcea 	bl	8004620 <HAL_DMA_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001c52:	f000 f8eb 	bl	8001e2c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a26      	ldr	r2, [pc, #152]	; (8001cf4 <HAL_I2C_MspInit+0x16c>)
 8001c5a:	639a      	str	r2, [r3, #56]	; 0x38
 8001c5c:	4a25      	ldr	r2, [pc, #148]	; (8001cf4 <HAL_I2C_MspInit+0x16c>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001c62:	4b26      	ldr	r3, [pc, #152]	; (8001cfc <HAL_I2C_MspInit+0x174>)
 8001c64:	4a26      	ldr	r2, [pc, #152]	; (8001d00 <HAL_I2C_MspInit+0x178>)
 8001c66:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001c68:	4b24      	ldr	r3, [pc, #144]	; (8001cfc <HAL_I2C_MspInit+0x174>)
 8001c6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c70:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <HAL_I2C_MspInit+0x174>)
 8001c72:	2240      	movs	r2, #64	; 0x40
 8001c74:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c76:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <HAL_I2C_MspInit+0x174>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c7c:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <HAL_I2C_MspInit+0x174>)
 8001c7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c82:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c84:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <HAL_I2C_MspInit+0x174>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c8a:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <HAL_I2C_MspInit+0x174>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001c90:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <HAL_I2C_MspInit+0x174>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001c96:	4b19      	ldr	r3, [pc, #100]	; (8001cfc <HAL_I2C_MspInit+0x174>)
 8001c98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c9c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_I2C_MspInit+0x174>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001ca4:	4815      	ldr	r0, [pc, #84]	; (8001cfc <HAL_I2C_MspInit+0x174>)
 8001ca6:	f002 fcbb 	bl	8004620 <HAL_DMA_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8001cb0:	f000 f8bc 	bl	8001e2c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a11      	ldr	r2, [pc, #68]	; (8001cfc <HAL_I2C_MspInit+0x174>)
 8001cb8:	635a      	str	r2, [r3, #52]	; 0x34
 8001cba:	4a10      	ldr	r2, [pc, #64]	; (8001cfc <HAL_I2C_MspInit+0x174>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2105      	movs	r1, #5
 8001cc4:	201f      	movs	r0, #31
 8001cc6:	f002 fc67 	bl	8004598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001cca:	201f      	movs	r0, #31
 8001ccc:	f002 fc90 	bl	80045f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2105      	movs	r1, #5
 8001cd4:	2020      	movs	r0, #32
 8001cd6:	f002 fc5f 	bl	8004598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001cda:	2020      	movs	r0, #32
 8001cdc:	f002 fc88 	bl	80045f0 <HAL_NVIC_EnableIRQ>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
<<<<<<< HEAD
 8001be4:	bf00      	nop
 8001be6:	3728      	adds	r7, #40	; 0x28
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40005400 	.word	0x40005400
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020400 	.word	0x40020400
 8001bf8:	20000544 	.word	0x20000544
 8001bfc:	40026010 	.word	0x40026010
 8001c00:	200005a4 	.word	0x200005a4
 8001c04:	400260a0 	.word	0x400260a0

08001c08 <main>:
=======
 8001ce0:	bf00      	nop
 8001ce2:	3728      	adds	r7, #40	; 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40005400 	.word	0x40005400
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020400 	.word	0x40020400
 8001cf4:	20000548 	.word	0x20000548
 8001cf8:	40026010 	.word	0x40026010
 8001cfc:	200005a8 	.word	0x200005a8
 8001d00:	400260a0 	.word	0x400260a0

08001d04 <main>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
=======
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8001c0c:	f000 fc3e 	bl	800248c <HAL_Init>
=======
 8001d08:	f000 fc3e 	bl	8002588 <HAL_Init>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */
  (void)SystemClock_Config();
<<<<<<< HEAD
 8001c10:	f000 f80a 	bl	8001c28 <SystemClock_Config>
  // TODO: Sys_Init - HW
  (void)app_sys_init();
 8001c14:	f7ff fa9a 	bl	800114c <app_sys_init>
=======
 8001d0c:	f000 f80a 	bl	8001d24 <SystemClock_Config>
  // TODO: Sys_Init - HW
  (void)app_sys_init();
 8001d10:	f7ff f9fe 	bl	8001110 <app_sys_init>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  // TODO: Sys_Init - SW Modules
  (void)app_sys_peripheral_init();
<<<<<<< HEAD
 8001c18:	f7ff fab2 	bl	8001180 <app_sys_peripheral_init>
=======
 8001d14:	f7ff fa16 	bl	8001144 <app_sys_peripheral_init>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
<<<<<<< HEAD
 8001c1c:	f7ff fd82 	bl	8001724 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001c20:	f008 f809 	bl	8009c36 <osKernelStart>
=======
 8001d18:	f7ff fd82 	bl	8001820 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d1c:	f008 f809 	bl	8009d32 <osKernelStart>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
<<<<<<< HEAD
 8001c24:	e7fe      	b.n	8001c24 <main+0x1c>
	...

08001c28 <SystemClock_Config>:
=======
 8001d20:	e7fe      	b.n	8001d20 <main+0x1c>
	...

08001d24 <SystemClock_Config>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b094      	sub	sp, #80	; 0x50
 8001c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c2e:	f107 031c 	add.w	r3, r7, #28
 8001c32:	2234      	movs	r2, #52	; 0x34
 8001c34:	2100      	movs	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f009 fca0 	bl	800b57c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c3c:	f107 0308 	add.w	r3, r7, #8
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
=======
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b094      	sub	sp, #80	; 0x50
 8001d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	2234      	movs	r2, #52	; 0x34
 8001d30:	2100      	movs	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f009 fca2 	bl	800b67c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d38:	f107 0308 	add.w	r3, r7, #8
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	4b2c      	ldr	r3, [pc, #176]	; (8001d04 <SystemClock_Config+0xdc>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	4a2b      	ldr	r2, [pc, #172]	; (8001d04 <SystemClock_Config+0xdc>)
 8001c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5c:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <SystemClock_Config+0xdc>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c68:	2300      	movs	r3, #0
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <SystemClock_Config+0xe0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a25      	ldr	r2, [pc, #148]	; (8001d08 <SystemClock_Config+0xe0>)
 8001c72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <SystemClock_Config+0xe0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	683b      	ldr	r3, [r7, #0]
=======
 8001d48:	2300      	movs	r3, #0
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	4b2c      	ldr	r3, [pc, #176]	; (8001e00 <SystemClock_Config+0xdc>)
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	4a2b      	ldr	r2, [pc, #172]	; (8001e00 <SystemClock_Config+0xdc>)
 8001d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d56:	6413      	str	r3, [r2, #64]	; 0x40
 8001d58:	4b29      	ldr	r3, [pc, #164]	; (8001e00 <SystemClock_Config+0xdc>)
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d64:	2300      	movs	r3, #0
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <SystemClock_Config+0xe0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a25      	ldr	r2, [pc, #148]	; (8001e04 <SystemClock_Config+0xe0>)
 8001d6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <SystemClock_Config+0xe0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d7c:	603b      	str	r3, [r7, #0]
 8001d7e:	683b      	ldr	r3, [r7, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
 8001c84:	2301      	movs	r3, #1
 8001c86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c8c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001c9c:	23b4      	movs	r3, #180	; 0xb4
 8001c9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cac:	f107 031c 	add.w	r3, r7, #28
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f005 ff47 	bl	8007b44 <HAL_RCC_OscConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001cbc:	f000 f838 	bl	8001d30 <Error_Handler>
=======
 8001d80:	2301      	movs	r3, #1
 8001d82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d88:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d94:	2304      	movs	r3, #4
 8001d96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001d98:	23b4      	movs	r3, #180	; 0xb4
 8001d9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001da0:	2302      	movs	r3, #2
 8001da2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001da4:	2302      	movs	r3, #2
 8001da6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	4618      	mov	r0, r3
 8001dae:	f005 ff47 	bl	8007c40 <HAL_RCC_OscConfig>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001db8:	f000 f838 	bl	8001e2c <Error_Handler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
<<<<<<< HEAD
 8001cc0:	f005 fab4 	bl	800722c <HAL_PWREx_EnableOverDrive>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001cca:	f000 f831 	bl	8001d30 <Error_Handler>
=======
 8001dbc:	f005 fab4 	bl	8007328 <HAL_PWREx_EnableOverDrive>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001dc6:	f000 f831 	bl	8001e2c <Error_Handler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8001cce:	230f      	movs	r3, #15
 8001cd0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cda:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ce6:	f107 0308 	add.w	r3, r7, #8
 8001cea:	2105      	movs	r1, #5
 8001cec:	4618      	mov	r0, r3
 8001cee:	f005 faed 	bl	80072cc <HAL_RCC_ClockConfig>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001cf8:	f000 f81a 	bl	8001d30 <Error_Handler>
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3750      	adds	r7, #80	; 0x50
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40007000 	.word	0x40007000

08001d0c <HAL_TIM_PeriodElapsedCallback>:
=======
 8001dca:	230f      	movs	r3, #15
 8001dcc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dd6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001de2:	f107 0308 	add.w	r3, r7, #8
 8001de6:	2105      	movs	r1, #5
 8001de8:	4618      	mov	r0, r3
 8001dea:	f005 faed 	bl	80073c8 <HAL_RCC_ClockConfig>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001df4:	f000 f81a 	bl	8001e2c <Error_Handler>
  }
}
 8001df8:	bf00      	nop
 8001dfa:	3750      	adds	r7, #80	; 0x50
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40007000 	.word	0x40007000

08001e08 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
=======
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
<<<<<<< HEAD
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d101      	bne.n	8001d22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d1e:	f000 fbd7 	bl	80024d0 <HAL_IncTick>
=======
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d101      	bne.n	8001e1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e1a:	f000 fbd7 	bl	80025cc <HAL_IncTick>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
<<<<<<< HEAD
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40010000 	.word	0x40010000

08001d30 <Error_Handler>:
=======
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40010000 	.word	0x40010000

08001e2c <Error_Handler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
=======
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8001d34:	b672      	cpsid	i
}
 8001d36:	bf00      	nop
=======
 8001e30:	b672      	cpsid	i
}
 8001e32:	bf00      	nop
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8001d38:	e7fe      	b.n	8001d38 <Error_Handler+0x8>

08001d3a <assert_failed>:
=======
 8001e34:	e7fe      	b.n	8001e34 <Error_Handler+0x8>

08001e36 <assert_failed>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
<<<<<<< HEAD
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	6039      	str	r1, [r7, #0]
=======
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
<<<<<<< HEAD
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <MX_SPI1_Init>:
=======
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <MX_SPI1_Init>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
<<<<<<< HEAD
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
=======
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
<<<<<<< HEAD
 8001d54:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d56:	4a18      	ldr	r2, [pc, #96]	; (8001db8 <MX_SPI1_Init+0x68>)
 8001d58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d62:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001d82:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d84:	2238      	movs	r2, #56	; 0x38
 8001d86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001d9c:	220a      	movs	r2, #10
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001da0:	4804      	ldr	r0, [pc, #16]	; (8001db4 <MX_SPI1_Init+0x64>)
 8001da2:	f006 fa2b 	bl	80081fc <HAL_SPI_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001dac:	f7ff ffc0 	bl	8001d30 <Error_Handler>
=======
 8001e50:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <MX_SPI1_Init+0x64>)
 8001e52:	4a18      	ldr	r2, [pc, #96]	; (8001eb4 <MX_SPI1_Init+0x68>)
 8001e54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <MX_SPI1_Init+0x64>)
 8001e58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e5e:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <MX_SPI1_Init+0x64>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <MX_SPI1_Init+0x64>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <MX_SPI1_Init+0x64>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <MX_SPI1_Init+0x64>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <MX_SPI1_Init+0x64>)
 8001e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <MX_SPI1_Init+0x64>)
 8001e80:	2238      	movs	r2, #56	; 0x38
 8001e82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <MX_SPI1_Init+0x64>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <MX_SPI1_Init+0x64>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e90:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <MX_SPI1_Init+0x64>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <MX_SPI1_Init+0x64>)
 8001e98:	220a      	movs	r2, #10
 8001e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e9c:	4804      	ldr	r0, [pc, #16]	; (8001eb0 <MX_SPI1_Init+0x64>)
 8001e9e:	f006 fa2b 	bl	80082f8 <HAL_SPI_Init>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ea8:	f7ff ffc0 	bl	8001e2c <Error_Handler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
<<<<<<< HEAD
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000604 	.word	0x20000604
 8001db8:	40013000 	.word	0x40013000

08001dbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	; 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a4c      	ldr	r2, [pc, #304]	; (8001f0c <HAL_SPI_MspInit+0x150>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	f040 8092 	bne.w	8001f04 <HAL_SPI_MspInit+0x148>
=======
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000608 	.word	0x20000608
 8001eb4:	40013000 	.word	0x40013000

08001eb8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a4c      	ldr	r2, [pc, #304]	; (8002008 <HAL_SPI_MspInit+0x150>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	f040 8092 	bne.w	8002000 <HAL_SPI_MspInit+0x148>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
<<<<<<< HEAD
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	4b4a      	ldr	r3, [pc, #296]	; (8001f10 <HAL_SPI_MspInit+0x154>)
 8001de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de8:	4a49      	ldr	r2, [pc, #292]	; (8001f10 <HAL_SPI_MspInit+0x154>)
 8001dea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dee:	6453      	str	r3, [r2, #68]	; 0x44
 8001df0:	4b47      	ldr	r3, [pc, #284]	; (8001f10 <HAL_SPI_MspInit+0x154>)
 8001df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	4b43      	ldr	r3, [pc, #268]	; (8001f10 <HAL_SPI_MspInit+0x154>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e04:	4a42      	ldr	r2, [pc, #264]	; (8001f10 <HAL_SPI_MspInit+0x154>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0c:	4b40      	ldr	r3, [pc, #256]	; (8001f10 <HAL_SPI_MspInit+0x154>)
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]
=======
 8001edc:	2300      	movs	r3, #0
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	4b4a      	ldr	r3, [pc, #296]	; (800200c <HAL_SPI_MspInit+0x154>)
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee4:	4a49      	ldr	r2, [pc, #292]	; (800200c <HAL_SPI_MspInit+0x154>)
 8001ee6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eea:	6453      	str	r3, [r2, #68]	; 0x44
 8001eec:	4b47      	ldr	r3, [pc, #284]	; (800200c <HAL_SPI_MspInit+0x154>)
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	4b43      	ldr	r3, [pc, #268]	; (800200c <HAL_SPI_MspInit+0x154>)
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	4a42      	ldr	r2, [pc, #264]	; (800200c <HAL_SPI_MspInit+0x154>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6313      	str	r3, [r2, #48]	; 0x30
 8001f08:	4b40      	ldr	r3, [pc, #256]	; (800200c <HAL_SPI_MspInit+0x154>)
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
<<<<<<< HEAD
 8001e18:	23e0      	movs	r3, #224	; 0xe0
 8001e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e28:	2305      	movs	r3, #5
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	4838      	ldr	r0, [pc, #224]	; (8001f14 <HAL_SPI_MspInit+0x158>)
 8001e34:	f002 fffc 	bl	8004e30 <HAL_GPIO_Init>
=======
 8001f14:	23e0      	movs	r3, #224	; 0xe0
 8001f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f20:	2303      	movs	r3, #3
 8001f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f24:	2305      	movs	r3, #5
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4838      	ldr	r0, [pc, #224]	; (8002010 <HAL_SPI_MspInit+0x158>)
 8001f30:	f002 fffc 	bl	8004f2c <HAL_GPIO_Init>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
<<<<<<< HEAD
 8001e38:	4b37      	ldr	r3, [pc, #220]	; (8001f18 <HAL_SPI_MspInit+0x15c>)
 8001e3a:	4a38      	ldr	r2, [pc, #224]	; (8001f1c <HAL_SPI_MspInit+0x160>)
 8001e3c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001e3e:	4b36      	ldr	r3, [pc, #216]	; (8001f18 <HAL_SPI_MspInit+0x15c>)
 8001e40:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001e44:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e46:	4b34      	ldr	r3, [pc, #208]	; (8001f18 <HAL_SPI_MspInit+0x15c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e4c:	4b32      	ldr	r3, [pc, #200]	; (8001f18 <HAL_SPI_MspInit+0x15c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e52:	4b31      	ldr	r3, [pc, #196]	; (8001f18 <HAL_SPI_MspInit+0x15c>)
 8001e54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e58:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e5a:	4b2f      	ldr	r3, [pc, #188]	; (8001f18 <HAL_SPI_MspInit+0x15c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e60:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <HAL_SPI_MspInit+0x15c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001e66:	4b2c      	ldr	r3, [pc, #176]	; (8001f18 <HAL_SPI_MspInit+0x15c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e6c:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <HAL_SPI_MspInit+0x15c>)
 8001e6e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e72:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e74:	4b28      	ldr	r3, [pc, #160]	; (8001f18 <HAL_SPI_MspInit+0x15c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001e7a:	4827      	ldr	r0, [pc, #156]	; (8001f18 <HAL_SPI_MspInit+0x15c>)
 8001e7c:	f002 fb52 	bl	8004524 <HAL_DMA_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001e86:	f7ff ff53 	bl	8001d30 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a22      	ldr	r2, [pc, #136]	; (8001f18 <HAL_SPI_MspInit+0x15c>)
 8001e8e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e90:	4a21      	ldr	r2, [pc, #132]	; (8001f18 <HAL_SPI_MspInit+0x15c>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001e96:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <HAL_SPI_MspInit+0x164>)
 8001e98:	4a22      	ldr	r2, [pc, #136]	; (8001f24 <HAL_SPI_MspInit+0x168>)
 8001e9a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001e9c:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <HAL_SPI_MspInit+0x164>)
 8001e9e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001ea2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <HAL_SPI_MspInit+0x164>)
 8001ea6:	2240      	movs	r2, #64	; 0x40
 8001ea8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <HAL_SPI_MspInit+0x164>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <HAL_SPI_MspInit+0x164>)
 8001eb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eb6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_SPI_MspInit+0x164>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ebe:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <HAL_SPI_MspInit+0x164>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001ec4:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <HAL_SPI_MspInit+0x164>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001eca:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <HAL_SPI_MspInit+0x164>)
 8001ecc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ed0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ed2:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <HAL_SPI_MspInit+0x164>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001ed8:	4811      	ldr	r0, [pc, #68]	; (8001f20 <HAL_SPI_MspInit+0x164>)
 8001eda:	f002 fb23 	bl	8004524 <HAL_DMA_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8001ee4:	f7ff ff24 	bl	8001d30 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a0d      	ldr	r2, [pc, #52]	; (8001f20 <HAL_SPI_MspInit+0x164>)
 8001eec:	649a      	str	r2, [r3, #72]	; 0x48
 8001eee:	4a0c      	ldr	r2, [pc, #48]	; (8001f20 <HAL_SPI_MspInit+0x164>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2105      	movs	r1, #5
 8001ef8:	2023      	movs	r0, #35	; 0x23
 8001efa:	f002 facf 	bl	800449c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001efe:	2023      	movs	r0, #35	; 0x23
 8001f00:	f002 faf8 	bl	80044f4 <HAL_NVIC_EnableIRQ>
=======
 8001f34:	4b37      	ldr	r3, [pc, #220]	; (8002014 <HAL_SPI_MspInit+0x15c>)
 8001f36:	4a38      	ldr	r2, [pc, #224]	; (8002018 <HAL_SPI_MspInit+0x160>)
 8001f38:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001f3a:	4b36      	ldr	r3, [pc, #216]	; (8002014 <HAL_SPI_MspInit+0x15c>)
 8001f3c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001f40:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f42:	4b34      	ldr	r3, [pc, #208]	; (8002014 <HAL_SPI_MspInit+0x15c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f48:	4b32      	ldr	r3, [pc, #200]	; (8002014 <HAL_SPI_MspInit+0x15c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f4e:	4b31      	ldr	r3, [pc, #196]	; (8002014 <HAL_SPI_MspInit+0x15c>)
 8001f50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f54:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f56:	4b2f      	ldr	r3, [pc, #188]	; (8002014 <HAL_SPI_MspInit+0x15c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <HAL_SPI_MspInit+0x15c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001f62:	4b2c      	ldr	r3, [pc, #176]	; (8002014 <HAL_SPI_MspInit+0x15c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001f68:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <HAL_SPI_MspInit+0x15c>)
 8001f6a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f6e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f70:	4b28      	ldr	r3, [pc, #160]	; (8002014 <HAL_SPI_MspInit+0x15c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001f76:	4827      	ldr	r0, [pc, #156]	; (8002014 <HAL_SPI_MspInit+0x15c>)
 8001f78:	f002 fb52 	bl	8004620 <HAL_DMA_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001f82:	f7ff ff53 	bl	8001e2c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a22      	ldr	r2, [pc, #136]	; (8002014 <HAL_SPI_MspInit+0x15c>)
 8001f8a:	64da      	str	r2, [r3, #76]	; 0x4c
 8001f8c:	4a21      	ldr	r2, [pc, #132]	; (8002014 <HAL_SPI_MspInit+0x15c>)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001f92:	4b22      	ldr	r3, [pc, #136]	; (800201c <HAL_SPI_MspInit+0x164>)
 8001f94:	4a22      	ldr	r2, [pc, #136]	; (8002020 <HAL_SPI_MspInit+0x168>)
 8001f96:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001f98:	4b20      	ldr	r3, [pc, #128]	; (800201c <HAL_SPI_MspInit+0x164>)
 8001f9a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001f9e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	; (800201c <HAL_SPI_MspInit+0x164>)
 8001fa2:	2240      	movs	r2, #64	; 0x40
 8001fa4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_SPI_MspInit+0x164>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fac:	4b1b      	ldr	r3, [pc, #108]	; (800201c <HAL_SPI_MspInit+0x164>)
 8001fae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fb2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fb4:	4b19      	ldr	r3, [pc, #100]	; (800201c <HAL_SPI_MspInit+0x164>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fba:	4b18      	ldr	r3, [pc, #96]	; (800201c <HAL_SPI_MspInit+0x164>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001fc0:	4b16      	ldr	r3, [pc, #88]	; (800201c <HAL_SPI_MspInit+0x164>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <HAL_SPI_MspInit+0x164>)
 8001fc8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001fcc:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fce:	4b13      	ldr	r3, [pc, #76]	; (800201c <HAL_SPI_MspInit+0x164>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001fd4:	4811      	ldr	r0, [pc, #68]	; (800201c <HAL_SPI_MspInit+0x164>)
 8001fd6:	f002 fb23 	bl	8004620 <HAL_DMA_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8001fe0:	f7ff ff24 	bl	8001e2c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a0d      	ldr	r2, [pc, #52]	; (800201c <HAL_SPI_MspInit+0x164>)
 8001fe8:	649a      	str	r2, [r3, #72]	; 0x48
 8001fea:	4a0c      	ldr	r2, [pc, #48]	; (800201c <HAL_SPI_MspInit+0x164>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2105      	movs	r1, #5
 8001ff4:	2023      	movs	r0, #35	; 0x23
 8001ff6:	f002 facf 	bl	8004598 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001ffa:	2023      	movs	r0, #35	; 0x23
 8001ffc:	f002 faf8 	bl	80045f0 <HAL_NVIC_EnableIRQ>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
<<<<<<< HEAD
 8001f04:	bf00      	nop
 8001f06:	3728      	adds	r7, #40	; 0x28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40013000 	.word	0x40013000
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	20000684 	.word	0x20000684
 8001f1c:	40026410 	.word	0x40026410
 8001f20:	200006e4 	.word	0x200006e4
 8001f24:	40026458 	.word	0x40026458

08001f28 <HAL_MspInit>:
=======
 8002000:	bf00      	nop
 8002002:	3728      	adds	r7, #40	; 0x28
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40013000 	.word	0x40013000
 800200c:	40023800 	.word	0x40023800
 8002010:	40020000 	.word	0x40020000
 8002014:	20000688 	.word	0x20000688
 8002018:	40026410 	.word	0x40026410
 800201c:	200006e8 	.word	0x200006e8
 8002020:	40026458 	.word	0x40026458

08002024 <HAL_MspInit>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
=======
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_MspInit+0x54>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	4a11      	ldr	r2, [pc, #68]	; (8001f7c <HAL_MspInit+0x54>)
 8001f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <HAL_MspInit+0x54>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_MspInit+0x54>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <HAL_MspInit+0x54>)
 8001f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f58:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5a:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <HAL_MspInit+0x54>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]
=======
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_MspInit+0x54>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a11      	ldr	r2, [pc, #68]	; (8002078 <HAL_MspInit+0x54>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_MspInit+0x54>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_MspInit+0x54>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <HAL_MspInit+0x54>)
 8002050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_MspInit+0x54>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	683b      	ldr	r3, [r7, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
<<<<<<< HEAD
 8001f66:	2200      	movs	r2, #0
 8001f68:	210f      	movs	r1, #15
 8001f6a:	f06f 0001 	mvn.w	r0, #1
 8001f6e:	f002 fa95 	bl	800449c <HAL_NVIC_SetPriority>
=======
 8002062:	2200      	movs	r2, #0
 8002064:	210f      	movs	r1, #15
 8002066:	f06f 0001 	mvn.w	r0, #1
 800206a:	f002 fa95 	bl	8004598 <HAL_NVIC_SetPriority>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800

08001f80 <HAL_InitTick>:
=======
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800

0800207c <HAL_InitTick>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08c      	sub	sp, #48	; 0x30
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
=======
 800207c:	b580      	push	{r7, lr}
 800207e:	b08c      	sub	sp, #48	; 0x30
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< HEAD
 8001f90:	2300      	movs	r3, #0
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	4b2f      	ldr	r3, [pc, #188]	; (8002054 <HAL_InitTick+0xd4>)
 8001f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f98:	4a2e      	ldr	r2, [pc, #184]	; (8002054 <HAL_InitTick+0xd4>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa0:	4b2c      	ldr	r3, [pc, #176]	; (8002054 <HAL_InitTick+0xd4>)
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fac:	f107 020c 	add.w	r2, r7, #12
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f005 fb62 	bl	8007680 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001fbc:	f005 fb4c 	bl	8007658 <HAL_RCC_GetPCLK2Freq>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc8:	4a23      	ldr	r2, [pc, #140]	; (8002058 <HAL_InitTick+0xd8>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	0c9b      	lsrs	r3, r3, #18
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001fd4:	4b21      	ldr	r3, [pc, #132]	; (800205c <HAL_InitTick+0xdc>)
 8001fd6:	4a22      	ldr	r2, [pc, #136]	; (8002060 <HAL_InitTick+0xe0>)
 8001fd8:	601a      	str	r2, [r3, #0]
=======
 800208c:	2300      	movs	r3, #0
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	4b2f      	ldr	r3, [pc, #188]	; (8002150 <HAL_InitTick+0xd4>)
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	4a2e      	ldr	r2, [pc, #184]	; (8002150 <HAL_InitTick+0xd4>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6453      	str	r3, [r2, #68]	; 0x44
 800209c:	4b2c      	ldr	r3, [pc, #176]	; (8002150 <HAL_InitTick+0xd4>)
 800209e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020a8:	f107 020c 	add.w	r2, r7, #12
 80020ac:	f107 0310 	add.w	r3, r7, #16
 80020b0:	4611      	mov	r1, r2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f005 fb62 	bl	800777c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80020b8:	f005 fb4c 	bl	8007754 <HAL_RCC_GetPCLK2Freq>
 80020bc:	4603      	mov	r3, r0
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c4:	4a23      	ldr	r2, [pc, #140]	; (8002154 <HAL_InitTick+0xd8>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	0c9b      	lsrs	r3, r3, #18
 80020cc:	3b01      	subs	r3, #1
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80020d0:	4b21      	ldr	r3, [pc, #132]	; (8002158 <HAL_InitTick+0xdc>)
 80020d2:	4a22      	ldr	r2, [pc, #136]	; (800215c <HAL_InitTick+0xe0>)
 80020d4:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
<<<<<<< HEAD
 8001fda:	4b20      	ldr	r3, [pc, #128]	; (800205c <HAL_InitTick+0xdc>)
 8001fdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fe0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001fe2:	4a1e      	ldr	r2, [pc, #120]	; (800205c <HAL_InitTick+0xdc>)
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	; (800205c <HAL_InitTick+0xdc>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_InitTick+0xdc>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_InitTick+0xdc>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001ffa:	4818      	ldr	r0, [pc, #96]	; (800205c <HAL_InitTick+0xdc>)
 8001ffc:	f006 fea2 	bl	8008d44 <HAL_TIM_Base_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002006:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800200a:	2b00      	cmp	r3, #0
 800200c:	d11b      	bne.n	8002046 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800200e:	4813      	ldr	r0, [pc, #76]	; (800205c <HAL_InitTick+0xdc>)
 8002010:	f006 ff92 	bl	8008f38 <HAL_TIM_Base_Start_IT>
 8002014:	4603      	mov	r3, r0
 8002016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800201a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800201e:	2b00      	cmp	r3, #0
 8002020:	d111      	bne.n	8002046 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002022:	2019      	movs	r0, #25
 8002024:	f002 fa66 	bl	80044f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b0f      	cmp	r3, #15
 800202c:	d808      	bhi.n	8002040 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800202e:	2200      	movs	r2, #0
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	2019      	movs	r0, #25
 8002034:	f002 fa32 	bl	800449c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002038:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <HAL_InitTick+0xe4>)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e002      	b.n	8002046 <HAL_InitTick+0xc6>
=======
 80020d6:	4b20      	ldr	r3, [pc, #128]	; (8002158 <HAL_InitTick+0xdc>)
 80020d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80020de:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <HAL_InitTick+0xdc>)
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80020e4:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <HAL_InitTick+0xdc>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ea:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <HAL_InitTick+0xdc>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_InitTick+0xdc>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80020f6:	4818      	ldr	r0, [pc, #96]	; (8002158 <HAL_InitTick+0xdc>)
 80020f8:	f006 fea2 	bl	8008e40 <HAL_TIM_Base_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002102:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002106:	2b00      	cmp	r3, #0
 8002108:	d11b      	bne.n	8002142 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800210a:	4813      	ldr	r0, [pc, #76]	; (8002158 <HAL_InitTick+0xdc>)
 800210c:	f006 ff92 	bl	8009034 <HAL_TIM_Base_Start_IT>
 8002110:	4603      	mov	r3, r0
 8002112:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002116:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800211a:	2b00      	cmp	r3, #0
 800211c:	d111      	bne.n	8002142 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800211e:	2019      	movs	r0, #25
 8002120:	f002 fa66 	bl	80045f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b0f      	cmp	r3, #15
 8002128:	d808      	bhi.n	800213c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800212a:	2200      	movs	r2, #0
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	2019      	movs	r0, #25
 8002130:	f002 fa32 	bl	8004598 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002134:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <HAL_InitTick+0xe4>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	e002      	b.n	8002142 <HAL_InitTick+0xc6>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
      else
      {
        status = HAL_ERROR;
<<<<<<< HEAD
 8002040:	2301      	movs	r3, #1
 8002042:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
=======
 800213c:	2301      	movs	r3, #1
 800213e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }
  }

 /* Return function status */
  return status;
<<<<<<< HEAD
 8002046:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800204a:	4618      	mov	r0, r3
 800204c:	3730      	adds	r7, #48	; 0x30
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800
 8002058:	431bde83 	.word	0x431bde83
 800205c:	20000744 	.word	0x20000744
 8002060:	40010000 	.word	0x40010000
 8002064:	20000004 	.word	0x20000004

08002068 <NMI_Handler>:
=======
 8002142:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002146:	4618      	mov	r0, r3
 8002148:	3730      	adds	r7, #48	; 0x30
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023800 	.word	0x40023800
 8002154:	431bde83 	.word	0x431bde83
 8002158:	20000748 	.word	0x20000748
 800215c:	40010000 	.word	0x40010000
 8002160:	20000004 	.word	0x20000004

08002164 <NMI_Handler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
=======
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 800206c:	e7fe      	b.n	800206c <NMI_Handler+0x4>

0800206e <HardFault_Handler>:
=======
 8002168:	e7fe      	b.n	8002168 <NMI_Handler+0x4>

0800216a <HardFault_Handler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
=======
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002072:	e7fe      	b.n	8002072 <HardFault_Handler+0x4>

08002074 <MemManage_Handler>:
=======
 800216e:	e7fe      	b.n	800216e <HardFault_Handler+0x4>

08002170 <MemManage_Handler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
=======
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002078:	e7fe      	b.n	8002078 <MemManage_Handler+0x4>

0800207a <BusFault_Handler>:
=======
 8002174:	e7fe      	b.n	8002174 <MemManage_Handler+0x4>

08002176 <BusFault_Handler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
=======
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800207e:	e7fe      	b.n	800207e <BusFault_Handler+0x4>

08002080 <UsageFault_Handler>:
=======
 800217a:	e7fe      	b.n	800217a <BusFault_Handler+0x4>

0800217c <UsageFault_Handler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
=======
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002084:	e7fe      	b.n	8002084 <UsageFault_Handler+0x4>

08002086 <DebugMon_Handler>:
=======
 8002180:	e7fe      	b.n	8002180 <UsageFault_Handler+0x4>

08002182 <DebugMon_Handler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
=======
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <WWDG_IRQHandler>:
=======
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <WWDG_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
<<<<<<< HEAD
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
=======
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
<<<<<<< HEAD
 8002098:	4802      	ldr	r0, [pc, #8]	; (80020a4 <WWDG_IRQHandler+0x10>)
 800209a:	f007 fd8b 	bl	8009bb4 <HAL_WWDG_IRQHandler>
=======
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <WWDG_IRQHandler+0x10>)
 8002196:	f007 fd8b 	bl	8009cb0 <HAL_WWDG_IRQHandler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
<<<<<<< HEAD
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200007d4 	.word	0x200007d4

080020a8 <DMA1_Stream0_IRQHandler>:
=======
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200007d8 	.word	0x200007d8

080021a4 <DMA1_Stream0_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
<<<<<<< HEAD
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
=======
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
<<<<<<< HEAD
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <DMA1_Stream0_IRQHandler+0x10>)
 80020ae:	f002 fc75 	bl	800499c <HAL_DMA_IRQHandler>
=======
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <DMA1_Stream0_IRQHandler+0x10>)
 80021aa:	f002 fc75 	bl	8004a98 <HAL_DMA_IRQHandler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
<<<<<<< HEAD
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000544 	.word	0x20000544

080020bc <DMA1_Stream6_IRQHandler>:
=======
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000548 	.word	0x20000548

080021b8 <DMA1_Stream6_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
<<<<<<< HEAD
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
=======
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
<<<<<<< HEAD
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <DMA1_Stream6_IRQHandler+0x10>)
 80020c2:	f002 fc6b 	bl	800499c <HAL_DMA_IRQHandler>
=======
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <DMA1_Stream6_IRQHandler+0x10>)
 80021be:	f002 fc6b 	bl	8004a98 <HAL_DMA_IRQHandler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
<<<<<<< HEAD
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200005a4 	.word	0x200005a4

080020d0 <ADC_IRQHandler>:
=======
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200005a8 	.word	0x200005a8

080021cc <ADC_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
<<<<<<< HEAD
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
=======
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
<<<<<<< HEAD
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <ADC_IRQHandler+0x10>)
 80020d6:	f000 fca3 	bl	8002a20 <HAL_ADC_IRQHandler>
=======
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <ADC_IRQHandler+0x10>)
 80021d2:	f000 fca3 	bl	8002b1c <HAL_ADC_IRQHandler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
<<<<<<< HEAD
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	200000a4 	.word	0x200000a4

080020e4 <CAN1_TX_IRQHandler>:
=======
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200000a0 	.word	0x200000a0

080021e0 <CAN1_TX_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
<<<<<<< HEAD
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
=======
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
<<<<<<< HEAD
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <CAN1_TX_IRQHandler+0x10>)
 80020ea:	f001 fecb 	bl	8003e84 <HAL_CAN_IRQHandler>
=======
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <CAN1_TX_IRQHandler+0x10>)
 80021e6:	f001 fecb 	bl	8003f80 <HAL_CAN_IRQHandler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
<<<<<<< HEAD
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200001c4 	.word	0x200001c4

080020f8 <CAN1_RX0_IRQHandler>:
=======
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200001c8 	.word	0x200001c8

080021f4 <CAN1_RX0_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
<<<<<<< HEAD
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
=======
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
<<<<<<< HEAD
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <CAN1_RX0_IRQHandler+0x10>)
 80020fe:	f001 fec1 	bl	8003e84 <HAL_CAN_IRQHandler>
=======
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <CAN1_RX0_IRQHandler+0x10>)
 80021fa:	f001 fec1 	bl	8003f80 <HAL_CAN_IRQHandler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
<<<<<<< HEAD
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200001c4 	.word	0x200001c4

0800210c <CAN1_RX1_IRQHandler>:
=======
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200001c8 	.word	0x200001c8

08002208 <CAN1_RX1_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
<<<<<<< HEAD
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
=======
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
<<<<<<< HEAD
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <CAN1_RX1_IRQHandler+0x10>)
 8002112:	f001 feb7 	bl	8003e84 <HAL_CAN_IRQHandler>
=======
 800220c:	4802      	ldr	r0, [pc, #8]	; (8002218 <CAN1_RX1_IRQHandler+0x10>)
 800220e:	f001 feb7 	bl	8003f80 <HAL_CAN_IRQHandler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
<<<<<<< HEAD
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	200001c4 	.word	0x200001c4

08002120 <CAN1_SCE_IRQHandler>:
=======
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200001c8 	.word	0x200001c8

0800221c <CAN1_SCE_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
<<<<<<< HEAD
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
=======
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
<<<<<<< HEAD
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <CAN1_SCE_IRQHandler+0x10>)
 8002126:	f001 fead 	bl	8003e84 <HAL_CAN_IRQHandler>
=======
 8002220:	4802      	ldr	r0, [pc, #8]	; (800222c <CAN1_SCE_IRQHandler+0x10>)
 8002222:	f001 fead 	bl	8003f80 <HAL_CAN_IRQHandler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
<<<<<<< HEAD
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200001c4 	.word	0x200001c4

08002134 <TIM1_UP_TIM10_IRQHandler>:
=======
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200001c8 	.word	0x200001c8

08002230 <TIM1_UP_TIM10_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
<<<<<<< HEAD
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
=======
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
<<<<<<< HEAD
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800213a:	f006 ffc3 	bl	80090c4 <HAL_TIM_IRQHandler>
=======
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002236:	f006 ffc3 	bl	80091c0 <HAL_TIM_IRQHandler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
<<<<<<< HEAD
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000744 	.word	0x20000744

08002148 <I2C1_EV_IRQHandler>:
=======
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000748 	.word	0x20000748

08002244 <I2C1_EV_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
<<<<<<< HEAD
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
=======
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
<<<<<<< HEAD
 800214c:	4802      	ldr	r0, [pc, #8]	; (8002158 <I2C1_EV_IRQHandler+0x10>)
 800214e:	f003 fb91 	bl	8005874 <HAL_I2C_EV_IRQHandler>
=======
 8002248:	4802      	ldr	r0, [pc, #8]	; (8002254 <I2C1_EV_IRQHandler+0x10>)
 800224a:	f003 fb91 	bl	8005970 <HAL_I2C_EV_IRQHandler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
<<<<<<< HEAD
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200004f0 	.word	0x200004f0

0800215c <I2C1_ER_IRQHandler>:
=======
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	200004f4 	.word	0x200004f4

08002258 <I2C1_ER_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
<<<<<<< HEAD
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
=======
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
<<<<<<< HEAD
 8002160:	4802      	ldr	r0, [pc, #8]	; (800216c <I2C1_ER_IRQHandler+0x10>)
 8002162:	f003 fcf8 	bl	8005b56 <HAL_I2C_ER_IRQHandler>
=======
 800225c:	4802      	ldr	r0, [pc, #8]	; (8002268 <I2C1_ER_IRQHandler+0x10>)
 800225e:	f003 fcf8 	bl	8005c52 <HAL_I2C_ER_IRQHandler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
<<<<<<< HEAD
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200004f0 	.word	0x200004f0

08002170 <SPI1_IRQHandler>:
=======
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200004f4 	.word	0x200004f4

0800226c <SPI1_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
<<<<<<< HEAD
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
=======
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
<<<<<<< HEAD
 8002174:	4802      	ldr	r0, [pc, #8]	; (8002180 <SPI1_IRQHandler+0x10>)
 8002176:	f006 fbb5 	bl	80088e4 <HAL_SPI_IRQHandler>
=======
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <SPI1_IRQHandler+0x10>)
 8002272:	f006 fbb5 	bl	80089e0 <HAL_SPI_IRQHandler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
<<<<<<< HEAD
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20000604 	.word	0x20000604

08002184 <DMA2_Stream0_IRQHandler>:
=======
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000608 	.word	0x20000608

08002280 <DMA2_Stream0_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
<<<<<<< HEAD
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
=======
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
<<<<<<< HEAD
 8002188:	4802      	ldr	r0, [pc, #8]	; (8002194 <DMA2_Stream0_IRQHandler+0x10>)
 800218a:	f002 fc07 	bl	800499c <HAL_DMA_IRQHandler>
=======
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <DMA2_Stream0_IRQHandler+0x10>)
 8002286:	f002 fc07 	bl	8004a98 <HAL_DMA_IRQHandler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
<<<<<<< HEAD
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000684 	.word	0x20000684

08002198 <DMA2_Stream3_IRQHandler>:
=======
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000688 	.word	0x20000688

08002294 <DMA2_Stream3_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
<<<<<<< HEAD
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
=======
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
<<<<<<< HEAD
 800219c:	4802      	ldr	r0, [pc, #8]	; (80021a8 <DMA2_Stream3_IRQHandler+0x10>)
 800219e:	f002 fbfd 	bl	800499c <HAL_DMA_IRQHandler>
=======
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <DMA2_Stream3_IRQHandler+0x10>)
 800229a:	f002 fbfd 	bl	8004a98 <HAL_DMA_IRQHandler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
<<<<<<< HEAD
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200006e4 	.word	0x200006e4

080021ac <DMA2_Stream4_IRQHandler>:
=======
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200006e8 	.word	0x200006e8

080022a8 <DMA2_Stream4_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
<<<<<<< HEAD
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
=======
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
<<<<<<< HEAD
 80021b0:	4802      	ldr	r0, [pc, #8]	; (80021bc <DMA2_Stream4_IRQHandler+0x10>)
 80021b2:	f002 fbf3 	bl	800499c <HAL_DMA_IRQHandler>
=======
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <DMA2_Stream4_IRQHandler+0x10>)
 80022ae:	f002 fbf3 	bl	8004a98 <HAL_DMA_IRQHandler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
<<<<<<< HEAD
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200000ec 	.word	0x200000ec

080021c0 <_sbrk>:
=======
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200000e8 	.word	0x200000e8

080022bc <_sbrk>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
=======
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 80021c8:	4a14      	ldr	r2, [pc, #80]	; (800221c <_sbrk+0x5c>)
 80021ca:	4b15      	ldr	r3, [pc, #84]	; (8002220 <_sbrk+0x60>)
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	613b      	str	r3, [r7, #16]
=======
 80022c4:	4a14      	ldr	r2, [pc, #80]	; (8002318 <_sbrk+0x5c>)
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <_sbrk+0x60>)
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	613b      	str	r3, [r7, #16]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 80021d4:	4b13      	ldr	r3, [pc, #76]	; (8002224 <_sbrk+0x64>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d102      	bne.n	80021e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021dc:	4b11      	ldr	r3, [pc, #68]	; (8002224 <_sbrk+0x64>)
 80021de:	4a12      	ldr	r2, [pc, #72]	; (8002228 <_sbrk+0x68>)
 80021e0:	601a      	str	r2, [r3, #0]
=======
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <_sbrk+0x64>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <_sbrk+0x64>)
 80022da:	4a12      	ldr	r2, [pc, #72]	; (8002324 <_sbrk+0x68>)
 80022dc:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <_sbrk+0x64>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d207      	bcs.n	8002200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021f0:	f009 f98c 	bl	800b50c <__errno>
 80021f4:	4603      	mov	r3, r0
 80021f6:	220c      	movs	r2, #12
 80021f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021fa:	f04f 33ff 	mov.w	r3, #4294967295
 80021fe:	e009      	b.n	8002214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002200:	4b08      	ldr	r3, [pc, #32]	; (8002224 <_sbrk+0x64>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002206:	4b07      	ldr	r3, [pc, #28]	; (8002224 <_sbrk+0x64>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	4a05      	ldr	r2, [pc, #20]	; (8002224 <_sbrk+0x64>)
 8002210:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002212:	68fb      	ldr	r3, [r7, #12]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20020000 	.word	0x20020000
 8002220:	00000400 	.word	0x00000400
 8002224:	2000078c 	.word	0x2000078c
 8002228:	20010358 	.word	0x20010358

0800222c <SystemInit>:
=======
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <_sbrk+0x64>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d207      	bcs.n	80022fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022ec:	f009 f98e 	bl	800b60c <__errno>
 80022f0:	4603      	mov	r3, r0
 80022f2:	220c      	movs	r2, #12
 80022f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
 80022fa:	e009      	b.n	8002310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <_sbrk+0x64>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <_sbrk+0x64>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <_sbrk+0x64>)
 800230c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800230e:	68fb      	ldr	r3, [r7, #12]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20020000 	.word	0x20020000
 800231c:	00000400 	.word	0x00000400
 8002320:	20000790 	.word	0x20000790
 8002324:	20010360 	.word	0x20010360

08002328 <SystemInit>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <SystemInit+0x20>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002236:	4a05      	ldr	r2, [pc, #20]	; (800224c <SystemInit+0x20>)
 8002238:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800223c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <SystemInit+0x20>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	4a05      	ldr	r2, [pc, #20]	; (8002348 <SystemInit+0x20>)
 8002334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <MX_USART1_UART_Init>:
=======
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <MX_USART1_UART_Init>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
=======
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <MX_USART1_UART_Init+0x4c>)
 8002256:	4a12      	ldr	r2, [pc, #72]	; (80022a0 <MX_USART1_UART_Init+0x50>)
 8002258:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <MX_USART1_UART_Init+0x4c>)
 800225c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002260:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <MX_USART1_UART_Init+0x4c>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <MX_USART1_UART_Init+0x4c>)
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <MX_USART1_UART_Init+0x4c>)
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <MX_USART1_UART_Init+0x4c>)
 8002276:	220c      	movs	r2, #12
 8002278:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <MX_USART1_UART_Init+0x4c>)
 800227c:	2200      	movs	r2, #0
 800227e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <MX_USART1_UART_Init+0x4c>)
 8002282:	2200      	movs	r2, #0
 8002284:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002286:	4805      	ldr	r0, [pc, #20]	; (800229c <MX_USART1_UART_Init+0x4c>)
 8002288:	f007 f900 	bl	800948c <HAL_UART_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002292:	f7ff fd4d 	bl	8001d30 <Error_Handler>
=======
 8002350:	4b11      	ldr	r3, [pc, #68]	; (8002398 <MX_USART1_UART_Init+0x4c>)
 8002352:	4a12      	ldr	r2, [pc, #72]	; (800239c <MX_USART1_UART_Init+0x50>)
 8002354:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <MX_USART1_UART_Init+0x4c>)
 8002358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800235c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <MX_USART1_UART_Init+0x4c>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <MX_USART1_UART_Init+0x4c>)
 8002366:	2200      	movs	r2, #0
 8002368:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <MX_USART1_UART_Init+0x4c>)
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <MX_USART1_UART_Init+0x4c>)
 8002372:	220c      	movs	r2, #12
 8002374:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <MX_USART1_UART_Init+0x4c>)
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <MX_USART1_UART_Init+0x4c>)
 800237e:	2200      	movs	r2, #0
 8002380:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002382:	4805      	ldr	r0, [pc, #20]	; (8002398 <MX_USART1_UART_Init+0x4c>)
 8002384:	f007 f900 	bl	8009588 <HAL_UART_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800238e:	f7ff fd4d 	bl	8001e2c <Error_Handler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000790 	.word	0x20000790
 80022a0:	40011000 	.word	0x40011000

080022a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a19      	ldr	r2, [pc, #100]	; (8002328 <HAL_UART_MspInit+0x84>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d12c      	bne.n	8002320 <HAL_UART_MspInit+0x7c>
=======
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000794 	.word	0x20000794
 800239c:	40011000 	.word	0x40011000

080023a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	; 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a19      	ldr	r2, [pc, #100]	; (8002424 <HAL_UART_MspInit+0x84>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d12c      	bne.n	800241c <HAL_UART_MspInit+0x7c>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_UART_MspInit+0x88>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	4a17      	ldr	r2, [pc, #92]	; (800232c <HAL_UART_MspInit+0x88>)
 80022d0:	f043 0310 	orr.w	r3, r3, #16
 80022d4:	6453      	str	r3, [r2, #68]	; 0x44
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <HAL_UART_MspInit+0x88>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	f003 0310 	and.w	r3, r3, #16
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_UART_MspInit+0x88>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a10      	ldr	r2, [pc, #64]	; (800232c <HAL_UART_MspInit+0x88>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_UART_MspInit+0x88>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
=======
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	4b18      	ldr	r3, [pc, #96]	; (8002428 <HAL_UART_MspInit+0x88>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	4a17      	ldr	r2, [pc, #92]	; (8002428 <HAL_UART_MspInit+0x88>)
 80023cc:	f043 0310 	orr.w	r3, r3, #16
 80023d0:	6453      	str	r3, [r2, #68]	; 0x44
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <HAL_UART_MspInit+0x88>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <HAL_UART_MspInit+0x88>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	4a10      	ldr	r2, [pc, #64]	; (8002428 <HAL_UART_MspInit+0x88>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6313      	str	r3, [r2, #48]	; 0x30
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <HAL_UART_MspInit+0x88>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
<<<<<<< HEAD
 80022fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230c:	2303      	movs	r3, #3
 800230e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002310:	2307      	movs	r3, #7
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4619      	mov	r1, r3
 800231a:	4805      	ldr	r0, [pc, #20]	; (8002330 <HAL_UART_MspInit+0x8c>)
 800231c:	f002 fd88 	bl	8004e30 <HAL_GPIO_Init>
=======
 80023fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002408:	2303      	movs	r3, #3
 800240a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800240c:	2307      	movs	r3, #7
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	4619      	mov	r1, r3
 8002416:	4805      	ldr	r0, [pc, #20]	; (800242c <HAL_UART_MspInit+0x8c>)
 8002418:	f002 fd88 	bl	8004f2c <HAL_GPIO_Init>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
<<<<<<< HEAD
 8002320:	bf00      	nop
 8002322:	3728      	adds	r7, #40	; 0x28
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40011000 	.word	0x40011000
 800232c:	40023800 	.word	0x40023800
 8002330:	40020000 	.word	0x40020000

08002334 <Reset_Handler>:
=======
 800241c:	bf00      	nop
 800241e:	3728      	adds	r7, #40	; 0x28
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40011000 	.word	0x40011000
 8002428:	40023800 	.word	0x40023800
 800242c:	40020000 	.word	0x40020000

08002430 <Reset_Handler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
<<<<<<< HEAD
 8002334:	f8df d034 	ldr.w	sp, [pc, #52]	; 800236c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002338:	480d      	ldr	r0, [pc, #52]	; (8002370 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800233a:	490e      	ldr	r1, [pc, #56]	; (8002374 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800233c:	4a0e      	ldr	r2, [pc, #56]	; (8002378 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800233e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002340:	e002      	b.n	8002348 <LoopCopyDataInit>

08002342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002346:	3304      	adds	r3, #4

08002348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800234a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800234c:	d3f9      	bcc.n	8002342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800234e:	4a0b      	ldr	r2, [pc, #44]	; (800237c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002350:	4c0b      	ldr	r4, [pc, #44]	; (8002380 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002354:	e001      	b.n	800235a <LoopFillZerobss>

08002356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002358:	3204      	adds	r2, #4

0800235a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800235a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800235c:	d3fb      	bcc.n	8002356 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800235e:	f7ff ff65 	bl	800222c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002362:	f009 f8d9 	bl	800b518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002366:	f7ff fc4f 	bl	8001c08 <main>
  bx  lr    
 800236a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800236c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002374:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002378:	0800c314 	.word	0x0800c314
  ldr r2, =_sbss
 800237c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002380:	20010358 	.word	0x20010358

08002384 <CAN2_RX0_IRQHandler>:
=======
 8002430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002468 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002434:	480d      	ldr	r0, [pc, #52]	; (800246c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002436:	490e      	ldr	r1, [pc, #56]	; (8002470 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002438:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800243c:	e002      	b.n	8002444 <LoopCopyDataInit>

0800243e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800243e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002442:	3304      	adds	r3, #4

08002444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002448:	d3f9      	bcc.n	800243e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800244a:	4a0b      	ldr	r2, [pc, #44]	; (8002478 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800244c:	4c0b      	ldr	r4, [pc, #44]	; (800247c <LoopFillZerobss+0x26>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002450:	e001      	b.n	8002456 <LoopFillZerobss>

08002452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002454:	3204      	adds	r2, #4

08002456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002458:	d3fb      	bcc.n	8002452 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800245a:	f7ff ff65 	bl	8002328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800245e:	f009 f8db 	bl	800b618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002462:	f7ff fc4f 	bl	8001d04 <main>
  bx  lr    
 8002466:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002468:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800246c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002470:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002474:	0800c414 	.word	0x0800c414
  ldr r2, =_sbss
 8002478:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800247c:	2001035c 	.word	0x2001035c

08002480 <CAN2_RX0_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8002384:	e7fe      	b.n	8002384 <CAN2_RX0_IRQHandler>

08002386 <stm32_lock_acquire>:
=======
 8002480:	e7fe      	b.n	8002480 <CAN2_RX0_IRQHandler>

08002482 <stm32_lock_acquire>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
<<<<<<< HEAD
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d104      	bne.n	800239e <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002394:	b672      	cpsid	i
}
 8002396:	bf00      	nop
 8002398:	f7ff fcca 	bl	8001d30 <Error_Handler>
 800239c:	e7fe      	b.n	800239c <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	7a1b      	ldrb	r3, [r3, #8]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d904      	bls.n	80023b0 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80023a6:	b672      	cpsid	i
}
 80023a8:	bf00      	nop
 80023aa:	f7ff fcc1 	bl	8001d30 <Error_Handler>
 80023ae:	e7fe      	b.n	80023ae <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	7a1b      	ldrb	r3, [r3, #8]
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	b2d1      	uxtb	r1, r2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	7211      	strb	r1, [r2, #8]
 80023bc:	4619      	mov	r1, r3
=======
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d104      	bne.n	800249a <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002490:	b672      	cpsid	i
}
 8002492:	bf00      	nop
 8002494:	f7ff fcca 	bl	8001e2c <Error_Handler>
 8002498:	e7fe      	b.n	8002498 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	7a1b      	ldrb	r3, [r3, #8]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d904      	bls.n	80024ac <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80024a2:	b672      	cpsid	i
}
 80024a4:	bf00      	nop
 80024a6:	f7ff fcc1 	bl	8001e2c <Error_Handler>
 80024aa:	e7fe      	b.n	80024aa <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	7a1b      	ldrb	r3, [r3, #8]
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	b2d1      	uxtb	r1, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	7211      	strb	r1, [r2, #8]
 80024b8:	4619      	mov	r1, r3
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
<<<<<<< HEAD
 80023be:	f3ef 8211 	mrs	r2, BASEPRI
 80023c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c6:	f383 8811 	msr	BASEPRI, r3
 80023ca:	f3bf 8f6f 	isb	sy
 80023ce:	f3bf 8f4f 	dsb	sy
 80023d2:	60fa      	str	r2, [r7, #12]
 80023d4:	60bb      	str	r3, [r7, #8]
=======
 80024ba:	f3ef 8211 	mrs	r2, BASEPRI
 80024be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c2:	f383 8811 	msr	BASEPRI, r3
 80024c6:	f3bf 8f6f 	isb	sy
 80024ca:	f3bf 8f4f 	dsb	sy
 80024ce:	60fa      	str	r2, [r7, #12]
 80024d0:	60bb      	str	r3, [r7, #8]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
<<<<<<< HEAD
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <stm32_lock_release>:
=======
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <stm32_lock_release>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
<<<<<<< HEAD
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b084      	sub	sp, #16
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d104      	bne.n	80023fe <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80023f4:	b672      	cpsid	i
}
 80023f6:	bf00      	nop
 80023f8:	f7ff fc9a 	bl	8001d30 <Error_Handler>
 80023fc:	e7fe      	b.n	80023fc <stm32_lock_release+0x16>
  lock->nesting_level--;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	7a1b      	ldrb	r3, [r3, #8]
 8002402:	3b01      	subs	r3, #1
 8002404:	b2da      	uxtb	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	7a1b      	ldrb	r3, [r3, #8]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d904      	bls.n	800241c <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8002412:	b672      	cpsid	i
}
 8002414:	bf00      	nop
 8002416:	f7ff fc8b 	bl	8001d30 <Error_Handler>
 800241a:	e7fe      	b.n	800241a <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7a1b      	ldrb	r3, [r3, #8]
 8002420:	461a      	mov	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002428:	60fb      	str	r3, [r7, #12]
=======
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d104      	bne.n	80024fa <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80024f0:	b672      	cpsid	i
}
 80024f2:	bf00      	nop
 80024f4:	f7ff fc9a 	bl	8001e2c <Error_Handler>
 80024f8:	e7fe      	b.n	80024f8 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	7a1b      	ldrb	r3, [r3, #8]
 80024fe:	3b01      	subs	r3, #1
 8002500:	b2da      	uxtb	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	7a1b      	ldrb	r3, [r3, #8]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d904      	bls.n	8002518 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800250e:	b672      	cpsid	i
}
 8002510:	bf00      	nop
 8002512:	f7ff fc8b 	bl	8001e2c <Error_Handler>
 8002516:	e7fe      	b.n	8002516 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	7a1b      	ldrb	r3, [r3, #8]
 800251c:	461a      	mov	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002524:	60fb      	str	r3, [r7, #12]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
<<<<<<< HEAD
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f383 8811 	msr	BASEPRI, r3
=======
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f383 8811 	msr	BASEPRI, r3
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
<<<<<<< HEAD
 8002430:	bf00      	nop
}
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <__retarget_lock_acquire_recursive>:
=======
 800252c:	bf00      	nop
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <__retarget_lock_acquire_recursive>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
<<<<<<< HEAD
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d104      	bne.n	8002452 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002448:	b672      	cpsid	i
}
 800244a:	bf00      	nop
 800244c:	f7ff fc70 	bl	8001d30 <Error_Handler>
 8002450:	e7fe      	b.n	8002450 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff96 	bl	8002386 <stm32_lock_acquire>
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <__retarget_lock_release_recursive>:
=======
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d104      	bne.n	800254e <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002544:	b672      	cpsid	i
}
 8002546:	bf00      	nop
 8002548:	f7ff fc70 	bl	8001e2c <Error_Handler>
 800254c:	e7fe      	b.n	800254c <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff96 	bl	8002482 <stm32_lock_acquire>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <__retarget_lock_release_recursive>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
<<<<<<< HEAD
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d104      	bne.n	800247a <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002470:	b672      	cpsid	i
}
 8002472:	bf00      	nop
 8002474:	f7ff fc5c 	bl	8001d30 <Error_Handler>
 8002478:	e7fe      	b.n	8002478 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ffb2 	bl	80023e6 <stm32_lock_release>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_Init>:
=======
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d104      	bne.n	8002576 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800256c:	b672      	cpsid	i
}
 800256e:	bf00      	nop
 8002570:	f7ff fc5c 	bl	8001e2c <Error_Handler>
 8002574:	e7fe      	b.n	8002574 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ffb2 	bl	80024e2 <stm32_lock_release>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_Init>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002490:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <HAL_Init+0x40>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0d      	ldr	r2, [pc, #52]	; (80024cc <HAL_Init+0x40>)
 8002496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800249a:	6013      	str	r3, [r2, #0]
=======
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800258c:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <HAL_Init+0x40>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <HAL_Init+0x40>)
 8002592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002596:	6013      	str	r3, [r2, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_Init+0x40>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <HAL_Init+0x40>)
 80024a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a6:	6013      	str	r3, [r2, #0]
=======
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_Init+0x40>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <HAL_Init+0x40>)
 800259e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025a2:	6013      	str	r3, [r2, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 80024a8:	4b08      	ldr	r3, [pc, #32]	; (80024cc <HAL_Init+0x40>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a07      	ldr	r2, [pc, #28]	; (80024cc <HAL_Init+0x40>)
 80024ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b2:	6013      	str	r3, [r2, #0]
=======
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_Init+0x40>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <HAL_Init+0x40>)
 80025aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ae:	6013      	str	r3, [r2, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 80024b4:	2003      	movs	r0, #3
 80024b6:	f001 ffd1 	bl	800445c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ba:	200f      	movs	r0, #15
 80024bc:	f7ff fd60 	bl	8001f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c0:	f7ff fd32 	bl	8001f28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40023c00 	.word	0x40023c00

080024d0 <HAL_IncTick>:
=======
 80025b0:	2003      	movs	r0, #3
 80025b2:	f001 ffd1 	bl	8004558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025b6:	200f      	movs	r0, #15
 80025b8:	f7ff fd60 	bl	800207c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025bc:	f7ff fd32 	bl	8002024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023c00 	.word	0x40023c00

080025cc <HAL_IncTick>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_IncTick+0x20>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_IncTick+0x24>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <HAL_IncTick+0x24>)
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000008 	.word	0x20000008
 80024f4:	200007f4 	.word	0x200007f4

080024f8 <HAL_GetTick>:
=======
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_IncTick+0x20>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_IncTick+0x24>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <HAL_IncTick+0x24>)
 80025de:	6013      	str	r3, [r2, #0]
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000008 	.word	0x20000008
 80025f0:	200007f8 	.word	0x200007f8

080025f4 <HAL_GetTick>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return uwTick;
 80024fc:	4b03      	ldr	r3, [pc, #12]	; (800250c <HAL_GetTick+0x14>)
 80024fe:	681b      	ldr	r3, [r3, #0]
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	200007f4 	.word	0x200007f4

08002510 <HAL_Delay>:
=======
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return uwTick;
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <HAL_GetTick+0x14>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	200007f8 	.word	0x200007f8

0800260c <HAL_Delay>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002518:	f7ff ffee 	bl	80024f8 <HAL_GetTick>
 800251c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002528:	d005      	beq.n	8002536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800252a:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <HAL_Delay+0x44>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4413      	add	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002536:	bf00      	nop
 8002538:	f7ff ffde 	bl	80024f8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	429a      	cmp	r2, r3
 8002546:	d8f7      	bhi.n	8002538 <HAL_Delay+0x28>
  {
  }
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000008 	.word	0x20000008

08002558 <HAL_ADC_Init>:
=======
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002614:	f7ff ffee 	bl	80025f4 <HAL_GetTick>
 8002618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002624:	d005      	beq.n	8002632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <HAL_Delay+0x44>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4413      	add	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002632:	bf00      	nop
 8002634:	f7ff ffde 	bl	80025f4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	429a      	cmp	r2, r3
 8002642:	d8f7      	bhi.n	8002634 <HAL_Delay+0x28>
  {
  }
}
 8002644:	bf00      	nop
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000008 	.word	0x20000008

08002654 <HAL_ADC_Init>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e15c      	b.n	8002828 <HAL_ADC_Init+0x2d0>
=======
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e15c      	b.n	8002924 <HAL_ADC_Init+0x2d0>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
<<<<<<< HEAD
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a8e      	ldr	r2, [pc, #568]	; (80027ac <HAL_ADC_Init+0x254>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d00e      	beq.n	8002596 <HAL_ADC_Init+0x3e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a8c      	ldr	r2, [pc, #560]	; (80027b0 <HAL_ADC_Init+0x258>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d009      	beq.n	8002596 <HAL_ADC_Init+0x3e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a8b      	ldr	r2, [pc, #556]	; (80027b4 <HAL_ADC_Init+0x25c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d004      	beq.n	8002596 <HAL_ADC_Init+0x3e>
 800258c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8002590:	4889      	ldr	r0, [pc, #548]	; (80027b8 <HAL_ADC_Init+0x260>)
 8002592:	f7ff fbd2 	bl	8001d3a <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d013      	beq.n	80025c6 <HAL_ADC_Init+0x6e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a6:	d00e      	beq.n	80025c6 <HAL_ADC_Init+0x6e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025b0:	d009      	beq.n	80025c6 <HAL_ADC_Init+0x6e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80025ba:	d004      	beq.n	80025c6 <HAL_ADC_Init+0x6e>
 80025bc:	f240 1143 	movw	r1, #323	; 0x143
 80025c0:	487d      	ldr	r0, [pc, #500]	; (80027b8 <HAL_ADC_Init+0x260>)
 80025c2:	f7ff fbba 	bl	8001d3a <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d013      	beq.n	80025f6 <HAL_ADC_Init+0x9e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d6:	d00e      	beq.n	80025f6 <HAL_ADC_Init+0x9e>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025e0:	d009      	beq.n	80025f6 <HAL_ADC_Init+0x9e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025ea:	d004      	beq.n	80025f6 <HAL_ADC_Init+0x9e>
 80025ec:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80025f0:	4871      	ldr	r0, [pc, #452]	; (80027b8 <HAL_ADC_Init+0x260>)
 80025f2:	f7ff fba2 	bl	8001d3a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d008      	beq.n	8002610 <HAL_ADC_Init+0xb8>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d004      	beq.n	8002610 <HAL_ADC_Init+0xb8>
 8002606:	f240 1145 	movw	r1, #325	; 0x145
 800260a:	486b      	ldr	r0, [pc, #428]	; (80027b8 <HAL_ADC_Init+0x260>)
 800260c:	f7ff fb95 	bl	8001d3a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	7e1b      	ldrb	r3, [r3, #24]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_ADC_Init+0xd2>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	7e1b      	ldrb	r3, [r3, #24]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d004      	beq.n	800262a <HAL_ADC_Init+0xd2>
 8002620:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002624:	4864      	ldr	r0, [pc, #400]	; (80027b8 <HAL_ADC_Init+0x260>)
 8002626:	f7ff fb88 	bl	8001d3a <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	2b00      	cmp	r3, #0
 8002630:	d054      	beq.n	80026dc <HAL_ADC_Init+0x184>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800263a:	d04f      	beq.n	80026dc <HAL_ADC_Init+0x184>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002644:	d04a      	beq.n	80026dc <HAL_ADC_Init+0x184>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800264e:	d045      	beq.n	80026dc <HAL_ADC_Init+0x184>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002654:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002658:	d040      	beq.n	80026dc <HAL_ADC_Init+0x184>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002662:	d03b      	beq.n	80026dc <HAL_ADC_Init+0x184>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002668:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800266c:	d036      	beq.n	80026dc <HAL_ADC_Init+0x184>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002672:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8002676:	d031      	beq.n	80026dc <HAL_ADC_Init+0x184>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002680:	d02c      	beq.n	80026dc <HAL_ADC_Init+0x184>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002686:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 800268a:	d027      	beq.n	80026dc <HAL_ADC_Init+0x184>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002690:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8002694:	d022      	beq.n	80026dc <HAL_ADC_Init+0x184>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269a:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 800269e:	d01d      	beq.n	80026dc <HAL_ADC_Init+0x184>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80026a8:	d018      	beq.n	80026dc <HAL_ADC_Init+0x184>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 80026b2:	d013      	beq.n	80026dc <HAL_ADC_Init+0x184>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80026bc:	d00e      	beq.n	80026dc <HAL_ADC_Init+0x184>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80026c6:	d009      	beq.n	80026dc <HAL_ADC_Init+0x184>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026cc:	4a3b      	ldr	r2, [pc, #236]	; (80027bc <HAL_ADC_Init+0x264>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d004      	beq.n	80026dc <HAL_ADC_Init+0x184>
 80026d2:	f240 1147 	movw	r1, #327	; 0x147
 80026d6:	4838      	ldr	r0, [pc, #224]	; (80027b8 <HAL_ADC_Init+0x260>)
 80026d8:	f7ff fb2f 	bl	8001d3a <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d009      	beq.n	80026f8 <HAL_ADC_Init+0x1a0>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026ec:	d004      	beq.n	80026f8 <HAL_ADC_Init+0x1a0>
 80026ee:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80026f2:	4831      	ldr	r0, [pc, #196]	; (80027b8 <HAL_ADC_Init+0x260>)
 80026f4:	f7ff fb21 	bl	8001d3a <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d003      	beq.n	8002708 <HAL_ADC_Init+0x1b0>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	2b10      	cmp	r3, #16
 8002706:	d904      	bls.n	8002712 <HAL_ADC_Init+0x1ba>
 8002708:	f240 1149 	movw	r1, #329	; 0x149
 800270c:	482a      	ldr	r0, [pc, #168]	; (80027b8 <HAL_ADC_Init+0x260>)
 800270e:	f7ff fb14 	bl	8001d3a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002718:	2b00      	cmp	r3, #0
 800271a:	d009      	beq.n	8002730 <HAL_ADC_Init+0x1d8>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002722:	2b01      	cmp	r3, #1
 8002724:	d004      	beq.n	8002730 <HAL_ADC_Init+0x1d8>
 8002726:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800272a:	4823      	ldr	r0, [pc, #140]	; (80027b8 <HAL_ADC_Init+0x260>)
 800272c:	f7ff fb05 	bl	8001d3a <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d00c      	beq.n	8002752 <HAL_ADC_Init+0x1fa>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_ADC_Init+0x1fa>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d004      	beq.n	8002752 <HAL_ADC_Init+0x1fa>
 8002748:	f240 114b 	movw	r1, #331	; 0x14b
 800274c:	481a      	ldr	r0, [pc, #104]	; (80027b8 <HAL_ADC_Init+0x260>)
 800274e:	f7ff faf4 	bl	8001d3a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d009      	beq.n	8002770 <HAL_ADC_Init+0x218>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d004      	beq.n	8002770 <HAL_ADC_Init+0x218>
 8002766:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800276a:	4813      	ldr	r0, [pc, #76]	; (80027b8 <HAL_ADC_Init+0x260>)
 800276c:	f7ff fae5 	bl	8001d3a <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002774:	4a11      	ldr	r2, [pc, #68]	; (80027bc <HAL_ADC_Init+0x264>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d022      	beq.n	80027c0 <HAL_ADC_Init+0x268>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277e:	2b00      	cmp	r3, #0
 8002780:	d01e      	beq.n	80027c0 <HAL_ADC_Init+0x268>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002786:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800278a:	d019      	beq.n	80027c0 <HAL_ADC_Init+0x268>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002794:	d014      	beq.n	80027c0 <HAL_ADC_Init+0x268>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800279e:	d00f      	beq.n	80027c0 <HAL_ADC_Init+0x268>
 80027a0:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80027a4:	4804      	ldr	r0, [pc, #16]	; (80027b8 <HAL_ADC_Init+0x260>)
 80027a6:	f7ff fac8 	bl	8001d3a <assert_failed>
 80027aa:	e009      	b.n	80027c0 <HAL_ADC_Init+0x268>
 80027ac:	40012000 	.word	0x40012000
 80027b0:	40012100 	.word	0x40012100
 80027b4:	40012200 	.word	0x40012200
 80027b8:	0800bfd0 	.word	0x0800bfd0
 80027bc:	0f000001 	.word	0x0f000001
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d109      	bne.n	80027dc <HAL_ADC_Init+0x284>
=======
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a8e      	ldr	r2, [pc, #568]	; (80028a8 <HAL_ADC_Init+0x254>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d00e      	beq.n	8002692 <HAL_ADC_Init+0x3e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a8c      	ldr	r2, [pc, #560]	; (80028ac <HAL_ADC_Init+0x258>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d009      	beq.n	8002692 <HAL_ADC_Init+0x3e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a8b      	ldr	r2, [pc, #556]	; (80028b0 <HAL_ADC_Init+0x25c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d004      	beq.n	8002692 <HAL_ADC_Init+0x3e>
 8002688:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800268c:	4889      	ldr	r0, [pc, #548]	; (80028b4 <HAL_ADC_Init+0x260>)
 800268e:	f7ff fbd2 	bl	8001e36 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d013      	beq.n	80026c2 <HAL_ADC_Init+0x6e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a2:	d00e      	beq.n	80026c2 <HAL_ADC_Init+0x6e>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026ac:	d009      	beq.n	80026c2 <HAL_ADC_Init+0x6e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026b6:	d004      	beq.n	80026c2 <HAL_ADC_Init+0x6e>
 80026b8:	f240 1143 	movw	r1, #323	; 0x143
 80026bc:	487d      	ldr	r0, [pc, #500]	; (80028b4 <HAL_ADC_Init+0x260>)
 80026be:	f7ff fbba 	bl	8001e36 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d013      	beq.n	80026f2 <HAL_ADC_Init+0x9e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d2:	d00e      	beq.n	80026f2 <HAL_ADC_Init+0x9e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026dc:	d009      	beq.n	80026f2 <HAL_ADC_Init+0x9e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80026e6:	d004      	beq.n	80026f2 <HAL_ADC_Init+0x9e>
 80026e8:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80026ec:	4871      	ldr	r0, [pc, #452]	; (80028b4 <HAL_ADC_Init+0x260>)
 80026ee:	f7ff fba2 	bl	8001e36 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d008      	beq.n	800270c <HAL_ADC_Init+0xb8>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d004      	beq.n	800270c <HAL_ADC_Init+0xb8>
 8002702:	f240 1145 	movw	r1, #325	; 0x145
 8002706:	486b      	ldr	r0, [pc, #428]	; (80028b4 <HAL_ADC_Init+0x260>)
 8002708:	f7ff fb95 	bl	8001e36 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	7e1b      	ldrb	r3, [r3, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_ADC_Init+0xd2>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	7e1b      	ldrb	r3, [r3, #24]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d004      	beq.n	8002726 <HAL_ADC_Init+0xd2>
 800271c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002720:	4864      	ldr	r0, [pc, #400]	; (80028b4 <HAL_ADC_Init+0x260>)
 8002722:	f7ff fb88 	bl	8001e36 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	2b00      	cmp	r3, #0
 800272c:	d054      	beq.n	80027d8 <HAL_ADC_Init+0x184>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002736:	d04f      	beq.n	80027d8 <HAL_ADC_Init+0x184>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002740:	d04a      	beq.n	80027d8 <HAL_ADC_Init+0x184>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800274a:	d045      	beq.n	80027d8 <HAL_ADC_Init+0x184>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002754:	d040      	beq.n	80027d8 <HAL_ADC_Init+0x184>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800275e:	d03b      	beq.n	80027d8 <HAL_ADC_Init+0x184>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8002768:	d036      	beq.n	80027d8 <HAL_ADC_Init+0x184>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276e:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8002772:	d031      	beq.n	80027d8 <HAL_ADC_Init+0x184>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002778:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800277c:	d02c      	beq.n	80027d8 <HAL_ADC_Init+0x184>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8002786:	d027      	beq.n	80027d8 <HAL_ADC_Init+0x184>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8002790:	d022      	beq.n	80027d8 <HAL_ADC_Init+0x184>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002796:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 800279a:	d01d      	beq.n	80027d8 <HAL_ADC_Init+0x184>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80027a4:	d018      	beq.n	80027d8 <HAL_ADC_Init+0x184>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027aa:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 80027ae:	d013      	beq.n	80027d8 <HAL_ADC_Init+0x184>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80027b8:	d00e      	beq.n	80027d8 <HAL_ADC_Init+0x184>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027be:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80027c2:	d009      	beq.n	80027d8 <HAL_ADC_Init+0x184>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c8:	4a3b      	ldr	r2, [pc, #236]	; (80028b8 <HAL_ADC_Init+0x264>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d004      	beq.n	80027d8 <HAL_ADC_Init+0x184>
 80027ce:	f240 1147 	movw	r1, #327	; 0x147
 80027d2:	4838      	ldr	r0, [pc, #224]	; (80028b4 <HAL_ADC_Init+0x260>)
 80027d4:	f7ff fb2f 	bl	8001e36 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d009      	beq.n	80027f4 <HAL_ADC_Init+0x1a0>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027e8:	d004      	beq.n	80027f4 <HAL_ADC_Init+0x1a0>
 80027ea:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80027ee:	4831      	ldr	r0, [pc, #196]	; (80028b4 <HAL_ADC_Init+0x260>)
 80027f0:	f7ff fb21 	bl	8001e36 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_ADC_Init+0x1b0>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	2b10      	cmp	r3, #16
 8002802:	d904      	bls.n	800280e <HAL_ADC_Init+0x1ba>
 8002804:	f240 1149 	movw	r1, #329	; 0x149
 8002808:	482a      	ldr	r0, [pc, #168]	; (80028b4 <HAL_ADC_Init+0x260>)
 800280a:	f7ff fb14 	bl	8001e36 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002814:	2b00      	cmp	r3, #0
 8002816:	d009      	beq.n	800282c <HAL_ADC_Init+0x1d8>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800281e:	2b01      	cmp	r3, #1
 8002820:	d004      	beq.n	800282c <HAL_ADC_Init+0x1d8>
 8002822:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002826:	4823      	ldr	r0, [pc, #140]	; (80028b4 <HAL_ADC_Init+0x260>)
 8002828:	f7ff fb05 	bl	8001e36 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d00c      	beq.n	800284e <HAL_ADC_Init+0x1fa>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_ADC_Init+0x1fa>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d004      	beq.n	800284e <HAL_ADC_Init+0x1fa>
 8002844:	f240 114b 	movw	r1, #331	; 0x14b
 8002848:	481a      	ldr	r0, [pc, #104]	; (80028b4 <HAL_ADC_Init+0x260>)
 800284a:	f7ff faf4 	bl	8001e36 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d009      	beq.n	800286c <HAL_ADC_Init+0x218>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d004      	beq.n	800286c <HAL_ADC_Init+0x218>
 8002862:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8002866:	4813      	ldr	r0, [pc, #76]	; (80028b4 <HAL_ADC_Init+0x260>)
 8002868:	f7ff fae5 	bl	8001e36 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	4a11      	ldr	r2, [pc, #68]	; (80028b8 <HAL_ADC_Init+0x264>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d022      	beq.n	80028bc <HAL_ADC_Init+0x268>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	2b00      	cmp	r3, #0
 800287c:	d01e      	beq.n	80028bc <HAL_ADC_Init+0x268>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002886:	d019      	beq.n	80028bc <HAL_ADC_Init+0x268>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002890:	d014      	beq.n	80028bc <HAL_ADC_Init+0x268>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002896:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800289a:	d00f      	beq.n	80028bc <HAL_ADC_Init+0x268>
 800289c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80028a0:	4804      	ldr	r0, [pc, #16]	; (80028b4 <HAL_ADC_Init+0x260>)
 80028a2:	f7ff fac8 	bl	8001e36 <assert_failed>
 80028a6:	e009      	b.n	80028bc <HAL_ADC_Init+0x268>
 80028a8:	40012000 	.word	0x40012000
 80028ac:	40012100 	.word	0x40012100
 80028b0:	40012200 	.word	0x40012200
 80028b4:	0800c0d0 	.word	0x0800c0d0
 80028b8:	0f000001 	.word	0x0f000001
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d109      	bne.n	80028d8 <HAL_ADC_Init+0x284>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7fe fd47 	bl	800125c <HAL_ADC_MspInit>
=======
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7fe fcab 	bl	8001220 <HAL_ADC_MspInit>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
<<<<<<< HEAD
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d118      	bne.n	800281a <HAL_ADC_Init+0x2c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027f0:	f023 0302 	bic.w	r3, r3, #2
 80027f4:	f043 0202 	orr.w	r2, r3, #2
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d118      	bne.n	8002916 <HAL_ADC_Init+0x2c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028ec:	f023 0302 	bic.w	r3, r3, #2
 80028f0:	f043 0202 	orr.w	r2, r3, #2
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
<<<<<<< HEAD
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fbef 	bl	8002fe0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	f023 0303 	bic.w	r3, r3, #3
 8002810:	f043 0201 	orr.w	r2, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	641a      	str	r2, [r3, #64]	; 0x40
 8002818:	e001      	b.n	800281e <HAL_ADC_Init+0x2c6>
=======
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 fbef 	bl	80030dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f023 0303 	bic.w	r3, r3, #3
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	641a      	str	r2, [r3, #64]	; 0x40
 8002914:	e001      	b.n	800291a <HAL_ADC_Init+0x2c6>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
<<<<<<< HEAD
 800281a:	2301      	movs	r3, #1
 800281c:	73fb      	strb	r3, [r7, #15]
=======
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002826:	7bfb      	ldrb	r3, [r7, #15]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_ADC_Start>:
=======
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002922:	7bfb      	ldrb	r3, [r7, #15]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_ADC_Start>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	60bb      	str	r3, [r7, #8]
=======
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	60bb      	str	r3, [r7, #8]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
<<<<<<< HEAD
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7e1b      	ldrb	r3, [r3, #24]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_ADC_Start+0x26>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	7e1b      	ldrb	r3, [r3, #24]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d004      	beq.n	8002856 <HAL_ADC_Start+0x26>
 800284c:	f240 21d2 	movw	r1, #722	; 0x2d2
 8002850:	486c      	ldr	r0, [pc, #432]	; (8002a04 <HAL_ADC_Start+0x1d4>)
 8002852:	f7ff fa72 	bl	8001d3a <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	2b00      	cmp	r3, #0
 800285c:	d013      	beq.n	8002886 <HAL_ADC_Start+0x56>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002866:	d00e      	beq.n	8002886 <HAL_ADC_Start+0x56>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002870:	d009      	beq.n	8002886 <HAL_ADC_Start+0x56>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800287a:	d004      	beq.n	8002886 <HAL_ADC_Start+0x56>
 800287c:	f240 21d3 	movw	r1, #723	; 0x2d3
 8002880:	4860      	ldr	r0, [pc, #384]	; (8002a04 <HAL_ADC_Start+0x1d4>)
 8002882:	f7ff fa5a 	bl	8001d3a <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_ADC_Start+0x64>
 8002890:	2302      	movs	r3, #2
 8002892:	e0b2      	b.n	80029fa <HAL_ADC_Start+0x1ca>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	7e1b      	ldrb	r3, [r3, #24]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_ADC_Start+0x26>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	7e1b      	ldrb	r3, [r3, #24]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d004      	beq.n	8002952 <HAL_ADC_Start+0x26>
 8002948:	f240 21d2 	movw	r1, #722	; 0x2d2
 800294c:	486c      	ldr	r0, [pc, #432]	; (8002b00 <HAL_ADC_Start+0x1d4>)
 800294e:	f7ff fa72 	bl	8001e36 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	2b00      	cmp	r3, #0
 8002958:	d013      	beq.n	8002982 <HAL_ADC_Start+0x56>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002962:	d00e      	beq.n	8002982 <HAL_ADC_Start+0x56>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800296c:	d009      	beq.n	8002982 <HAL_ADC_Start+0x56>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002976:	d004      	beq.n	8002982 <HAL_ADC_Start+0x56>
 8002978:	f240 21d3 	movw	r1, #723	; 0x2d3
 800297c:	4860      	ldr	r0, [pc, #384]	; (8002b00 <HAL_ADC_Start+0x1d4>)
 800297e:	f7ff fa5a 	bl	8001e36 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_ADC_Start+0x64>
 800298c:	2302      	movs	r3, #2
 800298e:	e0b2      	b.n	8002af6 <HAL_ADC_Start+0x1ca>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
<<<<<<< HEAD
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d018      	beq.n	80028dc <HAL_ADC_Start+0xac>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0201 	orr.w	r2, r2, #1
 80028b8:	609a      	str	r2, [r3, #8]
=======
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d018      	beq.n	80029d8 <HAL_ADC_Start+0xac>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 0201 	orr.w	r2, r2, #1
 80029b4:	609a      	str	r2, [r3, #8]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 80028ba:	4b53      	ldr	r3, [pc, #332]	; (8002a08 <HAL_ADC_Start+0x1d8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a53      	ldr	r2, [pc, #332]	; (8002a0c <HAL_ADC_Start+0x1dc>)
 80028c0:	fba2 2303 	umull	r2, r3, r2, r3
 80028c4:	0c9a      	lsrs	r2, r3, #18
 80028c6:	4613      	mov	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80028ce:	e002      	b.n	80028d6 <HAL_ADC_Start+0xa6>
    {
      counter--;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f9      	bne.n	80028d0 <HAL_ADC_Start+0xa0>
=======
 80029b6:	4b53      	ldr	r3, [pc, #332]	; (8002b04 <HAL_ADC_Start+0x1d8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a53      	ldr	r2, [pc, #332]	; (8002b08 <HAL_ADC_Start+0x1dc>)
 80029bc:	fba2 2303 	umull	r2, r3, r2, r3
 80029c0:	0c9a      	lsrs	r2, r3, #18
 80029c2:	4613      	mov	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4413      	add	r3, r2
 80029c8:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80029ca:	e002      	b.n	80029d2 <HAL_ADC_Start+0xa6>
    {
      counter--;
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f9      	bne.n	80029cc <HAL_ADC_Start+0xa0>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
<<<<<<< HEAD
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d17a      	bne.n	80029e0 <HAL_ADC_Start+0x1b0>
=======
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d17a      	bne.n	8002adc <HAL_ADC_Start+0x1b0>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029ee:	f023 0301 	bic.w	r3, r3, #1
 80029f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
<<<<<<< HEAD
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002908:	2b00      	cmp	r3, #0
 800290a:	d007      	beq.n	800291c <HAL_ADC_Start+0xec>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002914:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d007      	beq.n	8002a18 <HAL_ADC_Start+0xec>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
<<<<<<< HEAD
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002928:	d106      	bne.n	8002938 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	f023 0206 	bic.w	r2, r3, #6
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	645a      	str	r2, [r3, #68]	; 0x44
 8002936:	e002      	b.n	800293e <HAL_ADC_Start+0x10e>
=======
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a24:	d106      	bne.n	8002a34 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	f023 0206 	bic.w	r2, r3, #6
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	645a      	str	r2, [r3, #68]	; 0x44
 8002a32:	e002      	b.n	8002a3a <HAL_ADC_Start+0x10e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 8002946:	4b32      	ldr	r3, [pc, #200]	; (8002a10 <HAL_ADC_Start+0x1e0>)
 8002948:	60fb      	str	r3, [r7, #12]
=======
 8002a42:	4b32      	ldr	r3, [pc, #200]	; (8002b0c <HAL_ADC_Start+0x1e0>)
 8002a44:	60fb      	str	r3, [r7, #12]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
<<<<<<< HEAD
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002952:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f003 031f 	and.w	r3, r3, #31
 800295c:	2b00      	cmp	r3, #0
 800295e:	d12a      	bne.n	80029b6 <HAL_ADC_Start+0x186>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a2b      	ldr	r2, [pc, #172]	; (8002a14 <HAL_ADC_Start+0x1e4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d015      	beq.n	8002996 <HAL_ADC_Start+0x166>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a2a      	ldr	r2, [pc, #168]	; (8002a18 <HAL_ADC_Start+0x1e8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d105      	bne.n	8002980 <HAL_ADC_Start+0x150>
 8002974:	4b26      	ldr	r3, [pc, #152]	; (8002a10 <HAL_ADC_Start+0x1e0>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_ADC_Start+0x166>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a25      	ldr	r2, [pc, #148]	; (8002a1c <HAL_ADC_Start+0x1ec>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d136      	bne.n	80029f8 <HAL_ADC_Start+0x1c8>
 800298a:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <HAL_ADC_Start+0x1e0>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f003 0310 	and.w	r3, r3, #16
 8002992:	2b00      	cmp	r3, #0
 8002994:	d130      	bne.n	80029f8 <HAL_ADC_Start+0x1c8>
=======
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a4e:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d12a      	bne.n	8002ab2 <HAL_ADC_Start+0x186>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a2b      	ldr	r2, [pc, #172]	; (8002b10 <HAL_ADC_Start+0x1e4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d015      	beq.n	8002a92 <HAL_ADC_Start+0x166>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a2a      	ldr	r2, [pc, #168]	; (8002b14 <HAL_ADC_Start+0x1e8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d105      	bne.n	8002a7c <HAL_ADC_Start+0x150>
 8002a70:	4b26      	ldr	r3, [pc, #152]	; (8002b0c <HAL_ADC_Start+0x1e0>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HAL_ADC_Start+0x166>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a25      	ldr	r2, [pc, #148]	; (8002b18 <HAL_ADC_Start+0x1ec>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d136      	bne.n	8002af4 <HAL_ADC_Start+0x1c8>
 8002a86:	4b21      	ldr	r3, [pc, #132]	; (8002b0c <HAL_ADC_Start+0x1e0>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d130      	bne.n	8002af4 <HAL_ADC_Start+0x1c8>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
<<<<<<< HEAD
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d129      	bne.n	80029f8 <HAL_ADC_Start+0x1c8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	e020      	b.n	80029f8 <HAL_ADC_Start+0x1c8>
=======
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d129      	bne.n	8002af4 <HAL_ADC_Start+0x1c8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	e020      	b.n	8002af4 <HAL_ADC_Start+0x1c8>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
<<<<<<< HEAD
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <HAL_ADC_Start+0x1e4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d11b      	bne.n	80029f8 <HAL_ADC_Start+0x1c8>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d114      	bne.n	80029f8 <HAL_ADC_Start+0x1c8>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029dc:	609a      	str	r2, [r3, #8]
 80029de:	e00b      	b.n	80029f8 <HAL_ADC_Start+0x1c8>
=======
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a16      	ldr	r2, [pc, #88]	; (8002b10 <HAL_ADC_Start+0x1e4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d11b      	bne.n	8002af4 <HAL_ADC_Start+0x1c8>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d114      	bne.n	8002af4 <HAL_ADC_Start+0x1c8>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ad8:	609a      	str	r2, [r3, #8]
 8002ada:	e00b      	b.n	8002af4 <HAL_ADC_Start+0x1c8>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	f043 0210 	orr.w	r2, r3, #16
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f0:	f043 0201 	orr.w	r2, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	f043 0210 	orr.w	r2, r3, #16
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aec:	f043 0201 	orr.w	r2, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  
  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	0800bfd0 	.word	0x0800bfd0
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	431bde83 	.word	0x431bde83
 8002a10:	40012300 	.word	0x40012300
 8002a14:	40012000 	.word	0x40012000
 8002a18:	40012100 	.word	0x40012100
 8002a1c:	40012200 	.word	0x40012200

08002a20 <HAL_ADC_IRQHandler>:
=======
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	0800c0d0 	.word	0x0800c0d0
 8002b04:	20000000 	.word	0x20000000
 8002b08:	431bde83 	.word	0x431bde83
 8002b0c:	40012300 	.word	0x40012300
 8002b10:	40012000 	.word	0x40012000
 8002b14:	40012100 	.word	0x40012100
 8002b18:	40012200 	.word	0x40012200

08002b1c <HAL_ADC_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	7e1b      	ldrb	r3, [r3, #24]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <HAL_ADC_IRQHandler+0x3a>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7e1b      	ldrb	r3, [r3, #24]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d004      	beq.n	8002a5a <HAL_ADC_IRQHandler+0x3a>
 8002a50:	f240 41b7 	movw	r1, #1207	; 0x4b7
 8002a54:	4890      	ldr	r0, [pc, #576]	; (8002c98 <HAL_ADC_IRQHandler+0x278>)
 8002a56:	f7ff f970 	bl	8001d3a <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_ADC_IRQHandler+0x4a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	2b10      	cmp	r3, #16
 8002a68:	d904      	bls.n	8002a74 <HAL_ADC_IRQHandler+0x54>
 8002a6a:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
 8002a6e:	488a      	ldr	r0, [pc, #552]	; (8002c98 <HAL_ADC_IRQHandler+0x278>)
 8002a70:	f7ff f963 	bl	8001d3a <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d00c      	beq.n	8002a96 <HAL_ADC_IRQHandler+0x76>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_ADC_IRQHandler+0x76>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d004      	beq.n	8002a96 <HAL_ADC_IRQHandler+0x76>
 8002a8c:	f240 41b9 	movw	r1, #1209	; 0x4b9
 8002a90:	4881      	ldr	r0, [pc, #516]	; (8002c98 <HAL_ADC_IRQHandler+0x278>)
 8002a92:	f7ff f952 	bl	8001d3a <assert_failed>
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	f003 0320 	and.w	r3, r3, #32
 8002aa4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d049      	beq.n	8002b40 <HAL_ADC_IRQHandler+0x120>
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d046      	beq.n	8002b40 <HAL_ADC_IRQHandler+0x120>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d105      	bne.n	8002aca <HAL_ADC_IRQHandler+0xaa>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7e1b      	ldrb	r3, [r3, #24]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_ADC_IRQHandler+0x3a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	7e1b      	ldrb	r3, [r3, #24]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d004      	beq.n	8002b56 <HAL_ADC_IRQHandler+0x3a>
 8002b4c:	f240 41b7 	movw	r1, #1207	; 0x4b7
 8002b50:	4890      	ldr	r0, [pc, #576]	; (8002d94 <HAL_ADC_IRQHandler+0x278>)
 8002b52:	f7ff f970 	bl	8001e36 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <HAL_ADC_IRQHandler+0x4a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	2b10      	cmp	r3, #16
 8002b64:	d904      	bls.n	8002b70 <HAL_ADC_IRQHandler+0x54>
 8002b66:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
 8002b6a:	488a      	ldr	r0, [pc, #552]	; (8002d94 <HAL_ADC_IRQHandler+0x278>)
 8002b6c:	f7ff f963 	bl	8001e36 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d00c      	beq.n	8002b92 <HAL_ADC_IRQHandler+0x76>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_ADC_IRQHandler+0x76>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d004      	beq.n	8002b92 <HAL_ADC_IRQHandler+0x76>
 8002b88:	f240 41b9 	movw	r1, #1209	; 0x4b9
 8002b8c:	4881      	ldr	r0, [pc, #516]	; (8002d94 <HAL_ADC_IRQHandler+0x278>)
 8002b8e:	f7ff f952 	bl	8001e36 <assert_failed>
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d049      	beq.n	8002c3c <HAL_ADC_IRQHandler+0x120>
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d046      	beq.n	8002c3c <HAL_ADC_IRQHandler+0x120>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d105      	bne.n	8002bc6 <HAL_ADC_IRQHandler+0xaa>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
<<<<<<< HEAD
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d12b      	bne.n	8002b30 <HAL_ADC_IRQHandler+0x110>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d127      	bne.n	8002b30 <HAL_ADC_IRQHandler+0x110>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d006      	beq.n	8002afc <HAL_ADC_IRQHandler+0xdc>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d119      	bne.n	8002b30 <HAL_ADC_IRQHandler+0x110>
=======
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d12b      	bne.n	8002c2c <HAL_ADC_IRQHandler+0x110>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d127      	bne.n	8002c2c <HAL_ADC_IRQHandler+0x110>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d006      	beq.n	8002bf8 <HAL_ADC_IRQHandler+0xdc>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d119      	bne.n	8002c2c <HAL_ADC_IRQHandler+0x110>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
<<<<<<< HEAD
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0220 	bic.w	r2, r2, #32
 8002b0a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d105      	bne.n	8002b30 <HAL_ADC_IRQHandler+0x110>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	f043 0201 	orr.w	r2, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f022 0220 	bic.w	r2, r2, #32
 8002c06:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d105      	bne.n	8002c2c <HAL_ADC_IRQHandler+0x110>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f043 0201 	orr.w	r2, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
<<<<<<< HEAD
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f8c0 	bl	8002cb6 <HAL_ADC_ConvCpltCallback>
=======
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f8c0 	bl	8002db2 <HAL_ADC_ConvCpltCallback>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
<<<<<<< HEAD
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f06f 0212 	mvn.w	r2, #18
 8002b3e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d057      	beq.n	8002c06 <HAL_ADC_IRQHandler+0x1e6>
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d054      	beq.n	8002c06 <HAL_ADC_IRQHandler+0x1e6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d105      	bne.n	8002b74 <HAL_ADC_IRQHandler+0x154>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f06f 0212 	mvn.w	r2, #18
 8002c3a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d057      	beq.n	8002d02 <HAL_ADC_IRQHandler+0x1e6>
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d054      	beq.n	8002d02 <HAL_ADC_IRQHandler+0x1e6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d105      	bne.n	8002c70 <HAL_ADC_IRQHandler+0x154>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
<<<<<<< HEAD
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d139      	bne.n	8002bf6 <HAL_ADC_IRQHandler+0x1d6>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d006      	beq.n	8002b9e <HAL_ADC_IRQHandler+0x17e>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d12b      	bne.n	8002bf6 <HAL_ADC_IRQHandler+0x1d6>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d124      	bne.n	8002bf6 <HAL_ADC_IRQHandler+0x1d6>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d11d      	bne.n	8002bf6 <HAL_ADC_IRQHandler+0x1d6>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d119      	bne.n	8002bf6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bd0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d105      	bne.n	8002bf6 <HAL_ADC_IRQHandler+0x1d6>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f043 0201 	orr.w	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d139      	bne.n	8002cf2 <HAL_ADC_IRQHandler+0x1d6>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d006      	beq.n	8002c9a <HAL_ADC_IRQHandler+0x17e>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d12b      	bne.n	8002cf2 <HAL_ADC_IRQHandler+0x1d6>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d124      	bne.n	8002cf2 <HAL_ADC_IRQHandler+0x1d6>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d11d      	bne.n	8002cf2 <HAL_ADC_IRQHandler+0x1d6>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d119      	bne.n	8002cf2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ccc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d105      	bne.n	8002cf2 <HAL_ADC_IRQHandler+0x1d6>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f043 0201 	orr.w	r2, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
<<<<<<< HEAD
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fafc 	bl	80031f4 <HAL_ADCEx_InjectedConvCpltCallback>
=======
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fafc 	bl	80032f0 <HAL_ADCEx_InjectedConvCpltCallback>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
<<<<<<< HEAD
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f06f 020c 	mvn.w	r2, #12
 8002c04:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c14:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d017      	beq.n	8002c4c <HAL_ADC_IRQHandler+0x22c>
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d014      	beq.n	8002c4c <HAL_ADC_IRQHandler+0x22c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d10d      	bne.n	8002c4c <HAL_ADC_IRQHandler+0x22c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 020c 	mvn.w	r2, #12
 8002d00:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f003 0301 	and.w	r3, r3, #1
 8002d08:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d10:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d017      	beq.n	8002d48 <HAL_ADC_IRQHandler+0x22c>
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d014      	beq.n	8002d48 <HAL_ADC_IRQHandler+0x22c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d10d      	bne.n	8002d48 <HAL_ADC_IRQHandler+0x22c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
<<<<<<< HEAD
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f844 	bl	8002cca <HAL_ADC_LevelOutOfWindowCallback>
=======
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f844 	bl	8002dc6 <HAL_ADC_LevelOutOfWindowCallback>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
<<<<<<< HEAD
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f06f 0201 	mvn.w	r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
=======
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f06f 0201 	mvn.w	r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
<<<<<<< HEAD
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c5a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d015      	beq.n	8002c8e <HAL_ADC_IRQHandler+0x26e>
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d012      	beq.n	8002c8e <HAL_ADC_IRQHandler+0x26e>
=======
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 0320 	and.w	r3, r3, #32
 8002d4e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d56:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d015      	beq.n	8002d8a <HAL_ADC_IRQHandler+0x26e>
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d012      	beq.n	8002d8a <HAL_ADC_IRQHandler+0x26e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
<<<<<<< HEAD
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6c:	f043 0202 	orr.w	r2, r3, #2
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0220 	mvn.w	r2, #32
 8002c7c:	601a      	str	r2, [r3, #0]
=======
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d68:	f043 0202 	orr.w	r2, r3, #2
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 0220 	mvn.w	r2, #32
 8002d78:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
<<<<<<< HEAD
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f82d 	bl	8002cde <HAL_ADC_ErrorCallback>
=======
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f82d 	bl	8002dda <HAL_ADC_ErrorCallback>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
<<<<<<< HEAD
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0220 	mvn.w	r2, #32
 8002c8c:	601a      	str	r2, [r3, #0]
  }
}
 8002c8e:	bf00      	nop
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	0800bfd0 	.word	0x0800bfd0

08002c9c <HAL_ADC_GetValue>:
=======
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0220 	mvn.w	r2, #32
 8002d88:	601a      	str	r2, [r3, #0]
  }
}
 8002d8a:	bf00      	nop
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	0800c0d0 	.word	0x0800c0d0

08002d98 <HAL_ADC_GetValue>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
<<<<<<< HEAD
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <HAL_ADC_ConvCpltCallback>:
=======
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_ADC_ConvCpltCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
=======
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HAL_ADC_LevelOutOfWindowCallback>:
=======
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_ADC_LevelOutOfWindowCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
=======
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <HAL_ADC_ErrorCallback>:
=======
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HAL_ADC_ErrorCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
=======
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <HAL_ADC_ConfigChannel>:
=======
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <HAL_ADC_ConfigChannel>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
<<<<<<< HEAD
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
=======
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60bb      	str	r3, [r7, #8]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
<<<<<<< HEAD
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b12      	cmp	r3, #18
 8002d08:	d909      	bls.n	8002d1e <HAL_ADC_ConfigChannel+0x2a>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a72      	ldr	r2, [pc, #456]	; (8002ed8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d004      	beq.n	8002d1e <HAL_ADC_ConfigChannel+0x2a>
 8002d14:	f240 618b 	movw	r1, #1675	; 0x68b
 8002d18:	4870      	ldr	r0, [pc, #448]	; (8002edc <HAL_ADC_ConfigChannel+0x1e8>)
 8002d1a:	f7ff f80e 	bl	8001d3a <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_ADC_ConfigChannel+0x3a>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b10      	cmp	r3, #16
 8002d2c:	d904      	bls.n	8002d38 <HAL_ADC_ConfigChannel+0x44>
 8002d2e:	f240 618c 	movw	r1, #1676	; 0x68c
 8002d32:	486a      	ldr	r0, [pc, #424]	; (8002edc <HAL_ADC_ConfigChannel+0x1e8>)
 8002d34:	f7ff f801 	bl	8001d3a <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_ADC_ConfigChannel+0x8e>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d01c      	beq.n	8002d82 <HAL_ADC_ConfigChannel+0x8e>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d018      	beq.n	8002d82 <HAL_ADC_ConfigChannel+0x8e>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d014      	beq.n	8002d82 <HAL_ADC_ConfigChannel+0x8e>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d010      	beq.n	8002d82 <HAL_ADC_ConfigChannel+0x8e>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b05      	cmp	r3, #5
 8002d66:	d00c      	beq.n	8002d82 <HAL_ADC_ConfigChannel+0x8e>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b06      	cmp	r3, #6
 8002d6e:	d008      	beq.n	8002d82 <HAL_ADC_ConfigChannel+0x8e>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	2b07      	cmp	r3, #7
 8002d76:	d004      	beq.n	8002d82 <HAL_ADC_ConfigChannel+0x8e>
 8002d78:	f240 618d 	movw	r1, #1677	; 0x68d
 8002d7c:	4857      	ldr	r0, [pc, #348]	; (8002edc <HAL_ADC_ConfigChannel+0x1e8>)
 8002d7e:	f7fe ffdc 	bl	8001d3a <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x9c>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e118      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x2ce>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b09      	cmp	r3, #9
 8002d9e:	d925      	bls.n	8002dec <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68d9      	ldr	r1, [r3, #12]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	461a      	mov	r2, r3
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	3b1e      	subs	r3, #30
 8002db6:	2207      	movs	r2, #7
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43da      	mvns	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	400a      	ands	r2, r1
 8002dc4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68d9      	ldr	r1, [r3, #12]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	4603      	mov	r3, r0
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4403      	add	r3, r0
 8002dde:	3b1e      	subs	r3, #30
 8002de0:	409a      	lsls	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	e022      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x13e>
=======
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b12      	cmp	r3, #18
 8002e04:	d909      	bls.n	8002e1a <HAL_ADC_ConfigChannel+0x2a>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a72      	ldr	r2, [pc, #456]	; (8002fd4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d004      	beq.n	8002e1a <HAL_ADC_ConfigChannel+0x2a>
 8002e10:	f240 618b 	movw	r1, #1675	; 0x68b
 8002e14:	4870      	ldr	r0, [pc, #448]	; (8002fd8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002e16:	f7ff f80e 	bl	8001e36 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_ADC_ConfigChannel+0x3a>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b10      	cmp	r3, #16
 8002e28:	d904      	bls.n	8002e34 <HAL_ADC_ConfigChannel+0x44>
 8002e2a:	f240 618c 	movw	r1, #1676	; 0x68c
 8002e2e:	486a      	ldr	r0, [pc, #424]	; (8002fd8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002e30:	f7ff f801 	bl	8001e36 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d020      	beq.n	8002e7e <HAL_ADC_ConfigChannel+0x8e>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d01c      	beq.n	8002e7e <HAL_ADC_ConfigChannel+0x8e>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d018      	beq.n	8002e7e <HAL_ADC_ConfigChannel+0x8e>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d014      	beq.n	8002e7e <HAL_ADC_ConfigChannel+0x8e>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d010      	beq.n	8002e7e <HAL_ADC_ConfigChannel+0x8e>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b05      	cmp	r3, #5
 8002e62:	d00c      	beq.n	8002e7e <HAL_ADC_ConfigChannel+0x8e>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2b06      	cmp	r3, #6
 8002e6a:	d008      	beq.n	8002e7e <HAL_ADC_ConfigChannel+0x8e>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b07      	cmp	r3, #7
 8002e72:	d004      	beq.n	8002e7e <HAL_ADC_ConfigChannel+0x8e>
 8002e74:	f240 618d 	movw	r1, #1677	; 0x68d
 8002e78:	4857      	ldr	r0, [pc, #348]	; (8002fd8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002e7a:	f7fe ffdc 	bl	8001e36 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x9c>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e118      	b.n	80030be <HAL_ADC_ConfigChannel+0x2ce>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b09      	cmp	r3, #9
 8002e9a:	d925      	bls.n	8002ee8 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68d9      	ldr	r1, [r3, #12]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	3b1e      	subs	r3, #30
 8002eb2:	2207      	movs	r2, #7
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43da      	mvns	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	400a      	ands	r2, r1
 8002ec0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68d9      	ldr	r1, [r3, #12]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4403      	add	r3, r0
 8002eda:	3b1e      	subs	r3, #30
 8002edc:	409a      	lsls	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	60da      	str	r2, [r3, #12]
 8002ee6:	e022      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x13e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
<<<<<<< HEAD
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6919      	ldr	r1, [r3, #16]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	4413      	add	r3, r2
 8002e00:	2207      	movs	r2, #7
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43da      	mvns	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	400a      	ands	r2, r1
 8002e0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6919      	ldr	r1, [r3, #16]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	4618      	mov	r0, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4403      	add	r3, r0
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	611a      	str	r2, [r3, #16]
=======
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6919      	ldr	r1, [r3, #16]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4413      	add	r3, r2
 8002efc:	2207      	movs	r2, #7
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43da      	mvns	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	400a      	ands	r2, r1
 8002f0a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6919      	ldr	r1, [r3, #16]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	4603      	mov	r3, r0
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	4403      	add	r3, r0
 8002f24:	409a      	lsls	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	611a      	str	r2, [r3, #16]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
<<<<<<< HEAD
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b06      	cmp	r3, #6
 8002e38:	d824      	bhi.n	8002e84 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	3b05      	subs	r3, #5
 8002e4c:	221f      	movs	r2, #31
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	400a      	ands	r2, r1
 8002e5a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	4618      	mov	r0, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	3b05      	subs	r3, #5
 8002e76:	fa00 f203 	lsl.w	r2, r0, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	635a      	str	r2, [r3, #52]	; 0x34
 8002e82:	e051      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b0c      	cmp	r3, #12
 8002e8a:	d829      	bhi.n	8002ee0 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3b23      	subs	r3, #35	; 0x23
 8002e9e:	221f      	movs	r2, #31
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43da      	mvns	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	400a      	ands	r2, r1
 8002eac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	4618      	mov	r0, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3b23      	subs	r3, #35	; 0x23
 8002ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ed4:	e028      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x234>
 8002ed6:	bf00      	nop
 8002ed8:	10000012 	.word	0x10000012
 8002edc:	0800bfd0 	.word	0x0800bfd0
=======
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b06      	cmp	r3, #6
 8002f34:	d824      	bhi.n	8002f80 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	3b05      	subs	r3, #5
 8002f48:	221f      	movs	r2, #31
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43da      	mvns	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	400a      	ands	r2, r1
 8002f56:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	4618      	mov	r0, r3
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	3b05      	subs	r3, #5
 8002f72:	fa00 f203 	lsl.w	r2, r0, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f7e:	e051      	b.n	8003024 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b0c      	cmp	r3, #12
 8002f86:	d829      	bhi.n	8002fdc <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	3b23      	subs	r3, #35	; 0x23
 8002f9a:	221f      	movs	r2, #31
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43da      	mvns	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	400a      	ands	r2, r1
 8002fa8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3b23      	subs	r3, #35	; 0x23
 8002fc4:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	631a      	str	r2, [r3, #48]	; 0x30
 8002fd0:	e028      	b.n	8003024 <HAL_ADC_ConfigChannel+0x234>
 8002fd2:	bf00      	nop
 8002fd4:	10000012 	.word	0x10000012
 8002fd8:	0800c0d0 	.word	0x0800c0d0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
<<<<<<< HEAD
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	3b41      	subs	r3, #65	; 0x41
 8002ef2:	221f      	movs	r2, #31
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43da      	mvns	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	400a      	ands	r2, r1
 8002f00:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	4618      	mov	r0, r3
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	3b41      	subs	r3, #65	; 0x41
 8002f1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	430a      	orrs	r2, r1
 8002f26:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	3b41      	subs	r3, #65	; 0x41
 8002fee:	221f      	movs	r2, #31
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43da      	mvns	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	400a      	ands	r2, r1
 8002ffc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	b29b      	uxth	r3, r3
 800300a:	4618      	mov	r0, r3
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	3b41      	subs	r3, #65	; 0x41
 8003018:	fa00 f203 	lsl.w	r2, r0, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 8002f28:	4b28      	ldr	r3, [pc, #160]	; (8002fcc <HAL_ADC_ConfigChannel+0x2d8>)
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a27      	ldr	r2, [pc, #156]	; (8002fd0 <HAL_ADC_ConfigChannel+0x2dc>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d10f      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x262>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b12      	cmp	r3, #18
 8002f3c:	d10b      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x262>
=======
 8003024:	4b28      	ldr	r3, [pc, #160]	; (80030c8 <HAL_ADC_ConfigChannel+0x2d8>)
 8003026:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a27      	ldr	r2, [pc, #156]	; (80030cc <HAL_ADC_ConfigChannel+0x2dc>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d10f      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x262>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b12      	cmp	r3, #18
 8003038:	d10b      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x262>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
<<<<<<< HEAD
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	605a      	str	r2, [r3, #4]
=======
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	605a      	str	r2, [r3, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
<<<<<<< HEAD
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a1d      	ldr	r2, [pc, #116]	; (8002fd0 <HAL_ADC_ConfigChannel+0x2dc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d12b      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x2c4>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1b      	ldr	r2, [pc, #108]	; (8002fd4 <HAL_ADC_ConfigChannel+0x2e0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d003      	beq.n	8002f72 <HAL_ADC_ConfigChannel+0x27e>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b11      	cmp	r3, #17
 8002f70:	d122      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x2c4>
=======
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1d      	ldr	r2, [pc, #116]	; (80030cc <HAL_ADC_ConfigChannel+0x2dc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d12b      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x2c4>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1b      	ldr	r2, [pc, #108]	; (80030d0 <HAL_ADC_ConfigChannel+0x2e0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d003      	beq.n	800306e <HAL_ADC_ConfigChannel+0x27e>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b11      	cmp	r3, #17
 800306c:	d122      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x2c4>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
<<<<<<< HEAD
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a11      	ldr	r2, [pc, #68]	; (8002fd4 <HAL_ADC_ConfigChannel+0x2e0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d111      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x2c4>
=======
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a11      	ldr	r2, [pc, #68]	; (80030d0 <HAL_ADC_ConfigChannel+0x2e0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d111      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x2c4>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 8002f94:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <HAL_ADC_ConfigChannel+0x2e4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a10      	ldr	r2, [pc, #64]	; (8002fdc <HAL_ADC_ConfigChannel+0x2e8>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	0c9a      	lsrs	r2, r3, #18
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002faa:	e002      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f9      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x2b8>
=======
 8003090:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <HAL_ADC_ConfigChannel+0x2e4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a10      	ldr	r2, [pc, #64]	; (80030d8 <HAL_ADC_ConfigChannel+0x2e8>)
 8003096:	fba2 2303 	umull	r2, r3, r2, r3
 800309a:	0c9a      	lsrs	r2, r3, #18
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030a6:	e002      	b.n	80030ae <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f9      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x2b8>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40012300 	.word	0x40012300
 8002fd0:	40012000 	.word	0x40012000
 8002fd4:	10000012 	.word	0x10000012
 8002fd8:	20000000 	.word	0x20000000
 8002fdc:	431bde83 	.word	0x431bde83

08002fe0 <ADC_Init>:
=======
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40012300 	.word	0x40012300
 80030cc:	40012000 	.word	0x40012000
 80030d0:	10000012 	.word	0x10000012
 80030d4:	20000000 	.word	0x20000000
 80030d8:	431bde83 	.word	0x431bde83

080030dc <ADC_Init>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
=======
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 8002fe8:	4b7f      	ldr	r3, [pc, #508]	; (80031e8 <ADC_Init+0x208>)
 8002fea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	431a      	orrs	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003014:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	021a      	lsls	r2, r3, #8
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003038:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6859      	ldr	r1, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800305a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6899      	ldr	r1, [r3, #8]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	609a      	str	r2, [r3, #8]
=======
 80030e4:	4b7f      	ldr	r3, [pc, #508]	; (80032e4 <ADC_Init+0x208>)
 80030e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	431a      	orrs	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003110:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6859      	ldr	r1, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	021a      	lsls	r2, r3, #8
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003134:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003156:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6899      	ldr	r1, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	609a      	str	r2, [r3, #8]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	4a5e      	ldr	r2, [pc, #376]	; (80031ec <ADC_Init+0x20c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d022      	beq.n	80030be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003086:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6899      	ldr	r1, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6899      	ldr	r1, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	e00f      	b.n	80030de <ADC_Init+0xfe>
=======
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	4a5e      	ldr	r2, [pc, #376]	; (80032e8 <ADC_Init+0x20c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d022      	beq.n	80031ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003182:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6899      	ldr	r1, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6899      	ldr	r1, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	e00f      	b.n	80031da <ADC_Init+0xfe>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< HEAD
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030dc:	609a      	str	r2, [r3, #8]
=======
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031d8:	609a      	str	r2, [r3, #8]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
<<<<<<< HEAD
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0202 	bic.w	r2, r2, #2
 80030ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6899      	ldr	r1, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	7e1b      	ldrb	r3, [r3, #24]
 80030f8:	005a      	lsls	r2, r3, #1
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d028      	beq.n	800315e <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <ADC_Init+0x13c>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	2b08      	cmp	r3, #8
 800311a:	d904      	bls.n	8003126 <ADC_Init+0x146>
 800311c:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8003120:	4833      	ldr	r0, [pc, #204]	; (80031f0 <ADC_Init+0x210>)
 8003122:	f7fe fe0a 	bl	8001d3a <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003134:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003144:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	3b01      	subs	r3, #1
 8003152:	035a      	lsls	r2, r3, #13
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	605a      	str	r2, [r3, #4]
 800315c:	e007      	b.n	800316e <ADC_Init+0x18e>
=======
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0202 	bic.w	r2, r2, #2
 80031e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6899      	ldr	r1, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	7e1b      	ldrb	r3, [r3, #24]
 80031f4:	005a      	lsls	r2, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d028      	beq.n	800325a <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <ADC_Init+0x13c>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	2b08      	cmp	r3, #8
 8003216:	d904      	bls.n	8003222 <ADC_Init+0x146>
 8003218:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 800321c:	4833      	ldr	r0, [pc, #204]	; (80032ec <ADC_Init+0x210>)
 800321e:	f7fe fe0a 	bl	8001e36 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003230:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003240:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6859      	ldr	r1, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	3b01      	subs	r3, #1
 800324e:	035a      	lsls	r2, r3, #13
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	e007      	b.n	800326a <ADC_Init+0x18e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
<<<<<<< HEAD
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800316c:	605a      	str	r2, [r3, #4]
=======
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003268:	605a      	str	r2, [r3, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
<<<<<<< HEAD
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800317c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	3b01      	subs	r3, #1
 800318a:	051a      	lsls	r2, r3, #20
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6899      	ldr	r1, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031b0:	025a      	lsls	r2, r3, #9
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6899      	ldr	r1, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	029a      	lsls	r2, r3, #10
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	609a      	str	r2, [r3, #8]
}
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40012300 	.word	0x40012300
 80031ec:	0f000001 	.word	0x0f000001
 80031f0:	0800bfd0 	.word	0x0800bfd0

080031f4 <HAL_ADCEx_InjectedConvCpltCallback>:
=======
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003278:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	3b01      	subs	r3, #1
 8003286:	051a      	lsls	r2, r3, #20
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800329e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6899      	ldr	r1, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032ac:	025a      	lsls	r2, r3, #9
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6899      	ldr	r1, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	029a      	lsls	r2, r3, #10
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	609a      	str	r2, [r3, #8]
}
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40012300 	.word	0x40012300
 80032e8:	0f000001 	.word	0x0f000001
 80032ec:	0800c0d0 	.word	0x0800c0d0

080032f0 <HAL_ADCEx_InjectedConvCpltCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
=======
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_CAN_Init>:
=======
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_CAN_Init>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
=======
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
<<<<<<< HEAD
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e243      	b.n	80036a2 <HAL_CAN_Init+0x49a>
=======
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e243      	b.n	800379e <HAL_CAN_Init+0x49a>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
<<<<<<< HEAD
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a93      	ldr	r2, [pc, #588]	; (800346c <HAL_CAN_Init+0x264>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d009      	beq.n	8003238 <HAL_CAN_Init+0x30>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a91      	ldr	r2, [pc, #580]	; (8003470 <HAL_CAN_Init+0x268>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d004      	beq.n	8003238 <HAL_CAN_Init+0x30>
 800322e:	f240 111d 	movw	r1, #285	; 0x11d
 8003232:	4890      	ldr	r0, [pc, #576]	; (8003474 <HAL_CAN_Init+0x26c>)
 8003234:	f7fe fd81 	bl	8001d3a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	7e1b      	ldrb	r3, [r3, #24]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_CAN_Init+0x4a>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	7e1b      	ldrb	r3, [r3, #24]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d004      	beq.n	8003252 <HAL_CAN_Init+0x4a>
 8003248:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800324c:	4889      	ldr	r0, [pc, #548]	; (8003474 <HAL_CAN_Init+0x26c>)
 800324e:	f7fe fd74 	bl	8001d3a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	7e5b      	ldrb	r3, [r3, #25]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d008      	beq.n	800326c <HAL_CAN_Init+0x64>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	7e5b      	ldrb	r3, [r3, #25]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d004      	beq.n	800326c <HAL_CAN_Init+0x64>
 8003262:	f240 111f 	movw	r1, #287	; 0x11f
 8003266:	4883      	ldr	r0, [pc, #524]	; (8003474 <HAL_CAN_Init+0x26c>)
 8003268:	f7fe fd67 	bl	8001d3a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	7e9b      	ldrb	r3, [r3, #26]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_CAN_Init+0x7e>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	7e9b      	ldrb	r3, [r3, #26]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d004      	beq.n	8003286 <HAL_CAN_Init+0x7e>
 800327c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003280:	487c      	ldr	r0, [pc, #496]	; (8003474 <HAL_CAN_Init+0x26c>)
 8003282:	f7fe fd5a 	bl	8001d3a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	7edb      	ldrb	r3, [r3, #27]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_CAN_Init+0x98>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	7edb      	ldrb	r3, [r3, #27]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d004      	beq.n	80032a0 <HAL_CAN_Init+0x98>
 8003296:	f240 1121 	movw	r1, #289	; 0x121
 800329a:	4876      	ldr	r0, [pc, #472]	; (8003474 <HAL_CAN_Init+0x26c>)
 800329c:	f7fe fd4d 	bl	8001d3a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	7f1b      	ldrb	r3, [r3, #28]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_CAN_Init+0xb2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	7f1b      	ldrb	r3, [r3, #28]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d004      	beq.n	80032ba <HAL_CAN_Init+0xb2>
 80032b0:	f44f 7191 	mov.w	r1, #290	; 0x122
 80032b4:	486f      	ldr	r0, [pc, #444]	; (8003474 <HAL_CAN_Init+0x26c>)
 80032b6:	f7fe fd40 	bl	8001d3a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	7f5b      	ldrb	r3, [r3, #29]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d008      	beq.n	80032d4 <HAL_CAN_Init+0xcc>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	7f5b      	ldrb	r3, [r3, #29]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d004      	beq.n	80032d4 <HAL_CAN_Init+0xcc>
 80032ca:	f240 1123 	movw	r1, #291	; 0x123
 80032ce:	4869      	ldr	r0, [pc, #420]	; (8003474 <HAL_CAN_Init+0x26c>)
 80032d0:	f7fe fd33 	bl	8001d3a <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d013      	beq.n	8003304 <HAL_CAN_Init+0xfc>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e4:	d00e      	beq.n	8003304 <HAL_CAN_Init+0xfc>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032ee:	d009      	beq.n	8003304 <HAL_CAN_Init+0xfc>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80032f8:	d004      	beq.n	8003304 <HAL_CAN_Init+0xfc>
 80032fa:	f44f 7192 	mov.w	r1, #292	; 0x124
 80032fe:	485d      	ldr	r0, [pc, #372]	; (8003474 <HAL_CAN_Init+0x26c>)
 8003300:	f7fe fd1b 	bl	8001d3a <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d013      	beq.n	8003334 <HAL_CAN_Init+0x12c>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003314:	d00e      	beq.n	8003334 <HAL_CAN_Init+0x12c>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800331e:	d009      	beq.n	8003334 <HAL_CAN_Init+0x12c>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003328:	d004      	beq.n	8003334 <HAL_CAN_Init+0x12c>
 800332a:	f240 1125 	movw	r1, #293	; 0x125
 800332e:	4851      	ldr	r0, [pc, #324]	; (8003474 <HAL_CAN_Init+0x26c>)
 8003330:	f7fe fd03 	bl	8001d3a <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d04f      	beq.n	80033dc <HAL_CAN_Init+0x1d4>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003344:	d04a      	beq.n	80033dc <HAL_CAN_Init+0x1d4>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800334e:	d045      	beq.n	80033dc <HAL_CAN_Init+0x1d4>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003358:	d040      	beq.n	80033dc <HAL_CAN_Init+0x1d4>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003362:	d03b      	beq.n	80033dc <HAL_CAN_Init+0x1d4>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800336c:	d036      	beq.n	80033dc <HAL_CAN_Init+0x1d4>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8003376:	d031      	beq.n	80033dc <HAL_CAN_Init+0x1d4>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8003380:	d02c      	beq.n	80033dc <HAL_CAN_Init+0x1d4>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800338a:	d027      	beq.n	80033dc <HAL_CAN_Init+0x1d4>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8003394:	d022      	beq.n	80033dc <HAL_CAN_Init+0x1d4>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800339e:	d01d      	beq.n	80033dc <HAL_CAN_Init+0x1d4>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 80033a8:	d018      	beq.n	80033dc <HAL_CAN_Init+0x1d4>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033b2:	d013      	beq.n	80033dc <HAL_CAN_Init+0x1d4>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 80033bc:	d00e      	beq.n	80033dc <HAL_CAN_Init+0x1d4>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80033c6:	d009      	beq.n	80033dc <HAL_CAN_Init+0x1d4>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 80033d0:	d004      	beq.n	80033dc <HAL_CAN_Init+0x1d4>
 80033d2:	f44f 7193 	mov.w	r1, #294	; 0x126
 80033d6:	4827      	ldr	r0, [pc, #156]	; (8003474 <HAL_CAN_Init+0x26c>)
 80033d8:	f7fe fcaf 	bl	8001d3a <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d027      	beq.n	8003434 <HAL_CAN_Init+0x22c>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ec:	d022      	beq.n	8003434 <HAL_CAN_Init+0x22c>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033f6:	d01d      	beq.n	8003434 <HAL_CAN_Init+0x22c>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003400:	d018      	beq.n	8003434 <HAL_CAN_Init+0x22c>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800340a:	d013      	beq.n	8003434 <HAL_CAN_Init+0x22c>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003414:	d00e      	beq.n	8003434 <HAL_CAN_Init+0x22c>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800341e:	d009      	beq.n	8003434 <HAL_CAN_Init+0x22c>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8003428:	d004      	beq.n	8003434 <HAL_CAN_Init+0x22c>
 800342a:	f240 1127 	movw	r1, #295	; 0x127
 800342e:	4811      	ldr	r0, [pc, #68]	; (8003474 <HAL_CAN_Init+0x26c>)
 8003430:	f7fe fc83 	bl	8001d3a <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d004      	beq.n	8003446 <HAL_CAN_Init+0x23e>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003444:	d904      	bls.n	8003450 <HAL_CAN_Init+0x248>
 8003446:	f44f 7194 	mov.w	r1, #296	; 0x128
 800344a:	480a      	ldr	r0, [pc, #40]	; (8003474 <HAL_CAN_Init+0x26c>)
 800344c:	f7fe fc75 	bl	8001d3a <assert_failed>

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d13d      	bne.n	80034d8 <HAL_CAN_Init+0x2d0>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a06      	ldr	r2, [pc, #24]	; (8003478 <HAL_CAN_Init+0x270>)
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a05      	ldr	r2, [pc, #20]	; (800347c <HAL_CAN_Init+0x274>)
 8003466:	645a      	str	r2, [r3, #68]	; 0x44
 8003468:	e00a      	b.n	8003480 <HAL_CAN_Init+0x278>
 800346a:	bf00      	nop
 800346c:	40006400 	.word	0x40006400
 8003470:	40006800 	.word	0x40006800
 8003474:	0800c008 	.word	0x0800c008
 8003478:	080013d5 	.word	0x080013d5
 800347c:	08004287 	.word	0x08004287
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a8a      	ldr	r2, [pc, #552]	; (80036ac <HAL_CAN_Init+0x4a4>)
 8003484:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a89      	ldr	r2, [pc, #548]	; (80036b0 <HAL_CAN_Init+0x4a8>)
 800348a:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a89      	ldr	r2, [pc, #548]	; (80036b4 <HAL_CAN_Init+0x4ac>)
 8003490:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a88      	ldr	r2, [pc, #544]	; (80036b8 <HAL_CAN_Init+0x4b0>)
 8003496:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a88      	ldr	r2, [pc, #544]	; (80036bc <HAL_CAN_Init+0x4b4>)
 800349c:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a87      	ldr	r2, [pc, #540]	; (80036c0 <HAL_CAN_Init+0x4b8>)
 80034a2:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a87      	ldr	r2, [pc, #540]	; (80036c4 <HAL_CAN_Init+0x4bc>)
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a86      	ldr	r2, [pc, #536]	; (80036c8 <HAL_CAN_Init+0x4c0>)
 80034ae:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a86      	ldr	r2, [pc, #536]	; (80036cc <HAL_CAN_Init+0x4c4>)
 80034b4:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a85      	ldr	r2, [pc, #532]	; (80036d0 <HAL_CAN_Init+0x4c8>)
 80034ba:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a85      	ldr	r2, [pc, #532]	; (80036d4 <HAL_CAN_Init+0x4cc>)
 80034c0:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d102      	bne.n	80034d0 <HAL_CAN_Init+0x2c8>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a82      	ldr	r2, [pc, #520]	; (80036d8 <HAL_CAN_Init+0x4d0>)
 80034ce:	65da      	str	r2, [r3, #92]	; 0x5c
=======
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a93      	ldr	r2, [pc, #588]	; (8003568 <HAL_CAN_Init+0x264>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d009      	beq.n	8003334 <HAL_CAN_Init+0x30>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a91      	ldr	r2, [pc, #580]	; (800356c <HAL_CAN_Init+0x268>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d004      	beq.n	8003334 <HAL_CAN_Init+0x30>
 800332a:	f240 111d 	movw	r1, #285	; 0x11d
 800332e:	4890      	ldr	r0, [pc, #576]	; (8003570 <HAL_CAN_Init+0x26c>)
 8003330:	f7fe fd81 	bl	8001e36 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	7e1b      	ldrb	r3, [r3, #24]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <HAL_CAN_Init+0x4a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	7e1b      	ldrb	r3, [r3, #24]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d004      	beq.n	800334e <HAL_CAN_Init+0x4a>
 8003344:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003348:	4889      	ldr	r0, [pc, #548]	; (8003570 <HAL_CAN_Init+0x26c>)
 800334a:	f7fe fd74 	bl	8001e36 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	7e5b      	ldrb	r3, [r3, #25]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d008      	beq.n	8003368 <HAL_CAN_Init+0x64>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	7e5b      	ldrb	r3, [r3, #25]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d004      	beq.n	8003368 <HAL_CAN_Init+0x64>
 800335e:	f240 111f 	movw	r1, #287	; 0x11f
 8003362:	4883      	ldr	r0, [pc, #524]	; (8003570 <HAL_CAN_Init+0x26c>)
 8003364:	f7fe fd67 	bl	8001e36 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	7e9b      	ldrb	r3, [r3, #26]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_CAN_Init+0x7e>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	7e9b      	ldrb	r3, [r3, #26]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d004      	beq.n	8003382 <HAL_CAN_Init+0x7e>
 8003378:	f44f 7190 	mov.w	r1, #288	; 0x120
 800337c:	487c      	ldr	r0, [pc, #496]	; (8003570 <HAL_CAN_Init+0x26c>)
 800337e:	f7fe fd5a 	bl	8001e36 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	7edb      	ldrb	r3, [r3, #27]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <HAL_CAN_Init+0x98>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	7edb      	ldrb	r3, [r3, #27]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d004      	beq.n	800339c <HAL_CAN_Init+0x98>
 8003392:	f240 1121 	movw	r1, #289	; 0x121
 8003396:	4876      	ldr	r0, [pc, #472]	; (8003570 <HAL_CAN_Init+0x26c>)
 8003398:	f7fe fd4d 	bl	8001e36 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	7f1b      	ldrb	r3, [r3, #28]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_CAN_Init+0xb2>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	7f1b      	ldrb	r3, [r3, #28]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d004      	beq.n	80033b6 <HAL_CAN_Init+0xb2>
 80033ac:	f44f 7191 	mov.w	r1, #290	; 0x122
 80033b0:	486f      	ldr	r0, [pc, #444]	; (8003570 <HAL_CAN_Init+0x26c>)
 80033b2:	f7fe fd40 	bl	8001e36 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	7f5b      	ldrb	r3, [r3, #29]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <HAL_CAN_Init+0xcc>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	7f5b      	ldrb	r3, [r3, #29]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d004      	beq.n	80033d0 <HAL_CAN_Init+0xcc>
 80033c6:	f240 1123 	movw	r1, #291	; 0x123
 80033ca:	4869      	ldr	r0, [pc, #420]	; (8003570 <HAL_CAN_Init+0x26c>)
 80033cc:	f7fe fd33 	bl	8001e36 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d013      	beq.n	8003400 <HAL_CAN_Init+0xfc>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e0:	d00e      	beq.n	8003400 <HAL_CAN_Init+0xfc>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033ea:	d009      	beq.n	8003400 <HAL_CAN_Init+0xfc>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80033f4:	d004      	beq.n	8003400 <HAL_CAN_Init+0xfc>
 80033f6:	f44f 7192 	mov.w	r1, #292	; 0x124
 80033fa:	485d      	ldr	r0, [pc, #372]	; (8003570 <HAL_CAN_Init+0x26c>)
 80033fc:	f7fe fd1b 	bl	8001e36 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d013      	beq.n	8003430 <HAL_CAN_Init+0x12c>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003410:	d00e      	beq.n	8003430 <HAL_CAN_Init+0x12c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800341a:	d009      	beq.n	8003430 <HAL_CAN_Init+0x12c>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003424:	d004      	beq.n	8003430 <HAL_CAN_Init+0x12c>
 8003426:	f240 1125 	movw	r1, #293	; 0x125
 800342a:	4851      	ldr	r0, [pc, #324]	; (8003570 <HAL_CAN_Init+0x26c>)
 800342c:	f7fe fd03 	bl	8001e36 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d04f      	beq.n	80034d8 <HAL_CAN_Init+0x1d4>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003440:	d04a      	beq.n	80034d8 <HAL_CAN_Init+0x1d4>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800344a:	d045      	beq.n	80034d8 <HAL_CAN_Init+0x1d4>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003454:	d040      	beq.n	80034d8 <HAL_CAN_Init+0x1d4>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800345e:	d03b      	beq.n	80034d8 <HAL_CAN_Init+0x1d4>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003468:	d036      	beq.n	80034d8 <HAL_CAN_Init+0x1d4>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8003472:	d031      	beq.n	80034d8 <HAL_CAN_Init+0x1d4>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 800347c:	d02c      	beq.n	80034d8 <HAL_CAN_Init+0x1d4>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003486:	d027      	beq.n	80034d8 <HAL_CAN_Init+0x1d4>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8003490:	d022      	beq.n	80034d8 <HAL_CAN_Init+0x1d4>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800349a:	d01d      	beq.n	80034d8 <HAL_CAN_Init+0x1d4>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 80034a4:	d018      	beq.n	80034d8 <HAL_CAN_Init+0x1d4>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034ae:	d013      	beq.n	80034d8 <HAL_CAN_Init+0x1d4>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 80034b8:	d00e      	beq.n	80034d8 <HAL_CAN_Init+0x1d4>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80034c2:	d009      	beq.n	80034d8 <HAL_CAN_Init+0x1d4>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 80034cc:	d004      	beq.n	80034d8 <HAL_CAN_Init+0x1d4>
 80034ce:	f44f 7193 	mov.w	r1, #294	; 0x126
 80034d2:	4827      	ldr	r0, [pc, #156]	; (8003570 <HAL_CAN_Init+0x26c>)
 80034d4:	f7fe fcaf 	bl	8001e36 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d027      	beq.n	8003530 <HAL_CAN_Init+0x22c>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034e8:	d022      	beq.n	8003530 <HAL_CAN_Init+0x22c>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034f2:	d01d      	beq.n	8003530 <HAL_CAN_Init+0x22c>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034fc:	d018      	beq.n	8003530 <HAL_CAN_Init+0x22c>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003506:	d013      	beq.n	8003530 <HAL_CAN_Init+0x22c>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003510:	d00e      	beq.n	8003530 <HAL_CAN_Init+0x22c>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800351a:	d009      	beq.n	8003530 <HAL_CAN_Init+0x22c>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8003524:	d004      	beq.n	8003530 <HAL_CAN_Init+0x22c>
 8003526:	f240 1127 	movw	r1, #295	; 0x127
 800352a:	4811      	ldr	r0, [pc, #68]	; (8003570 <HAL_CAN_Init+0x26c>)
 800352c:	f7fe fc83 	bl	8001e36 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d004      	beq.n	8003542 <HAL_CAN_Init+0x23e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003540:	d904      	bls.n	800354c <HAL_CAN_Init+0x248>
 8003542:	f44f 7194 	mov.w	r1, #296	; 0x128
 8003546:	480a      	ldr	r0, [pc, #40]	; (8003570 <HAL_CAN_Init+0x26c>)
 8003548:	f7fe fc75 	bl	8001e36 <assert_failed>

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d13d      	bne.n	80035d4 <HAL_CAN_Init+0x2d0>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a06      	ldr	r2, [pc, #24]	; (8003574 <HAL_CAN_Init+0x270>)
 800355c:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a05      	ldr	r2, [pc, #20]	; (8003578 <HAL_CAN_Init+0x274>)
 8003562:	645a      	str	r2, [r3, #68]	; 0x44
 8003564:	e00a      	b.n	800357c <HAL_CAN_Init+0x278>
 8003566:	bf00      	nop
 8003568:	40006400 	.word	0x40006400
 800356c:	40006800 	.word	0x40006800
 8003570:	0800c108 	.word	0x0800c108
 8003574:	0800139d 	.word	0x0800139d
 8003578:	08004383 	.word	0x08004383
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a8a      	ldr	r2, [pc, #552]	; (80037a8 <HAL_CAN_Init+0x4a4>)
 8003580:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a89      	ldr	r2, [pc, #548]	; (80037ac <HAL_CAN_Init+0x4a8>)
 8003586:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a89      	ldr	r2, [pc, #548]	; (80037b0 <HAL_CAN_Init+0x4ac>)
 800358c:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a88      	ldr	r2, [pc, #544]	; (80037b4 <HAL_CAN_Init+0x4b0>)
 8003592:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a88      	ldr	r2, [pc, #544]	; (80037b8 <HAL_CAN_Init+0x4b4>)
 8003598:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a87      	ldr	r2, [pc, #540]	; (80037bc <HAL_CAN_Init+0x4b8>)
 800359e:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a87      	ldr	r2, [pc, #540]	; (80037c0 <HAL_CAN_Init+0x4bc>)
 80035a4:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a86      	ldr	r2, [pc, #536]	; (80037c4 <HAL_CAN_Init+0x4c0>)
 80035aa:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a86      	ldr	r2, [pc, #536]	; (80037c8 <HAL_CAN_Init+0x4c4>)
 80035b0:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a85      	ldr	r2, [pc, #532]	; (80037cc <HAL_CAN_Init+0x4c8>)
 80035b6:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a85      	ldr	r2, [pc, #532]	; (80037d0 <HAL_CAN_Init+0x4cc>)
 80035bc:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d102      	bne.n	80035cc <HAL_CAN_Init+0x2c8>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a82      	ldr	r2, [pc, #520]	; (80037d4 <HAL_CAN_Init+0x4d0>)
 80035ca:	65da      	str	r2, [r3, #92]	; 0x5c
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
<<<<<<< HEAD
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
=======
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4798      	blx	r3
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
<<<<<<< HEAD
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034e8:	f7ff f806 	bl	80024f8 <HAL_GetTick>
 80034ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034ee:	e012      	b.n	8003516 <HAL_CAN_Init+0x30e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034f0:	f7ff f802 	bl	80024f8 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b0a      	cmp	r3, #10
 80034fc:	d90b      	bls.n	8003516 <HAL_CAN_Init+0x30e>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2205      	movs	r2, #5
 800350e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e0c5      	b.n	80036a2 <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0e5      	beq.n	80034f0 <HAL_CAN_Init+0x2e8>
=======
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035e4:	f7ff f806 	bl	80025f4 <HAL_GetTick>
 80035e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035ea:	e012      	b.n	8003612 <HAL_CAN_Init+0x30e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035ec:	f7ff f802 	bl	80025f4 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b0a      	cmp	r3, #10
 80035f8:	d90b      	bls.n	8003612 <HAL_CAN_Init+0x30e>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2205      	movs	r2, #5
 800360a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e0c5      	b.n	800379e <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0e5      	beq.n	80035ec <HAL_CAN_Init+0x2e8>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
<<<<<<< HEAD
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0202 	bic.w	r2, r2, #2
 8003532:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003534:	f7fe ffe0 	bl	80024f8 <HAL_GetTick>
 8003538:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800353a:	e012      	b.n	8003562 <HAL_CAN_Init+0x35a>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800353c:	f7fe ffdc 	bl	80024f8 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b0a      	cmp	r3, #10
 8003548:	d90b      	bls.n	8003562 <HAL_CAN_Init+0x35a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2205      	movs	r2, #5
 800355a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e09f      	b.n	80036a2 <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1e5      	bne.n	800353c <HAL_CAN_Init+0x334>
=======
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0202 	bic.w	r2, r2, #2
 800362e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003630:	f7fe ffe0 	bl	80025f4 <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003636:	e012      	b.n	800365e <HAL_CAN_Init+0x35a>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003638:	f7fe ffdc 	bl	80025f4 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b0a      	cmp	r3, #10
 8003644:	d90b      	bls.n	800365e <HAL_CAN_Init+0x35a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2205      	movs	r2, #5
 8003656:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e09f      	b.n	800379e <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e5      	bne.n	8003638 <HAL_CAN_Init+0x334>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
<<<<<<< HEAD
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	7e1b      	ldrb	r3, [r3, #24]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d108      	bne.n	800358a <HAL_CAN_Init+0x382>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	e007      	b.n	800359a <HAL_CAN_Init+0x392>
=======
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	7e1b      	ldrb	r3, [r3, #24]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d108      	bne.n	8003686 <HAL_CAN_Init+0x382>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	e007      	b.n	8003696 <HAL_CAN_Init+0x392>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
<<<<<<< HEAD
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003598:	601a      	str	r2, [r3, #0]
=======
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003694:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
<<<<<<< HEAD
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	7e5b      	ldrb	r3, [r3, #25]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d108      	bne.n	80035b4 <HAL_CAN_Init+0x3ac>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	e007      	b.n	80035c4 <HAL_CAN_Init+0x3bc>
=======
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	7e5b      	ldrb	r3, [r3, #25]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d108      	bne.n	80036b0 <HAL_CAN_Init+0x3ac>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	e007      	b.n	80036c0 <HAL_CAN_Init+0x3bc>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
<<<<<<< HEAD
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c2:	601a      	str	r2, [r3, #0]
=======
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036be:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
<<<<<<< HEAD
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	7e9b      	ldrb	r3, [r3, #26]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d108      	bne.n	80035de <HAL_CAN_Init+0x3d6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0220 	orr.w	r2, r2, #32
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	e007      	b.n	80035ee <HAL_CAN_Init+0x3e6>
=======
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	7e9b      	ldrb	r3, [r3, #26]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d108      	bne.n	80036da <HAL_CAN_Init+0x3d6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0220 	orr.w	r2, r2, #32
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	e007      	b.n	80036ea <HAL_CAN_Init+0x3e6>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
<<<<<<< HEAD
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0220 	bic.w	r2, r2, #32
 80035ec:	601a      	str	r2, [r3, #0]
=======
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0220 	bic.w	r2, r2, #32
 80036e8:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
<<<<<<< HEAD
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	7edb      	ldrb	r3, [r3, #27]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d108      	bne.n	8003608 <HAL_CAN_Init+0x400>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0210 	bic.w	r2, r2, #16
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	e007      	b.n	8003618 <HAL_CAN_Init+0x410>
=======
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	7edb      	ldrb	r3, [r3, #27]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d108      	bne.n	8003704 <HAL_CAN_Init+0x400>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0210 	bic.w	r2, r2, #16
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	e007      	b.n	8003714 <HAL_CAN_Init+0x410>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
<<<<<<< HEAD
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0210 	orr.w	r2, r2, #16
 8003616:	601a      	str	r2, [r3, #0]
=======
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0210 	orr.w	r2, r2, #16
 8003712:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
<<<<<<< HEAD
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	7f1b      	ldrb	r3, [r3, #28]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d108      	bne.n	8003632 <HAL_CAN_Init+0x42a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0208 	orr.w	r2, r2, #8
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	e007      	b.n	8003642 <HAL_CAN_Init+0x43a>
=======
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	7f1b      	ldrb	r3, [r3, #28]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d108      	bne.n	800372e <HAL_CAN_Init+0x42a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0208 	orr.w	r2, r2, #8
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	e007      	b.n	800373e <HAL_CAN_Init+0x43a>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
<<<<<<< HEAD
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0208 	bic.w	r2, r2, #8
 8003640:	601a      	str	r2, [r3, #0]
=======
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0208 	bic.w	r2, r2, #8
 800373c:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
<<<<<<< HEAD
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	7f5b      	ldrb	r3, [r3, #29]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d108      	bne.n	800365c <HAL_CAN_Init+0x454>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0204 	orr.w	r2, r2, #4
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	e007      	b.n	800366c <HAL_CAN_Init+0x464>
=======
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	7f5b      	ldrb	r3, [r3, #29]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d108      	bne.n	8003758 <HAL_CAN_Init+0x454>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0204 	orr.w	r2, r2, #4
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	e007      	b.n	8003768 <HAL_CAN_Init+0x464>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
<<<<<<< HEAD
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0204 	bic.w	r2, r2, #4
 800366a:	601a      	str	r2, [r3, #0]
=======
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0204 	bic.w	r2, r2, #4
 8003766:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
<<<<<<< HEAD
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	431a      	orrs	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	ea42 0103 	orr.w	r1, r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	1e5a      	subs	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	61da      	str	r2, [r3, #28]
=======
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	431a      	orrs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	ea42 0103 	orr.w	r1, r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	1e5a      	subs	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	61da      	str	r2, [r3, #28]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
<<<<<<< HEAD
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	0800429b 	.word	0x0800429b
 80036b0:	080042af 	.word	0x080042af
 80036b4:	0800420f 	.word	0x0800420f
 80036b8:	08004223 	.word	0x08004223
 80036bc:	08004237 	.word	0x08004237
 80036c0:	0800424b 	.word	0x0800424b
 80036c4:	0800425f 	.word	0x0800425f
 80036c8:	08004273 	.word	0x08004273
 80036cc:	080042c3 	.word	0x080042c3
 80036d0:	080042d7 	.word	0x080042d7
 80036d4:	080042eb 	.word	0x080042eb
 80036d8:	08001455 	.word	0x08001455

080036dc <HAL_CAN_ConfigFilter>:
=======
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	08004397 	.word	0x08004397
 80037ac:	080043ab 	.word	0x080043ab
 80037b0:	0800430b 	.word	0x0800430b
 80037b4:	0800431f 	.word	0x0800431f
 80037b8:	08004333 	.word	0x08004333
 80037bc:	08004347 	.word	0x08004347
 80037c0:	0800435b 	.word	0x0800435b
 80037c4:	0800436f 	.word	0x0800436f
 80037c8:	080043bf 	.word	0x080043bf
 80037cc:	080043d3 	.word	0x080043d3
 80037d0:	080043e7 	.word	0x080043e7
 80037d4:	08001525 	.word	0x08001525

080037d8 <HAL_CAN_ConfigFilter>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
<<<<<<< HEAD
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036f2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80036f4:	7cfb      	ldrb	r3, [r7, #19]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d003      	beq.n	8003702 <HAL_CAN_ConfigFilter+0x26>
 80036fa:	7cfb      	ldrb	r3, [r7, #19]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	f040 812c 	bne.w	800395a <HAL_CAN_ConfigFilter+0x27e>
=======
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80037f0:	7cfb      	ldrb	r3, [r7, #19]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d003      	beq.n	80037fe <HAL_CAN_ConfigFilter+0x26>
 80037f6:	7cfb      	ldrb	r3, [r7, #19]
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	f040 812c 	bne.w	8003a56 <HAL_CAN_ConfigFilter+0x27e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
<<<<<<< HEAD
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370a:	d304      	bcc.n	8003716 <HAL_CAN_ConfigFilter+0x3a>
 800370c:	f44f 7154 	mov.w	r1, #848	; 0x350
 8003710:	4897      	ldr	r0, [pc, #604]	; (8003970 <HAL_CAN_ConfigFilter+0x294>)
 8003712:	f7fe fb12 	bl	8001d3a <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800371e:	d304      	bcc.n	800372a <HAL_CAN_ConfigFilter+0x4e>
 8003720:	f240 3151 	movw	r1, #849	; 0x351
 8003724:	4892      	ldr	r0, [pc, #584]	; (8003970 <HAL_CAN_ConfigFilter+0x294>)
 8003726:	f7fe fb08 	bl	8001d3a <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003732:	d304      	bcc.n	800373e <HAL_CAN_ConfigFilter+0x62>
 8003734:	f240 3152 	movw	r1, #850	; 0x352
 8003738:	488d      	ldr	r0, [pc, #564]	; (8003970 <HAL_CAN_ConfigFilter+0x294>)
 800373a:	f7fe fafe 	bl	8001d3a <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003746:	d304      	bcc.n	8003752 <HAL_CAN_ConfigFilter+0x76>
 8003748:	f240 3153 	movw	r1, #851	; 0x353
 800374c:	4888      	ldr	r0, [pc, #544]	; (8003970 <HAL_CAN_ConfigFilter+0x294>)
 800374e:	f7fe faf4 	bl	8001d3a <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d008      	beq.n	800376c <HAL_CAN_ConfigFilter+0x90>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d004      	beq.n	800376c <HAL_CAN_ConfigFilter+0x90>
 8003762:	f44f 7155 	mov.w	r1, #852	; 0x354
 8003766:	4882      	ldr	r0, [pc, #520]	; (8003970 <HAL_CAN_ConfigFilter+0x294>)
 8003768:	f7fe fae7 	bl	8001d3a <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_CAN_ConfigFilter+0xaa>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d004      	beq.n	8003786 <HAL_CAN_ConfigFilter+0xaa>
 800377c:	f240 3155 	movw	r1, #853	; 0x355
 8003780:	487b      	ldr	r0, [pc, #492]	; (8003970 <HAL_CAN_ConfigFilter+0x294>)
 8003782:	f7fe fada 	bl	8001d3a <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d008      	beq.n	80037a0 <HAL_CAN_ConfigFilter+0xc4>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d004      	beq.n	80037a0 <HAL_CAN_ConfigFilter+0xc4>
 8003796:	f240 3156 	movw	r1, #854	; 0x356
 800379a:	4875      	ldr	r0, [pc, #468]	; (8003970 <HAL_CAN_ConfigFilter+0x294>)
 800379c:	f7fe facd 	bl	8001d3a <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <HAL_CAN_ConfigFilter+0xde>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d004      	beq.n	80037ba <HAL_CAN_ConfigFilter+0xde>
 80037b0:	f240 3157 	movw	r1, #855	; 0x357
 80037b4:	486e      	ldr	r0, [pc, #440]	; (8003970 <HAL_CAN_ConfigFilter+0x294>)
 80037b6:	f7fe fac0 	bl	8001d3a <assert_failed>
=======
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003806:	d304      	bcc.n	8003812 <HAL_CAN_ConfigFilter+0x3a>
 8003808:	f44f 7154 	mov.w	r1, #848	; 0x350
 800380c:	4897      	ldr	r0, [pc, #604]	; (8003a6c <HAL_CAN_ConfigFilter+0x294>)
 800380e:	f7fe fb12 	bl	8001e36 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381a:	d304      	bcc.n	8003826 <HAL_CAN_ConfigFilter+0x4e>
 800381c:	f240 3151 	movw	r1, #849	; 0x351
 8003820:	4892      	ldr	r0, [pc, #584]	; (8003a6c <HAL_CAN_ConfigFilter+0x294>)
 8003822:	f7fe fb08 	bl	8001e36 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382e:	d304      	bcc.n	800383a <HAL_CAN_ConfigFilter+0x62>
 8003830:	f240 3152 	movw	r1, #850	; 0x352
 8003834:	488d      	ldr	r0, [pc, #564]	; (8003a6c <HAL_CAN_ConfigFilter+0x294>)
 8003836:	f7fe fafe 	bl	8001e36 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003842:	d304      	bcc.n	800384e <HAL_CAN_ConfigFilter+0x76>
 8003844:	f240 3153 	movw	r1, #851	; 0x353
 8003848:	4888      	ldr	r0, [pc, #544]	; (8003a6c <HAL_CAN_ConfigFilter+0x294>)
 800384a:	f7fe faf4 	bl	8001e36 <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <HAL_CAN_ConfigFilter+0x90>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d004      	beq.n	8003868 <HAL_CAN_ConfigFilter+0x90>
 800385e:	f44f 7155 	mov.w	r1, #852	; 0x354
 8003862:	4882      	ldr	r0, [pc, #520]	; (8003a6c <HAL_CAN_ConfigFilter+0x294>)
 8003864:	f7fe fae7 	bl	8001e36 <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <HAL_CAN_ConfigFilter+0xaa>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d004      	beq.n	8003882 <HAL_CAN_ConfigFilter+0xaa>
 8003878:	f240 3155 	movw	r1, #853	; 0x355
 800387c:	487b      	ldr	r0, [pc, #492]	; (8003a6c <HAL_CAN_ConfigFilter+0x294>)
 800387e:	f7fe fada 	bl	8001e36 <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <HAL_CAN_ConfigFilter+0xc4>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d004      	beq.n	800389c <HAL_CAN_ConfigFilter+0xc4>
 8003892:	f240 3156 	movw	r1, #854	; 0x356
 8003896:	4875      	ldr	r0, [pc, #468]	; (8003a6c <HAL_CAN_ConfigFilter+0x294>)
 8003898:	f7fe facd 	bl	8001e36 <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d008      	beq.n	80038b6 <HAL_CAN_ConfigFilter+0xde>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d004      	beq.n	80038b6 <HAL_CAN_ConfigFilter+0xde>
 80038ac:	f240 3157 	movw	r1, #855	; 0x357
 80038b0:	486e      	ldr	r0, [pc, #440]	; (8003a6c <HAL_CAN_ConfigFilter+0x294>)
 80038b2:	f7fe fac0 	bl	8001e36 <assert_failed>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
<<<<<<< HEAD
 80037ba:	4b6e      	ldr	r3, [pc, #440]	; (8003974 <HAL_CAN_ConfigFilter+0x298>)
 80037bc:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	2b1b      	cmp	r3, #27
 80037c4:	d904      	bls.n	80037d0 <HAL_CAN_ConfigFilter+0xf4>
 80037c6:	f240 3172 	movw	r1, #882	; 0x372
 80037ca:	4869      	ldr	r0, [pc, #420]	; (8003970 <HAL_CAN_ConfigFilter+0x294>)
 80037cc:	f7fe fab5 	bl	8001d3a <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	2b1b      	cmp	r3, #27
 80037d6:	d904      	bls.n	80037e2 <HAL_CAN_ConfigFilter+0x106>
 80037d8:	f240 3173 	movw	r1, #883	; 0x373
 80037dc:	4864      	ldr	r0, [pc, #400]	; (8003970 <HAL_CAN_ConfigFilter+0x294>)
 80037de:	f7fe faac 	bl	8001d3a <assert_failed>
=======
 80038b6:	4b6e      	ldr	r3, [pc, #440]	; (8003a70 <HAL_CAN_ConfigFilter+0x298>)
 80038b8:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	2b1b      	cmp	r3, #27
 80038c0:	d904      	bls.n	80038cc <HAL_CAN_ConfigFilter+0xf4>
 80038c2:	f240 3172 	movw	r1, #882	; 0x372
 80038c6:	4869      	ldr	r0, [pc, #420]	; (8003a6c <HAL_CAN_ConfigFilter+0x294>)
 80038c8:	f7fe fab5 	bl	8001e36 <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	2b1b      	cmp	r3, #27
 80038d2:	d904      	bls.n	80038de <HAL_CAN_ConfigFilter+0x106>
 80038d4:	f240 3173 	movw	r1, #883	; 0x373
 80038d8:	4864      	ldr	r0, [pc, #400]	; (8003a6c <HAL_CAN_ConfigFilter+0x294>)
 80038da:	f7fe faac 	bl	8001e36 <assert_failed>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
<<<<<<< HEAD
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80037e8:	f043 0201 	orr.w	r2, r3, #1
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
=======
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038e4:	f043 0201 	orr.w	r2, r3, #1
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
<<<<<<< HEAD
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80037f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	021b      	lsls	r3, r3, #8
 800380e:	431a      	orrs	r2, r3
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
=======
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	021b      	lsls	r3, r3, #8
 800390a:	431a      	orrs	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
<<<<<<< HEAD
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	2201      	movs	r2, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	43db      	mvns	r3, r3
 8003830:	401a      	ands	r2, r3
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d123      	bne.n	8003888 <HAL_CAN_ConfigFilter+0x1ac>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	43db      	mvns	r3, r3
 800384a:	401a      	ands	r2, r3
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
=======
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	2201      	movs	r2, #1
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	43db      	mvns	r3, r3
 800392c:	401a      	ands	r2, r3
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d123      	bne.n	8003984 <HAL_CAN_ConfigFilter+0x1ac>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	43db      	mvns	r3, r3
 8003946:	401a      	ands	r2, r3
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
<<<<<<< HEAD
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003862:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	3248      	adds	r2, #72	; 0x48
 8003868:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
=======
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800395e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	3248      	adds	r2, #72	; 0x48
 8003964:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
<<<<<<< HEAD
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800387c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800387e:	6979      	ldr	r1, [r7, #20]
 8003880:	3348      	adds	r3, #72	; 0x48
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	440b      	add	r3, r1
 8003886:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d122      	bne.n	80038d6 <HAL_CAN_ConfigFilter+0x1fa>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	431a      	orrs	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
=======
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003978:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800397a:	6979      	ldr	r1, [r7, #20]
 800397c:	3348      	adds	r3, #72	; 0x48
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	440b      	add	r3, r1
 8003982:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d122      	bne.n	80039d2 <HAL_CAN_ConfigFilter+0x1fa>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	431a      	orrs	r2, r3
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
<<<<<<< HEAD
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80038b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	3248      	adds	r2, #72	; 0x48
 80038b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
=======
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80039ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	3248      	adds	r2, #72	; 0x48
 80039b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
<<<<<<< HEAD
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038cc:	6979      	ldr	r1, [r7, #20]
 80038ce:	3348      	adds	r3, #72	; 0x48
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	440b      	add	r3, r1
 80038d4:	605a      	str	r2, [r3, #4]
=======
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039c8:	6979      	ldr	r1, [r7, #20]
 80039ca:	3348      	adds	r3, #72	; 0x48
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	440b      	add	r3, r1
 80039d0:	605a      	str	r2, [r3, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
<<<<<<< HEAD
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <HAL_CAN_ConfigFilter+0x216>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	43db      	mvns	r3, r3
 80038e8:	401a      	ands	r2, r3
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80038f0:	e007      	b.n	8003902 <HAL_CAN_ConfigFilter+0x226>
=======
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <HAL_CAN_ConfigFilter+0x216>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	43db      	mvns	r3, r3
 80039e4:	401a      	ands	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80039ec:	e007      	b.n	80039fe <HAL_CAN_ConfigFilter+0x226>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
<<<<<<< HEAD
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
=======
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
<<<<<<< HEAD
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <HAL_CAN_ConfigFilter+0x242>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	43db      	mvns	r3, r3
 8003914:	401a      	ands	r2, r3
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800391c:	e007      	b.n	800392e <HAL_CAN_ConfigFilter+0x252>
=======
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d109      	bne.n	8003a1a <HAL_CAN_ConfigFilter+0x242>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	401a      	ands	r2, r3
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003a18:	e007      	b.n	8003a2a <HAL_CAN_ConfigFilter+0x252>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
<<<<<<< HEAD
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	431a      	orrs	r2, r3
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
=======
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
<<<<<<< HEAD
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d107      	bne.n	8003946 <HAL_CAN_ConfigFilter+0x26a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	431a      	orrs	r2, r3
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
=======
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d107      	bne.n	8003a42 <HAL_CAN_ConfigFilter+0x26a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
<<<<<<< HEAD
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800394c:	f023 0201 	bic.w	r2, r3, #1
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	e006      	b.n	8003968 <HAL_CAN_ConfigFilter+0x28c>
=======
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a48:	f023 0201 	bic.w	r2, r3, #1
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	e006      	b.n	8003a64 <HAL_CAN_ConfigFilter+0x28c>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
  }
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	0800c008 	.word	0x0800c008
 8003974:	40006400 	.word	0x40006400

08003978 <HAL_CAN_Start>:
=======
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
  }
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	0800c108 	.word	0x0800c108
 8003a70:	40006400 	.word	0x40006400

08003a74 <HAL_CAN_Start>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b01      	cmp	r3, #1
 800398a:	d12e      	bne.n	80039ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0201 	bic.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039a4:	f7fe fda8 	bl	80024f8 <HAL_GetTick>
 80039a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80039aa:	e012      	b.n	80039d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80039ac:	f7fe fda4 	bl	80024f8 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b0a      	cmp	r3, #10
 80039b8:	d90b      	bls.n	80039d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2205      	movs	r2, #5
 80039ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e012      	b.n	80039f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1e5      	bne.n	80039ac <HAL_CAN_Start+0x34>
=======
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d12e      	bne.n	8003ae6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0201 	bic.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003aa0:	f7fe fda8 	bl	80025f4 <HAL_GetTick>
 8003aa4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003aa6:	e012      	b.n	8003ace <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003aa8:	f7fe fda4 	bl	80025f4 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b0a      	cmp	r3, #10
 8003ab4:	d90b      	bls.n	8003ace <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2205      	movs	r2, #5
 8003ac6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e012      	b.n	8003af4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e5      	bne.n	8003aa8 <HAL_CAN_Start+0x34>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
<<<<<<< HEAD
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e006      	b.n	80039f8 <HAL_CAN_Start+0x80>
=======
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	e006      	b.n	8003af4 <HAL_CAN_Start+0x80>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
<<<<<<< HEAD
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
  }
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_CAN_AddTxMessage>:
=======
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
  }
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_CAN_AddTxMessage>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
<<<<<<< HEAD
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a14:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d008      	beq.n	8003a38 <HAL_CAN_AddTxMessage+0x38>
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d004      	beq.n	8003a38 <HAL_CAN_AddTxMessage+0x38>
 8003a2e:	f240 41e9 	movw	r1, #1257	; 0x4e9
 8003a32:	4884      	ldr	r0, [pc, #528]	; (8003c44 <HAL_CAN_AddTxMessage+0x244>)
 8003a34:	f7fe f981 	bl	8001d3a <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <HAL_CAN_AddTxMessage+0x52>
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d004      	beq.n	8003a52 <HAL_CAN_AddTxMessage+0x52>
 8003a48:	f240 41ea 	movw	r1, #1258	; 0x4ea
 8003a4c:	487d      	ldr	r0, [pc, #500]	; (8003c44 <HAL_CAN_AddTxMessage+0x244>)
 8003a4e:	f7fe f974 	bl	8001d3a <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d904      	bls.n	8003a64 <HAL_CAN_AddTxMessage+0x64>
 8003a5a:	f240 41eb 	movw	r1, #1259	; 0x4eb
 8003a5e:	4879      	ldr	r0, [pc, #484]	; (8003c44 <HAL_CAN_AddTxMessage+0x244>)
 8003a60:	f7fe f96b 	bl	8001d3a <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a74:	d30f      	bcc.n	8003a96 <HAL_CAN_AddTxMessage+0x96>
 8003a76:	f240 41ee 	movw	r1, #1262	; 0x4ee
 8003a7a:	4872      	ldr	r0, [pc, #456]	; (8003c44 <HAL_CAN_AddTxMessage+0x244>)
 8003a7c:	f7fe f95d 	bl	8001d3a <assert_failed>
 8003a80:	e009      	b.n	8003a96 <HAL_CAN_AddTxMessage+0x96>
=======
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b10:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <HAL_CAN_AddTxMessage+0x38>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d004      	beq.n	8003b34 <HAL_CAN_AddTxMessage+0x38>
 8003b2a:	f240 41e9 	movw	r1, #1257	; 0x4e9
 8003b2e:	4884      	ldr	r0, [pc, #528]	; (8003d40 <HAL_CAN_AddTxMessage+0x244>)
 8003b30:	f7fe f981 	bl	8001e36 <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_CAN_AddTxMessage+0x52>
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d004      	beq.n	8003b4e <HAL_CAN_AddTxMessage+0x52>
 8003b44:	f240 41ea 	movw	r1, #1258	; 0x4ea
 8003b48:	487d      	ldr	r0, [pc, #500]	; (8003d40 <HAL_CAN_AddTxMessage+0x244>)
 8003b4a:	f7fe f974 	bl	8001e36 <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d904      	bls.n	8003b60 <HAL_CAN_AddTxMessage+0x64>
 8003b56:	f240 41eb 	movw	r1, #1259	; 0x4eb
 8003b5a:	4879      	ldr	r0, [pc, #484]	; (8003d40 <HAL_CAN_AddTxMessage+0x244>)
 8003b5c:	f7fe f96b 	bl	8001e36 <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10a      	bne.n	8003b7e <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b70:	d30f      	bcc.n	8003b92 <HAL_CAN_AddTxMessage+0x96>
 8003b72:	f240 41ee 	movw	r1, #1262	; 0x4ee
 8003b76:	4872      	ldr	r0, [pc, #456]	; (8003d40 <HAL_CAN_AddTxMessage+0x244>)
 8003b78:	f7fe f95d 	bl	8001e36 <assert_failed>
 8003b7c:	e009      	b.n	8003b92 <HAL_CAN_AddTxMessage+0x96>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
<<<<<<< HEAD
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a8a:	d304      	bcc.n	8003a96 <HAL_CAN_AddTxMessage+0x96>
 8003a8c:	f240 41f2 	movw	r1, #1266	; 0x4f2
 8003a90:	486c      	ldr	r0, [pc, #432]	; (8003c44 <HAL_CAN_AddTxMessage+0x244>)
 8003a92:	f7fe f952 	bl	8001d3a <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	7d1b      	ldrb	r3, [r3, #20]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d008      	beq.n	8003ab0 <HAL_CAN_AddTxMessage+0xb0>
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	7d1b      	ldrb	r3, [r3, #20]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d004      	beq.n	8003ab0 <HAL_CAN_AddTxMessage+0xb0>
 8003aa6:	f240 41f4 	movw	r1, #1268	; 0x4f4
 8003aaa:	4866      	ldr	r0, [pc, #408]	; (8003c44 <HAL_CAN_AddTxMessage+0x244>)
 8003aac:	f7fe f945 	bl	8001d3a <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8003ab0:	7ffb      	ldrb	r3, [r7, #31]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d003      	beq.n	8003abe <HAL_CAN_AddTxMessage+0xbe>
 8003ab6:	7ffb      	ldrb	r3, [r7, #31]
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	f040 80b8 	bne.w	8003c2e <HAL_CAN_AddTxMessage+0x22e>
=======
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b86:	d304      	bcc.n	8003b92 <HAL_CAN_AddTxMessage+0x96>
 8003b88:	f240 41f2 	movw	r1, #1266	; 0x4f2
 8003b8c:	486c      	ldr	r0, [pc, #432]	; (8003d40 <HAL_CAN_AddTxMessage+0x244>)
 8003b8e:	f7fe f952 	bl	8001e36 <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	7d1b      	ldrb	r3, [r3, #20]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d008      	beq.n	8003bac <HAL_CAN_AddTxMessage+0xb0>
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	7d1b      	ldrb	r3, [r3, #20]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d004      	beq.n	8003bac <HAL_CAN_AddTxMessage+0xb0>
 8003ba2:	f240 41f4 	movw	r1, #1268	; 0x4f4
 8003ba6:	4866      	ldr	r0, [pc, #408]	; (8003d40 <HAL_CAN_AddTxMessage+0x244>)
 8003ba8:	f7fe f945 	bl	8001e36 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8003bac:	7ffb      	ldrb	r3, [r7, #31]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d003      	beq.n	8003bba <HAL_CAN_AddTxMessage+0xbe>
 8003bb2:	7ffb      	ldrb	r3, [r7, #31]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	f040 80b8 	bne.w	8003d2a <HAL_CAN_AddTxMessage+0x22e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
<<<<<<< HEAD
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10a      	bne.n	8003ade <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d105      	bne.n	8003ade <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 80a0 	beq.w	8003c1e <HAL_CAN_AddTxMessage+0x21e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	0e1b      	lsrs	r3, r3, #24
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d907      	bls.n	8003afe <HAL_CAN_AddTxMessage+0xfe>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e09e      	b.n	8003c3c <HAL_CAN_AddTxMessage+0x23c>
=======
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d105      	bne.n	8003bda <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80a0 	beq.w	8003d1a <HAL_CAN_AddTxMessage+0x21e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	0e1b      	lsrs	r3, r3, #24
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d907      	bls.n	8003bfa <HAL_CAN_AddTxMessage+0xfe>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e09e      	b.n	8003d38 <HAL_CAN_AddTxMessage+0x23c>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
<<<<<<< HEAD
 8003afe:	2201      	movs	r2, #1
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	409a      	lsls	r2, r3
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10d      	bne.n	8003b2c <HAL_CAN_AddTxMessage+0x12c>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003b1a:	68f9      	ldr	r1, [r7, #12]
 8003b1c:	6809      	ldr	r1, [r1, #0]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	3318      	adds	r3, #24
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	440b      	add	r3, r1
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	e00f      	b.n	8003b4c <HAL_CAN_AddTxMessage+0x14c>
=======
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10d      	bne.n	8003c28 <HAL_CAN_AddTxMessage+0x12c>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003c16:	68f9      	ldr	r1, [r7, #12]
 8003c18:	6809      	ldr	r1, [r1, #0]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	3318      	adds	r3, #24
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	440b      	add	r3, r1
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	e00f      	b.n	8003c48 <HAL_CAN_AddTxMessage+0x14c>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
<<<<<<< HEAD
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b36:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b3c:	68f9      	ldr	r1, [r7, #12]
 8003b3e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003b40:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	3318      	adds	r3, #24
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	440b      	add	r3, r1
 8003b4a:	601a      	str	r2, [r3, #0]
=======
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c32:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c38:	68f9      	ldr	r1, [r7, #12]
 8003c3a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003c3c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	3318      	adds	r3, #24
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	440b      	add	r3, r1
 8003c46:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
<<<<<<< HEAD
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6819      	ldr	r1, [r3, #0]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	3318      	adds	r3, #24
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	440b      	add	r3, r1
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	7d1b      	ldrb	r3, [r3, #20]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d111      	bne.n	8003b8c <HAL_CAN_AddTxMessage+0x18c>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	3318      	adds	r3, #24
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	4413      	add	r3, r2
 8003b74:	3304      	adds	r3, #4
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	6811      	ldr	r1, [r2, #0]
 8003b7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	3318      	adds	r3, #24
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	440b      	add	r3, r1
 8003b88:	3304      	adds	r3, #4
 8003b8a:	601a      	str	r2, [r3, #0]
=======
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6819      	ldr	r1, [r3, #0]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	3318      	adds	r3, #24
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	440b      	add	r3, r1
 8003c58:	3304      	adds	r3, #4
 8003c5a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	7d1b      	ldrb	r3, [r3, #20]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d111      	bne.n	8003c88 <HAL_CAN_AddTxMessage+0x18c>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	3318      	adds	r3, #24
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	4413      	add	r3, r2
 8003c70:	3304      	adds	r3, #4
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	6811      	ldr	r1, [r2, #0]
 8003c78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	3318      	adds	r3, #24
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	440b      	add	r3, r1
 8003c84:	3304      	adds	r3, #4
 8003c86:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
<<<<<<< HEAD
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3307      	adds	r3, #7
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	061a      	lsls	r2, r3, #24
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3306      	adds	r3, #6
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	041b      	lsls	r3, r3, #16
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3305      	adds	r3, #5
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	3204      	adds	r2, #4
 8003bac:	7812      	ldrb	r2, [r2, #0]
 8003bae:	4610      	mov	r0, r2
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	6811      	ldr	r1, [r2, #0]
 8003bb4:	ea43 0200 	orr.w	r2, r3, r0
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	440b      	add	r3, r1
 8003bbe:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003bc2:	601a      	str	r2, [r3, #0]
=======
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3307      	adds	r3, #7
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	061a      	lsls	r2, r3, #24
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3306      	adds	r3, #6
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	041b      	lsls	r3, r3, #16
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3305      	adds	r3, #5
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	3204      	adds	r2, #4
 8003ca8:	7812      	ldrb	r2, [r2, #0]
 8003caa:	4610      	mov	r0, r2
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	6811      	ldr	r1, [r2, #0]
 8003cb0:	ea43 0200 	orr.w	r2, r3, r0
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	440b      	add	r3, r1
 8003cba:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003cbe:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
<<<<<<< HEAD
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3303      	adds	r3, #3
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	061a      	lsls	r2, r3, #24
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3302      	adds	r3, #2
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	041b      	lsls	r3, r3, #16
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	4313      	orrs	r3, r2
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	7812      	ldrb	r2, [r2, #0]
 8003be4:	4610      	mov	r0, r2
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	6811      	ldr	r1, [r2, #0]
 8003bea:	ea43 0200 	orr.w	r2, r3, r0
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	440b      	add	r3, r1
 8003bf4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003bf8:	601a      	str	r2, [r3, #0]
=======
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3303      	adds	r3, #3
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	061a      	lsls	r2, r3, #24
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3302      	adds	r3, #2
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	041b      	lsls	r3, r3, #16
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	7812      	ldrb	r2, [r2, #0]
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	6811      	ldr	r1, [r2, #0]
 8003ce6:	ea43 0200 	orr.w	r2, r3, r0
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	440b      	add	r3, r1
 8003cf0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003cf4:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
<<<<<<< HEAD
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	3318      	adds	r3, #24
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	4413      	add	r3, r2
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	6811      	ldr	r1, [r2, #0]
 8003c0c:	f043 0201 	orr.w	r2, r3, #1
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	3318      	adds	r3, #24
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	440b      	add	r3, r1
 8003c18:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e00e      	b.n	8003c3c <HAL_CAN_AddTxMessage+0x23c>
=======
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	3318      	adds	r3, #24
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	4413      	add	r3, r2
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	6811      	ldr	r1, [r2, #0]
 8003d08:	f043 0201 	orr.w	r2, r3, #1
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	3318      	adds	r3, #24
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	440b      	add	r3, r1
 8003d14:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	e00e      	b.n	8003d38 <HAL_CAN_AddTxMessage+0x23c>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
<<<<<<< HEAD
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e006      	b.n	8003c3c <HAL_CAN_AddTxMessage+0x23c>
=======
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e006      	b.n	8003d38 <HAL_CAN_AddTxMessage+0x23c>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
  }
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3720      	adds	r7, #32
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	0800c008 	.word	0x0800c008

08003c48 <HAL_CAN_GetRxMessage>:
=======
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
  }
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3720      	adds	r7, #32
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	0800c108 	.word	0x0800c108

08003d44 <HAL_CAN_GetRxMessage>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
<<<<<<< HEAD
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c5c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d007      	beq.n	8003c74 <HAL_CAN_GetRxMessage+0x2c>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d004      	beq.n	8003c74 <HAL_CAN_GetRxMessage+0x2c>
 8003c6a:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 8003c6e:	4884      	ldr	r0, [pc, #528]	; (8003e80 <HAL_CAN_GetRxMessage+0x238>)
 8003c70:	f7fe f863 	bl	8001d3a <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8003c74:	7dfb      	ldrb	r3, [r7, #23]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d003      	beq.n	8003c82 <HAL_CAN_GetRxMessage+0x3a>
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	f040 80f3 	bne.w	8003e68 <HAL_CAN_GetRxMessage+0x220>
=======
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d58:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d007      	beq.n	8003d70 <HAL_CAN_GetRxMessage+0x2c>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d004      	beq.n	8003d70 <HAL_CAN_GetRxMessage+0x2c>
 8003d66:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 8003d6a:	4884      	ldr	r0, [pc, #528]	; (8003f7c <HAL_CAN_GetRxMessage+0x238>)
 8003d6c:	f7fe f863 	bl	8001e36 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8003d70:	7dfb      	ldrb	r3, [r7, #23]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d003      	beq.n	8003d7e <HAL_CAN_GetRxMessage+0x3a>
 8003d76:	7dfb      	ldrb	r3, [r7, #23]
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	f040 80f3 	bne.w	8003f64 <HAL_CAN_GetRxMessage+0x220>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
<<<<<<< HEAD
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10e      	bne.n	8003ca6 <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d116      	bne.n	8003cc4 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e0e7      	b.n	8003e76 <HAL_CAN_GetRxMessage+0x22e>
=======
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10e      	bne.n	8003da2 <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d116      	bne.n	8003dc0 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e0e7      	b.n	8003f72 <HAL_CAN_GetRxMessage+0x22e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
<<<<<<< HEAD
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d107      	bne.n	8003cc4 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0d8      	b.n	8003e76 <HAL_CAN_GetRxMessage+0x22e>
=======
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d107      	bne.n	8003dc0 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0d8      	b.n	8003f72 <HAL_CAN_GetRxMessage+0x22e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
<<<<<<< HEAD
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	331b      	adds	r3, #27
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	4413      	add	r3, r2
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0204 	and.w	r2, r3, #4
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10c      	bne.n	8003cfc <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	331b      	adds	r3, #27
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	4413      	add	r3, r2
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	0d5b      	lsrs	r3, r3, #21
 8003cf2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	e00b      	b.n	8003d14 <HAL_CAN_GetRxMessage+0xcc>
=======
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	331b      	adds	r3, #27
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	4413      	add	r3, r2
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0204 	and.w	r2, r3, #4
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10c      	bne.n	8003df8 <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	331b      	adds	r3, #27
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	4413      	add	r3, r2
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	0d5b      	lsrs	r3, r3, #21
 8003dee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e00b      	b.n	8003e10 <HAL_CAN_GetRxMessage+0xcc>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
<<<<<<< HEAD
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	331b      	adds	r3, #27
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	4413      	add	r3, r2
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	08db      	lsrs	r3, r3, #3
 8003d0c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	331b      	adds	r3, #27
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	4413      	add	r3, r2
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0202 	and.w	r2, r3, #2
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	331b      	adds	r3, #27
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	4413      	add	r3, r2
 8003d36:	3304      	adds	r3, #4
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 020f 	and.w	r2, r3, #15
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	331b      	adds	r3, #27
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3304      	adds	r3, #4
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	0a1b      	lsrs	r3, r3, #8
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	331b      	adds	r3, #27
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	4413      	add	r3, r2
 8003d66:	3304      	adds	r3, #4
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	0c1b      	lsrs	r3, r3, #16
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	0a1a      	lsrs	r2, r3, #8
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	0c1a      	lsrs	r2, r3, #16
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	3302      	adds	r3, #2
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	0e1a      	lsrs	r2, r3, #24
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	3303      	adds	r3, #3
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	3304      	adds	r3, #4
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	0a1a      	lsrs	r2, r3, #8
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	3305      	adds	r3, #5
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	0c1a      	lsrs	r2, r3, #16
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	3306      	adds	r3, #6
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	0e1a      	lsrs	r2, r3, #24
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	3307      	adds	r3, #7
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d108      	bne.n	8003e54 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0220 	orr.w	r2, r2, #32
 8003e50:	60da      	str	r2, [r3, #12]
 8003e52:	e007      	b.n	8003e64 <HAL_CAN_GetRxMessage+0x21c>
=======
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	331b      	adds	r3, #27
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	4413      	add	r3, r2
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	08db      	lsrs	r3, r3, #3
 8003e08:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	331b      	adds	r3, #27
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	4413      	add	r3, r2
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0202 	and.w	r2, r3, #2
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	331b      	adds	r3, #27
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	4413      	add	r3, r2
 8003e32:	3304      	adds	r3, #4
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 020f 	and.w	r2, r3, #15
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	331b      	adds	r3, #27
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	4413      	add	r3, r2
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	0a1b      	lsrs	r3, r3, #8
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	331b      	adds	r3, #27
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	4413      	add	r3, r2
 8003e62:	3304      	adds	r3, #4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	0c1b      	lsrs	r3, r3, #16
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	0a1a      	lsrs	r2, r3, #8
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	0c1a      	lsrs	r2, r3, #16
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	3302      	adds	r3, #2
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	0e1a      	lsrs	r2, r3, #24
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	3303      	adds	r3, #3
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	0a1a      	lsrs	r2, r3, #8
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	3305      	adds	r3, #5
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	0c1a      	lsrs	r2, r3, #16
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	3306      	adds	r3, #6
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	0e1a      	lsrs	r2, r3, #24
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	3307      	adds	r3, #7
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d108      	bne.n	8003f50 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 0220 	orr.w	r2, r2, #32
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	e007      	b.n	8003f60 <HAL_CAN_GetRxMessage+0x21c>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
<<<<<<< HEAD
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0220 	orr.w	r2, r2, #32
 8003e62:	611a      	str	r2, [r3, #16]
=======
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691a      	ldr	r2, [r3, #16]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0220 	orr.w	r2, r2, #32
 8003f5e:	611a      	str	r2, [r3, #16]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }

    /* Return function status */
    return HAL_OK;
<<<<<<< HEAD
 8003e64:	2300      	movs	r3, #0
 8003e66:	e006      	b.n	8003e76 <HAL_CAN_GetRxMessage+0x22e>
=======
 8003f60:	2300      	movs	r3, #0
 8003f62:	e006      	b.n	8003f72 <HAL_CAN_GetRxMessage+0x22e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
  }
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	0800c008 	.word	0x0800c008

08003e84 <HAL_CAN_IRQHandler>:
=======
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
  }
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	0800c108 	.word	0x0800c108

08003f80 <HAL_CAN_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08a      	sub	sp, #40	; 0x28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8083 	beq.w	8003fd2 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d025      	beq.n	8003f22 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2201      	movs	r2, #1
 8003edc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d004      	beq.n	8003ef2 <HAL_CAN_IRQHandler+0x6e>
=======
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 8083 	beq.w	80040ce <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d025      	beq.n	800401e <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d004      	beq.n	8003fee <HAL_CAN_IRQHandler+0x6e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
<<<<<<< HEAD
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	4798      	blx	r3
 8003ef0:	e017      	b.n	8003f22 <HAL_CAN_IRQHandler+0x9e>
=======
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4798      	blx	r3
 8003fec:	e017      	b.n	800401e <HAL_CAN_IRQHandler+0x9e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
<<<<<<< HEAD
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d004      	beq.n	8003f06 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
 8003f04:	e00d      	b.n	8003f22 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
 8003f18:	e003      	b.n	8003f22 <HAL_CAN_IRQHandler+0x9e>
=======
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d004      	beq.n	8004002 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8004000:	e00d      	b.n	800401e <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b00      	cmp	r3, #0
 800400a:	d004      	beq.n	8004016 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
 8004014:	e003      	b.n	800401e <HAL_CAN_IRQHandler+0x9e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
<<<<<<< HEAD
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	4798      	blx	r3
=======
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	4798      	blx	r3
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
<<<<<<< HEAD
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d026      	beq.n	8003f7a <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d004      	beq.n	8003f4a <HAL_CAN_IRQHandler+0xc6>
=======
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d026      	beq.n	8004076 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004030:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004038:	2b00      	cmp	r3, #0
 800403a:	d004      	beq.n	8004046 <HAL_CAN_IRQHandler+0xc6>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
<<<<<<< HEAD
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	4798      	blx	r3
 8003f48:	e017      	b.n	8003f7a <HAL_CAN_IRQHandler+0xf6>
=======
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	4798      	blx	r3
 8004044:	e017      	b.n	8004076 <HAL_CAN_IRQHandler+0xf6>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
<<<<<<< HEAD
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d004      	beq.n	8003f5e <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5c:	e00d      	b.n	8003f7a <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d004      	beq.n	8003f72 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f70:	e003      	b.n	8003f7a <HAL_CAN_IRQHandler+0xf6>
=======
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404c:	2b00      	cmp	r3, #0
 800404e:	d004      	beq.n	800405a <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
 8004058:	e00d      	b.n	8004076 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004060:	2b00      	cmp	r3, #0
 8004062:	d004      	beq.n	800406e <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800406a:	627b      	str	r3, [r7, #36]	; 0x24
 800406c:	e003      	b.n	8004076 <HAL_CAN_IRQHandler+0xf6>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
<<<<<<< HEAD
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4798      	blx	r3
=======
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	4798      	blx	r3
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
<<<<<<< HEAD
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d026      	beq.n	8003fd2 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d004      	beq.n	8003fa2 <HAL_CAN_IRQHandler+0x11e>
=======
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d026      	beq.n	80040ce <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004088:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d004      	beq.n	800409e <HAL_CAN_IRQHandler+0x11e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
<<<<<<< HEAD
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	4798      	blx	r3
 8003fa0:	e017      	b.n	8003fd2 <HAL_CAN_IRQHandler+0x14e>
=======
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	4798      	blx	r3
 800409c:	e017      	b.n	80040ce <HAL_CAN_IRQHandler+0x14e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
<<<<<<< HEAD
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d004      	beq.n	8003fb6 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb4:	e00d      	b.n	8003fd2 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d004      	beq.n	8003fca <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc8:	e003      	b.n	8003fd2 <HAL_CAN_IRQHandler+0x14e>
=======
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d004      	beq.n	80040b2 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
 80040b0:	e00d      	b.n	80040ce <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d004      	beq.n	80040c6 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
 80040c4:	e003      	b.n	80040ce <HAL_CAN_IRQHandler+0x14e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
<<<<<<< HEAD
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	4798      	blx	r3
=======
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	4798      	blx	r3
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
<<<<<<< HEAD
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00c      	beq.n	8003ff6 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f003 0310 	and.w	r3, r3, #16
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d007      	beq.n	8003ff6 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2210      	movs	r2, #16
 8003ff4:	60da      	str	r2, [r3, #12]
=======
 80040ce:	6a3b      	ldr	r3, [r7, #32]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00c      	beq.n	80040f2 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f003 0310 	and.w	r3, r3, #16
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d007      	beq.n	80040f2 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2210      	movs	r2, #16
 80040f0:	60da      	str	r2, [r3, #12]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
<<<<<<< HEAD
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00c      	beq.n	800401a <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d007      	beq.n	800401a <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2208      	movs	r2, #8
 8004010:	60da      	str	r2, [r3, #12]
=======
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00c      	beq.n	8004116 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d007      	beq.n	8004116 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2208      	movs	r2, #8
 800410c:	60da      	str	r2, [r3, #12]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
<<<<<<< HEAD
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	4798      	blx	r3
=======
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	4798      	blx	r3
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
<<<<<<< HEAD
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00c      	beq.n	800405e <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f003 0310 	and.w	r3, r3, #16
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004054:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2210      	movs	r2, #16
 800405c:	611a      	str	r2, [r3, #16]
=======
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00c      	beq.n	800415a <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004150:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2210      	movs	r2, #16
 8004158:	611a      	str	r2, [r3, #16]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
<<<<<<< HEAD
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00c      	beq.n	8004082 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2208      	movs	r2, #8
 8004078:	611a      	str	r2, [r3, #16]
=======
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00c      	beq.n	800417e <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d007      	beq.n	800417e <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2208      	movs	r2, #8
 8004174:	611a      	str	r2, [r3, #16]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
<<<<<<< HEAD
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	4798      	blx	r3
=======
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00a      	beq.n	800419e <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	4798      	blx	r3
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
<<<<<<< HEAD
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00c      	beq.n	80040c6 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d007      	beq.n	80040c6 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2210      	movs	r2, #16
 80040bc:	605a      	str	r2, [r3, #4]
=======
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00c      	beq.n	80041c2 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f003 0310 	and.w	r3, r3, #16
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d007      	beq.n	80041c2 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2210      	movs	r2, #16
 80041b8:	605a      	str	r2, [r3, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
<<<<<<< HEAD
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	4798      	blx	r3
=======
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	4798      	blx	r3
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
<<<<<<< HEAD
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00c      	beq.n	80040ea <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d007      	beq.n	80040ea <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2208      	movs	r2, #8
 80040e0:	605a      	str	r2, [r3, #4]
=======
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00c      	beq.n	80041e6 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2208      	movs	r2, #8
 80041dc:	605a      	str	r2, [r3, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
<<<<<<< HEAD
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	4798      	blx	r3
=======
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	4798      	blx	r3
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
<<<<<<< HEAD
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d07b      	beq.n	80041ec <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f003 0304 	and.w	r3, r3, #4
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d072      	beq.n	80041e4 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004104:	2b00      	cmp	r3, #0
 8004106:	d008      	beq.n	800411a <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
=======
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d07b      	beq.n	80042e8 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d072      	beq.n	80042e0 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
<<<<<<< HEAD
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004120:	2b00      	cmp	r3, #0
 8004122:	d008      	beq.n	8004136 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	f043 0302 	orr.w	r3, r3, #2
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800422a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422c:	f043 0302 	orr.w	r3, r3, #2
 8004230:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
<<<<<<< HEAD
 8004136:	6a3b      	ldr	r3, [r7, #32]
 8004138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	f043 0304 	orr.w	r3, r3, #4
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	f043 0304 	orr.w	r3, r3, #4
 800424c:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
<<<<<<< HEAD
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004158:	2b00      	cmp	r3, #0
 800415a:	d043      	beq.n	80041e4 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004162:	2b00      	cmp	r3, #0
 8004164:	d03e      	beq.n	80041e4 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800416c:	2b60      	cmp	r3, #96	; 0x60
 800416e:	d02b      	beq.n	80041c8 <HAL_CAN_IRQHandler+0x344>
 8004170:	2b60      	cmp	r3, #96	; 0x60
 8004172:	d82e      	bhi.n	80041d2 <HAL_CAN_IRQHandler+0x34e>
 8004174:	2b50      	cmp	r3, #80	; 0x50
 8004176:	d022      	beq.n	80041be <HAL_CAN_IRQHandler+0x33a>
 8004178:	2b50      	cmp	r3, #80	; 0x50
 800417a:	d82a      	bhi.n	80041d2 <HAL_CAN_IRQHandler+0x34e>
 800417c:	2b40      	cmp	r3, #64	; 0x40
 800417e:	d019      	beq.n	80041b4 <HAL_CAN_IRQHandler+0x330>
 8004180:	2b40      	cmp	r3, #64	; 0x40
 8004182:	d826      	bhi.n	80041d2 <HAL_CAN_IRQHandler+0x34e>
 8004184:	2b30      	cmp	r3, #48	; 0x30
 8004186:	d010      	beq.n	80041aa <HAL_CAN_IRQHandler+0x326>
 8004188:	2b30      	cmp	r3, #48	; 0x30
 800418a:	d822      	bhi.n	80041d2 <HAL_CAN_IRQHandler+0x34e>
 800418c:	2b10      	cmp	r3, #16
 800418e:	d002      	beq.n	8004196 <HAL_CAN_IRQHandler+0x312>
 8004190:	2b20      	cmp	r3, #32
 8004192:	d005      	beq.n	80041a0 <HAL_CAN_IRQHandler+0x31c>
=======
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004254:	2b00      	cmp	r3, #0
 8004256:	d043      	beq.n	80042e0 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800425e:	2b00      	cmp	r3, #0
 8004260:	d03e      	beq.n	80042e0 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004268:	2b60      	cmp	r3, #96	; 0x60
 800426a:	d02b      	beq.n	80042c4 <HAL_CAN_IRQHandler+0x344>
 800426c:	2b60      	cmp	r3, #96	; 0x60
 800426e:	d82e      	bhi.n	80042ce <HAL_CAN_IRQHandler+0x34e>
 8004270:	2b50      	cmp	r3, #80	; 0x50
 8004272:	d022      	beq.n	80042ba <HAL_CAN_IRQHandler+0x33a>
 8004274:	2b50      	cmp	r3, #80	; 0x50
 8004276:	d82a      	bhi.n	80042ce <HAL_CAN_IRQHandler+0x34e>
 8004278:	2b40      	cmp	r3, #64	; 0x40
 800427a:	d019      	beq.n	80042b0 <HAL_CAN_IRQHandler+0x330>
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	d826      	bhi.n	80042ce <HAL_CAN_IRQHandler+0x34e>
 8004280:	2b30      	cmp	r3, #48	; 0x30
 8004282:	d010      	beq.n	80042a6 <HAL_CAN_IRQHandler+0x326>
 8004284:	2b30      	cmp	r3, #48	; 0x30
 8004286:	d822      	bhi.n	80042ce <HAL_CAN_IRQHandler+0x34e>
 8004288:	2b10      	cmp	r3, #16
 800428a:	d002      	beq.n	8004292 <HAL_CAN_IRQHandler+0x312>
 800428c:	2b20      	cmp	r3, #32
 800428e:	d005      	beq.n	800429c <HAL_CAN_IRQHandler+0x31c>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
<<<<<<< HEAD
 8004194:	e01d      	b.n	80041d2 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	f043 0308 	orr.w	r3, r3, #8
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800419e:	e019      	b.n	80041d4 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	f043 0310 	orr.w	r3, r3, #16
 80041a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041a8:	e014      	b.n	80041d4 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	f043 0320 	orr.w	r3, r3, #32
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041b2:	e00f      	b.n	80041d4 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041bc:	e00a      	b.n	80041d4 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041c6:	e005      	b.n	80041d4 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80041d0:	e000      	b.n	80041d4 <HAL_CAN_IRQHandler+0x350>
            break;
 80041d2:	bf00      	nop
=======
 8004290:	e01d      	b.n	80042ce <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	f043 0308 	orr.w	r3, r3, #8
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800429a:	e019      	b.n	80042d0 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	f043 0310 	orr.w	r3, r3, #16
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80042a4:	e014      	b.n	80042d0 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	f043 0320 	orr.w	r3, r3, #32
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80042ae:	e00f      	b.n	80042d0 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80042b8:	e00a      	b.n	80042d0 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80042c2:	e005      	b.n	80042d0 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80042cc:	e000      	b.n	80042d0 <HAL_CAN_IRQHandler+0x350>
            break;
 80042ce:	bf00      	nop
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
<<<<<<< HEAD
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699a      	ldr	r2, [r3, #24]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80041e2:	619a      	str	r2, [r3, #24]
=======
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699a      	ldr	r2, [r3, #24]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80042de:	619a      	str	r2, [r3, #24]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
<<<<<<< HEAD
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2204      	movs	r2, #4
 80041ea:	605a      	str	r2, [r3, #4]
=======
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2204      	movs	r2, #4
 80042e6:	605a      	str	r2, [r3, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
<<<<<<< HEAD
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24
=======
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d009      	beq.n	8004302 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
<<<<<<< HEAD
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	4798      	blx	r3
=======
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
<<<<<<< HEAD
 8004206:	bf00      	nop
 8004208:	3728      	adds	r7, #40	; 0x28
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_CAN_TxMailbox0CompleteCallback>:
=======
 8004302:	bf00      	nop
 8004304:	3728      	adds	r7, #40	; 0x28
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_CAN_TxMailbox0CompleteCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
=======
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <HAL_CAN_TxMailbox1CompleteCallback>:
=======
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <HAL_CAN_TxMailbox1CompleteCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
=======
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <HAL_CAN_TxMailbox2CompleteCallback>:
=======
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <HAL_CAN_TxMailbox2CompleteCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
=======
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 800423e:	bf00      	nop
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <HAL_CAN_TxMailbox0AbortCallback>:
=======
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <HAL_CAN_TxMailbox0AbortCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
=======
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_CAN_TxMailbox1AbortCallback>:
=======
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <HAL_CAN_TxMailbox1AbortCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
=======
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <HAL_CAN_TxMailbox2AbortCallback>:
=======
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <HAL_CAN_TxMailbox2AbortCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
=======
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <HAL_CAN_RxFifo0FullCallback>:
=======
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <HAL_CAN_RxFifo0FullCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
=======
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
<<<<<<< HEAD
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <HAL_CAN_RxFifo1MsgPendingCallback>:
=======
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <HAL_CAN_RxFifo1MsgPendingCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
=======
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <HAL_CAN_RxFifo1FullCallback>:
=======
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <HAL_CAN_RxFifo1FullCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
=======
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
<<<<<<< HEAD
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <HAL_CAN_SleepCallback>:
=======
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_CAN_SleepCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
=======
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <HAL_CAN_WakeUpFromRxMsgCallback>:
=======
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_CAN_WakeUpFromRxMsgCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
=======
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
<<<<<<< HEAD
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <HAL_CAN_ErrorCallback>:
=======
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <HAL_CAN_ErrorCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
=======
 80043e6:	b480      	push	{r7}
 80043e8:	b083      	sub	sp, #12
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <__NVIC_SetPriorityGrouping>:
=======
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <__NVIC_SetPriorityGrouping>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004310:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <__NVIC_SetPriorityGrouping+0x44>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800431c:	4013      	ands	r3, r2
 800431e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800432c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004332:	4a04      	ldr	r2, [pc, #16]	; (8004344 <__NVIC_SetPriorityGrouping+0x44>)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	60d3      	str	r3, [r2, #12]
}
 8004338:	bf00      	nop
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	e000ed00 	.word	0xe000ed00

08004348 <__NVIC_GetPriorityGrouping>:
=======
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800440c:	4b0c      	ldr	r3, [pc, #48]	; (8004440 <__NVIC_SetPriorityGrouping+0x44>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004418:	4013      	ands	r3, r2
 800441a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800442c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800442e:	4a04      	ldr	r2, [pc, #16]	; (8004440 <__NVIC_SetPriorityGrouping+0x44>)
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	60d3      	str	r3, [r2, #12]
}
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	e000ed00 	.word	0xe000ed00

08004444 <__NVIC_GetPriorityGrouping>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <__NVIC_GetPriorityGrouping+0x18>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	f003 0307 	and.w	r3, r3, #7
}
 8004356:	4618      	mov	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	e000ed00 	.word	0xe000ed00

08004364 <__NVIC_EnableIRQ>:
=======
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004448:	4b04      	ldr	r3, [pc, #16]	; (800445c <__NVIC_GetPriorityGrouping+0x18>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	0a1b      	lsrs	r3, r3, #8
 800444e:	f003 0307 	and.w	r3, r3, #7
}
 8004452:	4618      	mov	r0, r3
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	e000ed00 	.word	0xe000ed00

08004460 <__NVIC_EnableIRQ>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004372:	2b00      	cmp	r3, #0
 8004374:	db0b      	blt.n	800438e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	f003 021f 	and.w	r2, r3, #31
 800437c:	4907      	ldr	r1, [pc, #28]	; (800439c <__NVIC_EnableIRQ+0x38>)
 800437e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	2001      	movs	r0, #1
 8004386:	fa00 f202 	lsl.w	r2, r0, r2
 800438a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	e000e100 	.word	0xe000e100

080043a0 <__NVIC_SetPriority>:
=======
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800446a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446e:	2b00      	cmp	r3, #0
 8004470:	db0b      	blt.n	800448a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	f003 021f 	and.w	r2, r3, #31
 8004478:	4907      	ldr	r1, [pc, #28]	; (8004498 <__NVIC_EnableIRQ+0x38>)
 800447a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	2001      	movs	r0, #1
 8004482:	fa00 f202 	lsl.w	r2, r0, r2
 8004486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	e000e100 	.word	0xe000e100

0800449c <__NVIC_SetPriority>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	6039      	str	r1, [r7, #0]
 80043aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	db0a      	blt.n	80043ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	490c      	ldr	r1, [pc, #48]	; (80043ec <__NVIC_SetPriority+0x4c>)
 80043ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043be:	0112      	lsls	r2, r2, #4
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	440b      	add	r3, r1
 80043c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	6039      	str	r1, [r7, #0]
 80044a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	db0a      	blt.n	80044c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	490c      	ldr	r1, [pc, #48]	; (80044e8 <__NVIC_SetPriority+0x4c>)
 80044b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ba:	0112      	lsls	r2, r2, #4
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	440b      	add	r3, r1
 80044c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 80043c8:	e00a      	b.n	80043e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	4908      	ldr	r1, [pc, #32]	; (80043f0 <__NVIC_SetPriority+0x50>)
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	3b04      	subs	r3, #4
 80043d8:	0112      	lsls	r2, r2, #4
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	440b      	add	r3, r1
 80043de:	761a      	strb	r2, [r3, #24]
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	e000e100 	.word	0xe000e100
 80043f0:	e000ed00 	.word	0xe000ed00

080043f4 <NVIC_EncodePriority>:
=======
 80044c4:	e00a      	b.n	80044dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	4908      	ldr	r1, [pc, #32]	; (80044ec <__NVIC_SetPriority+0x50>)
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	3b04      	subs	r3, #4
 80044d4:	0112      	lsls	r2, r2, #4
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	440b      	add	r3, r1
 80044da:	761a      	strb	r2, [r3, #24]
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	e000e100 	.word	0xe000e100
 80044ec:	e000ed00 	.word	0xe000ed00

080044f0 <NVIC_EncodePriority>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 80043f4:	b480      	push	{r7}
 80043f6:	b089      	sub	sp, #36	; 0x24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	61fb      	str	r3, [r7, #28]
=======
 80044f0:	b480      	push	{r7}
 80044f2:	b089      	sub	sp, #36	; 0x24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	61fb      	str	r3, [r7, #28]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f1c3 0307 	rsb	r3, r3, #7
 800440e:	2b04      	cmp	r3, #4
 8004410:	bf28      	it	cs
 8004412:	2304      	movcs	r3, #4
 8004414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	3304      	adds	r3, #4
 800441a:	2b06      	cmp	r3, #6
 800441c:	d902      	bls.n	8004424 <NVIC_EncodePriority+0x30>
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	3b03      	subs	r3, #3
 8004422:	e000      	b.n	8004426 <NVIC_EncodePriority+0x32>
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004428:	f04f 32ff 	mov.w	r2, #4294967295
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	43da      	mvns	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	401a      	ands	r2, r3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800443c:	f04f 31ff 	mov.w	r1, #4294967295
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	fa01 f303 	lsl.w	r3, r1, r3
 8004446:	43d9      	mvns	r1, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800444c:	4313      	orrs	r3, r2
         );
}
 800444e:	4618      	mov	r0, r3
 8004450:	3724      	adds	r7, #36	; 0x24
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <HAL_NVIC_SetPriorityGrouping>:
=======
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	f1c3 0307 	rsb	r3, r3, #7
 800450a:	2b04      	cmp	r3, #4
 800450c:	bf28      	it	cs
 800450e:	2304      	movcs	r3, #4
 8004510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	3304      	adds	r3, #4
 8004516:	2b06      	cmp	r3, #6
 8004518:	d902      	bls.n	8004520 <NVIC_EncodePriority+0x30>
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	3b03      	subs	r3, #3
 800451e:	e000      	b.n	8004522 <NVIC_EncodePriority+0x32>
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004524:	f04f 32ff 	mov.w	r2, #4294967295
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	43da      	mvns	r2, r3
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	401a      	ands	r2, r3
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004538:	f04f 31ff 	mov.w	r1, #4294967295
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	fa01 f303 	lsl.w	r3, r1, r3
 8004542:	43d9      	mvns	r1, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004548:	4313      	orrs	r3, r2
         );
}
 800454a:	4618      	mov	r0, r3
 800454c:	3724      	adds	r7, #36	; 0x24
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b07      	cmp	r3, #7
 8004468:	d00f      	beq.n	800448a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b06      	cmp	r3, #6
 800446e:	d00c      	beq.n	800448a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b05      	cmp	r3, #5
 8004474:	d009      	beq.n	800448a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b04      	cmp	r3, #4
 800447a:	d006      	beq.n	800448a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b03      	cmp	r3, #3
 8004480:	d003      	beq.n	800448a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004482:	2190      	movs	r1, #144	; 0x90
 8004484:	4804      	ldr	r0, [pc, #16]	; (8004498 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8004486:	f7fd fc58 	bl	8001d3a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7ff ff38 	bl	8004300 <__NVIC_SetPriorityGrouping>
}
 8004490:	bf00      	nop
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	0800c040 	.word	0x0800c040

0800449c <HAL_NVIC_SetPriority>:
=======
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b07      	cmp	r3, #7
 8004564:	d00f      	beq.n	8004586 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b06      	cmp	r3, #6
 800456a:	d00c      	beq.n	8004586 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b05      	cmp	r3, #5
 8004570:	d009      	beq.n	8004586 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b04      	cmp	r3, #4
 8004576:	d006      	beq.n	8004586 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b03      	cmp	r3, #3
 800457c:	d003      	beq.n	8004586 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800457e:	2190      	movs	r1, #144	; 0x90
 8004580:	4804      	ldr	r0, [pc, #16]	; (8004594 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8004582:	f7fd fc58 	bl	8001e36 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff ff38 	bl	80043fc <__NVIC_SetPriorityGrouping>
}
 800458c:	bf00      	nop
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	0800c140 	.word	0x0800c140

08004598 <HAL_NVIC_SetPriority>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b0f      	cmp	r3, #15
 80044b2:	d903      	bls.n	80044bc <HAL_NVIC_SetPriority+0x20>
 80044b4:	21a8      	movs	r1, #168	; 0xa8
 80044b6:	480e      	ldr	r0, [pc, #56]	; (80044f0 <HAL_NVIC_SetPriority+0x54>)
 80044b8:	f7fd fc3f 	bl	8001d3a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b0f      	cmp	r3, #15
 80044c0:	d903      	bls.n	80044ca <HAL_NVIC_SetPriority+0x2e>
 80044c2:	21a9      	movs	r1, #169	; 0xa9
 80044c4:	480a      	ldr	r0, [pc, #40]	; (80044f0 <HAL_NVIC_SetPriority+0x54>)
 80044c6:	f7fd fc38 	bl	8001d3a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044ca:	f7ff ff3d 	bl	8004348 <__NVIC_GetPriorityGrouping>
 80044ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	68b9      	ldr	r1, [r7, #8]
 80044d4:	6978      	ldr	r0, [r7, #20]
 80044d6:	f7ff ff8d 	bl	80043f4 <NVIC_EncodePriority>
 80044da:	4602      	mov	r2, r0
 80044dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044e0:	4611      	mov	r1, r2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff ff5c 	bl	80043a0 <__NVIC_SetPriority>
}
 80044e8:	bf00      	nop
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	0800c040 	.word	0x0800c040

080044f4 <HAL_NVIC_EnableIRQ>:
=======
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	4603      	mov	r3, r0
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b0f      	cmp	r3, #15
 80045ae:	d903      	bls.n	80045b8 <HAL_NVIC_SetPriority+0x20>
 80045b0:	21a8      	movs	r1, #168	; 0xa8
 80045b2:	480e      	ldr	r0, [pc, #56]	; (80045ec <HAL_NVIC_SetPriority+0x54>)
 80045b4:	f7fd fc3f 	bl	8001e36 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b0f      	cmp	r3, #15
 80045bc:	d903      	bls.n	80045c6 <HAL_NVIC_SetPriority+0x2e>
 80045be:	21a9      	movs	r1, #169	; 0xa9
 80045c0:	480a      	ldr	r0, [pc, #40]	; (80045ec <HAL_NVIC_SetPriority+0x54>)
 80045c2:	f7fd fc38 	bl	8001e36 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045c6:	f7ff ff3d 	bl	8004444 <__NVIC_GetPriorityGrouping>
 80045ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	6978      	ldr	r0, [r7, #20]
 80045d2:	f7ff ff8d 	bl	80044f0 <NVIC_EncodePriority>
 80045d6:	4602      	mov	r2, r0
 80045d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045dc:	4611      	mov	r1, r2
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff ff5c 	bl	800449c <__NVIC_SetPriority>
}
 80045e4:	bf00      	nop
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	0800c140 	.word	0x0800c140

080045f0 <HAL_NVIC_EnableIRQ>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80044fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004502:	2b00      	cmp	r3, #0
 8004504:	da03      	bge.n	800450e <HAL_NVIC_EnableIRQ+0x1a>
 8004506:	21bc      	movs	r1, #188	; 0xbc
 8004508:	4805      	ldr	r0, [pc, #20]	; (8004520 <HAL_NVIC_EnableIRQ+0x2c>)
 800450a:	f7fd fc16 	bl	8001d3a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800450e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff ff26 	bl	8004364 <__NVIC_EnableIRQ>
}
 8004518:	bf00      	nop
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	0800c040 	.word	0x0800c040

08004524 <HAL_DMA_Init>:
=======
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	4603      	mov	r3, r0
 80045f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80045fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	da03      	bge.n	800460a <HAL_NVIC_EnableIRQ+0x1a>
 8004602:	21bc      	movs	r1, #188	; 0xbc
 8004604:	4805      	ldr	r0, [pc, #20]	; (800461c <HAL_NVIC_EnableIRQ+0x2c>)
 8004606:	f7fd fc16 	bl	8001e36 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800460a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff ff26 	bl	8004460 <__NVIC_EnableIRQ>
}
 8004614:	bf00      	nop
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	0800c140 	.word	0x0800c140

08004620 <HAL_DMA_Init>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004530:	f7fd ffe2 	bl	80024f8 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]
=======
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800462c:	f7fd ffe2 	bl	80025f4 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< HEAD
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e203      	b.n	8004948 <HAL_DMA_Init+0x424>
=======
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e203      	b.n	8004a44 <HAL_DMA_Init+0x424>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
<<<<<<< HEAD
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a8b      	ldr	r2, [pc, #556]	; (8004774 <HAL_DMA_Init+0x250>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d04e      	beq.n	80045e8 <HAL_DMA_Init+0xc4>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a8a      	ldr	r2, [pc, #552]	; (8004778 <HAL_DMA_Init+0x254>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d049      	beq.n	80045e8 <HAL_DMA_Init+0xc4>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a88      	ldr	r2, [pc, #544]	; (800477c <HAL_DMA_Init+0x258>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d044      	beq.n	80045e8 <HAL_DMA_Init+0xc4>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a87      	ldr	r2, [pc, #540]	; (8004780 <HAL_DMA_Init+0x25c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d03f      	beq.n	80045e8 <HAL_DMA_Init+0xc4>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a85      	ldr	r2, [pc, #532]	; (8004784 <HAL_DMA_Init+0x260>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d03a      	beq.n	80045e8 <HAL_DMA_Init+0xc4>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a84      	ldr	r2, [pc, #528]	; (8004788 <HAL_DMA_Init+0x264>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d035      	beq.n	80045e8 <HAL_DMA_Init+0xc4>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a82      	ldr	r2, [pc, #520]	; (800478c <HAL_DMA_Init+0x268>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d030      	beq.n	80045e8 <HAL_DMA_Init+0xc4>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a81      	ldr	r2, [pc, #516]	; (8004790 <HAL_DMA_Init+0x26c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d02b      	beq.n	80045e8 <HAL_DMA_Init+0xc4>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a7f      	ldr	r2, [pc, #508]	; (8004794 <HAL_DMA_Init+0x270>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d026      	beq.n	80045e8 <HAL_DMA_Init+0xc4>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a7e      	ldr	r2, [pc, #504]	; (8004798 <HAL_DMA_Init+0x274>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d021      	beq.n	80045e8 <HAL_DMA_Init+0xc4>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a7c      	ldr	r2, [pc, #496]	; (800479c <HAL_DMA_Init+0x278>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d01c      	beq.n	80045e8 <HAL_DMA_Init+0xc4>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a7b      	ldr	r2, [pc, #492]	; (80047a0 <HAL_DMA_Init+0x27c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d017      	beq.n	80045e8 <HAL_DMA_Init+0xc4>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a79      	ldr	r2, [pc, #484]	; (80047a4 <HAL_DMA_Init+0x280>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d012      	beq.n	80045e8 <HAL_DMA_Init+0xc4>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a78      	ldr	r2, [pc, #480]	; (80047a8 <HAL_DMA_Init+0x284>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d00d      	beq.n	80045e8 <HAL_DMA_Init+0xc4>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a76      	ldr	r2, [pc, #472]	; (80047ac <HAL_DMA_Init+0x288>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d008      	beq.n	80045e8 <HAL_DMA_Init+0xc4>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a75      	ldr	r2, [pc, #468]	; (80047b0 <HAL_DMA_Init+0x28c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d003      	beq.n	80045e8 <HAL_DMA_Init+0xc4>
 80045e0:	21b7      	movs	r1, #183	; 0xb7
 80045e2:	4874      	ldr	r0, [pc, #464]	; (80047b4 <HAL_DMA_Init+0x290>)
 80045e4:	f7fd fba9 	bl	8001d3a <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d026      	beq.n	800463e <HAL_DMA_Init+0x11a>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045f8:	d021      	beq.n	800463e <HAL_DMA_Init+0x11a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004602:	d01c      	beq.n	800463e <HAL_DMA_Init+0x11a>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800460c:	d017      	beq.n	800463e <HAL_DMA_Init+0x11a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004616:	d012      	beq.n	800463e <HAL_DMA_Init+0x11a>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8004620:	d00d      	beq.n	800463e <HAL_DMA_Init+0x11a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800462a:	d008      	beq.n	800463e <HAL_DMA_Init+0x11a>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004634:	d003      	beq.n	800463e <HAL_DMA_Init+0x11a>
 8004636:	21b8      	movs	r1, #184	; 0xb8
 8004638:	485e      	ldr	r0, [pc, #376]	; (80047b4 <HAL_DMA_Init+0x290>)
 800463a:	f7fd fb7e 	bl	8001d3a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00b      	beq.n	800465e <HAL_DMA_Init+0x13a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b40      	cmp	r3, #64	; 0x40
 800464c:	d007      	beq.n	800465e <HAL_DMA_Init+0x13a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2b80      	cmp	r3, #128	; 0x80
 8004654:	d003      	beq.n	800465e <HAL_DMA_Init+0x13a>
 8004656:	21b9      	movs	r1, #185	; 0xb9
 8004658:	4856      	ldr	r0, [pc, #344]	; (80047b4 <HAL_DMA_Init+0x290>)
 800465a:	f7fd fb6e 	bl	8001d3a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004666:	d007      	beq.n	8004678 <HAL_DMA_Init+0x154>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <HAL_DMA_Init+0x154>
 8004670:	21ba      	movs	r1, #186	; 0xba
 8004672:	4850      	ldr	r0, [pc, #320]	; (80047b4 <HAL_DMA_Init+0x290>)
 8004674:	f7fd fb61 	bl	8001d3a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004680:	d007      	beq.n	8004692 <HAL_DMA_Init+0x16e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_DMA_Init+0x16e>
 800468a:	21bb      	movs	r1, #187	; 0xbb
 800468c:	4849      	ldr	r0, [pc, #292]	; (80047b4 <HAL_DMA_Init+0x290>)
 800468e:	f7fd fb54 	bl	8001d3a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00d      	beq.n	80046b6 <HAL_DMA_Init+0x192>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046a2:	d008      	beq.n	80046b6 <HAL_DMA_Init+0x192>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ac:	d003      	beq.n	80046b6 <HAL_DMA_Init+0x192>
 80046ae:	21bc      	movs	r1, #188	; 0xbc
 80046b0:	4840      	ldr	r0, [pc, #256]	; (80047b4 <HAL_DMA_Init+0x290>)
 80046b2:	f7fd fb42 	bl	8001d3a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00d      	beq.n	80046da <HAL_DMA_Init+0x1b6>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c6:	d008      	beq.n	80046da <HAL_DMA_Init+0x1b6>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046d0:	d003      	beq.n	80046da <HAL_DMA_Init+0x1b6>
 80046d2:	21bd      	movs	r1, #189	; 0xbd
 80046d4:	4837      	ldr	r0, [pc, #220]	; (80047b4 <HAL_DMA_Init+0x290>)
 80046d6:	f7fd fb30 	bl	8001d3a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00c      	beq.n	80046fc <HAL_DMA_Init+0x1d8>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ea:	d007      	beq.n	80046fc <HAL_DMA_Init+0x1d8>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	d003      	beq.n	80046fc <HAL_DMA_Init+0x1d8>
 80046f4:	21be      	movs	r1, #190	; 0xbe
 80046f6:	482f      	ldr	r0, [pc, #188]	; (80047b4 <HAL_DMA_Init+0x290>)
 80046f8:	f7fd fb1f 	bl	8001d3a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d012      	beq.n	800472a <HAL_DMA_Init+0x206>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470c:	d00d      	beq.n	800472a <HAL_DMA_Init+0x206>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004716:	d008      	beq.n	800472a <HAL_DMA_Init+0x206>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
 800471c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004720:	d003      	beq.n	800472a <HAL_DMA_Init+0x206>
 8004722:	21bf      	movs	r1, #191	; 0xbf
 8004724:	4823      	ldr	r0, [pc, #140]	; (80047b4 <HAL_DMA_Init+0x290>)
 8004726:	f7fd fb08 	bl	8001d3a <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	2b00      	cmp	r3, #0
 8004730:	d007      	beq.n	8004742 <HAL_DMA_Init+0x21e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004736:	2b04      	cmp	r3, #4
 8004738:	d003      	beq.n	8004742 <HAL_DMA_Init+0x21e>
 800473a:	21c0      	movs	r1, #192	; 0xc0
 800473c:	481d      	ldr	r0, [pc, #116]	; (80047b4 <HAL_DMA_Init+0x290>)
 800473e:	f7fd fafc 	bl	8001d3a <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	2b00      	cmp	r3, #0
 8004748:	d064      	beq.n	8004814 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474e:	2b00      	cmp	r3, #0
 8004750:	d032      	beq.n	80047b8 <HAL_DMA_Init+0x294>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004756:	2b01      	cmp	r3, #1
 8004758:	d02e      	beq.n	80047b8 <HAL_DMA_Init+0x294>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475e:	2b02      	cmp	r3, #2
 8004760:	d02a      	beq.n	80047b8 <HAL_DMA_Init+0x294>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004766:	2b03      	cmp	r3, #3
 8004768:	d026      	beq.n	80047b8 <HAL_DMA_Init+0x294>
 800476a:	21c5      	movs	r1, #197	; 0xc5
 800476c:	4811      	ldr	r0, [pc, #68]	; (80047b4 <HAL_DMA_Init+0x290>)
 800476e:	f7fd fae4 	bl	8001d3a <assert_failed>
 8004772:	e021      	b.n	80047b8 <HAL_DMA_Init+0x294>
 8004774:	40026010 	.word	0x40026010
 8004778:	40026028 	.word	0x40026028
 800477c:	40026040 	.word	0x40026040
 8004780:	40026058 	.word	0x40026058
 8004784:	40026070 	.word	0x40026070
 8004788:	40026088 	.word	0x40026088
 800478c:	400260a0 	.word	0x400260a0
 8004790:	400260b8 	.word	0x400260b8
 8004794:	40026410 	.word	0x40026410
 8004798:	40026428 	.word	0x40026428
 800479c:	40026440 	.word	0x40026440
 80047a0:	40026458 	.word	0x40026458
 80047a4:	40026470 	.word	0x40026470
 80047a8:	40026488 	.word	0x40026488
 80047ac:	400264a0 	.word	0x400264a0
 80047b0:	400264b8 	.word	0x400264b8
 80047b4:	0800c07c 	.word	0x0800c07c
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d012      	beq.n	80047e6 <HAL_DMA_Init+0x2c2>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047c8:	d00d      	beq.n	80047e6 <HAL_DMA_Init+0x2c2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047d2:	d008      	beq.n	80047e6 <HAL_DMA_Init+0x2c2>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047dc:	d003      	beq.n	80047e6 <HAL_DMA_Init+0x2c2>
 80047de:	21c6      	movs	r1, #198	; 0xc6
 80047e0:	485b      	ldr	r0, [pc, #364]	; (8004950 <HAL_DMA_Init+0x42c>)
 80047e2:	f7fd faaa 	bl	8001d3a <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d012      	beq.n	8004814 <HAL_DMA_Init+0x2f0>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047f6:	d00d      	beq.n	8004814 <HAL_DMA_Init+0x2f0>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004800:	d008      	beq.n	8004814 <HAL_DMA_Init+0x2f0>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004806:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800480a:	d003      	beq.n	8004814 <HAL_DMA_Init+0x2f0>
 800480c:	21c7      	movs	r1, #199	; 0xc7
 800480e:	4850      	ldr	r0, [pc, #320]	; (8004950 <HAL_DMA_Init+0x42c>)
 8004810:	f7fd fa93 	bl	8001d3a <assert_failed>
=======
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a8b      	ldr	r2, [pc, #556]	; (8004870 <HAL_DMA_Init+0x250>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d04e      	beq.n	80046e4 <HAL_DMA_Init+0xc4>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a8a      	ldr	r2, [pc, #552]	; (8004874 <HAL_DMA_Init+0x254>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d049      	beq.n	80046e4 <HAL_DMA_Init+0xc4>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a88      	ldr	r2, [pc, #544]	; (8004878 <HAL_DMA_Init+0x258>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d044      	beq.n	80046e4 <HAL_DMA_Init+0xc4>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a87      	ldr	r2, [pc, #540]	; (800487c <HAL_DMA_Init+0x25c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d03f      	beq.n	80046e4 <HAL_DMA_Init+0xc4>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a85      	ldr	r2, [pc, #532]	; (8004880 <HAL_DMA_Init+0x260>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d03a      	beq.n	80046e4 <HAL_DMA_Init+0xc4>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a84      	ldr	r2, [pc, #528]	; (8004884 <HAL_DMA_Init+0x264>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d035      	beq.n	80046e4 <HAL_DMA_Init+0xc4>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a82      	ldr	r2, [pc, #520]	; (8004888 <HAL_DMA_Init+0x268>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d030      	beq.n	80046e4 <HAL_DMA_Init+0xc4>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a81      	ldr	r2, [pc, #516]	; (800488c <HAL_DMA_Init+0x26c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d02b      	beq.n	80046e4 <HAL_DMA_Init+0xc4>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a7f      	ldr	r2, [pc, #508]	; (8004890 <HAL_DMA_Init+0x270>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d026      	beq.n	80046e4 <HAL_DMA_Init+0xc4>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a7e      	ldr	r2, [pc, #504]	; (8004894 <HAL_DMA_Init+0x274>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d021      	beq.n	80046e4 <HAL_DMA_Init+0xc4>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a7c      	ldr	r2, [pc, #496]	; (8004898 <HAL_DMA_Init+0x278>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d01c      	beq.n	80046e4 <HAL_DMA_Init+0xc4>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a7b      	ldr	r2, [pc, #492]	; (800489c <HAL_DMA_Init+0x27c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d017      	beq.n	80046e4 <HAL_DMA_Init+0xc4>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a79      	ldr	r2, [pc, #484]	; (80048a0 <HAL_DMA_Init+0x280>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d012      	beq.n	80046e4 <HAL_DMA_Init+0xc4>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a78      	ldr	r2, [pc, #480]	; (80048a4 <HAL_DMA_Init+0x284>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00d      	beq.n	80046e4 <HAL_DMA_Init+0xc4>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a76      	ldr	r2, [pc, #472]	; (80048a8 <HAL_DMA_Init+0x288>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d008      	beq.n	80046e4 <HAL_DMA_Init+0xc4>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a75      	ldr	r2, [pc, #468]	; (80048ac <HAL_DMA_Init+0x28c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d003      	beq.n	80046e4 <HAL_DMA_Init+0xc4>
 80046dc:	21b7      	movs	r1, #183	; 0xb7
 80046de:	4874      	ldr	r0, [pc, #464]	; (80048b0 <HAL_DMA_Init+0x290>)
 80046e0:	f7fd fba9 	bl	8001e36 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d026      	beq.n	800473a <HAL_DMA_Init+0x11a>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046f4:	d021      	beq.n	800473a <HAL_DMA_Init+0x11a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046fe:	d01c      	beq.n	800473a <HAL_DMA_Init+0x11a>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004708:	d017      	beq.n	800473a <HAL_DMA_Init+0x11a>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004712:	d012      	beq.n	800473a <HAL_DMA_Init+0x11a>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800471c:	d00d      	beq.n	800473a <HAL_DMA_Init+0x11a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004726:	d008      	beq.n	800473a <HAL_DMA_Init+0x11a>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004730:	d003      	beq.n	800473a <HAL_DMA_Init+0x11a>
 8004732:	21b8      	movs	r1, #184	; 0xb8
 8004734:	485e      	ldr	r0, [pc, #376]	; (80048b0 <HAL_DMA_Init+0x290>)
 8004736:	f7fd fb7e 	bl	8001e36 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00b      	beq.n	800475a <HAL_DMA_Init+0x13a>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	2b40      	cmp	r3, #64	; 0x40
 8004748:	d007      	beq.n	800475a <HAL_DMA_Init+0x13a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	2b80      	cmp	r3, #128	; 0x80
 8004750:	d003      	beq.n	800475a <HAL_DMA_Init+0x13a>
 8004752:	21b9      	movs	r1, #185	; 0xb9
 8004754:	4856      	ldr	r0, [pc, #344]	; (80048b0 <HAL_DMA_Init+0x290>)
 8004756:	f7fd fb6e 	bl	8001e36 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004762:	d007      	beq.n	8004774 <HAL_DMA_Init+0x154>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_DMA_Init+0x154>
 800476c:	21ba      	movs	r1, #186	; 0xba
 800476e:	4850      	ldr	r0, [pc, #320]	; (80048b0 <HAL_DMA_Init+0x290>)
 8004770:	f7fd fb61 	bl	8001e36 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800477c:	d007      	beq.n	800478e <HAL_DMA_Init+0x16e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_DMA_Init+0x16e>
 8004786:	21bb      	movs	r1, #187	; 0xbb
 8004788:	4849      	ldr	r0, [pc, #292]	; (80048b0 <HAL_DMA_Init+0x290>)
 800478a:	f7fd fb54 	bl	8001e36 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00d      	beq.n	80047b2 <HAL_DMA_Init+0x192>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800479e:	d008      	beq.n	80047b2 <HAL_DMA_Init+0x192>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a8:	d003      	beq.n	80047b2 <HAL_DMA_Init+0x192>
 80047aa:	21bc      	movs	r1, #188	; 0xbc
 80047ac:	4840      	ldr	r0, [pc, #256]	; (80048b0 <HAL_DMA_Init+0x290>)
 80047ae:	f7fd fb42 	bl	8001e36 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00d      	beq.n	80047d6 <HAL_DMA_Init+0x1b6>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c2:	d008      	beq.n	80047d6 <HAL_DMA_Init+0x1b6>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047cc:	d003      	beq.n	80047d6 <HAL_DMA_Init+0x1b6>
 80047ce:	21bd      	movs	r1, #189	; 0xbd
 80047d0:	4837      	ldr	r0, [pc, #220]	; (80048b0 <HAL_DMA_Init+0x290>)
 80047d2:	f7fd fb30 	bl	8001e36 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00c      	beq.n	80047f8 <HAL_DMA_Init+0x1d8>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e6:	d007      	beq.n	80047f8 <HAL_DMA_Init+0x1d8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	2b20      	cmp	r3, #32
 80047ee:	d003      	beq.n	80047f8 <HAL_DMA_Init+0x1d8>
 80047f0:	21be      	movs	r1, #190	; 0xbe
 80047f2:	482f      	ldr	r0, [pc, #188]	; (80048b0 <HAL_DMA_Init+0x290>)
 80047f4:	f7fd fb1f 	bl	8001e36 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d012      	beq.n	8004826 <HAL_DMA_Init+0x206>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004808:	d00d      	beq.n	8004826 <HAL_DMA_Init+0x206>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a1b      	ldr	r3, [r3, #32]
 800480e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004812:	d008      	beq.n	8004826 <HAL_DMA_Init+0x206>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800481c:	d003      	beq.n	8004826 <HAL_DMA_Init+0x206>
 800481e:	21bf      	movs	r1, #191	; 0xbf
 8004820:	4823      	ldr	r0, [pc, #140]	; (80048b0 <HAL_DMA_Init+0x290>)
 8004822:	f7fd fb08 	bl	8001e36 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	2b00      	cmp	r3, #0
 800482c:	d007      	beq.n	800483e <HAL_DMA_Init+0x21e>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004832:	2b04      	cmp	r3, #4
 8004834:	d003      	beq.n	800483e <HAL_DMA_Init+0x21e>
 8004836:	21c0      	movs	r1, #192	; 0xc0
 8004838:	481d      	ldr	r0, [pc, #116]	; (80048b0 <HAL_DMA_Init+0x290>)
 800483a:	f7fd fafc 	bl	8001e36 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	2b00      	cmp	r3, #0
 8004844:	d064      	beq.n	8004910 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484a:	2b00      	cmp	r3, #0
 800484c:	d032      	beq.n	80048b4 <HAL_DMA_Init+0x294>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004852:	2b01      	cmp	r3, #1
 8004854:	d02e      	beq.n	80048b4 <HAL_DMA_Init+0x294>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485a:	2b02      	cmp	r3, #2
 800485c:	d02a      	beq.n	80048b4 <HAL_DMA_Init+0x294>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004862:	2b03      	cmp	r3, #3
 8004864:	d026      	beq.n	80048b4 <HAL_DMA_Init+0x294>
 8004866:	21c5      	movs	r1, #197	; 0xc5
 8004868:	4811      	ldr	r0, [pc, #68]	; (80048b0 <HAL_DMA_Init+0x290>)
 800486a:	f7fd fae4 	bl	8001e36 <assert_failed>
 800486e:	e021      	b.n	80048b4 <HAL_DMA_Init+0x294>
 8004870:	40026010 	.word	0x40026010
 8004874:	40026028 	.word	0x40026028
 8004878:	40026040 	.word	0x40026040
 800487c:	40026058 	.word	0x40026058
 8004880:	40026070 	.word	0x40026070
 8004884:	40026088 	.word	0x40026088
 8004888:	400260a0 	.word	0x400260a0
 800488c:	400260b8 	.word	0x400260b8
 8004890:	40026410 	.word	0x40026410
 8004894:	40026428 	.word	0x40026428
 8004898:	40026440 	.word	0x40026440
 800489c:	40026458 	.word	0x40026458
 80048a0:	40026470 	.word	0x40026470
 80048a4:	40026488 	.word	0x40026488
 80048a8:	400264a0 	.word	0x400264a0
 80048ac:	400264b8 	.word	0x400264b8
 80048b0:	0800c17c 	.word	0x0800c17c
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d012      	beq.n	80048e2 <HAL_DMA_Init+0x2c2>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048c4:	d00d      	beq.n	80048e2 <HAL_DMA_Init+0x2c2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048ce:	d008      	beq.n	80048e2 <HAL_DMA_Init+0x2c2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048d8:	d003      	beq.n	80048e2 <HAL_DMA_Init+0x2c2>
 80048da:	21c6      	movs	r1, #198	; 0xc6
 80048dc:	485b      	ldr	r0, [pc, #364]	; (8004a4c <HAL_DMA_Init+0x42c>)
 80048de:	f7fd faaa 	bl	8001e36 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d012      	beq.n	8004910 <HAL_DMA_Init+0x2f0>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048f2:	d00d      	beq.n	8004910 <HAL_DMA_Init+0x2f0>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048fc:	d008      	beq.n	8004910 <HAL_DMA_Init+0x2f0>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004906:	d003      	beq.n	8004910 <HAL_DMA_Init+0x2f0>
 8004908:	21c7      	movs	r1, #199	; 0xc7
 800490a:	4850      	ldr	r0, [pc, #320]	; (8004a4c <HAL_DMA_Init+0x42c>)
 800490c:	f7fd fa93 	bl	8001e36 <assert_failed>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
<<<<<<< HEAD
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0201 	bic.w	r2, r2, #1
 8004832:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004834:	e00f      	b.n	8004856 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004836:	f7fd fe5f 	bl	80024f8 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b05      	cmp	r3, #5
 8004842:	d908      	bls.n	8004856 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2203      	movs	r2, #3
 800484e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e078      	b.n	8004948 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1e8      	bne.n	8004836 <HAL_DMA_Init+0x312>
=======
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0201 	bic.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004930:	e00f      	b.n	8004952 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004932:	f7fd fe5f 	bl	80025f4 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b05      	cmp	r3, #5
 800493e:	d908      	bls.n	8004952 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2220      	movs	r2, #32
 8004944:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2203      	movs	r2, #3
 800494a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e078      	b.n	8004a44 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e8      	bne.n	8004932 <HAL_DMA_Init+0x312>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< HEAD
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4b39      	ldr	r3, [pc, #228]	; (8004954 <HAL_DMA_Init+0x430>)
 8004870:	4013      	ands	r3, r2
 8004872:	617b      	str	r3, [r7, #20]
=======
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	4b39      	ldr	r3, [pc, #228]	; (8004a50 <HAL_DMA_Init+0x430>)
 800496c:	4013      	ands	r3, r2
 800496e:	617b      	str	r3, [r7, #20]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< HEAD
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004882:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800488e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800489a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d107      	bne.n	80048c0 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b8:	4313      	orrs	r3, r2
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	4313      	orrs	r3, r2
 80048be:	617b      	str	r3, [r7, #20]
=======
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800497e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800498a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004996:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a1b      	ldr	r3, [r3, #32]
 800499c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d107      	bne.n	80049bc <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b4:	4313      	orrs	r3, r2
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< HEAD
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f023 0307 	bic.w	r3, r3, #7
 80048d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	4313      	orrs	r3, r2
 80048e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d117      	bne.n	800491a <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]
=======
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f023 0307 	bic.w	r3, r3, #7
 80049d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d117      	bne.n	8004a16 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< HEAD
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00e      	beq.n	800491a <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fa1b 	bl	8004d38 <DMA_CheckFifoParam>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d008      	beq.n	800491a <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2240      	movs	r2, #64	; 0x40
 800490c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004916:	2301      	movs	r3, #1
 8004918:	e016      	b.n	8004948 <HAL_DMA_Init+0x424>
=======
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00e      	beq.n	8004a16 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fa1b 	bl	8004e34 <DMA_CheckFifoParam>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2240      	movs	r2, #64	; 0x40
 8004a08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004a12:	2301      	movs	r3, #1
 8004a14:	e016      	b.n	8004a44 <HAL_DMA_Init+0x424>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< HEAD
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	615a      	str	r2, [r3, #20]
=======
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	615a      	str	r2, [r3, #20]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< HEAD
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f9d2 	bl	8004ccc <DMA_CalcBaseAndBitshift>
 8004928:	4603      	mov	r3, r0
 800492a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004930:	223f      	movs	r2, #63	; 0x3f
 8004932:	409a      	lsls	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	0800c07c 	.word	0x0800c07c
 8004954:	f010803f 	.word	0xf010803f

08004958 <HAL_DMA_Abort_IT>:
=======
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f9d2 	bl	8004dc8 <DMA_CalcBaseAndBitshift>
 8004a24:	4603      	mov	r3, r0
 8004a26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2c:	223f      	movs	r2, #63	; 0x3f
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	0800c17c 	.word	0x0800c17c
 8004a50:	f010803f 	.word	0xf010803f

08004a54 <HAL_DMA_Abort_IT>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d004      	beq.n	8004976 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2280      	movs	r2, #128	; 0x80
 8004970:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e00c      	b.n	8004990 <HAL_DMA_Abort_IT+0x38>
=======
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d004      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2280      	movs	r2, #128	; 0x80
 8004a6c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e00c      	b.n	8004a8c <HAL_DMA_Abort_IT+0x38>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< HEAD
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2205      	movs	r2, #5
 800497a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0201 	bic.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_DMA_IRQHandler>:
=======
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2205      	movs	r2, #5
 8004a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0201 	bic.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_DMA_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80049a8:	4b8e      	ldr	r3, [pc, #568]	; (8004be4 <HAL_DMA_IRQHandler+0x248>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a8e      	ldr	r2, [pc, #568]	; (8004be8 <HAL_DMA_IRQHandler+0x24c>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	0a9b      	lsrs	r3, r3, #10
 80049b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c6:	2208      	movs	r2, #8
 80049c8:	409a      	lsls	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4013      	ands	r3, r2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d01a      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d013      	beq.n	8004a08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0204 	bic.w	r2, r2, #4
 80049ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f4:	2208      	movs	r2, #8
 80049f6:	409a      	lsls	r2, r3
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a00:	f043 0201 	orr.w	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004aa4:	4b8e      	ldr	r3, [pc, #568]	; (8004ce0 <HAL_DMA_IRQHandler+0x248>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a8e      	ldr	r2, [pc, #568]	; (8004ce4 <HAL_DMA_IRQHandler+0x24c>)
 8004aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004aae:	0a9b      	lsrs	r3, r3, #10
 8004ab0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac2:	2208      	movs	r2, #8
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d01a      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d013      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0204 	bic.w	r2, r2, #4
 8004aea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af0:	2208      	movs	r2, #8
 8004af2:	409a      	lsls	r2, r3
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afc:	f043 0201 	orr.w	r2, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	409a      	lsls	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4013      	ands	r3, r2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d012      	beq.n	8004a3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00b      	beq.n	8004a3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	409a      	lsls	r2, r3
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a36:	f043 0202 	orr.w	r2, r3, #2
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b08:	2201      	movs	r2, #1
 8004b0a:	409a      	lsls	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d012      	beq.n	8004b3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00b      	beq.n	8004b3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b26:	2201      	movs	r2, #1
 8004b28:	409a      	lsls	r2, r3
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b32:	f043 0202 	orr.w	r2, r3, #2
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a42:	2204      	movs	r2, #4
 8004a44:	409a      	lsls	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d012      	beq.n	8004a74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00b      	beq.n	8004a74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a60:	2204      	movs	r2, #4
 8004a62:	409a      	lsls	r2, r3
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6c:	f043 0204 	orr.w	r2, r3, #4
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3e:	2204      	movs	r2, #4
 8004b40:	409a      	lsls	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4013      	ands	r3, r2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d012      	beq.n	8004b70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00b      	beq.n	8004b70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5c:	2204      	movs	r2, #4
 8004b5e:	409a      	lsls	r2, r3
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b68:	f043 0204 	orr.w	r2, r3, #4
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a78:	2210      	movs	r2, #16
 8004a7a:	409a      	lsls	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d043      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d03c      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a96:	2210      	movs	r2, #16
 8004a98:	409a      	lsls	r2, r3
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d018      	beq.n	8004ade <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d108      	bne.n	8004acc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d024      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	4798      	blx	r3
 8004aca:	e01f      	b.n	8004b0c <HAL_DMA_IRQHandler+0x170>
=======
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b74:	2210      	movs	r2, #16
 8004b76:	409a      	lsls	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d043      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d03c      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b92:	2210      	movs	r2, #16
 8004b94:	409a      	lsls	r2, r3
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d018      	beq.n	8004bda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d108      	bne.n	8004bc8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d024      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	4798      	blx	r3
 8004bc6:	e01f      	b.n	8004c08 <HAL_DMA_IRQHandler+0x170>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< HEAD
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d01b      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	4798      	blx	r3
 8004adc:	e016      	b.n	8004b0c <HAL_DMA_IRQHandler+0x170>
=======
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01b      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	4798      	blx	r3
 8004bd8:	e016      	b.n	8004c08 <HAL_DMA_IRQHandler+0x170>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d107      	bne.n	8004afc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0208 	bic.w	r2, r2, #8
 8004afa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	4798      	blx	r3
=======
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d107      	bne.n	8004bf8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0208 	bic.w	r2, r2, #8
 8004bf6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	4798      	blx	r3
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b10:	2220      	movs	r2, #32
 8004b12:	409a      	lsls	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 808f 	beq.w	8004c3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8087 	beq.w	8004c3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b32:	2220      	movs	r2, #32
 8004b34:	409a      	lsls	r2, r3
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b05      	cmp	r3, #5
 8004b44:	d136      	bne.n	8004bb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0216 	bic.w	r2, r2, #22
 8004b54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695a      	ldr	r2, [r3, #20]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d103      	bne.n	8004b76 <HAL_DMA_IRQHandler+0x1da>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d007      	beq.n	8004b86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0208 	bic.w	r2, r2, #8
 8004b84:	601a      	str	r2, [r3, #0]
=======
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 808f 	beq.w	8004d38 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8087 	beq.w	8004d38 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2e:	2220      	movs	r2, #32
 8004c30:	409a      	lsls	r2, r3
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b05      	cmp	r3, #5
 8004c40:	d136      	bne.n	8004cb0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0216 	bic.w	r2, r2, #22
 8004c50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695a      	ldr	r2, [r3, #20]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d103      	bne.n	8004c72 <HAL_DMA_IRQHandler+0x1da>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d007      	beq.n	8004c82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0208 	bic.w	r2, r2, #8
 8004c80:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8a:	223f      	movs	r2, #63	; 0x3f
 8004b8c:	409a      	lsls	r2, r3
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d07e      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	4798      	blx	r3
        }
        return;
 8004bb2:	e079      	b.n	8004ca8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d01d      	beq.n	8004bfe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10d      	bne.n	8004bec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d031      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	4798      	blx	r3
 8004be0:	e02c      	b.n	8004c3c <HAL_DMA_IRQHandler+0x2a0>
 8004be2:	bf00      	nop
 8004be4:	20000000 	.word	0x20000000
 8004be8:	1b4e81b5 	.word	0x1b4e81b5
=======
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c86:	223f      	movs	r2, #63	; 0x3f
 8004c88:	409a      	lsls	r2, r3
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d07e      	beq.n	8004da4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	4798      	blx	r3
        }
        return;
 8004cae:	e079      	b.n	8004da4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d01d      	beq.n	8004cfa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10d      	bne.n	8004ce8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d031      	beq.n	8004d38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	4798      	blx	r3
 8004cdc:	e02c      	b.n	8004d38 <HAL_DMA_IRQHandler+0x2a0>
 8004cde:	bf00      	nop
 8004ce0:	20000000 	.word	0x20000000
 8004ce4:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< HEAD
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d023      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	4798      	blx	r3
 8004bfc:	e01e      	b.n	8004c3c <HAL_DMA_IRQHandler+0x2a0>
=======
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d023      	beq.n	8004d38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	4798      	blx	r3
 8004cf8:	e01e      	b.n	8004d38 <HAL_DMA_IRQHandler+0x2a0>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10f      	bne.n	8004c2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0210 	bic.w	r2, r2, #16
 8004c1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	4798      	blx	r3
=======
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10f      	bne.n	8004d28 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0210 	bic.w	r2, r2, #16
 8004d16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	4798      	blx	r3
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< HEAD
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d032      	beq.n	8004caa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d022      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2205      	movs	r2, #5
 8004c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0201 	bic.w	r2, r2, #1
 8004c66:	601a      	str	r2, [r3, #0]
=======
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d032      	beq.n	8004da6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d022      	beq.n	8004d92 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2205      	movs	r2, #5
 8004d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0201 	bic.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

      do
      {
        if (++count > timeout)
<<<<<<< HEAD
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	60bb      	str	r3, [r7, #8]
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d307      	bcc.n	8004c84 <HAL_DMA_IRQHandler+0x2e8>
=======
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	3301      	adds	r3, #1
 8004d68:	60bb      	str	r3, [r7, #8]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d307      	bcc.n	8004d80 <HAL_DMA_IRQHandler+0x2e8>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
<<<<<<< HEAD
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1f2      	bne.n	8004c68 <HAL_DMA_IRQHandler+0x2cc>
 8004c82:	e000      	b.n	8004c86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d005      	beq.n	8004caa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	4798      	blx	r3
 8004ca6:	e000      	b.n	8004caa <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ca8:	bf00      	nop
    }
  }
}
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_DMA_GetState>:
=======
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f2      	bne.n	8004d64 <HAL_DMA_IRQHandler+0x2cc>
 8004d7e:	e000      	b.n	8004d82 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d80:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	4798      	blx	r3
 8004da2:	e000      	b.n	8004da6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004da4:	bf00      	nop
    }
  }
}
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_DMA_GetState>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cbe:	b2db      	uxtb	r3, r3
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <DMA_CalcBaseAndBitshift>:
=======
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dba:	b2db      	uxtb	r3, r3
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <DMA_CalcBaseAndBitshift>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	3b10      	subs	r3, #16
 8004cdc:	4a14      	ldr	r2, [pc, #80]	; (8004d30 <DMA_CalcBaseAndBitshift+0x64>)
 8004cde:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce2:	091b      	lsrs	r3, r3, #4
 8004ce4:	60fb      	str	r3, [r7, #12]
=======
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	3b10      	subs	r3, #16
 8004dd8:	4a14      	ldr	r2, [pc, #80]	; (8004e2c <DMA_CalcBaseAndBitshift+0x64>)
 8004dda:	fba2 2303 	umull	r2, r3, r2, r3
 8004dde:	091b      	lsrs	r3, r3, #4
 8004de0:	60fb      	str	r3, [r7, #12]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< HEAD
 8004ce6:	4a13      	ldr	r2, [pc, #76]	; (8004d34 <DMA_CalcBaseAndBitshift+0x68>)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4413      	add	r3, r2
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d909      	bls.n	8004d0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d02:	f023 0303 	bic.w	r3, r3, #3
 8004d06:	1d1a      	adds	r2, r3, #4
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	659a      	str	r2, [r3, #88]	; 0x58
 8004d0c:	e007      	b.n	8004d1e <DMA_CalcBaseAndBitshift+0x52>
=======
 8004de2:	4a13      	ldr	r2, [pc, #76]	; (8004e30 <DMA_CalcBaseAndBitshift+0x68>)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	d909      	bls.n	8004e0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004dfe:	f023 0303 	bic.w	r3, r3, #3
 8004e02:	1d1a      	adds	r2, r3, #4
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	659a      	str	r2, [r3, #88]	; 0x58
 8004e08:	e007      	b.n	8004e1a <DMA_CalcBaseAndBitshift+0x52>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< HEAD
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d16:	f023 0303 	bic.w	r3, r3, #3
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	aaaaaaab 	.word	0xaaaaaaab
 8004d34:	0800c268 	.word	0x0800c268

08004d38 <DMA_CheckFifoParam>:
=======
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e12:	f023 0303 	bic.w	r3, r3, #3
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	aaaaaaab 	.word	0xaaaaaaab
 8004e30:	0800c368 	.word	0x0800c368

08004e34 <DMA_CheckFifoParam>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d11f      	bne.n	8004d92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d856      	bhi.n	8004e06 <DMA_CheckFifoParam+0xce>
 8004d58:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <DMA_CheckFifoParam+0x28>)
 8004d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5e:	bf00      	nop
 8004d60:	08004d71 	.word	0x08004d71
 8004d64:	08004d83 	.word	0x08004d83
 8004d68:	08004d71 	.word	0x08004d71
 8004d6c:	08004e07 	.word	0x08004e07
=======
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d11f      	bne.n	8004e8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d856      	bhi.n	8004f02 <DMA_CheckFifoParam+0xce>
 8004e54:	a201      	add	r2, pc, #4	; (adr r2, 8004e5c <DMA_CheckFifoParam+0x28>)
 8004e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5a:	bf00      	nop
 8004e5c:	08004e6d 	.word	0x08004e6d
 8004e60:	08004e7f 	.word	0x08004e7f
 8004e64:	08004e6d 	.word	0x08004e6d
 8004e68:	08004f03 	.word	0x08004f03
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< HEAD
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d046      	beq.n	8004e0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d80:	e043      	b.n	8004e0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d8a:	d140      	bne.n	8004e0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d90:	e03d      	b.n	8004e0e <DMA_CheckFifoParam+0xd6>
=======
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d046      	beq.n	8004f06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e7c:	e043      	b.n	8004f06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e86:	d140      	bne.n	8004f0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e8c:	e03d      	b.n	8004f0a <DMA_CheckFifoParam+0xd6>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< HEAD
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d9a:	d121      	bne.n	8004de0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d837      	bhi.n	8004e12 <DMA_CheckFifoParam+0xda>
 8004da2:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <DMA_CheckFifoParam+0x70>)
 8004da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da8:	08004db9 	.word	0x08004db9
 8004dac:	08004dbf 	.word	0x08004dbf
 8004db0:	08004db9 	.word	0x08004db9
 8004db4:	08004dd1 	.word	0x08004dd1
=======
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e96:	d121      	bne.n	8004edc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d837      	bhi.n	8004f0e <DMA_CheckFifoParam+0xda>
 8004e9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <DMA_CheckFifoParam+0x70>)
 8004ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea4:	08004eb5 	.word	0x08004eb5
 8004ea8:	08004ebb 	.word	0x08004ebb
 8004eac:	08004eb5 	.word	0x08004eb5
 8004eb0:	08004ecd 	.word	0x08004ecd
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< HEAD
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
      break;
 8004dbc:	e030      	b.n	8004e20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d025      	beq.n	8004e16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dce:	e022      	b.n	8004e16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dd8:	d11f      	bne.n	8004e1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004dde:	e01c      	b.n	8004e1a <DMA_CheckFifoParam+0xe2>
=======
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8004eb8:	e030      	b.n	8004f1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d025      	beq.n	8004f12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eca:	e022      	b.n	8004f12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ed4:	d11f      	bne.n	8004f16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004eda:	e01c      	b.n	8004f16 <DMA_CheckFifoParam+0xe2>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< HEAD
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d903      	bls.n	8004dee <DMA_CheckFifoParam+0xb6>
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d003      	beq.n	8004df4 <DMA_CheckFifoParam+0xbc>
=======
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d903      	bls.n	8004eea <DMA_CheckFifoParam+0xb6>
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	d003      	beq.n	8004ef0 <DMA_CheckFifoParam+0xbc>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< HEAD
 8004dec:	e018      	b.n	8004e20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	73fb      	strb	r3, [r7, #15]
      break;
 8004df2:	e015      	b.n	8004e20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00e      	beq.n	8004e1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	73fb      	strb	r3, [r7, #15]
      break;
 8004e04:	e00b      	b.n	8004e1e <DMA_CheckFifoParam+0xe6>
      break;
 8004e06:	bf00      	nop
 8004e08:	e00a      	b.n	8004e20 <DMA_CheckFifoParam+0xe8>
      break;
 8004e0a:	bf00      	nop
 8004e0c:	e008      	b.n	8004e20 <DMA_CheckFifoParam+0xe8>
      break;
 8004e0e:	bf00      	nop
 8004e10:	e006      	b.n	8004e20 <DMA_CheckFifoParam+0xe8>
      break;
 8004e12:	bf00      	nop
 8004e14:	e004      	b.n	8004e20 <DMA_CheckFifoParam+0xe8>
      break;
 8004e16:	bf00      	nop
 8004e18:	e002      	b.n	8004e20 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e1a:	bf00      	nop
 8004e1c:	e000      	b.n	8004e20 <DMA_CheckFifoParam+0xe8>
      break;
 8004e1e:	bf00      	nop
=======
 8004ee8:	e018      	b.n	8004f1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	73fb      	strb	r3, [r7, #15]
      break;
 8004eee:	e015      	b.n	8004f1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00e      	beq.n	8004f1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	73fb      	strb	r3, [r7, #15]
      break;
 8004f00:	e00b      	b.n	8004f1a <DMA_CheckFifoParam+0xe6>
      break;
 8004f02:	bf00      	nop
 8004f04:	e00a      	b.n	8004f1c <DMA_CheckFifoParam+0xe8>
      break;
 8004f06:	bf00      	nop
 8004f08:	e008      	b.n	8004f1c <DMA_CheckFifoParam+0xe8>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e006      	b.n	8004f1c <DMA_CheckFifoParam+0xe8>
      break;
 8004f0e:	bf00      	nop
 8004f10:	e004      	b.n	8004f1c <DMA_CheckFifoParam+0xe8>
      break;
 8004f12:	bf00      	nop
 8004f14:	e002      	b.n	8004f1c <DMA_CheckFifoParam+0xe8>
      break;   
 8004f16:	bf00      	nop
 8004f18:	e000      	b.n	8004f1c <DMA_CheckFifoParam+0xe8>
      break;
 8004f1a:	bf00      	nop
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  } 
  
  return status; 
<<<<<<< HEAD
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop

08004e30 <HAL_GPIO_Init>:
=======
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop

08004f2c <HAL_GPIO_Init>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a37      	ldr	r2, [pc, #220]	; (8004f28 <HAL_GPIO_Init+0xf8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d01f      	beq.n	8004e8e <HAL_GPIO_Init+0x5e>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a36      	ldr	r2, [pc, #216]	; (8004f2c <HAL_GPIO_Init+0xfc>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d01b      	beq.n	8004e8e <HAL_GPIO_Init+0x5e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a35      	ldr	r2, [pc, #212]	; (8004f30 <HAL_GPIO_Init+0x100>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d017      	beq.n	8004e8e <HAL_GPIO_Init+0x5e>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a34      	ldr	r2, [pc, #208]	; (8004f34 <HAL_GPIO_Init+0x104>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d013      	beq.n	8004e8e <HAL_GPIO_Init+0x5e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a33      	ldr	r2, [pc, #204]	; (8004f38 <HAL_GPIO_Init+0x108>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00f      	beq.n	8004e8e <HAL_GPIO_Init+0x5e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a32      	ldr	r2, [pc, #200]	; (8004f3c <HAL_GPIO_Init+0x10c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00b      	beq.n	8004e8e <HAL_GPIO_Init+0x5e>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a31      	ldr	r2, [pc, #196]	; (8004f40 <HAL_GPIO_Init+0x110>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d007      	beq.n	8004e8e <HAL_GPIO_Init+0x5e>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a30      	ldr	r2, [pc, #192]	; (8004f44 <HAL_GPIO_Init+0x114>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d003      	beq.n	8004e8e <HAL_GPIO_Init+0x5e>
 8004e86:	21ac      	movs	r1, #172	; 0xac
 8004e88:	482f      	ldr	r0, [pc, #188]	; (8004f48 <HAL_GPIO_Init+0x118>)
 8004e8a:	f7fc ff56 	bl	8001d3a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <HAL_GPIO_Init+0x74>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	0c1b      	lsrs	r3, r3, #16
 8004e9e:	041b      	lsls	r3, r3, #16
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <HAL_GPIO_Init+0x7c>
 8004ea4:	21ad      	movs	r1, #173	; 0xad
 8004ea6:	4828      	ldr	r0, [pc, #160]	; (8004f48 <HAL_GPIO_Init+0x118>)
 8004ea8:	f7fc ff47 	bl	8001d3a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d035      	beq.n	8004f20 <HAL_GPIO_Init+0xf0>
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d031      	beq.n	8004f20 <HAL_GPIO_Init+0xf0>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2b11      	cmp	r3, #17
 8004ec2:	d02d      	beq.n	8004f20 <HAL_GPIO_Init+0xf0>
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d029      	beq.n	8004f20 <HAL_GPIO_Init+0xf0>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b12      	cmp	r3, #18
 8004ed2:	d025      	beq.n	8004f20 <HAL_GPIO_Init+0xf0>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8004edc:	d020      	beq.n	8004f20 <HAL_GPIO_Init+0xf0>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004ee6:	d01b      	beq.n	8004f20 <HAL_GPIO_Init+0xf0>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8004ef0:	d016      	beq.n	8004f20 <HAL_GPIO_Init+0xf0>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8004efa:	d011      	beq.n	8004f20 <HAL_GPIO_Init+0xf0>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8004f04:	d00c      	beq.n	8004f20 <HAL_GPIO_Init+0xf0>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8004f0e:	d007      	beq.n	8004f20 <HAL_GPIO_Init+0xf0>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d003      	beq.n	8004f20 <HAL_GPIO_Init+0xf0>
 8004f18:	21ae      	movs	r1, #174	; 0xae
 8004f1a:	480b      	ldr	r0, [pc, #44]	; (8004f48 <HAL_GPIO_Init+0x118>)
 8004f1c:	f7fc ff0d 	bl	8001d3a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f20:	2300      	movs	r3, #0
 8004f22:	61fb      	str	r3, [r7, #28]
 8004f24:	e289      	b.n	800543a <HAL_GPIO_Init+0x60a>
 8004f26:	bf00      	nop
 8004f28:	40020000 	.word	0x40020000
 8004f2c:	40020400 	.word	0x40020400
 8004f30:	40020800 	.word	0x40020800
 8004f34:	40020c00 	.word	0x40020c00
 8004f38:	40021000 	.word	0x40021000
 8004f3c:	40021400 	.word	0x40021400
 8004f40:	40021800 	.word	0x40021800
 8004f44:	40021c00 	.word	0x40021c00
 8004f48:	0800c0b4 	.word	0x0800c0b4
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	fa02 f303 	lsl.w	r3, r2, r3
 8004f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	f040 8265 	bne.w	8005434 <HAL_GPIO_Init+0x604>
=======
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a37      	ldr	r2, [pc, #220]	; (8005024 <HAL_GPIO_Init+0xf8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d01f      	beq.n	8004f8a <HAL_GPIO_Init+0x5e>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a36      	ldr	r2, [pc, #216]	; (8005028 <HAL_GPIO_Init+0xfc>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d01b      	beq.n	8004f8a <HAL_GPIO_Init+0x5e>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a35      	ldr	r2, [pc, #212]	; (800502c <HAL_GPIO_Init+0x100>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d017      	beq.n	8004f8a <HAL_GPIO_Init+0x5e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a34      	ldr	r2, [pc, #208]	; (8005030 <HAL_GPIO_Init+0x104>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d013      	beq.n	8004f8a <HAL_GPIO_Init+0x5e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a33      	ldr	r2, [pc, #204]	; (8005034 <HAL_GPIO_Init+0x108>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00f      	beq.n	8004f8a <HAL_GPIO_Init+0x5e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a32      	ldr	r2, [pc, #200]	; (8005038 <HAL_GPIO_Init+0x10c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00b      	beq.n	8004f8a <HAL_GPIO_Init+0x5e>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a31      	ldr	r2, [pc, #196]	; (800503c <HAL_GPIO_Init+0x110>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d007      	beq.n	8004f8a <HAL_GPIO_Init+0x5e>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a30      	ldr	r2, [pc, #192]	; (8005040 <HAL_GPIO_Init+0x114>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d003      	beq.n	8004f8a <HAL_GPIO_Init+0x5e>
 8004f82:	21ac      	movs	r1, #172	; 0xac
 8004f84:	482f      	ldr	r0, [pc, #188]	; (8005044 <HAL_GPIO_Init+0x118>)
 8004f86:	f7fc ff56 	bl	8001e36 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <HAL_GPIO_Init+0x74>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	0c1b      	lsrs	r3, r3, #16
 8004f9a:	041b      	lsls	r3, r3, #16
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <HAL_GPIO_Init+0x7c>
 8004fa0:	21ad      	movs	r1, #173	; 0xad
 8004fa2:	4828      	ldr	r0, [pc, #160]	; (8005044 <HAL_GPIO_Init+0x118>)
 8004fa4:	f7fc ff47 	bl	8001e36 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d035      	beq.n	800501c <HAL_GPIO_Init+0xf0>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d031      	beq.n	800501c <HAL_GPIO_Init+0xf0>
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2b11      	cmp	r3, #17
 8004fbe:	d02d      	beq.n	800501c <HAL_GPIO_Init+0xf0>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d029      	beq.n	800501c <HAL_GPIO_Init+0xf0>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b12      	cmp	r3, #18
 8004fce:	d025      	beq.n	800501c <HAL_GPIO_Init+0xf0>
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8004fd8:	d020      	beq.n	800501c <HAL_GPIO_Init+0xf0>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004fe2:	d01b      	beq.n	800501c <HAL_GPIO_Init+0xf0>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8004fec:	d016      	beq.n	800501c <HAL_GPIO_Init+0xf0>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8004ff6:	d011      	beq.n	800501c <HAL_GPIO_Init+0xf0>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8005000:	d00c      	beq.n	800501c <HAL_GPIO_Init+0xf0>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800500a:	d007      	beq.n	800501c <HAL_GPIO_Init+0xf0>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b03      	cmp	r3, #3
 8005012:	d003      	beq.n	800501c <HAL_GPIO_Init+0xf0>
 8005014:	21ae      	movs	r1, #174	; 0xae
 8005016:	480b      	ldr	r0, [pc, #44]	; (8005044 <HAL_GPIO_Init+0x118>)
 8005018:	f7fc ff0d 	bl	8001e36 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800501c:	2300      	movs	r3, #0
 800501e:	61fb      	str	r3, [r7, #28]
 8005020:	e289      	b.n	8005536 <HAL_GPIO_Init+0x60a>
 8005022:	bf00      	nop
 8005024:	40020000 	.word	0x40020000
 8005028:	40020400 	.word	0x40020400
 800502c:	40020800 	.word	0x40020800
 8005030:	40020c00 	.word	0x40020c00
 8005034:	40021000 	.word	0x40021000
 8005038:	40021400 	.word	0x40021400
 800503c:	40021800 	.word	0x40021800
 8005040:	40021c00 	.word	0x40021c00
 8005044:	0800c1b4 	.word	0x0800c1b4
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005048:	2201      	movs	r2, #1
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4013      	ands	r3, r2
 800505a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	429a      	cmp	r2, r3
 8005062:	f040 8265 	bne.w	8005530 <HAL_GPIO_Init+0x604>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d005      	beq.n	8004f82 <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d144      	bne.n	800500c <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00f      	beq.n	8004faa <HAL_GPIO_Init+0x17a>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d00b      	beq.n	8004faa <HAL_GPIO_Init+0x17a>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d007      	beq.n	8004faa <HAL_GPIO_Init+0x17a>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d003      	beq.n	8004faa <HAL_GPIO_Init+0x17a>
 8004fa2:	21c0      	movs	r1, #192	; 0xc0
 8004fa4:	4831      	ldr	r0, [pc, #196]	; (800506c <HAL_GPIO_Init+0x23c>)
 8004fa6:	f7fc fec8 	bl	8001d3a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	4013      	ands	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	091b      	lsrs	r3, r3, #4
 8004ff6:	f003 0201 	and.w	r2, r3, #1
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	4313      	orrs	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	2b03      	cmp	r3, #3
 8005016:	d02b      	beq.n	8005070 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00b      	beq.n	8005038 <HAL_GPIO_Init+0x208>
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d007      	beq.n	8005038 <HAL_GPIO_Init+0x208>
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	2b02      	cmp	r3, #2
 800502e:	d003      	beq.n	8005038 <HAL_GPIO_Init+0x208>
 8005030:	21d1      	movs	r1, #209	; 0xd1
 8005032:	480e      	ldr	r0, [pc, #56]	; (800506c <HAL_GPIO_Init+0x23c>)
 8005034:	f7fc fe81 	bl	8001d3a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	2203      	movs	r2, #3
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	43db      	mvns	r3, r3
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	4013      	ands	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	4313      	orrs	r3, r2
 8005060:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	60da      	str	r2, [r3, #12]
 8005068:	e002      	b.n	8005070 <HAL_GPIO_Init+0x240>
 800506a:	bf00      	nop
 800506c:	0800c0b4 	.word	0x0800c0b4
=======
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	2b01      	cmp	r3, #1
 8005070:	d005      	beq.n	800507e <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800507a:	2b02      	cmp	r3, #2
 800507c:	d144      	bne.n	8005108 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00f      	beq.n	80050a6 <HAL_GPIO_Init+0x17a>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d00b      	beq.n	80050a6 <HAL_GPIO_Init+0x17a>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	2b02      	cmp	r3, #2
 8005094:	d007      	beq.n	80050a6 <HAL_GPIO_Init+0x17a>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	2b03      	cmp	r3, #3
 800509c:	d003      	beq.n	80050a6 <HAL_GPIO_Init+0x17a>
 800509e:	21c0      	movs	r1, #192	; 0xc0
 80050a0:	4831      	ldr	r0, [pc, #196]	; (8005168 <HAL_GPIO_Init+0x23c>)
 80050a2:	f7fc fec8 	bl	8001e36 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	2203      	movs	r2, #3
 80050b2:	fa02 f303 	lsl.w	r3, r2, r3
 80050b6:	43db      	mvns	r3, r3
 80050b8:	69ba      	ldr	r2, [r7, #24]
 80050ba:	4013      	ands	r3, r2
 80050bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050dc:	2201      	movs	r2, #1
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	43db      	mvns	r3, r3
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4013      	ands	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	091b      	lsrs	r3, r3, #4
 80050f2:	f003 0201 	and.w	r2, r3, #1
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	4313      	orrs	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f003 0303 	and.w	r3, r3, #3
 8005110:	2b03      	cmp	r3, #3
 8005112:	d02b      	beq.n	800516c <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00b      	beq.n	8005134 <HAL_GPIO_Init+0x208>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d007      	beq.n	8005134 <HAL_GPIO_Init+0x208>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	2b02      	cmp	r3, #2
 800512a:	d003      	beq.n	8005134 <HAL_GPIO_Init+0x208>
 800512c:	21d1      	movs	r1, #209	; 0xd1
 800512e:	480e      	ldr	r0, [pc, #56]	; (8005168 <HAL_GPIO_Init+0x23c>)
 8005130:	f7fc fe81 	bl	8001e36 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	005b      	lsls	r3, r3, #1
 800513e:	2203      	movs	r2, #3
 8005140:	fa02 f303 	lsl.w	r3, r2, r3
 8005144:	43db      	mvns	r3, r3
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	4013      	ands	r3, r2
 800514a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	fa02 f303 	lsl.w	r3, r2, r3
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	4313      	orrs	r3, r2
 800515c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	60da      	str	r2, [r3, #12]
 8005164:	e002      	b.n	800516c <HAL_GPIO_Init+0x240>
 8005166:	bf00      	nop
 8005168:	0800c1b4 	.word	0x0800c1b4
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	2b02      	cmp	r3, #2
 800507a:	f040 810c 	bne.w	8005296 <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 80e3 	beq.w	800524e <HAL_GPIO_Init+0x41e>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	2b09      	cmp	r3, #9
 800508e:	f000 80de 	beq.w	800524e <HAL_GPIO_Init+0x41e>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 80d9 	beq.w	800524e <HAL_GPIO_Init+0x41e>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 80d4 	beq.w	800524e <HAL_GPIO_Init+0x41e>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 80cf 	beq.w	800524e <HAL_GPIO_Init+0x41e>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 80ca 	beq.w	800524e <HAL_GPIO_Init+0x41e>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	f000 80c5 	beq.w	800524e <HAL_GPIO_Init+0x41e>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	f000 80c0 	beq.w	800524e <HAL_GPIO_Init+0x41e>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	f000 80bb 	beq.w	800524e <HAL_GPIO_Init+0x41e>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	2b02      	cmp	r3, #2
 80050de:	f000 80b6 	beq.w	800524e <HAL_GPIO_Init+0x41e>
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	f000 80b1 	beq.w	800524e <HAL_GPIO_Init+0x41e>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	f000 80ac 	beq.w	800524e <HAL_GPIO_Init+0x41e>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	f000 80a7 	beq.w	800524e <HAL_GPIO_Init+0x41e>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	2b04      	cmp	r3, #4
 8005106:	f000 80a2 	beq.w	800524e <HAL_GPIO_Init+0x41e>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	2b04      	cmp	r3, #4
 8005110:	f000 809d 	beq.w	800524e <HAL_GPIO_Init+0x41e>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	2b05      	cmp	r3, #5
 800511a:	f000 8098 	beq.w	800524e <HAL_GPIO_Init+0x41e>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b05      	cmp	r3, #5
 8005124:	f000 8093 	beq.w	800524e <HAL_GPIO_Init+0x41e>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	2b09      	cmp	r3, #9
 800512e:	f000 808e 	beq.w	800524e <HAL_GPIO_Init+0x41e>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	2b06      	cmp	r3, #6
 8005138:	f000 8089 	beq.w	800524e <HAL_GPIO_Init+0x41e>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	2b09      	cmp	r3, #9
 8005142:	f000 8084 	beq.w	800524e <HAL_GPIO_Init+0x41e>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b07      	cmp	r3, #7
 800514c:	d07f      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	2b07      	cmp	r3, #7
 8005154:	d07b      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	2b07      	cmp	r3, #7
 800515c:	d077      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	2b08      	cmp	r3, #8
 8005164:	d073      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b08      	cmp	r3, #8
 800516c:	d06f      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	2b08      	cmp	r3, #8
 8005174:	d06b      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	2b09      	cmp	r3, #9
 800517c:	d067      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	2b09      	cmp	r3, #9
 8005184:	d063      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	2b0a      	cmp	r3, #10
 800518c:	d05f      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b0a      	cmp	r3, #10
 8005194:	d05b      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b0b      	cmp	r3, #11
 800519c:	d057      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	2b0c      	cmp	r3, #12
 80051a4:	d053      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	2b0c      	cmp	r3, #12
 80051ac:	d04f      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	2b0d      	cmp	r3, #13
 80051b4:	d04b      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	2b0f      	cmp	r3, #15
 80051bc:	d047      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	2b05      	cmp	r3, #5
 80051c4:	d043      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b0c      	cmp	r3, #12
 80051cc:	d03f      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	2b06      	cmp	r3, #6
 80051d4:	d03b      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d037      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d033      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	2b05      	cmp	r3, #5
 80051ec:	d02f      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b06      	cmp	r3, #6
 80051f4:	d02b      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	2b06      	cmp	r3, #6
 80051fc:	d027      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	2b07      	cmp	r3, #7
 8005204:	d023      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	2b07      	cmp	r3, #7
 800520c:	d01f      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	2b07      	cmp	r3, #7
 8005214:	d01b      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	2b07      	cmp	r3, #7
 800521c:	d017      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	2b08      	cmp	r3, #8
 8005224:	d013      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b08      	cmp	r3, #8
 800522c:	d00f      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	2b09      	cmp	r3, #9
 8005234:	d00b      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	2b0a      	cmp	r3, #10
 800523c:	d007      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	2b0a      	cmp	r3, #10
 8005244:	d003      	beq.n	800524e <HAL_GPIO_Init+0x41e>
 8005246:	21de      	movs	r1, #222	; 0xde
 8005248:	4880      	ldr	r0, [pc, #512]	; (800544c <HAL_GPIO_Init+0x61c>)
 800524a:	f7fc fd76 	bl	8001d3a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	08da      	lsrs	r2, r3, #3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3208      	adds	r2, #8
 8005256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800525a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	220f      	movs	r2, #15
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	43db      	mvns	r3, r3
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	4013      	ands	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	691a      	ldr	r2, [r3, #16]
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	4313      	orrs	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	08da      	lsrs	r2, r3, #3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3208      	adds	r2, #8
 8005290:	69b9      	ldr	r1, [r7, #24]
 8005292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	f003 0303 	and.w	r3, r3, #3
 8005174:	2b02      	cmp	r3, #2
 8005176:	f040 810c 	bne.w	8005392 <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 80e3 	beq.w	800534a <HAL_GPIO_Init+0x41e>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	2b09      	cmp	r3, #9
 800518a:	f000 80de 	beq.w	800534a <HAL_GPIO_Init+0x41e>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 80d9 	beq.w	800534a <HAL_GPIO_Init+0x41e>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80d4 	beq.w	800534a <HAL_GPIO_Init+0x41e>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 80cf 	beq.w	800534a <HAL_GPIO_Init+0x41e>
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 80ca 	beq.w	800534a <HAL_GPIO_Init+0x41e>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	f000 80c5 	beq.w	800534a <HAL_GPIO_Init+0x41e>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	f000 80c0 	beq.w	800534a <HAL_GPIO_Init+0x41e>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	f000 80bb 	beq.w	800534a <HAL_GPIO_Init+0x41e>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	f000 80b6 	beq.w	800534a <HAL_GPIO_Init+0x41e>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	f000 80b1 	beq.w	800534a <HAL_GPIO_Init+0x41e>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	f000 80ac 	beq.w	800534a <HAL_GPIO_Init+0x41e>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	f000 80a7 	beq.w	800534a <HAL_GPIO_Init+0x41e>
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	2b04      	cmp	r3, #4
 8005202:	f000 80a2 	beq.w	800534a <HAL_GPIO_Init+0x41e>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	2b04      	cmp	r3, #4
 800520c:	f000 809d 	beq.w	800534a <HAL_GPIO_Init+0x41e>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	2b05      	cmp	r3, #5
 8005216:	f000 8098 	beq.w	800534a <HAL_GPIO_Init+0x41e>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	2b05      	cmp	r3, #5
 8005220:	f000 8093 	beq.w	800534a <HAL_GPIO_Init+0x41e>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	2b09      	cmp	r3, #9
 800522a:	f000 808e 	beq.w	800534a <HAL_GPIO_Init+0x41e>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	2b06      	cmp	r3, #6
 8005234:	f000 8089 	beq.w	800534a <HAL_GPIO_Init+0x41e>
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	2b09      	cmp	r3, #9
 800523e:	f000 8084 	beq.w	800534a <HAL_GPIO_Init+0x41e>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	2b07      	cmp	r3, #7
 8005248:	d07f      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	2b07      	cmp	r3, #7
 8005250:	d07b      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	2b07      	cmp	r3, #7
 8005258:	d077      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	2b08      	cmp	r3, #8
 8005260:	d073      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	2b08      	cmp	r3, #8
 8005268:	d06f      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	2b08      	cmp	r3, #8
 8005270:	d06b      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	2b09      	cmp	r3, #9
 8005278:	d067      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	2b09      	cmp	r3, #9
 8005280:	d063      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	2b0a      	cmp	r3, #10
 8005288:	d05f      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b0a      	cmp	r3, #10
 8005290:	d05b      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	2b0b      	cmp	r3, #11
 8005298:	d057      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	2b0c      	cmp	r3, #12
 80052a0:	d053      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	2b0c      	cmp	r3, #12
 80052a8:	d04f      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	2b0d      	cmp	r3, #13
 80052b0:	d04b      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	2b0f      	cmp	r3, #15
 80052b8:	d047      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	2b05      	cmp	r3, #5
 80052c0:	d043      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b0c      	cmp	r3, #12
 80052c8:	d03f      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	2b06      	cmp	r3, #6
 80052d0:	d03b      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d037      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d033      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	2b05      	cmp	r3, #5
 80052e8:	d02f      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b06      	cmp	r3, #6
 80052f0:	d02b      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b06      	cmp	r3, #6
 80052f8:	d027      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	2b07      	cmp	r3, #7
 8005300:	d023      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b07      	cmp	r3, #7
 8005308:	d01f      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	2b07      	cmp	r3, #7
 8005310:	d01b      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	2b07      	cmp	r3, #7
 8005318:	d017      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	2b08      	cmp	r3, #8
 8005320:	d013      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	2b08      	cmp	r3, #8
 8005328:	d00f      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	2b09      	cmp	r3, #9
 8005330:	d00b      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	2b0a      	cmp	r3, #10
 8005338:	d007      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2b0a      	cmp	r3, #10
 8005340:	d003      	beq.n	800534a <HAL_GPIO_Init+0x41e>
 8005342:	21de      	movs	r1, #222	; 0xde
 8005344:	4880      	ldr	r0, [pc, #512]	; (8005548 <HAL_GPIO_Init+0x61c>)
 8005346:	f7fc fd76 	bl	8001e36 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	08da      	lsrs	r2, r3, #3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3208      	adds	r2, #8
 8005352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	220f      	movs	r2, #15
 8005362:	fa02 f303 	lsl.w	r3, r2, r3
 8005366:	43db      	mvns	r3, r3
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	4013      	ands	r3, r2
 800536c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	691a      	ldr	r2, [r3, #16]
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	4313      	orrs	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	08da      	lsrs	r2, r3, #3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3208      	adds	r2, #8
 800538c:	69b9      	ldr	r1, [r7, #24]
 800538e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	2203      	movs	r2, #3
 80052a2:	fa02 f303 	lsl.w	r3, r2, r3
 80052a6:	43db      	mvns	r3, r3
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	4013      	ands	r3, r2
 80052ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f003 0203 	and.w	r2, r3, #3
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	601a      	str	r2, [r3, #0]
=======
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	2203      	movs	r2, #3
 800539e:	fa02 f303 	lsl.w	r3, r2, r3
 80053a2:	43db      	mvns	r3, r3
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	4013      	ands	r3, r2
 80053a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f003 0203 	and.w	r2, r3, #3
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	4313      	orrs	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< HEAD
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 80ae 	beq.w	8005434 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052d8:	2300      	movs	r3, #0
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	4b5c      	ldr	r3, [pc, #368]	; (8005450 <HAL_GPIO_Init+0x620>)
 80052de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e0:	4a5b      	ldr	r2, [pc, #364]	; (8005450 <HAL_GPIO_Init+0x620>)
 80052e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052e6:	6453      	str	r3, [r2, #68]	; 0x44
 80052e8:	4b59      	ldr	r3, [pc, #356]	; (8005450 <HAL_GPIO_Init+0x620>)
 80052ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052f4:	4a57      	ldr	r2, [pc, #348]	; (8005454 <HAL_GPIO_Init+0x624>)
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	089b      	lsrs	r3, r3, #2
 80052fa:	3302      	adds	r3, #2
 80052fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	f003 0303 	and.w	r3, r3, #3
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	220f      	movs	r2, #15
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	43db      	mvns	r3, r3
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	4013      	ands	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a4f      	ldr	r2, [pc, #316]	; (8005458 <HAL_GPIO_Init+0x628>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d025      	beq.n	800536c <HAL_GPIO_Init+0x53c>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a4e      	ldr	r2, [pc, #312]	; (800545c <HAL_GPIO_Init+0x62c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d01f      	beq.n	8005368 <HAL_GPIO_Init+0x538>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a4d      	ldr	r2, [pc, #308]	; (8005460 <HAL_GPIO_Init+0x630>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d019      	beq.n	8005364 <HAL_GPIO_Init+0x534>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a4c      	ldr	r2, [pc, #304]	; (8005464 <HAL_GPIO_Init+0x634>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d013      	beq.n	8005360 <HAL_GPIO_Init+0x530>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a4b      	ldr	r2, [pc, #300]	; (8005468 <HAL_GPIO_Init+0x638>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00d      	beq.n	800535c <HAL_GPIO_Init+0x52c>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a4a      	ldr	r2, [pc, #296]	; (800546c <HAL_GPIO_Init+0x63c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d007      	beq.n	8005358 <HAL_GPIO_Init+0x528>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a49      	ldr	r2, [pc, #292]	; (8005470 <HAL_GPIO_Init+0x640>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d101      	bne.n	8005354 <HAL_GPIO_Init+0x524>
 8005350:	2306      	movs	r3, #6
 8005352:	e00c      	b.n	800536e <HAL_GPIO_Init+0x53e>
 8005354:	2307      	movs	r3, #7
 8005356:	e00a      	b.n	800536e <HAL_GPIO_Init+0x53e>
 8005358:	2305      	movs	r3, #5
 800535a:	e008      	b.n	800536e <HAL_GPIO_Init+0x53e>
 800535c:	2304      	movs	r3, #4
 800535e:	e006      	b.n	800536e <HAL_GPIO_Init+0x53e>
 8005360:	2303      	movs	r3, #3
 8005362:	e004      	b.n	800536e <HAL_GPIO_Init+0x53e>
 8005364:	2302      	movs	r3, #2
 8005366:	e002      	b.n	800536e <HAL_GPIO_Init+0x53e>
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <HAL_GPIO_Init+0x53e>
 800536c:	2300      	movs	r3, #0
 800536e:	69fa      	ldr	r2, [r7, #28]
 8005370:	f002 0203 	and.w	r2, r2, #3
 8005374:	0092      	lsls	r2, r2, #2
 8005376:	4093      	lsls	r3, r2
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	4313      	orrs	r3, r2
 800537c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800537e:	4935      	ldr	r1, [pc, #212]	; (8005454 <HAL_GPIO_Init+0x624>)
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	089b      	lsrs	r3, r3, #2
 8005384:	3302      	adds	r3, #2
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800538c:	4b39      	ldr	r3, [pc, #228]	; (8005474 <HAL_GPIO_Init+0x644>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	43db      	mvns	r3, r3
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	4013      	ands	r3, r2
 800539a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053b0:	4a30      	ldr	r2, [pc, #192]	; (8005474 <HAL_GPIO_Init+0x644>)
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053b6:	4b2f      	ldr	r3, [pc, #188]	; (8005474 <HAL_GPIO_Init+0x644>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	43db      	mvns	r3, r3
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	4013      	ands	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053da:	4a26      	ldr	r2, [pc, #152]	; (8005474 <HAL_GPIO_Init+0x644>)
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053e0:	4b24      	ldr	r3, [pc, #144]	; (8005474 <HAL_GPIO_Init+0x644>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	43db      	mvns	r3, r3
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	4013      	ands	r3, r2
 80053ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d003      	beq.n	8005404 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 80053fc:	69ba      	ldr	r2, [r7, #24]
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	4313      	orrs	r3, r2
 8005402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005404:	4a1b      	ldr	r2, [pc, #108]	; (8005474 <HAL_GPIO_Init+0x644>)
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800540a:	4b1a      	ldr	r3, [pc, #104]	; (8005474 <HAL_GPIO_Init+0x644>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	43db      	mvns	r3, r3
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	4013      	ands	r3, r2
 8005418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	4313      	orrs	r3, r2
 800542c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800542e:	4a11      	ldr	r2, [pc, #68]	; (8005474 <HAL_GPIO_Init+0x644>)
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	3301      	adds	r3, #1
 8005438:	61fb      	str	r3, [r7, #28]
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	2b0f      	cmp	r3, #15
 800543e:	f67f ad85 	bls.w	8004f4c <HAL_GPIO_Init+0x11c>
=======
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 80ae 	beq.w	8005530 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053d4:	2300      	movs	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	4b5c      	ldr	r3, [pc, #368]	; (800554c <HAL_GPIO_Init+0x620>)
 80053da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053dc:	4a5b      	ldr	r2, [pc, #364]	; (800554c <HAL_GPIO_Init+0x620>)
 80053de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053e2:	6453      	str	r3, [r2, #68]	; 0x44
 80053e4:	4b59      	ldr	r3, [pc, #356]	; (800554c <HAL_GPIO_Init+0x620>)
 80053e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053f0:	4a57      	ldr	r2, [pc, #348]	; (8005550 <HAL_GPIO_Init+0x624>)
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	089b      	lsrs	r3, r3, #2
 80053f6:	3302      	adds	r3, #2
 80053f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	220f      	movs	r2, #15
 8005408:	fa02 f303 	lsl.w	r3, r2, r3
 800540c:	43db      	mvns	r3, r3
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	4013      	ands	r3, r2
 8005412:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a4f      	ldr	r2, [pc, #316]	; (8005554 <HAL_GPIO_Init+0x628>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d025      	beq.n	8005468 <HAL_GPIO_Init+0x53c>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a4e      	ldr	r2, [pc, #312]	; (8005558 <HAL_GPIO_Init+0x62c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d01f      	beq.n	8005464 <HAL_GPIO_Init+0x538>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a4d      	ldr	r2, [pc, #308]	; (800555c <HAL_GPIO_Init+0x630>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d019      	beq.n	8005460 <HAL_GPIO_Init+0x534>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a4c      	ldr	r2, [pc, #304]	; (8005560 <HAL_GPIO_Init+0x634>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d013      	beq.n	800545c <HAL_GPIO_Init+0x530>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a4b      	ldr	r2, [pc, #300]	; (8005564 <HAL_GPIO_Init+0x638>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00d      	beq.n	8005458 <HAL_GPIO_Init+0x52c>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a4a      	ldr	r2, [pc, #296]	; (8005568 <HAL_GPIO_Init+0x63c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d007      	beq.n	8005454 <HAL_GPIO_Init+0x528>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a49      	ldr	r2, [pc, #292]	; (800556c <HAL_GPIO_Init+0x640>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d101      	bne.n	8005450 <HAL_GPIO_Init+0x524>
 800544c:	2306      	movs	r3, #6
 800544e:	e00c      	b.n	800546a <HAL_GPIO_Init+0x53e>
 8005450:	2307      	movs	r3, #7
 8005452:	e00a      	b.n	800546a <HAL_GPIO_Init+0x53e>
 8005454:	2305      	movs	r3, #5
 8005456:	e008      	b.n	800546a <HAL_GPIO_Init+0x53e>
 8005458:	2304      	movs	r3, #4
 800545a:	e006      	b.n	800546a <HAL_GPIO_Init+0x53e>
 800545c:	2303      	movs	r3, #3
 800545e:	e004      	b.n	800546a <HAL_GPIO_Init+0x53e>
 8005460:	2302      	movs	r3, #2
 8005462:	e002      	b.n	800546a <HAL_GPIO_Init+0x53e>
 8005464:	2301      	movs	r3, #1
 8005466:	e000      	b.n	800546a <HAL_GPIO_Init+0x53e>
 8005468:	2300      	movs	r3, #0
 800546a:	69fa      	ldr	r2, [r7, #28]
 800546c:	f002 0203 	and.w	r2, r2, #3
 8005470:	0092      	lsls	r2, r2, #2
 8005472:	4093      	lsls	r3, r2
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	4313      	orrs	r3, r2
 8005478:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800547a:	4935      	ldr	r1, [pc, #212]	; (8005550 <HAL_GPIO_Init+0x624>)
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	089b      	lsrs	r3, r3, #2
 8005480:	3302      	adds	r3, #2
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005488:	4b39      	ldr	r3, [pc, #228]	; (8005570 <HAL_GPIO_Init+0x644>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	43db      	mvns	r3, r3
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	4013      	ands	r3, r2
 8005496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80054ac:	4a30      	ldr	r2, [pc, #192]	; (8005570 <HAL_GPIO_Init+0x644>)
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054b2:	4b2f      	ldr	r3, [pc, #188]	; (8005570 <HAL_GPIO_Init+0x644>)
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	43db      	mvns	r3, r3
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	4013      	ands	r3, r2
 80054c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80054d6:	4a26      	ldr	r2, [pc, #152]	; (8005570 <HAL_GPIO_Init+0x644>)
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80054dc:	4b24      	ldr	r3, [pc, #144]	; (8005570 <HAL_GPIO_Init+0x644>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	43db      	mvns	r3, r3
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	4013      	ands	r3, r2
 80054ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005500:	4a1b      	ldr	r2, [pc, #108]	; (8005570 <HAL_GPIO_Init+0x644>)
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005506:	4b1a      	ldr	r3, [pc, #104]	; (8005570 <HAL_GPIO_Init+0x644>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	43db      	mvns	r3, r3
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	4013      	ands	r3, r2
 8005514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	4313      	orrs	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800552a:	4a11      	ldr	r2, [pc, #68]	; (8005570 <HAL_GPIO_Init+0x644>)
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	3301      	adds	r3, #1
 8005534:	61fb      	str	r3, [r7, #28]
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	2b0f      	cmp	r3, #15
 800553a:	f67f ad85 	bls.w	8005048 <HAL_GPIO_Init+0x11c>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }
  }
}
<<<<<<< HEAD
 8005442:	bf00      	nop
 8005444:	bf00      	nop
 8005446:	3720      	adds	r7, #32
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	0800c0b4 	.word	0x0800c0b4
 8005450:	40023800 	.word	0x40023800
 8005454:	40013800 	.word	0x40013800
 8005458:	40020000 	.word	0x40020000
 800545c:	40020400 	.word	0x40020400
 8005460:	40020800 	.word	0x40020800
 8005464:	40020c00 	.word	0x40020c00
 8005468:	40021000 	.word	0x40021000
 800546c:	40021400 	.word	0x40021400
 8005470:	40021800 	.word	0x40021800
 8005474:	40013c00 	.word	0x40013c00

08005478 <HAL_GPIO_WritePin>:
=======
 800553e:	bf00      	nop
 8005540:	bf00      	nop
 8005542:	3720      	adds	r7, #32
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	0800c1b4 	.word	0x0800c1b4
 800554c:	40023800 	.word	0x40023800
 8005550:	40013800 	.word	0x40013800
 8005554:	40020000 	.word	0x40020000
 8005558:	40020400 	.word	0x40020400
 800555c:	40020800 	.word	0x40020800
 8005560:	40020c00 	.word	0x40020c00
 8005564:	40021000 	.word	0x40021000
 8005568:	40021400 	.word	0x40021400
 800556c:	40021800 	.word	0x40021800
 8005570:	40013c00 	.word	0x40013c00

08005574 <HAL_GPIO_WritePin>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	807b      	strh	r3, [r7, #2]
 8005484:	4613      	mov	r3, r2
 8005486:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005488:	887b      	ldrh	r3, [r7, #2]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d004      	beq.n	8005498 <HAL_GPIO_WritePin+0x20>
 800548e:	887b      	ldrh	r3, [r7, #2]
 8005490:	0c1b      	lsrs	r3, r3, #16
 8005492:	041b      	lsls	r3, r3, #16
 8005494:	2b00      	cmp	r3, #0
 8005496:	d004      	beq.n	80054a2 <HAL_GPIO_WritePin+0x2a>
 8005498:	f240 119d 	movw	r1, #413	; 0x19d
 800549c:	480e      	ldr	r0, [pc, #56]	; (80054d8 <HAL_GPIO_WritePin+0x60>)
 800549e:	f7fc fc4c 	bl	8001d3a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80054a2:	787b      	ldrb	r3, [r7, #1]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d007      	beq.n	80054b8 <HAL_GPIO_WritePin+0x40>
 80054a8:	787b      	ldrb	r3, [r7, #1]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d004      	beq.n	80054b8 <HAL_GPIO_WritePin+0x40>
 80054ae:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80054b2:	4809      	ldr	r0, [pc, #36]	; (80054d8 <HAL_GPIO_WritePin+0x60>)
 80054b4:	f7fc fc41 	bl	8001d3a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80054b8:	787b      	ldrb	r3, [r7, #1]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054be:	887a      	ldrh	r2, [r7, #2]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	619a      	str	r2, [r3, #24]
=======
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	807b      	strh	r3, [r7, #2]
 8005580:	4613      	mov	r3, r2
 8005582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005584:	887b      	ldrh	r3, [r7, #2]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d004      	beq.n	8005594 <HAL_GPIO_WritePin+0x20>
 800558a:	887b      	ldrh	r3, [r7, #2]
 800558c:	0c1b      	lsrs	r3, r3, #16
 800558e:	041b      	lsls	r3, r3, #16
 8005590:	2b00      	cmp	r3, #0
 8005592:	d004      	beq.n	800559e <HAL_GPIO_WritePin+0x2a>
 8005594:	f240 119d 	movw	r1, #413	; 0x19d
 8005598:	480e      	ldr	r0, [pc, #56]	; (80055d4 <HAL_GPIO_WritePin+0x60>)
 800559a:	f7fc fc4c 	bl	8001e36 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800559e:	787b      	ldrb	r3, [r7, #1]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <HAL_GPIO_WritePin+0x40>
 80055a4:	787b      	ldrb	r3, [r7, #1]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d004      	beq.n	80055b4 <HAL_GPIO_WritePin+0x40>
 80055aa:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80055ae:	4809      	ldr	r0, [pc, #36]	; (80055d4 <HAL_GPIO_WritePin+0x60>)
 80055b0:	f7fc fc41 	bl	8001e36 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80055b4:	787b      	ldrb	r3, [r7, #1]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055ba:	887a      	ldrh	r2, [r7, #2]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	619a      	str	r2, [r3, #24]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 80054c4:	e003      	b.n	80054ce <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054c6:	887b      	ldrh	r3, [r7, #2]
 80054c8:	041a      	lsls	r2, r3, #16
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	619a      	str	r2, [r3, #24]
}
 80054ce:	bf00      	nop
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	0800c0b4 	.word	0x0800c0b4

080054dc <HAL_I2C_Init>:
=======
 80055c0:	e003      	b.n	80055ca <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055c2:	887b      	ldrh	r3, [r7, #2]
 80055c4:	041a      	lsls	r2, r3, #16
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	619a      	str	r2, [r3, #24]
}
 80055ca:	bf00      	nop
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	0800c1b4 	.word	0x0800c1b4

080055d8 <HAL_I2C_Init>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
=======
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
<<<<<<< HEAD
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e1bd      	b.n	800586a <HAL_I2C_Init+0x38e>
=======
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e1bd      	b.n	8005966 <HAL_I2C_Init+0x38e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
<<<<<<< HEAD
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a93      	ldr	r2, [pc, #588]	; (8005740 <HAL_I2C_Init+0x264>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00e      	beq.n	8005516 <HAL_I2C_Init+0x3a>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a91      	ldr	r2, [pc, #580]	; (8005744 <HAL_I2C_Init+0x268>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d009      	beq.n	8005516 <HAL_I2C_Init+0x3a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a90      	ldr	r2, [pc, #576]	; (8005748 <HAL_I2C_Init+0x26c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d004      	beq.n	8005516 <HAL_I2C_Init+0x3a>
 800550c:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8005510:	488e      	ldr	r0, [pc, #568]	; (800574c <HAL_I2C_Init+0x270>)
 8005512:	f7fc fc12 	bl	8001d3a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d004      	beq.n	8005528 <HAL_I2C_Init+0x4c>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	4a8b      	ldr	r2, [pc, #556]	; (8005750 <HAL_I2C_Init+0x274>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d904      	bls.n	8005532 <HAL_I2C_Init+0x56>
 8005528:	f240 11bf 	movw	r1, #447	; 0x1bf
 800552c:	4887      	ldr	r0, [pc, #540]	; (800574c <HAL_I2C_Init+0x270>)
 800552e:	f7fc fc04 	bl	8001d3a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <HAL_I2C_Init+0x72>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005542:	d004      	beq.n	800554e <HAL_I2C_Init+0x72>
 8005544:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005548:	4880      	ldr	r0, [pc, #512]	; (800574c <HAL_I2C_Init+0x270>)
 800554a:	f7fc fbf6 	bl	8001d3a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005556:	f023 0303 	bic.w	r3, r3, #3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d004      	beq.n	8005568 <HAL_I2C_Init+0x8c>
 800555e:	f240 11c1 	movw	r1, #449	; 0x1c1
 8005562:	487a      	ldr	r0, [pc, #488]	; (800574c <HAL_I2C_Init+0x270>)
 8005564:	f7fc fbe9 	bl	8001d3a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005570:	d009      	beq.n	8005586 <HAL_I2C_Init+0xaa>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800557a:	d004      	beq.n	8005586 <HAL_I2C_Init+0xaa>
 800557c:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8005580:	4872      	ldr	r0, [pc, #456]	; (800574c <HAL_I2C_Init+0x270>)
 8005582:	f7fc fbda 	bl	8001d3a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d008      	beq.n	80055a0 <HAL_I2C_Init+0xc4>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d004      	beq.n	80055a0 <HAL_I2C_Init+0xc4>
 8005596:	f240 11c3 	movw	r1, #451	; 0x1c3
 800559a:	486c      	ldr	r0, [pc, #432]	; (800574c <HAL_I2C_Init+0x270>)
 800559c:	f7fc fbcd 	bl	8001d3a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d004      	beq.n	80055b6 <HAL_I2C_Init+0xda>
 80055ac:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80055b0:	4866      	ldr	r0, [pc, #408]	; (800574c <HAL_I2C_Init+0x270>)
 80055b2:	f7fc fbc2 	bl	8001d3a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d008      	beq.n	80055d0 <HAL_I2C_Init+0xf4>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	2b40      	cmp	r3, #64	; 0x40
 80055c4:	d004      	beq.n	80055d0 <HAL_I2C_Init+0xf4>
 80055c6:	f240 11c5 	movw	r1, #453	; 0x1c5
 80055ca:	4860      	ldr	r0, [pc, #384]	; (800574c <HAL_I2C_Init+0x270>)
 80055cc:	f7fc fbb5 	bl	8001d3a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d008      	beq.n	80055ea <HAL_I2C_Init+0x10e>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	2b80      	cmp	r3, #128	; 0x80
 80055de:	d004      	beq.n	80055ea <HAL_I2C_Init+0x10e>
 80055e0:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80055e4:	4859      	ldr	r0, [pc, #356]	; (800574c <HAL_I2C_Init+0x270>)
 80055e6:	f7fc fba8 	bl	8001d3a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d106      	bne.n	8005604 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a93      	ldr	r2, [pc, #588]	; (800583c <HAL_I2C_Init+0x264>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00e      	beq.n	8005612 <HAL_I2C_Init+0x3a>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a91      	ldr	r2, [pc, #580]	; (8005840 <HAL_I2C_Init+0x268>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d009      	beq.n	8005612 <HAL_I2C_Init+0x3a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a90      	ldr	r2, [pc, #576]	; (8005844 <HAL_I2C_Init+0x26c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d004      	beq.n	8005612 <HAL_I2C_Init+0x3a>
 8005608:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800560c:	488e      	ldr	r0, [pc, #568]	; (8005848 <HAL_I2C_Init+0x270>)
 800560e:	f7fc fc12 	bl	8001e36 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d004      	beq.n	8005624 <HAL_I2C_Init+0x4c>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	4a8b      	ldr	r2, [pc, #556]	; (800584c <HAL_I2C_Init+0x274>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d904      	bls.n	800562e <HAL_I2C_Init+0x56>
 8005624:	f240 11bf 	movw	r1, #447	; 0x1bf
 8005628:	4887      	ldr	r0, [pc, #540]	; (8005848 <HAL_I2C_Init+0x270>)
 800562a:	f7fc fc04 	bl	8001e36 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d009      	beq.n	800564a <HAL_I2C_Init+0x72>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800563e:	d004      	beq.n	800564a <HAL_I2C_Init+0x72>
 8005640:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005644:	4880      	ldr	r0, [pc, #512]	; (8005848 <HAL_I2C_Init+0x270>)
 8005646:	f7fc fbf6 	bl	8001e36 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005652:	f023 0303 	bic.w	r3, r3, #3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d004      	beq.n	8005664 <HAL_I2C_Init+0x8c>
 800565a:	f240 11c1 	movw	r1, #449	; 0x1c1
 800565e:	487a      	ldr	r0, [pc, #488]	; (8005848 <HAL_I2C_Init+0x270>)
 8005660:	f7fc fbe9 	bl	8001e36 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800566c:	d009      	beq.n	8005682 <HAL_I2C_Init+0xaa>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005676:	d004      	beq.n	8005682 <HAL_I2C_Init+0xaa>
 8005678:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800567c:	4872      	ldr	r0, [pc, #456]	; (8005848 <HAL_I2C_Init+0x270>)
 800567e:	f7fc fbda 	bl	8001e36 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d008      	beq.n	800569c <HAL_I2C_Init+0xc4>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d004      	beq.n	800569c <HAL_I2C_Init+0xc4>
 8005692:	f240 11c3 	movw	r1, #451	; 0x1c3
 8005696:	486c      	ldr	r0, [pc, #432]	; (8005848 <HAL_I2C_Init+0x270>)
 8005698:	f7fc fbcd 	bl	8001e36 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d004      	beq.n	80056b2 <HAL_I2C_Init+0xda>
 80056a8:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80056ac:	4866      	ldr	r0, [pc, #408]	; (8005848 <HAL_I2C_Init+0x270>)
 80056ae:	f7fc fbc2 	bl	8001e36 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d008      	beq.n	80056cc <HAL_I2C_Init+0xf4>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	2b40      	cmp	r3, #64	; 0x40
 80056c0:	d004      	beq.n	80056cc <HAL_I2C_Init+0xf4>
 80056c2:	f240 11c5 	movw	r1, #453	; 0x1c5
 80056c6:	4860      	ldr	r0, [pc, #384]	; (8005848 <HAL_I2C_Init+0x270>)
 80056c8:	f7fc fbb5 	bl	8001e36 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d008      	beq.n	80056e6 <HAL_I2C_Init+0x10e>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	2b80      	cmp	r3, #128	; 0x80
 80056da:	d004      	beq.n	80056e6 <HAL_I2C_Init+0x10e>
 80056dc:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80056e0:	4859      	ldr	r0, [pc, #356]	; (8005848 <HAL_I2C_Init+0x270>)
 80056e2:	f7fc fba8 	bl	8001e36 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d106      	bne.n	8005700 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7fc fa44 	bl	8001a8c <HAL_I2C_MspInit>
=======
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7fc fa44 	bl	8001b88 <HAL_I2C_MspInit>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2224      	movs	r2, #36	; 0x24
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0201 	bic.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]
=======
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2224      	movs	r2, #36	; 0x24
 8005704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 0201 	bic.w	r2, r2, #1
 8005716:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005726:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005736:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800562a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800563a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 800563c:	f001 fff8 	bl	8007630 <HAL_RCC_GetPCLK1Freq>
 8005640:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	4a43      	ldr	r2, [pc, #268]	; (8005754 <HAL_I2C_Init+0x278>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d807      	bhi.n	800565c <HAL_I2C_Init+0x180>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4a42      	ldr	r2, [pc, #264]	; (8005758 <HAL_I2C_Init+0x27c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	bf94      	ite	ls
 8005654:	2301      	movls	r3, #1
 8005656:	2300      	movhi	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	e006      	b.n	800566a <HAL_I2C_Init+0x18e>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4a3f      	ldr	r2, [pc, #252]	; (800575c <HAL_I2C_Init+0x280>)
 8005660:	4293      	cmp	r3, r2
 8005662:	bf94      	ite	ls
 8005664:	2301      	movls	r3, #1
 8005666:	2300      	movhi	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e0fb      	b.n	800586a <HAL_I2C_Init+0x38e>
=======
 8005738:	f001 fff8 	bl	800772c <HAL_RCC_GetPCLK1Freq>
 800573c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	4a43      	ldr	r2, [pc, #268]	; (8005850 <HAL_I2C_Init+0x278>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d807      	bhi.n	8005758 <HAL_I2C_Init+0x180>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4a42      	ldr	r2, [pc, #264]	; (8005854 <HAL_I2C_Init+0x27c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	bf94      	ite	ls
 8005750:	2301      	movls	r3, #1
 8005752:	2300      	movhi	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	e006      	b.n	8005766 <HAL_I2C_Init+0x18e>
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4a3f      	ldr	r2, [pc, #252]	; (8005858 <HAL_I2C_Init+0x280>)
 800575c:	4293      	cmp	r3, r2
 800575e:	bf94      	ite	ls
 8005760:	2301      	movls	r3, #1
 8005762:	2300      	movhi	r3, #0
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e0fb      	b.n	8005966 <HAL_I2C_Init+0x38e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
<<<<<<< HEAD
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4a3a      	ldr	r2, [pc, #232]	; (8005760 <HAL_I2C_Init+0x284>)
 8005676:	fba2 2303 	umull	r2, r3, r2, r3
 800567a:	0c9b      	lsrs	r3, r3, #18
 800567c:	60bb      	str	r3, [r7, #8]
=======
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	4a3a      	ldr	r2, [pc, #232]	; (800585c <HAL_I2C_Init+0x284>)
 8005772:	fba2 2303 	umull	r2, r3, r2, r3
 8005776:	0c9b      	lsrs	r3, r3, #18
 8005778:	60bb      	str	r3, [r7, #8]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
<<<<<<< HEAD
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	430a      	orrs	r2, r1
 8005690:	605a      	str	r2, [r3, #4]
=======
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	430a      	orrs	r2, r1
 800578c:	605a      	str	r2, [r3, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
<<<<<<< HEAD
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	4a2c      	ldr	r2, [pc, #176]	; (8005754 <HAL_I2C_Init+0x278>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d802      	bhi.n	80056ac <HAL_I2C_Init+0x1d0>
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	3301      	adds	r3, #1
 80056aa:	e009      	b.n	80056c0 <HAL_I2C_Init+0x1e4>
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80056b2:	fb02 f303 	mul.w	r3, r2, r3
 80056b6:	4a2b      	ldr	r2, [pc, #172]	; (8005764 <HAL_I2C_Init+0x288>)
 80056b8:	fba2 2303 	umull	r2, r3, r2, r3
 80056bc:	099b      	lsrs	r3, r3, #6
 80056be:	3301      	adds	r3, #1
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6812      	ldr	r2, [r2, #0]
 80056c4:	430b      	orrs	r3, r1
 80056c6:	6213      	str	r3, [r2, #32]
=======
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	4a2c      	ldr	r2, [pc, #176]	; (8005850 <HAL_I2C_Init+0x278>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d802      	bhi.n	80057a8 <HAL_I2C_Init+0x1d0>
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	3301      	adds	r3, #1
 80057a6:	e009      	b.n	80057bc <HAL_I2C_Init+0x1e4>
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80057ae:	fb02 f303 	mul.w	r3, r2, r3
 80057b2:	4a2b      	ldr	r2, [pc, #172]	; (8005860 <HAL_I2C_Init+0x288>)
 80057b4:	fba2 2303 	umull	r2, r3, r2, r3
 80057b8:	099b      	lsrs	r3, r3, #6
 80057ba:	3301      	adds	r3, #1
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6812      	ldr	r2, [r2, #0]
 80057c0:	430b      	orrs	r3, r1
 80057c2:	6213      	str	r3, [r2, #32]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
<<<<<<< HEAD
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80056d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	491e      	ldr	r1, [pc, #120]	; (8005754 <HAL_I2C_Init+0x278>)
 80056dc:	428b      	cmp	r3, r1
 80056de:	d819      	bhi.n	8005714 <HAL_I2C_Init+0x238>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	1e59      	subs	r1, r3, #1
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80056ee:	1c59      	adds	r1, r3, #1
 80056f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80056f4:	400b      	ands	r3, r1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <HAL_I2C_Init+0x234>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	1e59      	subs	r1, r3, #1
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	fbb1 f3f3 	udiv	r3, r1, r3
 8005708:	3301      	adds	r3, #1
 800570a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800570e:	e065      	b.n	80057dc <HAL_I2C_Init+0x300>
 8005710:	2304      	movs	r3, #4
 8005712:	e063      	b.n	80057dc <HAL_I2C_Init+0x300>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d125      	bne.n	8005768 <HAL_I2C_Init+0x28c>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	1e58      	subs	r0, r3, #1
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6859      	ldr	r1, [r3, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	440b      	add	r3, r1
 800572a:	fbb0 f3f3 	udiv	r3, r0, r3
 800572e:	3301      	adds	r3, #1
 8005730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005734:	2b00      	cmp	r3, #0
 8005736:	bf0c      	ite	eq
 8005738:	2301      	moveq	r3, #1
 800573a:	2300      	movne	r3, #0
 800573c:	b2db      	uxtb	r3, r3
 800573e:	e026      	b.n	800578e <HAL_I2C_Init+0x2b2>
 8005740:	40005400 	.word	0x40005400
 8005744:	40005800 	.word	0x40005800
 8005748:	40005c00 	.word	0x40005c00
 800574c:	0800c0f0 	.word	0x0800c0f0
 8005750:	00061a80 	.word	0x00061a80
 8005754:	000186a0 	.word	0x000186a0
 8005758:	001e847f 	.word	0x001e847f
 800575c:	003d08ff 	.word	0x003d08ff
 8005760:	431bde83 	.word	0x431bde83
 8005764:	10624dd3 	.word	0x10624dd3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	1e58      	subs	r0, r3, #1
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6859      	ldr	r1, [r3, #4]
 8005770:	460b      	mov	r3, r1
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	0099      	lsls	r1, r3, #2
 8005778:	440b      	add	r3, r1
 800577a:	fbb0 f3f3 	udiv	r3, r0, r3
 800577e:	3301      	adds	r3, #1
 8005780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005784:	2b00      	cmp	r3, #0
 8005786:	bf0c      	ite	eq
 8005788:	2301      	moveq	r3, #1
 800578a:	2300      	movne	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <HAL_I2C_Init+0x2ba>
 8005792:	2301      	movs	r3, #1
 8005794:	e022      	b.n	80057dc <HAL_I2C_Init+0x300>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10e      	bne.n	80057bc <HAL_I2C_Init+0x2e0>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	1e58      	subs	r0, r3, #1
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6859      	ldr	r1, [r3, #4]
 80057a6:	460b      	mov	r3, r1
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	440b      	add	r3, r1
 80057ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80057b0:	3301      	adds	r3, #1
 80057b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ba:	e00f      	b.n	80057dc <HAL_I2C_Init+0x300>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	1e58      	subs	r0, r3, #1
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6859      	ldr	r1, [r3, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	440b      	add	r3, r1
 80057ca:	0099      	lsls	r1, r3, #2
 80057cc:	440b      	add	r3, r1
 80057ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80057d2:	3301      	adds	r3, #1
 80057d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057dc:	6879      	ldr	r1, [r7, #4]
 80057de:	6809      	ldr	r1, [r1, #0]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	61cb      	str	r3, [r1, #28]
=======
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80057ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	491e      	ldr	r1, [pc, #120]	; (8005850 <HAL_I2C_Init+0x278>)
 80057d8:	428b      	cmp	r3, r1
 80057da:	d819      	bhi.n	8005810 <HAL_I2C_Init+0x238>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	1e59      	subs	r1, r3, #1
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80057ea:	1c59      	adds	r1, r3, #1
 80057ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80057f0:	400b      	ands	r3, r1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <HAL_I2C_Init+0x234>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	1e59      	subs	r1, r3, #1
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	fbb1 f3f3 	udiv	r3, r1, r3
 8005804:	3301      	adds	r3, #1
 8005806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800580a:	e065      	b.n	80058d8 <HAL_I2C_Init+0x300>
 800580c:	2304      	movs	r3, #4
 800580e:	e063      	b.n	80058d8 <HAL_I2C_Init+0x300>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d125      	bne.n	8005864 <HAL_I2C_Init+0x28c>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	1e58      	subs	r0, r3, #1
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6859      	ldr	r1, [r3, #4]
 8005820:	460b      	mov	r3, r1
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	440b      	add	r3, r1
 8005826:	fbb0 f3f3 	udiv	r3, r0, r3
 800582a:	3301      	adds	r3, #1
 800582c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005830:	2b00      	cmp	r3, #0
 8005832:	bf0c      	ite	eq
 8005834:	2301      	moveq	r3, #1
 8005836:	2300      	movne	r3, #0
 8005838:	b2db      	uxtb	r3, r3
 800583a:	e026      	b.n	800588a <HAL_I2C_Init+0x2b2>
 800583c:	40005400 	.word	0x40005400
 8005840:	40005800 	.word	0x40005800
 8005844:	40005c00 	.word	0x40005c00
 8005848:	0800c1f0 	.word	0x0800c1f0
 800584c:	00061a80 	.word	0x00061a80
 8005850:	000186a0 	.word	0x000186a0
 8005854:	001e847f 	.word	0x001e847f
 8005858:	003d08ff 	.word	0x003d08ff
 800585c:	431bde83 	.word	0x431bde83
 8005860:	10624dd3 	.word	0x10624dd3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	1e58      	subs	r0, r3, #1
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6859      	ldr	r1, [r3, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	440b      	add	r3, r1
 8005872:	0099      	lsls	r1, r3, #2
 8005874:	440b      	add	r3, r1
 8005876:	fbb0 f3f3 	udiv	r3, r0, r3
 800587a:	3301      	adds	r3, #1
 800587c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005880:	2b00      	cmp	r3, #0
 8005882:	bf0c      	ite	eq
 8005884:	2301      	moveq	r3, #1
 8005886:	2300      	movne	r3, #0
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <HAL_I2C_Init+0x2ba>
 800588e:	2301      	movs	r3, #1
 8005890:	e022      	b.n	80058d8 <HAL_I2C_Init+0x300>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10e      	bne.n	80058b8 <HAL_I2C_Init+0x2e0>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	1e58      	subs	r0, r3, #1
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6859      	ldr	r1, [r3, #4]
 80058a2:	460b      	mov	r3, r1
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	440b      	add	r3, r1
 80058a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80058ac:	3301      	adds	r3, #1
 80058ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058b6:	e00f      	b.n	80058d8 <HAL_I2C_Init+0x300>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	1e58      	subs	r0, r3, #1
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6859      	ldr	r1, [r3, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	440b      	add	r3, r1
 80058c6:	0099      	lsls	r1, r3, #2
 80058c8:	440b      	add	r3, r1
 80058ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80058ce:	3301      	adds	r3, #1
 80058d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	6809      	ldr	r1, [r1, #0]
 80058dc:	4313      	orrs	r3, r2
 80058de:	61cb      	str	r3, [r1, #28]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
<<<<<<< HEAD
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69da      	ldr	r2, [r3, #28]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	601a      	str	r2, [r3, #0]
=======
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	69da      	ldr	r2, [r3, #28]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
<<<<<<< HEAD
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800580a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6911      	ldr	r1, [r2, #16]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	68d2      	ldr	r2, [r2, #12]
 8005816:	4311      	orrs	r1, r2
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6812      	ldr	r2, [r2, #0]
 800581c:	430b      	orrs	r3, r1
 800581e:	6093      	str	r3, [r2, #8]
=======
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005906:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	6911      	ldr	r1, [r2, #16]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	68d2      	ldr	r2, [r2, #12]
 8005912:	4311      	orrs	r1, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6812      	ldr	r2, [r2, #0]
 8005918:	430b      	orrs	r3, r1
 800591a:	6093      	str	r3, [r2, #8]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
<<<<<<< HEAD
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695a      	ldr	r2, [r3, #20]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0201 	orr.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2220      	movs	r2, #32
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop

08005874 <HAL_I2C_EV_IRQHandler>:
=======
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695a      	ldr	r2, [r3, #20]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2220      	movs	r2, #32
 8005952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop

08005970 <HAL_I2C_EV_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005894:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800589c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800589e:	7bfb      	ldrb	r3, [r7, #15]
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d003      	beq.n	80058ac <HAL_I2C_EV_IRQHandler+0x38>
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	2b40      	cmp	r3, #64	; 0x40
 80058a8:	f040 80c1 	bne.w	8005a2e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10d      	bne.n	80058e2 <HAL_I2C_EV_IRQHandler+0x6e>
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80058cc:	d003      	beq.n	80058d6 <HAL_I2C_EV_IRQHandler+0x62>
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80058d4:	d101      	bne.n	80058da <HAL_I2C_EV_IRQHandler+0x66>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e000      	b.n	80058dc <HAL_I2C_EV_IRQHandler+0x68>
 80058da:	2300      	movs	r3, #0
 80058dc:	2b01      	cmp	r3, #1
 80058de:	f000 8132 	beq.w	8005b46 <HAL_I2C_EV_IRQHandler+0x2d2>
=======
 8005970:	b580      	push	{r7, lr}
 8005972:	b088      	sub	sp, #32
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005990:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005998:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800599a:	7bfb      	ldrb	r3, [r7, #15]
 800599c:	2b10      	cmp	r3, #16
 800599e:	d003      	beq.n	80059a8 <HAL_I2C_EV_IRQHandler+0x38>
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
 80059a2:	2b40      	cmp	r3, #64	; 0x40
 80059a4:	f040 80c1 	bne.w	8005b2a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10d      	bne.n	80059de <HAL_I2C_EV_IRQHandler+0x6e>
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80059c8:	d003      	beq.n	80059d2 <HAL_I2C_EV_IRQHandler+0x62>
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80059d0:	d101      	bne.n	80059d6 <HAL_I2C_EV_IRQHandler+0x66>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <HAL_I2C_EV_IRQHandler+0x68>
 80059d6:	2300      	movs	r3, #0
 80059d8:	2b01      	cmp	r3, #1
 80059da:	f000 8132 	beq.w	8005c42 <HAL_I2C_EV_IRQHandler+0x2d2>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
<<<<<<< HEAD
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00c      	beq.n	8005906 <HAL_I2C_EV_IRQHandler+0x92>
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	0a5b      	lsrs	r3, r3, #9
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d006      	beq.n	8005906 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f001 fc7b 	bl	80071f4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fd83 	bl	800640a <I2C_Master_SB>
 8005904:	e092      	b.n	8005a2c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	08db      	lsrs	r3, r3, #3
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <HAL_I2C_EV_IRQHandler+0xb2>
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	0a5b      	lsrs	r3, r3, #9
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 fdf9 	bl	8006516 <I2C_Master_ADD10>
 8005924:	e082      	b.n	8005a2c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	085b      	lsrs	r3, r3, #1
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d009      	beq.n	8005946 <HAL_I2C_EV_IRQHandler+0xd2>
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	0a5b      	lsrs	r3, r3, #9
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fe13 	bl	800656a <I2C_Master_ADDR>
 8005944:	e072      	b.n	8005a2c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	089b      	lsrs	r3, r3, #2
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d03b      	beq.n	80059ca <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800595c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005960:	f000 80f3 	beq.w	8005b4a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	09db      	lsrs	r3, r3, #7
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00f      	beq.n	8005990 <HAL_I2C_EV_IRQHandler+0x11c>
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	0a9b      	lsrs	r3, r3, #10
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d009      	beq.n	8005990 <HAL_I2C_EV_IRQHandler+0x11c>
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	089b      	lsrs	r3, r3, #2
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d103      	bne.n	8005990 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f9f3 	bl	8005d74 <I2C_MasterTransmit_TXE>
 800598e:	e04d      	b.n	8005a2c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	089b      	lsrs	r3, r3, #2
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 80d6 	beq.w	8005b4a <HAL_I2C_EV_IRQHandler+0x2d6>
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	0a5b      	lsrs	r3, r3, #9
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 80cf 	beq.w	8005b4a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80059ac:	7bbb      	ldrb	r3, [r7, #14]
 80059ae:	2b21      	cmp	r3, #33	; 0x21
 80059b0:	d103      	bne.n	80059ba <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fa7a 	bl	8005eac <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059b8:	e0c7      	b.n	8005b4a <HAL_I2C_EV_IRQHandler+0x2d6>
=======
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00c      	beq.n	8005a02 <HAL_I2C_EV_IRQHandler+0x92>
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	0a5b      	lsrs	r3, r3, #9
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d006      	beq.n	8005a02 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f001 fc7b 	bl	80072f0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fd83 	bl	8006506 <I2C_Master_SB>
 8005a00:	e092      	b.n	8005b28 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	08db      	lsrs	r3, r3, #3
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d009      	beq.n	8005a22 <HAL_I2C_EV_IRQHandler+0xb2>
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	0a5b      	lsrs	r3, r3, #9
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fdf9 	bl	8006612 <I2C_Master_ADD10>
 8005a20:	e082      	b.n	8005b28 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	085b      	lsrs	r3, r3, #1
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d009      	beq.n	8005a42 <HAL_I2C_EV_IRQHandler+0xd2>
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	0a5b      	lsrs	r3, r3, #9
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fe13 	bl	8006666 <I2C_Master_ADDR>
 8005a40:	e072      	b.n	8005b28 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	089b      	lsrs	r3, r3, #2
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d03b      	beq.n	8005ac6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a5c:	f000 80f3 	beq.w	8005c46 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	09db      	lsrs	r3, r3, #7
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00f      	beq.n	8005a8c <HAL_I2C_EV_IRQHandler+0x11c>
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	0a9b      	lsrs	r3, r3, #10
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d009      	beq.n	8005a8c <HAL_I2C_EV_IRQHandler+0x11c>
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	089b      	lsrs	r3, r3, #2
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d103      	bne.n	8005a8c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f9f3 	bl	8005e70 <I2C_MasterTransmit_TXE>
 8005a8a:	e04d      	b.n	8005b28 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	089b      	lsrs	r3, r3, #2
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 80d6 	beq.w	8005c46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	0a5b      	lsrs	r3, r3, #9
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 80cf 	beq.w	8005c46 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005aa8:	7bbb      	ldrb	r3, [r7, #14]
 8005aaa:	2b21      	cmp	r3, #33	; 0x21
 8005aac:	d103      	bne.n	8005ab6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fa7a 	bl	8005fa8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ab4:	e0c7      	b.n	8005c46 <HAL_I2C_EV_IRQHandler+0x2d6>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
<<<<<<< HEAD
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	2b40      	cmp	r3, #64	; 0x40
 80059be:	f040 80c4 	bne.w	8005b4a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fae8 	bl	8005f98 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059c8:	e0bf      	b.n	8005b4a <HAL_I2C_EV_IRQHandler+0x2d6>
=======
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
 8005ab8:	2b40      	cmp	r3, #64	; 0x40
 8005aba:	f040 80c4 	bne.w	8005c46 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fae8 	bl	8006094 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ac4:	e0bf      	b.n	8005c46 <HAL_I2C_EV_IRQHandler+0x2d6>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
<<<<<<< HEAD
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059d8:	f000 80b7 	beq.w	8005b4a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	099b      	lsrs	r3, r3, #6
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00f      	beq.n	8005a08 <HAL_I2C_EV_IRQHandler+0x194>
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	0a9b      	lsrs	r3, r3, #10
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d009      	beq.n	8005a08 <HAL_I2C_EV_IRQHandler+0x194>
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	089b      	lsrs	r3, r3, #2
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d103      	bne.n	8005a08 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fb5d 	bl	80060c0 <I2C_MasterReceive_RXNE>
 8005a06:	e011      	b.n	8005a2c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	089b      	lsrs	r3, r3, #2
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 809a 	beq.w	8005b4a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	0a5b      	lsrs	r3, r3, #9
 8005a1a:	f003 0301 	and.w	r3, r3, #1
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 8093 	beq.w	8005b4a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 fc06 	bl	8006236 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a2a:	e08e      	b.n	8005b4a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005a2c:	e08d      	b.n	8005b4a <HAL_I2C_EV_IRQHandler+0x2d6>
=======
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ad4:	f000 80b7 	beq.w	8005c46 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	099b      	lsrs	r3, r3, #6
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00f      	beq.n	8005b04 <HAL_I2C_EV_IRQHandler+0x194>
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	0a9b      	lsrs	r3, r3, #10
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d009      	beq.n	8005b04 <HAL_I2C_EV_IRQHandler+0x194>
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	089b      	lsrs	r3, r3, #2
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d103      	bne.n	8005b04 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fb5d 	bl	80061bc <I2C_MasterReceive_RXNE>
 8005b02:	e011      	b.n	8005b28 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	089b      	lsrs	r3, r3, #2
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 809a 	beq.w	8005c46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	0a5b      	lsrs	r3, r3, #9
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f000 8093 	beq.w	8005c46 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fc06 	bl	8006332 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b26:	e08e      	b.n	8005c46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005b28:	e08d      	b.n	8005c46 <HAL_I2C_EV_IRQHandler+0x2d6>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
<<<<<<< HEAD
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d004      	beq.n	8005a40 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	61fb      	str	r3, [r7, #28]
 8005a3e:	e007      	b.n	8005a50 <HAL_I2C_EV_IRQHandler+0x1dc>
=======
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d004      	beq.n	8005b3c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	61fb      	str	r3, [r7, #28]
 8005b3a:	e007      	b.n	8005b4c <HAL_I2C_EV_IRQHandler+0x1dc>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
<<<<<<< HEAD
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	61fb      	str	r3, [r7, #28]
=======
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	61fb      	str	r3, [r7, #28]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
<<<<<<< HEAD
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	085b      	lsrs	r3, r3, #1
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d012      	beq.n	8005a82 <HAL_I2C_EV_IRQHandler+0x20e>
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	0a5b      	lsrs	r3, r3, #9
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00c      	beq.n	8005a82 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d003      	beq.n	8005a78 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005a78:	69b9      	ldr	r1, [r7, #24]
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 ffc4 	bl	8006a08 <I2C_Slave_ADDR>
 8005a80:	e066      	b.n	8005b50 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	091b      	lsrs	r3, r3, #4
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d009      	beq.n	8005aa2 <HAL_I2C_EV_IRQHandler+0x22e>
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	0a5b      	lsrs	r3, r3, #9
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fffe 	bl	8006a9c <I2C_Slave_STOPF>
 8005aa0:	e056      	b.n	8005b50 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005aa2:	7bbb      	ldrb	r3, [r7, #14]
 8005aa4:	2b21      	cmp	r3, #33	; 0x21
 8005aa6:	d002      	beq.n	8005aae <HAL_I2C_EV_IRQHandler+0x23a>
 8005aa8:	7bbb      	ldrb	r3, [r7, #14]
 8005aaa:	2b29      	cmp	r3, #41	; 0x29
 8005aac:	d125      	bne.n	8005afa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	09db      	lsrs	r3, r3, #7
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00f      	beq.n	8005ada <HAL_I2C_EV_IRQHandler+0x266>
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	0a9b      	lsrs	r3, r3, #10
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d009      	beq.n	8005ada <HAL_I2C_EV_IRQHandler+0x266>
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	089b      	lsrs	r3, r3, #2
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d103      	bne.n	8005ada <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 feda 	bl	800688c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ad8:	e039      	b.n	8005b4e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	089b      	lsrs	r3, r3, #2
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d033      	beq.n	8005b4e <HAL_I2C_EV_IRQHandler+0x2da>
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	0a5b      	lsrs	r3, r3, #9
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d02d      	beq.n	8005b4e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 ff07 	bl	8006906 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005af8:	e029      	b.n	8005b4e <HAL_I2C_EV_IRQHandler+0x2da>
=======
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	085b      	lsrs	r3, r3, #1
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d012      	beq.n	8005b7e <HAL_I2C_EV_IRQHandler+0x20e>
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	0a5b      	lsrs	r3, r3, #9
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00c      	beq.n	8005b7e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005b74:	69b9      	ldr	r1, [r7, #24]
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 ffc4 	bl	8006b04 <I2C_Slave_ADDR>
 8005b7c:	e066      	b.n	8005c4c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	091b      	lsrs	r3, r3, #4
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d009      	beq.n	8005b9e <HAL_I2C_EV_IRQHandler+0x22e>
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	0a5b      	lsrs	r3, r3, #9
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fffe 	bl	8006b98 <I2C_Slave_STOPF>
 8005b9c:	e056      	b.n	8005c4c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005b9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ba0:	2b21      	cmp	r3, #33	; 0x21
 8005ba2:	d002      	beq.n	8005baa <HAL_I2C_EV_IRQHandler+0x23a>
 8005ba4:	7bbb      	ldrb	r3, [r7, #14]
 8005ba6:	2b29      	cmp	r3, #41	; 0x29
 8005ba8:	d125      	bne.n	8005bf6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	09db      	lsrs	r3, r3, #7
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00f      	beq.n	8005bd6 <HAL_I2C_EV_IRQHandler+0x266>
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	0a9b      	lsrs	r3, r3, #10
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d009      	beq.n	8005bd6 <HAL_I2C_EV_IRQHandler+0x266>
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	089b      	lsrs	r3, r3, #2
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d103      	bne.n	8005bd6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 feda 	bl	8006988 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005bd4:	e039      	b.n	8005c4a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	089b      	lsrs	r3, r3, #2
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d033      	beq.n	8005c4a <HAL_I2C_EV_IRQHandler+0x2da>
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	0a5b      	lsrs	r3, r3, #9
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d02d      	beq.n	8005c4a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 ff07 	bl	8006a02 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005bf4:	e029      	b.n	8005c4a <HAL_I2C_EV_IRQHandler+0x2da>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
<<<<<<< HEAD
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	099b      	lsrs	r3, r3, #6
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00f      	beq.n	8005b26 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	0a9b      	lsrs	r3, r3, #10
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d009      	beq.n	8005b26 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	089b      	lsrs	r3, r3, #2
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d103      	bne.n	8005b26 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 ff12 	bl	8006948 <I2C_SlaveReceive_RXNE>
 8005b24:	e014      	b.n	8005b50 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	089b      	lsrs	r3, r3, #2
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00e      	beq.n	8005b50 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	0a5b      	lsrs	r3, r3, #9
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d008      	beq.n	8005b50 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 ff40 	bl	80069c4 <I2C_SlaveReceive_BTF>
 8005b44:	e004      	b.n	8005b50 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005b46:	bf00      	nop
 8005b48:	e002      	b.n	8005b50 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b4a:	bf00      	nop
 8005b4c:	e000      	b.n	8005b50 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b4e:	bf00      	nop
=======
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	099b      	lsrs	r3, r3, #6
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00f      	beq.n	8005c22 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	0a9b      	lsrs	r3, r3, #10
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d009      	beq.n	8005c22 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	089b      	lsrs	r3, r3, #2
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d103      	bne.n	8005c22 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 ff12 	bl	8006a44 <I2C_SlaveReceive_RXNE>
 8005c20:	e014      	b.n	8005c4c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	089b      	lsrs	r3, r3, #2
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00e      	beq.n	8005c4c <HAL_I2C_EV_IRQHandler+0x2dc>
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	0a5b      	lsrs	r3, r3, #9
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d008      	beq.n	8005c4c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 ff40 	bl	8006ac0 <I2C_SlaveReceive_BTF>
 8005c40:	e004      	b.n	8005c4c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005c42:	bf00      	nop
 8005c44:	e002      	b.n	8005c4c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c46:	bf00      	nop
 8005c48:	e000      	b.n	8005c4c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c4a:	bf00      	nop
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      {
        /* Do nothing */
      }
    }
  }
}
<<<<<<< HEAD
 8005b50:	3720      	adds	r7, #32
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <HAL_I2C_ER_IRQHandler>:
=======
 8005c4c:	3720      	adds	r7, #32
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <HAL_I2C_ER_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b08a      	sub	sp, #40	; 0x28
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
=======
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b08a      	sub	sp, #40	; 0x28
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
<<<<<<< HEAD
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b78:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	0a1b      	lsrs	r3, r3, #8
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00e      	beq.n	8005ba4 <HAL_I2C_ER_IRQHandler+0x4e>
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	0a1b      	lsrs	r3, r3, #8
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d008      	beq.n	8005ba4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	f043 0301 	orr.w	r3, r3, #1
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ba2:	615a      	str	r2, [r3, #20]
=======
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c74:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	0a1b      	lsrs	r3, r3, #8
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00e      	beq.n	8005ca0 <HAL_I2C_ER_IRQHandler+0x4e>
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	0a1b      	lsrs	r3, r3, #8
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d008      	beq.n	8005ca0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	f043 0301 	orr.w	r3, r3, #1
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c9e:	615a      	str	r2, [r3, #20]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
<<<<<<< HEAD
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	0a5b      	lsrs	r3, r3, #9
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00e      	beq.n	8005bce <HAL_I2C_ER_IRQHandler+0x78>
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	0a1b      	lsrs	r3, r3, #8
 8005bb4:	f003 0301 	and.w	r3, r3, #1
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d008      	beq.n	8005bce <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	f043 0302 	orr.w	r3, r3, #2
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005bcc:	615a      	str	r2, [r3, #20]
=======
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	0a5b      	lsrs	r3, r3, #9
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00e      	beq.n	8005cca <HAL_I2C_ER_IRQHandler+0x78>
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	0a1b      	lsrs	r3, r3, #8
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d008      	beq.n	8005cca <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	f043 0302 	orr.w	r3, r3, #2
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005cc8:	615a      	str	r2, [r3, #20]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
<<<<<<< HEAD
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	0a9b      	lsrs	r3, r3, #10
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d03f      	beq.n	8005c5a <HAL_I2C_ER_IRQHandler+0x104>
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	0a1b      	lsrs	r3, r3, #8
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d039      	beq.n	8005c5a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005be6:	7efb      	ldrb	r3, [r7, #27]
 8005be8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005c00:	7ebb      	ldrb	r3, [r7, #26]
 8005c02:	2b20      	cmp	r3, #32
 8005c04:	d112      	bne.n	8005c2c <HAL_I2C_ER_IRQHandler+0xd6>
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10f      	bne.n	8005c2c <HAL_I2C_ER_IRQHandler+0xd6>
 8005c0c:	7cfb      	ldrb	r3, [r7, #19]
 8005c0e:	2b21      	cmp	r3, #33	; 0x21
 8005c10:	d008      	beq.n	8005c24 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005c12:	7cfb      	ldrb	r3, [r7, #19]
 8005c14:	2b29      	cmp	r3, #41	; 0x29
 8005c16:	d005      	beq.n	8005c24 <HAL_I2C_ER_IRQHandler+0xce>
 8005c18:	7cfb      	ldrb	r3, [r7, #19]
 8005c1a:	2b28      	cmp	r3, #40	; 0x28
 8005c1c:	d106      	bne.n	8005c2c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2b21      	cmp	r3, #33	; 0x21
 8005c22:	d103      	bne.n	8005c2c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f001 f869 	bl	8006cfc <I2C_Slave_AF>
 8005c2a:	e016      	b.n	8005c5a <HAL_I2C_ER_IRQHandler+0x104>
=======
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	0a9b      	lsrs	r3, r3, #10
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d03f      	beq.n	8005d56 <HAL_I2C_ER_IRQHandler+0x104>
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	0a1b      	lsrs	r3, r3, #8
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d039      	beq.n	8005d56 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005ce2:	7efb      	ldrb	r3, [r7, #27]
 8005ce4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005cfc:	7ebb      	ldrb	r3, [r7, #26]
 8005cfe:	2b20      	cmp	r3, #32
 8005d00:	d112      	bne.n	8005d28 <HAL_I2C_ER_IRQHandler+0xd6>
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10f      	bne.n	8005d28 <HAL_I2C_ER_IRQHandler+0xd6>
 8005d08:	7cfb      	ldrb	r3, [r7, #19]
 8005d0a:	2b21      	cmp	r3, #33	; 0x21
 8005d0c:	d008      	beq.n	8005d20 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005d0e:	7cfb      	ldrb	r3, [r7, #19]
 8005d10:	2b29      	cmp	r3, #41	; 0x29
 8005d12:	d005      	beq.n	8005d20 <HAL_I2C_ER_IRQHandler+0xce>
 8005d14:	7cfb      	ldrb	r3, [r7, #19]
 8005d16:	2b28      	cmp	r3, #40	; 0x28
 8005d18:	d106      	bne.n	8005d28 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b21      	cmp	r3, #33	; 0x21
 8005d1e:	d103      	bne.n	8005d28 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f001 f869 	bl	8006df8 <I2C_Slave_AF>
 8005d26:	e016      	b.n	8005d56 <HAL_I2C_ER_IRQHandler+0x104>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
<<<<<<< HEAD
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c34:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	f043 0304 	orr.w	r3, r3, #4
 8005c3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005c3e:	7efb      	ldrb	r3, [r7, #27]
 8005c40:	2b10      	cmp	r3, #16
 8005c42:	d002      	beq.n	8005c4a <HAL_I2C_ER_IRQHandler+0xf4>
 8005c44:	7efb      	ldrb	r3, [r7, #27]
 8005c46:	2b40      	cmp	r3, #64	; 0x40
 8005c48:	d107      	bne.n	8005c5a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c58:	601a      	str	r2, [r3, #0]
=======
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d30:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	f043 0304 	orr.w	r3, r3, #4
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005d3a:	7efb      	ldrb	r3, [r7, #27]
 8005d3c:	2b10      	cmp	r3, #16
 8005d3e:	d002      	beq.n	8005d46 <HAL_I2C_ER_IRQHandler+0xf4>
 8005d40:	7efb      	ldrb	r3, [r7, #27]
 8005d42:	2b40      	cmp	r3, #64	; 0x40
 8005d44:	d107      	bne.n	8005d56 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d54:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
<<<<<<< HEAD
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	0adb      	lsrs	r3, r3, #11
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00e      	beq.n	8005c84 <HAL_I2C_ER_IRQHandler+0x12e>
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	0a1b      	lsrs	r3, r3, #8
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d008      	beq.n	8005c84 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	f043 0308 	orr.w	r3, r3, #8
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005c82:	615a      	str	r2, [r3, #20]
=======
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	0adb      	lsrs	r3, r3, #11
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00e      	beq.n	8005d80 <HAL_I2C_ER_IRQHandler+0x12e>
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	0a1b      	lsrs	r3, r3, #8
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d008      	beq.n	8005d80 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	f043 0308 	orr.w	r3, r3, #8
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005d7e:	615a      	str	r2, [r3, #20]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
<<<<<<< HEAD
 8005c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d008      	beq.n	8005c9c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	431a      	orrs	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f001 f8a0 	bl	8006ddc <I2C_ITError>
  }
}
 8005c9c:	bf00      	nop
 8005c9e:	3728      	adds	r7, #40	; 0x28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <HAL_I2C_MasterTxCpltCallback>:
=======
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d008      	beq.n	8005d98 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f001 f8a0 	bl	8006ed8 <I2C_ITError>
  }
}
 8005d98:	bf00      	nop
 8005d9a:	3728      	adds	r7, #40	; 0x28
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <HAL_I2C_MasterTxCpltCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
=======
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_I2C_MasterRxCpltCallback>:
=======
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_I2C_MasterRxCpltCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
=======
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <HAL_I2C_SlaveTxCpltCallback>:
=======
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_I2C_SlaveTxCpltCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
=======
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_I2C_SlaveRxCpltCallback>:
=======
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_I2C_SlaveRxCpltCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
=======
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_I2C_AddrCallback>:
=======
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_I2C_AddrCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
<<<<<<< HEAD
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	70fb      	strb	r3, [r7, #3]
 8005d00:	4613      	mov	r3, r2
 8005d02:	803b      	strh	r3, [r7, #0]
=======
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	70fb      	strb	r3, [r7, #3]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	803b      	strh	r3, [r7, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_I2C_ListenCpltCallback>:
=======
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_I2C_ListenCpltCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
=======
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
<<<<<<< HEAD
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_I2C_MemTxCpltCallback>:
=======
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_I2C_MemTxCpltCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
=======
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_I2C_MemRxCpltCallback>:
=======
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_I2C_MemRxCpltCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
=======
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <HAL_I2C_ErrorCallback>:
=======
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_I2C_ErrorCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
=======
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_I2C_AbortCpltCallback>:
=======
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_I2C_AbortCpltCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
=======
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <I2C_MasterTransmit_TXE>:
=======
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <I2C_MasterTransmit_TXE>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d82:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d8a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d150      	bne.n	8005e3c <I2C_MasterTransmit_TXE+0xc8>
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	2b21      	cmp	r3, #33	; 0x21
 8005d9e:	d14d      	bne.n	8005e3c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b08      	cmp	r3, #8
 8005da4:	d01d      	beq.n	8005de2 <I2C_MasterTransmit_TXE+0x6e>
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2b20      	cmp	r3, #32
 8005daa:	d01a      	beq.n	8005de2 <I2C_MasterTransmit_TXE+0x6e>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005db2:	d016      	beq.n	8005de2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005dc2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2211      	movs	r2, #17
 8005dc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e86:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d150      	bne.n	8005f38 <I2C_MasterTransmit_TXE+0xc8>
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	2b21      	cmp	r3, #33	; 0x21
 8005e9a:	d14d      	bne.n	8005f38 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b08      	cmp	r3, #8
 8005ea0:	d01d      	beq.n	8005ede <I2C_MasterTransmit_TXE+0x6e>
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	d01a      	beq.n	8005ede <I2C_MasterTransmit_TXE+0x6e>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005eae:	d016      	beq.n	8005ede <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ebe:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2211      	movs	r2, #17
 8005ec4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
<<<<<<< HEAD
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7ff ff62 	bl	8005ca4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005de0:	e060      	b.n	8005ea4 <I2C_MasterTransmit_TXE+0x130>
=======
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff ff62 	bl	8005da0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005edc:	e060      	b.n	8005fa0 <I2C_MasterTransmit_TXE+0x130>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
<<<<<<< HEAD
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005df0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e00:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b40      	cmp	r3, #64	; 0x40
 8005e1a:	d107      	bne.n	8005e2c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
=======
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005eec:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005efc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b40      	cmp	r3, #64	; 0x40
 8005f16:	d107      	bne.n	8005f28 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
<<<<<<< HEAD
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff ff7d 	bl	8005d24 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e2a:	e03b      	b.n	8005ea4 <I2C_MasterTransmit_TXE+0x130>
=======
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff ff7d 	bl	8005e20 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f26:	e03b      	b.n	8005fa0 <I2C_MasterTransmit_TXE+0x130>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
<<<<<<< HEAD
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
=======
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
<<<<<<< HEAD
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff ff35 	bl	8005ca4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e3a:	e033      	b.n	8005ea4 <I2C_MasterTransmit_TXE+0x130>
=======
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7ff ff35 	bl	8005da0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f36:	e033      	b.n	8005fa0 <I2C_MasterTransmit_TXE+0x130>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
<<<<<<< HEAD
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	2b21      	cmp	r3, #33	; 0x21
 8005e40:	d005      	beq.n	8005e4e <I2C_MasterTransmit_TXE+0xda>
 8005e42:	7bbb      	ldrb	r3, [r7, #14]
 8005e44:	2b40      	cmp	r3, #64	; 0x40
 8005e46:	d12d      	bne.n	8005ea4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
 8005e4a:	2b22      	cmp	r3, #34	; 0x22
 8005e4c:	d12a      	bne.n	8005ea4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d108      	bne.n	8005e6a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e66:	605a      	str	r2, [r3, #4]
=======
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
 8005f3a:	2b21      	cmp	r3, #33	; 0x21
 8005f3c:	d005      	beq.n	8005f4a <I2C_MasterTransmit_TXE+0xda>
 8005f3e:	7bbb      	ldrb	r3, [r7, #14]
 8005f40:	2b40      	cmp	r3, #64	; 0x40
 8005f42:	d12d      	bne.n	8005fa0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
 8005f46:	2b22      	cmp	r3, #34	; 0x22
 8005f48:	d12a      	bne.n	8005fa0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d108      	bne.n	8005f66 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f62:	605a      	str	r2, [r3, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    /* Do nothing */
  }
}
<<<<<<< HEAD
 8005e68:	e01c      	b.n	8005ea4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b40      	cmp	r3, #64	; 0x40
 8005e74:	d103      	bne.n	8005e7e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f88e 	bl	8005f98 <I2C_MemoryTransmit_TXE_BTF>
}
 8005e7c:	e012      	b.n	8005ea4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	781a      	ldrb	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005ea2:	e7ff      	b.n	8005ea4 <I2C_MasterTransmit_TXE+0x130>
 8005ea4:	bf00      	nop
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <I2C_MasterTransmit_BTF>:
=======
 8005f64:	e01c      	b.n	8005fa0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b40      	cmp	r3, #64	; 0x40
 8005f70:	d103      	bne.n	8005f7a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f88e 	bl	8006094 <I2C_MemoryTransmit_TXE_BTF>
}
 8005f78:	e012      	b.n	8005fa0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	781a      	ldrb	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	3b01      	subs	r3, #1
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005f9e:	e7ff      	b.n	8005fa0 <I2C_MasterTransmit_TXE+0x130>
 8005fa0:	bf00      	nop
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <I2C_MasterTransmit_BTF>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b21      	cmp	r3, #33	; 0x21
 8005ec4:	d164      	bne.n	8005f90 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d012      	beq.n	8005ef6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	781a      	ldrb	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
=======
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b21      	cmp	r3, #33	; 0x21
 8005fc0:	d164      	bne.n	800608c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d012      	beq.n	8005ff2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	781a      	ldrb	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	855a      	strh	r2, [r3, #42]	; 0x2a
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    /* Do nothing */
  }
}
<<<<<<< HEAD
 8005ef4:	e04c      	b.n	8005f90 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d01d      	beq.n	8005f38 <I2C_MasterTransmit_BTF+0x8c>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b20      	cmp	r3, #32
 8005f00:	d01a      	beq.n	8005f38 <I2C_MasterTransmit_BTF+0x8c>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f08:	d016      	beq.n	8005f38 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f18:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2211      	movs	r2, #17
 8005f1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7ff feb7 	bl	8005ca4 <HAL_I2C_MasterTxCpltCallback>
}
 8005f36:	e02b      	b.n	8005f90 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f46:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f56:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b40      	cmp	r3, #64	; 0x40
 8005f70:	d107      	bne.n	8005f82 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7ff fed2 	bl	8005d24 <HAL_I2C_MemTxCpltCallback>
}
 8005f80:	e006      	b.n	8005f90 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff fe8a 	bl	8005ca4 <HAL_I2C_MasterTxCpltCallback>
}
 8005f90:	bf00      	nop
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <I2C_MemoryTransmit_TXE_BTF>:
=======
 8005ff0:	e04c      	b.n	800608c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d01d      	beq.n	8006034 <I2C_MasterTransmit_BTF+0x8c>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d01a      	beq.n	8006034 <I2C_MasterTransmit_BTF+0x8c>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006004:	d016      	beq.n	8006034 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006014:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2211      	movs	r2, #17
 800601a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2220      	movs	r2, #32
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7ff feb7 	bl	8005da0 <HAL_I2C_MasterTxCpltCallback>
}
 8006032:	e02b      	b.n	800608c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006042:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006052:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2220      	movs	r2, #32
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b40      	cmp	r3, #64	; 0x40
 800606c:	d107      	bne.n	800607e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7ff fed2 	bl	8005e20 <HAL_I2C_MemTxCpltCallback>
}
 800607c:	e006      	b.n	800608c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff fe8a 	bl	8005da0 <HAL_I2C_MasterTxCpltCallback>
}
 800608c:	bf00      	nop
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <I2C_MemoryTransmit_TXE_BTF>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d11d      	bne.n	8005fec <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d10b      	bne.n	8005fd0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc8:	1c9a      	adds	r2, r3, #2
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	651a      	str	r2, [r3, #80]	; 0x50
=======
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d11d      	bne.n	80060e8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d10b      	bne.n	80060cc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c4:	1c9a      	adds	r2, r3, #2
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    /* Do nothing */
  }
}
<<<<<<< HEAD
 8005fce:	e073      	b.n	80060b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	121b      	asrs	r3, r3, #8
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe4:	1c5a      	adds	r2, r3, #1
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005fea:	e065      	b.n	80060b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d10b      	bne.n	800600c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	651a      	str	r2, [r3, #80]	; 0x50
}
 800600a:	e055      	b.n	80060b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006010:	2b02      	cmp	r3, #2
 8006012:	d151      	bne.n	80060b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	2b22      	cmp	r3, #34	; 0x22
 8006018:	d10d      	bne.n	8006036 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006028:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006034:	e040      	b.n	80060b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603a:	b29b      	uxth	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	d015      	beq.n	800606c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	2b21      	cmp	r3, #33	; 0x21
 8006044:	d112      	bne.n	800606c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	781a      	ldrb	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006060:	b29b      	uxth	r3, r3
 8006062:	3b01      	subs	r3, #1
 8006064:	b29a      	uxth	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800606a:	e025      	b.n	80060b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d120      	bne.n	80060b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006076:	7bfb      	ldrb	r3, [r7, #15]
 8006078:	2b21      	cmp	r3, #33	; 0x21
 800607a:	d11d      	bne.n	80060b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800608a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800609a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7ff fe36 	bl	8005d24 <HAL_I2C_MemTxCpltCallback>
}
 80060b8:	bf00      	nop
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <I2C_MasterReceive_RXNE>:
=======
 80060ca:	e073      	b.n	80061b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	121b      	asrs	r3, r3, #8
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80060e6:	e065      	b.n	80061b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d10b      	bne.n	8006108 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006106:	e055      	b.n	80061b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800610c:	2b02      	cmp	r3, #2
 800610e:	d151      	bne.n	80061b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	2b22      	cmp	r3, #34	; 0x22
 8006114:	d10d      	bne.n	8006132 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006124:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006130:	e040      	b.n	80061b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d015      	beq.n	8006168 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	2b21      	cmp	r3, #33	; 0x21
 8006140:	d112      	bne.n	8006168 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	781a      	ldrb	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006166:	e025      	b.n	80061b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d120      	bne.n	80061b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006172:	7bfb      	ldrb	r3, [r7, #15]
 8006174:	2b21      	cmp	r3, #33	; 0x21
 8006176:	d11d      	bne.n	80061b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006186:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006196:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7ff fe36 	bl	8005e20 <HAL_I2C_MemTxCpltCallback>
}
 80061b4:	bf00      	nop
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <I2C_MasterReceive_RXNE>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b22      	cmp	r3, #34	; 0x22
 80060d2:	f040 80ac 	bne.w	800622e <I2C_MasterReceive_RXNE+0x16e>
=======
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b22      	cmp	r3, #34	; 0x22
 80061ce:	f040 80ac 	bne.w	800632a <I2C_MasterReceive_RXNE+0x16e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
<<<<<<< HEAD
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060da:	b29b      	uxth	r3, r3
 80060dc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d921      	bls.n	8006128 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	691a      	ldr	r2, [r3, #16]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	1c5a      	adds	r2, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006100:	b29b      	uxth	r3, r3
 8006102:	3b01      	subs	r3, #1
 8006104:	b29a      	uxth	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b03      	cmp	r3, #3
 8006112:	f040 808c 	bne.w	800622e <I2C_MasterReceive_RXNE+0x16e>
=======
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2b03      	cmp	r3, #3
 80061de:	d921      	bls.n	8006224 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	691a      	ldr	r2, [r3, #16]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800620a:	b29b      	uxth	r3, r3
 800620c:	2b03      	cmp	r3, #3
 800620e:	f040 808c 	bne.w	800632a <I2C_MasterReceive_RXNE+0x16e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
<<<<<<< HEAD
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006124:	605a      	str	r2, [r3, #4]
=======
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006220:	605a      	str	r2, [r3, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
<<<<<<< HEAD
 8006126:	e082      	b.n	800622e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612c:	2b02      	cmp	r3, #2
 800612e:	d075      	beq.n	800621c <I2C_MasterReceive_RXNE+0x15c>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d002      	beq.n	800613c <I2C_MasterReceive_RXNE+0x7c>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d16f      	bne.n	800621c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f001 f827 	bl	8007190 <I2C_WaitOnSTOPRequestThroughIT>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d142      	bne.n	80061ce <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006156:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006166:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691a      	ldr	r2, [r3, #16]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006184:	b29b      	uxth	r3, r3
 8006186:	3b01      	subs	r3, #1
 8006188:	b29a      	uxth	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2220      	movs	r2, #32
 8006192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b40      	cmp	r3, #64	; 0x40
 80061a0:	d10a      	bne.n	80061b8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7ff fdc1 	bl	8005d38 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80061b6:	e03a      	b.n	800622e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2212      	movs	r2, #18
 80061c4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7ff fd76 	bl	8005cb8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80061cc:	e02f      	b.n	800622e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061dc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	691a      	ldr	r2, [r3, #16]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e8:	b2d2      	uxtb	r2, r2
 80061ea:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff fd99 	bl	8005d4c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800621a:	e008      	b.n	800622e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800622a:	605a      	str	r2, [r3, #4]
}
 800622c:	e7ff      	b.n	800622e <I2C_MasterReceive_RXNE+0x16e>
 800622e:	bf00      	nop
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <I2C_MasterReceive_BTF>:
=======
 8006222:	e082      	b.n	800632a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006228:	2b02      	cmp	r3, #2
 800622a:	d075      	beq.n	8006318 <I2C_MasterReceive_RXNE+0x15c>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d002      	beq.n	8006238 <I2C_MasterReceive_RXNE+0x7c>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d16f      	bne.n	8006318 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 f827 	bl	800728c <I2C_WaitOnSTOPRequestThroughIT>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d142      	bne.n	80062ca <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006252:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006262:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691a      	ldr	r2, [r3, #16]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006280:	b29b      	uxth	r3, r3
 8006282:	3b01      	subs	r3, #1
 8006284:	b29a      	uxth	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2220      	movs	r2, #32
 800628e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b40      	cmp	r3, #64	; 0x40
 800629c:	d10a      	bne.n	80062b4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7ff fdc1 	bl	8005e34 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80062b2:	e03a      	b.n	800632a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2212      	movs	r2, #18
 80062c0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff fd76 	bl	8005db4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80062c8:	e02f      	b.n	800632a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062d8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691a      	ldr	r2, [r3, #16]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	3b01      	subs	r3, #1
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2220      	movs	r2, #32
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f7ff fd99 	bl	8005e48 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006316:	e008      	b.n	800632a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006326:	605a      	str	r2, [r3, #4]
}
 8006328:	e7ff      	b.n	800632a <I2C_MasterReceive_RXNE+0x16e>
 800632a:	bf00      	nop
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <I2C_MasterReceive_BTF>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8006236:	b580      	push	{r7, lr}
 8006238:	b084      	sub	sp, #16
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006242:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006248:	b29b      	uxth	r3, r3
 800624a:	2b04      	cmp	r3, #4
 800624c:	d11b      	bne.n	8006286 <I2C_MasterReceive_BTF+0x50>
=======
 8006332:	b580      	push	{r7, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006344:	b29b      	uxth	r3, r3
 8006346:	2b04      	cmp	r3, #4
 8006348:	d11b      	bne.n	8006382 <I2C_MasterReceive_BTF+0x50>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
<<<<<<< HEAD
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800625c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006268:	b2d2      	uxtb	r2, r2
 800626a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800627a:	b29b      	uxth	r3, r3
 800627c:	3b01      	subs	r3, #1
 800627e:	b29a      	uxth	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	855a      	strh	r2, [r3, #42]	; 0x2a
=======
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006358:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006376:	b29b      	uxth	r3, r3
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	855a      	strh	r2, [r3, #42]	; 0x2a
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
<<<<<<< HEAD
 8006284:	e0bd      	b.n	8006402 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b03      	cmp	r3, #3
 800628e:	d129      	bne.n	80062e4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800629e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d00a      	beq.n	80062bc <I2C_MasterReceive_BTF+0x86>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d007      	beq.n	80062bc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691a      	ldr	r2, [r3, #16]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d8:	b29b      	uxth	r3, r3
 80062da:	3b01      	subs	r3, #1
 80062dc:	b29a      	uxth	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80062e2:	e08e      	b.n	8006402 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d176      	bne.n	80063dc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d002      	beq.n	80062fa <I2C_MasterReceive_BTF+0xc4>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b10      	cmp	r3, #16
 80062f8:	d108      	bne.n	800630c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	e019      	b.n	8006340 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b04      	cmp	r3, #4
 8006310:	d002      	beq.n	8006318 <I2C_MasterReceive_BTF+0xe2>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2b02      	cmp	r3, #2
 8006316:	d108      	bne.n	800632a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	e00a      	b.n	8006340 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2b10      	cmp	r3, #16
 800632e:	d007      	beq.n	8006340 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800633e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	691a      	ldr	r2, [r3, #16]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	b2d2      	uxtb	r2, r2
 800634c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800635c:	b29b      	uxth	r3, r3
 800635e:	3b01      	subs	r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691a      	ldr	r2, [r3, #16]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	b2d2      	uxtb	r2, r2
 8006372:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006378:	1c5a      	adds	r2, r3, #1
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006382:	b29b      	uxth	r3, r3
 8006384:	3b01      	subs	r3, #1
 8006386:	b29a      	uxth	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800639a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2220      	movs	r2, #32
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b40      	cmp	r3, #64	; 0x40
 80063ae:	d10a      	bne.n	80063c6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff fcba 	bl	8005d38 <HAL_I2C_MemRxCpltCallback>
}
 80063c4:	e01d      	b.n	8006402 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2212      	movs	r2, #18
 80063d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7ff fc6f 	bl	8005cb8 <HAL_I2C_MasterRxCpltCallback>
}
 80063da:	e012      	b.n	8006402 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691a      	ldr	r2, [r3, #16]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006402:	bf00      	nop
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <I2C_Master_SB>:
=======
 8006380:	e0bd      	b.n	80064fe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006386:	b29b      	uxth	r3, r3
 8006388:	2b03      	cmp	r3, #3
 800638a:	d129      	bne.n	80063e0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800639a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d00a      	beq.n	80063b8 <I2C_MasterReceive_BTF+0x86>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d007      	beq.n	80063b8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063b6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691a      	ldr	r2, [r3, #16]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80063de:	e08e      	b.n	80064fe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d176      	bne.n	80064d8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d002      	beq.n	80063f6 <I2C_MasterReceive_BTF+0xc4>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b10      	cmp	r3, #16
 80063f4:	d108      	bne.n	8006408 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	e019      	b.n	800643c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2b04      	cmp	r3, #4
 800640c:	d002      	beq.n	8006414 <I2C_MasterReceive_BTF+0xe2>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2b02      	cmp	r3, #2
 8006412:	d108      	bne.n	8006426 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	e00a      	b.n	800643c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2b10      	cmp	r3, #16
 800642a:	d007      	beq.n	800643c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800643a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	691a      	ldr	r2, [r3, #16]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006458:	b29b      	uxth	r3, r3
 800645a:	3b01      	subs	r3, #1
 800645c:	b29a      	uxth	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800647e:	b29b      	uxth	r3, r3
 8006480:	3b01      	subs	r3, #1
 8006482:	b29a      	uxth	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006496:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2220      	movs	r2, #32
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b40      	cmp	r3, #64	; 0x40
 80064aa:	d10a      	bne.n	80064c2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7ff fcba 	bl	8005e34 <HAL_I2C_MemRxCpltCallback>
}
 80064c0:	e01d      	b.n	80064fe <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2212      	movs	r2, #18
 80064ce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff fc6f 	bl	8005db4 <HAL_I2C_MasterRxCpltCallback>
}
 80064d6:	e012      	b.n	80064fe <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691a      	ldr	r2, [r3, #16]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	3b01      	subs	r3, #1
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80064fe:	bf00      	nop
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <I2C_Master_SB>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b40      	cmp	r3, #64	; 0x40
 800641c:	d117      	bne.n	800644e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006422:	2b00      	cmp	r3, #0
 8006424:	d109      	bne.n	800643a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642a:	b2db      	uxtb	r3, r3
 800642c:	461a      	mov	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006436:	611a      	str	r2, [r3, #16]
=======
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006514:	b2db      	uxtb	r3, r3
 8006516:	2b40      	cmp	r3, #64	; 0x40
 8006518:	d117      	bne.n	800654a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800651e:	2b00      	cmp	r3, #0
 8006520:	d109      	bne.n	8006536 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006526:	b2db      	uxtb	r3, r3
 8006528:	461a      	mov	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006532:	611a      	str	r2, [r3, #16]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      {
        /* Do nothing */
      }
    }
  }
}
<<<<<<< HEAD
 8006438:	e067      	b.n	800650a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643e:	b2db      	uxtb	r3, r3
 8006440:	f043 0301 	orr.w	r3, r3, #1
 8006444:	b2da      	uxtb	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	611a      	str	r2, [r3, #16]
}
 800644c:	e05d      	b.n	800650a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006456:	d133      	bne.n	80064c0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b21      	cmp	r3, #33	; 0x21
 8006462:	d109      	bne.n	8006478 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006468:	b2db      	uxtb	r3, r3
 800646a:	461a      	mov	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006474:	611a      	str	r2, [r3, #16]
 8006476:	e008      	b.n	800648a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647c:	b2db      	uxtb	r3, r3
 800647e:	f043 0301 	orr.w	r3, r3, #1
 8006482:	b2da      	uxtb	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648e:	2b00      	cmp	r3, #0
 8006490:	d004      	beq.n	800649c <I2C_Master_SB+0x92>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006498:	2b00      	cmp	r3, #0
 800649a:	d108      	bne.n	80064ae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d032      	beq.n	800650a <I2C_Master_SB+0x100>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d02d      	beq.n	800650a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064bc:	605a      	str	r2, [r3, #4]
}
 80064be:	e024      	b.n	800650a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10e      	bne.n	80064e6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	11db      	asrs	r3, r3, #7
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	f003 0306 	and.w	r3, r3, #6
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	f063 030f 	orn	r3, r3, #15
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	611a      	str	r2, [r3, #16]
}
 80064e4:	e011      	b.n	800650a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d10d      	bne.n	800650a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	11db      	asrs	r3, r3, #7
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	f003 0306 	and.w	r3, r3, #6
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	f063 030e 	orn	r3, r3, #14
 8006502:	b2da      	uxtb	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	611a      	str	r2, [r3, #16]
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <I2C_Master_ADD10>:
=======
 8006534:	e067      	b.n	8006606 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653a:	b2db      	uxtb	r3, r3
 800653c:	f043 0301 	orr.w	r3, r3, #1
 8006540:	b2da      	uxtb	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	611a      	str	r2, [r3, #16]
}
 8006548:	e05d      	b.n	8006606 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006552:	d133      	bne.n	80065bc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b21      	cmp	r3, #33	; 0x21
 800655e:	d109      	bne.n	8006574 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006564:	b2db      	uxtb	r3, r3
 8006566:	461a      	mov	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006570:	611a      	str	r2, [r3, #16]
 8006572:	e008      	b.n	8006586 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006578:	b2db      	uxtb	r3, r3
 800657a:	f043 0301 	orr.w	r3, r3, #1
 800657e:	b2da      	uxtb	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658a:	2b00      	cmp	r3, #0
 800658c:	d004      	beq.n	8006598 <I2C_Master_SB+0x92>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006594:	2b00      	cmp	r3, #0
 8006596:	d108      	bne.n	80065aa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659c:	2b00      	cmp	r3, #0
 800659e:	d032      	beq.n	8006606 <I2C_Master_SB+0x100>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d02d      	beq.n	8006606 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065b8:	605a      	str	r2, [r3, #4]
}
 80065ba:	e024      	b.n	8006606 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10e      	bne.n	80065e2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	11db      	asrs	r3, r3, #7
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	f003 0306 	and.w	r3, r3, #6
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	f063 030f 	orn	r3, r3, #15
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	611a      	str	r2, [r3, #16]
}
 80065e0:	e011      	b.n	8006606 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d10d      	bne.n	8006606 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	11db      	asrs	r3, r3, #7
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	f003 0306 	and.w	r3, r3, #6
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	f063 030e 	orn	r3, r3, #14
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	611a      	str	r2, [r3, #16]
}
 8006606:	bf00      	nop
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <I2C_Master_ADD10>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8006516:	b480      	push	{r7}
 8006518:	b083      	sub	sp, #12
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006522:	b2da      	uxtb	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652e:	2b00      	cmp	r3, #0
 8006530:	d004      	beq.n	800653c <I2C_Master_ADD10+0x26>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006538:	2b00      	cmp	r3, #0
 800653a:	d108      	bne.n	800654e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00c      	beq.n	800655e <I2C_Master_ADD10+0x48>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654a:	2b00      	cmp	r3, #0
 800654c:	d007      	beq.n	800655e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800655c:	605a      	str	r2, [r3, #4]
  }
}
 800655e:	bf00      	nop
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <I2C_Master_ADDR>:
=======
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661e:	b2da      	uxtb	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662a:	2b00      	cmp	r3, #0
 800662c:	d004      	beq.n	8006638 <I2C_Master_ADD10+0x26>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006634:	2b00      	cmp	r3, #0
 8006636:	d108      	bne.n	800664a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00c      	beq.n	800665a <I2C_Master_ADD10+0x48>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006646:	2b00      	cmp	r3, #0
 8006648:	d007      	beq.n	800665a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006658:	605a      	str	r2, [r3, #4]
  }
}
 800665a:	bf00      	nop
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <I2C_Master_ADDR>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 800656a:	b480      	push	{r7}
 800656c:	b091      	sub	sp, #68	; 0x44
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006578:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006586:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b22      	cmp	r3, #34	; 0x22
 8006592:	f040 8169 	bne.w	8006868 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10f      	bne.n	80065be <I2C_Master_ADDR+0x54>
 800659e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80065a2:	2b40      	cmp	r3, #64	; 0x40
 80065a4:	d10b      	bne.n	80065be <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065a6:	2300      	movs	r3, #0
 80065a8:	633b      	str	r3, [r7, #48]	; 0x30
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	633b      	str	r3, [r7, #48]	; 0x30
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	633b      	str	r3, [r7, #48]	; 0x30
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	e160      	b.n	8006880 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d11d      	bne.n	8006602 <I2C_Master_ADDR+0x98>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065ce:	d118      	bne.n	8006602 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065d0:	2300      	movs	r3, #0
 80065d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065f4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065fa:	1c5a      	adds	r2, r3, #1
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	651a      	str	r2, [r3, #80]	; 0x50
 8006600:	e13e      	b.n	8006880 <I2C_Master_ADDR+0x316>
=======
 8006666:	b480      	push	{r7}
 8006668:	b091      	sub	sp, #68	; 0x44
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006674:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b22      	cmp	r3, #34	; 0x22
 800668e:	f040 8169 	bne.w	8006964 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10f      	bne.n	80066ba <I2C_Master_ADDR+0x54>
 800669a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800669e:	2b40      	cmp	r3, #64	; 0x40
 80066a0:	d10b      	bne.n	80066ba <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066a2:	2300      	movs	r3, #0
 80066a4:	633b      	str	r3, [r7, #48]	; 0x30
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	633b      	str	r3, [r7, #48]	; 0x30
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	633b      	str	r3, [r7, #48]	; 0x30
 80066b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b8:	e160      	b.n	800697c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d11d      	bne.n	80066fe <I2C_Master_ADDR+0x98>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80066ca:	d118      	bne.n	80066fe <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066cc:	2300      	movs	r3, #0
 80066ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066f0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	651a      	str	r2, [r3, #80]	; 0x50
 80066fc:	e13e      	b.n	800697c <I2C_Master_ADDR+0x316>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
    else
    {
      if (hi2c->XferCount == 0U)
<<<<<<< HEAD
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006606:	b29b      	uxth	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d113      	bne.n	8006634 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800660c:	2300      	movs	r3, #0
 800660e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	62bb      	str	r3, [r7, #40]	; 0x28
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	e115      	b.n	8006860 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b01      	cmp	r3, #1
 800663c:	f040 808a 	bne.w	8006754 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006642:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006646:	d137      	bne.n	80066b8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006656:	601a      	str	r2, [r3, #0]
=======
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006702:	b29b      	uxth	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d113      	bne.n	8006730 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006708:	2300      	movs	r3, #0
 800670a:	62bb      	str	r3, [r7, #40]	; 0x28
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	62bb      	str	r3, [r7, #40]	; 0x28
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	62bb      	str	r3, [r7, #40]	; 0x28
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	e115      	b.n	800695c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006734:	b29b      	uxth	r3, r3
 8006736:	2b01      	cmp	r3, #1
 8006738:	f040 808a 	bne.w	8006850 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800673c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006742:	d137      	bne.n	80067b4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006752:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800675e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006762:	d113      	bne.n	800678c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006772:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006666:	d113      	bne.n	8006690 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006676:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8006678:	2300      	movs	r3, #0
 800667a:	627b      	str	r3, [r7, #36]	; 0x24
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	627b      	str	r3, [r7, #36]	; 0x24
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	e0e7      	b.n	8006860 <I2C_Master_ADDR+0x2f6>
=======
 8006774:	2300      	movs	r3, #0
 8006776:	627b      	str	r3, [r7, #36]	; 0x24
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	627b      	str	r3, [r7, #36]	; 0x24
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	e0e7      	b.n	800695c <I2C_Master_ADDR+0x2f6>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8006690:	2300      	movs	r3, #0
 8006692:	623b      	str	r3, [r7, #32]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	623b      	str	r3, [r7, #32]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	623b      	str	r3, [r7, #32]
 80066a4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	e0d3      	b.n	8006860 <I2C_Master_ADDR+0x2f6>
=======
 800678c:	2300      	movs	r3, #0
 800678e:	623b      	str	r3, [r7, #32]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	623b      	str	r3, [r7, #32]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	623b      	str	r3, [r7, #32]
 80067a0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	e0d3      	b.n	800695c <I2C_Master_ADDR+0x2f6>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
<<<<<<< HEAD
 80066b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ba:	2b08      	cmp	r3, #8
 80066bc:	d02e      	beq.n	800671c <I2C_Master_ADDR+0x1b2>
 80066be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c0:	2b20      	cmp	r3, #32
 80066c2:	d02b      	beq.n	800671c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80066c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c6:	2b12      	cmp	r3, #18
 80066c8:	d102      	bne.n	80066d0 <I2C_Master_ADDR+0x166>
 80066ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d125      	bne.n	800671c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80066d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d00e      	beq.n	80066f4 <I2C_Master_ADDR+0x18a>
 80066d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d00b      	beq.n	80066f4 <I2C_Master_ADDR+0x18a>
 80066dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066de:	2b10      	cmp	r3, #16
 80066e0:	d008      	beq.n	80066f4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	e007      	b.n	8006704 <I2C_Master_ADDR+0x19a>
=======
 80067b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b6:	2b08      	cmp	r3, #8
 80067b8:	d02e      	beq.n	8006818 <I2C_Master_ADDR+0x1b2>
 80067ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067bc:	2b20      	cmp	r3, #32
 80067be:	d02b      	beq.n	8006818 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80067c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c2:	2b12      	cmp	r3, #18
 80067c4:	d102      	bne.n	80067cc <I2C_Master_ADDR+0x166>
 80067c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d125      	bne.n	8006818 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80067cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	d00e      	beq.n	80067f0 <I2C_Master_ADDR+0x18a>
 80067d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d00b      	beq.n	80067f0 <I2C_Master_ADDR+0x18a>
 80067d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067da:	2b10      	cmp	r3, #16
 80067dc:	d008      	beq.n	80067f0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	e007      	b.n	8006800 <I2C_Master_ADDR+0x19a>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006702:	601a      	str	r2, [r3, #0]
=======
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067fe:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 8006704:	2300      	movs	r3, #0
 8006706:	61fb      	str	r3, [r7, #28]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	61fb      	str	r3, [r7, #28]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	61fb      	str	r3, [r7, #28]
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	e0a1      	b.n	8006860 <I2C_Master_ADDR+0x2f6>
=======
 8006800:	2300      	movs	r3, #0
 8006802:	61fb      	str	r3, [r7, #28]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	61fb      	str	r3, [r7, #28]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	61fb      	str	r3, [r7, #28]
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	e0a1      	b.n	800695c <I2C_Master_ADDR+0x2f6>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800672a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800672c:	2300      	movs	r3, #0
 800672e:	61bb      	str	r3, [r7, #24]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	61bb      	str	r3, [r7, #24]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	61bb      	str	r3, [r7, #24]
 8006740:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006750:	601a      	str	r2, [r3, #0]
 8006752:	e085      	b.n	8006860 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006758:	b29b      	uxth	r3, r3
 800675a:	2b02      	cmp	r3, #2
 800675c:	d14d      	bne.n	80067fa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800675e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006760:	2b04      	cmp	r3, #4
 8006762:	d016      	beq.n	8006792 <I2C_Master_ADDR+0x228>
 8006764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006766:	2b02      	cmp	r3, #2
 8006768:	d013      	beq.n	8006792 <I2C_Master_ADDR+0x228>
 800676a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676c:	2b10      	cmp	r3, #16
 800676e:	d010      	beq.n	8006792 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800677e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	e007      	b.n	80067a2 <I2C_Master_ADDR+0x238>
=======
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006826:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006828:	2300      	movs	r3, #0
 800682a:	61bb      	str	r3, [r7, #24]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	61bb      	str	r3, [r7, #24]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	61bb      	str	r3, [r7, #24]
 800683c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	e085      	b.n	800695c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006854:	b29b      	uxth	r3, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d14d      	bne.n	80068f6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800685a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685c:	2b04      	cmp	r3, #4
 800685e:	d016      	beq.n	800688e <I2C_Master_ADDR+0x228>
 8006860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006862:	2b02      	cmp	r3, #2
 8006864:	d013      	beq.n	800688e <I2C_Master_ADDR+0x228>
 8006866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006868:	2b10      	cmp	r3, #16
 800686a:	d010      	beq.n	800688e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800687a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	e007      	b.n	800689e <I2C_Master_ADDR+0x238>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067a0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067b0:	d117      	bne.n	80067e2 <I2C_Master_ADDR+0x278>
 80067b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80067b8:	d00b      	beq.n	80067d2 <I2C_Master_ADDR+0x268>
 80067ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d008      	beq.n	80067d2 <I2C_Master_ADDR+0x268>
 80067c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c2:	2b08      	cmp	r3, #8
 80067c4:	d005      	beq.n	80067d2 <I2C_Master_ADDR+0x268>
 80067c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c8:	2b10      	cmp	r3, #16
 80067ca:	d002      	beq.n	80067d2 <I2C_Master_ADDR+0x268>
 80067cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ce:	2b20      	cmp	r3, #32
 80067d0:	d107      	bne.n	80067e2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067e0:	605a      	str	r2, [r3, #4]
=======
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800689c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ac:	d117      	bne.n	80068de <I2C_Master_ADDR+0x278>
 80068ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068b4:	d00b      	beq.n	80068ce <I2C_Master_ADDR+0x268>
 80068b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d008      	beq.n	80068ce <I2C_Master_ADDR+0x268>
 80068bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068be:	2b08      	cmp	r3, #8
 80068c0:	d005      	beq.n	80068ce <I2C_Master_ADDR+0x268>
 80068c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c4:	2b10      	cmp	r3, #16
 80068c6:	d002      	beq.n	80068ce <I2C_Master_ADDR+0x268>
 80068c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ca:	2b20      	cmp	r3, #32
 80068cc:	d107      	bne.n	80068de <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068dc:	605a      	str	r2, [r3, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 80067e2:	2300      	movs	r3, #0
 80067e4:	617b      	str	r3, [r7, #20]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	e032      	b.n	8006860 <I2C_Master_ADDR+0x2f6>
=======
 80068de:	2300      	movs	r3, #0
 80068e0:	617b      	str	r3, [r7, #20]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	617b      	str	r3, [r7, #20]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	617b      	str	r3, [r7, #20]
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	e032      	b.n	800695c <I2C_Master_ADDR+0x2f6>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006808:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006818:	d117      	bne.n	800684a <I2C_Master_ADDR+0x2e0>
 800681a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006820:	d00b      	beq.n	800683a <I2C_Master_ADDR+0x2d0>
 8006822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006824:	2b01      	cmp	r3, #1
 8006826:	d008      	beq.n	800683a <I2C_Master_ADDR+0x2d0>
 8006828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682a:	2b08      	cmp	r3, #8
 800682c:	d005      	beq.n	800683a <I2C_Master_ADDR+0x2d0>
 800682e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006830:	2b10      	cmp	r3, #16
 8006832:	d002      	beq.n	800683a <I2C_Master_ADDR+0x2d0>
 8006834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006836:	2b20      	cmp	r3, #32
 8006838:	d107      	bne.n	800684a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006848:	605a      	str	r2, [r3, #4]
=======
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006904:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006914:	d117      	bne.n	8006946 <I2C_Master_ADDR+0x2e0>
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800691c:	d00b      	beq.n	8006936 <I2C_Master_ADDR+0x2d0>
 800691e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006920:	2b01      	cmp	r3, #1
 8006922:	d008      	beq.n	8006936 <I2C_Master_ADDR+0x2d0>
 8006924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006926:	2b08      	cmp	r3, #8
 8006928:	d005      	beq.n	8006936 <I2C_Master_ADDR+0x2d0>
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	2b10      	cmp	r3, #16
 800692e:	d002      	beq.n	8006936 <I2C_Master_ADDR+0x2d0>
 8006930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006932:	2b20      	cmp	r3, #32
 8006934:	d107      	bne.n	8006946 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006944:	605a      	str	r2, [r3, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
<<<<<<< HEAD
 800684a:	2300      	movs	r3, #0
 800684c:	613b      	str	r3, [r7, #16]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	613b      	str	r3, [r7, #16]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	613b      	str	r3, [r7, #16]
 800685e:	693b      	ldr	r3, [r7, #16]
=======
 8006946:	2300      	movs	r3, #0
 8006948:	613b      	str	r3, [r7, #16]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	613b      	str	r3, [r7, #16]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	613b      	str	r3, [r7, #16]
 800695a:	693b      	ldr	r3, [r7, #16]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
<<<<<<< HEAD
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	651a      	str	r2, [r3, #80]	; 0x50
=======
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
<<<<<<< HEAD
 8006866:	e00b      	b.n	8006880 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006868:	2300      	movs	r3, #0
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	68fb      	ldr	r3, [r7, #12]
}
 800687e:	e7ff      	b.n	8006880 <I2C_Master_ADDR+0x316>
 8006880:	bf00      	nop
 8006882:	3744      	adds	r7, #68	; 0x44
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <I2C_SlaveTransmit_TXE>:
=======
 8006962:	e00b      	b.n	800697c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006964:	2300      	movs	r3, #0
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	68fb      	ldr	r3, [r7, #12]
}
 800697a:	e7ff      	b.n	800697c <I2C_Master_ADDR+0x316>
 800697c:	bf00      	nop
 800697e:	3744      	adds	r7, #68	; 0x44
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <I2C_SlaveTransmit_TXE>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800689a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d02b      	beq.n	80068fe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068aa:	781a      	ldrb	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	3b01      	subs	r3, #1
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d114      	bne.n	80068fe <I2C_SlaveTransmit_TXE+0x72>
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
 80068d6:	2b29      	cmp	r3, #41	; 0x29
 80068d8:	d111      	bne.n	80068fe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068e8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2221      	movs	r2, #33	; 0x21
 80068ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2228      	movs	r2, #40	; 0x28
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006996:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699c:	b29b      	uxth	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d02b      	beq.n	80069fa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	781a      	ldrb	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	1c5a      	adds	r2, r3, #1
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069bc:	b29b      	uxth	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d114      	bne.n	80069fa <I2C_SlaveTransmit_TXE+0x72>
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
 80069d2:	2b29      	cmp	r3, #41	; 0x29
 80069d4:	d111      	bne.n	80069fa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069e4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2221      	movs	r2, #33	; 0x21
 80069ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2228      	movs	r2, #40	; 0x28
 80069f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
<<<<<<< HEAD
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7ff f9e7 	bl	8005ccc <HAL_I2C_SlaveTxCpltCallback>
=======
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7ff f9e7 	bl	8005dc8 <HAL_I2C_SlaveTxCpltCallback>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 80068fe:	bf00      	nop
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <I2C_SlaveTransmit_BTF>:
=======
 80069fa:	bf00      	nop
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <I2C_SlaveTransmit_BTF>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006912:	b29b      	uxth	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d011      	beq.n	800693c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	781a      	ldrb	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006932:	b29b      	uxth	r3, r3
 8006934:	3b01      	subs	r3, #1
 8006936:	b29a      	uxth	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <I2C_SlaveReceive_RXNE>:
=======
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d011      	beq.n	8006a38 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a18:	781a      	ldrb	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <I2C_SlaveReceive_RXNE>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006956:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800695c:	b29b      	uxth	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d02c      	beq.n	80069bc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	691a      	ldr	r2, [r3, #16]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	b2d2      	uxtb	r2, r2
 800696e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	1c5a      	adds	r2, r3, #1
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800697e:	b29b      	uxth	r3, r3
 8006980:	3b01      	subs	r3, #1
 8006982:	b29a      	uxth	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d114      	bne.n	80069bc <I2C_SlaveReceive_RXNE+0x74>
 8006992:	7bfb      	ldrb	r3, [r7, #15]
 8006994:	2b2a      	cmp	r3, #42	; 0x2a
 8006996:	d111      	bne.n	80069bc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069a6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2222      	movs	r2, #34	; 0x22
 80069ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2228      	movs	r2, #40	; 0x28
 80069b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a52:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d02c      	beq.n	8006ab8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	691a      	ldr	r2, [r3, #16]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a68:	b2d2      	uxtb	r2, r2
 8006a6a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d114      	bne.n	8006ab8 <I2C_SlaveReceive_RXNE+0x74>
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	2b2a      	cmp	r3, #42	; 0x2a
 8006a92:	d111      	bne.n	8006ab8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aa2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2222      	movs	r2, #34	; 0x22
 8006aa8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2228      	movs	r2, #40	; 0x28
 8006aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
<<<<<<< HEAD
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff f992 	bl	8005ce0 <HAL_I2C_SlaveRxCpltCallback>
=======
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7ff f992 	bl	8005ddc <HAL_I2C_SlaveRxCpltCallback>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 80069bc:	bf00      	nop
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <I2C_SlaveReceive_BTF>:
=======
 8006ab8:	bf00      	nop
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <I2C_SlaveReceive_BTF>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d012      	beq.n	80069fc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	691a      	ldr	r2, [r3, #16]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e0:	b2d2      	uxtb	r2, r2
 80069e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	3b01      	subs	r3, #1
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <I2C_Slave_ADDR>:
=======
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d012      	beq.n	8006af8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	691a      	ldr	r2, [r3, #16]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006adc:	b2d2      	uxtb	r2, r2
 8006ade:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	3b01      	subs	r3, #1
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <I2C_Slave_ADDR>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
<<<<<<< HEAD
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006a12:	2300      	movs	r3, #0
 8006a14:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006a22:	2b28      	cmp	r3, #40	; 0x28
 8006a24:	d127      	bne.n	8006a76 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a34:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	089b      	lsrs	r3, r3, #2
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006a42:	2301      	movs	r3, #1
 8006a44:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	09db      	lsrs	r3, r3, #7
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d103      	bne.n	8006a5a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	81bb      	strh	r3, [r7, #12]
 8006a58:	e002      	b.n	8006a60 <I2C_Slave_ADDR+0x58>
=======
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b1e:	2b28      	cmp	r3, #40	; 0x28
 8006b20:	d127      	bne.n	8006b72 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b30:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	089b      	lsrs	r3, r3, #2
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	09db      	lsrs	r3, r3, #7
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d103      	bne.n	8006b56 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	81bb      	strh	r3, [r7, #12]
 8006b54:	e002      	b.n	8006b5c <I2C_Slave_ADDR+0x58>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
<<<<<<< HEAD
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	81bb      	strh	r3, [r7, #12]
=======
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	81bb      	strh	r3, [r7, #12]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
<<<<<<< HEAD
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
<<<<<<< HEAD
 8006a68:	89ba      	ldrh	r2, [r7, #12]
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7ff f940 	bl	8005cf4 <HAL_I2C_AddrCallback>
=======
 8006b64:	89ba      	ldrh	r2, [r7, #12]
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7ff f940 	bl	8005df0 <HAL_I2C_AddrCallback>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
<<<<<<< HEAD
 8006a74:	e00e      	b.n	8006a94 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a76:	2300      	movs	r3, #0
 8006a78:	60bb      	str	r3, [r7, #8]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	60bb      	str	r3, [r7, #8]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	60bb      	str	r3, [r7, #8]
 8006a8a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006a94:	bf00      	nop
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <I2C_Slave_STOPF>:
=======
 8006b70:	e00e      	b.n	8006b90 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b72:	2300      	movs	r3, #0
 8006b74:	60bb      	str	r3, [r7, #8]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	60bb      	str	r3, [r7, #8]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	60bb      	str	r3, [r7, #8]
 8006b86:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006b90:	bf00      	nop
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <I2C_Slave_STOPF>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aaa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006aba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006abc:	2300      	movs	r3, #0
 8006abe:	60bb      	str	r3, [r7, #8]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	60bb      	str	r3, [r7, #8]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0201 	orr.w	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ae8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006af4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006af8:	d172      	bne.n	8006be0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
 8006afc:	2b22      	cmp	r3, #34	; 0x22
 8006afe:	d002      	beq.n	8006b06 <I2C_Slave_STOPF+0x6a>
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	2b2a      	cmp	r3, #42	; 0x2a
 8006b04:	d135      	bne.n	8006b72 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d005      	beq.n	8006b2a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	f043 0204 	orr.w	r2, r3, #4
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bb6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006bb8:	2300      	movs	r3, #0
 8006bba:	60bb      	str	r3, [r7, #8]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	60bb      	str	r3, [r7, #8]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0201 	orr.w	r2, r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006be4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bf4:	d172      	bne.n	8006cdc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	2b22      	cmp	r3, #34	; 0x22
 8006bfa:	d002      	beq.n	8006c02 <I2C_Slave_STOPF+0x6a>
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
 8006bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8006c00:	d135      	bne.n	8006c6e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d005      	beq.n	8006c26 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	f043 0204 	orr.w	r2, r3, #4
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
<<<<<<< HEAD
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fe f8b6 	bl	8004cb0 <HAL_DMA_GetState>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d049      	beq.n	8006bde <I2C_Slave_STOPF+0x142>
=======
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fe f8b6 	bl	8004dac <HAL_DMA_GetState>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d049      	beq.n	8006cda <I2C_Slave_STOPF+0x142>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
<<<<<<< HEAD
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4e:	4a69      	ldr	r2, [pc, #420]	; (8006cf4 <I2C_Slave_STOPF+0x258>)
 8006b50:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fd fefe 	bl	8004958 <HAL_DMA_Abort_IT>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d03d      	beq.n	8006bde <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b6c:	4610      	mov	r0, r2
 8006b6e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b70:	e035      	b.n	8006bde <I2C_Slave_STOPF+0x142>
=======
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4a:	4a69      	ldr	r2, [pc, #420]	; (8006df0 <I2C_Slave_STOPF+0x258>)
 8006c4c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fd fefe 	bl	8004a54 <HAL_DMA_Abort_IT>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d03d      	beq.n	8006cda <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c68:	4610      	mov	r0, r2
 8006c6a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c6c:	e035      	b.n	8006cda <I2C_Slave_STOPF+0x142>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
<<<<<<< HEAD
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d005      	beq.n	8006b96 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	f043 0204 	orr.w	r2, r3, #4
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d005      	beq.n	8006c92 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	f043 0204 	orr.w	r2, r3, #4
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
<<<<<<< HEAD
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ba4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fe f880 	bl	8004cb0 <HAL_DMA_GetState>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d014      	beq.n	8006be0 <I2C_Slave_STOPF+0x144>
=======
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ca0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fe f880 	bl	8004dac <HAL_DMA_GetState>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d014      	beq.n	8006cdc <I2C_Slave_STOPF+0x144>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
<<<<<<< HEAD
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bba:	4a4e      	ldr	r2, [pc, #312]	; (8006cf4 <I2C_Slave_STOPF+0x258>)
 8006bbc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fd fec8 	bl	8004958 <HAL_DMA_Abort_IT>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d008      	beq.n	8006be0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006bd8:	4610      	mov	r0, r2
 8006bda:	4798      	blx	r3
 8006bdc:	e000      	b.n	8006be0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006bde:	bf00      	nop
=======
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cb6:	4a4e      	ldr	r2, [pc, #312]	; (8006df0 <I2C_Slave_STOPF+0x258>)
 8006cb8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fd fec8 	bl	8004a54 <HAL_DMA_Abort_IT>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d008      	beq.n	8006cdc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	4798      	blx	r3
 8006cd8:	e000      	b.n	8006cdc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006cda:	bf00      	nop
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
<<<<<<< HEAD
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d03e      	beq.n	8006c68 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	f003 0304 	and.w	r3, r3, #4
 8006bf4:	2b04      	cmp	r3, #4
 8006bf6:	d112      	bne.n	8006c1e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	691a      	ldr	r2, [r3, #16]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	b2d2      	uxtb	r2, r2
 8006c04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	1c5a      	adds	r2, r3, #1
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	3b01      	subs	r3, #1
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
=======
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d03e      	beq.n	8006d64 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	f003 0304 	and.w	r3, r3, #4
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d112      	bne.n	8006d1a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	691a      	ldr	r2, [r3, #16]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	b2d2      	uxtb	r2, r2
 8006d00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	3b01      	subs	r3, #1
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	855a      	strh	r2, [r3, #42]	; 0x2a
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
<<<<<<< HEAD
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c28:	2b40      	cmp	r3, #64	; 0x40
 8006c2a:	d112      	bne.n	8006c52 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	691a      	ldr	r2, [r3, #16]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c60:	f043 0204 	orr.w	r2, r3, #4
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d24:	2b40      	cmp	r3, #64	; 0x40
 8006d26:	d112      	bne.n	8006d4e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	691a      	ldr	r2, [r3, #16]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d32:	b2d2      	uxtb	r2, r2
 8006d34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3a:	1c5a      	adds	r2, r3, #1
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	3b01      	subs	r3, #1
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d005      	beq.n	8006d64 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5c:	f043 0204 	orr.w	r2, r3, #4
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
<<<<<<< HEAD
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f8b3 	bl	8006ddc <I2C_ITError>
=======
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f8b3 	bl	8006ed8 <I2C_ITError>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
<<<<<<< HEAD
 8006c76:	e039      	b.n	8006cec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c7c:	d109      	bne.n	8006c92 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2228      	movs	r2, #40	; 0x28
 8006c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7ff f827 	bl	8005ce0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b28      	cmp	r3, #40	; 0x28
 8006c9c:	d111      	bne.n	8006cc2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a15      	ldr	r2, [pc, #84]	; (8006cf8 <I2C_Slave_STOPF+0x25c>)
 8006ca2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff f828 	bl	8005d10 <HAL_I2C_ListenCpltCallback>
}
 8006cc0:	e014      	b.n	8006cec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc6:	2b22      	cmp	r3, #34	; 0x22
 8006cc8:	d002      	beq.n	8006cd0 <I2C_Slave_STOPF+0x234>
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
 8006ccc:	2b22      	cmp	r3, #34	; 0x22
 8006cce:	d10d      	bne.n	8006cec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7fe fffa 	bl	8005ce0 <HAL_I2C_SlaveRxCpltCallback>
}
 8006cec:	bf00      	nop
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	08007041 	.word	0x08007041
 8006cf8:	ffff0000 	.word	0xffff0000

08006cfc <I2C_Slave_AF>:
=======
 8006d72:	e039      	b.n	8006de8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	2b2a      	cmp	r3, #42	; 0x2a
 8006d78:	d109      	bne.n	8006d8e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2228      	movs	r2, #40	; 0x28
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff f827 	bl	8005ddc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b28      	cmp	r3, #40	; 0x28
 8006d98:	d111      	bne.n	8006dbe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a15      	ldr	r2, [pc, #84]	; (8006df4 <I2C_Slave_STOPF+0x25c>)
 8006d9e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7ff f828 	bl	8005e0c <HAL_I2C_ListenCpltCallback>
}
 8006dbc:	e014      	b.n	8006de8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc2:	2b22      	cmp	r3, #34	; 0x22
 8006dc4:	d002      	beq.n	8006dcc <I2C_Slave_STOPF+0x234>
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
 8006dc8:	2b22      	cmp	r3, #34	; 0x22
 8006dca:	d10d      	bne.n	8006de8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fe fffa 	bl	8005ddc <HAL_I2C_SlaveRxCpltCallback>
}
 8006de8:	bf00      	nop
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	0800713d 	.word	0x0800713d
 8006df4:	ffff0000 	.word	0xffff0000

08006df8 <I2C_Slave_AF>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d10:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d002      	beq.n	8006d1e <I2C_Slave_AF+0x22>
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2b20      	cmp	r3, #32
 8006d1c:	d129      	bne.n	8006d72 <I2C_Slave_AF+0x76>
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	2b28      	cmp	r3, #40	; 0x28
 8006d22:	d126      	bne.n	8006d72 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a2c      	ldr	r2, [pc, #176]	; (8006dd8 <I2C_Slave_AF+0xdc>)
 8006d28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d38:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d42:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d52:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
=======
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e06:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2b08      	cmp	r3, #8
 8006e12:	d002      	beq.n	8006e1a <I2C_Slave_AF+0x22>
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2b20      	cmp	r3, #32
 8006e18:	d129      	bne.n	8006e6e <I2C_Slave_AF+0x76>
 8006e1a:	7bfb      	ldrb	r3, [r7, #15]
 8006e1c:	2b28      	cmp	r3, #40	; 0x28
 8006e1e:	d126      	bne.n	8006e6e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a2c      	ldr	r2, [pc, #176]	; (8006ed4 <I2C_Slave_AF+0xdc>)
 8006e24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e34:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e3e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e4e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
<<<<<<< HEAD
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fe ffd0 	bl	8005d10 <HAL_I2C_ListenCpltCallback>
=======
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7fe ffd0 	bl	8005e0c <HAL_I2C_ListenCpltCallback>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
<<<<<<< HEAD
 8006d70:	e02e      	b.n	8006dd0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	2b21      	cmp	r3, #33	; 0x21
 8006d76:	d126      	bne.n	8006dc6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a17      	ldr	r2, [pc, #92]	; (8006dd8 <I2C_Slave_AF+0xdc>)
 8006d7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2221      	movs	r2, #33	; 0x21
 8006d82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006da2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006dac:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dbc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7fe ff84 	bl	8005ccc <HAL_I2C_SlaveTxCpltCallback>
}
 8006dc4:	e004      	b.n	8006dd0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006dce:	615a      	str	r2, [r3, #20]
}
 8006dd0:	bf00      	nop
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	ffff0000 	.word	0xffff0000

08006ddc <I2C_ITError>:
=======
 8006e6c:	e02e      	b.n	8006ecc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	2b21      	cmp	r3, #33	; 0x21
 8006e72:	d126      	bne.n	8006ec2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a17      	ldr	r2, [pc, #92]	; (8006ed4 <I2C_Slave_AF+0xdc>)
 8006e78:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2221      	movs	r2, #33	; 0x21
 8006e7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e9e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ea8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eb8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7fe ff84 	bl	8005dc8 <HAL_I2C_SlaveTxCpltCallback>
}
 8006ec0:	e004      	b.n	8006ecc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006eca:	615a      	str	r2, [r3, #20]
}
 8006ecc:	bf00      	nop
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	ffff0000 	.word	0xffff0000

08006ed8 <I2C_ITError>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006df2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006df4:	7bbb      	ldrb	r3, [r7, #14]
 8006df6:	2b10      	cmp	r3, #16
 8006df8:	d002      	beq.n	8006e00 <I2C_ITError+0x24>
 8006dfa:	7bbb      	ldrb	r3, [r7, #14]
 8006dfc:	2b40      	cmp	r3, #64	; 0x40
 8006dfe:	d10a      	bne.n	8006e16 <I2C_ITError+0x3a>
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	2b22      	cmp	r3, #34	; 0x22
 8006e04:	d107      	bne.n	8006e16 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e14:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e16:	7bfb      	ldrb	r3, [r7, #15]
 8006e18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006e1c:	2b28      	cmp	r3, #40	; 0x28
 8006e1e:	d107      	bne.n	8006e30 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2228      	movs	r2, #40	; 0x28
 8006e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e2e:	e015      	b.n	8006e5c <I2C_ITError+0x80>
=======
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ee6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006ef0:	7bbb      	ldrb	r3, [r7, #14]
 8006ef2:	2b10      	cmp	r3, #16
 8006ef4:	d002      	beq.n	8006efc <I2C_ITError+0x24>
 8006ef6:	7bbb      	ldrb	r3, [r7, #14]
 8006ef8:	2b40      	cmp	r3, #64	; 0x40
 8006efa:	d10a      	bne.n	8006f12 <I2C_ITError+0x3a>
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	2b22      	cmp	r3, #34	; 0x22
 8006f00:	d107      	bne.n	8006f12 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f10:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
 8006f14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f18:	2b28      	cmp	r3, #40	; 0x28
 8006f1a:	d107      	bne.n	8006f2c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2228      	movs	r2, #40	; 0x28
 8006f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f2a:	e015      	b.n	8006f58 <I2C_ITError+0x80>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
<<<<<<< HEAD
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e3e:	d00a      	beq.n	8006e56 <I2C_ITError+0x7a>
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
 8006e42:	2b60      	cmp	r3, #96	; 0x60
 8006e44:	d007      	beq.n	8006e56 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f3a:	d00a      	beq.n	8006f52 <I2C_ITError+0x7a>
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	2b60      	cmp	r3, #96	; 0x60
 8006f40:	d007      	beq.n	8006f52 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2220      	movs	r2, #32
 8006f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
<<<<<<< HEAD
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e6a:	d162      	bne.n	8006f32 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e7a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d020      	beq.n	8006ecc <I2C_ITError+0xf0>
=======
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f66:	d162      	bne.n	800702e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f76:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d020      	beq.n	8006fc8 <I2C_ITError+0xf0>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
<<<<<<< HEAD
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8e:	4a6a      	ldr	r2, [pc, #424]	; (8007038 <I2C_ITError+0x25c>)
 8006e90:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fd fd5e 	bl	8004958 <HAL_DMA_Abort_IT>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 8089 	beq.w	8006fb6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f022 0201 	bic.w	r2, r2, #1
 8006eb2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	4798      	blx	r3
 8006eca:	e074      	b.n	8006fb6 <I2C_ITError+0x1da>
=======
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f8a:	4a6a      	ldr	r2, [pc, #424]	; (8007134 <I2C_ITError+0x25c>)
 8006f8c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fd fd5e 	bl	8004a54 <HAL_DMA_Abort_IT>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 8089 	beq.w	80070b2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0201 	bic.w	r2, r2, #1
 8006fae:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	4798      	blx	r3
 8006fc6:	e074      	b.n	80070b2 <I2C_ITError+0x1da>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
<<<<<<< HEAD
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed0:	4a59      	ldr	r2, [pc, #356]	; (8007038 <I2C_ITError+0x25c>)
 8006ed2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fd fd3d 	bl	8004958 <HAL_DMA_Abort_IT>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d068      	beq.n	8006fb6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eee:	2b40      	cmp	r3, #64	; 0x40
 8006ef0:	d10b      	bne.n	8006f0a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	691a      	ldr	r2, [r3, #16]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	b2d2      	uxtb	r2, r2
 8006efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	625a      	str	r2, [r3, #36]	; 0x24
=======
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fcc:	4a59      	ldr	r2, [pc, #356]	; (8007134 <I2C_ITError+0x25c>)
 8006fce:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7fd fd3d 	bl	8004a54 <HAL_DMA_Abort_IT>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d068      	beq.n	80070b2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fea:	2b40      	cmp	r3, #64	; 0x40
 8006fec:	d10b      	bne.n	8007006 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	691a      	ldr	r2, [r3, #16]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	b2d2      	uxtb	r2, r2
 8006ffa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
<<<<<<< HEAD
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f022 0201 	bic.w	r2, r2, #1
 8006f18:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	4798      	blx	r3
 8006f30:	e041      	b.n	8006fb6 <I2C_ITError+0x1da>
=======
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f022 0201 	bic.w	r2, r2, #1
 8007014:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2220      	movs	r2, #32
 800701a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007028:	4610      	mov	r0, r2
 800702a:	4798      	blx	r3
 800702c:	e041      	b.n	80070b2 <I2C_ITError+0x1da>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
<<<<<<< HEAD
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b60      	cmp	r3, #96	; 0x60
 8006f3c:	d125      	bne.n	8006f8a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f56:	2b40      	cmp	r3, #64	; 0x40
 8006f58:	d10b      	bne.n	8006f72 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	691a      	ldr	r2, [r3, #16]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f64:	b2d2      	uxtb	r2, r2
 8006f66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	1c5a      	adds	r2, r3, #1
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	625a      	str	r2, [r3, #36]	; 0x24
=======
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b60      	cmp	r3, #96	; 0x60
 8007038:	d125      	bne.n	8007086 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2220      	movs	r2, #32
 800703e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007052:	2b40      	cmp	r3, #64	; 0x40
 8007054:	d10b      	bne.n	800706e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
<<<<<<< HEAD
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 0201 	bic.w	r2, r2, #1
 8006f80:	601a      	str	r2, [r3, #0]
=======
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 0201 	bic.w	r2, r2, #1
 800707c:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
<<<<<<< HEAD
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7fe feec 	bl	8005d60 <HAL_I2C_AbortCpltCallback>
 8006f88:	e015      	b.n	8006fb6 <I2C_ITError+0x1da>
=======
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7fe feec 	bl	8005e5c <HAL_I2C_AbortCpltCallback>
 8007084:	e015      	b.n	80070b2 <I2C_ITError+0x1da>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
<<<<<<< HEAD
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f94:	2b40      	cmp	r3, #64	; 0x40
 8006f96:	d10b      	bne.n	8006fb0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691a      	ldr	r2, [r3, #16]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	625a      	str	r2, [r3, #36]	; 0x24
=======
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007090:	2b40      	cmp	r3, #64	; 0x40
 8007092:	d10b      	bne.n	80070ac <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691a      	ldr	r2, [r3, #16]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709e:	b2d2      	uxtb	r2, r2
 80070a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	1c5a      	adds	r2, r3, #1
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
<<<<<<< HEAD
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7fe fecb 	bl	8005d4c <HAL_I2C_ErrorCallback>
=======
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7fe fecb 	bl	8005e48 <HAL_I2C_ErrorCallback>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
<<<<<<< HEAD
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10e      	bne.n	8006fe4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d109      	bne.n	8006fe4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d104      	bne.n	8006fe4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d007      	beq.n	8006ff4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006ff2:	605a      	str	r2, [r3, #4]
=======
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10e      	bne.n	80070e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d109      	bne.n	80070e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d104      	bne.n	80070e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d007      	beq.n	80070f0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070ee:	605a      	str	r2, [r3, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
<<<<<<< HEAD
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ffa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	f003 0304 	and.w	r3, r3, #4
 8007004:	2b04      	cmp	r3, #4
 8007006:	d113      	bne.n	8007030 <I2C_ITError+0x254>
 8007008:	7bfb      	ldrb	r3, [r7, #15]
 800700a:	2b28      	cmp	r3, #40	; 0x28
 800700c:	d110      	bne.n	8007030 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a0a      	ldr	r2, [pc, #40]	; (800703c <I2C_ITError+0x260>)
 8007012:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2220      	movs	r2, #32
 800701e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
=======
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070f6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b04      	cmp	r3, #4
 8007102:	d113      	bne.n	800712c <I2C_ITError+0x254>
 8007104:	7bfb      	ldrb	r3, [r7, #15]
 8007106:	2b28      	cmp	r3, #40	; 0x28
 8007108:	d110      	bne.n	800712c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a0a      	ldr	r2, [pc, #40]	; (8007138 <I2C_ITError+0x260>)
 800710e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2220      	movs	r2, #32
 800711a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
<<<<<<< HEAD
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7fe fe70 	bl	8005d10 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007030:	bf00      	nop
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	08007041 	.word	0x08007041
 800703c:	ffff0000 	.word	0xffff0000

08007040 <I2C_DMAAbort>:
=======
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7fe fe70 	bl	8005e0c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800712c:	bf00      	nop
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	0800713d 	.word	0x0800713d
 8007138:	ffff0000 	.word	0xffff0000

0800713c <I2C_DMAAbort>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007048:	2300      	movs	r3, #0
 800704a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007050:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007058:	74fb      	strb	r3, [r7, #19]
=======
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007154:	74fb      	strb	r3, [r7, #19]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
<<<<<<< HEAD
 800705a:	4b4b      	ldr	r3, [pc, #300]	; (8007188 <I2C_DMAAbort+0x148>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	08db      	lsrs	r3, r3, #3
 8007060:	4a4a      	ldr	r2, [pc, #296]	; (800718c <I2C_DMAAbort+0x14c>)
 8007062:	fba2 2303 	umull	r2, r3, r2, r3
 8007066:	0a1a      	lsrs	r2, r3, #8
 8007068:	4613      	mov	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	00da      	lsls	r2, r3, #3
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d106      	bne.n	8007088 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707e:	f043 0220 	orr.w	r2, r3, #32
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007086:	e00a      	b.n	800709e <I2C_DMAAbort+0x5e>
    }
    count--;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	3b01      	subs	r3, #1
 800708c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800709c:	d0ea      	beq.n	8007074 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070aa:	2200      	movs	r2, #0
 80070ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ba:	2200      	movs	r2, #0
 80070bc:	63da      	str	r2, [r3, #60]	; 0x3c
=======
 8007156:	4b4b      	ldr	r3, [pc, #300]	; (8007284 <I2C_DMAAbort+0x148>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	08db      	lsrs	r3, r3, #3
 800715c:	4a4a      	ldr	r2, [pc, #296]	; (8007288 <I2C_DMAAbort+0x14c>)
 800715e:	fba2 2303 	umull	r2, r3, r2, r3
 8007162:	0a1a      	lsrs	r2, r3, #8
 8007164:	4613      	mov	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	00da      	lsls	r2, r3, #3
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d106      	bne.n	8007184 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717a:	f043 0220 	orr.w	r2, r3, #32
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007182:	e00a      	b.n	800719a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	3b01      	subs	r3, #1
 8007188:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007198:	d0ea      	beq.n	8007170 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a6:	2200      	movs	r2, #0
 80071a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b6:	2200      	movs	r2, #0
 80071b8:	63da      	str	r2, [r3, #60]	; 0x3c
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
<<<<<<< HEAD
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070cc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	2200      	movs	r2, #0
 80070d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d003      	beq.n	80070e4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e0:	2200      	movs	r2, #0
 80070e2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d003      	beq.n	80070f4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f0:	2200      	movs	r2, #0
 80070f2:	651a      	str	r2, [r3, #80]	; 0x50
=======
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071c8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2200      	movs	r2, #0
 80071ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d003      	beq.n	80071e0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071dc:	2200      	movs	r2, #0
 80071de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ec:	2200      	movs	r2, #0
 80071ee:	651a      	str	r2, [r3, #80]	; 0x50
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
<<<<<<< HEAD
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 0201 	bic.w	r2, r2, #1
 8007102:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b60      	cmp	r3, #96	; 0x60
 800710e:	d10e      	bne.n	800712e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2220      	movs	r2, #32
 8007114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	2200      	movs	r2, #0
 8007124:	641a      	str	r2, [r3, #64]	; 0x40
=======
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f022 0201 	bic.w	r2, r2, #1
 80071fe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b60      	cmp	r3, #96	; 0x60
 800720a:	d10e      	bne.n	800722a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	2220      	movs	r2, #32
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	2200      	movs	r2, #0
 8007220:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
<<<<<<< HEAD
 8007126:	6978      	ldr	r0, [r7, #20]
 8007128:	f7fe fe1a 	bl	8005d60 <HAL_I2C_AbortCpltCallback>
=======
 8007222:	6978      	ldr	r0, [r7, #20]
 8007224:	f7fe fe1a 	bl	8005e5c <HAL_I2C_AbortCpltCallback>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
<<<<<<< HEAD
 800712c:	e027      	b.n	800717e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800712e:	7cfb      	ldrb	r3, [r7, #19]
 8007130:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007134:	2b28      	cmp	r3, #40	; 0x28
 8007136:	d117      	bne.n	8007168 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f042 0201 	orr.w	r2, r2, #1
 8007146:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007156:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	2200      	movs	r2, #0
 800715c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2228      	movs	r2, #40	; 0x28
 8007162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007166:	e007      	b.n	8007178 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	2220      	movs	r2, #32
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007178:	6978      	ldr	r0, [r7, #20]
 800717a:	f7fe fde7 	bl	8005d4c <HAL_I2C_ErrorCallback>
}
 800717e:	bf00      	nop
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	20000000 	.word	0x20000000
 800718c:	14f8b589 	.word	0x14f8b589

08007190 <I2C_WaitOnSTOPRequestThroughIT>:
=======
 8007228:	e027      	b.n	800727a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800722a:	7cfb      	ldrb	r3, [r7, #19]
 800722c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007230:	2b28      	cmp	r3, #40	; 0x28
 8007232:	d117      	bne.n	8007264 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0201 	orr.w	r2, r2, #1
 8007242:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007252:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	2200      	movs	r2, #0
 8007258:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2228      	movs	r2, #40	; 0x28
 800725e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007262:	e007      	b.n	8007274 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	2220      	movs	r2, #32
 8007268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007274:	6978      	ldr	r0, [r7, #20]
 8007276:	f7fe fde7 	bl	8005e48 <HAL_I2C_ErrorCallback>
}
 800727a:	bf00      	nop
 800727c:	3718      	adds	r7, #24
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20000000 	.word	0x20000000
 8007288:	14f8b589 	.word	0x14f8b589

0800728c <I2C_WaitOnSTOPRequestThroughIT>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800719c:	4b13      	ldr	r3, [pc, #76]	; (80071ec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	08db      	lsrs	r3, r3, #3
 80071a2:	4a13      	ldr	r2, [pc, #76]	; (80071f0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80071a4:	fba2 2303 	umull	r2, r3, r2, r3
 80071a8:	0a1a      	lsrs	r2, r3, #8
 80071aa:	4613      	mov	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	3b01      	subs	r3, #1
 80071b6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d107      	bne.n	80071ce <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	f043 0220 	orr.w	r2, r3, #32
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e008      	b.n	80071e0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071dc:	d0e9      	beq.n	80071b2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	20000000 	.word	0x20000000
 80071f0:	14f8b589 	.word	0x14f8b589

080071f4 <I2C_ConvertOtherXferOptions>:
=======
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007294:	2300      	movs	r3, #0
 8007296:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007298:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	08db      	lsrs	r3, r3, #3
 800729e:	4a13      	ldr	r2, [pc, #76]	; (80072ec <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80072a0:	fba2 2303 	umull	r2, r3, r2, r3
 80072a4:	0a1a      	lsrs	r2, r3, #8
 80072a6:	4613      	mov	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3b01      	subs	r3, #1
 80072b2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d107      	bne.n	80072ca <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072be:	f043 0220 	orr.w	r2, r3, #32
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e008      	b.n	80072dc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072d8:	d0e9      	beq.n	80072ae <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	20000000 	.word	0x20000000
 80072ec:	14f8b589 	.word	0x14f8b589

080072f0 <I2C_ConvertOtherXferOptions>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
=======
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
<<<<<<< HEAD
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007204:	d103      	bne.n	800720e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007300:	d103      	bne.n	800730a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    /* Nothing to do */
  }
}
<<<<<<< HEAD
 800720c:	e007      	b.n	800721e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007212:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007216:	d102      	bne.n	800721e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2208      	movs	r2, #8
 800721c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
	...

0800722c <HAL_PWREx_EnableOverDrive>:
=======
 8007308:	e007      	b.n	800731a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007312:	d102      	bne.n	800731a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2208      	movs	r2, #8
 8007318:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800731a:	bf00      	nop
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
	...

08007328 <HAL_PWREx_EnableOverDrive>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
<<<<<<< HEAD
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007236:	2300      	movs	r3, #0
 8007238:	603b      	str	r3, [r7, #0]
 800723a:	4b20      	ldr	r3, [pc, #128]	; (80072bc <HAL_PWREx_EnableOverDrive+0x90>)
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	4a1f      	ldr	r2, [pc, #124]	; (80072bc <HAL_PWREx_EnableOverDrive+0x90>)
 8007240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007244:	6413      	str	r3, [r2, #64]	; 0x40
 8007246:	4b1d      	ldr	r3, [pc, #116]	; (80072bc <HAL_PWREx_EnableOverDrive+0x90>)
 8007248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800724e:	603b      	str	r3, [r7, #0]
 8007250:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007252:	4b1b      	ldr	r3, [pc, #108]	; (80072c0 <HAL_PWREx_EnableOverDrive+0x94>)
 8007254:	2201      	movs	r2, #1
 8007256:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007258:	f7fb f94e 	bl	80024f8 <HAL_GetTick>
 800725c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800725e:	e009      	b.n	8007274 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007260:	f7fb f94a 	bl	80024f8 <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800726e:	d901      	bls.n	8007274 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e01f      	b.n	80072b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007274:	4b13      	ldr	r3, [pc, #76]	; (80072c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800727c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007280:	d1ee      	bne.n	8007260 <HAL_PWREx_EnableOverDrive+0x34>
=======
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800732e:	2300      	movs	r3, #0
 8007330:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007332:	2300      	movs	r3, #0
 8007334:	603b      	str	r3, [r7, #0]
 8007336:	4b20      	ldr	r3, [pc, #128]	; (80073b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8007338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733a:	4a1f      	ldr	r2, [pc, #124]	; (80073b8 <HAL_PWREx_EnableOverDrive+0x90>)
 800733c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007340:	6413      	str	r3, [r2, #64]	; 0x40
 8007342:	4b1d      	ldr	r3, [pc, #116]	; (80073b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800734a:	603b      	str	r3, [r7, #0]
 800734c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800734e:	4b1b      	ldr	r3, [pc, #108]	; (80073bc <HAL_PWREx_EnableOverDrive+0x94>)
 8007350:	2201      	movs	r2, #1
 8007352:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007354:	f7fb f94e 	bl	80025f4 <HAL_GetTick>
 8007358:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800735a:	e009      	b.n	8007370 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800735c:	f7fb f94a 	bl	80025f4 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800736a:	d901      	bls.n	8007370 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e01f      	b.n	80073b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007370:	4b13      	ldr	r3, [pc, #76]	; (80073c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800737c:	d1ee      	bne.n	800735c <HAL_PWREx_EnableOverDrive+0x34>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
<<<<<<< HEAD
 8007282:	4b11      	ldr	r3, [pc, #68]	; (80072c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007284:	2201      	movs	r2, #1
 8007286:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007288:	f7fb f936 	bl	80024f8 <HAL_GetTick>
 800728c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800728e:	e009      	b.n	80072a4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007290:	f7fb f932 	bl	80024f8 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800729e:	d901      	bls.n	80072a4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e007      	b.n	80072b4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80072a4:	4b07      	ldr	r3, [pc, #28]	; (80072c4 <HAL_PWREx_EnableOverDrive+0x98>)
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072b0:	d1ee      	bne.n	8007290 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	40023800 	.word	0x40023800
 80072c0:	420e0040 	.word	0x420e0040
 80072c4:	40007000 	.word	0x40007000
 80072c8:	420e0044 	.word	0x420e0044

080072cc <HAL_RCC_ClockConfig>:
=======
 800737e:	4b11      	ldr	r3, [pc, #68]	; (80073c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007380:	2201      	movs	r2, #1
 8007382:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007384:	f7fb f936 	bl	80025f4 <HAL_GetTick>
 8007388:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800738a:	e009      	b.n	80073a0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800738c:	f7fb f932 	bl	80025f4 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800739a:	d901      	bls.n	80073a0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e007      	b.n	80073b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80073a0:	4b07      	ldr	r3, [pc, #28]	; (80073c0 <HAL_PWREx_EnableOverDrive+0x98>)
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073ac:	d1ee      	bne.n	800738c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	40023800 	.word	0x40023800
 80073bc:	420e0040 	.word	0x420e0040
 80073c0:	40007000 	.word	0x40007000
 80073c4:	420e0044 	.word	0x420e0044

080073c8 <HAL_RCC_ClockConfig>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
=======
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e18c      	b.n	80075fa <HAL_RCC_ClockConfig+0x32e>
=======
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d101      	bne.n	80073dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e18c      	b.n	80076f6 <HAL_RCC_ClockConfig+0x32e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
<<<<<<< HEAD
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d003      	beq.n	80072f0 <HAL_RCC_ClockConfig+0x24>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b0f      	cmp	r3, #15
 80072ee:	d904      	bls.n	80072fa <HAL_RCC_ClockConfig+0x2e>
 80072f0:	f240 215a 	movw	r1, #602	; 0x25a
 80072f4:	4887      	ldr	r0, [pc, #540]	; (8007514 <HAL_RCC_ClockConfig+0x248>)
 80072f6:	f7fa fd20 	bl	8001d3a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d031      	beq.n	8007364 <HAL_RCC_ClockConfig+0x98>
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d02e      	beq.n	8007364 <HAL_RCC_ClockConfig+0x98>
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2b02      	cmp	r3, #2
 800730a:	d02b      	beq.n	8007364 <HAL_RCC_ClockConfig+0x98>
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	2b03      	cmp	r3, #3
 8007310:	d028      	beq.n	8007364 <HAL_RCC_ClockConfig+0x98>
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2b04      	cmp	r3, #4
 8007316:	d025      	beq.n	8007364 <HAL_RCC_ClockConfig+0x98>
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2b05      	cmp	r3, #5
 800731c:	d022      	beq.n	8007364 <HAL_RCC_ClockConfig+0x98>
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b06      	cmp	r3, #6
 8007322:	d01f      	beq.n	8007364 <HAL_RCC_ClockConfig+0x98>
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	2b07      	cmp	r3, #7
 8007328:	d01c      	beq.n	8007364 <HAL_RCC_ClockConfig+0x98>
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b08      	cmp	r3, #8
 800732e:	d019      	beq.n	8007364 <HAL_RCC_ClockConfig+0x98>
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	2b09      	cmp	r3, #9
 8007334:	d016      	beq.n	8007364 <HAL_RCC_ClockConfig+0x98>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2b0a      	cmp	r3, #10
 800733a:	d013      	beq.n	8007364 <HAL_RCC_ClockConfig+0x98>
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	2b0b      	cmp	r3, #11
 8007340:	d010      	beq.n	8007364 <HAL_RCC_ClockConfig+0x98>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b0c      	cmp	r3, #12
 8007346:	d00d      	beq.n	8007364 <HAL_RCC_ClockConfig+0x98>
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b0d      	cmp	r3, #13
 800734c:	d00a      	beq.n	8007364 <HAL_RCC_ClockConfig+0x98>
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2b0e      	cmp	r3, #14
 8007352:	d007      	beq.n	8007364 <HAL_RCC_ClockConfig+0x98>
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	2b0f      	cmp	r3, #15
 8007358:	d004      	beq.n	8007364 <HAL_RCC_ClockConfig+0x98>
 800735a:	f240 215b 	movw	r1, #603	; 0x25b
 800735e:	486d      	ldr	r0, [pc, #436]	; (8007514 <HAL_RCC_ClockConfig+0x248>)
 8007360:	f7fa fceb 	bl	8001d3a <assert_failed>
=======
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d003      	beq.n	80073ec <HAL_RCC_ClockConfig+0x24>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b0f      	cmp	r3, #15
 80073ea:	d904      	bls.n	80073f6 <HAL_RCC_ClockConfig+0x2e>
 80073ec:	f240 215a 	movw	r1, #602	; 0x25a
 80073f0:	4887      	ldr	r0, [pc, #540]	; (8007610 <HAL_RCC_ClockConfig+0x248>)
 80073f2:	f7fa fd20 	bl	8001e36 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d031      	beq.n	8007460 <HAL_RCC_ClockConfig+0x98>
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d02e      	beq.n	8007460 <HAL_RCC_ClockConfig+0x98>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b02      	cmp	r3, #2
 8007406:	d02b      	beq.n	8007460 <HAL_RCC_ClockConfig+0x98>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	2b03      	cmp	r3, #3
 800740c:	d028      	beq.n	8007460 <HAL_RCC_ClockConfig+0x98>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b04      	cmp	r3, #4
 8007412:	d025      	beq.n	8007460 <HAL_RCC_ClockConfig+0x98>
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	2b05      	cmp	r3, #5
 8007418:	d022      	beq.n	8007460 <HAL_RCC_ClockConfig+0x98>
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	2b06      	cmp	r3, #6
 800741e:	d01f      	beq.n	8007460 <HAL_RCC_ClockConfig+0x98>
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	2b07      	cmp	r3, #7
 8007424:	d01c      	beq.n	8007460 <HAL_RCC_ClockConfig+0x98>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b08      	cmp	r3, #8
 800742a:	d019      	beq.n	8007460 <HAL_RCC_ClockConfig+0x98>
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	2b09      	cmp	r3, #9
 8007430:	d016      	beq.n	8007460 <HAL_RCC_ClockConfig+0x98>
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b0a      	cmp	r3, #10
 8007436:	d013      	beq.n	8007460 <HAL_RCC_ClockConfig+0x98>
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b0b      	cmp	r3, #11
 800743c:	d010      	beq.n	8007460 <HAL_RCC_ClockConfig+0x98>
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2b0c      	cmp	r3, #12
 8007442:	d00d      	beq.n	8007460 <HAL_RCC_ClockConfig+0x98>
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	2b0d      	cmp	r3, #13
 8007448:	d00a      	beq.n	8007460 <HAL_RCC_ClockConfig+0x98>
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	2b0e      	cmp	r3, #14
 800744e:	d007      	beq.n	8007460 <HAL_RCC_ClockConfig+0x98>
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	2b0f      	cmp	r3, #15
 8007454:	d004      	beq.n	8007460 <HAL_RCC_ClockConfig+0x98>
 8007456:	f240 215b 	movw	r1, #603	; 0x25b
 800745a:	486d      	ldr	r0, [pc, #436]	; (8007610 <HAL_RCC_ClockConfig+0x248>)
 800745c:	f7fa fceb 	bl	8001e36 <assert_failed>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8007364:	4b6c      	ldr	r3, [pc, #432]	; (8007518 <HAL_RCC_ClockConfig+0x24c>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 030f 	and.w	r3, r3, #15
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	429a      	cmp	r2, r3
 8007370:	d90c      	bls.n	800738c <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007372:	4b69      	ldr	r3, [pc, #420]	; (8007518 <HAL_RCC_ClockConfig+0x24c>)
 8007374:	683a      	ldr	r2, [r7, #0]
 8007376:	b2d2      	uxtb	r2, r2
 8007378:	701a      	strb	r2, [r3, #0]
=======
 8007460:	4b6c      	ldr	r3, [pc, #432]	; (8007614 <HAL_RCC_ClockConfig+0x24c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 030f 	and.w	r3, r3, #15
 8007468:	683a      	ldr	r2, [r7, #0]
 800746a:	429a      	cmp	r2, r3
 800746c:	d90c      	bls.n	8007488 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800746e:	4b69      	ldr	r3, [pc, #420]	; (8007614 <HAL_RCC_ClockConfig+0x24c>)
 8007470:	683a      	ldr	r2, [r7, #0]
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	701a      	strb	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800737a:	4b67      	ldr	r3, [pc, #412]	; (8007518 <HAL_RCC_ClockConfig+0x24c>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 030f 	and.w	r3, r3, #15
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	429a      	cmp	r2, r3
 8007386:	d001      	beq.n	800738c <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e136      	b.n	80075fa <HAL_RCC_ClockConfig+0x32e>
=======
 8007476:	4b67      	ldr	r3, [pc, #412]	; (8007614 <HAL_RCC_ClockConfig+0x24c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 030f 	and.w	r3, r3, #15
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d001      	beq.n	8007488 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e136      	b.n	80076f6 <HAL_RCC_ClockConfig+0x32e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0302 	and.w	r3, r3, #2
 8007394:	2b00      	cmp	r3, #0
 8007396:	d049      	beq.n	800742c <HAL_RCC_ClockConfig+0x160>
=======
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d049      	beq.n	8007528 <HAL_RCC_ClockConfig+0x160>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d005      	beq.n	80073b0 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073a4:	4b5d      	ldr	r3, [pc, #372]	; (800751c <HAL_RCC_ClockConfig+0x250>)
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	4a5c      	ldr	r2, [pc, #368]	; (800751c <HAL_RCC_ClockConfig+0x250>)
 80073aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80073ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0308 	and.w	r3, r3, #8
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d005      	beq.n	80073c8 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073bc:	4b57      	ldr	r3, [pc, #348]	; (800751c <HAL_RCC_ClockConfig+0x250>)
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	4a56      	ldr	r2, [pc, #344]	; (800751c <HAL_RCC_ClockConfig+0x250>)
 80073c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80073c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d024      	beq.n	800741a <HAL_RCC_ClockConfig+0x14e>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	2b80      	cmp	r3, #128	; 0x80
 80073d6:	d020      	beq.n	800741a <HAL_RCC_ClockConfig+0x14e>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	2b90      	cmp	r3, #144	; 0x90
 80073de:	d01c      	beq.n	800741a <HAL_RCC_ClockConfig+0x14e>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	2ba0      	cmp	r3, #160	; 0xa0
 80073e6:	d018      	beq.n	800741a <HAL_RCC_ClockConfig+0x14e>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	2bb0      	cmp	r3, #176	; 0xb0
 80073ee:	d014      	beq.n	800741a <HAL_RCC_ClockConfig+0x14e>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	2bc0      	cmp	r3, #192	; 0xc0
 80073f6:	d010      	beq.n	800741a <HAL_RCC_ClockConfig+0x14e>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	2bd0      	cmp	r3, #208	; 0xd0
 80073fe:	d00c      	beq.n	800741a <HAL_RCC_ClockConfig+0x14e>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	2be0      	cmp	r3, #224	; 0xe0
 8007406:	d008      	beq.n	800741a <HAL_RCC_ClockConfig+0x14e>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	2bf0      	cmp	r3, #240	; 0xf0
 800740e:	d004      	beq.n	800741a <HAL_RCC_ClockConfig+0x14e>
 8007410:	f240 217e 	movw	r1, #638	; 0x27e
 8007414:	483f      	ldr	r0, [pc, #252]	; (8007514 <HAL_RCC_ClockConfig+0x248>)
 8007416:	f7fa fc90 	bl	8001d3a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800741a:	4b40      	ldr	r3, [pc, #256]	; (800751c <HAL_RCC_ClockConfig+0x250>)
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	493d      	ldr	r1, [pc, #244]	; (800751c <HAL_RCC_ClockConfig+0x250>)
 8007428:	4313      	orrs	r3, r2
 800742a:	608b      	str	r3, [r1, #8]
=======
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0304 	and.w	r3, r3, #4
 800749c:	2b00      	cmp	r3, #0
 800749e:	d005      	beq.n	80074ac <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074a0:	4b5d      	ldr	r3, [pc, #372]	; (8007618 <HAL_RCC_ClockConfig+0x250>)
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	4a5c      	ldr	r2, [pc, #368]	; (8007618 <HAL_RCC_ClockConfig+0x250>)
 80074a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80074aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0308 	and.w	r3, r3, #8
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d005      	beq.n	80074c4 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074b8:	4b57      	ldr	r3, [pc, #348]	; (8007618 <HAL_RCC_ClockConfig+0x250>)
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	4a56      	ldr	r2, [pc, #344]	; (8007618 <HAL_RCC_ClockConfig+0x250>)
 80074be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80074c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d024      	beq.n	8007516 <HAL_RCC_ClockConfig+0x14e>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	2b80      	cmp	r3, #128	; 0x80
 80074d2:	d020      	beq.n	8007516 <HAL_RCC_ClockConfig+0x14e>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	2b90      	cmp	r3, #144	; 0x90
 80074da:	d01c      	beq.n	8007516 <HAL_RCC_ClockConfig+0x14e>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	2ba0      	cmp	r3, #160	; 0xa0
 80074e2:	d018      	beq.n	8007516 <HAL_RCC_ClockConfig+0x14e>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	2bb0      	cmp	r3, #176	; 0xb0
 80074ea:	d014      	beq.n	8007516 <HAL_RCC_ClockConfig+0x14e>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	2bc0      	cmp	r3, #192	; 0xc0
 80074f2:	d010      	beq.n	8007516 <HAL_RCC_ClockConfig+0x14e>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	2bd0      	cmp	r3, #208	; 0xd0
 80074fa:	d00c      	beq.n	8007516 <HAL_RCC_ClockConfig+0x14e>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	2be0      	cmp	r3, #224	; 0xe0
 8007502:	d008      	beq.n	8007516 <HAL_RCC_ClockConfig+0x14e>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	2bf0      	cmp	r3, #240	; 0xf0
 800750a:	d004      	beq.n	8007516 <HAL_RCC_ClockConfig+0x14e>
 800750c:	f240 217e 	movw	r1, #638	; 0x27e
 8007510:	483f      	ldr	r0, [pc, #252]	; (8007610 <HAL_RCC_ClockConfig+0x248>)
 8007512:	f7fa fc90 	bl	8001e36 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007516:	4b40      	ldr	r3, [pc, #256]	; (8007618 <HAL_RCC_ClockConfig+0x250>)
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	493d      	ldr	r1, [pc, #244]	; (8007618 <HAL_RCC_ClockConfig+0x250>)
 8007524:	4313      	orrs	r3, r2
 8007526:	608b      	str	r3, [r1, #8]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	d059      	beq.n	80074ec <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d010      	beq.n	8007462 <HAL_RCC_ClockConfig+0x196>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d00c      	beq.n	8007462 <HAL_RCC_ClockConfig+0x196>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	2b02      	cmp	r3, #2
 800744e:	d008      	beq.n	8007462 <HAL_RCC_ClockConfig+0x196>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	2b03      	cmp	r3, #3
 8007456:	d004      	beq.n	8007462 <HAL_RCC_ClockConfig+0x196>
 8007458:	f240 2185 	movw	r1, #645	; 0x285
 800745c:	482d      	ldr	r0, [pc, #180]	; (8007514 <HAL_RCC_ClockConfig+0x248>)
 800745e:	f7fa fc6c 	bl	8001d3a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d107      	bne.n	800747a <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800746a:	4b2c      	ldr	r3, [pc, #176]	; (800751c <HAL_RCC_ClockConfig+0x250>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d119      	bne.n	80074aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e0bf      	b.n	80075fa <HAL_RCC_ClockConfig+0x32e>
=======
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	d059      	beq.n	80075e8 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d010      	beq.n	800755e <HAL_RCC_ClockConfig+0x196>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d00c      	beq.n	800755e <HAL_RCC_ClockConfig+0x196>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	2b02      	cmp	r3, #2
 800754a:	d008      	beq.n	800755e <HAL_RCC_ClockConfig+0x196>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	2b03      	cmp	r3, #3
 8007552:	d004      	beq.n	800755e <HAL_RCC_ClockConfig+0x196>
 8007554:	f240 2185 	movw	r1, #645	; 0x285
 8007558:	482d      	ldr	r0, [pc, #180]	; (8007610 <HAL_RCC_ClockConfig+0x248>)
 800755a:	f7fa fc6c 	bl	8001e36 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d107      	bne.n	8007576 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007566:	4b2c      	ldr	r3, [pc, #176]	; (8007618 <HAL_RCC_ClockConfig+0x250>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d119      	bne.n	80075a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e0bf      	b.n	80076f6 <HAL_RCC_ClockConfig+0x32e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	2b02      	cmp	r3, #2
 8007480:	d003      	beq.n	800748a <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007486:	2b03      	cmp	r3, #3
 8007488:	d107      	bne.n	800749a <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800748a:	4b24      	ldr	r3, [pc, #144]	; (800751c <HAL_RCC_ClockConfig+0x250>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d109      	bne.n	80074aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e0af      	b.n	80075fa <HAL_RCC_ClockConfig+0x32e>
=======
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	2b02      	cmp	r3, #2
 800757c:	d003      	beq.n	8007586 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007582:	2b03      	cmp	r3, #3
 8007584:	d107      	bne.n	8007596 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007586:	4b24      	ldr	r3, [pc, #144]	; (8007618 <HAL_RCC_ClockConfig+0x250>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d109      	bne.n	80075a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e0af      	b.n	80076f6 <HAL_RCC_ClockConfig+0x32e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 800749a:	4b20      	ldr	r3, [pc, #128]	; (800751c <HAL_RCC_ClockConfig+0x250>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0302 	and.w	r3, r3, #2
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e0a7      	b.n	80075fa <HAL_RCC_ClockConfig+0x32e>
=======
 8007596:	4b20      	ldr	r3, [pc, #128]	; (8007618 <HAL_RCC_ClockConfig+0x250>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e0a7      	b.n	80076f6 <HAL_RCC_ClockConfig+0x32e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 80074aa:	4b1c      	ldr	r3, [pc, #112]	; (800751c <HAL_RCC_ClockConfig+0x250>)
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f023 0203 	bic.w	r2, r3, #3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	4919      	ldr	r1, [pc, #100]	; (800751c <HAL_RCC_ClockConfig+0x250>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80074bc:	f7fb f81c 	bl	80024f8 <HAL_GetTick>
 80074c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074c2:	e00a      	b.n	80074da <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074c4:	f7fb f818 	bl	80024f8 <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d901      	bls.n	80074da <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e08f      	b.n	80075fa <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074da:	4b10      	ldr	r3, [pc, #64]	; (800751c <HAL_RCC_ClockConfig+0x250>)
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f003 020c 	and.w	r2, r3, #12
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d1eb      	bne.n	80074c4 <HAL_RCC_ClockConfig+0x1f8>
=======
 80075a6:	4b1c      	ldr	r3, [pc, #112]	; (8007618 <HAL_RCC_ClockConfig+0x250>)
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f023 0203 	bic.w	r2, r3, #3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	4919      	ldr	r1, [pc, #100]	; (8007618 <HAL_RCC_ClockConfig+0x250>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075b8:	f7fb f81c 	bl	80025f4 <HAL_GetTick>
 80075bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075be:	e00a      	b.n	80075d6 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075c0:	f7fb f818 	bl	80025f4 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d901      	bls.n	80075d6 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e08f      	b.n	80076f6 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075d6:	4b10      	ldr	r3, [pc, #64]	; (8007618 <HAL_RCC_ClockConfig+0x250>)
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f003 020c 	and.w	r2, r3, #12
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d1eb      	bne.n	80075c0 <HAL_RCC_ClockConfig+0x1f8>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80074ec:	4b0a      	ldr	r3, [pc, #40]	; (8007518 <HAL_RCC_ClockConfig+0x24c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 030f 	and.w	r3, r3, #15
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d212      	bcs.n	8007520 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074fa:	4b07      	ldr	r3, [pc, #28]	; (8007518 <HAL_RCC_ClockConfig+0x24c>)
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	b2d2      	uxtb	r2, r2
 8007500:	701a      	strb	r2, [r3, #0]
=======
 80075e8:	4b0a      	ldr	r3, [pc, #40]	; (8007614 <HAL_RCC_ClockConfig+0x24c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 030f 	and.w	r3, r3, #15
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d212      	bcs.n	800761c <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075f6:	4b07      	ldr	r3, [pc, #28]	; (8007614 <HAL_RCC_ClockConfig+0x24c>)
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	b2d2      	uxtb	r2, r2
 80075fc:	701a      	strb	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8007502:	4b05      	ldr	r3, [pc, #20]	; (8007518 <HAL_RCC_ClockConfig+0x24c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 030f 	and.w	r3, r3, #15
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	429a      	cmp	r2, r3
 800750e:	d007      	beq.n	8007520 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e072      	b.n	80075fa <HAL_RCC_ClockConfig+0x32e>
 8007514:	0800c128 	.word	0x0800c128
 8007518:	40023c00 	.word	0x40023c00
 800751c:	40023800 	.word	0x40023800
=======
 80075fe:	4b05      	ldr	r3, [pc, #20]	; (8007614 <HAL_RCC_ClockConfig+0x24c>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 030f 	and.w	r3, r3, #15
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	429a      	cmp	r2, r3
 800760a:	d007      	beq.n	800761c <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e072      	b.n	80076f6 <HAL_RCC_ClockConfig+0x32e>
 8007610:	0800c228 	.word	0x0800c228
 8007614:	40023c00 	.word	0x40023c00
 8007618:	40023800 	.word	0x40023800
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b00      	cmp	r3, #0
 800752a:	d025      	beq.n	8007578 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d018      	beq.n	8007566 <HAL_RCC_ClockConfig+0x29a>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800753c:	d013      	beq.n	8007566 <HAL_RCC_ClockConfig+0x29a>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007546:	d00e      	beq.n	8007566 <HAL_RCC_ClockConfig+0x29a>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007550:	d009      	beq.n	8007566 <HAL_RCC_ClockConfig+0x29a>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800755a:	d004      	beq.n	8007566 <HAL_RCC_ClockConfig+0x29a>
 800755c:	f240 21c3 	movw	r1, #707	; 0x2c3
 8007560:	4828      	ldr	r0, [pc, #160]	; (8007604 <HAL_RCC_ClockConfig+0x338>)
 8007562:	f7fa fbea 	bl	8001d3a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007566:	4b28      	ldr	r3, [pc, #160]	; (8007608 <HAL_RCC_ClockConfig+0x33c>)
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	4925      	ldr	r1, [pc, #148]	; (8007608 <HAL_RCC_ClockConfig+0x33c>)
 8007574:	4313      	orrs	r3, r2
 8007576:	608b      	str	r3, [r1, #8]
=======
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0304 	and.w	r3, r3, #4
 8007624:	2b00      	cmp	r3, #0
 8007626:	d025      	beq.n	8007674 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d018      	beq.n	8007662 <HAL_RCC_ClockConfig+0x29a>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007638:	d013      	beq.n	8007662 <HAL_RCC_ClockConfig+0x29a>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007642:	d00e      	beq.n	8007662 <HAL_RCC_ClockConfig+0x29a>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800764c:	d009      	beq.n	8007662 <HAL_RCC_ClockConfig+0x29a>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007656:	d004      	beq.n	8007662 <HAL_RCC_ClockConfig+0x29a>
 8007658:	f240 21c3 	movw	r1, #707	; 0x2c3
 800765c:	4828      	ldr	r0, [pc, #160]	; (8007700 <HAL_RCC_ClockConfig+0x338>)
 800765e:	f7fa fbea 	bl	8001e36 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007662:	4b28      	ldr	r3, [pc, #160]	; (8007704 <HAL_RCC_ClockConfig+0x33c>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	4925      	ldr	r1, [pc, #148]	; (8007704 <HAL_RCC_ClockConfig+0x33c>)
 8007670:	4313      	orrs	r3, r2
 8007672:	608b      	str	r3, [r1, #8]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0308 	and.w	r3, r3, #8
 8007580:	2b00      	cmp	r3, #0
 8007582:	d026      	beq.n	80075d2 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d018      	beq.n	80075be <HAL_RCC_ClockConfig+0x2f2>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007594:	d013      	beq.n	80075be <HAL_RCC_ClockConfig+0x2f2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800759e:	d00e      	beq.n	80075be <HAL_RCC_ClockConfig+0x2f2>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80075a8:	d009      	beq.n	80075be <HAL_RCC_ClockConfig+0x2f2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80075b2:	d004      	beq.n	80075be <HAL_RCC_ClockConfig+0x2f2>
 80075b4:	f240 21ca 	movw	r1, #714	; 0x2ca
 80075b8:	4812      	ldr	r0, [pc, #72]	; (8007604 <HAL_RCC_ClockConfig+0x338>)
 80075ba:	f7fa fbbe 	bl	8001d3a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075be:	4b12      	ldr	r3, [pc, #72]	; (8007608 <HAL_RCC_ClockConfig+0x33c>)
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	00db      	lsls	r3, r3, #3
 80075cc:	490e      	ldr	r1, [pc, #56]	; (8007608 <HAL_RCC_ClockConfig+0x33c>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	608b      	str	r3, [r1, #8]
=======
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0308 	and.w	r3, r3, #8
 800767c:	2b00      	cmp	r3, #0
 800767e:	d026      	beq.n	80076ce <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d018      	beq.n	80076ba <HAL_RCC_ClockConfig+0x2f2>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007690:	d013      	beq.n	80076ba <HAL_RCC_ClockConfig+0x2f2>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800769a:	d00e      	beq.n	80076ba <HAL_RCC_ClockConfig+0x2f2>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80076a4:	d009      	beq.n	80076ba <HAL_RCC_ClockConfig+0x2f2>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80076ae:	d004      	beq.n	80076ba <HAL_RCC_ClockConfig+0x2f2>
 80076b0:	f240 21ca 	movw	r1, #714	; 0x2ca
 80076b4:	4812      	ldr	r0, [pc, #72]	; (8007700 <HAL_RCC_ClockConfig+0x338>)
 80076b6:	f7fa fbbe 	bl	8001e36 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076ba:	4b12      	ldr	r3, [pc, #72]	; (8007704 <HAL_RCC_ClockConfig+0x33c>)
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	00db      	lsls	r3, r3, #3
 80076c8:	490e      	ldr	r1, [pc, #56]	; (8007704 <HAL_RCC_ClockConfig+0x33c>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	608b      	str	r3, [r1, #8]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 80075d2:	f000 f887 	bl	80076e4 <HAL_RCC_GetSysClockFreq>
 80075d6:	4602      	mov	r2, r0
 80075d8:	4b0b      	ldr	r3, [pc, #44]	; (8007608 <HAL_RCC_ClockConfig+0x33c>)
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	091b      	lsrs	r3, r3, #4
 80075de:	f003 030f 	and.w	r3, r3, #15
 80075e2:	490a      	ldr	r1, [pc, #40]	; (800760c <HAL_RCC_ClockConfig+0x340>)
 80075e4:	5ccb      	ldrb	r3, [r1, r3]
 80075e6:	fa22 f303 	lsr.w	r3, r2, r3
 80075ea:	4a09      	ldr	r2, [pc, #36]	; (8007610 <HAL_RCC_ClockConfig+0x344>)
 80075ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80075ee:	4b09      	ldr	r3, [pc, #36]	; (8007614 <HAL_RCC_ClockConfig+0x348>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fa fcc4 	bl	8001f80 <HAL_InitTick>

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	0800c128 	.word	0x0800c128
 8007608:	40023800 	.word	0x40023800
 800760c:	0800c250 	.word	0x0800c250
 8007610:	20000000 	.word	0x20000000
 8007614:	20000004 	.word	0x20000004

08007618 <HAL_RCC_GetHCLKFreq>:
=======
 80076ce:	f000 f887 	bl	80077e0 <HAL_RCC_GetSysClockFreq>
 80076d2:	4602      	mov	r2, r0
 80076d4:	4b0b      	ldr	r3, [pc, #44]	; (8007704 <HAL_RCC_ClockConfig+0x33c>)
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	091b      	lsrs	r3, r3, #4
 80076da:	f003 030f 	and.w	r3, r3, #15
 80076de:	490a      	ldr	r1, [pc, #40]	; (8007708 <HAL_RCC_ClockConfig+0x340>)
 80076e0:	5ccb      	ldrb	r3, [r1, r3]
 80076e2:	fa22 f303 	lsr.w	r3, r2, r3
 80076e6:	4a09      	ldr	r2, [pc, #36]	; (800770c <HAL_RCC_ClockConfig+0x344>)
 80076e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80076ea:	4b09      	ldr	r3, [pc, #36]	; (8007710 <HAL_RCC_ClockConfig+0x348>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fa fcc4 	bl	800207c <HAL_InitTick>

  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	0800c228 	.word	0x0800c228
 8007704:	40023800 	.word	0x40023800
 8007708:	0800c350 	.word	0x0800c350
 800770c:	20000000 	.word	0x20000000
 8007710:	20000004 	.word	0x20000004

08007714 <HAL_RCC_GetHCLKFreq>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8007618:	b480      	push	{r7}
 800761a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800761c:	4b03      	ldr	r3, [pc, #12]	; (800762c <HAL_RCC_GetHCLKFreq+0x14>)
 800761e:	681b      	ldr	r3, [r3, #0]
}
 8007620:	4618      	mov	r0, r3
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	20000000 	.word	0x20000000

08007630 <HAL_RCC_GetPCLK1Freq>:
=======
 8007714:	b480      	push	{r7}
 8007716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007718:	4b03      	ldr	r3, [pc, #12]	; (8007728 <HAL_RCC_GetHCLKFreq+0x14>)
 800771a:	681b      	ldr	r3, [r3, #0]
}
 800771c:	4618      	mov	r0, r3
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	20000000 	.word	0x20000000

0800772c <HAL_RCC_GetPCLK1Freq>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8007630:	b580      	push	{r7, lr}
 8007632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007634:	f7ff fff0 	bl	8007618 <HAL_RCC_GetHCLKFreq>
 8007638:	4602      	mov	r2, r0
 800763a:	4b05      	ldr	r3, [pc, #20]	; (8007650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	0a9b      	lsrs	r3, r3, #10
 8007640:	f003 0307 	and.w	r3, r3, #7
 8007644:	4903      	ldr	r1, [pc, #12]	; (8007654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007646:	5ccb      	ldrb	r3, [r1, r3]
 8007648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800764c:	4618      	mov	r0, r3
 800764e:	bd80      	pop	{r7, pc}
 8007650:	40023800 	.word	0x40023800
 8007654:	0800c260 	.word	0x0800c260

08007658 <HAL_RCC_GetPCLK2Freq>:
=======
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007730:	f7ff fff0 	bl	8007714 <HAL_RCC_GetHCLKFreq>
 8007734:	4602      	mov	r2, r0
 8007736:	4b05      	ldr	r3, [pc, #20]	; (800774c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	0a9b      	lsrs	r3, r3, #10
 800773c:	f003 0307 	and.w	r3, r3, #7
 8007740:	4903      	ldr	r1, [pc, #12]	; (8007750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007742:	5ccb      	ldrb	r3, [r1, r3]
 8007744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007748:	4618      	mov	r0, r3
 800774a:	bd80      	pop	{r7, pc}
 800774c:	40023800 	.word	0x40023800
 8007750:	0800c360 	.word	0x0800c360

08007754 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800765c:	f7ff ffdc 	bl	8007618 <HAL_RCC_GetHCLKFreq>
 8007660:	4602      	mov	r2, r0
 8007662:	4b05      	ldr	r3, [pc, #20]	; (8007678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	0b5b      	lsrs	r3, r3, #13
 8007668:	f003 0307 	and.w	r3, r3, #7
 800766c:	4903      	ldr	r1, [pc, #12]	; (800767c <HAL_RCC_GetPCLK2Freq+0x24>)
 800766e:	5ccb      	ldrb	r3, [r1, r3]
 8007670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007674:	4618      	mov	r0, r3
 8007676:	bd80      	pop	{r7, pc}
 8007678:	40023800 	.word	0x40023800
 800767c:	0800c260 	.word	0x0800c260

08007680 <HAL_RCC_GetClockConfig>:
=======
 8007754:	b580      	push	{r7, lr}
 8007756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007758:	f7ff ffdc 	bl	8007714 <HAL_RCC_GetHCLKFreq>
 800775c:	4602      	mov	r2, r0
 800775e:	4b05      	ldr	r3, [pc, #20]	; (8007774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	0b5b      	lsrs	r3, r3, #13
 8007764:	f003 0307 	and.w	r3, r3, #7
 8007768:	4903      	ldr	r1, [pc, #12]	; (8007778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800776a:	5ccb      	ldrb	r3, [r1, r3]
 800776c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007770:	4618      	mov	r0, r3
 8007772:	bd80      	pop	{r7, pc}
 8007774:	40023800 	.word	0x40023800
 8007778:	0800c360 	.word	0x0800c360

0800777c <HAL_RCC_GetClockConfig>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
<<<<<<< HEAD
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	220f      	movs	r2, #15
 800768e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007690:	4b12      	ldr	r3, [pc, #72]	; (80076dc <HAL_RCC_GetClockConfig+0x5c>)
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f003 0203 	and.w	r2, r3, #3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800769c:	4b0f      	ldr	r3, [pc, #60]	; (80076dc <HAL_RCC_GetClockConfig+0x5c>)
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80076a8:	4b0c      	ldr	r3, [pc, #48]	; (80076dc <HAL_RCC_GetClockConfig+0x5c>)
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80076b4:	4b09      	ldr	r3, [pc, #36]	; (80076dc <HAL_RCC_GetClockConfig+0x5c>)
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	08db      	lsrs	r3, r3, #3
 80076ba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80076c2:	4b07      	ldr	r3, [pc, #28]	; (80076e0 <HAL_RCC_GetClockConfig+0x60>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 020f 	and.w	r2, r3, #15
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	601a      	str	r2, [r3, #0]
}
 80076ce:	bf00      	nop
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	40023800 	.word	0x40023800
 80076e0:	40023c00 	.word	0x40023c00

080076e4 <HAL_RCC_GetSysClockFreq>:
=======
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	220f      	movs	r2, #15
 800778a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800778c:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <HAL_RCC_GetClockConfig+0x5c>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f003 0203 	and.w	r2, r3, #3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007798:	4b0f      	ldr	r3, [pc, #60]	; (80077d8 <HAL_RCC_GetClockConfig+0x5c>)
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80077a4:	4b0c      	ldr	r3, [pc, #48]	; (80077d8 <HAL_RCC_GetClockConfig+0x5c>)
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80077b0:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <HAL_RCC_GetClockConfig+0x5c>)
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	08db      	lsrs	r3, r3, #3
 80077b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80077be:	4b07      	ldr	r3, [pc, #28]	; (80077dc <HAL_RCC_GetClockConfig+0x60>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 020f 	and.w	r2, r3, #15
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	601a      	str	r2, [r3, #0]
}
 80077ca:	bf00      	nop
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	40023800 	.word	0x40023800
 80077dc:	40023c00 	.word	0x40023c00

080077e0 <HAL_RCC_GetSysClockFreq>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 80076e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076e8:	b0ae      	sub	sp, #184	; 0xb8
 80076ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80076f8:	2300      	movs	r3, #0
 80076fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800770a:	4bcb      	ldr	r3, [pc, #812]	; (8007a38 <HAL_RCC_GetSysClockFreq+0x354>)
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f003 030c 	and.w	r3, r3, #12
 8007712:	2b0c      	cmp	r3, #12
 8007714:	f200 8206 	bhi.w	8007b24 <HAL_RCC_GetSysClockFreq+0x440>
 8007718:	a201      	add	r2, pc, #4	; (adr r2, 8007720 <HAL_RCC_GetSysClockFreq+0x3c>)
 800771a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771e:	bf00      	nop
 8007720:	08007755 	.word	0x08007755
 8007724:	08007b25 	.word	0x08007b25
 8007728:	08007b25 	.word	0x08007b25
 800772c:	08007b25 	.word	0x08007b25
 8007730:	0800775d 	.word	0x0800775d
 8007734:	08007b25 	.word	0x08007b25
 8007738:	08007b25 	.word	0x08007b25
 800773c:	08007b25 	.word	0x08007b25
 8007740:	08007765 	.word	0x08007765
 8007744:	08007b25 	.word	0x08007b25
 8007748:	08007b25 	.word	0x08007b25
 800774c:	08007b25 	.word	0x08007b25
 8007750:	08007955 	.word	0x08007955
=======
 80077e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077e4:	b0ae      	sub	sp, #184	; 0xb8
 80077e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80077fa:	2300      	movs	r3, #0
 80077fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007800:	2300      	movs	r3, #0
 8007802:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007806:	4bcb      	ldr	r3, [pc, #812]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 030c 	and.w	r3, r3, #12
 800780e:	2b0c      	cmp	r3, #12
 8007810:	f200 8206 	bhi.w	8007c20 <HAL_RCC_GetSysClockFreq+0x440>
 8007814:	a201      	add	r2, pc, #4	; (adr r2, 800781c <HAL_RCC_GetSysClockFreq+0x3c>)
 8007816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781a:	bf00      	nop
 800781c:	08007851 	.word	0x08007851
 8007820:	08007c21 	.word	0x08007c21
 8007824:	08007c21 	.word	0x08007c21
 8007828:	08007c21 	.word	0x08007c21
 800782c:	08007859 	.word	0x08007859
 8007830:	08007c21 	.word	0x08007c21
 8007834:	08007c21 	.word	0x08007c21
 8007838:	08007c21 	.word	0x08007c21
 800783c:	08007861 	.word	0x08007861
 8007840:	08007c21 	.word	0x08007c21
 8007844:	08007c21 	.word	0x08007c21
 8007848:	08007c21 	.word	0x08007c21
 800784c:	08007a51 	.word	0x08007a51
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8007754:	4bb9      	ldr	r3, [pc, #740]	; (8007a3c <HAL_RCC_GetSysClockFreq+0x358>)
 8007756:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800775a:	e1e7      	b.n	8007b2c <HAL_RCC_GetSysClockFreq+0x448>
=======
 8007850:	4bb9      	ldr	r3, [pc, #740]	; (8007b38 <HAL_RCC_GetSysClockFreq+0x358>)
 8007852:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007856:	e1e7      	b.n	8007c28 <HAL_RCC_GetSysClockFreq+0x448>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 800775c:	4bb8      	ldr	r3, [pc, #736]	; (8007a40 <HAL_RCC_GetSysClockFreq+0x35c>)
 800775e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007762:	e1e3      	b.n	8007b2c <HAL_RCC_GetSysClockFreq+0x448>
=======
 8007858:	4bb8      	ldr	r3, [pc, #736]	; (8007b3c <HAL_RCC_GetSysClockFreq+0x35c>)
 800785a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800785e:	e1e3      	b.n	8007c28 <HAL_RCC_GetSysClockFreq+0x448>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 8007764:	4bb4      	ldr	r3, [pc, #720]	; (8007a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800776c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007770:	4bb1      	ldr	r3, [pc, #708]	; (8007a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d071      	beq.n	8007860 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800777c:	4bae      	ldr	r3, [pc, #696]	; (8007a38 <HAL_RCC_GetSysClockFreq+0x354>)
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	099b      	lsrs	r3, r3, #6
 8007782:	2200      	movs	r2, #0
 8007784:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007788:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800778c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007794:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007798:	2300      	movs	r3, #0
 800779a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800779e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80077a2:	4622      	mov	r2, r4
 80077a4:	462b      	mov	r3, r5
 80077a6:	f04f 0000 	mov.w	r0, #0
 80077aa:	f04f 0100 	mov.w	r1, #0
 80077ae:	0159      	lsls	r1, r3, #5
 80077b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077b4:	0150      	lsls	r0, r2, #5
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	4621      	mov	r1, r4
 80077bc:	1a51      	subs	r1, r2, r1
 80077be:	6439      	str	r1, [r7, #64]	; 0x40
 80077c0:	4629      	mov	r1, r5
 80077c2:	eb63 0301 	sbc.w	r3, r3, r1
 80077c6:	647b      	str	r3, [r7, #68]	; 0x44
 80077c8:	f04f 0200 	mov.w	r2, #0
 80077cc:	f04f 0300 	mov.w	r3, #0
 80077d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80077d4:	4649      	mov	r1, r9
 80077d6:	018b      	lsls	r3, r1, #6
 80077d8:	4641      	mov	r1, r8
 80077da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80077de:	4641      	mov	r1, r8
 80077e0:	018a      	lsls	r2, r1, #6
 80077e2:	4641      	mov	r1, r8
 80077e4:	1a51      	subs	r1, r2, r1
 80077e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80077e8:	4649      	mov	r1, r9
 80077ea:	eb63 0301 	sbc.w	r3, r3, r1
 80077ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077f0:	f04f 0200 	mov.w	r2, #0
 80077f4:	f04f 0300 	mov.w	r3, #0
 80077f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80077fc:	4649      	mov	r1, r9
 80077fe:	00cb      	lsls	r3, r1, #3
 8007800:	4641      	mov	r1, r8
 8007802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007806:	4641      	mov	r1, r8
 8007808:	00ca      	lsls	r2, r1, #3
 800780a:	4610      	mov	r0, r2
 800780c:	4619      	mov	r1, r3
 800780e:	4603      	mov	r3, r0
 8007810:	4622      	mov	r2, r4
 8007812:	189b      	adds	r3, r3, r2
 8007814:	633b      	str	r3, [r7, #48]	; 0x30
 8007816:	462b      	mov	r3, r5
 8007818:	460a      	mov	r2, r1
 800781a:	eb42 0303 	adc.w	r3, r2, r3
 800781e:	637b      	str	r3, [r7, #52]	; 0x34
 8007820:	f04f 0200 	mov.w	r2, #0
 8007824:	f04f 0300 	mov.w	r3, #0
 8007828:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800782c:	4629      	mov	r1, r5
 800782e:	024b      	lsls	r3, r1, #9
 8007830:	4621      	mov	r1, r4
 8007832:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007836:	4621      	mov	r1, r4
 8007838:	024a      	lsls	r2, r1, #9
 800783a:	4610      	mov	r0, r2
 800783c:	4619      	mov	r1, r3
 800783e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007842:	2200      	movs	r2, #0
 8007844:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007848:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800784c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007850:	f7f9 f864 	bl	800091c <__aeabi_uldivmod>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	4613      	mov	r3, r2
 800785a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800785e:	e067      	b.n	8007930 <HAL_RCC_GetSysClockFreq+0x24c>
=======
 8007860:	4bb4      	ldr	r3, [pc, #720]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007868:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800786c:	4bb1      	ldr	r3, [pc, #708]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x354>)
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d071      	beq.n	800795c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007878:	4bae      	ldr	r3, [pc, #696]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x354>)
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	099b      	lsrs	r3, r3, #6
 800787e:	2200      	movs	r2, #0
 8007880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007884:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007888:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800788c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007890:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007894:	2300      	movs	r3, #0
 8007896:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800789a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800789e:	4622      	mov	r2, r4
 80078a0:	462b      	mov	r3, r5
 80078a2:	f04f 0000 	mov.w	r0, #0
 80078a6:	f04f 0100 	mov.w	r1, #0
 80078aa:	0159      	lsls	r1, r3, #5
 80078ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078b0:	0150      	lsls	r0, r2, #5
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	4621      	mov	r1, r4
 80078b8:	1a51      	subs	r1, r2, r1
 80078ba:	6439      	str	r1, [r7, #64]	; 0x40
 80078bc:	4629      	mov	r1, r5
 80078be:	eb63 0301 	sbc.w	r3, r3, r1
 80078c2:	647b      	str	r3, [r7, #68]	; 0x44
 80078c4:	f04f 0200 	mov.w	r2, #0
 80078c8:	f04f 0300 	mov.w	r3, #0
 80078cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80078d0:	4649      	mov	r1, r9
 80078d2:	018b      	lsls	r3, r1, #6
 80078d4:	4641      	mov	r1, r8
 80078d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80078da:	4641      	mov	r1, r8
 80078dc:	018a      	lsls	r2, r1, #6
 80078de:	4641      	mov	r1, r8
 80078e0:	1a51      	subs	r1, r2, r1
 80078e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80078e4:	4649      	mov	r1, r9
 80078e6:	eb63 0301 	sbc.w	r3, r3, r1
 80078ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078ec:	f04f 0200 	mov.w	r2, #0
 80078f0:	f04f 0300 	mov.w	r3, #0
 80078f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80078f8:	4649      	mov	r1, r9
 80078fa:	00cb      	lsls	r3, r1, #3
 80078fc:	4641      	mov	r1, r8
 80078fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007902:	4641      	mov	r1, r8
 8007904:	00ca      	lsls	r2, r1, #3
 8007906:	4610      	mov	r0, r2
 8007908:	4619      	mov	r1, r3
 800790a:	4603      	mov	r3, r0
 800790c:	4622      	mov	r2, r4
 800790e:	189b      	adds	r3, r3, r2
 8007910:	633b      	str	r3, [r7, #48]	; 0x30
 8007912:	462b      	mov	r3, r5
 8007914:	460a      	mov	r2, r1
 8007916:	eb42 0303 	adc.w	r3, r2, r3
 800791a:	637b      	str	r3, [r7, #52]	; 0x34
 800791c:	f04f 0200 	mov.w	r2, #0
 8007920:	f04f 0300 	mov.w	r3, #0
 8007924:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007928:	4629      	mov	r1, r5
 800792a:	024b      	lsls	r3, r1, #9
 800792c:	4621      	mov	r1, r4
 800792e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007932:	4621      	mov	r1, r4
 8007934:	024a      	lsls	r2, r1, #9
 8007936:	4610      	mov	r0, r2
 8007938:	4619      	mov	r1, r3
 800793a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800793e:	2200      	movs	r2, #0
 8007940:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007944:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007948:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800794c:	f7f8 ffe6 	bl	800091c <__aeabi_uldivmod>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4613      	mov	r3, r2
 8007956:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800795a:	e067      	b.n	8007a2c <HAL_RCC_GetSysClockFreq+0x24c>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8007860:	4b75      	ldr	r3, [pc, #468]	; (8007a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	099b      	lsrs	r3, r3, #6
 8007866:	2200      	movs	r2, #0
 8007868:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800786c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007870:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007878:	67bb      	str	r3, [r7, #120]	; 0x78
 800787a:	2300      	movs	r3, #0
 800787c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800787e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007882:	4622      	mov	r2, r4
 8007884:	462b      	mov	r3, r5
 8007886:	f04f 0000 	mov.w	r0, #0
 800788a:	f04f 0100 	mov.w	r1, #0
 800788e:	0159      	lsls	r1, r3, #5
 8007890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007894:	0150      	lsls	r0, r2, #5
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	4621      	mov	r1, r4
 800789c:	1a51      	subs	r1, r2, r1
 800789e:	62b9      	str	r1, [r7, #40]	; 0x28
 80078a0:	4629      	mov	r1, r5
 80078a2:	eb63 0301 	sbc.w	r3, r3, r1
 80078a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078a8:	f04f 0200 	mov.w	r2, #0
 80078ac:	f04f 0300 	mov.w	r3, #0
 80078b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80078b4:	4649      	mov	r1, r9
 80078b6:	018b      	lsls	r3, r1, #6
 80078b8:	4641      	mov	r1, r8
 80078ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80078be:	4641      	mov	r1, r8
 80078c0:	018a      	lsls	r2, r1, #6
 80078c2:	4641      	mov	r1, r8
 80078c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80078c8:	4649      	mov	r1, r9
 80078ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80078ce:	f04f 0200 	mov.w	r2, #0
 80078d2:	f04f 0300 	mov.w	r3, #0
 80078d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80078de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078e2:	4692      	mov	sl, r2
 80078e4:	469b      	mov	fp, r3
 80078e6:	4623      	mov	r3, r4
 80078e8:	eb1a 0303 	adds.w	r3, sl, r3
 80078ec:	623b      	str	r3, [r7, #32]
 80078ee:	462b      	mov	r3, r5
 80078f0:	eb4b 0303 	adc.w	r3, fp, r3
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
 80078f6:	f04f 0200 	mov.w	r2, #0
 80078fa:	f04f 0300 	mov.w	r3, #0
 80078fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007902:	4629      	mov	r1, r5
 8007904:	028b      	lsls	r3, r1, #10
 8007906:	4621      	mov	r1, r4
 8007908:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800790c:	4621      	mov	r1, r4
 800790e:	028a      	lsls	r2, r1, #10
 8007910:	4610      	mov	r0, r2
 8007912:	4619      	mov	r1, r3
 8007914:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007918:	2200      	movs	r2, #0
 800791a:	673b      	str	r3, [r7, #112]	; 0x70
 800791c:	677a      	str	r2, [r7, #116]	; 0x74
 800791e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007922:	f7f8 fffb 	bl	800091c <__aeabi_uldivmod>
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	4613      	mov	r3, r2
 800792c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007930:	4b41      	ldr	r3, [pc, #260]	; (8007a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	0c1b      	lsrs	r3, r3, #16
 8007936:	f003 0303 	and.w	r3, r3, #3
 800793a:	3301      	adds	r3, #1
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007946:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800794a:	fbb2 f3f3 	udiv	r3, r2, r3
 800794e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007952:	e0eb      	b.n	8007b2c <HAL_RCC_GetSysClockFreq+0x448>
=======
 800795c:	4b75      	ldr	r3, [pc, #468]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x354>)
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	099b      	lsrs	r3, r3, #6
 8007962:	2200      	movs	r2, #0
 8007964:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007968:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800796c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007974:	67bb      	str	r3, [r7, #120]	; 0x78
 8007976:	2300      	movs	r3, #0
 8007978:	67fb      	str	r3, [r7, #124]	; 0x7c
 800797a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800797e:	4622      	mov	r2, r4
 8007980:	462b      	mov	r3, r5
 8007982:	f04f 0000 	mov.w	r0, #0
 8007986:	f04f 0100 	mov.w	r1, #0
 800798a:	0159      	lsls	r1, r3, #5
 800798c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007990:	0150      	lsls	r0, r2, #5
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	4621      	mov	r1, r4
 8007998:	1a51      	subs	r1, r2, r1
 800799a:	62b9      	str	r1, [r7, #40]	; 0x28
 800799c:	4629      	mov	r1, r5
 800799e:	eb63 0301 	sbc.w	r3, r3, r1
 80079a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80079a4:	f04f 0200 	mov.w	r2, #0
 80079a8:	f04f 0300 	mov.w	r3, #0
 80079ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80079b0:	4649      	mov	r1, r9
 80079b2:	018b      	lsls	r3, r1, #6
 80079b4:	4641      	mov	r1, r8
 80079b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80079ba:	4641      	mov	r1, r8
 80079bc:	018a      	lsls	r2, r1, #6
 80079be:	4641      	mov	r1, r8
 80079c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80079c4:	4649      	mov	r1, r9
 80079c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80079ca:	f04f 0200 	mov.w	r2, #0
 80079ce:	f04f 0300 	mov.w	r3, #0
 80079d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079de:	4692      	mov	sl, r2
 80079e0:	469b      	mov	fp, r3
 80079e2:	4623      	mov	r3, r4
 80079e4:	eb1a 0303 	adds.w	r3, sl, r3
 80079e8:	623b      	str	r3, [r7, #32]
 80079ea:	462b      	mov	r3, r5
 80079ec:	eb4b 0303 	adc.w	r3, fp, r3
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
 80079f2:	f04f 0200 	mov.w	r2, #0
 80079f6:	f04f 0300 	mov.w	r3, #0
 80079fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80079fe:	4629      	mov	r1, r5
 8007a00:	028b      	lsls	r3, r1, #10
 8007a02:	4621      	mov	r1, r4
 8007a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a08:	4621      	mov	r1, r4
 8007a0a:	028a      	lsls	r2, r1, #10
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	4619      	mov	r1, r3
 8007a10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a14:	2200      	movs	r2, #0
 8007a16:	673b      	str	r3, [r7, #112]	; 0x70
 8007a18:	677a      	str	r2, [r7, #116]	; 0x74
 8007a1a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007a1e:	f7f8 ff7d 	bl	800091c <__aeabi_uldivmod>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	4613      	mov	r3, r2
 8007a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a2c:	4b41      	ldr	r3, [pc, #260]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	0c1b      	lsrs	r3, r3, #16
 8007a32:	f003 0303 	and.w	r3, r3, #3
 8007a36:	3301      	adds	r3, #1
 8007a38:	005b      	lsls	r3, r3, #1
 8007a3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007a3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007a4e:	e0eb      	b.n	8007c28 <HAL_RCC_GetSysClockFreq+0x448>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 8007954:	4b38      	ldr	r3, [pc, #224]	; (8007a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800795c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007960:	4b35      	ldr	r3, [pc, #212]	; (8007a38 <HAL_RCC_GetSysClockFreq+0x354>)
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d06b      	beq.n	8007a44 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800796c:	4b32      	ldr	r3, [pc, #200]	; (8007a38 <HAL_RCC_GetSysClockFreq+0x354>)
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	099b      	lsrs	r3, r3, #6
 8007972:	2200      	movs	r2, #0
 8007974:	66bb      	str	r3, [r7, #104]	; 0x68
 8007976:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007978:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800797a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797e:	663b      	str	r3, [r7, #96]	; 0x60
 8007980:	2300      	movs	r3, #0
 8007982:	667b      	str	r3, [r7, #100]	; 0x64
 8007984:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007988:	4622      	mov	r2, r4
 800798a:	462b      	mov	r3, r5
 800798c:	f04f 0000 	mov.w	r0, #0
 8007990:	f04f 0100 	mov.w	r1, #0
 8007994:	0159      	lsls	r1, r3, #5
 8007996:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800799a:	0150      	lsls	r0, r2, #5
 800799c:	4602      	mov	r2, r0
 800799e:	460b      	mov	r3, r1
 80079a0:	4621      	mov	r1, r4
 80079a2:	1a51      	subs	r1, r2, r1
 80079a4:	61b9      	str	r1, [r7, #24]
 80079a6:	4629      	mov	r1, r5
 80079a8:	eb63 0301 	sbc.w	r3, r3, r1
 80079ac:	61fb      	str	r3, [r7, #28]
 80079ae:	f04f 0200 	mov.w	r2, #0
 80079b2:	f04f 0300 	mov.w	r3, #0
 80079b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80079ba:	4659      	mov	r1, fp
 80079bc:	018b      	lsls	r3, r1, #6
 80079be:	4651      	mov	r1, sl
 80079c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80079c4:	4651      	mov	r1, sl
 80079c6:	018a      	lsls	r2, r1, #6
 80079c8:	4651      	mov	r1, sl
 80079ca:	ebb2 0801 	subs.w	r8, r2, r1
 80079ce:	4659      	mov	r1, fp
 80079d0:	eb63 0901 	sbc.w	r9, r3, r1
 80079d4:	f04f 0200 	mov.w	r2, #0
 80079d8:	f04f 0300 	mov.w	r3, #0
 80079dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079e8:	4690      	mov	r8, r2
 80079ea:	4699      	mov	r9, r3
 80079ec:	4623      	mov	r3, r4
 80079ee:	eb18 0303 	adds.w	r3, r8, r3
 80079f2:	613b      	str	r3, [r7, #16]
 80079f4:	462b      	mov	r3, r5
 80079f6:	eb49 0303 	adc.w	r3, r9, r3
 80079fa:	617b      	str	r3, [r7, #20]
 80079fc:	f04f 0200 	mov.w	r2, #0
 8007a00:	f04f 0300 	mov.w	r3, #0
 8007a04:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007a08:	4629      	mov	r1, r5
 8007a0a:	024b      	lsls	r3, r1, #9
 8007a0c:	4621      	mov	r1, r4
 8007a0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007a12:	4621      	mov	r1, r4
 8007a14:	024a      	lsls	r2, r1, #9
 8007a16:	4610      	mov	r0, r2
 8007a18:	4619      	mov	r1, r3
 8007a1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a1e:	2200      	movs	r2, #0
 8007a20:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a22:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007a24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a28:	f7f8 ff78 	bl	800091c <__aeabi_uldivmod>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4613      	mov	r3, r2
 8007a32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a36:	e065      	b.n	8007b04 <HAL_RCC_GetSysClockFreq+0x420>
 8007a38:	40023800 	.word	0x40023800
 8007a3c:	00f42400 	.word	0x00f42400
 8007a40:	007a1200 	.word	0x007a1200
=======
 8007a50:	4b38      	ldr	r3, [pc, #224]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a5c:	4b35      	ldr	r3, [pc, #212]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d06b      	beq.n	8007b40 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a68:	4b32      	ldr	r3, [pc, #200]	; (8007b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	099b      	lsrs	r3, r3, #6
 8007a6e:	2200      	movs	r2, #0
 8007a70:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a7a:	663b      	str	r3, [r7, #96]	; 0x60
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	667b      	str	r3, [r7, #100]	; 0x64
 8007a80:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007a84:	4622      	mov	r2, r4
 8007a86:	462b      	mov	r3, r5
 8007a88:	f04f 0000 	mov.w	r0, #0
 8007a8c:	f04f 0100 	mov.w	r1, #0
 8007a90:	0159      	lsls	r1, r3, #5
 8007a92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a96:	0150      	lsls	r0, r2, #5
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4621      	mov	r1, r4
 8007a9e:	1a51      	subs	r1, r2, r1
 8007aa0:	61b9      	str	r1, [r7, #24]
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	eb63 0301 	sbc.w	r3, r3, r1
 8007aa8:	61fb      	str	r3, [r7, #28]
 8007aaa:	f04f 0200 	mov.w	r2, #0
 8007aae:	f04f 0300 	mov.w	r3, #0
 8007ab2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007ab6:	4659      	mov	r1, fp
 8007ab8:	018b      	lsls	r3, r1, #6
 8007aba:	4651      	mov	r1, sl
 8007abc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007ac0:	4651      	mov	r1, sl
 8007ac2:	018a      	lsls	r2, r1, #6
 8007ac4:	4651      	mov	r1, sl
 8007ac6:	ebb2 0801 	subs.w	r8, r2, r1
 8007aca:	4659      	mov	r1, fp
 8007acc:	eb63 0901 	sbc.w	r9, r3, r1
 8007ad0:	f04f 0200 	mov.w	r2, #0
 8007ad4:	f04f 0300 	mov.w	r3, #0
 8007ad8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007adc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ae0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ae4:	4690      	mov	r8, r2
 8007ae6:	4699      	mov	r9, r3
 8007ae8:	4623      	mov	r3, r4
 8007aea:	eb18 0303 	adds.w	r3, r8, r3
 8007aee:	613b      	str	r3, [r7, #16]
 8007af0:	462b      	mov	r3, r5
 8007af2:	eb49 0303 	adc.w	r3, r9, r3
 8007af6:	617b      	str	r3, [r7, #20]
 8007af8:	f04f 0200 	mov.w	r2, #0
 8007afc:	f04f 0300 	mov.w	r3, #0
 8007b00:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007b04:	4629      	mov	r1, r5
 8007b06:	024b      	lsls	r3, r1, #9
 8007b08:	4621      	mov	r1, r4
 8007b0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007b0e:	4621      	mov	r1, r4
 8007b10:	024a      	lsls	r2, r1, #9
 8007b12:	4610      	mov	r0, r2
 8007b14:	4619      	mov	r1, r3
 8007b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b1e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007b20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007b24:	f7f8 fefa 	bl	800091c <__aeabi_uldivmod>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b32:	e065      	b.n	8007c00 <HAL_RCC_GetSysClockFreq+0x420>
 8007b34:	40023800 	.word	0x40023800
 8007b38:	00f42400 	.word	0x00f42400
 8007b3c:	007a1200 	.word	0x007a1200
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 8007a44:	4b3d      	ldr	r3, [pc, #244]	; (8007b3c <HAL_RCC_GetSysClockFreq+0x458>)
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	099b      	lsrs	r3, r3, #6
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	4611      	mov	r1, r2
 8007a50:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007a54:	653b      	str	r3, [r7, #80]	; 0x50
 8007a56:	2300      	movs	r3, #0
 8007a58:	657b      	str	r3, [r7, #84]	; 0x54
 8007a5a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007a5e:	4642      	mov	r2, r8
 8007a60:	464b      	mov	r3, r9
 8007a62:	f04f 0000 	mov.w	r0, #0
 8007a66:	f04f 0100 	mov.w	r1, #0
 8007a6a:	0159      	lsls	r1, r3, #5
 8007a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a70:	0150      	lsls	r0, r2, #5
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	4641      	mov	r1, r8
 8007a78:	1a51      	subs	r1, r2, r1
 8007a7a:	60b9      	str	r1, [r7, #8]
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	f04f 0200 	mov.w	r2, #0
 8007a88:	f04f 0300 	mov.w	r3, #0
 8007a8c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007a90:	4659      	mov	r1, fp
 8007a92:	018b      	lsls	r3, r1, #6
 8007a94:	4651      	mov	r1, sl
 8007a96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a9a:	4651      	mov	r1, sl
 8007a9c:	018a      	lsls	r2, r1, #6
 8007a9e:	4651      	mov	r1, sl
 8007aa0:	1a54      	subs	r4, r2, r1
 8007aa2:	4659      	mov	r1, fp
 8007aa4:	eb63 0501 	sbc.w	r5, r3, r1
 8007aa8:	f04f 0200 	mov.w	r2, #0
 8007aac:	f04f 0300 	mov.w	r3, #0
 8007ab0:	00eb      	lsls	r3, r5, #3
 8007ab2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ab6:	00e2      	lsls	r2, r4, #3
 8007ab8:	4614      	mov	r4, r2
 8007aba:	461d      	mov	r5, r3
 8007abc:	4643      	mov	r3, r8
 8007abe:	18e3      	adds	r3, r4, r3
 8007ac0:	603b      	str	r3, [r7, #0]
 8007ac2:	464b      	mov	r3, r9
 8007ac4:	eb45 0303 	adc.w	r3, r5, r3
 8007ac8:	607b      	str	r3, [r7, #4]
 8007aca:	f04f 0200 	mov.w	r2, #0
 8007ace:	f04f 0300 	mov.w	r3, #0
 8007ad2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	028b      	lsls	r3, r1, #10
 8007ada:	4621      	mov	r1, r4
 8007adc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	028a      	lsls	r2, r1, #10
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007aec:	2200      	movs	r2, #0
 8007aee:	64bb      	str	r3, [r7, #72]	; 0x48
 8007af0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007af2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007af6:	f7f8 ff11 	bl	800091c <__aeabi_uldivmod>
 8007afa:	4602      	mov	r2, r0
 8007afc:	460b      	mov	r3, r1
 8007afe:	4613      	mov	r3, r2
 8007b00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007b04:	4b0d      	ldr	r3, [pc, #52]	; (8007b3c <HAL_RCC_GetSysClockFreq+0x458>)
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	0f1b      	lsrs	r3, r3, #28
 8007b0a:	f003 0307 	and.w	r3, r3, #7
 8007b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007b12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007b22:	e003      	b.n	8007b2c <HAL_RCC_GetSysClockFreq+0x448>
=======
 8007b40:	4b3d      	ldr	r3, [pc, #244]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x458>)
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	099b      	lsrs	r3, r3, #6
 8007b46:	2200      	movs	r2, #0
 8007b48:	4618      	mov	r0, r3
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007b50:	653b      	str	r3, [r7, #80]	; 0x50
 8007b52:	2300      	movs	r3, #0
 8007b54:	657b      	str	r3, [r7, #84]	; 0x54
 8007b56:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007b5a:	4642      	mov	r2, r8
 8007b5c:	464b      	mov	r3, r9
 8007b5e:	f04f 0000 	mov.w	r0, #0
 8007b62:	f04f 0100 	mov.w	r1, #0
 8007b66:	0159      	lsls	r1, r3, #5
 8007b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b6c:	0150      	lsls	r0, r2, #5
 8007b6e:	4602      	mov	r2, r0
 8007b70:	460b      	mov	r3, r1
 8007b72:	4641      	mov	r1, r8
 8007b74:	1a51      	subs	r1, r2, r1
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	4649      	mov	r1, r9
 8007b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8007b7e:	60fb      	str	r3, [r7, #12]
 8007b80:	f04f 0200 	mov.w	r2, #0
 8007b84:	f04f 0300 	mov.w	r3, #0
 8007b88:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007b8c:	4659      	mov	r1, fp
 8007b8e:	018b      	lsls	r3, r1, #6
 8007b90:	4651      	mov	r1, sl
 8007b92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007b96:	4651      	mov	r1, sl
 8007b98:	018a      	lsls	r2, r1, #6
 8007b9a:	4651      	mov	r1, sl
 8007b9c:	1a54      	subs	r4, r2, r1
 8007b9e:	4659      	mov	r1, fp
 8007ba0:	eb63 0501 	sbc.w	r5, r3, r1
 8007ba4:	f04f 0200 	mov.w	r2, #0
 8007ba8:	f04f 0300 	mov.w	r3, #0
 8007bac:	00eb      	lsls	r3, r5, #3
 8007bae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bb2:	00e2      	lsls	r2, r4, #3
 8007bb4:	4614      	mov	r4, r2
 8007bb6:	461d      	mov	r5, r3
 8007bb8:	4643      	mov	r3, r8
 8007bba:	18e3      	adds	r3, r4, r3
 8007bbc:	603b      	str	r3, [r7, #0]
 8007bbe:	464b      	mov	r3, r9
 8007bc0:	eb45 0303 	adc.w	r3, r5, r3
 8007bc4:	607b      	str	r3, [r7, #4]
 8007bc6:	f04f 0200 	mov.w	r2, #0
 8007bca:	f04f 0300 	mov.w	r3, #0
 8007bce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007bd2:	4629      	mov	r1, r5
 8007bd4:	028b      	lsls	r3, r1, #10
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007bdc:	4621      	mov	r1, r4
 8007bde:	028a      	lsls	r2, r1, #10
 8007be0:	4610      	mov	r0, r2
 8007be2:	4619      	mov	r1, r3
 8007be4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007be8:	2200      	movs	r2, #0
 8007bea:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bec:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007bee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007bf2:	f7f8 fe93 	bl	800091c <__aeabi_uldivmod>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007c00:	4b0d      	ldr	r3, [pc, #52]	; (8007c38 <HAL_RCC_GetSysClockFreq+0x458>)
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	0f1b      	lsrs	r3, r3, #28
 8007c06:	f003 0307 	and.w	r3, r3, #7
 8007c0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8007c0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007c1e:	e003      	b.n	8007c28 <HAL_RCC_GetSysClockFreq+0x448>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8007b24:	4b06      	ldr	r3, [pc, #24]	; (8007b40 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007b26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007b2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	37b8      	adds	r7, #184	; 0xb8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b3a:	bf00      	nop
 8007b3c:	40023800 	.word	0x40023800
 8007b40:	00f42400 	.word	0x00f42400

08007b44 <HAL_RCC_OscConfig>:
=======
 8007c20:	4b06      	ldr	r3, [pc, #24]	; (8007c3c <HAL_RCC_GetSysClockFreq+0x45c>)
 8007c22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007c26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	37b8      	adds	r7, #184	; 0xb8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c36:	bf00      	nop
 8007c38:	40023800 	.word	0x40023800
 8007c3c:	00f42400 	.word	0x00f42400

08007c40 <HAL_RCC_OscConfig>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
=======
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e347      	b.n	80081e6 <HAL_RCC_OscConfig+0x6a2>
=======
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e347      	b.n	80082e2 <HAL_RCC_OscConfig+0x6a2>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
<<<<<<< HEAD
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b0f      	cmp	r3, #15
 8007b5c:	d904      	bls.n	8007b68 <HAL_RCC_OscConfig+0x24>
 8007b5e:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 8007b62:	4893      	ldr	r0, [pc, #588]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007b64:	f7fa f8e9 	bl	8001d3a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 8096 	beq.w	8007ca2 <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00e      	beq.n	8007b9c <HAL_RCC_OscConfig+0x58>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b86:	d009      	beq.n	8007b9c <HAL_RCC_OscConfig+0x58>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b90:	d004      	beq.n	8007b9c <HAL_RCC_OscConfig+0x58>
 8007b92:	f640 5115 	movw	r1, #3349	; 0xd15
 8007b96:	4886      	ldr	r0, [pc, #536]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007b98:	f7fa f8cf 	bl	8001d3a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007b9c:	4b85      	ldr	r3, [pc, #532]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	f003 030c 	and.w	r3, r3, #12
 8007ba4:	2b04      	cmp	r3, #4
 8007ba6:	d019      	beq.n	8007bdc <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007ba8:	4b82      	ldr	r3, [pc, #520]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007bb0:	2b08      	cmp	r3, #8
 8007bb2:	d106      	bne.n	8007bc2 <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007bb4:	4b7f      	ldr	r3, [pc, #508]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bc0:	d00c      	beq.n	8007bdc <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bc2:	4b7c      	ldr	r3, [pc, #496]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007bca:	2b0c      	cmp	r3, #12
 8007bcc:	d112      	bne.n	8007bf4 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bce:	4b79      	ldr	r3, [pc, #484]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bda:	d10b      	bne.n	8007bf4 <HAL_RCC_OscConfig+0xb0>
=======
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2b0f      	cmp	r3, #15
 8007c58:	d904      	bls.n	8007c64 <HAL_RCC_OscConfig+0x24>
 8007c5a:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 8007c5e:	4893      	ldr	r0, [pc, #588]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007c60:	f7fa f8e9 	bl	8001e36 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f000 8096 	beq.w	8007d9e <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00e      	beq.n	8007c98 <HAL_RCC_OscConfig+0x58>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c82:	d009      	beq.n	8007c98 <HAL_RCC_OscConfig+0x58>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c8c:	d004      	beq.n	8007c98 <HAL_RCC_OscConfig+0x58>
 8007c8e:	f640 5115 	movw	r1, #3349	; 0xd15
 8007c92:	4886      	ldr	r0, [pc, #536]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007c94:	f7fa f8cf 	bl	8001e36 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007c98:	4b85      	ldr	r3, [pc, #532]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f003 030c 	and.w	r3, r3, #12
 8007ca0:	2b04      	cmp	r3, #4
 8007ca2:	d019      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007ca4:	4b82      	ldr	r3, [pc, #520]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007cac:	2b08      	cmp	r3, #8
 8007cae:	d106      	bne.n	8007cbe <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007cb0:	4b7f      	ldr	r3, [pc, #508]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cbc:	d00c      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cbe:	4b7c      	ldr	r3, [pc, #496]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007cc6:	2b0c      	cmp	r3, #12
 8007cc8:	d112      	bne.n	8007cf0 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cca:	4b79      	ldr	r3, [pc, #484]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cd6:	d10b      	bne.n	8007cf0 <HAL_RCC_OscConfig+0xb0>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
<<<<<<< HEAD
 8007bdc:	4b75      	ldr	r3, [pc, #468]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d05b      	beq.n	8007ca0 <HAL_RCC_OscConfig+0x15c>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d157      	bne.n	8007ca0 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e2f8      	b.n	80081e6 <HAL_RCC_OscConfig+0x6a2>
=======
 8007cd8:	4b75      	ldr	r3, [pc, #468]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d05b      	beq.n	8007d9c <HAL_RCC_OscConfig+0x15c>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d157      	bne.n	8007d9c <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e2f8      	b.n	80082e2 <HAL_RCC_OscConfig+0x6a2>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bfc:	d106      	bne.n	8007c0c <HAL_RCC_OscConfig+0xc8>
 8007bfe:	4b6d      	ldr	r3, [pc, #436]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a6c      	ldr	r2, [pc, #432]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c08:	6013      	str	r3, [r2, #0]
 8007c0a:	e01d      	b.n	8007c48 <HAL_RCC_OscConfig+0x104>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c14:	d10c      	bne.n	8007c30 <HAL_RCC_OscConfig+0xec>
 8007c16:	4b67      	ldr	r3, [pc, #412]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a66      	ldr	r2, [pc, #408]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c20:	6013      	str	r3, [r2, #0]
 8007c22:	4b64      	ldr	r3, [pc, #400]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a63      	ldr	r2, [pc, #396]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c2c:	6013      	str	r3, [r2, #0]
 8007c2e:	e00b      	b.n	8007c48 <HAL_RCC_OscConfig+0x104>
 8007c30:	4b60      	ldr	r3, [pc, #384]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a5f      	ldr	r2, [pc, #380]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c3a:	6013      	str	r3, [r2, #0]
 8007c3c:	4b5d      	ldr	r3, [pc, #372]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a5c      	ldr	r2, [pc, #368]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d013      	beq.n	8007c78 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c50:	f7fa fc52 	bl	80024f8 <HAL_GetTick>
 8007c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c56:	e008      	b.n	8007c6a <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c58:	f7fa fc4e 	bl	80024f8 <HAL_GetTick>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	2b64      	cmp	r3, #100	; 0x64
 8007c64:	d901      	bls.n	8007c6a <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e2bd      	b.n	80081e6 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c6a:	4b52      	ldr	r3, [pc, #328]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d0f0      	beq.n	8007c58 <HAL_RCC_OscConfig+0x114>
 8007c76:	e014      	b.n	8007ca2 <HAL_RCC_OscConfig+0x15e>
=======
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cf8:	d106      	bne.n	8007d08 <HAL_RCC_OscConfig+0xc8>
 8007cfa:	4b6d      	ldr	r3, [pc, #436]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a6c      	ldr	r2, [pc, #432]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d04:	6013      	str	r3, [r2, #0]
 8007d06:	e01d      	b.n	8007d44 <HAL_RCC_OscConfig+0x104>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d10:	d10c      	bne.n	8007d2c <HAL_RCC_OscConfig+0xec>
 8007d12:	4b67      	ldr	r3, [pc, #412]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a66      	ldr	r2, [pc, #408]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d1c:	6013      	str	r3, [r2, #0]
 8007d1e:	4b64      	ldr	r3, [pc, #400]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a63      	ldr	r2, [pc, #396]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d28:	6013      	str	r3, [r2, #0]
 8007d2a:	e00b      	b.n	8007d44 <HAL_RCC_OscConfig+0x104>
 8007d2c:	4b60      	ldr	r3, [pc, #384]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a5f      	ldr	r2, [pc, #380]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	4b5d      	ldr	r3, [pc, #372]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a5c      	ldr	r2, [pc, #368]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d013      	beq.n	8007d74 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d4c:	f7fa fc52 	bl	80025f4 <HAL_GetTick>
 8007d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d52:	e008      	b.n	8007d66 <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d54:	f7fa fc4e 	bl	80025f4 <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	2b64      	cmp	r3, #100	; 0x64
 8007d60:	d901      	bls.n	8007d66 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e2bd      	b.n	80082e2 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d66:	4b52      	ldr	r3, [pc, #328]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d0f0      	beq.n	8007d54 <HAL_RCC_OscConfig+0x114>
 8007d72:	e014      	b.n	8007d9e <HAL_RCC_OscConfig+0x15e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8007c78:	f7fa fc3e 	bl	80024f8 <HAL_GetTick>
 8007c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c7e:	e008      	b.n	8007c92 <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c80:	f7fa fc3a 	bl	80024f8 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	2b64      	cmp	r3, #100	; 0x64
 8007c8c:	d901      	bls.n	8007c92 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e2a9      	b.n	80081e6 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c92:	4b48      	ldr	r3, [pc, #288]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1f0      	bne.n	8007c80 <HAL_RCC_OscConfig+0x13c>
 8007c9e:	e000      	b.n	8007ca2 <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ca0:	bf00      	nop
=======
 8007d74:	f7fa fc3e 	bl	80025f4 <HAL_GetTick>
 8007d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d7a:	e008      	b.n	8007d8e <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d7c:	f7fa fc3a 	bl	80025f4 <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	2b64      	cmp	r3, #100	; 0x64
 8007d88:	d901      	bls.n	8007d8e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e2a9      	b.n	80082e2 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d8e:	4b48      	ldr	r3, [pc, #288]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1f0      	bne.n	8007d7c <HAL_RCC_OscConfig+0x13c>
 8007d9a:	e000      	b.n	8007d9e <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d9c:	bf00      	nop
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0302 	and.w	r3, r3, #2
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f000 808c 	beq.w	8007dc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d008      	beq.n	8007cca <HAL_RCC_OscConfig+0x186>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d004      	beq.n	8007cca <HAL_RCC_OscConfig+0x186>
 8007cc0:	f640 514d 	movw	r1, #3405	; 0xd4d
 8007cc4:	483a      	ldr	r0, [pc, #232]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007cc6:	f7fa f838 	bl	8001d3a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	2b1f      	cmp	r3, #31
 8007cd0:	d904      	bls.n	8007cdc <HAL_RCC_OscConfig+0x198>
 8007cd2:	f640 514e 	movw	r1, #3406	; 0xd4e
 8007cd6:	4836      	ldr	r0, [pc, #216]	; (8007db0 <HAL_RCC_OscConfig+0x26c>)
 8007cd8:	f7fa f82f 	bl	8001d3a <assert_failed>
=======
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f000 808c 	beq.w	8007ec4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d008      	beq.n	8007dc6 <HAL_RCC_OscConfig+0x186>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d004      	beq.n	8007dc6 <HAL_RCC_OscConfig+0x186>
 8007dbc:	f640 514d 	movw	r1, #3405	; 0xd4d
 8007dc0:	483a      	ldr	r0, [pc, #232]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007dc2:	f7fa f838 	bl	8001e36 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	2b1f      	cmp	r3, #31
 8007dcc:	d904      	bls.n	8007dd8 <HAL_RCC_OscConfig+0x198>
 8007dce:	f640 514e 	movw	r1, #3406	; 0xd4e
 8007dd2:	4836      	ldr	r0, [pc, #216]	; (8007eac <HAL_RCC_OscConfig+0x26c>)
 8007dd4:	f7fa f82f 	bl	8001e36 <assert_failed>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
<<<<<<< HEAD
 8007cdc:	4b35      	ldr	r3, [pc, #212]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f003 030c 	and.w	r3, r3, #12
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d017      	beq.n	8007d18 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007ce8:	4b32      	ldr	r3, [pc, #200]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007cf0:	2b08      	cmp	r3, #8
 8007cf2:	d105      	bne.n	8007d00 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007cf4:	4b2f      	ldr	r3, [pc, #188]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00b      	beq.n	8007d18 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d00:	4b2c      	ldr	r3, [pc, #176]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007d08:	2b0c      	cmp	r3, #12
 8007d0a:	d11c      	bne.n	8007d46 <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d0c:	4b29      	ldr	r3, [pc, #164]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d116      	bne.n	8007d46 <HAL_RCC_OscConfig+0x202>
=======
 8007dd8:	4b35      	ldr	r3, [pc, #212]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f003 030c 	and.w	r3, r3, #12
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d017      	beq.n	8007e14 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007de4:	4b32      	ldr	r3, [pc, #200]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007dec:	2b08      	cmp	r3, #8
 8007dee:	d105      	bne.n	8007dfc <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007df0:	4b2f      	ldr	r3, [pc, #188]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00b      	beq.n	8007e14 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dfc:	4b2c      	ldr	r3, [pc, #176]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007e04:	2b0c      	cmp	r3, #12
 8007e06:	d11c      	bne.n	8007e42 <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007e08:	4b29      	ldr	r3, [pc, #164]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d116      	bne.n	8007e42 <HAL_RCC_OscConfig+0x202>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
<<<<<<< HEAD
 8007d18:	4b26      	ldr	r3, [pc, #152]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0302 	and.w	r3, r3, #2
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d005      	beq.n	8007d30 <HAL_RCC_OscConfig+0x1ec>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d001      	beq.n	8007d30 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e25a      	b.n	80081e6 <HAL_RCC_OscConfig+0x6a2>
=======
 8007e14:	4b26      	ldr	r3, [pc, #152]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d005      	beq.n	8007e2c <HAL_RCC_OscConfig+0x1ec>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d001      	beq.n	8007e2c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e25a      	b.n	80082e2 <HAL_RCC_OscConfig+0x6a2>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8007d30:	4b20      	ldr	r3, [pc, #128]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	00db      	lsls	r3, r3, #3
 8007d3e:	491d      	ldr	r1, [pc, #116]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d44:	e040      	b.n	8007dc8 <HAL_RCC_OscConfig+0x284>
=======
 8007e2c:	4b20      	ldr	r3, [pc, #128]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	00db      	lsls	r3, r3, #3
 8007e3a:	491d      	ldr	r1, [pc, #116]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e40:	e040      	b.n	8007ec4 <HAL_RCC_OscConfig+0x284>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d020      	beq.n	8007d90 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d4e:	4b1a      	ldr	r3, [pc, #104]	; (8007db8 <HAL_RCC_OscConfig+0x274>)
 8007d50:	2201      	movs	r2, #1
 8007d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d54:	f7fa fbd0 	bl	80024f8 <HAL_GetTick>
 8007d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d5a:	e008      	b.n	8007d6e <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d5c:	f7fa fbcc 	bl	80024f8 <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d901      	bls.n	8007d6e <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e23b      	b.n	80081e6 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d6e:	4b11      	ldr	r3, [pc, #68]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0302 	and.w	r3, r3, #2
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d0f0      	beq.n	8007d5c <HAL_RCC_OscConfig+0x218>
=======
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d020      	beq.n	8007e8c <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e4a:	4b1a      	ldr	r3, [pc, #104]	; (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e50:	f7fa fbd0 	bl	80025f4 <HAL_GetTick>
 8007e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e56:	e008      	b.n	8007e6a <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e58:	f7fa fbcc 	bl	80025f4 <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d901      	bls.n	8007e6a <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e23b      	b.n	80082e2 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e6a:	4b11      	ldr	r3, [pc, #68]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 0302 	and.w	r3, r3, #2
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d0f0      	beq.n	8007e58 <HAL_RCC_OscConfig+0x218>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8007d7a:	4b0e      	ldr	r3, [pc, #56]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	00db      	lsls	r3, r3, #3
 8007d88:	490a      	ldr	r1, [pc, #40]	; (8007db4 <HAL_RCC_OscConfig+0x270>)
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	600b      	str	r3, [r1, #0]
 8007d8e:	e01b      	b.n	8007dc8 <HAL_RCC_OscConfig+0x284>
=======
 8007e76:	4b0e      	ldr	r3, [pc, #56]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	00db      	lsls	r3, r3, #3
 8007e84:	490a      	ldr	r1, [pc, #40]	; (8007eb0 <HAL_RCC_OscConfig+0x270>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	600b      	str	r3, [r1, #0]
 8007e8a:	e01b      	b.n	8007ec4 <HAL_RCC_OscConfig+0x284>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8007d90:	4b09      	ldr	r3, [pc, #36]	; (8007db8 <HAL_RCC_OscConfig+0x274>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d96:	f7fa fbaf 	bl	80024f8 <HAL_GetTick>
 8007d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d9c:	e00e      	b.n	8007dbc <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d9e:	f7fa fbab 	bl	80024f8 <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d907      	bls.n	8007dbc <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e21a      	b.n	80081e6 <HAL_RCC_OscConfig+0x6a2>
 8007db0:	0800c160 	.word	0x0800c160
 8007db4:	40023800 	.word	0x40023800
 8007db8:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dbc:	4b74      	ldr	r3, [pc, #464]	; (8007f90 <HAL_RCC_OscConfig+0x44c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0302 	and.w	r3, r3, #2
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1ea      	bne.n	8007d9e <HAL_RCC_OscConfig+0x25a>
=======
 8007e8c:	4b09      	ldr	r3, [pc, #36]	; (8007eb4 <HAL_RCC_OscConfig+0x274>)
 8007e8e:	2200      	movs	r2, #0
 8007e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e92:	f7fa fbaf 	bl	80025f4 <HAL_GetTick>
 8007e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e98:	e00e      	b.n	8007eb8 <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e9a:	f7fa fbab 	bl	80025f4 <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d907      	bls.n	8007eb8 <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e21a      	b.n	80082e2 <HAL_RCC_OscConfig+0x6a2>
 8007eac:	0800c260 	.word	0x0800c260
 8007eb0:	40023800 	.word	0x40023800
 8007eb4:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007eb8:	4b74      	ldr	r3, [pc, #464]	; (800808c <HAL_RCC_OscConfig+0x44c>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0302 	and.w	r3, r3, #2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1ea      	bne.n	8007e9a <HAL_RCC_OscConfig+0x25a>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0308 	and.w	r3, r3, #8
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d03d      	beq.n	8007e50 <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d008      	beq.n	8007dee <HAL_RCC_OscConfig+0x2aa>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	695b      	ldr	r3, [r3, #20]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d004      	beq.n	8007dee <HAL_RCC_OscConfig+0x2aa>
 8007de4:	f640 5194 	movw	r1, #3476	; 0xd94
 8007de8:	486a      	ldr	r0, [pc, #424]	; (8007f94 <HAL_RCC_OscConfig+0x450>)
 8007dea:	f7f9 ffa6 	bl	8001d3a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d016      	beq.n	8007e24 <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007df6:	4b68      	ldr	r3, [pc, #416]	; (8007f98 <HAL_RCC_OscConfig+0x454>)
 8007df8:	2201      	movs	r2, #1
 8007dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dfc:	f7fa fb7c 	bl	80024f8 <HAL_GetTick>
 8007e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e02:	e008      	b.n	8007e16 <HAL_RCC_OscConfig+0x2d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e04:	f7fa fb78 	bl	80024f8 <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d901      	bls.n	8007e16 <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e1e7      	b.n	80081e6 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e16:	4b5e      	ldr	r3, [pc, #376]	; (8007f90 <HAL_RCC_OscConfig+0x44c>)
 8007e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d0f0      	beq.n	8007e04 <HAL_RCC_OscConfig+0x2c0>
 8007e22:	e015      	b.n	8007e50 <HAL_RCC_OscConfig+0x30c>
=======
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0308 	and.w	r3, r3, #8
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d03d      	beq.n	8007f4c <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	695b      	ldr	r3, [r3, #20]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d008      	beq.n	8007eea <HAL_RCC_OscConfig+0x2aa>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d004      	beq.n	8007eea <HAL_RCC_OscConfig+0x2aa>
 8007ee0:	f640 5194 	movw	r1, #3476	; 0xd94
 8007ee4:	486a      	ldr	r0, [pc, #424]	; (8008090 <HAL_RCC_OscConfig+0x450>)
 8007ee6:	f7f9 ffa6 	bl	8001e36 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d016      	beq.n	8007f20 <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ef2:	4b68      	ldr	r3, [pc, #416]	; (8008094 <HAL_RCC_OscConfig+0x454>)
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ef8:	f7fa fb7c 	bl	80025f4 <HAL_GetTick>
 8007efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007efe:	e008      	b.n	8007f12 <HAL_RCC_OscConfig+0x2d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f00:	f7fa fb78 	bl	80025f4 <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d901      	bls.n	8007f12 <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e1e7      	b.n	80082e2 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007f12:	4b5e      	ldr	r3, [pc, #376]	; (800808c <HAL_RCC_OscConfig+0x44c>)
 8007f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f16:	f003 0302 	and.w	r3, r3, #2
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d0f0      	beq.n	8007f00 <HAL_RCC_OscConfig+0x2c0>
 8007f1e:	e015      	b.n	8007f4c <HAL_RCC_OscConfig+0x30c>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8007e24:	4b5c      	ldr	r3, [pc, #368]	; (8007f98 <HAL_RCC_OscConfig+0x454>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e2a:	f7fa fb65 	bl	80024f8 <HAL_GetTick>
 8007e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e30:	e008      	b.n	8007e44 <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e32:	f7fa fb61 	bl	80024f8 <HAL_GetTick>
 8007e36:	4602      	mov	r2, r0
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d901      	bls.n	8007e44 <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e1d0      	b.n	80081e6 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e44:	4b52      	ldr	r3, [pc, #328]	; (8007f90 <HAL_RCC_OscConfig+0x44c>)
 8007e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e48:	f003 0302 	and.w	r3, r3, #2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1f0      	bne.n	8007e32 <HAL_RCC_OscConfig+0x2ee>
=======
 8007f20:	4b5c      	ldr	r3, [pc, #368]	; (8008094 <HAL_RCC_OscConfig+0x454>)
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f26:	f7fa fb65 	bl	80025f4 <HAL_GetTick>
 8007f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f2c:	e008      	b.n	8007f40 <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f2e:	f7fa fb61 	bl	80025f4 <HAL_GetTick>
 8007f32:	4602      	mov	r2, r0
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d901      	bls.n	8007f40 <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e1d0      	b.n	80082e2 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f40:	4b52      	ldr	r3, [pc, #328]	; (800808c <HAL_RCC_OscConfig+0x44c>)
 8007f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f44:	f003 0302 	and.w	r3, r3, #2
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1f0      	bne.n	8007f2e <HAL_RCC_OscConfig+0x2ee>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0304 	and.w	r3, r3, #4
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 80b0 	beq.w	8007fbe <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00c      	beq.n	8007e84 <HAL_RCC_OscConfig+0x340>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d008      	beq.n	8007e84 <HAL_RCC_OscConfig+0x340>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	2b05      	cmp	r3, #5
 8007e78:	d004      	beq.n	8007e84 <HAL_RCC_OscConfig+0x340>
 8007e7a:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8007e7e:	4845      	ldr	r0, [pc, #276]	; (8007f94 <HAL_RCC_OscConfig+0x450>)
 8007e80:	f7f9 ff5b 	bl	8001d3a <assert_failed>
=======
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f000 80b0 	beq.w	80080ba <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00c      	beq.n	8007f80 <HAL_RCC_OscConfig+0x340>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d008      	beq.n	8007f80 <HAL_RCC_OscConfig+0x340>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	2b05      	cmp	r3, #5
 8007f74:	d004      	beq.n	8007f80 <HAL_RCC_OscConfig+0x340>
 8007f76:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8007f7a:	4845      	ldr	r0, [pc, #276]	; (8008090 <HAL_RCC_OscConfig+0x450>)
 8007f7c:	f7f9 ff5b 	bl	8001e36 <assert_failed>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8007e84:	4b42      	ldr	r3, [pc, #264]	; (8007f90 <HAL_RCC_OscConfig+0x44c>)
 8007e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10f      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e90:	2300      	movs	r3, #0
 8007e92:	60bb      	str	r3, [r7, #8]
 8007e94:	4b3e      	ldr	r3, [pc, #248]	; (8007f90 <HAL_RCC_OscConfig+0x44c>)
 8007e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e98:	4a3d      	ldr	r2, [pc, #244]	; (8007f90 <HAL_RCC_OscConfig+0x44c>)
 8007e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8007ea0:	4b3b      	ldr	r3, [pc, #236]	; (8007f90 <HAL_RCC_OscConfig+0x44c>)
 8007ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ea8:	60bb      	str	r3, [r7, #8]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007eac:	2301      	movs	r3, #1
 8007eae:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eb0:	4b3a      	ldr	r3, [pc, #232]	; (8007f9c <HAL_RCC_OscConfig+0x458>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d118      	bne.n	8007eee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ebc:	4b37      	ldr	r3, [pc, #220]	; (8007f9c <HAL_RCC_OscConfig+0x458>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a36      	ldr	r2, [pc, #216]	; (8007f9c <HAL_RCC_OscConfig+0x458>)
 8007ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ec6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ec8:	f7fa fb16 	bl	80024f8 <HAL_GetTick>
 8007ecc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ece:	e008      	b.n	8007ee2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ed0:	f7fa fb12 	bl	80024f8 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d901      	bls.n	8007ee2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e181      	b.n	80081e6 <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ee2:	4b2e      	ldr	r3, [pc, #184]	; (8007f9c <HAL_RCC_OscConfig+0x458>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0f0      	beq.n	8007ed0 <HAL_RCC_OscConfig+0x38c>
=======
 8007f80:	4b42      	ldr	r3, [pc, #264]	; (800808c <HAL_RCC_OscConfig+0x44c>)
 8007f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10f      	bne.n	8007fac <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	60bb      	str	r3, [r7, #8]
 8007f90:	4b3e      	ldr	r3, [pc, #248]	; (800808c <HAL_RCC_OscConfig+0x44c>)
 8007f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f94:	4a3d      	ldr	r2, [pc, #244]	; (800808c <HAL_RCC_OscConfig+0x44c>)
 8007f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f9a:	6413      	str	r3, [r2, #64]	; 0x40
 8007f9c:	4b3b      	ldr	r3, [pc, #236]	; (800808c <HAL_RCC_OscConfig+0x44c>)
 8007f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fa4:	60bb      	str	r3, [r7, #8]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fac:	4b3a      	ldr	r3, [pc, #232]	; (8008098 <HAL_RCC_OscConfig+0x458>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d118      	bne.n	8007fea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007fb8:	4b37      	ldr	r3, [pc, #220]	; (8008098 <HAL_RCC_OscConfig+0x458>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a36      	ldr	r2, [pc, #216]	; (8008098 <HAL_RCC_OscConfig+0x458>)
 8007fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fc4:	f7fa fb16 	bl	80025f4 <HAL_GetTick>
 8007fc8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fca:	e008      	b.n	8007fde <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fcc:	f7fa fb12 	bl	80025f4 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d901      	bls.n	8007fde <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e181      	b.n	80082e2 <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007fde:	4b2e      	ldr	r3, [pc, #184]	; (8008098 <HAL_RCC_OscConfig+0x458>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d0f0      	beq.n	8007fcc <HAL_RCC_OscConfig+0x38c>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d106      	bne.n	8007f04 <HAL_RCC_OscConfig+0x3c0>
 8007ef6:	4b26      	ldr	r3, [pc, #152]	; (8007f90 <HAL_RCC_OscConfig+0x44c>)
 8007ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007efa:	4a25      	ldr	r2, [pc, #148]	; (8007f90 <HAL_RCC_OscConfig+0x44c>)
 8007efc:	f043 0301 	orr.w	r3, r3, #1
 8007f00:	6713      	str	r3, [r2, #112]	; 0x70
 8007f02:	e01c      	b.n	8007f3e <HAL_RCC_OscConfig+0x3fa>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	2b05      	cmp	r3, #5
 8007f0a:	d10c      	bne.n	8007f26 <HAL_RCC_OscConfig+0x3e2>
 8007f0c:	4b20      	ldr	r3, [pc, #128]	; (8007f90 <HAL_RCC_OscConfig+0x44c>)
 8007f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f10:	4a1f      	ldr	r2, [pc, #124]	; (8007f90 <HAL_RCC_OscConfig+0x44c>)
 8007f12:	f043 0304 	orr.w	r3, r3, #4
 8007f16:	6713      	str	r3, [r2, #112]	; 0x70
 8007f18:	4b1d      	ldr	r3, [pc, #116]	; (8007f90 <HAL_RCC_OscConfig+0x44c>)
 8007f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f1c:	4a1c      	ldr	r2, [pc, #112]	; (8007f90 <HAL_RCC_OscConfig+0x44c>)
 8007f1e:	f043 0301 	orr.w	r3, r3, #1
 8007f22:	6713      	str	r3, [r2, #112]	; 0x70
 8007f24:	e00b      	b.n	8007f3e <HAL_RCC_OscConfig+0x3fa>
 8007f26:	4b1a      	ldr	r3, [pc, #104]	; (8007f90 <HAL_RCC_OscConfig+0x44c>)
 8007f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f2a:	4a19      	ldr	r2, [pc, #100]	; (8007f90 <HAL_RCC_OscConfig+0x44c>)
 8007f2c:	f023 0301 	bic.w	r3, r3, #1
 8007f30:	6713      	str	r3, [r2, #112]	; 0x70
 8007f32:	4b17      	ldr	r3, [pc, #92]	; (8007f90 <HAL_RCC_OscConfig+0x44c>)
 8007f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f36:	4a16      	ldr	r2, [pc, #88]	; (8007f90 <HAL_RCC_OscConfig+0x44c>)
 8007f38:	f023 0304 	bic.w	r3, r3, #4
 8007f3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d015      	beq.n	8007f72 <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f46:	f7fa fad7 	bl	80024f8 <HAL_GetTick>
 8007f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f4c:	e00a      	b.n	8007f64 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f4e:	f7fa fad3 	bl	80024f8 <HAL_GetTick>
 8007f52:	4602      	mov	r2, r0
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d901      	bls.n	8007f64 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e140      	b.n	80081e6 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f64:	4b0a      	ldr	r3, [pc, #40]	; (8007f90 <HAL_RCC_OscConfig+0x44c>)
 8007f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f68:	f003 0302 	and.w	r3, r3, #2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d0ee      	beq.n	8007f4e <HAL_RCC_OscConfig+0x40a>
 8007f70:	e01c      	b.n	8007fac <HAL_RCC_OscConfig+0x468>
=======
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d106      	bne.n	8008000 <HAL_RCC_OscConfig+0x3c0>
 8007ff2:	4b26      	ldr	r3, [pc, #152]	; (800808c <HAL_RCC_OscConfig+0x44c>)
 8007ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff6:	4a25      	ldr	r2, [pc, #148]	; (800808c <HAL_RCC_OscConfig+0x44c>)
 8007ff8:	f043 0301 	orr.w	r3, r3, #1
 8007ffc:	6713      	str	r3, [r2, #112]	; 0x70
 8007ffe:	e01c      	b.n	800803a <HAL_RCC_OscConfig+0x3fa>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	2b05      	cmp	r3, #5
 8008006:	d10c      	bne.n	8008022 <HAL_RCC_OscConfig+0x3e2>
 8008008:	4b20      	ldr	r3, [pc, #128]	; (800808c <HAL_RCC_OscConfig+0x44c>)
 800800a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800c:	4a1f      	ldr	r2, [pc, #124]	; (800808c <HAL_RCC_OscConfig+0x44c>)
 800800e:	f043 0304 	orr.w	r3, r3, #4
 8008012:	6713      	str	r3, [r2, #112]	; 0x70
 8008014:	4b1d      	ldr	r3, [pc, #116]	; (800808c <HAL_RCC_OscConfig+0x44c>)
 8008016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008018:	4a1c      	ldr	r2, [pc, #112]	; (800808c <HAL_RCC_OscConfig+0x44c>)
 800801a:	f043 0301 	orr.w	r3, r3, #1
 800801e:	6713      	str	r3, [r2, #112]	; 0x70
 8008020:	e00b      	b.n	800803a <HAL_RCC_OscConfig+0x3fa>
 8008022:	4b1a      	ldr	r3, [pc, #104]	; (800808c <HAL_RCC_OscConfig+0x44c>)
 8008024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008026:	4a19      	ldr	r2, [pc, #100]	; (800808c <HAL_RCC_OscConfig+0x44c>)
 8008028:	f023 0301 	bic.w	r3, r3, #1
 800802c:	6713      	str	r3, [r2, #112]	; 0x70
 800802e:	4b17      	ldr	r3, [pc, #92]	; (800808c <HAL_RCC_OscConfig+0x44c>)
 8008030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008032:	4a16      	ldr	r2, [pc, #88]	; (800808c <HAL_RCC_OscConfig+0x44c>)
 8008034:	f023 0304 	bic.w	r3, r3, #4
 8008038:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d015      	beq.n	800806e <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008042:	f7fa fad7 	bl	80025f4 <HAL_GetTick>
 8008046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008048:	e00a      	b.n	8008060 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800804a:	f7fa fad3 	bl	80025f4 <HAL_GetTick>
 800804e:	4602      	mov	r2, r0
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	f241 3288 	movw	r2, #5000	; 0x1388
 8008058:	4293      	cmp	r3, r2
 800805a:	d901      	bls.n	8008060 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e140      	b.n	80082e2 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008060:	4b0a      	ldr	r3, [pc, #40]	; (800808c <HAL_RCC_OscConfig+0x44c>)
 8008062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008064:	f003 0302 	and.w	r3, r3, #2
 8008068:	2b00      	cmp	r3, #0
 800806a:	d0ee      	beq.n	800804a <HAL_RCC_OscConfig+0x40a>
 800806c:	e01c      	b.n	80080a8 <HAL_RCC_OscConfig+0x468>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8007f72:	f7fa fac1 	bl	80024f8 <HAL_GetTick>
 8007f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f78:	e012      	b.n	8007fa0 <HAL_RCC_OscConfig+0x45c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f7a:	f7fa fabd 	bl	80024f8 <HAL_GetTick>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d909      	bls.n	8007fa0 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e12a      	b.n	80081e6 <HAL_RCC_OscConfig+0x6a2>
 8007f90:	40023800 	.word	0x40023800
 8007f94:	0800c160 	.word	0x0800c160
 8007f98:	42470e80 	.word	0x42470e80
 8007f9c:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fa0:	4b93      	ldr	r3, [pc, #588]	; (80081f0 <HAL_RCC_OscConfig+0x6ac>)
 8007fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa4:	f003 0302 	and.w	r3, r3, #2
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1e6      	bne.n	8007f7a <HAL_RCC_OscConfig+0x436>
=======
 800806e:	f7fa fac1 	bl	80025f4 <HAL_GetTick>
 8008072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008074:	e012      	b.n	800809c <HAL_RCC_OscConfig+0x45c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008076:	f7fa fabd 	bl	80025f4 <HAL_GetTick>
 800807a:	4602      	mov	r2, r0
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	f241 3288 	movw	r2, #5000	; 0x1388
 8008084:	4293      	cmp	r3, r2
 8008086:	d909      	bls.n	800809c <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e12a      	b.n	80082e2 <HAL_RCC_OscConfig+0x6a2>
 800808c:	40023800 	.word	0x40023800
 8008090:	0800c260 	.word	0x0800c260
 8008094:	42470e80 	.word	0x42470e80
 8008098:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800809c:	4b93      	ldr	r3, [pc, #588]	; (80082ec <HAL_RCC_OscConfig+0x6ac>)
 800809e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a0:	f003 0302 	and.w	r3, r3, #2
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1e6      	bne.n	8008076 <HAL_RCC_OscConfig+0x436>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8007fac:	7dfb      	ldrb	r3, [r7, #23]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d105      	bne.n	8007fbe <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fb2:	4b8f      	ldr	r3, [pc, #572]	; (80081f0 <HAL_RCC_OscConfig+0x6ac>)
 8007fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb6:	4a8e      	ldr	r2, [pc, #568]	; (80081f0 <HAL_RCC_OscConfig+0x6ac>)
 8007fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fbc:	6413      	str	r3, [r2, #64]	; 0x40
=======
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d105      	bne.n	80080ba <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080ae:	4b8f      	ldr	r3, [pc, #572]	; (80082ec <HAL_RCC_OscConfig+0x6ac>)
 80080b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b2:	4a8e      	ldr	r2, [pc, #568]	; (80082ec <HAL_RCC_OscConfig+0x6ac>)
 80080b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080b8:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
<<<<<<< HEAD
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00c      	beq.n	8007fe0 <HAL_RCC_OscConfig+0x49c>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d008      	beq.n	8007fe0 <HAL_RCC_OscConfig+0x49c>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d004      	beq.n	8007fe0 <HAL_RCC_OscConfig+0x49c>
 8007fd6:	f640 6103 	movw	r1, #3587	; 0xe03
 8007fda:	4886      	ldr	r0, [pc, #536]	; (80081f4 <HAL_RCC_OscConfig+0x6b0>)
 8007fdc:	f7f9 fead 	bl	8001d3a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 80fd 	beq.w	80081e4 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007fea:	4b81      	ldr	r3, [pc, #516]	; (80081f0 <HAL_RCC_OscConfig+0x6ac>)
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f003 030c 	and.w	r3, r3, #12
 8007ff2:	2b08      	cmp	r3, #8
 8007ff4:	f000 80b6 	beq.w	8008164 <HAL_RCC_OscConfig+0x620>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	f040 809a 	bne.w	8008136 <HAL_RCC_OscConfig+0x5f2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d009      	beq.n	800801e <HAL_RCC_OscConfig+0x4da>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	69db      	ldr	r3, [r3, #28]
 800800e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008012:	d004      	beq.n	800801e <HAL_RCC_OscConfig+0x4da>
 8008014:	f640 610c 	movw	r1, #3596	; 0xe0c
 8008018:	4876      	ldr	r0, [pc, #472]	; (80081f4 <HAL_RCC_OscConfig+0x6b0>)
 800801a:	f7f9 fe8e 	bl	8001d3a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	2b3f      	cmp	r3, #63	; 0x3f
 8008024:	d904      	bls.n	8008030 <HAL_RCC_OscConfig+0x4ec>
 8008026:	f640 610d 	movw	r1, #3597	; 0xe0d
 800802a:	4872      	ldr	r0, [pc, #456]	; (80081f4 <HAL_RCC_OscConfig+0x6b0>)
 800802c:	f7f9 fe85 	bl	8001d3a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008034:	2b31      	cmp	r3, #49	; 0x31
 8008036:	d904      	bls.n	8008042 <HAL_RCC_OscConfig+0x4fe>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8008040:	d904      	bls.n	800804c <HAL_RCC_OscConfig+0x508>
 8008042:	f640 610e 	movw	r1, #3598	; 0xe0e
 8008046:	486b      	ldr	r0, [pc, #428]	; (80081f4 <HAL_RCC_OscConfig+0x6b0>)
 8008048:	f7f9 fe77 	bl	8001d3a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008050:	2b02      	cmp	r3, #2
 8008052:	d010      	beq.n	8008076 <HAL_RCC_OscConfig+0x532>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008058:	2b04      	cmp	r3, #4
 800805a:	d00c      	beq.n	8008076 <HAL_RCC_OscConfig+0x532>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008060:	2b06      	cmp	r3, #6
 8008062:	d008      	beq.n	8008076 <HAL_RCC_OscConfig+0x532>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008068:	2b08      	cmp	r3, #8
 800806a:	d004      	beq.n	8008076 <HAL_RCC_OscConfig+0x532>
 800806c:	f640 610f 	movw	r1, #3599	; 0xe0f
 8008070:	4860      	ldr	r0, [pc, #384]	; (80081f4 <HAL_RCC_OscConfig+0x6b0>)
 8008072:	f7f9 fe62 	bl	8001d3a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807a:	2b01      	cmp	r3, #1
 800807c:	d903      	bls.n	8008086 <HAL_RCC_OscConfig+0x542>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008082:	2b0f      	cmp	r3, #15
 8008084:	d904      	bls.n	8008090 <HAL_RCC_OscConfig+0x54c>
 8008086:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800808a:	485a      	ldr	r0, [pc, #360]	; (80081f4 <HAL_RCC_OscConfig+0x6b0>)
 800808c:	f7f9 fe55 	bl	8001d3a <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008094:	2b01      	cmp	r3, #1
 8008096:	d903      	bls.n	80080a0 <HAL_RCC_OscConfig+0x55c>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809c:	2b07      	cmp	r3, #7
 800809e:	d904      	bls.n	80080aa <HAL_RCC_OscConfig+0x566>
 80080a0:	f640 6111 	movw	r1, #3601	; 0xe11
 80080a4:	4853      	ldr	r0, [pc, #332]	; (80081f4 <HAL_RCC_OscConfig+0x6b0>)
 80080a6:	f7f9 fe48 	bl	8001d3a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080aa:	4b53      	ldr	r3, [pc, #332]	; (80081f8 <HAL_RCC_OscConfig+0x6b4>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b0:	f7fa fa22 	bl	80024f8 <HAL_GetTick>
 80080b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080b6:	e008      	b.n	80080ca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080b8:	f7fa fa1e 	bl	80024f8 <HAL_GetTick>
 80080bc:	4602      	mov	r2, r0
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d901      	bls.n	80080ca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e08d      	b.n	80081e6 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080ca:	4b49      	ldr	r3, [pc, #292]	; (80081f0 <HAL_RCC_OscConfig+0x6ac>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d1f0      	bne.n	80080b8 <HAL_RCC_OscConfig+0x574>
=======
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00c      	beq.n	80080dc <HAL_RCC_OscConfig+0x49c>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d008      	beq.n	80080dc <HAL_RCC_OscConfig+0x49c>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d004      	beq.n	80080dc <HAL_RCC_OscConfig+0x49c>
 80080d2:	f640 6103 	movw	r1, #3587	; 0xe03
 80080d6:	4886      	ldr	r0, [pc, #536]	; (80082f0 <HAL_RCC_OscConfig+0x6b0>)
 80080d8:	f7f9 fead 	bl	8001e36 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 80fd 	beq.w	80082e0 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80080e6:	4b81      	ldr	r3, [pc, #516]	; (80082ec <HAL_RCC_OscConfig+0x6ac>)
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	f003 030c 	and.w	r3, r3, #12
 80080ee:	2b08      	cmp	r3, #8
 80080f0:	f000 80b6 	beq.w	8008260 <HAL_RCC_OscConfig+0x620>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	f040 809a 	bne.w	8008232 <HAL_RCC_OscConfig+0x5f2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d009      	beq.n	800811a <HAL_RCC_OscConfig+0x4da>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800810e:	d004      	beq.n	800811a <HAL_RCC_OscConfig+0x4da>
 8008110:	f640 610c 	movw	r1, #3596	; 0xe0c
 8008114:	4876      	ldr	r0, [pc, #472]	; (80082f0 <HAL_RCC_OscConfig+0x6b0>)
 8008116:	f7f9 fe8e 	bl	8001e36 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	2b3f      	cmp	r3, #63	; 0x3f
 8008120:	d904      	bls.n	800812c <HAL_RCC_OscConfig+0x4ec>
 8008122:	f640 610d 	movw	r1, #3597	; 0xe0d
 8008126:	4872      	ldr	r0, [pc, #456]	; (80082f0 <HAL_RCC_OscConfig+0x6b0>)
 8008128:	f7f9 fe85 	bl	8001e36 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008130:	2b31      	cmp	r3, #49	; 0x31
 8008132:	d904      	bls.n	800813e <HAL_RCC_OscConfig+0x4fe>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800813c:	d904      	bls.n	8008148 <HAL_RCC_OscConfig+0x508>
 800813e:	f640 610e 	movw	r1, #3598	; 0xe0e
 8008142:	486b      	ldr	r0, [pc, #428]	; (80082f0 <HAL_RCC_OscConfig+0x6b0>)
 8008144:	f7f9 fe77 	bl	8001e36 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814c:	2b02      	cmp	r3, #2
 800814e:	d010      	beq.n	8008172 <HAL_RCC_OscConfig+0x532>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008154:	2b04      	cmp	r3, #4
 8008156:	d00c      	beq.n	8008172 <HAL_RCC_OscConfig+0x532>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815c:	2b06      	cmp	r3, #6
 800815e:	d008      	beq.n	8008172 <HAL_RCC_OscConfig+0x532>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008164:	2b08      	cmp	r3, #8
 8008166:	d004      	beq.n	8008172 <HAL_RCC_OscConfig+0x532>
 8008168:	f640 610f 	movw	r1, #3599	; 0xe0f
 800816c:	4860      	ldr	r0, [pc, #384]	; (80082f0 <HAL_RCC_OscConfig+0x6b0>)
 800816e:	f7f9 fe62 	bl	8001e36 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008176:	2b01      	cmp	r3, #1
 8008178:	d903      	bls.n	8008182 <HAL_RCC_OscConfig+0x542>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817e:	2b0f      	cmp	r3, #15
 8008180:	d904      	bls.n	800818c <HAL_RCC_OscConfig+0x54c>
 8008182:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008186:	485a      	ldr	r0, [pc, #360]	; (80082f0 <HAL_RCC_OscConfig+0x6b0>)
 8008188:	f7f9 fe55 	bl	8001e36 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008190:	2b01      	cmp	r3, #1
 8008192:	d903      	bls.n	800819c <HAL_RCC_OscConfig+0x55c>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008198:	2b07      	cmp	r3, #7
 800819a:	d904      	bls.n	80081a6 <HAL_RCC_OscConfig+0x566>
 800819c:	f640 6111 	movw	r1, #3601	; 0xe11
 80081a0:	4853      	ldr	r0, [pc, #332]	; (80082f0 <HAL_RCC_OscConfig+0x6b0>)
 80081a2:	f7f9 fe48 	bl	8001e36 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081a6:	4b53      	ldr	r3, [pc, #332]	; (80082f4 <HAL_RCC_OscConfig+0x6b4>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ac:	f7fa fa22 	bl	80025f4 <HAL_GetTick>
 80081b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081b2:	e008      	b.n	80081c6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80081b4:	f7fa fa1e 	bl	80025f4 <HAL_GetTick>
 80081b8:	4602      	mov	r2, r0
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d901      	bls.n	80081c6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e08d      	b.n	80082e2 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80081c6:	4b49      	ldr	r3, [pc, #292]	; (80082ec <HAL_RCC_OscConfig+0x6ac>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1f0      	bne.n	80081b4 <HAL_RCC_OscConfig+0x574>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	69da      	ldr	r2, [r3, #28]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	431a      	orrs	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e4:	019b      	lsls	r3, r3, #6
 80080e6:	431a      	orrs	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ec:	085b      	lsrs	r3, r3, #1
 80080ee:	3b01      	subs	r3, #1
 80080f0:	041b      	lsls	r3, r3, #16
 80080f2:	431a      	orrs	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f8:	061b      	lsls	r3, r3, #24
 80080fa:	431a      	orrs	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008100:	071b      	lsls	r3, r3, #28
 8008102:	493b      	ldr	r1, [pc, #236]	; (80081f0 <HAL_RCC_OscConfig+0x6ac>)
 8008104:	4313      	orrs	r3, r2
 8008106:	604b      	str	r3, [r1, #4]
=======
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	69da      	ldr	r2, [r3, #28]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	431a      	orrs	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e0:	019b      	lsls	r3, r3, #6
 80081e2:	431a      	orrs	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e8:	085b      	lsrs	r3, r3, #1
 80081ea:	3b01      	subs	r3, #1
 80081ec:	041b      	lsls	r3, r3, #16
 80081ee:	431a      	orrs	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f4:	061b      	lsls	r3, r3, #24
 80081f6:	431a      	orrs	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fc:	071b      	lsls	r3, r3, #28
 80081fe:	493b      	ldr	r1, [pc, #236]	; (80082ec <HAL_RCC_OscConfig+0x6ac>)
 8008200:	4313      	orrs	r3, r2
 8008202:	604b      	str	r3, [r1, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8008108:	4b3b      	ldr	r3, [pc, #236]	; (80081f8 <HAL_RCC_OscConfig+0x6b4>)
 800810a:	2201      	movs	r2, #1
 800810c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800810e:	f7fa f9f3 	bl	80024f8 <HAL_GetTick>
 8008112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008114:	e008      	b.n	8008128 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008116:	f7fa f9ef 	bl	80024f8 <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d901      	bls.n	8008128 <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e05e      	b.n	80081e6 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008128:	4b31      	ldr	r3, [pc, #196]	; (80081f0 <HAL_RCC_OscConfig+0x6ac>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0f0      	beq.n	8008116 <HAL_RCC_OscConfig+0x5d2>
 8008134:	e056      	b.n	80081e4 <HAL_RCC_OscConfig+0x6a0>
=======
 8008204:	4b3b      	ldr	r3, [pc, #236]	; (80082f4 <HAL_RCC_OscConfig+0x6b4>)
 8008206:	2201      	movs	r2, #1
 8008208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800820a:	f7fa f9f3 	bl	80025f4 <HAL_GetTick>
 800820e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008210:	e008      	b.n	8008224 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008212:	f7fa f9ef 	bl	80025f4 <HAL_GetTick>
 8008216:	4602      	mov	r2, r0
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	2b02      	cmp	r3, #2
 800821e:	d901      	bls.n	8008224 <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 8008220:	2303      	movs	r3, #3
 8008222:	e05e      	b.n	80082e2 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008224:	4b31      	ldr	r3, [pc, #196]	; (80082ec <HAL_RCC_OscConfig+0x6ac>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d0f0      	beq.n	8008212 <HAL_RCC_OscConfig+0x5d2>
 8008230:	e056      	b.n	80082e0 <HAL_RCC_OscConfig+0x6a0>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8008136:	4b30      	ldr	r3, [pc, #192]	; (80081f8 <HAL_RCC_OscConfig+0x6b4>)
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800813c:	f7fa f9dc 	bl	80024f8 <HAL_GetTick>
 8008140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008142:	e008      	b.n	8008156 <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008144:	f7fa f9d8 	bl	80024f8 <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b02      	cmp	r3, #2
 8008150:	d901      	bls.n	8008156 <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e047      	b.n	80081e6 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008156:	4b26      	ldr	r3, [pc, #152]	; (80081f0 <HAL_RCC_OscConfig+0x6ac>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1f0      	bne.n	8008144 <HAL_RCC_OscConfig+0x600>
 8008162:	e03f      	b.n	80081e4 <HAL_RCC_OscConfig+0x6a0>
=======
 8008232:	4b30      	ldr	r3, [pc, #192]	; (80082f4 <HAL_RCC_OscConfig+0x6b4>)
 8008234:	2200      	movs	r2, #0
 8008236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008238:	f7fa f9dc 	bl	80025f4 <HAL_GetTick>
 800823c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800823e:	e008      	b.n	8008252 <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008240:	f7fa f9d8 	bl	80025f4 <HAL_GetTick>
 8008244:	4602      	mov	r2, r0
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	2b02      	cmp	r3, #2
 800824c:	d901      	bls.n	8008252 <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e047      	b.n	80082e2 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008252:	4b26      	ldr	r3, [pc, #152]	; (80082ec <HAL_RCC_OscConfig+0x6ac>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1f0      	bne.n	8008240 <HAL_RCC_OscConfig+0x600>
 800825e:	e03f      	b.n	80082e0 <HAL_RCC_OscConfig+0x6a0>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	699b      	ldr	r3, [r3, #24]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d101      	bne.n	8008170 <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e03a      	b.n	80081e6 <HAL_RCC_OscConfig+0x6a2>
=======
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	699b      	ldr	r3, [r3, #24]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d101      	bne.n	800826c <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	e03a      	b.n	80082e2 <HAL_RCC_OscConfig+0x6a2>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 8008170:	4b1f      	ldr	r3, [pc, #124]	; (80081f0 <HAL_RCC_OscConfig+0x6ac>)
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d030      	beq.n	80081e0 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008188:	429a      	cmp	r2, r3
 800818a:	d129      	bne.n	80081e0 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008196:	429a      	cmp	r2, r3
 8008198:	d122      	bne.n	80081e0 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80081a0:	4013      	ands	r3, r2
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80081a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d119      	bne.n	80081e0 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b6:	085b      	lsrs	r3, r3, #1
 80081b8:	3b01      	subs	r3, #1
 80081ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80081bc:	429a      	cmp	r2, r3
 80081be:	d10f      	bne.n	80081e0 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d107      	bne.n	80081e0 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80081dc:	429a      	cmp	r2, r3
 80081de:	d001      	beq.n	80081e4 <HAL_RCC_OscConfig+0x6a0>
=======
 800826c:	4b1f      	ldr	r3, [pc, #124]	; (80082ec <HAL_RCC_OscConfig+0x6ac>)
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d030      	beq.n	80082dc <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008284:	429a      	cmp	r2, r3
 8008286:	d129      	bne.n	80082dc <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008292:	429a      	cmp	r2, r3
 8008294:	d122      	bne.n	80082dc <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800829c:	4013      	ands	r3, r2
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80082a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d119      	bne.n	80082dc <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b2:	085b      	lsrs	r3, r3, #1
 80082b4:	3b01      	subs	r3, #1
 80082b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d10f      	bne.n	80082dc <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d107      	bne.n	80082dc <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80082d8:	429a      	cmp	r2, r3
 80082da:	d001      	beq.n	80082e0 <HAL_RCC_OscConfig+0x6a0>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
<<<<<<< HEAD
 80081e0:	2301      	movs	r3, #1
 80081e2:	e000      	b.n	80081e6 <HAL_RCC_OscConfig+0x6a2>
=======
 80082dc:	2301      	movs	r3, #1
 80082de:	e000      	b.n	80082e2 <HAL_RCC_OscConfig+0x6a2>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3718      	adds	r7, #24
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	40023800 	.word	0x40023800
 80081f4:	0800c160 	.word	0x0800c160
 80081f8:	42470060 	.word	0x42470060

080081fc <HAL_SPI_Init>:
=======
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3718      	adds	r7, #24
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	40023800 	.word	0x40023800
 80082f0:	0800c260 	.word	0x0800c260
 80082f4:	42470060 	.word	0x42470060

080082f8 <HAL_SPI_Init>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e1a4      	b.n	8008558 <HAL_SPI_Init+0x35c>
=======
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d101      	bne.n	800830a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e1a4      	b.n	8008654 <HAL_SPI_Init+0x35c>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
<<<<<<< HEAD
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a72      	ldr	r2, [pc, #456]	; (80083dc <HAL_SPI_Init+0x1e0>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d013      	beq.n	8008240 <HAL_SPI_Init+0x44>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a70      	ldr	r2, [pc, #448]	; (80083e0 <HAL_SPI_Init+0x1e4>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d00e      	beq.n	8008240 <HAL_SPI_Init+0x44>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a6f      	ldr	r2, [pc, #444]	; (80083e4 <HAL_SPI_Init+0x1e8>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d009      	beq.n	8008240 <HAL_SPI_Init+0x44>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a6d      	ldr	r2, [pc, #436]	; (80083e8 <HAL_SPI_Init+0x1ec>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d004      	beq.n	8008240 <HAL_SPI_Init+0x44>
 8008236:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800823a:	486c      	ldr	r0, [pc, #432]	; (80083ec <HAL_SPI_Init+0x1f0>)
 800823c:	f7f9 fd7d 	bl	8001d3a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d009      	beq.n	800825c <HAL_SPI_Init+0x60>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008250:	d004      	beq.n	800825c <HAL_SPI_Init+0x60>
 8008252:	f240 1141 	movw	r1, #321	; 0x141
 8008256:	4865      	ldr	r0, [pc, #404]	; (80083ec <HAL_SPI_Init+0x1f0>)
 8008258:	f7f9 fd6f 	bl	8001d3a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00e      	beq.n	8008282 <HAL_SPI_Init+0x86>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800826c:	d009      	beq.n	8008282 <HAL_SPI_Init+0x86>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008276:	d004      	beq.n	8008282 <HAL_SPI_Init+0x86>
 8008278:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800827c:	485b      	ldr	r0, [pc, #364]	; (80083ec <HAL_SPI_Init+0x1f0>)
 800827e:	f7f9 fd5c 	bl	8001d3a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800828a:	d008      	beq.n	800829e <HAL_SPI_Init+0xa2>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d004      	beq.n	800829e <HAL_SPI_Init+0xa2>
 8008294:	f240 1143 	movw	r1, #323	; 0x143
 8008298:	4854      	ldr	r0, [pc, #336]	; (80083ec <HAL_SPI_Init+0x1f0>)
 800829a:	f7f9 fd4e 	bl	8001d3a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082a6:	d00d      	beq.n	80082c4 <HAL_SPI_Init+0xc8>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d009      	beq.n	80082c4 <HAL_SPI_Init+0xc8>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80082b8:	d004      	beq.n	80082c4 <HAL_SPI_Init+0xc8>
 80082ba:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80082be:	484b      	ldr	r0, [pc, #300]	; (80083ec <HAL_SPI_Init+0x1f0>)
 80082c0:	f7f9 fd3b 	bl	8001d3a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	69db      	ldr	r3, [r3, #28]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d020      	beq.n	800830e <HAL_SPI_Init+0x112>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	2b08      	cmp	r3, #8
 80082d2:	d01c      	beq.n	800830e <HAL_SPI_Init+0x112>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	2b10      	cmp	r3, #16
 80082da:	d018      	beq.n	800830e <HAL_SPI_Init+0x112>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	69db      	ldr	r3, [r3, #28]
 80082e0:	2b18      	cmp	r3, #24
 80082e2:	d014      	beq.n	800830e <HAL_SPI_Init+0x112>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	69db      	ldr	r3, [r3, #28]
 80082e8:	2b20      	cmp	r3, #32
 80082ea:	d010      	beq.n	800830e <HAL_SPI_Init+0x112>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	69db      	ldr	r3, [r3, #28]
 80082f0:	2b28      	cmp	r3, #40	; 0x28
 80082f2:	d00c      	beq.n	800830e <HAL_SPI_Init+0x112>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	69db      	ldr	r3, [r3, #28]
 80082f8:	2b30      	cmp	r3, #48	; 0x30
 80082fa:	d008      	beq.n	800830e <HAL_SPI_Init+0x112>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	69db      	ldr	r3, [r3, #28]
 8008300:	2b38      	cmp	r3, #56	; 0x38
 8008302:	d004      	beq.n	800830e <HAL_SPI_Init+0x112>
 8008304:	f240 1145 	movw	r1, #325	; 0x145
 8008308:	4838      	ldr	r0, [pc, #224]	; (80083ec <HAL_SPI_Init+0x1f0>)
 800830a:	f7f9 fd16 	bl	8001d3a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d008      	beq.n	8008328 <HAL_SPI_Init+0x12c>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a1b      	ldr	r3, [r3, #32]
 800831a:	2b80      	cmp	r3, #128	; 0x80
 800831c:	d004      	beq.n	8008328 <HAL_SPI_Init+0x12c>
 800831e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8008322:	4832      	ldr	r0, [pc, #200]	; (80083ec <HAL_SPI_Init+0x1f0>)
 8008324:	f7f9 fd09 	bl	8001d3a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832c:	2b00      	cmp	r3, #0
 800832e:	d008      	beq.n	8008342 <HAL_SPI_Init+0x146>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008334:	2b10      	cmp	r3, #16
 8008336:	d004      	beq.n	8008342 <HAL_SPI_Init+0x146>
 8008338:	f240 1147 	movw	r1, #327	; 0x147
 800833c:	482b      	ldr	r0, [pc, #172]	; (80083ec <HAL_SPI_Init+0x1f0>)
 800833e:	f7f9 fcfc 	bl	8001d3a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008346:	2b00      	cmp	r3, #0
 8008348:	d152      	bne.n	80083f0 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d008      	beq.n	8008364 <HAL_SPI_Init+0x168>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	2b02      	cmp	r3, #2
 8008358:	d004      	beq.n	8008364 <HAL_SPI_Init+0x168>
 800835a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800835e:	4823      	ldr	r0, [pc, #140]	; (80083ec <HAL_SPI_Init+0x1f0>)
 8008360:	f7f9 fceb 	bl	8001d3a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	695b      	ldr	r3, [r3, #20]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d008      	beq.n	800837e <HAL_SPI_Init+0x182>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d004      	beq.n	800837e <HAL_SPI_Init+0x182>
 8008374:	f240 114b 	movw	r1, #331	; 0x14b
 8008378:	481c      	ldr	r0, [pc, #112]	; (80083ec <HAL_SPI_Init+0x1f0>)
 800837a:	f7f9 fcde 	bl	8001d3a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008386:	d125      	bne.n	80083d4 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	69db      	ldr	r3, [r3, #28]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d05a      	beq.n	8008446 <HAL_SPI_Init+0x24a>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	69db      	ldr	r3, [r3, #28]
 8008394:	2b08      	cmp	r3, #8
 8008396:	d056      	beq.n	8008446 <HAL_SPI_Init+0x24a>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	69db      	ldr	r3, [r3, #28]
 800839c:	2b10      	cmp	r3, #16
 800839e:	d052      	beq.n	8008446 <HAL_SPI_Init+0x24a>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	69db      	ldr	r3, [r3, #28]
 80083a4:	2b18      	cmp	r3, #24
 80083a6:	d04e      	beq.n	8008446 <HAL_SPI_Init+0x24a>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	69db      	ldr	r3, [r3, #28]
 80083ac:	2b20      	cmp	r3, #32
 80083ae:	d04a      	beq.n	8008446 <HAL_SPI_Init+0x24a>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	69db      	ldr	r3, [r3, #28]
 80083b4:	2b28      	cmp	r3, #40	; 0x28
 80083b6:	d046      	beq.n	8008446 <HAL_SPI_Init+0x24a>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	69db      	ldr	r3, [r3, #28]
 80083bc:	2b30      	cmp	r3, #48	; 0x30
 80083be:	d042      	beq.n	8008446 <HAL_SPI_Init+0x24a>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	69db      	ldr	r3, [r3, #28]
 80083c4:	2b38      	cmp	r3, #56	; 0x38
 80083c6:	d03e      	beq.n	8008446 <HAL_SPI_Init+0x24a>
 80083c8:	f240 114f 	movw	r1, #335	; 0x14f
 80083cc:	4807      	ldr	r0, [pc, #28]	; (80083ec <HAL_SPI_Init+0x1f0>)
 80083ce:	f7f9 fcb4 	bl	8001d3a <assert_failed>
 80083d2:	e038      	b.n	8008446 <HAL_SPI_Init+0x24a>
=======
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a72      	ldr	r2, [pc, #456]	; (80084d8 <HAL_SPI_Init+0x1e0>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d013      	beq.n	800833c <HAL_SPI_Init+0x44>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a70      	ldr	r2, [pc, #448]	; (80084dc <HAL_SPI_Init+0x1e4>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d00e      	beq.n	800833c <HAL_SPI_Init+0x44>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a6f      	ldr	r2, [pc, #444]	; (80084e0 <HAL_SPI_Init+0x1e8>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d009      	beq.n	800833c <HAL_SPI_Init+0x44>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a6d      	ldr	r2, [pc, #436]	; (80084e4 <HAL_SPI_Init+0x1ec>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d004      	beq.n	800833c <HAL_SPI_Init+0x44>
 8008332:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008336:	486c      	ldr	r0, [pc, #432]	; (80084e8 <HAL_SPI_Init+0x1f0>)
 8008338:	f7f9 fd7d 	bl	8001e36 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d009      	beq.n	8008358 <HAL_SPI_Init+0x60>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800834c:	d004      	beq.n	8008358 <HAL_SPI_Init+0x60>
 800834e:	f240 1141 	movw	r1, #321	; 0x141
 8008352:	4865      	ldr	r0, [pc, #404]	; (80084e8 <HAL_SPI_Init+0x1f0>)
 8008354:	f7f9 fd6f 	bl	8001e36 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00e      	beq.n	800837e <HAL_SPI_Init+0x86>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008368:	d009      	beq.n	800837e <HAL_SPI_Init+0x86>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008372:	d004      	beq.n	800837e <HAL_SPI_Init+0x86>
 8008374:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8008378:	485b      	ldr	r0, [pc, #364]	; (80084e8 <HAL_SPI_Init+0x1f0>)
 800837a:	f7f9 fd5c 	bl	8001e36 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008386:	d008      	beq.n	800839a <HAL_SPI_Init+0xa2>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d004      	beq.n	800839a <HAL_SPI_Init+0xa2>
 8008390:	f240 1143 	movw	r1, #323	; 0x143
 8008394:	4854      	ldr	r0, [pc, #336]	; (80084e8 <HAL_SPI_Init+0x1f0>)
 8008396:	f7f9 fd4e 	bl	8001e36 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083a2:	d00d      	beq.n	80083c0 <HAL_SPI_Init+0xc8>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d009      	beq.n	80083c0 <HAL_SPI_Init+0xc8>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083b4:	d004      	beq.n	80083c0 <HAL_SPI_Init+0xc8>
 80083b6:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80083ba:	484b      	ldr	r0, [pc, #300]	; (80084e8 <HAL_SPI_Init+0x1f0>)
 80083bc:	f7f9 fd3b 	bl	8001e36 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	69db      	ldr	r3, [r3, #28]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d020      	beq.n	800840a <HAL_SPI_Init+0x112>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	2b08      	cmp	r3, #8
 80083ce:	d01c      	beq.n	800840a <HAL_SPI_Init+0x112>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	69db      	ldr	r3, [r3, #28]
 80083d4:	2b10      	cmp	r3, #16
 80083d6:	d018      	beq.n	800840a <HAL_SPI_Init+0x112>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	69db      	ldr	r3, [r3, #28]
 80083dc:	2b18      	cmp	r3, #24
 80083de:	d014      	beq.n	800840a <HAL_SPI_Init+0x112>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	69db      	ldr	r3, [r3, #28]
 80083e4:	2b20      	cmp	r3, #32
 80083e6:	d010      	beq.n	800840a <HAL_SPI_Init+0x112>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	2b28      	cmp	r3, #40	; 0x28
 80083ee:	d00c      	beq.n	800840a <HAL_SPI_Init+0x112>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	69db      	ldr	r3, [r3, #28]
 80083f4:	2b30      	cmp	r3, #48	; 0x30
 80083f6:	d008      	beq.n	800840a <HAL_SPI_Init+0x112>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	69db      	ldr	r3, [r3, #28]
 80083fc:	2b38      	cmp	r3, #56	; 0x38
 80083fe:	d004      	beq.n	800840a <HAL_SPI_Init+0x112>
 8008400:	f240 1145 	movw	r1, #325	; 0x145
 8008404:	4838      	ldr	r0, [pc, #224]	; (80084e8 <HAL_SPI_Init+0x1f0>)
 8008406:	f7f9 fd16 	bl	8001e36 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d008      	beq.n	8008424 <HAL_SPI_Init+0x12c>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a1b      	ldr	r3, [r3, #32]
 8008416:	2b80      	cmp	r3, #128	; 0x80
 8008418:	d004      	beq.n	8008424 <HAL_SPI_Init+0x12c>
 800841a:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800841e:	4832      	ldr	r0, [pc, #200]	; (80084e8 <HAL_SPI_Init+0x1f0>)
 8008420:	f7f9 fd09 	bl	8001e36 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008428:	2b00      	cmp	r3, #0
 800842a:	d008      	beq.n	800843e <HAL_SPI_Init+0x146>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008430:	2b10      	cmp	r3, #16
 8008432:	d004      	beq.n	800843e <HAL_SPI_Init+0x146>
 8008434:	f240 1147 	movw	r1, #327	; 0x147
 8008438:	482b      	ldr	r0, [pc, #172]	; (80084e8 <HAL_SPI_Init+0x1f0>)
 800843a:	f7f9 fcfc 	bl	8001e36 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008442:	2b00      	cmp	r3, #0
 8008444:	d152      	bne.n	80084ec <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d008      	beq.n	8008460 <HAL_SPI_Init+0x168>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	2b02      	cmp	r3, #2
 8008454:	d004      	beq.n	8008460 <HAL_SPI_Init+0x168>
 8008456:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800845a:	4823      	ldr	r0, [pc, #140]	; (80084e8 <HAL_SPI_Init+0x1f0>)
 800845c:	f7f9 fceb 	bl	8001e36 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	695b      	ldr	r3, [r3, #20]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d008      	beq.n	800847a <HAL_SPI_Init+0x182>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d004      	beq.n	800847a <HAL_SPI_Init+0x182>
 8008470:	f240 114b 	movw	r1, #331	; 0x14b
 8008474:	481c      	ldr	r0, [pc, #112]	; (80084e8 <HAL_SPI_Init+0x1f0>)
 8008476:	f7f9 fcde 	bl	8001e36 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008482:	d125      	bne.n	80084d0 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	69db      	ldr	r3, [r3, #28]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d05a      	beq.n	8008542 <HAL_SPI_Init+0x24a>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	69db      	ldr	r3, [r3, #28]
 8008490:	2b08      	cmp	r3, #8
 8008492:	d056      	beq.n	8008542 <HAL_SPI_Init+0x24a>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	69db      	ldr	r3, [r3, #28]
 8008498:	2b10      	cmp	r3, #16
 800849a:	d052      	beq.n	8008542 <HAL_SPI_Init+0x24a>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	69db      	ldr	r3, [r3, #28]
 80084a0:	2b18      	cmp	r3, #24
 80084a2:	d04e      	beq.n	8008542 <HAL_SPI_Init+0x24a>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	69db      	ldr	r3, [r3, #28]
 80084a8:	2b20      	cmp	r3, #32
 80084aa:	d04a      	beq.n	8008542 <HAL_SPI_Init+0x24a>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	2b28      	cmp	r3, #40	; 0x28
 80084b2:	d046      	beq.n	8008542 <HAL_SPI_Init+0x24a>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	69db      	ldr	r3, [r3, #28]
 80084b8:	2b30      	cmp	r3, #48	; 0x30
 80084ba:	d042      	beq.n	8008542 <HAL_SPI_Init+0x24a>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	69db      	ldr	r3, [r3, #28]
 80084c0:	2b38      	cmp	r3, #56	; 0x38
 80084c2:	d03e      	beq.n	8008542 <HAL_SPI_Init+0x24a>
 80084c4:	f240 114f 	movw	r1, #335	; 0x14f
 80084c8:	4807      	ldr	r0, [pc, #28]	; (80084e8 <HAL_SPI_Init+0x1f0>)
 80084ca:	f7f9 fcb4 	bl	8001e36 <assert_failed>
 80084ce:	e038      	b.n	8008542 <HAL_SPI_Init+0x24a>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
<<<<<<< HEAD
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	61da      	str	r2, [r3, #28]
 80083da:	e034      	b.n	8008446 <HAL_SPI_Init+0x24a>
 80083dc:	40013000 	.word	0x40013000
 80083e0:	40003800 	.word	0x40003800
 80083e4:	40003c00 	.word	0x40003c00
 80083e8:	40013400 	.word	0x40013400
 80083ec:	0800c19c 	.word	0x0800c19c
=======
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	61da      	str	r2, [r3, #28]
 80084d6:	e034      	b.n	8008542 <HAL_SPI_Init+0x24a>
 80084d8:	40013000 	.word	0x40013000
 80084dc:	40003800 	.word	0x40003800
 80084e0:	40003c00 	.word	0x40003c00
 80084e4:	40013400 	.word	0x40013400
 80084e8:	0800c29c 	.word	0x0800c29c
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
<<<<<<< HEAD
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	69db      	ldr	r3, [r3, #28]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d020      	beq.n	800843a <HAL_SPI_Init+0x23e>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	69db      	ldr	r3, [r3, #28]
 80083fc:	2b08      	cmp	r3, #8
 80083fe:	d01c      	beq.n	800843a <HAL_SPI_Init+0x23e>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	69db      	ldr	r3, [r3, #28]
 8008404:	2b10      	cmp	r3, #16
 8008406:	d018      	beq.n	800843a <HAL_SPI_Init+0x23e>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	69db      	ldr	r3, [r3, #28]
 800840c:	2b18      	cmp	r3, #24
 800840e:	d014      	beq.n	800843a <HAL_SPI_Init+0x23e>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	69db      	ldr	r3, [r3, #28]
 8008414:	2b20      	cmp	r3, #32
 8008416:	d010      	beq.n	800843a <HAL_SPI_Init+0x23e>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	69db      	ldr	r3, [r3, #28]
 800841c:	2b28      	cmp	r3, #40	; 0x28
 800841e:	d00c      	beq.n	800843a <HAL_SPI_Init+0x23e>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	69db      	ldr	r3, [r3, #28]
 8008424:	2b30      	cmp	r3, #48	; 0x30
 8008426:	d008      	beq.n	800843a <HAL_SPI_Init+0x23e>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	2b38      	cmp	r3, #56	; 0x38
 800842e:	d004      	beq.n	800843a <HAL_SPI_Init+0x23e>
 8008430:	f240 1159 	movw	r1, #345	; 0x159
 8008434:	484a      	ldr	r0, [pc, #296]	; (8008560 <HAL_SPI_Init+0x364>)
 8008436:	f7f9 fc80 	bl	8001d3a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	615a      	str	r2, [r3, #20]
=======
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	69db      	ldr	r3, [r3, #28]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d020      	beq.n	8008536 <HAL_SPI_Init+0x23e>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	69db      	ldr	r3, [r3, #28]
 80084f8:	2b08      	cmp	r3, #8
 80084fa:	d01c      	beq.n	8008536 <HAL_SPI_Init+0x23e>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	69db      	ldr	r3, [r3, #28]
 8008500:	2b10      	cmp	r3, #16
 8008502:	d018      	beq.n	8008536 <HAL_SPI_Init+0x23e>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	69db      	ldr	r3, [r3, #28]
 8008508:	2b18      	cmp	r3, #24
 800850a:	d014      	beq.n	8008536 <HAL_SPI_Init+0x23e>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	69db      	ldr	r3, [r3, #28]
 8008510:	2b20      	cmp	r3, #32
 8008512:	d010      	beq.n	8008536 <HAL_SPI_Init+0x23e>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	69db      	ldr	r3, [r3, #28]
 8008518:	2b28      	cmp	r3, #40	; 0x28
 800851a:	d00c      	beq.n	8008536 <HAL_SPI_Init+0x23e>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	69db      	ldr	r3, [r3, #28]
 8008520:	2b30      	cmp	r3, #48	; 0x30
 8008522:	d008      	beq.n	8008536 <HAL_SPI_Init+0x23e>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	69db      	ldr	r3, [r3, #28]
 8008528:	2b38      	cmp	r3, #56	; 0x38
 800852a:	d004      	beq.n	8008536 <HAL_SPI_Init+0x23e>
 800852c:	f240 1159 	movw	r1, #345	; 0x159
 8008530:	484a      	ldr	r0, [pc, #296]	; (800865c <HAL_SPI_Init+0x364>)
 8008532:	f7f9 fc80 	bl	8001e36 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	615a      	str	r2, [r3, #20]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b00      	cmp	r3, #0
 8008456:	d126      	bne.n	80084a6 <HAL_SPI_Init+0x2aa>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b00      	cmp	r3, #0
 8008552:	d126      	bne.n	80085a2 <HAL_SPI_Init+0x2aa>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
<<<<<<< HEAD
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a40      	ldr	r2, [pc, #256]	; (8008564 <HAL_SPI_Init+0x368>)
 8008464:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a3f      	ldr	r2, [pc, #252]	; (8008568 <HAL_SPI_Init+0x36c>)
 800846a:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a3f      	ldr	r2, [pc, #252]	; (800856c <HAL_SPI_Init+0x370>)
 8008470:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a3e      	ldr	r2, [pc, #248]	; (8008570 <HAL_SPI_Init+0x374>)
 8008476:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a3e      	ldr	r2, [pc, #248]	; (8008574 <HAL_SPI_Init+0x378>)
 800847c:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a3d      	ldr	r2, [pc, #244]	; (8008578 <HAL_SPI_Init+0x37c>)
 8008482:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a3d      	ldr	r2, [pc, #244]	; (800857c <HAL_SPI_Init+0x380>)
 8008488:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a3c      	ldr	r2, [pc, #240]	; (8008580 <HAL_SPI_Init+0x384>)
 800848e:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008494:	2b00      	cmp	r3, #0
 8008496:	d102      	bne.n	800849e <HAL_SPI_Init+0x2a2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a3a      	ldr	r2, [pc, #232]	; (8008584 <HAL_SPI_Init+0x388>)
 800849c:	679a      	str	r2, [r3, #120]	; 0x78
=======
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a40      	ldr	r2, [pc, #256]	; (8008660 <HAL_SPI_Init+0x368>)
 8008560:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a3f      	ldr	r2, [pc, #252]	; (8008664 <HAL_SPI_Init+0x36c>)
 8008566:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a3f      	ldr	r2, [pc, #252]	; (8008668 <HAL_SPI_Init+0x370>)
 800856c:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a3e      	ldr	r2, [pc, #248]	; (800866c <HAL_SPI_Init+0x374>)
 8008572:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a3e      	ldr	r2, [pc, #248]	; (8008670 <HAL_SPI_Init+0x378>)
 8008578:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a3d      	ldr	r2, [pc, #244]	; (8008674 <HAL_SPI_Init+0x37c>)
 800857e:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a3d      	ldr	r2, [pc, #244]	; (8008678 <HAL_SPI_Init+0x380>)
 8008584:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a3c      	ldr	r2, [pc, #240]	; (800867c <HAL_SPI_Init+0x384>)
 800858a:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008590:	2b00      	cmp	r3, #0
 8008592:	d102      	bne.n	800859a <HAL_SPI_Init+0x2a2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a3a      	ldr	r2, [pc, #232]	; (8008680 <HAL_SPI_Init+0x388>)
 8008598:	679a      	str	r2, [r3, #120]	; 0x78
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
<<<<<<< HEAD
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	4798      	blx	r3
=======
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	4798      	blx	r3
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2202      	movs	r2, #2
 80084aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084bc:	601a      	str	r2, [r3, #0]
=======
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2202      	movs	r2, #2
 80085a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085b8:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
<<<<<<< HEAD
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80084ce:	431a      	orrs	r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084d8:	431a      	orrs	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	f003 0302 	and.w	r3, r3, #2
 80084e2:	431a      	orrs	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	695b      	ldr	r3, [r3, #20]
 80084e8:	f003 0301 	and.w	r3, r3, #1
 80084ec:	431a      	orrs	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084f6:	431a      	orrs	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	69db      	ldr	r3, [r3, #28]
 80084fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008500:	431a      	orrs	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800850a:	ea42 0103 	orr.w	r1, r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008512:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	430a      	orrs	r2, r1
 800851c:	601a      	str	r2, [r3, #0]
=======
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80085ca:	431a      	orrs	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68db      	ldr	r3, [r3, #12]
 80085d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085d4:	431a      	orrs	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	431a      	orrs	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	695b      	ldr	r3, [r3, #20]
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	431a      	orrs	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085f2:	431a      	orrs	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	69db      	ldr	r3, [r3, #28]
 80085f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80085fc:	431a      	orrs	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008606:	ea42 0103 	orr.w	r1, r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800860e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	430a      	orrs	r2, r1
 8008618:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
<<<<<<< HEAD
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	0c1b      	lsrs	r3, r3, #16
 8008524:	f003 0104 	and.w	r1, r3, #4
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852c:	f003 0210 	and.w	r2, r3, #16
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	430a      	orrs	r2, r1
 8008536:	605a      	str	r2, [r3, #4]
=======
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	0c1b      	lsrs	r3, r3, #16
 8008620:	f003 0104 	and.w	r1, r3, #4
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008628:	f003 0210 	and.w	r2, r3, #16
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	430a      	orrs	r2, r1
 8008632:	605a      	str	r2, [r3, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< HEAD
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	69da      	ldr	r2, [r3, #28]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008546:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2201      	movs	r2, #1
 8008552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	0800c19c 	.word	0x0800c19c
 8008564:	08008ae5 	.word	0x08008ae5
 8008568:	08008af9 	.word	0x08008af9
 800856c:	08008b0d 	.word	0x08008b0d
 8008570:	08008b21 	.word	0x08008b21
 8008574:	08008b35 	.word	0x08008b35
 8008578:	08008b49 	.word	0x08008b49
 800857c:	08008b5d 	.word	0x08008b5d
 8008580:	08008b71 	.word	0x08008b71
 8008584:	08001dbd 	.word	0x08001dbd

08008588 <HAL_SPI_TransmitReceive>:
=======
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	69da      	ldr	r2, [r3, #28]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008642:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	0800c29c 	.word	0x0800c29c
 8008660:	08008be1 	.word	0x08008be1
 8008664:	08008bf5 	.word	0x08008bf5
 8008668:	08008c09 	.word	0x08008c09
 800866c:	08008c1d 	.word	0x08008c1d
 8008670:	08008c31 	.word	0x08008c31
 8008674:	08008c45 	.word	0x08008c45
 8008678:	08008c59 	.word	0x08008c59
 800867c:	08008c6d 	.word	0x08008c6d
 8008680:	08001eb9 	.word	0x08001eb9

08008684 <HAL_SPI_TransmitReceive>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
<<<<<<< HEAD
 8008588:	b580      	push	{r7, lr}
 800858a:	b08c      	sub	sp, #48	; 0x30
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
 8008594:	807b      	strh	r3, [r7, #2]
=======
 8008684:	b580      	push	{r7, lr}
 8008686:	b08c      	sub	sp, #48	; 0x30
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	807b      	strh	r3, [r7, #2]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
<<<<<<< HEAD
 8008596:	2301      	movs	r3, #1
 8008598:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d004      	beq.n	80085b2 <HAL_SPI_TransmitReceive+0x2a>
 80085a8:	f240 417c 	movw	r1, #1148	; 0x47c
 80085ac:	4884      	ldr	r0, [pc, #528]	; (80087c0 <HAL_SPI_TransmitReceive+0x238>)
 80085ae:	f7f9 fbc4 	bl	8001d3a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d101      	bne.n	80085c0 <HAL_SPI_TransmitReceive+0x38>
 80085bc:	2302      	movs	r3, #2
 80085be:	e18d      	b.n	80088dc <HAL_SPI_TransmitReceive+0x354>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085c8:	f7f9 ff96 	bl	80024f8 <HAL_GetTick>
 80085cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80085de:	887b      	ldrh	r3, [r7, #2]
 80085e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80085e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d00f      	beq.n	800860a <HAL_SPI_TransmitReceive+0x82>
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085f0:	d107      	bne.n	8008602 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d103      	bne.n	8008602 <HAL_SPI_TransmitReceive+0x7a>
 80085fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085fe:	2b04      	cmp	r3, #4
 8008600:	d003      	beq.n	800860a <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8008602:	2302      	movs	r3, #2
 8008604:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008608:	e15e      	b.n	80088c8 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d005      	beq.n	800861c <HAL_SPI_TransmitReceive+0x94>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d002      	beq.n	800861c <HAL_SPI_TransmitReceive+0x94>
 8008616:	887b      	ldrh	r3, [r7, #2]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d103      	bne.n	8008624 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008622:	e151      	b.n	80088c8 <HAL_SPI_TransmitReceive+0x340>
=======
 8008692:	2301      	movs	r3, #1
 8008694:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d004      	beq.n	80086ae <HAL_SPI_TransmitReceive+0x2a>
 80086a4:	f240 417c 	movw	r1, #1148	; 0x47c
 80086a8:	4884      	ldr	r0, [pc, #528]	; (80088bc <HAL_SPI_TransmitReceive+0x238>)
 80086aa:	f7f9 fbc4 	bl	8001e36 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d101      	bne.n	80086bc <HAL_SPI_TransmitReceive+0x38>
 80086b8:	2302      	movs	r3, #2
 80086ba:	e18d      	b.n	80089d8 <HAL_SPI_TransmitReceive+0x354>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086c4:	f7f9 ff96 	bl	80025f4 <HAL_GetTick>
 80086c8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80086da:	887b      	ldrh	r3, [r7, #2]
 80086dc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80086de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d00f      	beq.n	8008706 <HAL_SPI_TransmitReceive+0x82>
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086ec:	d107      	bne.n	80086fe <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d103      	bne.n	80086fe <HAL_SPI_TransmitReceive+0x7a>
 80086f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086fa:	2b04      	cmp	r3, #4
 80086fc:	d003      	beq.n	8008706 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 80086fe:	2302      	movs	r3, #2
 8008700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008704:	e15e      	b.n	80089c4 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d005      	beq.n	8008718 <HAL_SPI_TransmitReceive+0x94>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d002      	beq.n	8008718 <HAL_SPI_TransmitReceive+0x94>
 8008712:	887b      	ldrh	r3, [r7, #2]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d103      	bne.n	8008720 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800871e:	e151      	b.n	80089c4 <HAL_SPI_TransmitReceive+0x340>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
<<<<<<< HEAD
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b04      	cmp	r3, #4
 800862e:	d003      	beq.n	8008638 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2205      	movs	r2, #5
 8008634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008726:	b2db      	uxtb	r3, r3
 8008728:	2b04      	cmp	r3, #4
 800872a:	d003      	beq.n	8008734 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2205      	movs	r2, #5
 8008730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
<<<<<<< HEAD
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	887a      	ldrh	r2, [r7, #2]
 8008648:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	887a      	ldrh	r2, [r7, #2]
 800864e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	887a      	ldrh	r2, [r7, #2]
 800865a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	887a      	ldrh	r2, [r7, #2]
 8008660:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2200      	movs	r2, #0
 8008666:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	887a      	ldrh	r2, [r7, #2]
 8008744:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	887a      	ldrh	r2, [r7, #2]
 800874a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	887a      	ldrh	r2, [r7, #2]
 8008756:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	887a      	ldrh	r2, [r7, #2]
 800875c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008678:	2b40      	cmp	r3, #64	; 0x40
 800867a:	d007      	beq.n	800868c <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800868a:	601a      	str	r2, [r3, #0]
=======
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008774:	2b40      	cmp	r3, #64	; 0x40
 8008776:	d007      	beq.n	8008788 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008786:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
<<<<<<< HEAD
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008694:	d178      	bne.n	8008788 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d002      	beq.n	80086a4 <HAL_SPI_TransmitReceive+0x11c>
 800869e:	8b7b      	ldrh	r3, [r7, #26]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d166      	bne.n	8008772 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a8:	881a      	ldrh	r2, [r3, #0]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b4:	1c9a      	adds	r2, r3, #2
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086be:	b29b      	uxth	r3, r3
 80086c0:	3b01      	subs	r3, #1
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086c8:	e053      	b.n	8008772 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	f003 0302 	and.w	r3, r3, #2
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d11b      	bne.n	8008710 <HAL_SPI_TransmitReceive+0x188>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086dc:	b29b      	uxth	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d016      	beq.n	8008710 <HAL_SPI_TransmitReceive+0x188>
 80086e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d113      	bne.n	8008710 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ec:	881a      	ldrh	r2, [r3, #0]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f8:	1c9a      	adds	r2, r3, #2
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008702:	b29b      	uxth	r3, r3
 8008704:	3b01      	subs	r3, #1
 8008706:	b29a      	uxth	r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800870c:	2300      	movs	r3, #0
 800870e:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008790:	d178      	bne.n	8008884 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d002      	beq.n	80087a0 <HAL_SPI_TransmitReceive+0x11c>
 800879a:	8b7b      	ldrh	r3, [r7, #26]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d166      	bne.n	800886e <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a4:	881a      	ldrh	r2, [r3, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b0:	1c9a      	adds	r2, r3, #2
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	3b01      	subs	r3, #1
 80087be:	b29a      	uxth	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087c4:	e053      	b.n	800886e <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f003 0302 	and.w	r3, r3, #2
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d11b      	bne.n	800880c <HAL_SPI_TransmitReceive+0x188>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087d8:	b29b      	uxth	r3, r3
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d016      	beq.n	800880c <HAL_SPI_TransmitReceive+0x188>
 80087de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d113      	bne.n	800880c <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e8:	881a      	ldrh	r2, [r3, #0]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f4:	1c9a      	adds	r2, r3, #2
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087fe:	b29b      	uxth	r3, r3
 8008800:	3b01      	subs	r3, #1
 8008802:	b29a      	uxth	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008808:	2300      	movs	r3, #0
 800880a:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b01      	cmp	r3, #1
 800871c:	d119      	bne.n	8008752 <HAL_SPI_TransmitReceive+0x1ca>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008722:	b29b      	uxth	r3, r3
 8008724:	2b00      	cmp	r3, #0
 8008726:	d014      	beq.n	8008752 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68da      	ldr	r2, [r3, #12]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008732:	b292      	uxth	r2, r2
 8008734:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873a:	1c9a      	adds	r2, r3, #2
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008744:	b29b      	uxth	r3, r3
 8008746:	3b01      	subs	r3, #1
 8008748:	b29a      	uxth	r2, r3
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800874e:	2301      	movs	r3, #1
 8008750:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008752:	f7f9 fed1 	bl	80024f8 <HAL_GetTick>
 8008756:	4602      	mov	r2, r0
 8008758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800875e:	429a      	cmp	r2, r3
 8008760:	d807      	bhi.n	8008772 <HAL_SPI_TransmitReceive+0x1ea>
 8008762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008768:	d003      	beq.n	8008772 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 800876a:	2303      	movs	r3, #3
 800876c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008770:	e0aa      	b.n	80088c8 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008776:	b29b      	uxth	r3, r3
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1a6      	bne.n	80086ca <HAL_SPI_TransmitReceive+0x142>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008780:	b29b      	uxth	r3, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1a1      	bne.n	80086ca <HAL_SPI_TransmitReceive+0x142>
 8008786:	e07f      	b.n	8008888 <HAL_SPI_TransmitReceive+0x300>
=======
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b01      	cmp	r3, #1
 8008818:	d119      	bne.n	800884e <HAL_SPI_TransmitReceive+0x1ca>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800881e:	b29b      	uxth	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d014      	beq.n	800884e <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68da      	ldr	r2, [r3, #12]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882e:	b292      	uxth	r2, r2
 8008830:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008836:	1c9a      	adds	r2, r3, #2
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008840:	b29b      	uxth	r3, r3
 8008842:	3b01      	subs	r3, #1
 8008844:	b29a      	uxth	r2, r3
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800884a:	2301      	movs	r3, #1
 800884c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800884e:	f7f9 fed1 	bl	80025f4 <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800885a:	429a      	cmp	r2, r3
 800885c:	d807      	bhi.n	800886e <HAL_SPI_TransmitReceive+0x1ea>
 800885e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008864:	d003      	beq.n	800886e <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8008866:	2303      	movs	r3, #3
 8008868:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800886c:	e0aa      	b.n	80089c4 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008872:	b29b      	uxth	r3, r3
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1a6      	bne.n	80087c6 <HAL_SPI_TransmitReceive+0x142>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800887c:	b29b      	uxth	r3, r3
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1a1      	bne.n	80087c6 <HAL_SPI_TransmitReceive+0x142>
 8008882:	e07f      	b.n	8008984 <HAL_SPI_TransmitReceive+0x300>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< HEAD
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <HAL_SPI_TransmitReceive+0x20e>
 8008790:	8b7b      	ldrh	r3, [r7, #26]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d16e      	bne.n	8008874 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	330c      	adds	r3, #12
 80087a0:	7812      	ldrb	r2, [r2, #0]
 80087a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a8:	1c5a      	adds	r2, r3, #1
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	3b01      	subs	r3, #1
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087bc:	e05a      	b.n	8008874 <HAL_SPI_TransmitReceive+0x2ec>
 80087be:	bf00      	nop
 80087c0:	0800c19c 	.word	0x0800c19c
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f003 0302 	and.w	r3, r3, #2
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d11c      	bne.n	800880c <HAL_SPI_TransmitReceive+0x284>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d017      	beq.n	800880c <HAL_SPI_TransmitReceive+0x284>
 80087dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d114      	bne.n	800880c <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	330c      	adds	r3, #12
 80087ec:	7812      	ldrb	r2, [r2, #0]
 80087ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f4:	1c5a      	adds	r2, r3, #1
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087fe:	b29b      	uxth	r3, r3
 8008800:	3b01      	subs	r3, #1
 8008802:	b29a      	uxth	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008808:	2300      	movs	r3, #0
 800880a:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d002      	beq.n	8008892 <HAL_SPI_TransmitReceive+0x20e>
 800888c:	8b7b      	ldrh	r3, [r7, #26]
 800888e:	2b01      	cmp	r3, #1
 8008890:	d16e      	bne.n	8008970 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	330c      	adds	r3, #12
 800889c:	7812      	ldrb	r2, [r2, #0]
 800889e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a4:	1c5a      	adds	r2, r3, #1
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	3b01      	subs	r3, #1
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088b8:	e05a      	b.n	8008970 <HAL_SPI_TransmitReceive+0x2ec>
 80088ba:	bf00      	nop
 80088bc:	0800c29c 	.word	0x0800c29c
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	f003 0302 	and.w	r3, r3, #2
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d11c      	bne.n	8008908 <HAL_SPI_TransmitReceive+0x284>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d017      	beq.n	8008908 <HAL_SPI_TransmitReceive+0x284>
 80088d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d114      	bne.n	8008908 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	330c      	adds	r3, #12
 80088e8:	7812      	ldrb	r2, [r2, #0]
 80088ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f0:	1c5a      	adds	r2, r3, #1
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	3b01      	subs	r3, #1
 80088fe:	b29a      	uxth	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008904:	2300      	movs	r3, #0
 8008906:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b01      	cmp	r3, #1
 8008818:	d119      	bne.n	800884e <HAL_SPI_TransmitReceive+0x2c6>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800881e:	b29b      	uxth	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	d014      	beq.n	800884e <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68da      	ldr	r2, [r3, #12]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882e:	b2d2      	uxtb	r2, r2
 8008830:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008840:	b29b      	uxth	r3, r3
 8008842:	3b01      	subs	r3, #1
 8008844:	b29a      	uxth	r2, r3
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800884a:	2301      	movs	r3, #1
 800884c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800884e:	f7f9 fe53 	bl	80024f8 <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800885a:	429a      	cmp	r2, r3
 800885c:	d803      	bhi.n	8008866 <HAL_SPI_TransmitReceive+0x2de>
 800885e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008864:	d102      	bne.n	800886c <HAL_SPI_TransmitReceive+0x2e4>
 8008866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008868:	2b00      	cmp	r3, #0
 800886a:	d103      	bne.n	8008874 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008872:	e029      	b.n	80088c8 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008878:	b29b      	uxth	r3, r3
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1a2      	bne.n	80087c4 <HAL_SPI_TransmitReceive+0x23c>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008882:	b29b      	uxth	r3, r3
 8008884:	2b00      	cmp	r3, #0
 8008886:	d19d      	bne.n	80087c4 <HAL_SPI_TransmitReceive+0x23c>
=======
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b01      	cmp	r3, #1
 8008914:	d119      	bne.n	800894a <HAL_SPI_TransmitReceive+0x2c6>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800891a:	b29b      	uxth	r3, r3
 800891c:	2b00      	cmp	r3, #0
 800891e:	d014      	beq.n	800894a <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68da      	ldr	r2, [r3, #12]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892a:	b2d2      	uxtb	r2, r2
 800892c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008932:	1c5a      	adds	r2, r3, #1
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800893c:	b29b      	uxth	r3, r3
 800893e:	3b01      	subs	r3, #1
 8008940:	b29a      	uxth	r2, r3
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008946:	2301      	movs	r3, #1
 8008948:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800894a:	f7f9 fe53 	bl	80025f4 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008956:	429a      	cmp	r2, r3
 8008958:	d803      	bhi.n	8008962 <HAL_SPI_TransmitReceive+0x2de>
 800895a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008960:	d102      	bne.n	8008968 <HAL_SPI_TransmitReceive+0x2e4>
 8008962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008964:	2b00      	cmp	r3, #0
 8008966:	d103      	bne.n	8008970 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800896e:	e029      	b.n	80089c4 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008974:	b29b      	uxth	r3, r3
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1a2      	bne.n	80088c0 <HAL_SPI_TransmitReceive+0x23c>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800897e:	b29b      	uxth	r3, r3
 8008980:	2b00      	cmp	r3, #0
 8008982:	d19d      	bne.n	80088c0 <HAL_SPI_TransmitReceive+0x23c>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8008888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800888a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 fa17 	bl	8008cc0 <SPI_EndRxTxTransaction>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d006      	beq.n	80088a6 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2220      	movs	r2, #32
 80088a2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80088a4:	e010      	b.n	80088c8 <HAL_SPI_TransmitReceive+0x340>
=======
 8008984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008986:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f000 fa17 	bl	8008dbc <SPI_EndRxTxTransaction>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d006      	beq.n	80089a2 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2220      	movs	r2, #32
 800899e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80089a0:	e010      	b.n	80089c4 <HAL_SPI_TransmitReceive+0x340>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< HEAD
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d10b      	bne.n	80088c6 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088ae:	2300      	movs	r3, #0
 80088b0:	617b      	str	r3, [r7, #20]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	617b      	str	r3, [r7, #20]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	617b      	str	r3, [r7, #20]
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	e000      	b.n	80088c8 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 80088c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80088d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3730      	adds	r7, #48	; 0x30
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <HAL_SPI_IRQHandler>:
=======
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10b      	bne.n	80089c2 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089aa:	2300      	movs	r3, #0
 80089ac:	617b      	str	r3, [r7, #20]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	617b      	str	r3, [r7, #20]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	617b      	str	r3, [r7, #20]
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	e000      	b.n	80089c4 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 80089c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80089d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3730      	adds	r7, #48	; 0x30
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <HAL_SPI_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b088      	sub	sp, #32
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	099b      	lsrs	r3, r3, #6
 8008900:	f003 0301 	and.w	r3, r3, #1
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10f      	bne.n	8008928 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00a      	beq.n	8008928 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	099b      	lsrs	r3, r3, #6
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	2b00      	cmp	r3, #0
 800891c:	d004      	beq.n	8008928 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	4798      	blx	r3
    return;
 8008926:	e0d8      	b.n	8008ada <HAL_SPI_IRQHandler+0x1f6>
=======
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b088      	sub	sp, #32
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	099b      	lsrs	r3, r3, #6
 80089fc:	f003 0301 	and.w	r3, r3, #1
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10f      	bne.n	8008a24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00a      	beq.n	8008a24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	099b      	lsrs	r3, r3, #6
 8008a12:	f003 0301 	and.w	r3, r3, #1
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d004      	beq.n	8008a24 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	4798      	blx	r3
    return;
 8008a22:	e0d8      	b.n	8008bd6 <HAL_SPI_IRQHandler+0x1f6>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
<<<<<<< HEAD
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	085b      	lsrs	r3, r3, #1
 800892c:	f003 0301 	and.w	r3, r3, #1
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00a      	beq.n	800894a <HAL_SPI_IRQHandler+0x66>
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	09db      	lsrs	r3, r3, #7
 8008938:	f003 0301 	and.w	r3, r3, #1
 800893c:	2b00      	cmp	r3, #0
 800893e:	d004      	beq.n	800894a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	4798      	blx	r3
    return;
 8008948:	e0c7      	b.n	8008ada <HAL_SPI_IRQHandler+0x1f6>
=======
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	085b      	lsrs	r3, r3, #1
 8008a28:	f003 0301 	and.w	r3, r3, #1
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00a      	beq.n	8008a46 <HAL_SPI_IRQHandler+0x66>
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	09db      	lsrs	r3, r3, #7
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d004      	beq.n	8008a46 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	4798      	blx	r3
    return;
 8008a44:	e0c7      	b.n	8008bd6 <HAL_SPI_IRQHandler+0x1f6>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
<<<<<<< HEAD
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	095b      	lsrs	r3, r3, #5
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10c      	bne.n	8008970 <HAL_SPI_IRQHandler+0x8c>
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	099b      	lsrs	r3, r3, #6
 800895a:	f003 0301 	and.w	r3, r3, #1
 800895e:	2b00      	cmp	r3, #0
 8008960:	d106      	bne.n	8008970 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	0a1b      	lsrs	r3, r3, #8
 8008966:	f003 0301 	and.w	r3, r3, #1
 800896a:	2b00      	cmp	r3, #0
 800896c:	f000 80b5 	beq.w	8008ada <HAL_SPI_IRQHandler+0x1f6>
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	095b      	lsrs	r3, r3, #5
 8008974:	f003 0301 	and.w	r3, r3, #1
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 80ae 	beq.w	8008ada <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	099b      	lsrs	r3, r3, #6
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	2b00      	cmp	r3, #0
 8008988:	d023      	beq.n	80089d2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b03      	cmp	r3, #3
 8008994:	d011      	beq.n	80089ba <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800899a:	f043 0204 	orr.w	r2, r3, #4
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089a2:	2300      	movs	r3, #0
 80089a4:	617b      	str	r3, [r7, #20]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	617b      	str	r3, [r7, #20]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	617b      	str	r3, [r7, #20]
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	e00b      	b.n	80089d2 <HAL_SPI_IRQHandler+0xee>
=======
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	095b      	lsrs	r3, r3, #5
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10c      	bne.n	8008a6c <HAL_SPI_IRQHandler+0x8c>
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	099b      	lsrs	r3, r3, #6
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d106      	bne.n	8008a6c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	0a1b      	lsrs	r3, r3, #8
 8008a62:	f003 0301 	and.w	r3, r3, #1
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f000 80b5 	beq.w	8008bd6 <HAL_SPI_IRQHandler+0x1f6>
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	095b      	lsrs	r3, r3, #5
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f000 80ae 	beq.w	8008bd6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	099b      	lsrs	r3, r3, #6
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d023      	beq.n	8008ace <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	d011      	beq.n	8008ab6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a96:	f043 0204 	orr.w	r2, r3, #4
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	617b      	str	r3, [r7, #20]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	617b      	str	r3, [r7, #20]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	617b      	str	r3, [r7, #20]
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	e00b      	b.n	8008ace <HAL_SPI_IRQHandler+0xee>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
<<<<<<< HEAD
 80089ba:	2300      	movs	r3, #0
 80089bc:	613b      	str	r3, [r7, #16]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	613b      	str	r3, [r7, #16]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	613b      	str	r3, [r7, #16]
 80089ce:	693b      	ldr	r3, [r7, #16]
        return;
 80089d0:	e083      	b.n	8008ada <HAL_SPI_IRQHandler+0x1f6>
=======
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	613b      	str	r3, [r7, #16]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	613b      	str	r3, [r7, #16]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	613b      	str	r3, [r7, #16]
 8008aca:	693b      	ldr	r3, [r7, #16]
        return;
 8008acc:	e083      	b.n	8008bd6 <HAL_SPI_IRQHandler+0x1f6>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
<<<<<<< HEAD
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	095b      	lsrs	r3, r3, #5
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d014      	beq.n	8008a08 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089e2:	f043 0201 	orr.w	r2, r3, #1
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80089ea:	2300      	movs	r3, #0
 80089ec:	60fb      	str	r3, [r7, #12]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	60fb      	str	r3, [r7, #12]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a04:	601a      	str	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
=======
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	095b      	lsrs	r3, r3, #5
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d014      	beq.n	8008b04 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ade:	f043 0201 	orr.w	r2, r3, #1
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	60fb      	str	r3, [r7, #12]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	60fb      	str	r3, [r7, #12]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b00:	601a      	str	r2, [r3, #0]
 8008b02:	68fb      	ldr	r3, [r7, #12]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
<<<<<<< HEAD
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	0a1b      	lsrs	r3, r3, #8
 8008a0c:	f003 0301 	and.w	r3, r3, #1
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00c      	beq.n	8008a2e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a18:	f043 0208 	orr.w	r2, r3, #8
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008a20:	2300      	movs	r3, #0
 8008a22:	60bb      	str	r3, [r7, #8]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	60bb      	str	r3, [r7, #8]
 8008a2c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d050      	beq.n	8008ad8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008a44:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	f003 0302 	and.w	r3, r3, #2
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d104      	bne.n	8008a62 <HAL_SPI_IRQHandler+0x17e>
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d034      	beq.n	8008acc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	685a      	ldr	r2, [r3, #4]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f022 0203 	bic.w	r2, r2, #3
 8008a70:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d011      	beq.n	8008a9e <HAL_SPI_IRQHandler+0x1ba>
=======
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	0a1b      	lsrs	r3, r3, #8
 8008b08:	f003 0301 	and.w	r3, r3, #1
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00c      	beq.n	8008b2a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b14:	f043 0208 	orr.w	r2, r3, #8
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	60bb      	str	r3, [r7, #8]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	60bb      	str	r3, [r7, #8]
 8008b28:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d050      	beq.n	8008bd4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	685a      	ldr	r2, [r3, #4]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008b40:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2201      	movs	r2, #1
 8008b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	f003 0302 	and.w	r3, r3, #2
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d104      	bne.n	8008b5e <HAL_SPI_IRQHandler+0x17e>
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	f003 0301 	and.w	r3, r3, #1
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d034      	beq.n	8008bc8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	685a      	ldr	r2, [r3, #4]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f022 0203 	bic.w	r2, r2, #3
 8008b6c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d011      	beq.n	8008b9a <HAL_SPI_IRQHandler+0x1ba>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
<<<<<<< HEAD
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a7e:	4a18      	ldr	r2, [pc, #96]	; (8008ae0 <HAL_SPI_IRQHandler+0x1fc>)
 8008a80:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fb ff66 	bl	8004958 <HAL_DMA_Abort_IT>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d005      	beq.n	8008a9e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b7a:	4a18      	ldr	r2, [pc, #96]	; (8008bdc <HAL_SPI_IRQHandler+0x1fc>)
 8008b7c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fb ff66 	bl	8004a54 <HAL_DMA_Abort_IT>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d005      	beq.n	8008b9a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
<<<<<<< HEAD
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d017      	beq.n	8008ad6 <HAL_SPI_IRQHandler+0x1f2>
=======
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d017      	beq.n	8008bd2 <HAL_SPI_IRQHandler+0x1f2>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
<<<<<<< HEAD
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aaa:	4a0d      	ldr	r2, [pc, #52]	; (8008ae0 <HAL_SPI_IRQHandler+0x1fc>)
 8008aac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7fb ff50 	bl	8004958 <HAL_DMA_Abort_IT>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00b      	beq.n	8008ad6 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ac2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008aca:	e004      	b.n	8008ad6 <HAL_SPI_IRQHandler+0x1f2>
=======
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ba6:	4a0d      	ldr	r2, [pc, #52]	; (8008bdc <HAL_SPI_IRQHandler+0x1fc>)
 8008ba8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7fb ff50 	bl	8004a54 <HAL_DMA_Abort_IT>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00b      	beq.n	8008bd2 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008bc6:	e004      	b.n	8008bd2 <HAL_SPI_IRQHandler+0x1f2>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
<<<<<<< HEAD
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	4798      	blx	r3
=======
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	4798      	blx	r3
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
<<<<<<< HEAD
 8008ad4:	e000      	b.n	8008ad8 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8008ad6:	bf00      	nop
    return;
 8008ad8:	bf00      	nop
  }
}
 8008ada:	3720      	adds	r7, #32
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	08008b85 	.word	0x08008b85

08008ae4 <HAL_SPI_TxCpltCallback>:
=======
 8008bd0:	e000      	b.n	8008bd4 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8008bd2:	bf00      	nop
    return;
 8008bd4:	bf00      	nop
  }
}
 8008bd6:	3720      	adds	r7, #32
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	08008c81 	.word	0x08008c81

08008be0 <HAL_SPI_TxCpltCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
=======
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
<<<<<<< HEAD
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_SPI_RxCpltCallback>:
=======
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <HAL_SPI_RxCpltCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
=======
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
<<<<<<< HEAD
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <HAL_SPI_TxRxCpltCallback>:
=======
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <HAL_SPI_TxRxCpltCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
=======
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
<<<<<<< HEAD
 8008b14:	bf00      	nop
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <HAL_SPI_TxHalfCpltCallback>:
=======
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <HAL_SPI_TxHalfCpltCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
=======
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
<<<<<<< HEAD
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <HAL_SPI_RxHalfCpltCallback>:
=======
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <HAL_SPI_RxHalfCpltCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
=======
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
<<<<<<< HEAD
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <HAL_SPI_TxRxHalfCpltCallback>:
=======
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <HAL_SPI_TxRxHalfCpltCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
=======
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
<<<<<<< HEAD
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <HAL_SPI_ErrorCallback>:
=======
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <HAL_SPI_ErrorCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
=======
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
<<<<<<< HEAD
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_SPI_AbortCpltCallback>:
=======
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <HAL_SPI_AbortCpltCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
=======
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <SPI_DMAAbortOnError>:
=======
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <SPI_DMAAbortOnError>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b90:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	86da      	strh	r2, [r3, #54]	; 0x36
=======
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c8c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	86da      	strh	r2, [r3, #54]	; 0x36
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
<<<<<<< HEAD
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	4798      	blx	r3
=======
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	4798      	blx	r3
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
<<<<<<< HEAD
 8008ba6:	bf00      	nop
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
	...

08008bb0 <SPI_WaitFlagStateUntilTimeout>:
=======
 8008ca2:	bf00      	nop
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
	...

08008cac <SPI_WaitFlagStateUntilTimeout>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b088      	sub	sp, #32
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	60f8      	str	r0, [r7, #12]
 8008bb8:	60b9      	str	r1, [r7, #8]
 8008bba:	603b      	str	r3, [r7, #0]
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	71fb      	strb	r3, [r7, #7]
=======
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b088      	sub	sp, #32
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	603b      	str	r3, [r7, #0]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	71fb      	strb	r3, [r7, #7]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
<<<<<<< HEAD
 8008bc0:	f7f9 fc9a 	bl	80024f8 <HAL_GetTick>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc8:	1a9b      	subs	r3, r3, r2
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	4413      	add	r3, r2
 8008bce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008bd0:	f7f9 fc92 	bl	80024f8 <HAL_GetTick>
 8008bd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008bd6:	4b39      	ldr	r3, [pc, #228]	; (8008cbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	015b      	lsls	r3, r3, #5
 8008bdc:	0d1b      	lsrs	r3, r3, #20
 8008bde:	69fa      	ldr	r2, [r7, #28]
 8008be0:	fb02 f303 	mul.w	r3, r2, r3
 8008be4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008be6:	e054      	b.n	8008c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bee:	d050      	beq.n	8008c92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008bf0:	f7f9 fc82 	bl	80024f8 <HAL_GetTick>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	69fa      	ldr	r2, [r7, #28]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d902      	bls.n	8008c06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d13d      	bne.n	8008c82 <SPI_WaitFlagStateUntilTimeout+0xd2>
=======
 8008cbc:	f7f9 fc9a 	bl	80025f4 <HAL_GetTick>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc4:	1a9b      	subs	r3, r3, r2
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	4413      	add	r3, r2
 8008cca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008ccc:	f7f9 fc92 	bl	80025f4 <HAL_GetTick>
 8008cd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008cd2:	4b39      	ldr	r3, [pc, #228]	; (8008db8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	015b      	lsls	r3, r3, #5
 8008cd8:	0d1b      	lsrs	r3, r3, #20
 8008cda:	69fa      	ldr	r2, [r7, #28]
 8008cdc:	fb02 f303 	mul.w	r3, r2, r3
 8008ce0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ce2:	e054      	b.n	8008d8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cea:	d050      	beq.n	8008d8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008cec:	f7f9 fc82 	bl	80025f4 <HAL_GetTick>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	69fa      	ldr	r2, [r7, #28]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d902      	bls.n	8008d02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d13d      	bne.n	8008d7e <SPI_WaitFlagStateUntilTimeout+0xd2>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< HEAD
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008c14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c1e:	d111      	bne.n	8008c44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c28:	d004      	beq.n	8008c34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c32:	d107      	bne.n	8008c44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c42:	601a      	str	r2, [r3, #0]
=======
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008d10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d1a:	d111      	bne.n	8008d40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d24:	d004      	beq.n	8008d30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d2e:	d107      	bne.n	8008d40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d3e:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< HEAD
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c4c:	d10f      	bne.n	8008c6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c5c:	601a      	str	r2, [r3, #0]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e017      	b.n	8008cb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d101      	bne.n	8008c8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	689a      	ldr	r2, [r3, #8]
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	bf0c      	ite	eq
 8008ca2:	2301      	moveq	r3, #1
 8008ca4:	2300      	movne	r3, #0
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	461a      	mov	r2, r3
 8008caa:	79fb      	ldrb	r3, [r7, #7]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d19b      	bne.n	8008be8 <SPI_WaitFlagStateUntilTimeout+0x38>
=======
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d48:	d10f      	bne.n	8008d6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d58:	601a      	str	r2, [r3, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e017      	b.n	8008dae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d101      	bne.n	8008d88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008d84:	2300      	movs	r3, #0
 8008d86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	689a      	ldr	r2, [r3, #8]
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	4013      	ands	r3, r2
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	bf0c      	ite	eq
 8008d9e:	2301      	moveq	r3, #1
 8008da0:	2300      	movne	r3, #0
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	461a      	mov	r2, r3
 8008da6:	79fb      	ldrb	r3, [r7, #7]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d19b      	bne.n	8008ce4 <SPI_WaitFlagStateUntilTimeout+0x38>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8008cb0:	2300      	movs	r3, #0
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3720      	adds	r7, #32
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	20000000 	.word	0x20000000

08008cc0 <SPI_EndRxTxTransaction>:
=======
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3720      	adds	r7, #32
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	20000000 	.word	0x20000000

08008dbc <SPI_EndRxTxTransaction>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b088      	sub	sp, #32
 8008cc4:	af02      	add	r7, sp, #8
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008ccc:	4b1b      	ldr	r3, [pc, #108]	; (8008d3c <SPI_EndRxTxTransaction+0x7c>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a1b      	ldr	r2, [pc, #108]	; (8008d40 <SPI_EndRxTxTransaction+0x80>)
 8008cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd6:	0d5b      	lsrs	r3, r3, #21
 8008cd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008cdc:	fb02 f303 	mul.w	r3, r2, r3
 8008ce0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008cea:	d112      	bne.n	8008d12 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	2180      	movs	r1, #128	; 0x80
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f7ff ff5a 	bl	8008bb0 <SPI_WaitFlagStateUntilTimeout>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d016      	beq.n	8008d30 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d06:	f043 0220 	orr.w	r2, r3, #32
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e00f      	b.n	8008d32 <SPI_EndRxTxTransaction+0x72>
=======
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b088      	sub	sp, #32
 8008dc0:	af02      	add	r7, sp, #8
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008dc8:	4b1b      	ldr	r3, [pc, #108]	; (8008e38 <SPI_EndRxTxTransaction+0x7c>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a1b      	ldr	r2, [pc, #108]	; (8008e3c <SPI_EndRxTxTransaction+0x80>)
 8008dce:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd2:	0d5b      	lsrs	r3, r3, #21
 8008dd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008dd8:	fb02 f303 	mul.w	r3, r2, r3
 8008ddc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008de6:	d112      	bne.n	8008e0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	9300      	str	r3, [sp, #0]
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	2200      	movs	r2, #0
 8008df0:	2180      	movs	r1, #128	; 0x80
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f7ff ff5a 	bl	8008cac <SPI_WaitFlagStateUntilTimeout>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d016      	beq.n	8008e2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e02:	f043 0220 	orr.w	r2, r3, #32
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e00f      	b.n	8008e2e <SPI_EndRxTxTransaction+0x72>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
<<<<<<< HEAD
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00a      	beq.n	8008d2e <SPI_EndRxTxTransaction+0x6e>
=======
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00a      	beq.n	8008e2a <SPI_EndRxTxTransaction+0x6e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      {
        break;
      }
      count--;
<<<<<<< HEAD
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d28:	2b80      	cmp	r3, #128	; 0x80
 8008d2a:	d0f2      	beq.n	8008d12 <SPI_EndRxTxTransaction+0x52>
 8008d2c:	e000      	b.n	8008d30 <SPI_EndRxTxTransaction+0x70>
        break;
 8008d2e:	bf00      	nop
  }

  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3718      	adds	r7, #24
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	20000000 	.word	0x20000000
 8008d40:	165e9f81 	.word	0x165e9f81

08008d44 <HAL_TIM_Base_Init>:
=======
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	3b01      	subs	r3, #1
 8008e18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e24:	2b80      	cmp	r3, #128	; 0x80
 8008e26:	d0f2      	beq.n	8008e0e <SPI_EndRxTxTransaction+0x52>
 8008e28:	e000      	b.n	8008e2c <SPI_EndRxTxTransaction+0x70>
        break;
 8008e2a:	bf00      	nop
  }

  return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3718      	adds	r7, #24
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	20000000 	.word	0x20000000
 8008e3c:	165e9f81 	.word	0x165e9f81

08008e40 <HAL_TIM_Base_Init>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d101      	bne.n	8008d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e0c5      	b.n	8008ee2 <HAL_TIM_Base_Init+0x19e>
=======
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e0c5      	b.n	8008fde <HAL_TIM_Base_Init+0x19e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
<<<<<<< HEAD
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a64      	ldr	r2, [pc, #400]	; (8008eec <HAL_TIM_Base_Init+0x1a8>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d045      	beq.n	8008dec <HAL_TIM_Base_Init+0xa8>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d68:	d040      	beq.n	8008dec <HAL_TIM_Base_Init+0xa8>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a60      	ldr	r2, [pc, #384]	; (8008ef0 <HAL_TIM_Base_Init+0x1ac>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d03b      	beq.n	8008dec <HAL_TIM_Base_Init+0xa8>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a5e      	ldr	r2, [pc, #376]	; (8008ef4 <HAL_TIM_Base_Init+0x1b0>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d036      	beq.n	8008dec <HAL_TIM_Base_Init+0xa8>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a5d      	ldr	r2, [pc, #372]	; (8008ef8 <HAL_TIM_Base_Init+0x1b4>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d031      	beq.n	8008dec <HAL_TIM_Base_Init+0xa8>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a5b      	ldr	r2, [pc, #364]	; (8008efc <HAL_TIM_Base_Init+0x1b8>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d02c      	beq.n	8008dec <HAL_TIM_Base_Init+0xa8>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a5a      	ldr	r2, [pc, #360]	; (8008f00 <HAL_TIM_Base_Init+0x1bc>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d027      	beq.n	8008dec <HAL_TIM_Base_Init+0xa8>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a58      	ldr	r2, [pc, #352]	; (8008f04 <HAL_TIM_Base_Init+0x1c0>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d022      	beq.n	8008dec <HAL_TIM_Base_Init+0xa8>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a57      	ldr	r2, [pc, #348]	; (8008f08 <HAL_TIM_Base_Init+0x1c4>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d01d      	beq.n	8008dec <HAL_TIM_Base_Init+0xa8>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a55      	ldr	r2, [pc, #340]	; (8008f0c <HAL_TIM_Base_Init+0x1c8>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d018      	beq.n	8008dec <HAL_TIM_Base_Init+0xa8>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a54      	ldr	r2, [pc, #336]	; (8008f10 <HAL_TIM_Base_Init+0x1cc>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d013      	beq.n	8008dec <HAL_TIM_Base_Init+0xa8>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a52      	ldr	r2, [pc, #328]	; (8008f14 <HAL_TIM_Base_Init+0x1d0>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d00e      	beq.n	8008dec <HAL_TIM_Base_Init+0xa8>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a51      	ldr	r2, [pc, #324]	; (8008f18 <HAL_TIM_Base_Init+0x1d4>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d009      	beq.n	8008dec <HAL_TIM_Base_Init+0xa8>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a4f      	ldr	r2, [pc, #316]	; (8008f1c <HAL_TIM_Base_Init+0x1d8>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d004      	beq.n	8008dec <HAL_TIM_Base_Init+0xa8>
 8008de2:	f240 1113 	movw	r1, #275	; 0x113
 8008de6:	484e      	ldr	r0, [pc, #312]	; (8008f20 <HAL_TIM_Base_Init+0x1dc>)
 8008de8:	f7f8 ffa7 	bl	8001d3a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d014      	beq.n	8008e1e <HAL_TIM_Base_Init+0xda>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	2b10      	cmp	r3, #16
 8008dfa:	d010      	beq.n	8008e1e <HAL_TIM_Base_Init+0xda>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	2b20      	cmp	r3, #32
 8008e02:	d00c      	beq.n	8008e1e <HAL_TIM_Base_Init+0xda>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	2b40      	cmp	r3, #64	; 0x40
 8008e0a:	d008      	beq.n	8008e1e <HAL_TIM_Base_Init+0xda>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	2b60      	cmp	r3, #96	; 0x60
 8008e12:	d004      	beq.n	8008e1e <HAL_TIM_Base_Init+0xda>
 8008e14:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008e18:	4841      	ldr	r0, [pc, #260]	; (8008f20 <HAL_TIM_Base_Init+0x1dc>)
 8008e1a:	f7f8 ff8e 	bl	8001d3a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00e      	beq.n	8008e44 <HAL_TIM_Base_Init+0x100>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e2e:	d009      	beq.n	8008e44 <HAL_TIM_Base_Init+0x100>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e38:	d004      	beq.n	8008e44 <HAL_TIM_Base_Init+0x100>
 8008e3a:	f240 1115 	movw	r1, #277	; 0x115
 8008e3e:	4838      	ldr	r0, [pc, #224]	; (8008f20 <HAL_TIM_Base_Init+0x1dc>)
 8008e40:	f7f8 ff7b 	bl	8001d3a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d008      	beq.n	8008e5e <HAL_TIM_Base_Init+0x11a>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	2b80      	cmp	r3, #128	; 0x80
 8008e52:	d004      	beq.n	8008e5e <HAL_TIM_Base_Init+0x11a>
 8008e54:	f44f 718b 	mov.w	r1, #278	; 0x116
 8008e58:	4831      	ldr	r0, [pc, #196]	; (8008f20 <HAL_TIM_Base_Init+0x1dc>)
 8008e5a:	f7f8 ff6e 	bl	8001d3a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d106      	bne.n	8008e78 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a64      	ldr	r2, [pc, #400]	; (8008fe8 <HAL_TIM_Base_Init+0x1a8>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d045      	beq.n	8008ee8 <HAL_TIM_Base_Init+0xa8>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e64:	d040      	beq.n	8008ee8 <HAL_TIM_Base_Init+0xa8>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a60      	ldr	r2, [pc, #384]	; (8008fec <HAL_TIM_Base_Init+0x1ac>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d03b      	beq.n	8008ee8 <HAL_TIM_Base_Init+0xa8>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a5e      	ldr	r2, [pc, #376]	; (8008ff0 <HAL_TIM_Base_Init+0x1b0>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d036      	beq.n	8008ee8 <HAL_TIM_Base_Init+0xa8>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a5d      	ldr	r2, [pc, #372]	; (8008ff4 <HAL_TIM_Base_Init+0x1b4>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d031      	beq.n	8008ee8 <HAL_TIM_Base_Init+0xa8>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a5b      	ldr	r2, [pc, #364]	; (8008ff8 <HAL_TIM_Base_Init+0x1b8>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d02c      	beq.n	8008ee8 <HAL_TIM_Base_Init+0xa8>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a5a      	ldr	r2, [pc, #360]	; (8008ffc <HAL_TIM_Base_Init+0x1bc>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d027      	beq.n	8008ee8 <HAL_TIM_Base_Init+0xa8>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a58      	ldr	r2, [pc, #352]	; (8009000 <HAL_TIM_Base_Init+0x1c0>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d022      	beq.n	8008ee8 <HAL_TIM_Base_Init+0xa8>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a57      	ldr	r2, [pc, #348]	; (8009004 <HAL_TIM_Base_Init+0x1c4>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d01d      	beq.n	8008ee8 <HAL_TIM_Base_Init+0xa8>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a55      	ldr	r2, [pc, #340]	; (8009008 <HAL_TIM_Base_Init+0x1c8>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d018      	beq.n	8008ee8 <HAL_TIM_Base_Init+0xa8>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a54      	ldr	r2, [pc, #336]	; (800900c <HAL_TIM_Base_Init+0x1cc>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d013      	beq.n	8008ee8 <HAL_TIM_Base_Init+0xa8>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a52      	ldr	r2, [pc, #328]	; (8009010 <HAL_TIM_Base_Init+0x1d0>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d00e      	beq.n	8008ee8 <HAL_TIM_Base_Init+0xa8>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a51      	ldr	r2, [pc, #324]	; (8009014 <HAL_TIM_Base_Init+0x1d4>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d009      	beq.n	8008ee8 <HAL_TIM_Base_Init+0xa8>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a4f      	ldr	r2, [pc, #316]	; (8009018 <HAL_TIM_Base_Init+0x1d8>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d004      	beq.n	8008ee8 <HAL_TIM_Base_Init+0xa8>
 8008ede:	f240 1113 	movw	r1, #275	; 0x113
 8008ee2:	484e      	ldr	r0, [pc, #312]	; (800901c <HAL_TIM_Base_Init+0x1dc>)
 8008ee4:	f7f8 ffa7 	bl	8001e36 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d014      	beq.n	8008f1a <HAL_TIM_Base_Init+0xda>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	2b10      	cmp	r3, #16
 8008ef6:	d010      	beq.n	8008f1a <HAL_TIM_Base_Init+0xda>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	2b20      	cmp	r3, #32
 8008efe:	d00c      	beq.n	8008f1a <HAL_TIM_Base_Init+0xda>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	2b40      	cmp	r3, #64	; 0x40
 8008f06:	d008      	beq.n	8008f1a <HAL_TIM_Base_Init+0xda>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	2b60      	cmp	r3, #96	; 0x60
 8008f0e:	d004      	beq.n	8008f1a <HAL_TIM_Base_Init+0xda>
 8008f10:	f44f 718a 	mov.w	r1, #276	; 0x114
 8008f14:	4841      	ldr	r0, [pc, #260]	; (800901c <HAL_TIM_Base_Init+0x1dc>)
 8008f16:	f7f8 ff8e 	bl	8001e36 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00e      	beq.n	8008f40 <HAL_TIM_Base_Init+0x100>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f2a:	d009      	beq.n	8008f40 <HAL_TIM_Base_Init+0x100>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f34:	d004      	beq.n	8008f40 <HAL_TIM_Base_Init+0x100>
 8008f36:	f240 1115 	movw	r1, #277	; 0x115
 8008f3a:	4838      	ldr	r0, [pc, #224]	; (800901c <HAL_TIM_Base_Init+0x1dc>)
 8008f3c:	f7f8 ff7b 	bl	8001e36 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	699b      	ldr	r3, [r3, #24]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d008      	beq.n	8008f5a <HAL_TIM_Base_Init+0x11a>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	2b80      	cmp	r3, #128	; 0x80
 8008f4e:	d004      	beq.n	8008f5a <HAL_TIM_Base_Init+0x11a>
 8008f50:	f44f 718b 	mov.w	r1, #278	; 0x116
 8008f54:	4831      	ldr	r0, [pc, #196]	; (800901c <HAL_TIM_Base_Init+0x1dc>)
 8008f56:	f7f8 ff6e 	bl	8001e36 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d106      	bne.n	8008f74 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f856 	bl	8008f24 <HAL_TIM_Base_MspInit>
=======
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 f856 	bl	8009020 <HAL_TIM_Base_MspInit>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	3304      	adds	r3, #4
 8008e88:	4619      	mov	r1, r3
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	f000 fa4a 	bl	8009324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	40010000 	.word	0x40010000
 8008ef0:	40000400 	.word	0x40000400
 8008ef4:	40000800 	.word	0x40000800
 8008ef8:	40000c00 	.word	0x40000c00
 8008efc:	40001000 	.word	0x40001000
 8008f00:	40001400 	.word	0x40001400
 8008f04:	40010400 	.word	0x40010400
 8008f08:	40014000 	.word	0x40014000
 8008f0c:	40014400 	.word	0x40014400
 8008f10:	40014800 	.word	0x40014800
 8008f14:	40001800 	.word	0x40001800
 8008f18:	40001c00 	.word	0x40001c00
 8008f1c:	40002000 	.word	0x40002000
 8008f20:	0800c1d4 	.word	0x0800c1d4

08008f24 <HAL_TIM_Base_MspInit>:
=======
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2202      	movs	r2, #2
 8008f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	3304      	adds	r3, #4
 8008f84:	4619      	mov	r1, r3
 8008f86:	4610      	mov	r0, r2
 8008f88:	f000 fa4a 	bl	8009420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	40010000 	.word	0x40010000
 8008fec:	40000400 	.word	0x40000400
 8008ff0:	40000800 	.word	0x40000800
 8008ff4:	40000c00 	.word	0x40000c00
 8008ff8:	40001000 	.word	0x40001000
 8008ffc:	40001400 	.word	0x40001400
 8009000:	40010400 	.word	0x40010400
 8009004:	40014000 	.word	0x40014000
 8009008:	40014400 	.word	0x40014400
 800900c:	40014800 	.word	0x40014800
 8009010:	40001800 	.word	0x40001800
 8009014:	40001c00 	.word	0x40001c00
 8009018:	40002000 	.word	0x40002000
 800901c:	0800c2d4 	.word	0x0800c2d4

08009020 <HAL_TIM_Base_MspInit>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
=======
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <HAL_TIM_Base_Start_IT>:
=======
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <HAL_TIM_Base_Start_IT>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
=======
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
<<<<<<< HEAD
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a51      	ldr	r2, [pc, #324]	; (800908c <HAL_TIM_Base_Start_IT+0x154>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d045      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0x9e>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f52:	d040      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0x9e>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a4d      	ldr	r2, [pc, #308]	; (8009090 <HAL_TIM_Base_Start_IT+0x158>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d03b      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0x9e>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a4c      	ldr	r2, [pc, #304]	; (8009094 <HAL_TIM_Base_Start_IT+0x15c>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d036      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0x9e>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a4a      	ldr	r2, [pc, #296]	; (8009098 <HAL_TIM_Base_Start_IT+0x160>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d031      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0x9e>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a49      	ldr	r2, [pc, #292]	; (800909c <HAL_TIM_Base_Start_IT+0x164>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d02c      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0x9e>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a47      	ldr	r2, [pc, #284]	; (80090a0 <HAL_TIM_Base_Start_IT+0x168>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d027      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0x9e>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a46      	ldr	r2, [pc, #280]	; (80090a4 <HAL_TIM_Base_Start_IT+0x16c>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d022      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0x9e>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a44      	ldr	r2, [pc, #272]	; (80090a8 <HAL_TIM_Base_Start_IT+0x170>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d01d      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0x9e>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a43      	ldr	r2, [pc, #268]	; (80090ac <HAL_TIM_Base_Start_IT+0x174>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d018      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0x9e>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a41      	ldr	r2, [pc, #260]	; (80090b0 <HAL_TIM_Base_Start_IT+0x178>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d013      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0x9e>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a40      	ldr	r2, [pc, #256]	; (80090b4 <HAL_TIM_Base_Start_IT+0x17c>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d00e      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0x9e>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a3e      	ldr	r2, [pc, #248]	; (80090b8 <HAL_TIM_Base_Start_IT+0x180>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d009      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0x9e>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a3d      	ldr	r2, [pc, #244]	; (80090bc <HAL_TIM_Base_Start_IT+0x184>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d004      	beq.n	8008fd6 <HAL_TIM_Base_Start_IT+0x9e>
 8008fcc:	f240 11cf 	movw	r1, #463	; 0x1cf
 8008fd0:	483b      	ldr	r0, [pc, #236]	; (80090c0 <HAL_TIM_Base_Start_IT+0x188>)
 8008fd2:	f7f8 feb2 	bl	8001d3a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d001      	beq.n	8008fe6 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e04e      	b.n	8009084 <HAL_TIM_Base_Start_IT+0x14c>
=======
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a51      	ldr	r2, [pc, #324]	; (8009188 <HAL_TIM_Base_Start_IT+0x154>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d045      	beq.n	80090d2 <HAL_TIM_Base_Start_IT+0x9e>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800904e:	d040      	beq.n	80090d2 <HAL_TIM_Base_Start_IT+0x9e>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a4d      	ldr	r2, [pc, #308]	; (800918c <HAL_TIM_Base_Start_IT+0x158>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d03b      	beq.n	80090d2 <HAL_TIM_Base_Start_IT+0x9e>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a4c      	ldr	r2, [pc, #304]	; (8009190 <HAL_TIM_Base_Start_IT+0x15c>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d036      	beq.n	80090d2 <HAL_TIM_Base_Start_IT+0x9e>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a4a      	ldr	r2, [pc, #296]	; (8009194 <HAL_TIM_Base_Start_IT+0x160>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d031      	beq.n	80090d2 <HAL_TIM_Base_Start_IT+0x9e>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a49      	ldr	r2, [pc, #292]	; (8009198 <HAL_TIM_Base_Start_IT+0x164>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d02c      	beq.n	80090d2 <HAL_TIM_Base_Start_IT+0x9e>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a47      	ldr	r2, [pc, #284]	; (800919c <HAL_TIM_Base_Start_IT+0x168>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d027      	beq.n	80090d2 <HAL_TIM_Base_Start_IT+0x9e>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a46      	ldr	r2, [pc, #280]	; (80091a0 <HAL_TIM_Base_Start_IT+0x16c>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d022      	beq.n	80090d2 <HAL_TIM_Base_Start_IT+0x9e>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a44      	ldr	r2, [pc, #272]	; (80091a4 <HAL_TIM_Base_Start_IT+0x170>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d01d      	beq.n	80090d2 <HAL_TIM_Base_Start_IT+0x9e>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a43      	ldr	r2, [pc, #268]	; (80091a8 <HAL_TIM_Base_Start_IT+0x174>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d018      	beq.n	80090d2 <HAL_TIM_Base_Start_IT+0x9e>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a41      	ldr	r2, [pc, #260]	; (80091ac <HAL_TIM_Base_Start_IT+0x178>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d013      	beq.n	80090d2 <HAL_TIM_Base_Start_IT+0x9e>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a40      	ldr	r2, [pc, #256]	; (80091b0 <HAL_TIM_Base_Start_IT+0x17c>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d00e      	beq.n	80090d2 <HAL_TIM_Base_Start_IT+0x9e>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a3e      	ldr	r2, [pc, #248]	; (80091b4 <HAL_TIM_Base_Start_IT+0x180>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d009      	beq.n	80090d2 <HAL_TIM_Base_Start_IT+0x9e>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a3d      	ldr	r2, [pc, #244]	; (80091b8 <HAL_TIM_Base_Start_IT+0x184>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d004      	beq.n	80090d2 <HAL_TIM_Base_Start_IT+0x9e>
 80090c8:	f240 11cf 	movw	r1, #463	; 0x1cf
 80090cc:	483b      	ldr	r0, [pc, #236]	; (80091bc <HAL_TIM_Base_Start_IT+0x188>)
 80090ce:	f7f8 feb2 	bl	8001e36 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d001      	beq.n	80090e2 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e04e      	b.n	8009180 <HAL_TIM_Base_Start_IT+0x14c>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2202      	movs	r2, #2
 8008fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	68da      	ldr	r2, [r3, #12]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f042 0201 	orr.w	r2, r2, #1
 8008ffc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a22      	ldr	r2, [pc, #136]	; (800908c <HAL_TIM_Base_Start_IT+0x154>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d022      	beq.n	800904e <HAL_TIM_Base_Start_IT+0x116>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009010:	d01d      	beq.n	800904e <HAL_TIM_Base_Start_IT+0x116>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a1e      	ldr	r2, [pc, #120]	; (8009090 <HAL_TIM_Base_Start_IT+0x158>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d018      	beq.n	800904e <HAL_TIM_Base_Start_IT+0x116>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a1c      	ldr	r2, [pc, #112]	; (8009094 <HAL_TIM_Base_Start_IT+0x15c>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d013      	beq.n	800904e <HAL_TIM_Base_Start_IT+0x116>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a1b      	ldr	r2, [pc, #108]	; (8009098 <HAL_TIM_Base_Start_IT+0x160>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d00e      	beq.n	800904e <HAL_TIM_Base_Start_IT+0x116>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a1b      	ldr	r2, [pc, #108]	; (80090a4 <HAL_TIM_Base_Start_IT+0x16c>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d009      	beq.n	800904e <HAL_TIM_Base_Start_IT+0x116>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a1a      	ldr	r2, [pc, #104]	; (80090a8 <HAL_TIM_Base_Start_IT+0x170>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d004      	beq.n	800904e <HAL_TIM_Base_Start_IT+0x116>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a1a      	ldr	r2, [pc, #104]	; (80090b4 <HAL_TIM_Base_Start_IT+0x17c>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d111      	bne.n	8009072 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	f003 0307 	and.w	r3, r3, #7
 8009058:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2b06      	cmp	r3, #6
 800905e:	d010      	beq.n	8009082 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f042 0201 	orr.w	r2, r2, #1
 800906e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009070:	e007      	b.n	8009082 <HAL_TIM_Base_Start_IT+0x14a>
=======
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2202      	movs	r2, #2
 80090e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68da      	ldr	r2, [r3, #12]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f042 0201 	orr.w	r2, r2, #1
 80090f8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a22      	ldr	r2, [pc, #136]	; (8009188 <HAL_TIM_Base_Start_IT+0x154>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d022      	beq.n	800914a <HAL_TIM_Base_Start_IT+0x116>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800910c:	d01d      	beq.n	800914a <HAL_TIM_Base_Start_IT+0x116>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a1e      	ldr	r2, [pc, #120]	; (800918c <HAL_TIM_Base_Start_IT+0x158>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d018      	beq.n	800914a <HAL_TIM_Base_Start_IT+0x116>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a1c      	ldr	r2, [pc, #112]	; (8009190 <HAL_TIM_Base_Start_IT+0x15c>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d013      	beq.n	800914a <HAL_TIM_Base_Start_IT+0x116>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a1b      	ldr	r2, [pc, #108]	; (8009194 <HAL_TIM_Base_Start_IT+0x160>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d00e      	beq.n	800914a <HAL_TIM_Base_Start_IT+0x116>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a1b      	ldr	r2, [pc, #108]	; (80091a0 <HAL_TIM_Base_Start_IT+0x16c>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d009      	beq.n	800914a <HAL_TIM_Base_Start_IT+0x116>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a1a      	ldr	r2, [pc, #104]	; (80091a4 <HAL_TIM_Base_Start_IT+0x170>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d004      	beq.n	800914a <HAL_TIM_Base_Start_IT+0x116>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a1a      	ldr	r2, [pc, #104]	; (80091b0 <HAL_TIM_Base_Start_IT+0x17c>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d111      	bne.n	800916e <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	f003 0307 	and.w	r3, r3, #7
 8009154:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2b06      	cmp	r3, #6
 800915a:	d010      	beq.n	800917e <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f042 0201 	orr.w	r2, r2, #1
 800916a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800916c:	e007      	b.n	800917e <HAL_TIM_Base_Start_IT+0x14a>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f042 0201 	orr.w	r2, r2, #1
 8009080:	601a      	str	r2, [r3, #0]
=======
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f042 0201 	orr.w	r2, r2, #1
 800917c:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	40010000 	.word	0x40010000
 8009090:	40000400 	.word	0x40000400
 8009094:	40000800 	.word	0x40000800
 8009098:	40000c00 	.word	0x40000c00
 800909c:	40001000 	.word	0x40001000
 80090a0:	40001400 	.word	0x40001400
 80090a4:	40010400 	.word	0x40010400
 80090a8:	40014000 	.word	0x40014000
 80090ac:	40014400 	.word	0x40014400
 80090b0:	40014800 	.word	0x40014800
 80090b4:	40001800 	.word	0x40001800
 80090b8:	40001c00 	.word	0x40001c00
 80090bc:	40002000 	.word	0x40002000
 80090c0:	0800c1d4 	.word	0x0800c1d4

080090c4 <HAL_TIM_IRQHandler>:
=======
 800917e:	2300      	movs	r3, #0
}
 8009180:	4618      	mov	r0, r3
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	40010000 	.word	0x40010000
 800918c:	40000400 	.word	0x40000400
 8009190:	40000800 	.word	0x40000800
 8009194:	40000c00 	.word	0x40000c00
 8009198:	40001000 	.word	0x40001000
 800919c:	40001400 	.word	0x40001400
 80091a0:	40010400 	.word	0x40010400
 80091a4:	40014000 	.word	0x40014000
 80091a8:	40014400 	.word	0x40014400
 80091ac:	40014800 	.word	0x40014800
 80091b0:	40001800 	.word	0x40001800
 80091b4:	40001c00 	.word	0x40001c00
 80091b8:	40002000 	.word	0x40002000
 80091bc:	0800c2d4 	.word	0x0800c2d4

080091c0 <HAL_TIM_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	f003 0302 	and.w	r3, r3, #2
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d122      	bne.n	8009120 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	f003 0302 	and.w	r3, r3, #2
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d11b      	bne.n	8009120 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f06f 0202 	mvn.w	r2, #2
 80090f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2201      	movs	r2, #1
 80090f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	f003 0303 	and.w	r3, r3, #3
 8009102:	2b00      	cmp	r3, #0
 8009104:	d003      	beq.n	800910e <HAL_TIM_IRQHandler+0x4a>
=======
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	f003 0302 	and.w	r3, r3, #2
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d122      	bne.n	800921c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	f003 0302 	and.w	r3, r3, #2
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d11b      	bne.n	800921c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f06f 0202 	mvn.w	r2, #2
 80091ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	f003 0303 	and.w	r3, r3, #3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <HAL_TIM_IRQHandler+0x4a>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f8ee 	bl	80092e8 <HAL_TIM_IC_CaptureCallback>
 800910c:	e005      	b.n	800911a <HAL_TIM_IRQHandler+0x56>
=======
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f8ee 	bl	80093e4 <HAL_TIM_IC_CaptureCallback>
 8009208:	e005      	b.n	8009216 <HAL_TIM_IRQHandler+0x56>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 f8e0 	bl	80092d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 f8f1 	bl	80092fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	771a      	strb	r2, [r3, #28]
=======
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f8e0 	bl	80093d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f8f1 	bl	80093f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	771a      	strb	r2, [r3, #28]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	f003 0304 	and.w	r3, r3, #4
 800912a:	2b04      	cmp	r3, #4
 800912c:	d122      	bne.n	8009174 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f003 0304 	and.w	r3, r3, #4
 8009138:	2b04      	cmp	r3, #4
 800913a:	d11b      	bne.n	8009174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f06f 0204 	mvn.w	r2, #4
 8009144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2202      	movs	r2, #2
 800914a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009156:	2b00      	cmp	r3, #0
 8009158:	d003      	beq.n	8009162 <HAL_TIM_IRQHandler+0x9e>
=======
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	f003 0304 	and.w	r3, r3, #4
 8009226:	2b04      	cmp	r3, #4
 8009228:	d122      	bne.n	8009270 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	f003 0304 	and.w	r3, r3, #4
 8009234:	2b04      	cmp	r3, #4
 8009236:	d11b      	bne.n	8009270 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f06f 0204 	mvn.w	r2, #4
 8009240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2202      	movs	r2, #2
 8009246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009252:	2b00      	cmp	r3, #0
 8009254:	d003      	beq.n	800925e <HAL_TIM_IRQHandler+0x9e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f8c4 	bl	80092e8 <HAL_TIM_IC_CaptureCallback>
 8009160:	e005      	b.n	800916e <HAL_TIM_IRQHandler+0xaa>
=======
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f8c4 	bl	80093e4 <HAL_TIM_IC_CaptureCallback>
 800925c:	e005      	b.n	800926a <HAL_TIM_IRQHandler+0xaa>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f8b6 	bl	80092d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f8c7 	bl	80092fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	771a      	strb	r2, [r3, #28]
=======
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 f8b6 	bl	80093d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f8c7 	bl	80093f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	771a      	strb	r2, [r3, #28]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	f003 0308 	and.w	r3, r3, #8
 800917e:	2b08      	cmp	r3, #8
 8009180:	d122      	bne.n	80091c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	f003 0308 	and.w	r3, r3, #8
 800918c:	2b08      	cmp	r3, #8
 800918e:	d11b      	bne.n	80091c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f06f 0208 	mvn.w	r2, #8
 8009198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2204      	movs	r2, #4
 800919e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	69db      	ldr	r3, [r3, #28]
 80091a6:	f003 0303 	and.w	r3, r3, #3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d003      	beq.n	80091b6 <HAL_TIM_IRQHandler+0xf2>
=======
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	f003 0308 	and.w	r3, r3, #8
 800927a:	2b08      	cmp	r3, #8
 800927c:	d122      	bne.n	80092c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	f003 0308 	and.w	r3, r3, #8
 8009288:	2b08      	cmp	r3, #8
 800928a:	d11b      	bne.n	80092c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f06f 0208 	mvn.w	r2, #8
 8009294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2204      	movs	r2, #4
 800929a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	69db      	ldr	r3, [r3, #28]
 80092a2:	f003 0303 	and.w	r3, r3, #3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d003      	beq.n	80092b2 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f89a 	bl	80092e8 <HAL_TIM_IC_CaptureCallback>
 80091b4:	e005      	b.n	80091c2 <HAL_TIM_IRQHandler+0xfe>
=======
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f89a 	bl	80093e4 <HAL_TIM_IC_CaptureCallback>
 80092b0:	e005      	b.n	80092be <HAL_TIM_IRQHandler+0xfe>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f88c 	bl	80092d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f89d 	bl	80092fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	771a      	strb	r2, [r3, #28]
=======
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f88c 	bl	80093d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 f89d 	bl	80093f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	771a      	strb	r2, [r3, #28]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	f003 0310 	and.w	r3, r3, #16
 80091d2:	2b10      	cmp	r3, #16
 80091d4:	d122      	bne.n	800921c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68db      	ldr	r3, [r3, #12]
 80091dc:	f003 0310 	and.w	r3, r3, #16
 80091e0:	2b10      	cmp	r3, #16
 80091e2:	d11b      	bne.n	800921c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f06f 0210 	mvn.w	r2, #16
 80091ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2208      	movs	r2, #8
 80091f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <HAL_TIM_IRQHandler+0x146>
=======
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	f003 0310 	and.w	r3, r3, #16
 80092ce:	2b10      	cmp	r3, #16
 80092d0:	d122      	bne.n	8009318 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	f003 0310 	and.w	r3, r3, #16
 80092dc:	2b10      	cmp	r3, #16
 80092de:	d11b      	bne.n	8009318 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f06f 0210 	mvn.w	r2, #16
 80092e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2208      	movs	r2, #8
 80092ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d003      	beq.n	8009306 <HAL_TIM_IRQHandler+0x146>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f870 	bl	80092e8 <HAL_TIM_IC_CaptureCallback>
 8009208:	e005      	b.n	8009216 <HAL_TIM_IRQHandler+0x152>
=======
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 f870 	bl	80093e4 <HAL_TIM_IC_CaptureCallback>
 8009304:	e005      	b.n	8009312 <HAL_TIM_IRQHandler+0x152>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f862 	bl	80092d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f873 	bl	80092fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	771a      	strb	r2, [r3, #28]
=======
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 f862 	bl	80093d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f873 	bl	80093f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	771a      	strb	r2, [r3, #28]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	2b01      	cmp	r3, #1
 8009228:	d10e      	bne.n	8009248 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	f003 0301 	and.w	r3, r3, #1
 8009234:	2b01      	cmp	r3, #1
 8009236:	d107      	bne.n	8009248 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f06f 0201 	mvn.w	r2, #1
 8009240:	611a      	str	r2, [r3, #16]
=======
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	2b01      	cmp	r3, #1
 8009324:	d10e      	bne.n	8009344 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	f003 0301 	and.w	r3, r3, #1
 8009330:	2b01      	cmp	r3, #1
 8009332:	d107      	bne.n	8009344 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f06f 0201 	mvn.w	r2, #1
 800933c:	611a      	str	r2, [r3, #16]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7f8 fd62 	bl	8001d0c <HAL_TIM_PeriodElapsedCallback>
=======
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f7f8 fd62 	bl	8001e08 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009252:	2b80      	cmp	r3, #128	; 0x80
 8009254:	d10e      	bne.n	8009274 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009260:	2b80      	cmp	r3, #128	; 0x80
 8009262:	d107      	bne.n	8009274 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800926c:	611a      	str	r2, [r3, #16]
=======
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800934e:	2b80      	cmp	r3, #128	; 0x80
 8009350:	d10e      	bne.n	8009370 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800935c:	2b80      	cmp	r3, #128	; 0x80
 800935e:	d107      	bne.n	8009370 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009368:	611a      	str	r2, [r3, #16]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f902 	bl	8009478 <HAL_TIMEx_BreakCallback>
=======
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 f902 	bl	8009574 <HAL_TIMEx_BreakCallback>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800927e:	2b40      	cmp	r3, #64	; 0x40
 8009280:	d10e      	bne.n	80092a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800928c:	2b40      	cmp	r3, #64	; 0x40
 800928e:	d107      	bne.n	80092a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009298:	611a      	str	r2, [r3, #16]
=======
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800937a:	2b40      	cmp	r3, #64	; 0x40
 800937c:	d10e      	bne.n	800939c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009388:	2b40      	cmp	r3, #64	; 0x40
 800938a:	d107      	bne.n	800939c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009394:	611a      	str	r2, [r3, #16]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f838 	bl	8009310 <HAL_TIM_TriggerCallback>
=======
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f838 	bl	800940c <HAL_TIM_TriggerCallback>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	f003 0320 	and.w	r3, r3, #32
 80092aa:	2b20      	cmp	r3, #32
 80092ac:	d10e      	bne.n	80092cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	f003 0320 	and.w	r3, r3, #32
 80092b8:	2b20      	cmp	r3, #32
 80092ba:	d107      	bne.n	80092cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f06f 0220 	mvn.w	r2, #32
 80092c4:	611a      	str	r2, [r3, #16]
=======
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	f003 0320 	and.w	r3, r3, #32
 80093a6:	2b20      	cmp	r3, #32
 80093a8:	d10e      	bne.n	80093c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	f003 0320 	and.w	r3, r3, #32
 80093b4:	2b20      	cmp	r3, #32
 80093b6:	d107      	bne.n	80093c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f06f 0220 	mvn.w	r2, #32
 80093c0:	611a      	str	r2, [r3, #16]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f8cc 	bl	8009464 <HAL_TIMEx_CommutCallback>
=======
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f8cc 	bl	8009560 <HAL_TIMEx_CommutCallback>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 80092cc:	bf00      	nop
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 80093c8:	bf00      	nop
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
=======
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <HAL_TIM_IC_CaptureCallback>:
=======
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
=======
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
=======
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <HAL_TIM_TriggerCallback>:
=======
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <HAL_TIM_TriggerCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
=======
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8009318:	bf00      	nop
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <TIM_Base_SetConfig>:
=======
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <TIM_Base_SetConfig>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a40      	ldr	r2, [pc, #256]	; (8009438 <TIM_Base_SetConfig+0x114>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d013      	beq.n	8009364 <TIM_Base_SetConfig+0x40>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009342:	d00f      	beq.n	8009364 <TIM_Base_SetConfig+0x40>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a3d      	ldr	r2, [pc, #244]	; (800943c <TIM_Base_SetConfig+0x118>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d00b      	beq.n	8009364 <TIM_Base_SetConfig+0x40>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a3c      	ldr	r2, [pc, #240]	; (8009440 <TIM_Base_SetConfig+0x11c>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d007      	beq.n	8009364 <TIM_Base_SetConfig+0x40>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a3b      	ldr	r2, [pc, #236]	; (8009444 <TIM_Base_SetConfig+0x120>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d003      	beq.n	8009364 <TIM_Base_SetConfig+0x40>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a3a      	ldr	r2, [pc, #232]	; (8009448 <TIM_Base_SetConfig+0x124>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d108      	bne.n	8009376 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800936a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	4313      	orrs	r3, r2
 8009374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a2f      	ldr	r2, [pc, #188]	; (8009438 <TIM_Base_SetConfig+0x114>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d02b      	beq.n	80093d6 <TIM_Base_SetConfig+0xb2>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009384:	d027      	beq.n	80093d6 <TIM_Base_SetConfig+0xb2>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a2c      	ldr	r2, [pc, #176]	; (800943c <TIM_Base_SetConfig+0x118>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d023      	beq.n	80093d6 <TIM_Base_SetConfig+0xb2>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a2b      	ldr	r2, [pc, #172]	; (8009440 <TIM_Base_SetConfig+0x11c>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d01f      	beq.n	80093d6 <TIM_Base_SetConfig+0xb2>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a2a      	ldr	r2, [pc, #168]	; (8009444 <TIM_Base_SetConfig+0x120>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d01b      	beq.n	80093d6 <TIM_Base_SetConfig+0xb2>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a29      	ldr	r2, [pc, #164]	; (8009448 <TIM_Base_SetConfig+0x124>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d017      	beq.n	80093d6 <TIM_Base_SetConfig+0xb2>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a28      	ldr	r2, [pc, #160]	; (800944c <TIM_Base_SetConfig+0x128>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d013      	beq.n	80093d6 <TIM_Base_SetConfig+0xb2>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a27      	ldr	r2, [pc, #156]	; (8009450 <TIM_Base_SetConfig+0x12c>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d00f      	beq.n	80093d6 <TIM_Base_SetConfig+0xb2>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a26      	ldr	r2, [pc, #152]	; (8009454 <TIM_Base_SetConfig+0x130>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d00b      	beq.n	80093d6 <TIM_Base_SetConfig+0xb2>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a25      	ldr	r2, [pc, #148]	; (8009458 <TIM_Base_SetConfig+0x134>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d007      	beq.n	80093d6 <TIM_Base_SetConfig+0xb2>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a24      	ldr	r2, [pc, #144]	; (800945c <TIM_Base_SetConfig+0x138>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d003      	beq.n	80093d6 <TIM_Base_SetConfig+0xb2>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a23      	ldr	r2, [pc, #140]	; (8009460 <TIM_Base_SetConfig+0x13c>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d108      	bne.n	80093e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	60fb      	str	r3, [r7, #12]
=======
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a40      	ldr	r2, [pc, #256]	; (8009534 <TIM_Base_SetConfig+0x114>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d013      	beq.n	8009460 <TIM_Base_SetConfig+0x40>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800943e:	d00f      	beq.n	8009460 <TIM_Base_SetConfig+0x40>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a3d      	ldr	r2, [pc, #244]	; (8009538 <TIM_Base_SetConfig+0x118>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d00b      	beq.n	8009460 <TIM_Base_SetConfig+0x40>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a3c      	ldr	r2, [pc, #240]	; (800953c <TIM_Base_SetConfig+0x11c>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d007      	beq.n	8009460 <TIM_Base_SetConfig+0x40>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a3b      	ldr	r2, [pc, #236]	; (8009540 <TIM_Base_SetConfig+0x120>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d003      	beq.n	8009460 <TIM_Base_SetConfig+0x40>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a3a      	ldr	r2, [pc, #232]	; (8009544 <TIM_Base_SetConfig+0x124>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d108      	bne.n	8009472 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	68fa      	ldr	r2, [r7, #12]
 800946e:	4313      	orrs	r3, r2
 8009470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a2f      	ldr	r2, [pc, #188]	; (8009534 <TIM_Base_SetConfig+0x114>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d02b      	beq.n	80094d2 <TIM_Base_SetConfig+0xb2>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009480:	d027      	beq.n	80094d2 <TIM_Base_SetConfig+0xb2>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a2c      	ldr	r2, [pc, #176]	; (8009538 <TIM_Base_SetConfig+0x118>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d023      	beq.n	80094d2 <TIM_Base_SetConfig+0xb2>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a2b      	ldr	r2, [pc, #172]	; (800953c <TIM_Base_SetConfig+0x11c>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d01f      	beq.n	80094d2 <TIM_Base_SetConfig+0xb2>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a2a      	ldr	r2, [pc, #168]	; (8009540 <TIM_Base_SetConfig+0x120>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d01b      	beq.n	80094d2 <TIM_Base_SetConfig+0xb2>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a29      	ldr	r2, [pc, #164]	; (8009544 <TIM_Base_SetConfig+0x124>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d017      	beq.n	80094d2 <TIM_Base_SetConfig+0xb2>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a28      	ldr	r2, [pc, #160]	; (8009548 <TIM_Base_SetConfig+0x128>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d013      	beq.n	80094d2 <TIM_Base_SetConfig+0xb2>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a27      	ldr	r2, [pc, #156]	; (800954c <TIM_Base_SetConfig+0x12c>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d00f      	beq.n	80094d2 <TIM_Base_SetConfig+0xb2>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a26      	ldr	r2, [pc, #152]	; (8009550 <TIM_Base_SetConfig+0x130>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d00b      	beq.n	80094d2 <TIM_Base_SetConfig+0xb2>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a25      	ldr	r2, [pc, #148]	; (8009554 <TIM_Base_SetConfig+0x134>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d007      	beq.n	80094d2 <TIM_Base_SetConfig+0xb2>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a24      	ldr	r2, [pc, #144]	; (8009558 <TIM_Base_SetConfig+0x138>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d003      	beq.n	80094d2 <TIM_Base_SetConfig+0xb2>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a23      	ldr	r2, [pc, #140]	; (800955c <TIM_Base_SetConfig+0x13c>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d108      	bne.n	80094e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	4313      	orrs	r3, r2
 80094e2:	60fb      	str	r3, [r7, #12]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	695b      	ldr	r3, [r3, #20]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	689a      	ldr	r2, [r3, #8]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a0a      	ldr	r2, [pc, #40]	; (8009438 <TIM_Base_SetConfig+0x114>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d003      	beq.n	800941c <TIM_Base_SetConfig+0xf8>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a0c      	ldr	r2, [pc, #48]	; (8009448 <TIM_Base_SetConfig+0x124>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d103      	bne.n	8009424 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	691a      	ldr	r2, [r3, #16]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	631a      	str	r2, [r3, #48]	; 0x30
=======
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	689a      	ldr	r2, [r3, #8]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	681a      	ldr	r2, [r3, #0]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a0a      	ldr	r2, [pc, #40]	; (8009534 <TIM_Base_SetConfig+0x114>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d003      	beq.n	8009518 <TIM_Base_SetConfig+0xf8>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a0c      	ldr	r2, [pc, #48]	; (8009544 <TIM_Base_SetConfig+0x124>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d103      	bne.n	8009520 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	691a      	ldr	r2, [r3, #16]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	615a      	str	r2, [r3, #20]
}
 800942a:	bf00      	nop
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	40010000 	.word	0x40010000
 800943c:	40000400 	.word	0x40000400
 8009440:	40000800 	.word	0x40000800
 8009444:	40000c00 	.word	0x40000c00
 8009448:	40010400 	.word	0x40010400
 800944c:	40014000 	.word	0x40014000
 8009450:	40014400 	.word	0x40014400
 8009454:	40014800 	.word	0x40014800
 8009458:	40001800 	.word	0x40001800
 800945c:	40001c00 	.word	0x40001c00
 8009460:	40002000 	.word	0x40002000

08009464 <HAL_TIMEx_CommutCallback>:
=======
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	615a      	str	r2, [r3, #20]
}
 8009526:	bf00      	nop
 8009528:	3714      	adds	r7, #20
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	40010000 	.word	0x40010000
 8009538:	40000400 	.word	0x40000400
 800953c:	40000800 	.word	0x40000800
 8009540:	40000c00 	.word	0x40000c00
 8009544:	40010400 	.word	0x40010400
 8009548:	40014000 	.word	0x40014000
 800954c:	40014400 	.word	0x40014400
 8009550:	40014800 	.word	0x40014800
 8009554:	40001800 	.word	0x40001800
 8009558:	40001c00 	.word	0x40001c00
 800955c:	40002000 	.word	0x40002000

08009560 <HAL_TIMEx_CommutCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
=======
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800946c:	bf00      	nop
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <HAL_TIMEx_BreakCallback>:
=======
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <HAL_TIMEx_BreakCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
=======
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <HAL_UART_Init>:
=======
 800957c:	bf00      	nop
 800957e:	370c      	adds	r7, #12
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <HAL_UART_Init>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e0be      	b.n	800961c <HAL_UART_Init+0x190>
=======
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e0be      	b.n	8009718 <HAL_UART_Init+0x190>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
<<<<<<< HEAD
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d03b      	beq.n	800951e <HAL_UART_Init+0x92>
=======
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d03b      	beq.n	800961a <HAL_UART_Init+0x92>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
<<<<<<< HEAD
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a5e      	ldr	r2, [pc, #376]	; (8009624 <HAL_UART_Init+0x198>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d01d      	beq.n	80094ec <HAL_UART_Init+0x60>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a5c      	ldr	r2, [pc, #368]	; (8009628 <HAL_UART_Init+0x19c>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d018      	beq.n	80094ec <HAL_UART_Init+0x60>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a5b      	ldr	r2, [pc, #364]	; (800962c <HAL_UART_Init+0x1a0>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d013      	beq.n	80094ec <HAL_UART_Init+0x60>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a59      	ldr	r2, [pc, #356]	; (8009630 <HAL_UART_Init+0x1a4>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d00e      	beq.n	80094ec <HAL_UART_Init+0x60>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a58      	ldr	r2, [pc, #352]	; (8009634 <HAL_UART_Init+0x1a8>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d009      	beq.n	80094ec <HAL_UART_Init+0x60>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a56      	ldr	r2, [pc, #344]	; (8009638 <HAL_UART_Init+0x1ac>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d004      	beq.n	80094ec <HAL_UART_Init+0x60>
 80094e2:	f240 1173 	movw	r1, #371	; 0x173
 80094e6:	4855      	ldr	r0, [pc, #340]	; (800963c <HAL_UART_Init+0x1b0>)
 80094e8:	f7f8 fc27 	bl	8001d3a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d037      	beq.n	8009564 <HAL_UART_Init+0xd8>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	699b      	ldr	r3, [r3, #24]
 80094f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094fc:	d032      	beq.n	8009564 <HAL_UART_Init+0xd8>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009506:	d02d      	beq.n	8009564 <HAL_UART_Init+0xd8>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009510:	d028      	beq.n	8009564 <HAL_UART_Init+0xd8>
 8009512:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8009516:	4849      	ldr	r0, [pc, #292]	; (800963c <HAL_UART_Init+0x1b0>)
 8009518:	f7f8 fc0f 	bl	8001d3a <assert_failed>
 800951c:	e022      	b.n	8009564 <HAL_UART_Init+0xd8>
=======
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a5e      	ldr	r2, [pc, #376]	; (8009720 <HAL_UART_Init+0x198>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d01d      	beq.n	80095e8 <HAL_UART_Init+0x60>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a5c      	ldr	r2, [pc, #368]	; (8009724 <HAL_UART_Init+0x19c>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d018      	beq.n	80095e8 <HAL_UART_Init+0x60>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a5b      	ldr	r2, [pc, #364]	; (8009728 <HAL_UART_Init+0x1a0>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d013      	beq.n	80095e8 <HAL_UART_Init+0x60>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a59      	ldr	r2, [pc, #356]	; (800972c <HAL_UART_Init+0x1a4>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d00e      	beq.n	80095e8 <HAL_UART_Init+0x60>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a58      	ldr	r2, [pc, #352]	; (8009730 <HAL_UART_Init+0x1a8>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d009      	beq.n	80095e8 <HAL_UART_Init+0x60>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a56      	ldr	r2, [pc, #344]	; (8009734 <HAL_UART_Init+0x1ac>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d004      	beq.n	80095e8 <HAL_UART_Init+0x60>
 80095de:	f240 1173 	movw	r1, #371	; 0x173
 80095e2:	4855      	ldr	r0, [pc, #340]	; (8009738 <HAL_UART_Init+0x1b0>)
 80095e4:	f7f8 fc27 	bl	8001e36 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d037      	beq.n	8009660 <HAL_UART_Init+0xd8>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095f8:	d032      	beq.n	8009660 <HAL_UART_Init+0xd8>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	699b      	ldr	r3, [r3, #24]
 80095fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009602:	d02d      	beq.n	8009660 <HAL_UART_Init+0xd8>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800960c:	d028      	beq.n	8009660 <HAL_UART_Init+0xd8>
 800960e:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8009612:	4849      	ldr	r0, [pc, #292]	; (8009738 <HAL_UART_Init+0x1b0>)
 8009614:	f7f8 fc0f 	bl	8001e36 <assert_failed>
 8009618:	e022      	b.n	8009660 <HAL_UART_Init+0xd8>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
<<<<<<< HEAD
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a40      	ldr	r2, [pc, #256]	; (8009624 <HAL_UART_Init+0x198>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d01d      	beq.n	8009564 <HAL_UART_Init+0xd8>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a3e      	ldr	r2, [pc, #248]	; (8009628 <HAL_UART_Init+0x19c>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d018      	beq.n	8009564 <HAL_UART_Init+0xd8>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a3d      	ldr	r2, [pc, #244]	; (800962c <HAL_UART_Init+0x1a0>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d013      	beq.n	8009564 <HAL_UART_Init+0xd8>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a3b      	ldr	r2, [pc, #236]	; (8009630 <HAL_UART_Init+0x1a4>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d00e      	beq.n	8009564 <HAL_UART_Init+0xd8>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a3a      	ldr	r2, [pc, #232]	; (8009634 <HAL_UART_Init+0x1a8>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d009      	beq.n	8009564 <HAL_UART_Init+0xd8>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a38      	ldr	r2, [pc, #224]	; (8009638 <HAL_UART_Init+0x1ac>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d004      	beq.n	8009564 <HAL_UART_Init+0xd8>
 800955a:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800955e:	4837      	ldr	r0, [pc, #220]	; (800963c <HAL_UART_Init+0x1b0>)
 8009560:	f7f8 fbeb 	bl	8001d3a <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d009      	beq.n	8009580 <HAL_UART_Init+0xf4>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009574:	d004      	beq.n	8009580 <HAL_UART_Init+0xf4>
 8009576:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800957a:	4830      	ldr	r0, [pc, #192]	; (800963c <HAL_UART_Init+0x1b0>)
 800957c:	f7f8 fbdd 	bl	8001d3a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	69db      	ldr	r3, [r3, #28]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d009      	beq.n	800959c <HAL_UART_Init+0x110>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	69db      	ldr	r3, [r3, #28]
 800958c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009590:	d004      	beq.n	800959c <HAL_UART_Init+0x110>
 8009592:	f240 117b 	movw	r1, #379	; 0x17b
 8009596:	4829      	ldr	r0, [pc, #164]	; (800963c <HAL_UART_Init+0x1b0>)
 8009598:	f7f8 fbcf 	bl	8001d3a <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d106      	bne.n	80095b6 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a40      	ldr	r2, [pc, #256]	; (8009720 <HAL_UART_Init+0x198>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d01d      	beq.n	8009660 <HAL_UART_Init+0xd8>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a3e      	ldr	r2, [pc, #248]	; (8009724 <HAL_UART_Init+0x19c>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d018      	beq.n	8009660 <HAL_UART_Init+0xd8>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a3d      	ldr	r2, [pc, #244]	; (8009728 <HAL_UART_Init+0x1a0>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d013      	beq.n	8009660 <HAL_UART_Init+0xd8>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a3b      	ldr	r2, [pc, #236]	; (800972c <HAL_UART_Init+0x1a4>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d00e      	beq.n	8009660 <HAL_UART_Init+0xd8>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a3a      	ldr	r2, [pc, #232]	; (8009730 <HAL_UART_Init+0x1a8>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d009      	beq.n	8009660 <HAL_UART_Init+0xd8>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a38      	ldr	r2, [pc, #224]	; (8009734 <HAL_UART_Init+0x1ac>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d004      	beq.n	8009660 <HAL_UART_Init+0xd8>
 8009656:	f44f 71bc 	mov.w	r1, #376	; 0x178
 800965a:	4837      	ldr	r0, [pc, #220]	; (8009738 <HAL_UART_Init+0x1b0>)
 800965c:	f7f8 fbeb 	bl	8001e36 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d009      	beq.n	800967c <HAL_UART_Init+0xf4>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009670:	d004      	beq.n	800967c <HAL_UART_Init+0xf4>
 8009672:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8009676:	4830      	ldr	r0, [pc, #192]	; (8009738 <HAL_UART_Init+0x1b0>)
 8009678:	f7f8 fbdd 	bl	8001e36 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	69db      	ldr	r3, [r3, #28]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d009      	beq.n	8009698 <HAL_UART_Init+0x110>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	69db      	ldr	r3, [r3, #28]
 8009688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800968c:	d004      	beq.n	8009698 <HAL_UART_Init+0x110>
 800968e:	f240 117b 	movw	r1, #379	; 0x17b
 8009692:	4829      	ldr	r0, [pc, #164]	; (8009738 <HAL_UART_Init+0x1b0>)
 8009694:	f7f8 fbcf 	bl	8001e36 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d106      	bne.n	80096b2 <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f7f8 fe77 	bl	80022a4 <HAL_UART_MspInit>
=======
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7f8 fe77 	bl	80023a0 <HAL_UART_MspInit>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2224      	movs	r2, #36	; 0x24
 80095ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	68da      	ldr	r2, [r3, #12]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f836 	bl	8009640 <UART_SetConfig>
=======
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2224      	movs	r2, #36	; 0x24
 80096b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68da      	ldr	r2, [r3, #12]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f836 	bl	800973c <UART_SetConfig>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	691a      	ldr	r2, [r3, #16]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	695a      	ldr	r2, [r3, #20]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68da      	ldr	r2, [r3, #12]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009602:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2220      	movs	r2, #32
 800960e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2220      	movs	r2, #32
 8009616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	40011000 	.word	0x40011000
 8009628:	40004400 	.word	0x40004400
 800962c:	40004800 	.word	0x40004800
 8009630:	40004c00 	.word	0x40004c00
 8009634:	40005000 	.word	0x40005000
 8009638:	40011400 	.word	0x40011400
 800963c:	0800c20c 	.word	0x0800c20c

08009640 <UART_SetConfig>:
=======
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	691a      	ldr	r2, [r3, #16]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	695a      	ldr	r2, [r3, #20]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2220      	movs	r2, #32
 800970a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2220      	movs	r2, #32
 8009712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	40011000 	.word	0x40011000
 8009724:	40004400 	.word	0x40004400
 8009728:	40004800 	.word	0x40004800
 800972c:	40004c00 	.word	0x40004c00
 8009730:	40005000 	.word	0x40005000
 8009734:	40011400 	.word	0x40011400
 8009738:	0800c30c 	.word	0x0800c30c

0800973c <UART_SetConfig>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8009640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009644:	b0c0      	sub	sp, #256	; 0x100
 8009646:	af00      	add	r7, sp, #0
 8009648:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
=======
 800973c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009740:	b0c0      	sub	sp, #256	; 0x100
 8009742:	af00      	add	r7, sp, #0
 8009744:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
<<<<<<< HEAD
 800964c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009650:	685a      	ldr	r2, [r3, #4]
 8009652:	4bcf      	ldr	r3, [pc, #828]	; (8009990 <UART_SetConfig+0x350>)
 8009654:	429a      	cmp	r2, r3
 8009656:	d904      	bls.n	8009662 <UART_SetConfig+0x22>
 8009658:	f640 6161 	movw	r1, #3681	; 0xe61
 800965c:	48cd      	ldr	r0, [pc, #820]	; (8009994 <UART_SetConfig+0x354>)
 800965e:	f7f8 fb6c 	bl	8001d3a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8009662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009666:	68db      	ldr	r3, [r3, #12]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00a      	beq.n	8009682 <UART_SetConfig+0x42>
 800966c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009676:	d004      	beq.n	8009682 <UART_SetConfig+0x42>
 8009678:	f640 6162 	movw	r1, #3682	; 0xe62
 800967c:	48c5      	ldr	r0, [pc, #788]	; (8009994 <UART_SetConfig+0x354>)
 800967e:	f7f8 fb5c 	bl	8001d3a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8009682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d010      	beq.n	80096ae <UART_SetConfig+0x6e>
 800968c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009696:	d00a      	beq.n	80096ae <UART_SetConfig+0x6e>
 8009698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800969c:	691b      	ldr	r3, [r3, #16]
 800969e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80096a2:	d004      	beq.n	80096ae <UART_SetConfig+0x6e>
 80096a4:	f640 6163 	movw	r1, #3683	; 0xe63
 80096a8:	48ba      	ldr	r0, [pc, #744]	; (8009994 <UART_SetConfig+0x354>)
 80096aa:	f7f8 fb46 	bl	8001d3a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80096ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096b2:	695a      	ldr	r2, [r3, #20]
 80096b4:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80096b8:	4013      	ands	r3, r2
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d104      	bne.n	80096c8 <UART_SetConfig+0x88>
 80096be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d104      	bne.n	80096d2 <UART_SetConfig+0x92>
 80096c8:	f640 6164 	movw	r1, #3684	; 0xe64
 80096cc:	48b1      	ldr	r0, [pc, #708]	; (8009994 <UART_SetConfig+0x354>)
 80096ce:	f7f8 fb34 	bl	8001d3a <assert_failed>
=======
 8009748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	4bcf      	ldr	r3, [pc, #828]	; (8009a8c <UART_SetConfig+0x350>)
 8009750:	429a      	cmp	r2, r3
 8009752:	d904      	bls.n	800975e <UART_SetConfig+0x22>
 8009754:	f640 6161 	movw	r1, #3681	; 0xe61
 8009758:	48cd      	ldr	r0, [pc, #820]	; (8009a90 <UART_SetConfig+0x354>)
 800975a:	f7f8 fb6c 	bl	8001e36 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800975e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00a      	beq.n	800977e <UART_SetConfig+0x42>
 8009768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009772:	d004      	beq.n	800977e <UART_SetConfig+0x42>
 8009774:	f640 6162 	movw	r1, #3682	; 0xe62
 8009778:	48c5      	ldr	r0, [pc, #788]	; (8009a90 <UART_SetConfig+0x354>)
 800977a:	f7f8 fb5c 	bl	8001e36 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800977e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d010      	beq.n	80097aa <UART_SetConfig+0x6e>
 8009788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009792:	d00a      	beq.n	80097aa <UART_SetConfig+0x6e>
 8009794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800979e:	d004      	beq.n	80097aa <UART_SetConfig+0x6e>
 80097a0:	f640 6163 	movw	r1, #3683	; 0xe63
 80097a4:	48ba      	ldr	r0, [pc, #744]	; (8009a90 <UART_SetConfig+0x354>)
 80097a6:	f7f8 fb46 	bl	8001e36 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80097aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ae:	695a      	ldr	r2, [r3, #20]
 80097b0:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80097b4:	4013      	ands	r3, r2
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d104      	bne.n	80097c4 <UART_SetConfig+0x88>
 80097ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d104      	bne.n	80097ce <UART_SetConfig+0x92>
 80097c4:	f640 6164 	movw	r1, #3684	; 0xe64
 80097c8:	48b1      	ldr	r0, [pc, #708]	; (8009a90 <UART_SetConfig+0x354>)
 80097ca:	f7f8 fb34 	bl	8001e36 <assert_failed>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 80096d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80096de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096e2:	68d9      	ldr	r1, [r3, #12]
 80096e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	ea40 0301 	orr.w	r3, r0, r1
 80096ee:	6113      	str	r3, [r2, #16]
=======
 80097ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80097da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097de:	68d9      	ldr	r1, [r3, #12]
 80097e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	ea40 0301 	orr.w	r3, r0, r1
 80097ea:	6113      	str	r3, [r2, #16]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< HEAD
 80096f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096f4:	689a      	ldr	r2, [r3, #8]
 80096f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	431a      	orrs	r2, r3
 80096fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009702:	695b      	ldr	r3, [r3, #20]
 8009704:	431a      	orrs	r2, r3
 8009706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	4313      	orrs	r3, r2
 800970e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800971e:	f021 010c 	bic.w	r1, r1, #12
 8009722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800972c:	430b      	orrs	r3, r1
 800972e:	60d3      	str	r3, [r2, #12]
=======
 80097ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097f0:	689a      	ldr	r2, [r3, #8]
 80097f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	431a      	orrs	r2, r3
 80097fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097fe:	695b      	ldr	r3, [r3, #20]
 8009800:	431a      	orrs	r2, r3
 8009802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009806:	69db      	ldr	r3, [r3, #28]
 8009808:	4313      	orrs	r3, r2
 800980a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800980e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800981a:	f021 010c 	bic.w	r1, r1, #12
 800981e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009828:	430b      	orrs	r3, r1
 800982a:	60d3      	str	r3, [r2, #12]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 8009730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	695b      	ldr	r3, [r3, #20]
 8009738:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800973c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009740:	6999      	ldr	r1, [r3, #24]
 8009742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	ea40 0301 	orr.w	r3, r0, r1
 800974c:	6153      	str	r3, [r2, #20]
=======
 800982c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	695b      	ldr	r3, [r3, #20]
 8009834:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800983c:	6999      	ldr	r1, [r3, #24]
 800983e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	ea40 0301 	orr.w	r3, r0, r1
 8009848:	6153      	str	r3, [r2, #20]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
 800974e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	4b90      	ldr	r3, [pc, #576]	; (8009998 <UART_SetConfig+0x358>)
 8009756:	429a      	cmp	r2, r3
 8009758:	d005      	beq.n	8009766 <UART_SetConfig+0x126>
 800975a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	4b8e      	ldr	r3, [pc, #568]	; (800999c <UART_SetConfig+0x35c>)
 8009762:	429a      	cmp	r2, r3
 8009764:	d104      	bne.n	8009770 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009766:	f7fd ff77 	bl	8007658 <HAL_RCC_GetPCLK2Freq>
 800976a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800976e:	e003      	b.n	8009778 <UART_SetConfig+0x138>
=======
 800984a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	4b90      	ldr	r3, [pc, #576]	; (8009a94 <UART_SetConfig+0x358>)
 8009852:	429a      	cmp	r2, r3
 8009854:	d005      	beq.n	8009862 <UART_SetConfig+0x126>
 8009856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	4b8e      	ldr	r3, [pc, #568]	; (8009a98 <UART_SetConfig+0x35c>)
 800985e:	429a      	cmp	r2, r3
 8009860:	d104      	bne.n	800986c <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009862:	f7fd ff77 	bl	8007754 <HAL_RCC_GetPCLK2Freq>
 8009866:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800986a:	e003      	b.n	8009874 <UART_SetConfig+0x138>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 8009770:	f7fd ff5e 	bl	8007630 <HAL_RCC_GetPCLK1Freq>
 8009774:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800977c:	69db      	ldr	r3, [r3, #28]
 800977e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009782:	f040 810f 	bne.w	80099a4 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009786:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800978a:	2200      	movs	r2, #0
 800978c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009790:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009794:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009798:	4622      	mov	r2, r4
 800979a:	462b      	mov	r3, r5
 800979c:	1891      	adds	r1, r2, r2
 800979e:	65b9      	str	r1, [r7, #88]	; 0x58
 80097a0:	415b      	adcs	r3, r3
 80097a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80097a8:	4621      	mov	r1, r4
 80097aa:	eb12 0801 	adds.w	r8, r2, r1
 80097ae:	4629      	mov	r1, r5
 80097b0:	eb43 0901 	adc.w	r9, r3, r1
 80097b4:	f04f 0200 	mov.w	r2, #0
 80097b8:	f04f 0300 	mov.w	r3, #0
 80097bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80097c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80097c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80097c8:	4690      	mov	r8, r2
 80097ca:	4699      	mov	r9, r3
 80097cc:	4623      	mov	r3, r4
 80097ce:	eb18 0303 	adds.w	r3, r8, r3
 80097d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80097d6:	462b      	mov	r3, r5
 80097d8:	eb49 0303 	adc.w	r3, r9, r3
 80097dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80097e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80097ec:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80097f0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80097f4:	460b      	mov	r3, r1
 80097f6:	18db      	adds	r3, r3, r3
 80097f8:	653b      	str	r3, [r7, #80]	; 0x50
 80097fa:	4613      	mov	r3, r2
 80097fc:	eb42 0303 	adc.w	r3, r2, r3
 8009800:	657b      	str	r3, [r7, #84]	; 0x54
 8009802:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009806:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800980a:	f7f7 f887 	bl	800091c <__aeabi_uldivmod>
 800980e:	4602      	mov	r2, r0
 8009810:	460b      	mov	r3, r1
 8009812:	4b63      	ldr	r3, [pc, #396]	; (80099a0 <UART_SetConfig+0x360>)
 8009814:	fba3 2302 	umull	r2, r3, r3, r2
 8009818:	095b      	lsrs	r3, r3, #5
 800981a:	011c      	lsls	r4, r3, #4
 800981c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009820:	2200      	movs	r2, #0
 8009822:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009826:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800982a:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800982e:	4642      	mov	r2, r8
 8009830:	464b      	mov	r3, r9
 8009832:	1891      	adds	r1, r2, r2
 8009834:	64b9      	str	r1, [r7, #72]	; 0x48
 8009836:	415b      	adcs	r3, r3
 8009838:	64fb      	str	r3, [r7, #76]	; 0x4c
 800983a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800983e:	4641      	mov	r1, r8
 8009840:	eb12 0a01 	adds.w	sl, r2, r1
 8009844:	4649      	mov	r1, r9
 8009846:	eb43 0b01 	adc.w	fp, r3, r1
 800984a:	f04f 0200 	mov.w	r2, #0
 800984e:	f04f 0300 	mov.w	r3, #0
 8009852:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009856:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800985a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800985e:	4692      	mov	sl, r2
 8009860:	469b      	mov	fp, r3
 8009862:	4643      	mov	r3, r8
 8009864:	eb1a 0303 	adds.w	r3, sl, r3
 8009868:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800986c:	464b      	mov	r3, r9
 800986e:	eb4b 0303 	adc.w	r3, fp, r3
 8009872:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009882:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009886:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800988a:	460b      	mov	r3, r1
 800988c:	18db      	adds	r3, r3, r3
 800988e:	643b      	str	r3, [r7, #64]	; 0x40
 8009890:	4613      	mov	r3, r2
 8009892:	eb42 0303 	adc.w	r3, r2, r3
 8009896:	647b      	str	r3, [r7, #68]	; 0x44
 8009898:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800989c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80098a0:	f7f7 f83c 	bl	800091c <__aeabi_uldivmod>
 80098a4:	4602      	mov	r2, r0
 80098a6:	460b      	mov	r3, r1
 80098a8:	4611      	mov	r1, r2
 80098aa:	4b3d      	ldr	r3, [pc, #244]	; (80099a0 <UART_SetConfig+0x360>)
 80098ac:	fba3 2301 	umull	r2, r3, r3, r1
 80098b0:	095b      	lsrs	r3, r3, #5
 80098b2:	2264      	movs	r2, #100	; 0x64
 80098b4:	fb02 f303 	mul.w	r3, r2, r3
 80098b8:	1acb      	subs	r3, r1, r3
 80098ba:	00db      	lsls	r3, r3, #3
 80098bc:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80098c0:	4b37      	ldr	r3, [pc, #220]	; (80099a0 <UART_SetConfig+0x360>)
 80098c2:	fba3 2302 	umull	r2, r3, r3, r2
 80098c6:	095b      	lsrs	r3, r3, #5
 80098c8:	005b      	lsls	r3, r3, #1
 80098ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80098ce:	441c      	add	r4, r3
 80098d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098d4:	2200      	movs	r2, #0
 80098d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80098da:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80098de:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80098e2:	4642      	mov	r2, r8
 80098e4:	464b      	mov	r3, r9
 80098e6:	1891      	adds	r1, r2, r2
 80098e8:	63b9      	str	r1, [r7, #56]	; 0x38
 80098ea:	415b      	adcs	r3, r3
 80098ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80098f2:	4641      	mov	r1, r8
 80098f4:	1851      	adds	r1, r2, r1
 80098f6:	6339      	str	r1, [r7, #48]	; 0x30
 80098f8:	4649      	mov	r1, r9
 80098fa:	414b      	adcs	r3, r1
 80098fc:	637b      	str	r3, [r7, #52]	; 0x34
 80098fe:	f04f 0200 	mov.w	r2, #0
 8009902:	f04f 0300 	mov.w	r3, #0
 8009906:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800990a:	4659      	mov	r1, fp
 800990c:	00cb      	lsls	r3, r1, #3
 800990e:	4651      	mov	r1, sl
 8009910:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009914:	4651      	mov	r1, sl
 8009916:	00ca      	lsls	r2, r1, #3
 8009918:	4610      	mov	r0, r2
 800991a:	4619      	mov	r1, r3
 800991c:	4603      	mov	r3, r0
 800991e:	4642      	mov	r2, r8
 8009920:	189b      	adds	r3, r3, r2
 8009922:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009926:	464b      	mov	r3, r9
 8009928:	460a      	mov	r2, r1
 800992a:	eb42 0303 	adc.w	r3, r2, r3
 800992e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800993e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009942:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009946:	460b      	mov	r3, r1
 8009948:	18db      	adds	r3, r3, r3
 800994a:	62bb      	str	r3, [r7, #40]	; 0x28
 800994c:	4613      	mov	r3, r2
 800994e:	eb42 0303 	adc.w	r3, r2, r3
 8009952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009954:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009958:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800995c:	f7f6 ffde 	bl	800091c <__aeabi_uldivmod>
 8009960:	4602      	mov	r2, r0
 8009962:	460b      	mov	r3, r1
 8009964:	4b0e      	ldr	r3, [pc, #56]	; (80099a0 <UART_SetConfig+0x360>)
 8009966:	fba3 1302 	umull	r1, r3, r3, r2
 800996a:	095b      	lsrs	r3, r3, #5
 800996c:	2164      	movs	r1, #100	; 0x64
 800996e:	fb01 f303 	mul.w	r3, r1, r3
 8009972:	1ad3      	subs	r3, r2, r3
 8009974:	00db      	lsls	r3, r3, #3
 8009976:	3332      	adds	r3, #50	; 0x32
 8009978:	4a09      	ldr	r2, [pc, #36]	; (80099a0 <UART_SetConfig+0x360>)
 800997a:	fba2 2303 	umull	r2, r3, r2, r3
 800997e:	095b      	lsrs	r3, r3, #5
 8009980:	f003 0207 	and.w	r2, r3, #7
 8009984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4422      	add	r2, r4
 800998c:	609a      	str	r2, [r3, #8]
=======
 800986c:	f7fd ff5e 	bl	800772c <HAL_RCC_GetPCLK1Freq>
 8009870:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009878:	69db      	ldr	r3, [r3, #28]
 800987a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800987e:	f040 810f 	bne.w	8009aa0 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009886:	2200      	movs	r2, #0
 8009888:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800988c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009890:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009894:	4622      	mov	r2, r4
 8009896:	462b      	mov	r3, r5
 8009898:	1891      	adds	r1, r2, r2
 800989a:	65b9      	str	r1, [r7, #88]	; 0x58
 800989c:	415b      	adcs	r3, r3
 800989e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80098a4:	4621      	mov	r1, r4
 80098a6:	eb12 0801 	adds.w	r8, r2, r1
 80098aa:	4629      	mov	r1, r5
 80098ac:	eb43 0901 	adc.w	r9, r3, r1
 80098b0:	f04f 0200 	mov.w	r2, #0
 80098b4:	f04f 0300 	mov.w	r3, #0
 80098b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80098bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80098c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80098c4:	4690      	mov	r8, r2
 80098c6:	4699      	mov	r9, r3
 80098c8:	4623      	mov	r3, r4
 80098ca:	eb18 0303 	adds.w	r3, r8, r3
 80098ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80098d2:	462b      	mov	r3, r5
 80098d4:	eb49 0303 	adc.w	r3, r9, r3
 80098d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80098dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80098e8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80098ec:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80098f0:	460b      	mov	r3, r1
 80098f2:	18db      	adds	r3, r3, r3
 80098f4:	653b      	str	r3, [r7, #80]	; 0x50
 80098f6:	4613      	mov	r3, r2
 80098f8:	eb42 0303 	adc.w	r3, r2, r3
 80098fc:	657b      	str	r3, [r7, #84]	; 0x54
 80098fe:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009902:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009906:	f7f7 f809 	bl	800091c <__aeabi_uldivmod>
 800990a:	4602      	mov	r2, r0
 800990c:	460b      	mov	r3, r1
 800990e:	4b63      	ldr	r3, [pc, #396]	; (8009a9c <UART_SetConfig+0x360>)
 8009910:	fba3 2302 	umull	r2, r3, r3, r2
 8009914:	095b      	lsrs	r3, r3, #5
 8009916:	011c      	lsls	r4, r3, #4
 8009918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800991c:	2200      	movs	r2, #0
 800991e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009922:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009926:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800992a:	4642      	mov	r2, r8
 800992c:	464b      	mov	r3, r9
 800992e:	1891      	adds	r1, r2, r2
 8009930:	64b9      	str	r1, [r7, #72]	; 0x48
 8009932:	415b      	adcs	r3, r3
 8009934:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009936:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800993a:	4641      	mov	r1, r8
 800993c:	eb12 0a01 	adds.w	sl, r2, r1
 8009940:	4649      	mov	r1, r9
 8009942:	eb43 0b01 	adc.w	fp, r3, r1
 8009946:	f04f 0200 	mov.w	r2, #0
 800994a:	f04f 0300 	mov.w	r3, #0
 800994e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009952:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009956:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800995a:	4692      	mov	sl, r2
 800995c:	469b      	mov	fp, r3
 800995e:	4643      	mov	r3, r8
 8009960:	eb1a 0303 	adds.w	r3, sl, r3
 8009964:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009968:	464b      	mov	r3, r9
 800996a:	eb4b 0303 	adc.w	r3, fp, r3
 800996e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800997e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009982:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009986:	460b      	mov	r3, r1
 8009988:	18db      	adds	r3, r3, r3
 800998a:	643b      	str	r3, [r7, #64]	; 0x40
 800998c:	4613      	mov	r3, r2
 800998e:	eb42 0303 	adc.w	r3, r2, r3
 8009992:	647b      	str	r3, [r7, #68]	; 0x44
 8009994:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009998:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800999c:	f7f6 ffbe 	bl	800091c <__aeabi_uldivmod>
 80099a0:	4602      	mov	r2, r0
 80099a2:	460b      	mov	r3, r1
 80099a4:	4611      	mov	r1, r2
 80099a6:	4b3d      	ldr	r3, [pc, #244]	; (8009a9c <UART_SetConfig+0x360>)
 80099a8:	fba3 2301 	umull	r2, r3, r3, r1
 80099ac:	095b      	lsrs	r3, r3, #5
 80099ae:	2264      	movs	r2, #100	; 0x64
 80099b0:	fb02 f303 	mul.w	r3, r2, r3
 80099b4:	1acb      	subs	r3, r1, r3
 80099b6:	00db      	lsls	r3, r3, #3
 80099b8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80099bc:	4b37      	ldr	r3, [pc, #220]	; (8009a9c <UART_SetConfig+0x360>)
 80099be:	fba3 2302 	umull	r2, r3, r3, r2
 80099c2:	095b      	lsrs	r3, r3, #5
 80099c4:	005b      	lsls	r3, r3, #1
 80099c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80099ca:	441c      	add	r4, r3
 80099cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099d0:	2200      	movs	r2, #0
 80099d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80099d6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80099da:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80099de:	4642      	mov	r2, r8
 80099e0:	464b      	mov	r3, r9
 80099e2:	1891      	adds	r1, r2, r2
 80099e4:	63b9      	str	r1, [r7, #56]	; 0x38
 80099e6:	415b      	adcs	r3, r3
 80099e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80099ee:	4641      	mov	r1, r8
 80099f0:	1851      	adds	r1, r2, r1
 80099f2:	6339      	str	r1, [r7, #48]	; 0x30
 80099f4:	4649      	mov	r1, r9
 80099f6:	414b      	adcs	r3, r1
 80099f8:	637b      	str	r3, [r7, #52]	; 0x34
 80099fa:	f04f 0200 	mov.w	r2, #0
 80099fe:	f04f 0300 	mov.w	r3, #0
 8009a02:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009a06:	4659      	mov	r1, fp
 8009a08:	00cb      	lsls	r3, r1, #3
 8009a0a:	4651      	mov	r1, sl
 8009a0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a10:	4651      	mov	r1, sl
 8009a12:	00ca      	lsls	r2, r1, #3
 8009a14:	4610      	mov	r0, r2
 8009a16:	4619      	mov	r1, r3
 8009a18:	4603      	mov	r3, r0
 8009a1a:	4642      	mov	r2, r8
 8009a1c:	189b      	adds	r3, r3, r2
 8009a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a22:	464b      	mov	r3, r9
 8009a24:	460a      	mov	r2, r1
 8009a26:	eb42 0303 	adc.w	r3, r2, r3
 8009a2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009a3a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009a3e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009a42:	460b      	mov	r3, r1
 8009a44:	18db      	adds	r3, r3, r3
 8009a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a48:	4613      	mov	r3, r2
 8009a4a:	eb42 0303 	adc.w	r3, r2, r3
 8009a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a54:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009a58:	f7f6 ff60 	bl	800091c <__aeabi_uldivmod>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	4b0e      	ldr	r3, [pc, #56]	; (8009a9c <UART_SetConfig+0x360>)
 8009a62:	fba3 1302 	umull	r1, r3, r3, r2
 8009a66:	095b      	lsrs	r3, r3, #5
 8009a68:	2164      	movs	r1, #100	; 0x64
 8009a6a:	fb01 f303 	mul.w	r3, r1, r3
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	00db      	lsls	r3, r3, #3
 8009a72:	3332      	adds	r3, #50	; 0x32
 8009a74:	4a09      	ldr	r2, [pc, #36]	; (8009a9c <UART_SetConfig+0x360>)
 8009a76:	fba2 2303 	umull	r2, r3, r2, r3
 8009a7a:	095b      	lsrs	r3, r3, #5
 8009a7c:	f003 0207 	and.w	r2, r3, #7
 8009a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4422      	add	r2, r4
 8009a88:	609a      	str	r2, [r3, #8]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
<<<<<<< HEAD
 800998e:	e108      	b.n	8009ba2 <UART_SetConfig+0x562>
 8009990:	00a037a0 	.word	0x00a037a0
 8009994:	0800c20c 	.word	0x0800c20c
 8009998:	40011000 	.word	0x40011000
 800999c:	40011400 	.word	0x40011400
 80099a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80099a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099a8:	2200      	movs	r2, #0
 80099aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80099ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80099b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80099b6:	4642      	mov	r2, r8
 80099b8:	464b      	mov	r3, r9
 80099ba:	1891      	adds	r1, r2, r2
 80099bc:	6239      	str	r1, [r7, #32]
 80099be:	415b      	adcs	r3, r3
 80099c0:	627b      	str	r3, [r7, #36]	; 0x24
 80099c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80099c6:	4641      	mov	r1, r8
 80099c8:	1854      	adds	r4, r2, r1
 80099ca:	4649      	mov	r1, r9
 80099cc:	eb43 0501 	adc.w	r5, r3, r1
 80099d0:	f04f 0200 	mov.w	r2, #0
 80099d4:	f04f 0300 	mov.w	r3, #0
 80099d8:	00eb      	lsls	r3, r5, #3
 80099da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80099de:	00e2      	lsls	r2, r4, #3
 80099e0:	4614      	mov	r4, r2
 80099e2:	461d      	mov	r5, r3
 80099e4:	4643      	mov	r3, r8
 80099e6:	18e3      	adds	r3, r4, r3
 80099e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80099ec:	464b      	mov	r3, r9
 80099ee:	eb45 0303 	adc.w	r3, r5, r3
 80099f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80099f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009a06:	f04f 0200 	mov.w	r2, #0
 8009a0a:	f04f 0300 	mov.w	r3, #0
 8009a0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009a12:	4629      	mov	r1, r5
 8009a14:	008b      	lsls	r3, r1, #2
 8009a16:	4621      	mov	r1, r4
 8009a18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	008a      	lsls	r2, r1, #2
 8009a20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009a24:	f7f6 ff7a 	bl	800091c <__aeabi_uldivmod>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	4b60      	ldr	r3, [pc, #384]	; (8009bb0 <UART_SetConfig+0x570>)
 8009a2e:	fba3 2302 	umull	r2, r3, r3, r2
 8009a32:	095b      	lsrs	r3, r3, #5
 8009a34:	011c      	lsls	r4, r3, #4
 8009a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009a40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009a44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009a48:	4642      	mov	r2, r8
 8009a4a:	464b      	mov	r3, r9
 8009a4c:	1891      	adds	r1, r2, r2
 8009a4e:	61b9      	str	r1, [r7, #24]
 8009a50:	415b      	adcs	r3, r3
 8009a52:	61fb      	str	r3, [r7, #28]
 8009a54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a58:	4641      	mov	r1, r8
 8009a5a:	1851      	adds	r1, r2, r1
 8009a5c:	6139      	str	r1, [r7, #16]
 8009a5e:	4649      	mov	r1, r9
 8009a60:	414b      	adcs	r3, r1
 8009a62:	617b      	str	r3, [r7, #20]
 8009a64:	f04f 0200 	mov.w	r2, #0
 8009a68:	f04f 0300 	mov.w	r3, #0
 8009a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009a70:	4659      	mov	r1, fp
 8009a72:	00cb      	lsls	r3, r1, #3
 8009a74:	4651      	mov	r1, sl
 8009a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a7a:	4651      	mov	r1, sl
 8009a7c:	00ca      	lsls	r2, r1, #3
 8009a7e:	4610      	mov	r0, r2
 8009a80:	4619      	mov	r1, r3
 8009a82:	4603      	mov	r3, r0
 8009a84:	4642      	mov	r2, r8
 8009a86:	189b      	adds	r3, r3, r2
 8009a88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a8c:	464b      	mov	r3, r9
 8009a8e:	460a      	mov	r2, r1
 8009a90:	eb42 0303 	adc.w	r3, r2, r3
 8009a94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	67bb      	str	r3, [r7, #120]	; 0x78
 8009aa2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009aa4:	f04f 0200 	mov.w	r2, #0
 8009aa8:	f04f 0300 	mov.w	r3, #0
 8009aac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009ab0:	4649      	mov	r1, r9
 8009ab2:	008b      	lsls	r3, r1, #2
 8009ab4:	4641      	mov	r1, r8
 8009ab6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009aba:	4641      	mov	r1, r8
 8009abc:	008a      	lsls	r2, r1, #2
 8009abe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009ac2:	f7f6 ff2b 	bl	800091c <__aeabi_uldivmod>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	460b      	mov	r3, r1
 8009aca:	4b39      	ldr	r3, [pc, #228]	; (8009bb0 <UART_SetConfig+0x570>)
 8009acc:	fba3 1302 	umull	r1, r3, r3, r2
 8009ad0:	095b      	lsrs	r3, r3, #5
 8009ad2:	2164      	movs	r1, #100	; 0x64
 8009ad4:	fb01 f303 	mul.w	r3, r1, r3
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	011b      	lsls	r3, r3, #4
 8009adc:	3332      	adds	r3, #50	; 0x32
 8009ade:	4a34      	ldr	r2, [pc, #208]	; (8009bb0 <UART_SetConfig+0x570>)
 8009ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ae4:	095b      	lsrs	r3, r3, #5
 8009ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009aea:	441c      	add	r4, r3
 8009aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009af0:	2200      	movs	r2, #0
 8009af2:	673b      	str	r3, [r7, #112]	; 0x70
 8009af4:	677a      	str	r2, [r7, #116]	; 0x74
 8009af6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009afa:	4642      	mov	r2, r8
 8009afc:	464b      	mov	r3, r9
 8009afe:	1891      	adds	r1, r2, r2
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	415b      	adcs	r3, r3
 8009b04:	60fb      	str	r3, [r7, #12]
 8009b06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b0a:	4641      	mov	r1, r8
 8009b0c:	1851      	adds	r1, r2, r1
 8009b0e:	6039      	str	r1, [r7, #0]
 8009b10:	4649      	mov	r1, r9
 8009b12:	414b      	adcs	r3, r1
 8009b14:	607b      	str	r3, [r7, #4]
 8009b16:	f04f 0200 	mov.w	r2, #0
 8009b1a:	f04f 0300 	mov.w	r3, #0
 8009b1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009b22:	4659      	mov	r1, fp
 8009b24:	00cb      	lsls	r3, r1, #3
 8009b26:	4651      	mov	r1, sl
 8009b28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b2c:	4651      	mov	r1, sl
 8009b2e:	00ca      	lsls	r2, r1, #3
 8009b30:	4610      	mov	r0, r2
 8009b32:	4619      	mov	r1, r3
 8009b34:	4603      	mov	r3, r0
 8009b36:	4642      	mov	r2, r8
 8009b38:	189b      	adds	r3, r3, r2
 8009b3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b3c:	464b      	mov	r3, r9
 8009b3e:	460a      	mov	r2, r1
 8009b40:	eb42 0303 	adc.w	r3, r2, r3
 8009b44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	663b      	str	r3, [r7, #96]	; 0x60
 8009b50:	667a      	str	r2, [r7, #100]	; 0x64
 8009b52:	f04f 0200 	mov.w	r2, #0
 8009b56:	f04f 0300 	mov.w	r3, #0
 8009b5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009b5e:	4649      	mov	r1, r9
 8009b60:	008b      	lsls	r3, r1, #2
 8009b62:	4641      	mov	r1, r8
 8009b64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b68:	4641      	mov	r1, r8
 8009b6a:	008a      	lsls	r2, r1, #2
 8009b6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009b70:	f7f6 fed4 	bl	800091c <__aeabi_uldivmod>
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	4b0d      	ldr	r3, [pc, #52]	; (8009bb0 <UART_SetConfig+0x570>)
 8009b7a:	fba3 1302 	umull	r1, r3, r3, r2
 8009b7e:	095b      	lsrs	r3, r3, #5
 8009b80:	2164      	movs	r1, #100	; 0x64
 8009b82:	fb01 f303 	mul.w	r3, r1, r3
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	011b      	lsls	r3, r3, #4
 8009b8a:	3332      	adds	r3, #50	; 0x32
 8009b8c:	4a08      	ldr	r2, [pc, #32]	; (8009bb0 <UART_SetConfig+0x570>)
 8009b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b92:	095b      	lsrs	r3, r3, #5
 8009b94:	f003 020f 	and.w	r2, r3, #15
 8009b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4422      	add	r2, r4
 8009ba0:	609a      	str	r2, [r3, #8]
}
 8009ba2:	bf00      	nop
 8009ba4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009bae:	bf00      	nop
 8009bb0:	51eb851f 	.word	0x51eb851f

08009bb4 <HAL_WWDG_IRQHandler>:
=======
 8009a8a:	e108      	b.n	8009c9e <UART_SetConfig+0x562>
 8009a8c:	00a037a0 	.word	0x00a037a0
 8009a90:	0800c30c 	.word	0x0800c30c
 8009a94:	40011000 	.word	0x40011000
 8009a98:	40011400 	.word	0x40011400
 8009a9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009aaa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009aae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009ab2:	4642      	mov	r2, r8
 8009ab4:	464b      	mov	r3, r9
 8009ab6:	1891      	adds	r1, r2, r2
 8009ab8:	6239      	str	r1, [r7, #32]
 8009aba:	415b      	adcs	r3, r3
 8009abc:	627b      	str	r3, [r7, #36]	; 0x24
 8009abe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009ac2:	4641      	mov	r1, r8
 8009ac4:	1854      	adds	r4, r2, r1
 8009ac6:	4649      	mov	r1, r9
 8009ac8:	eb43 0501 	adc.w	r5, r3, r1
 8009acc:	f04f 0200 	mov.w	r2, #0
 8009ad0:	f04f 0300 	mov.w	r3, #0
 8009ad4:	00eb      	lsls	r3, r5, #3
 8009ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ada:	00e2      	lsls	r2, r4, #3
 8009adc:	4614      	mov	r4, r2
 8009ade:	461d      	mov	r5, r3
 8009ae0:	4643      	mov	r3, r8
 8009ae2:	18e3      	adds	r3, r4, r3
 8009ae4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ae8:	464b      	mov	r3, r9
 8009aea:	eb45 0303 	adc.w	r3, r5, r3
 8009aee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009afe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009b02:	f04f 0200 	mov.w	r2, #0
 8009b06:	f04f 0300 	mov.w	r3, #0
 8009b0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009b0e:	4629      	mov	r1, r5
 8009b10:	008b      	lsls	r3, r1, #2
 8009b12:	4621      	mov	r1, r4
 8009b14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b18:	4621      	mov	r1, r4
 8009b1a:	008a      	lsls	r2, r1, #2
 8009b1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009b20:	f7f6 fefc 	bl	800091c <__aeabi_uldivmod>
 8009b24:	4602      	mov	r2, r0
 8009b26:	460b      	mov	r3, r1
 8009b28:	4b60      	ldr	r3, [pc, #384]	; (8009cac <UART_SetConfig+0x570>)
 8009b2a:	fba3 2302 	umull	r2, r3, r3, r2
 8009b2e:	095b      	lsrs	r3, r3, #5
 8009b30:	011c      	lsls	r4, r3, #4
 8009b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b36:	2200      	movs	r2, #0
 8009b38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009b3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009b40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009b44:	4642      	mov	r2, r8
 8009b46:	464b      	mov	r3, r9
 8009b48:	1891      	adds	r1, r2, r2
 8009b4a:	61b9      	str	r1, [r7, #24]
 8009b4c:	415b      	adcs	r3, r3
 8009b4e:	61fb      	str	r3, [r7, #28]
 8009b50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b54:	4641      	mov	r1, r8
 8009b56:	1851      	adds	r1, r2, r1
 8009b58:	6139      	str	r1, [r7, #16]
 8009b5a:	4649      	mov	r1, r9
 8009b5c:	414b      	adcs	r3, r1
 8009b5e:	617b      	str	r3, [r7, #20]
 8009b60:	f04f 0200 	mov.w	r2, #0
 8009b64:	f04f 0300 	mov.w	r3, #0
 8009b68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009b6c:	4659      	mov	r1, fp
 8009b6e:	00cb      	lsls	r3, r1, #3
 8009b70:	4651      	mov	r1, sl
 8009b72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b76:	4651      	mov	r1, sl
 8009b78:	00ca      	lsls	r2, r1, #3
 8009b7a:	4610      	mov	r0, r2
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	4603      	mov	r3, r0
 8009b80:	4642      	mov	r2, r8
 8009b82:	189b      	adds	r3, r3, r2
 8009b84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b88:	464b      	mov	r3, r9
 8009b8a:	460a      	mov	r2, r1
 8009b8c:	eb42 0303 	adc.w	r3, r2, r3
 8009b90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009ba0:	f04f 0200 	mov.w	r2, #0
 8009ba4:	f04f 0300 	mov.w	r3, #0
 8009ba8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009bac:	4649      	mov	r1, r9
 8009bae:	008b      	lsls	r3, r1, #2
 8009bb0:	4641      	mov	r1, r8
 8009bb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bb6:	4641      	mov	r1, r8
 8009bb8:	008a      	lsls	r2, r1, #2
 8009bba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009bbe:	f7f6 fead 	bl	800091c <__aeabi_uldivmod>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	4b39      	ldr	r3, [pc, #228]	; (8009cac <UART_SetConfig+0x570>)
 8009bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8009bcc:	095b      	lsrs	r3, r3, #5
 8009bce:	2164      	movs	r1, #100	; 0x64
 8009bd0:	fb01 f303 	mul.w	r3, r1, r3
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	011b      	lsls	r3, r3, #4
 8009bd8:	3332      	adds	r3, #50	; 0x32
 8009bda:	4a34      	ldr	r2, [pc, #208]	; (8009cac <UART_SetConfig+0x570>)
 8009bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8009be0:	095b      	lsrs	r3, r3, #5
 8009be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009be6:	441c      	add	r4, r3
 8009be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bec:	2200      	movs	r2, #0
 8009bee:	673b      	str	r3, [r7, #112]	; 0x70
 8009bf0:	677a      	str	r2, [r7, #116]	; 0x74
 8009bf2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009bf6:	4642      	mov	r2, r8
 8009bf8:	464b      	mov	r3, r9
 8009bfa:	1891      	adds	r1, r2, r2
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	415b      	adcs	r3, r3
 8009c00:	60fb      	str	r3, [r7, #12]
 8009c02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c06:	4641      	mov	r1, r8
 8009c08:	1851      	adds	r1, r2, r1
 8009c0a:	6039      	str	r1, [r7, #0]
 8009c0c:	4649      	mov	r1, r9
 8009c0e:	414b      	adcs	r3, r1
 8009c10:	607b      	str	r3, [r7, #4]
 8009c12:	f04f 0200 	mov.w	r2, #0
 8009c16:	f04f 0300 	mov.w	r3, #0
 8009c1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009c1e:	4659      	mov	r1, fp
 8009c20:	00cb      	lsls	r3, r1, #3
 8009c22:	4651      	mov	r1, sl
 8009c24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c28:	4651      	mov	r1, sl
 8009c2a:	00ca      	lsls	r2, r1, #3
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	4619      	mov	r1, r3
 8009c30:	4603      	mov	r3, r0
 8009c32:	4642      	mov	r2, r8
 8009c34:	189b      	adds	r3, r3, r2
 8009c36:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c38:	464b      	mov	r3, r9
 8009c3a:	460a      	mov	r2, r1
 8009c3c:	eb42 0303 	adc.w	r3, r2, r3
 8009c40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	663b      	str	r3, [r7, #96]	; 0x60
 8009c4c:	667a      	str	r2, [r7, #100]	; 0x64
 8009c4e:	f04f 0200 	mov.w	r2, #0
 8009c52:	f04f 0300 	mov.w	r3, #0
 8009c56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009c5a:	4649      	mov	r1, r9
 8009c5c:	008b      	lsls	r3, r1, #2
 8009c5e:	4641      	mov	r1, r8
 8009c60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c64:	4641      	mov	r1, r8
 8009c66:	008a      	lsls	r2, r1, #2
 8009c68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009c6c:	f7f6 fe56 	bl	800091c <__aeabi_uldivmod>
 8009c70:	4602      	mov	r2, r0
 8009c72:	460b      	mov	r3, r1
 8009c74:	4b0d      	ldr	r3, [pc, #52]	; (8009cac <UART_SetConfig+0x570>)
 8009c76:	fba3 1302 	umull	r1, r3, r3, r2
 8009c7a:	095b      	lsrs	r3, r3, #5
 8009c7c:	2164      	movs	r1, #100	; 0x64
 8009c7e:	fb01 f303 	mul.w	r3, r1, r3
 8009c82:	1ad3      	subs	r3, r2, r3
 8009c84:	011b      	lsls	r3, r3, #4
 8009c86:	3332      	adds	r3, #50	; 0x32
 8009c88:	4a08      	ldr	r2, [pc, #32]	; (8009cac <UART_SetConfig+0x570>)
 8009c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c8e:	095b      	lsrs	r3, r3, #5
 8009c90:	f003 020f 	and.w	r2, r3, #15
 8009c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4422      	add	r2, r4
 8009c9c:	609a      	str	r2, [r3, #8]
}
 8009c9e:	bf00      	nop
 8009ca0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009caa:	bf00      	nop
 8009cac:	51eb851f 	.word	0x51eb851f

08009cb0 <HAL_WWDG_IRQHandler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
<<<<<<< HEAD
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009bca:	d10e      	bne.n	8009bea <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	f003 0301 	and.w	r3, r3, #1
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d107      	bne.n	8009bea <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f06f 0201 	mvn.w	r2, #1
 8009be2:	609a      	str	r2, [r3, #8]
=======
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cc6:	d10e      	bne.n	8009ce6 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	f003 0301 	and.w	r3, r3, #1
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d107      	bne.n	8009ce6 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f06f 0201 	mvn.w	r2, #1
 8009cde:	609a      	str	r2, [r3, #8]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
<<<<<<< HEAD
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f804 	bl	8009bf2 <HAL_WWDG_EarlyWakeupCallback>
=======
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f804 	bl	8009cee <HAL_WWDG_EarlyWakeupCallback>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8009bea:	bf00      	nop
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <HAL_WWDG_EarlyWakeupCallback>:
=======
 8009ce6:	bf00      	nop
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <HAL_WWDG_EarlyWakeupCallback>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
<<<<<<< HEAD
 8009bf2:	b480      	push	{r7}
 8009bf4:	b083      	sub	sp, #12
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
=======
 8009cee:	b480      	push	{r7}
 8009cf0:	b083      	sub	sp, #12
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8009bfa:	bf00      	nop
 8009bfc:	370c      	adds	r7, #12
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <makeFreeRtosPriority>:
=======
 8009cf6:	bf00      	nop
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <makeFreeRtosPriority>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
<<<<<<< HEAD
 8009c06:	b480      	push	{r7}
 8009c08:	b085      	sub	sp, #20
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009c10:	2300      	movs	r3, #0
 8009c12:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009c14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c18:	2b84      	cmp	r3, #132	; 0x84
 8009c1a:	d005      	beq.n	8009c28 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009c1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	4413      	add	r3, r2
 8009c24:	3303      	adds	r3, #3
 8009c26:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009c28:	68fb      	ldr	r3, [r7, #12]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <osKernelStart>:
=======
 8009d02:	b480      	push	{r7}
 8009d04:	b085      	sub	sp, #20
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	4603      	mov	r3, r0
 8009d0a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009d10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d14:	2b84      	cmp	r3, #132	; 0x84
 8009d16:	d005      	beq.n	8009d24 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009d18:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	4413      	add	r3, r2
 8009d20:	3303      	adds	r3, #3
 8009d22:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009d24:	68fb      	ldr	r3, [r7, #12]
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3714      	adds	r7, #20
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr

08009d32 <osKernelStart>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
<<<<<<< HEAD
 8009c36:	b580      	push	{r7, lr}
 8009c38:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009c3a:	f000 fc8d 	bl	800a558 <vTaskStartScheduler>
  
  return osOK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <osThreadCreate>:
=======
 8009d32:	b580      	push	{r7, lr}
 8009d34:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009d36:	f000 fc8d 	bl	800a654 <vTaskStartScheduler>
  
  return osOK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <osThreadCreate>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
<<<<<<< HEAD
 8009c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c46:	b089      	sub	sp, #36	; 0x24
 8009c48:	af04      	add	r7, sp, #16
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
=======
 8009d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d42:	b089      	sub	sp, #36	; 0x24
 8009d44:	af04      	add	r7, sp, #16
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
<<<<<<< HEAD
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	695b      	ldr	r3, [r3, #20]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d020      	beq.n	8009c98 <osThreadCreate+0x54>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	699b      	ldr	r3, [r3, #24]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d01c      	beq.n	8009c98 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	685c      	ldr	r4, [r3, #4]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681d      	ldr	r5, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	691e      	ldr	r6, [r3, #16]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7ff ffc8 	bl	8009c06 <makeFreeRtosPriority>
 8009c76:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	695b      	ldr	r3, [r3, #20]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c80:	9202      	str	r2, [sp, #8]
 8009c82:	9301      	str	r3, [sp, #4]
 8009c84:	9100      	str	r1, [sp, #0]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	4632      	mov	r2, r6
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	4620      	mov	r0, r4
 8009c8e:	f000 fa3a 	bl	800a106 <xTaskCreateStatic>
 8009c92:	4603      	mov	r3, r0
 8009c94:	60fb      	str	r3, [r7, #12]
 8009c96:	e01c      	b.n	8009cd2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685c      	ldr	r4, [r3, #4]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ca4:	b29e      	uxth	r6, r3
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7ff ffaa 	bl	8009c06 <makeFreeRtosPriority>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	f107 030c 	add.w	r3, r7, #12
 8009cb8:	9301      	str	r3, [sp, #4]
 8009cba:	9200      	str	r2, [sp, #0]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	4632      	mov	r2, r6
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f000 fa7c 	bl	800a1c0 <xTaskCreate>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d001      	beq.n	8009cd2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	e000      	b.n	8009cd4 <osThreadCreate+0x90>
=======
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	695b      	ldr	r3, [r3, #20]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d020      	beq.n	8009d94 <osThreadCreate+0x54>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	699b      	ldr	r3, [r3, #24]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d01c      	beq.n	8009d94 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	685c      	ldr	r4, [r3, #4]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681d      	ldr	r5, [r3, #0]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	691e      	ldr	r6, [r3, #16]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7ff ffc8 	bl	8009d02 <makeFreeRtosPriority>
 8009d72:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	695b      	ldr	r3, [r3, #20]
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d7c:	9202      	str	r2, [sp, #8]
 8009d7e:	9301      	str	r3, [sp, #4]
 8009d80:	9100      	str	r1, [sp, #0]
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	4632      	mov	r2, r6
 8009d86:	4629      	mov	r1, r5
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f000 fa3a 	bl	800a202 <xTaskCreateStatic>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	60fb      	str	r3, [r7, #12]
 8009d92:	e01c      	b.n	8009dce <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685c      	ldr	r4, [r3, #4]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009da0:	b29e      	uxth	r6, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7ff ffaa 	bl	8009d02 <makeFreeRtosPriority>
 8009dae:	4602      	mov	r2, r0
 8009db0:	f107 030c 	add.w	r3, r7, #12
 8009db4:	9301      	str	r3, [sp, #4]
 8009db6:	9200      	str	r2, [sp, #0]
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	4632      	mov	r2, r6
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	f000 fa7c 	bl	800a2bc <xTaskCreate>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d001      	beq.n	8009dce <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	e000      	b.n	8009dd0 <osThreadCreate+0x90>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
<<<<<<< HEAD
 8009cd2:	68fb      	ldr	r3, [r7, #12]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3714      	adds	r7, #20
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009cdc <osMessageCreate>:
=======
 8009dce:	68fb      	ldr	r3, [r7, #12]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3714      	adds	r7, #20
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009dd8 <osMessageCreate>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
<<<<<<< HEAD
 8009cdc:	b590      	push	{r4, r7, lr}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af02      	add	r7, sp, #8
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
=======
 8009dd8:	b590      	push	{r4, r7, lr}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af02      	add	r7, sp, #8
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
<<<<<<< HEAD
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d011      	beq.n	8009d12 <osMessageCreate+0x36>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d00d      	beq.n	8009d12 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6818      	ldr	r0, [r3, #0]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6859      	ldr	r1, [r3, #4]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	689a      	ldr	r2, [r3, #8]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	2400      	movs	r4, #0
 8009d08:	9400      	str	r4, [sp, #0]
 8009d0a:	f000 f92b 	bl	8009f64 <xQueueGenericCreateStatic>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	e008      	b.n	8009d24 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6818      	ldr	r0, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	f000 f999 	bl	800a054 <xQueueGenericCreate>
 8009d22:	4603      	mov	r3, r0
=======
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d011      	beq.n	8009e0e <osMessageCreate+0x36>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00d      	beq.n	8009e0e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6818      	ldr	r0, [r3, #0]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6859      	ldr	r1, [r3, #4]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	689a      	ldr	r2, [r3, #8]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	2400      	movs	r4, #0
 8009e04:	9400      	str	r4, [sp, #0]
 8009e06:	f000 f92b 	bl	800a060 <xQueueGenericCreateStatic>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	e008      	b.n	8009e20 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6818      	ldr	r0, [r3, #0]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	4619      	mov	r1, r3
 8009e1a:	f000 f999 	bl	800a150 <xQueueGenericCreate>
 8009e1e:	4603      	mov	r3, r0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
<<<<<<< HEAD
 8009d24:	4618      	mov	r0, r3
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd90      	pop	{r4, r7, pc}

08009d2c <vListInitialise>:
=======
 8009e20:	4618      	mov	r0, r3
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd90      	pop	{r4, r7, pc}

08009e28 <vListInitialise>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
<<<<<<< HEAD
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
=======
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f103 0208 	add.w	r2, r3, #8
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	605a      	str	r2, [r3, #4]
=======
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f103 0208 	add.w	r2, r3, #8
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	605a      	str	r2, [r3, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
<<<<<<< HEAD
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f04f 32ff 	mov.w	r2, #4294967295
 8009d44:	609a      	str	r2, [r3, #8]
=======
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e40:	609a      	str	r2, [r3, #8]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
<<<<<<< HEAD
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f103 0208 	add.w	r2, r3, #8
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f103 0208 	add.w	r2, r3, #8
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	601a      	str	r2, [r3, #0]
=======
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f103 0208 	add.w	r2, r3, #8
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f103 0208 	add.w	r2, r3, #8
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
<<<<<<< HEAD
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <vListInitialiseItem>:
=======
 8009e5c:	bf00      	nop
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <vListInitialiseItem>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
<<<<<<< HEAD
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	611a      	str	r2, [r3, #16]
=======
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	611a      	str	r2, [r3, #16]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
<<<<<<< HEAD
 8009d7a:	bf00      	nop
 8009d7c:	370c      	adds	r7, #12
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr

08009d86 <vListInsertEnd>:
=======
 8009e76:	bf00      	nop
 8009e78:	370c      	adds	r7, #12
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr

08009e82 <vListInsertEnd>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 8009d86:	b480      	push	{r7}
 8009d88:	b085      	sub	sp, #20
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
 8009d8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	60fb      	str	r3, [r7, #12]
=======
 8009e82:	b480      	push	{r7}
 8009e84:	b085      	sub	sp, #20
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6078      	str	r0, [r7, #4]
 8009e8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	60fb      	str	r3, [r7, #12]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
<<<<<<< HEAD
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	689a      	ldr	r2, [r3, #8]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	609a      	str	r2, [r3, #8]
=======
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	689a      	ldr	r2, [r3, #8]
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	609a      	str	r2, [r3, #8]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
<<<<<<< HEAD
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	683a      	ldr	r2, [r7, #0]
 8009daa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	683a      	ldr	r2, [r7, #0]
 8009db0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	1c5a      	adds	r2, r3, #1
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	601a      	str	r2, [r3, #0]
}
 8009dc2:	bf00      	nop
 8009dc4:	3714      	adds	r7, #20
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr

08009dce <vListInsert>:
=======
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	683a      	ldr	r2, [r7, #0]
 8009ea6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	683a      	ldr	r2, [r7, #0]
 8009eac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	1c5a      	adds	r2, r3, #1
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	601a      	str	r2, [r3, #0]
}
 8009ebe:	bf00      	nop
 8009ec0:	3714      	adds	r7, #20
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <vListInsert>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
<<<<<<< HEAD
 8009dce:	b480      	push	{r7}
 8009dd0:	b085      	sub	sp, #20
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	60bb      	str	r3, [r7, #8]
=======
 8009eca:	b480      	push	{r7}
 8009ecc:	b085      	sub	sp, #20
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	60bb      	str	r3, [r7, #8]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
<<<<<<< HEAD
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de4:	d103      	bne.n	8009dee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	60fb      	str	r3, [r7, #12]
 8009dec:	e00c      	b.n	8009e08 <vListInsert+0x3a>
=======
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee0:	d103      	bne.n	8009eea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	691b      	ldr	r3, [r3, #16]
 8009ee6:	60fb      	str	r3, [r7, #12]
 8009ee8:	e00c      	b.n	8009f04 <vListInsert+0x3a>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
<<<<<<< HEAD
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	3308      	adds	r3, #8
 8009df2:	60fb      	str	r3, [r7, #12]
 8009df4:	e002      	b.n	8009dfc <vListInsert+0x2e>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	60fb      	str	r3, [r7, #12]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d2f6      	bcs.n	8009df6 <vListInsert+0x28>
=======
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	3308      	adds	r3, #8
 8009eee:	60fb      	str	r3, [r7, #12]
 8009ef0:	e002      	b.n	8009ef8 <vListInsert+0x2e>
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	60fb      	str	r3, [r7, #12]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d2f6      	bcs.n	8009ef2 <vListInsert+0x28>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
<<<<<<< HEAD
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	685a      	ldr	r2, [r3, #4]
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	683a      	ldr	r2, [r7, #0]
 8009e22:	605a      	str	r2, [r3, #4]
=======
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	68fa      	ldr	r2, [r7, #12]
 8009f18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	683a      	ldr	r2, [r7, #0]
 8009f1e:	605a      	str	r2, [r3, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
<<<<<<< HEAD
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	601a      	str	r2, [r3, #0]
}
 8009e34:	bf00      	nop
 8009e36:	3714      	adds	r7, #20
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <uxListRemove>:
=======
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	1c5a      	adds	r2, r3, #1
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	601a      	str	r2, [r3, #0]
}
 8009f30:	bf00      	nop
 8009f32:	3714      	adds	r7, #20
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <uxListRemove>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
<<<<<<< HEAD
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	6892      	ldr	r2, [r2, #8]
 8009e56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	6852      	ldr	r2, [r2, #4]
 8009e60:	605a      	str	r2, [r3, #4]
=======
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	6892      	ldr	r2, [r2, #8]
 8009f52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	6852      	ldr	r2, [r2, #4]
 8009f5c:	605a      	str	r2, [r3, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
<<<<<<< HEAD
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d103      	bne.n	8009e74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	689a      	ldr	r2, [r3, #8]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	605a      	str	r2, [r3, #4]
=======
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d103      	bne.n	8009f70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	689a      	ldr	r2, [r3, #8]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	605a      	str	r2, [r3, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
<<<<<<< HEAD
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	1e5a      	subs	r2, r3, #1
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3714      	adds	r7, #20
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <xQueueGenericReset>:
=======
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	1e5a      	subs	r2, r3, #1
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3714      	adds	r7, #20
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <xQueueGenericReset>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
<<<<<<< HEAD
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10a      	bne.n	8009ebe <xQueueGenericReset+0x2a>
	__asm volatile
 8009ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eac:	f383 8811 	msr	BASEPRI, r3
 8009eb0:	f3bf 8f6f 	isb	sy
 8009eb4:	f3bf 8f4f 	dsb	sy
 8009eb8:	60bb      	str	r3, [r7, #8]
}
 8009eba:	bf00      	nop
 8009ebc:	e7fe      	b.n	8009ebc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009ebe:	f001 f859 	bl	800af74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eca:	68f9      	ldr	r1, [r7, #12]
 8009ecc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ece:	fb01 f303 	mul.w	r3, r1, r3
 8009ed2:	441a      	add	r2, r3
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	68f9      	ldr	r1, [r7, #12]
 8009ef2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ef4:	fb01 f303 	mul.w	r3, r1, r3
 8009ef8:	441a      	add	r2, r3
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	22ff      	movs	r2, #255	; 0xff
 8009f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	22ff      	movs	r2, #255	; 0xff
 8009f0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d114      	bne.n	8009f3e <xQueueGenericReset+0xaa>
=======
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d10a      	bne.n	8009fba <xQueueGenericReset+0x2a>
	__asm volatile
 8009fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	60bb      	str	r3, [r7, #8]
}
 8009fb6:	bf00      	nop
 8009fb8:	e7fe      	b.n	8009fb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009fba:	f001 f85b 	bl	800b074 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fc6:	68f9      	ldr	r1, [r7, #12]
 8009fc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009fca:	fb01 f303 	mul.w	r3, r1, r3
 8009fce:	441a      	add	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fea:	3b01      	subs	r3, #1
 8009fec:	68f9      	ldr	r1, [r7, #12]
 8009fee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ff0:	fb01 f303 	mul.w	r3, r1, r3
 8009ff4:	441a      	add	r2, r3
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	22ff      	movs	r2, #255	; 0xff
 8009ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	22ff      	movs	r2, #255	; 0xff
 800a006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d114      	bne.n	800a03a <xQueueGenericReset+0xaa>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
<<<<<<< HEAD
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d01a      	beq.n	8009f52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	3310      	adds	r3, #16
 8009f20:	4618      	mov	r0, r3
 8009f22:	f000 fd57 	bl	800a9d4 <xTaskRemoveFromEventList>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d012      	beq.n	8009f52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f2c:	4b0c      	ldr	r3, [pc, #48]	; (8009f60 <xQueueGenericReset+0xcc>)
 8009f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f32:	601a      	str	r2, [r3, #0]
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	f3bf 8f6f 	isb	sy
 8009f3c:	e009      	b.n	8009f52 <xQueueGenericReset+0xbe>
=======
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	691b      	ldr	r3, [r3, #16]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d01a      	beq.n	800a04e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	3310      	adds	r3, #16
 800a01c:	4618      	mov	r0, r3
 800a01e:	f000 fd57 	bl	800aad0 <xTaskRemoveFromEventList>
 800a022:	4603      	mov	r3, r0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d012      	beq.n	800a04e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a028:	4b0c      	ldr	r3, [pc, #48]	; (800a05c <xQueueGenericReset+0xcc>)
 800a02a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a02e:	601a      	str	r2, [r3, #0]
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	e009      	b.n	800a04e <xQueueGenericReset+0xbe>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
<<<<<<< HEAD
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	3310      	adds	r3, #16
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7ff fef2 	bl	8009d2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	3324      	adds	r3, #36	; 0x24
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7ff feed 	bl	8009d2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f52:	f001 f83f 	bl	800afd4 <vPortExitCritical>
=======
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	3310      	adds	r3, #16
 800a03e:	4618      	mov	r0, r3
 800a040:	f7ff fef2 	bl	8009e28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	3324      	adds	r3, #36	; 0x24
 800a048:	4618      	mov	r0, r3
 800a04a:	f7ff feed 	bl	8009e28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a04e:	f001 f841 	bl	800b0d4 <vPortExitCritical>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
<<<<<<< HEAD
 8009f56:	2301      	movs	r3, #1
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	e000ed04 	.word	0xe000ed04

08009f64 <xQueueGenericCreateStatic>:
=======
 800a052:	2301      	movs	r3, #1
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	e000ed04 	.word	0xe000ed04

0800a060 <xQueueGenericCreateStatic>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b08e      	sub	sp, #56	; 0x38
 8009f68:	af02      	add	r7, sp, #8
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
 8009f70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10a      	bne.n	8009f8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f8a:	bf00      	nop
 8009f8c:	e7fe      	b.n	8009f8c <xQueueGenericCreateStatic+0x28>
=======
 800a060:	b580      	push	{r7, lr}
 800a062:	b08e      	sub	sp, #56	; 0x38
 800a064:	af02      	add	r7, sp, #8
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	607a      	str	r2, [r7, #4]
 800a06c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10a      	bne.n	800a08a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a086:	bf00      	nop
 800a088:	e7fe      	b.n	800a088 <xQueueGenericCreateStatic+0x28>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
<<<<<<< HEAD
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d10a      	bne.n	8009faa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f98:	f383 8811 	msr	BASEPRI, r3
 8009f9c:	f3bf 8f6f 	isb	sy
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009fa6:	bf00      	nop
 8009fa8:	e7fe      	b.n	8009fa8 <xQueueGenericCreateStatic+0x44>
=======
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d10a      	bne.n	800a0a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a0a2:	bf00      	nop
 800a0a4:	e7fe      	b.n	800a0a4 <xQueueGenericCreateStatic+0x44>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
<<<<<<< HEAD
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d002      	beq.n	8009fb6 <xQueueGenericCreateStatic+0x52>
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d001      	beq.n	8009fba <xQueueGenericCreateStatic+0x56>
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e000      	b.n	8009fbc <xQueueGenericCreateStatic+0x58>
 8009fba:	2300      	movs	r3, #0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d10a      	bne.n	8009fd6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc4:	f383 8811 	msr	BASEPRI, r3
 8009fc8:	f3bf 8f6f 	isb	sy
 8009fcc:	f3bf 8f4f 	dsb	sy
 8009fd0:	623b      	str	r3, [r7, #32]
}
 8009fd2:	bf00      	nop
 8009fd4:	e7fe      	b.n	8009fd4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d102      	bne.n	8009fe2 <xQueueGenericCreateStatic+0x7e>
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d101      	bne.n	8009fe6 <xQueueGenericCreateStatic+0x82>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e000      	b.n	8009fe8 <xQueueGenericCreateStatic+0x84>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d10a      	bne.n	800a002 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	61fb      	str	r3, [r7, #28]
}
 8009ffe:	bf00      	nop
 800a000:	e7fe      	b.n	800a000 <xQueueGenericCreateStatic+0x9c>
=======
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d002      	beq.n	800a0b2 <xQueueGenericCreateStatic+0x52>
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d001      	beq.n	800a0b6 <xQueueGenericCreateStatic+0x56>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e000      	b.n	800a0b8 <xQueueGenericCreateStatic+0x58>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10a      	bne.n	800a0d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	623b      	str	r3, [r7, #32]
}
 800a0ce:	bf00      	nop
 800a0d0:	e7fe      	b.n	800a0d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d102      	bne.n	800a0de <xQueueGenericCreateStatic+0x7e>
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d101      	bne.n	800a0e2 <xQueueGenericCreateStatic+0x82>
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e000      	b.n	800a0e4 <xQueueGenericCreateStatic+0x84>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10a      	bne.n	800a0fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	61fb      	str	r3, [r7, #28]
}
 800a0fa:	bf00      	nop
 800a0fc:	e7fe      	b.n	800a0fc <xQueueGenericCreateStatic+0x9c>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
<<<<<<< HEAD
 800a002:	2348      	movs	r3, #72	; 0x48
 800a004:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	2b48      	cmp	r3, #72	; 0x48
 800a00a:	d00a      	beq.n	800a022 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	61bb      	str	r3, [r7, #24]
}
 800a01e:	bf00      	nop
 800a020:	e7fe      	b.n	800a020 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a022:	697b      	ldr	r3, [r7, #20]
=======
 800a0fe:	2348      	movs	r3, #72	; 0x48
 800a100:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	2b48      	cmp	r3, #72	; 0x48
 800a106:	d00a      	beq.n	800a11e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10c:	f383 8811 	msr	BASEPRI, r3
 800a110:	f3bf 8f6f 	isb	sy
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	61bb      	str	r3, [r7, #24]
}
 800a11a:	bf00      	nop
 800a11c:	e7fe      	b.n	800a11c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a11e:	697b      	ldr	r3, [r7, #20]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00d      	beq.n	800a04a <xQueueGenericCreateStatic+0xe6>
=======
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a126:	2b00      	cmp	r3, #0
 800a128:	d00d      	beq.n	800a146 <xQueueGenericCreateStatic+0xe6>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
<<<<<<< HEAD
 800a02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a030:	2201      	movs	r2, #1
 800a032:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 800a12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< HEAD
 800a036:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a03a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03c:	9300      	str	r3, [sp, #0]
 800a03e:	4613      	mov	r3, r2
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	68b9      	ldr	r1, [r7, #8]
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f000 f83f 	bl	800a0c8 <prvInitialiseNewQueue>
=======
 800a132:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	4613      	mov	r3, r2
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	68b9      	ldr	r1, [r7, #8]
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f000 f83f 	bl	800a1c4 <prvInitialiseNewQueue>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< HEAD
 800a04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3730      	adds	r7, #48	; 0x30
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <xQueueGenericCreate>:
=======
 800a146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a148:	4618      	mov	r0, r3
 800a14a:	3730      	adds	r7, #48	; 0x30
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <xQueueGenericCreate>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
<<<<<<< HEAD
 800a054:	b580      	push	{r7, lr}
 800a056:	b08a      	sub	sp, #40	; 0x28
 800a058:	af02      	add	r7, sp, #8
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	4613      	mov	r3, r2
 800a060:	71fb      	strb	r3, [r7, #7]
=======
 800a150:	b580      	push	{r7, lr}
 800a152:	b08a      	sub	sp, #40	; 0x28
 800a154:	af02      	add	r7, sp, #8
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	4613      	mov	r3, r2
 800a15c:	71fb      	strb	r3, [r7, #7]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
<<<<<<< HEAD
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10a      	bne.n	800a07e <xQueueGenericCreate+0x2a>
	__asm volatile
 800a068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06c:	f383 8811 	msr	BASEPRI, r3
 800a070:	f3bf 8f6f 	isb	sy
 800a074:	f3bf 8f4f 	dsb	sy
 800a078:	613b      	str	r3, [r7, #16]
}
 800a07a:	bf00      	nop
 800a07c:	e7fe      	b.n	800a07c <xQueueGenericCreate+0x28>
=======
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10a      	bne.n	800a17a <xQueueGenericCreate+0x2a>
	__asm volatile
 800a164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a168:	f383 8811 	msr	BASEPRI, r3
 800a16c:	f3bf 8f6f 	isb	sy
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	613b      	str	r3, [r7, #16]
}
 800a176:	bf00      	nop
 800a178:	e7fe      	b.n	800a178 <xQueueGenericCreate+0x28>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	68ba      	ldr	r2, [r7, #8]
 800a082:	fb02 f303 	mul.w	r3, r2, r3
 800a086:	61fb      	str	r3, [r7, #28]
=======
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	fb02 f303 	mul.w	r3, r2, r3
 800a182:	61fb      	str	r3, [r7, #28]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
<<<<<<< HEAD
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	3348      	adds	r3, #72	; 0x48
 800a08c:	4618      	mov	r0, r3
 800a08e:	f001 f853 	bl	800b138 <pvPortMalloc>
 800a092:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d011      	beq.n	800a0be <xQueueGenericCreate+0x6a>
=======
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	3348      	adds	r3, #72	; 0x48
 800a188:	4618      	mov	r0, r3
 800a18a:	f001 f855 	bl	800b238 <pvPortMalloc>
 800a18e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d011      	beq.n	800a1ba <xQueueGenericCreate+0x6a>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
<<<<<<< HEAD
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	3348      	adds	r3, #72	; 0x48
 800a0a2:	617b      	str	r3, [r7, #20]
=======
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	3348      	adds	r3, #72	; 0x48
 800a19e:	617b      	str	r3, [r7, #20]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
<<<<<<< HEAD
 800a0a4:	69bb      	ldr	r3, [r7, #24]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
=======
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
<<<<<<< HEAD
 800a0ac:	79fa      	ldrb	r2, [r7, #7]
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	9300      	str	r3, [sp, #0]
 800a0b2:	4613      	mov	r3, r2
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	68b9      	ldr	r1, [r7, #8]
 800a0b8:	68f8      	ldr	r0, [r7, #12]
 800a0ba:	f000 f805 	bl	800a0c8 <prvInitialiseNewQueue>
=======
 800a1a8:	79fa      	ldrb	r2, [r7, #7]
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	697a      	ldr	r2, [r7, #20]
 800a1b2:	68b9      	ldr	r1, [r7, #8]
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f000 f805 	bl	800a1c4 <prvInitialiseNewQueue>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
<<<<<<< HEAD
 800a0be:	69bb      	ldr	r3, [r7, #24]
	}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3720      	adds	r7, #32
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <prvInitialiseNewQueue>:
=======
 800a1ba:	69bb      	ldr	r3, [r7, #24]
	}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3720      	adds	r7, #32
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <prvInitialiseNewQueue>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
<<<<<<< HEAD
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
 800a0d4:	70fb      	strb	r3, [r7, #3]
=======
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	607a      	str	r2, [r7, #4]
 800a1d0:	70fb      	strb	r3, [r7, #3]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d103      	bne.n	800a0e4 <prvInitialiseNewQueue+0x1c>
=======
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d103      	bne.n	800a1e0 <prvInitialiseNewQueue+0x1c>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
<<<<<<< HEAD
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	69ba      	ldr	r2, [r7, #24]
 800a0e0:	601a      	str	r2, [r3, #0]
 800a0e2:	e002      	b.n	800a0ea <prvInitialiseNewQueue+0x22>
=======
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	69ba      	ldr	r2, [r7, #24]
 800a1dc:	601a      	str	r2, [r3, #0]
 800a1de:	e002      	b.n	800a1e6 <prvInitialiseNewQueue+0x22>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
<<<<<<< HEAD
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	601a      	str	r2, [r3, #0]
=======
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
<<<<<<< HEAD
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a0f6:	2101      	movs	r1, #1
 800a0f8:	69b8      	ldr	r0, [r7, #24]
 800a0fa:	f7ff fecb 	bl	8009e94 <xQueueGenericReset>
=======
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	68fa      	ldr	r2, [r7, #12]
 800a1ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a1ec:	69bb      	ldr	r3, [r7, #24]
 800a1ee:	68ba      	ldr	r2, [r7, #8]
 800a1f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1f2:	2101      	movs	r1, #1
 800a1f4:	69b8      	ldr	r0, [r7, #24]
 800a1f6:	f7ff fecb 	bl	8009f90 <xQueueGenericReset>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
<<<<<<< HEAD
 800a0fe:	bf00      	nop
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <xTaskCreateStatic>:
=======
 800a1fa:	bf00      	nop
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <xTaskCreateStatic>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
<<<<<<< HEAD
 800a106:	b580      	push	{r7, lr}
 800a108:	b08e      	sub	sp, #56	; 0x38
 800a10a:	af04      	add	r7, sp, #16
 800a10c:	60f8      	str	r0, [r7, #12]
 800a10e:	60b9      	str	r1, [r7, #8]
 800a110:	607a      	str	r2, [r7, #4]
 800a112:	603b      	str	r3, [r7, #0]
=======
 800a202:	b580      	push	{r7, lr}
 800a204:	b08e      	sub	sp, #56	; 0x38
 800a206:	af04      	add	r7, sp, #16
 800a208:	60f8      	str	r0, [r7, #12]
 800a20a:	60b9      	str	r1, [r7, #8]
 800a20c:	607a      	str	r2, [r7, #4]
 800a20e:	603b      	str	r3, [r7, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
<<<<<<< HEAD
 800a114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a116:	2b00      	cmp	r3, #0
 800a118:	d10a      	bne.n	800a130 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11e:	f383 8811 	msr	BASEPRI, r3
 800a122:	f3bf 8f6f 	isb	sy
 800a126:	f3bf 8f4f 	dsb	sy
 800a12a:	623b      	str	r3, [r7, #32]
}
 800a12c:	bf00      	nop
 800a12e:	e7fe      	b.n	800a12e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10a      	bne.n	800a14c <xTaskCreateStatic+0x46>
	__asm volatile
 800a136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	61fb      	str	r3, [r7, #28]
}
 800a148:	bf00      	nop
 800a14a:	e7fe      	b.n	800a14a <xTaskCreateStatic+0x44>
=======
 800a210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a212:	2b00      	cmp	r3, #0
 800a214:	d10a      	bne.n	800a22c <xTaskCreateStatic+0x2a>
	__asm volatile
 800a216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21a:	f383 8811 	msr	BASEPRI, r3
 800a21e:	f3bf 8f6f 	isb	sy
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	623b      	str	r3, [r7, #32]
}
 800a228:	bf00      	nop
 800a22a:	e7fe      	b.n	800a22a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d10a      	bne.n	800a248 <xTaskCreateStatic+0x46>
	__asm volatile
 800a232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a236:	f383 8811 	msr	BASEPRI, r3
 800a23a:	f3bf 8f6f 	isb	sy
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	61fb      	str	r3, [r7, #28]
}
 800a244:	bf00      	nop
 800a246:	e7fe      	b.n	800a246 <xTaskCreateStatic+0x44>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
<<<<<<< HEAD
 800a14c:	23b4      	movs	r3, #180	; 0xb4
 800a14e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	2bb4      	cmp	r3, #180	; 0xb4
 800a154:	d00a      	beq.n	800a16c <xTaskCreateStatic+0x66>
	__asm volatile
 800a156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15a:	f383 8811 	msr	BASEPRI, r3
 800a15e:	f3bf 8f6f 	isb	sy
 800a162:	f3bf 8f4f 	dsb	sy
 800a166:	61bb      	str	r3, [r7, #24]
}
 800a168:	bf00      	nop
 800a16a:	e7fe      	b.n	800a16a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a16c:	693b      	ldr	r3, [r7, #16]
=======
 800a248:	23b4      	movs	r3, #180	; 0xb4
 800a24a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	2bb4      	cmp	r3, #180	; 0xb4
 800a250:	d00a      	beq.n	800a268 <xTaskCreateStatic+0x66>
	__asm volatile
 800a252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a256:	f383 8811 	msr	BASEPRI, r3
 800a25a:	f3bf 8f6f 	isb	sy
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	61bb      	str	r3, [r7, #24]
}
 800a264:	bf00      	nop
 800a266:	e7fe      	b.n	800a266 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a268:	693b      	ldr	r3, [r7, #16]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
<<<<<<< HEAD
 800a16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a170:	2b00      	cmp	r3, #0
 800a172:	d01e      	beq.n	800a1b2 <xTaskCreateStatic+0xac>
 800a174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a176:	2b00      	cmp	r3, #0
 800a178:	d01b      	beq.n	800a1b2 <xTaskCreateStatic+0xac>
=======
 800a26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d01e      	beq.n	800a2ae <xTaskCreateStatic+0xac>
 800a270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a272:	2b00      	cmp	r3, #0
 800a274:	d01b      	beq.n	800a2ae <xTaskCreateStatic+0xac>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
<<<<<<< HEAD
 800a17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a182:	631a      	str	r2, [r3, #48]	; 0x30
=======
 800a276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a278:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a27e:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	2202      	movs	r2, #2
 800a188:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
=======
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a282:	2202      	movs	r2, #2
 800a284:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
<<<<<<< HEAD
 800a18c:	2300      	movs	r3, #0
 800a18e:	9303      	str	r3, [sp, #12]
 800a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a192:	9302      	str	r3, [sp, #8]
 800a194:	f107 0314 	add.w	r3, r7, #20
 800a198:	9301      	str	r3, [sp, #4]
 800a19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19c:	9300      	str	r3, [sp, #0]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	68b9      	ldr	r1, [r7, #8]
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f000 f851 	bl	800a24c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1ac:	f000 f8ec 	bl	800a388 <prvAddNewTaskToReadyList>
 800a1b0:	e001      	b.n	800a1b6 <xTaskCreateStatic+0xb0>
=======
 800a288:	2300      	movs	r3, #0
 800a28a:	9303      	str	r3, [sp, #12]
 800a28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28e:	9302      	str	r3, [sp, #8]
 800a290:	f107 0314 	add.w	r3, r7, #20
 800a294:	9301      	str	r3, [sp, #4]
 800a296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	68b9      	ldr	r1, [r7, #8]
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f000 f851 	bl	800a348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2a8:	f000 f8ec 	bl	800a484 <prvAddNewTaskToReadyList>
 800a2ac:	e001      	b.n	800a2b2 <xTaskCreateStatic+0xb0>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		}
		else
		{
			xReturn = NULL;
<<<<<<< HEAD
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a1b6:	697b      	ldr	r3, [r7, #20]
	}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3728      	adds	r7, #40	; 0x28
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <xTaskCreate>:
=======
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a2b2:	697b      	ldr	r3, [r7, #20]
	}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3728      	adds	r7, #40	; 0x28
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <xTaskCreate>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
<<<<<<< HEAD
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b08c      	sub	sp, #48	; 0x30
 800a1c4:	af04      	add	r7, sp, #16
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	603b      	str	r3, [r7, #0]
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	80fb      	strh	r3, [r7, #6]
=======
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b08c      	sub	sp, #48	; 0x30
 800a2c0:	af04      	add	r7, sp, #16
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	603b      	str	r3, [r7, #0]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	80fb      	strh	r3, [r7, #6]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
<<<<<<< HEAD
 800a1d0:	88fb      	ldrh	r3, [r7, #6]
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f000 ffaf 	bl	800b138 <pvPortMalloc>
 800a1da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00e      	beq.n	800a200 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a1e2:	20b4      	movs	r0, #180	; 0xb4
 800a1e4:	f000 ffa8 	bl	800b138 <pvPortMalloc>
 800a1e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d003      	beq.n	800a1f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	697a      	ldr	r2, [r7, #20]
 800a1f4:	631a      	str	r2, [r3, #48]	; 0x30
 800a1f6:	e005      	b.n	800a204 <xTaskCreate+0x44>
=======
 800a2cc:	88fb      	ldrh	r3, [r7, #6]
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f000 ffb1 	bl	800b238 <pvPortMalloc>
 800a2d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00e      	beq.n	800a2fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a2de:	20b4      	movs	r0, #180	; 0xb4
 800a2e0:	f000 ffaa 	bl	800b238 <pvPortMalloc>
 800a2e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a2e6:	69fb      	ldr	r3, [r7, #28]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d003      	beq.n	800a2f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	697a      	ldr	r2, [r7, #20]
 800a2f0:	631a      	str	r2, [r3, #48]	; 0x30
 800a2f2:	e005      	b.n	800a300 <xTaskCreate+0x44>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
<<<<<<< HEAD
 800a1f8:	6978      	ldr	r0, [r7, #20]
 800a1fa:	f001 f869 	bl	800b2d0 <vPortFree>
 800a1fe:	e001      	b.n	800a204 <xTaskCreate+0x44>
=======
 800a2f4:	6978      	ldr	r0, [r7, #20]
 800a2f6:	f001 f86b 	bl	800b3d0 <vPortFree>
 800a2fa:	e001      	b.n	800a300 <xTaskCreate+0x44>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
				}
			}
			else
			{
				pxNewTCB = NULL;
<<<<<<< HEAD
 800a200:	2300      	movs	r3, #0
 800a202:	61fb      	str	r3, [r7, #28]
=======
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	61fb      	str	r3, [r7, #28]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
<<<<<<< HEAD
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d017      	beq.n	800a23a <xTaskCreate+0x7a>
=======
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d017      	beq.n	800a336 <xTaskCreate+0x7a>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
<<<<<<< HEAD
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
=======
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	2200      	movs	r2, #0
 800a30a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
<<<<<<< HEAD
 800a212:	88fa      	ldrh	r2, [r7, #6]
 800a214:	2300      	movs	r3, #0
 800a216:	9303      	str	r3, [sp, #12]
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	9302      	str	r3, [sp, #8]
 800a21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21e:	9301      	str	r3, [sp, #4]
 800a220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a222:	9300      	str	r3, [sp, #0]
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	68b9      	ldr	r1, [r7, #8]
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f000 f80f 	bl	800a24c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a22e:	69f8      	ldr	r0, [r7, #28]
 800a230:	f000 f8aa 	bl	800a388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a234:	2301      	movs	r3, #1
 800a236:	61bb      	str	r3, [r7, #24]
 800a238:	e002      	b.n	800a240 <xTaskCreate+0x80>
=======
 800a30e:	88fa      	ldrh	r2, [r7, #6]
 800a310:	2300      	movs	r3, #0
 800a312:	9303      	str	r3, [sp, #12]
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	9302      	str	r3, [sp, #8]
 800a318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a31a:	9301      	str	r3, [sp, #4]
 800a31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	68b9      	ldr	r1, [r7, #8]
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 f80f 	bl	800a348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a32a:	69f8      	ldr	r0, [r7, #28]
 800a32c:	f000 f8aa 	bl	800a484 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a330:	2301      	movs	r3, #1
 800a332:	61bb      	str	r3, [r7, #24]
 800a334:	e002      	b.n	800a33c <xTaskCreate+0x80>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
<<<<<<< HEAD
 800a23a:	f04f 33ff 	mov.w	r3, #4294967295
 800a23e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a240:	69bb      	ldr	r3, [r7, #24]
	}
 800a242:	4618      	mov	r0, r3
 800a244:	3720      	adds	r7, #32
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
	...

0800a24c <prvInitialiseNewTask>:
=======
 800a336:	f04f 33ff 	mov.w	r3, #4294967295
 800a33a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a33c:	69bb      	ldr	r3, [r7, #24]
	}
 800a33e:	4618      	mov	r0, r3
 800a340:	3720      	adds	r7, #32
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
	...

0800a348 <prvInitialiseNewTask>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
<<<<<<< HEAD
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b088      	sub	sp, #32
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
 800a258:	603b      	str	r3, [r7, #0]
=======
 800a348:	b580      	push	{r7, lr}
 800a34a:	b088      	sub	sp, #32
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	607a      	str	r2, [r7, #4]
 800a354:	603b      	str	r3, [r7, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
<<<<<<< HEAD
 800a25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a264:	3b01      	subs	r3, #1
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4413      	add	r3, r2
 800a26a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	f023 0307 	bic.w	r3, r3, #7
 800a272:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	f003 0307 	and.w	r3, r3, #7
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00a      	beq.n	800a294 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	617b      	str	r3, [r7, #20]
}
 800a290:	bf00      	nop
 800a292:	e7fe      	b.n	800a292 <prvInitialiseNewTask+0x46>
=======
 800a356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a360:	3b01      	subs	r3, #1
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4413      	add	r3, r2
 800a366:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	f023 0307 	bic.w	r3, r3, #7
 800a36e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	f003 0307 	and.w	r3, r3, #7
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00a      	beq.n	800a390 <prvInitialiseNewTask+0x48>
	__asm volatile
 800a37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37e:	f383 8811 	msr	BASEPRI, r3
 800a382:	f3bf 8f6f 	isb	sy
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	617b      	str	r3, [r7, #20]
}
 800a38c:	bf00      	nop
 800a38e:	e7fe      	b.n	800a38e <prvInitialiseNewTask+0x46>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
<<<<<<< HEAD
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d01f      	beq.n	800a2da <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a29a:	2300      	movs	r3, #0
 800a29c:	61fb      	str	r3, [r7, #28]
 800a29e:	e012      	b.n	800a2c6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a2a0:	68ba      	ldr	r2, [r7, #8]
 800a2a2:	69fb      	ldr	r3, [r7, #28]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	7819      	ldrb	r1, [r3, #0]
 800a2a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	3334      	adds	r3, #52	; 0x34
 800a2b0:	460a      	mov	r2, r1
 800a2b2:	701a      	strb	r2, [r3, #0]
=======
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d01f      	beq.n	800a3d6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a396:	2300      	movs	r3, #0
 800a398:	61fb      	str	r3, [r7, #28]
 800a39a:	e012      	b.n	800a3c2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	7819      	ldrb	r1, [r3, #0]
 800a3a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	3334      	adds	r3, #52	; 0x34
 800a3ac:	460a      	mov	r2, r1
 800a3ae:	701a      	strb	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
<<<<<<< HEAD
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d006      	beq.n	800a2ce <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	61fb      	str	r3, [r7, #28]
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	2b0f      	cmp	r3, #15
 800a2ca:	d9e9      	bls.n	800a2a0 <prvInitialiseNewTask+0x54>
 800a2cc:	e000      	b.n	800a2d0 <prvInitialiseNewTask+0x84>
			{
				break;
 800a2ce:	bf00      	nop
=======
 800a3b0:	68ba      	ldr	r2, [r7, #8]
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d006      	beq.n	800a3ca <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	61fb      	str	r3, [r7, #28]
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	2b0f      	cmp	r3, #15
 800a3c6:	d9e9      	bls.n	800a39c <prvInitialiseNewTask+0x54>
 800a3c8:	e000      	b.n	800a3cc <prvInitialiseNewTask+0x84>
			{
				break;
 800a3ca:	bf00      	nop
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
<<<<<<< HEAD
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a2d8:	e003      	b.n	800a2e2 <prvInitialiseNewTask+0x96>
=======
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a3d4:	e003      	b.n	800a3de <prvInitialiseNewTask+0x96>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
<<<<<<< HEAD
 800a2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
=======
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
<<<<<<< HEAD
 800a2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e4:	2b06      	cmp	r3, #6
 800a2e6:	d901      	bls.n	800a2ec <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a2e8:	2306      	movs	r3, #6
 800a2ea:	62bb      	str	r3, [r7, #40]	; 0x28
=======
 800a3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e0:	2b06      	cmp	r3, #6
 800a3e2:	d901      	bls.n	800a3e8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a3e4:	2306      	movs	r3, #6
 800a3e6:	62bb      	str	r3, [r7, #40]	; 0x28
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
<<<<<<< HEAD
 800a2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2f6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	649a      	str	r2, [r3, #72]	; 0x48
=======
 800a3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3f2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	649a      	str	r2, [r3, #72]	; 0x48
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
<<<<<<< HEAD
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a300:	3304      	adds	r3, #4
 800a302:	4618      	mov	r0, r3
 800a304:	f7ff fd32 	bl	8009d6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30a:	3318      	adds	r3, #24
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7ff fd2d 	bl	8009d6c <vListInitialiseItem>
=======
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fc:	3304      	adds	r3, #4
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7ff fd32 	bl	8009e68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a406:	3318      	adds	r3, #24
 800a408:	4618      	mov	r0, r3
 800a40a:	f7ff fd2d 	bl	8009e68 <vListInitialiseItem>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
<<<<<<< HEAD
 800a312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a316:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31a:	f1c3 0207 	rsb	r2, r3, #7
 800a31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a320:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a326:	625a      	str	r2, [r3, #36]	; 0x24
=======
 800a40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a412:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a416:	f1c3 0207 	rsb	r2, r3, #7
 800a41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a422:	625a      	str	r2, [r3, #36]	; 0x24
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
<<<<<<< HEAD
 800a328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32a:	2200      	movs	r2, #0
 800a32c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a332:	2200      	movs	r2, #0
 800a334:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
=======
 800a424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a426:	2200      	movs	r2, #0
 800a428:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
<<<<<<< HEAD
 800a338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33a:	334c      	adds	r3, #76	; 0x4c
 800a33c:	2260      	movs	r2, #96	; 0x60
 800a33e:	2100      	movs	r1, #0
 800a340:	4618      	mov	r0, r3
 800a342:	f001 f91b 	bl	800b57c <memset>
 800a346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a348:	4a0c      	ldr	r2, [pc, #48]	; (800a37c <prvInitialiseNewTask+0x130>)
 800a34a:	651a      	str	r2, [r3, #80]	; 0x50
 800a34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a34e:	4a0c      	ldr	r2, [pc, #48]	; (800a380 <prvInitialiseNewTask+0x134>)
 800a350:	655a      	str	r2, [r3, #84]	; 0x54
 800a352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a354:	4a0b      	ldr	r2, [pc, #44]	; (800a384 <prvInitialiseNewTask+0x138>)
 800a356:	659a      	str	r2, [r3, #88]	; 0x58
=======
 800a434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a436:	334c      	adds	r3, #76	; 0x4c
 800a438:	2260      	movs	r2, #96	; 0x60
 800a43a:	2100      	movs	r1, #0
 800a43c:	4618      	mov	r0, r3
 800a43e:	f001 f91d 	bl	800b67c <memset>
 800a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a444:	4a0c      	ldr	r2, [pc, #48]	; (800a478 <prvInitialiseNewTask+0x130>)
 800a446:	651a      	str	r2, [r3, #80]	; 0x50
 800a448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44a:	4a0c      	ldr	r2, [pc, #48]	; (800a47c <prvInitialiseNewTask+0x134>)
 800a44c:	655a      	str	r2, [r3, #84]	; 0x54
 800a44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a450:	4a0b      	ldr	r2, [pc, #44]	; (800a480 <prvInitialiseNewTask+0x138>)
 800a452:	659a      	str	r2, [r3, #88]	; 0x58
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
<<<<<<< HEAD
 800a358:	683a      	ldr	r2, [r7, #0]
 800a35a:	68f9      	ldr	r1, [r7, #12]
 800a35c:	69b8      	ldr	r0, [r7, #24]
 800a35e:	f000 fcdb 	bl	800ad18 <pxPortInitialiseStack>
 800a362:	4602      	mov	r2, r0
 800a364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a366:	601a      	str	r2, [r3, #0]
=======
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	68f9      	ldr	r1, [r7, #12]
 800a458:	69b8      	ldr	r0, [r7, #24]
 800a45a:	f000 fcdb 	bl	800ae14 <pxPortInitialiseStack>
 800a45e:	4602      	mov	r2, r0
 800a460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a462:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
<<<<<<< HEAD
 800a368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d002      	beq.n	800a374 <prvInitialiseNewTask+0x128>
=======
 800a464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a466:	2b00      	cmp	r3, #0
 800a468:	d002      	beq.n	800a470 <prvInitialiseNewTask+0x128>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
<<<<<<< HEAD
 800a36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a372:	601a      	str	r2, [r3, #0]
=======
 800a46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a46e:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 800a374:	bf00      	nop
 800a376:	3720      	adds	r7, #32
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	0800c290 	.word	0x0800c290
 800a380:	0800c2b0 	.word	0x0800c2b0
 800a384:	0800c270 	.word	0x0800c270

0800a388 <prvAddNewTaskToReadyList>:
=======
 800a470:	bf00      	nop
 800a472:	3720      	adds	r7, #32
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	0800c390 	.word	0x0800c390
 800a47c:	0800c3b0 	.word	0x0800c3b0
 800a480:	0800c370 	.word	0x0800c370

0800a484 <prvAddNewTaskToReadyList>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
<<<<<<< HEAD
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a390:	f000 fdf0 	bl	800af74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a394:	4b2a      	ldr	r3, [pc, #168]	; (800a440 <prvAddNewTaskToReadyList+0xb8>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	3301      	adds	r3, #1
 800a39a:	4a29      	ldr	r2, [pc, #164]	; (800a440 <prvAddNewTaskToReadyList+0xb8>)
 800a39c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a39e:	4b29      	ldr	r3, [pc, #164]	; (800a444 <prvAddNewTaskToReadyList+0xbc>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d109      	bne.n	800a3ba <prvAddNewTaskToReadyList+0x32>
=======
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a48c:	f000 fdf2 	bl	800b074 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a490:	4b2a      	ldr	r3, [pc, #168]	; (800a53c <prvAddNewTaskToReadyList+0xb8>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	3301      	adds	r3, #1
 800a496:	4a29      	ldr	r2, [pc, #164]	; (800a53c <prvAddNewTaskToReadyList+0xb8>)
 800a498:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a49a:	4b29      	ldr	r3, [pc, #164]	; (800a540 <prvAddNewTaskToReadyList+0xbc>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d109      	bne.n	800a4b6 <prvAddNewTaskToReadyList+0x32>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
<<<<<<< HEAD
 800a3a6:	4a27      	ldr	r2, [pc, #156]	; (800a444 <prvAddNewTaskToReadyList+0xbc>)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a3ac:	4b24      	ldr	r3, [pc, #144]	; (800a440 <prvAddNewTaskToReadyList+0xb8>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d110      	bne.n	800a3d6 <prvAddNewTaskToReadyList+0x4e>
=======
 800a4a2:	4a27      	ldr	r2, [pc, #156]	; (800a540 <prvAddNewTaskToReadyList+0xbc>)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a4a8:	4b24      	ldr	r3, [pc, #144]	; (800a53c <prvAddNewTaskToReadyList+0xb8>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d110      	bne.n	800a4d2 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
<<<<<<< HEAD
 800a3b4:	f000 fb88 	bl	800aac8 <prvInitialiseTaskLists>
 800a3b8:	e00d      	b.n	800a3d6 <prvAddNewTaskToReadyList+0x4e>
=======
 800a4b0:	f000 fb88 	bl	800abc4 <prvInitialiseTaskLists>
 800a4b4:	e00d      	b.n	800a4d2 <prvAddNewTaskToReadyList+0x4e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
<<<<<<< HEAD
 800a3ba:	4b23      	ldr	r3, [pc, #140]	; (800a448 <prvAddNewTaskToReadyList+0xc0>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d109      	bne.n	800a3d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a3c2:	4b20      	ldr	r3, [pc, #128]	; (800a444 <prvAddNewTaskToReadyList+0xbc>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d802      	bhi.n	800a3d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a3d0:	4a1c      	ldr	r2, [pc, #112]	; (800a444 <prvAddNewTaskToReadyList+0xbc>)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6013      	str	r3, [r2, #0]
=======
 800a4b6:	4b23      	ldr	r3, [pc, #140]	; (800a544 <prvAddNewTaskToReadyList+0xc0>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d109      	bne.n	800a4d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a4be:	4b20      	ldr	r3, [pc, #128]	; (800a540 <prvAddNewTaskToReadyList+0xbc>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d802      	bhi.n	800a4d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a4cc:	4a1c      	ldr	r2, [pc, #112]	; (800a540 <prvAddNewTaskToReadyList+0xbc>)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6013      	str	r3, [r2, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
<<<<<<< HEAD
 800a3d6:	4b1d      	ldr	r3, [pc, #116]	; (800a44c <prvAddNewTaskToReadyList+0xc4>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	4a1b      	ldr	r2, [pc, #108]	; (800a44c <prvAddNewTaskToReadyList+0xc4>)
 800a3de:	6013      	str	r3, [r2, #0]
=======
 800a4d2:	4b1d      	ldr	r3, [pc, #116]	; (800a548 <prvAddNewTaskToReadyList+0xc4>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	4a1b      	ldr	r2, [pc, #108]	; (800a548 <prvAddNewTaskToReadyList+0xc4>)
 800a4da:	6013      	str	r3, [r2, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
<<<<<<< HEAD
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	409a      	lsls	r2, r3
 800a3e8:	4b19      	ldr	r3, [pc, #100]	; (800a450 <prvAddNewTaskToReadyList+0xc8>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	4a18      	ldr	r2, [pc, #96]	; (800a450 <prvAddNewTaskToReadyList+0xc8>)
 800a3f0:	6013      	str	r3, [r2, #0]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	4413      	add	r3, r2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	4a15      	ldr	r2, [pc, #84]	; (800a454 <prvAddNewTaskToReadyList+0xcc>)
 800a400:	441a      	add	r2, r3
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	3304      	adds	r3, #4
 800a406:	4619      	mov	r1, r3
 800a408:	4610      	mov	r0, r2
 800a40a:	f7ff fcbc 	bl	8009d86 <vListInsertEnd>
=======
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	409a      	lsls	r2, r3
 800a4e4:	4b19      	ldr	r3, [pc, #100]	; (800a54c <prvAddNewTaskToReadyList+0xc8>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	4a18      	ldr	r2, [pc, #96]	; (800a54c <prvAddNewTaskToReadyList+0xc8>)
 800a4ec:	6013      	str	r3, [r2, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	4413      	add	r3, r2
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	4a15      	ldr	r2, [pc, #84]	; (800a550 <prvAddNewTaskToReadyList+0xcc>)
 800a4fc:	441a      	add	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	3304      	adds	r3, #4
 800a502:	4619      	mov	r1, r3
 800a504:	4610      	mov	r0, r2
 800a506:	f7ff fcbc 	bl	8009e82 <vListInsertEnd>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a40e:	f000 fde1 	bl	800afd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a412:	4b0d      	ldr	r3, [pc, #52]	; (800a448 <prvAddNewTaskToReadyList+0xc0>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00e      	beq.n	800a438 <prvAddNewTaskToReadyList+0xb0>
=======
 800a50a:	f000 fde3 	bl	800b0d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a50e:	4b0d      	ldr	r3, [pc, #52]	; (800a544 <prvAddNewTaskToReadyList+0xc0>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00e      	beq.n	800a534 <prvAddNewTaskToReadyList+0xb0>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
<<<<<<< HEAD
 800a41a:	4b0a      	ldr	r3, [pc, #40]	; (800a444 <prvAddNewTaskToReadyList+0xbc>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a424:	429a      	cmp	r2, r3
 800a426:	d207      	bcs.n	800a438 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a428:	4b0b      	ldr	r3, [pc, #44]	; (800a458 <prvAddNewTaskToReadyList+0xd0>)
 800a42a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a42e:	601a      	str	r2, [r3, #0]
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	f3bf 8f6f 	isb	sy
=======
 800a516:	4b0a      	ldr	r3, [pc, #40]	; (800a540 <prvAddNewTaskToReadyList+0xbc>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a520:	429a      	cmp	r2, r3
 800a522:	d207      	bcs.n	800a534 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a524:	4b0b      	ldr	r3, [pc, #44]	; (800a554 <prvAddNewTaskToReadyList+0xd0>)
 800a526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a52a:	601a      	str	r2, [r3, #0]
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	f3bf 8f6f 	isb	sy
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 800a438:	bf00      	nop
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	200008f8 	.word	0x200008f8
 800a444:	200007f8 	.word	0x200007f8
 800a448:	20000904 	.word	0x20000904
 800a44c:	20000914 	.word	0x20000914
 800a450:	20000900 	.word	0x20000900
 800a454:	200007fc 	.word	0x200007fc
 800a458:	e000ed04 	.word	0xe000ed04

0800a45c <vTaskDelayUntil>:
=======
 800a534:	bf00      	nop
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	200008fc 	.word	0x200008fc
 800a540:	200007fc 	.word	0x200007fc
 800a544:	20000908 	.word	0x20000908
 800a548:	20000918 	.word	0x20000918
 800a54c:	20000904 	.word	0x20000904
 800a550:	20000800 	.word	0x20000800
 800a554:	e000ed04 	.word	0xe000ed04

0800a558 <vTaskDelayUntil>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
<<<<<<< HEAD
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b08a      	sub	sp, #40	; 0x28
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a466:	2300      	movs	r3, #0
 800a468:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d10a      	bne.n	800a486 <vTaskDelayUntil+0x2a>
	__asm volatile
 800a470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	617b      	str	r3, [r7, #20]
}
 800a482:	bf00      	nop
 800a484:	e7fe      	b.n	800a484 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10a      	bne.n	800a4a2 <vTaskDelayUntil+0x46>
	__asm volatile
 800a48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	613b      	str	r3, [r7, #16]
}
 800a49e:	bf00      	nop
 800a4a0:	e7fe      	b.n	800a4a0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a4a2:	4b2a      	ldr	r3, [pc, #168]	; (800a54c <vTaskDelayUntil+0xf0>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00a      	beq.n	800a4c0 <vTaskDelayUntil+0x64>
	__asm volatile
 800a4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ae:	f383 8811 	msr	BASEPRI, r3
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	f3bf 8f4f 	dsb	sy
 800a4ba:	60fb      	str	r3, [r7, #12]
}
 800a4bc:	bf00      	nop
 800a4be:	e7fe      	b.n	800a4be <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a4c0:	f000 f8b4 	bl	800a62c <vTaskSuspendAll>
=======
 800a558:	b580      	push	{r7, lr}
 800a55a:	b08a      	sub	sp, #40	; 0x28
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a562:	2300      	movs	r3, #0
 800a564:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10a      	bne.n	800a582 <vTaskDelayUntil+0x2a>
	__asm volatile
 800a56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	617b      	str	r3, [r7, #20]
}
 800a57e:	bf00      	nop
 800a580:	e7fe      	b.n	800a580 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10a      	bne.n	800a59e <vTaskDelayUntil+0x46>
	__asm volatile
 800a588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58c:	f383 8811 	msr	BASEPRI, r3
 800a590:	f3bf 8f6f 	isb	sy
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	613b      	str	r3, [r7, #16]
}
 800a59a:	bf00      	nop
 800a59c:	e7fe      	b.n	800a59c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a59e:	4b2a      	ldr	r3, [pc, #168]	; (800a648 <vTaskDelayUntil+0xf0>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00a      	beq.n	800a5bc <vTaskDelayUntil+0x64>
	__asm volatile
 800a5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	60fb      	str	r3, [r7, #12]
}
 800a5b8:	bf00      	nop
 800a5ba:	e7fe      	b.n	800a5ba <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a5bc:	f000 f8b4 	bl	800a728 <vTaskSuspendAll>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
<<<<<<< HEAD
 800a4c4:	4b22      	ldr	r3, [pc, #136]	; (800a550 <vTaskDelayUntil+0xf4>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	683a      	ldr	r2, [r7, #0]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6a3a      	ldr	r2, [r7, #32]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d20b      	bcs.n	800a4f6 <vTaskDelayUntil+0x9a>
=======
 800a5c0:	4b22      	ldr	r3, [pc, #136]	; (800a64c <vTaskDelayUntil+0xf4>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	683a      	ldr	r2, [r7, #0]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	6a3a      	ldr	r2, [r7, #32]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d20b      	bcs.n	800a5f2 <vTaskDelayUntil+0x9a>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
<<<<<<< HEAD
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	69fa      	ldr	r2, [r7, #28]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d211      	bcs.n	800a50c <vTaskDelayUntil+0xb0>
 800a4e8:	69fa      	ldr	r2, [r7, #28]
 800a4ea:	6a3b      	ldr	r3, [r7, #32]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d90d      	bls.n	800a50c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	627b      	str	r3, [r7, #36]	; 0x24
 800a4f4:	e00a      	b.n	800a50c <vTaskDelayUntil+0xb0>
=======
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	69fa      	ldr	r2, [r7, #28]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d211      	bcs.n	800a608 <vTaskDelayUntil+0xb0>
 800a5e4:	69fa      	ldr	r2, [r7, #28]
 800a5e6:	6a3b      	ldr	r3, [r7, #32]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d90d      	bls.n	800a608 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a5f0:	e00a      	b.n	800a608 <vTaskDelayUntil+0xb0>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
<<<<<<< HEAD
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	69fa      	ldr	r2, [r7, #28]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d303      	bcc.n	800a508 <vTaskDelayUntil+0xac>
 800a500:	69fa      	ldr	r2, [r7, #28]
 800a502:	6a3b      	ldr	r3, [r7, #32]
 800a504:	429a      	cmp	r2, r3
 800a506:	d901      	bls.n	800a50c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a508:	2301      	movs	r3, #1
 800a50a:	627b      	str	r3, [r7, #36]	; 0x24
=======
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	69fa      	ldr	r2, [r7, #28]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d303      	bcc.n	800a604 <vTaskDelayUntil+0xac>
 800a5fc:	69fa      	ldr	r2, [r7, #28]
 800a5fe:	6a3b      	ldr	r3, [r7, #32]
 800a600:	429a      	cmp	r2, r3
 800a602:	d901      	bls.n	800a608 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a604:	2301      	movs	r3, #1
 800a606:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
<<<<<<< HEAD
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	69fa      	ldr	r2, [r7, #28]
 800a510:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a514:	2b00      	cmp	r3, #0
 800a516:	d006      	beq.n	800a526 <vTaskDelayUntil+0xca>
=======
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	69fa      	ldr	r2, [r7, #28]
 800a60c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a610:	2b00      	cmp	r3, #0
 800a612:	d006      	beq.n	800a622 <vTaskDelayUntil+0xca>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
<<<<<<< HEAD
 800a518:	69fa      	ldr	r2, [r7, #28]
 800a51a:	6a3b      	ldr	r3, [r7, #32]
 800a51c:	1ad3      	subs	r3, r2, r3
 800a51e:	2100      	movs	r1, #0
 800a520:	4618      	mov	r0, r3
 800a522:	f000 fb93 	bl	800ac4c <prvAddCurrentTaskToDelayedList>
=======
 800a614:	69fa      	ldr	r2, [r7, #28]
 800a616:	6a3b      	ldr	r3, [r7, #32]
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	2100      	movs	r1, #0
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 fb93 	bl	800ad48 <prvAddCurrentTaskToDelayedList>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
<<<<<<< HEAD
 800a526:	f000 f88f 	bl	800a648 <xTaskResumeAll>
 800a52a:	61b8      	str	r0, [r7, #24]
=======
 800a622:	f000 f88f 	bl	800a744 <xTaskResumeAll>
 800a626:	61b8      	str	r0, [r7, #24]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
<<<<<<< HEAD
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d107      	bne.n	800a542 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a532:	4b08      	ldr	r3, [pc, #32]	; (800a554 <vTaskDelayUntil+0xf8>)
 800a534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a538:	601a      	str	r2, [r3, #0]
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	f3bf 8f6f 	isb	sy
=======
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d107      	bne.n	800a63e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a62e:	4b08      	ldr	r3, [pc, #32]	; (800a650 <vTaskDelayUntil+0xf8>)
 800a630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a634:	601a      	str	r2, [r3, #0]
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	f3bf 8f6f 	isb	sy
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
<<<<<<< HEAD
 800a542:	bf00      	nop
 800a544:	3728      	adds	r7, #40	; 0x28
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	20000920 	.word	0x20000920
 800a550:	200008fc 	.word	0x200008fc
 800a554:	e000ed04 	.word	0xe000ed04

0800a558 <vTaskStartScheduler>:
=======
 800a63e:	bf00      	nop
 800a640:	3728      	adds	r7, #40	; 0x28
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	20000924 	.word	0x20000924
 800a64c:	20000900 	.word	0x20000900
 800a650:	e000ed04 	.word	0xe000ed04

0800a654 <vTaskStartScheduler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
<<<<<<< HEAD
 800a558:	b580      	push	{r7, lr}
 800a55a:	b08a      	sub	sp, #40	; 0x28
 800a55c:	af04      	add	r7, sp, #16
=======
 800a654:	b580      	push	{r7, lr}
 800a656:	b08a      	sub	sp, #40	; 0x28
 800a658:	af04      	add	r7, sp, #16
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
<<<<<<< HEAD
 800a55e:	2300      	movs	r3, #0
 800a560:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a562:	2300      	movs	r3, #0
 800a564:	607b      	str	r3, [r7, #4]
=======
 800a65a:	2300      	movs	r3, #0
 800a65c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a65e:	2300      	movs	r3, #0
 800a660:	607b      	str	r3, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
<<<<<<< HEAD
 800a566:	463a      	mov	r2, r7
 800a568:	1d39      	adds	r1, r7, #4
 800a56a:	f107 0308 	add.w	r3, r7, #8
 800a56e:	4618      	mov	r0, r3
 800a570:	f7f7 f8be 	bl	80016f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a574:	6839      	ldr	r1, [r7, #0]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	68ba      	ldr	r2, [r7, #8]
 800a57a:	9202      	str	r2, [sp, #8]
 800a57c:	9301      	str	r3, [sp, #4]
 800a57e:	2300      	movs	r3, #0
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	2300      	movs	r3, #0
 800a584:	460a      	mov	r2, r1
 800a586:	4921      	ldr	r1, [pc, #132]	; (800a60c <vTaskStartScheduler+0xb4>)
 800a588:	4821      	ldr	r0, [pc, #132]	; (800a610 <vTaskStartScheduler+0xb8>)
 800a58a:	f7ff fdbc 	bl	800a106 <xTaskCreateStatic>
 800a58e:	4603      	mov	r3, r0
 800a590:	4a20      	ldr	r2, [pc, #128]	; (800a614 <vTaskStartScheduler+0xbc>)
 800a592:	6013      	str	r3, [r2, #0]
=======
 800a662:	463a      	mov	r2, r7
 800a664:	1d39      	adds	r1, r7, #4
 800a666:	f107 0308 	add.w	r3, r7, #8
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7f7 f8be 	bl	80017ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a670:	6839      	ldr	r1, [r7, #0]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	9202      	str	r2, [sp, #8]
 800a678:	9301      	str	r3, [sp, #4]
 800a67a:	2300      	movs	r3, #0
 800a67c:	9300      	str	r3, [sp, #0]
 800a67e:	2300      	movs	r3, #0
 800a680:	460a      	mov	r2, r1
 800a682:	4921      	ldr	r1, [pc, #132]	; (800a708 <vTaskStartScheduler+0xb4>)
 800a684:	4821      	ldr	r0, [pc, #132]	; (800a70c <vTaskStartScheduler+0xb8>)
 800a686:	f7ff fdbc 	bl	800a202 <xTaskCreateStatic>
 800a68a:	4603      	mov	r3, r0
 800a68c:	4a20      	ldr	r2, [pc, #128]	; (800a710 <vTaskStartScheduler+0xbc>)
 800a68e:	6013      	str	r3, [r2, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
<<<<<<< HEAD
 800a594:	4b1f      	ldr	r3, [pc, #124]	; (800a614 <vTaskStartScheduler+0xbc>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d002      	beq.n	800a5a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a59c:	2301      	movs	r3, #1
 800a59e:	617b      	str	r3, [r7, #20]
 800a5a0:	e001      	b.n	800a5a6 <vTaskStartScheduler+0x4e>
=======
 800a690:	4b1f      	ldr	r3, [pc, #124]	; (800a710 <vTaskStartScheduler+0xbc>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d002      	beq.n	800a69e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a698:	2301      	movs	r3, #1
 800a69a:	617b      	str	r3, [r7, #20]
 800a69c:	e001      	b.n	800a6a2 <vTaskStartScheduler+0x4e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		}
		else
		{
			xReturn = pdFAIL;
<<<<<<< HEAD
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	617b      	str	r3, [r7, #20]
=======
 800a69e:	2300      	movs	r3, #0
 800a6a0:	617b      	str	r3, [r7, #20]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
<<<<<<< HEAD
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d11b      	bne.n	800a5e4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800a5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	613b      	str	r3, [r7, #16]
}
 800a5be:	bf00      	nop
=======
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d11b      	bne.n	800a6e0 <vTaskStartScheduler+0x8c>
	__asm volatile
 800a6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ac:	f383 8811 	msr	BASEPRI, r3
 800a6b0:	f3bf 8f6f 	isb	sy
 800a6b4:	f3bf 8f4f 	dsb	sy
 800a6b8:	613b      	str	r3, [r7, #16]
}
 800a6ba:	bf00      	nop
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
<<<<<<< HEAD
 800a5c0:	4b15      	ldr	r3, [pc, #84]	; (800a618 <vTaskStartScheduler+0xc0>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	334c      	adds	r3, #76	; 0x4c
 800a5c6:	4a15      	ldr	r2, [pc, #84]	; (800a61c <vTaskStartScheduler+0xc4>)
 800a5c8:	6013      	str	r3, [r2, #0]
=======
 800a6bc:	4b15      	ldr	r3, [pc, #84]	; (800a714 <vTaskStartScheduler+0xc0>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	334c      	adds	r3, #76	; 0x4c
 800a6c2:	4a15      	ldr	r2, [pc, #84]	; (800a718 <vTaskStartScheduler+0xc4>)
 800a6c4:	6013      	str	r3, [r2, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 800a5ca:	4b15      	ldr	r3, [pc, #84]	; (800a620 <vTaskStartScheduler+0xc8>)
 800a5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a5d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a5d2:	4b14      	ldr	r3, [pc, #80]	; (800a624 <vTaskStartScheduler+0xcc>)
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a5d8:	4b13      	ldr	r3, [pc, #76]	; (800a628 <vTaskStartScheduler+0xd0>)
 800a5da:	2200      	movs	r2, #0
 800a5dc:	601a      	str	r2, [r3, #0]
=======
 800a6c6:	4b15      	ldr	r3, [pc, #84]	; (800a71c <vTaskStartScheduler+0xc8>)
 800a6c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a6ce:	4b14      	ldr	r3, [pc, #80]	; (800a720 <vTaskStartScheduler+0xcc>)
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a6d4:	4b13      	ldr	r3, [pc, #76]	; (800a724 <vTaskStartScheduler+0xd0>)
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
<<<<<<< HEAD
 800a5de:	f000 fc27 	bl	800ae30 <xPortStartScheduler>
=======
 800a6da:	f000 fc29 	bl	800af30 <xPortStartScheduler>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
<<<<<<< HEAD
 800a5e2:	e00e      	b.n	800a602 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ea:	d10a      	bne.n	800a602 <vTaskStartScheduler+0xaa>
	__asm volatile
 800a5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f0:	f383 8811 	msr	BASEPRI, r3
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	60fb      	str	r3, [r7, #12]
}
 800a5fe:	bf00      	nop
 800a600:	e7fe      	b.n	800a600 <vTaskStartScheduler+0xa8>
}
 800a602:	bf00      	nop
 800a604:	3718      	adds	r7, #24
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	0800c248 	.word	0x0800c248
 800a610:	0800aa99 	.word	0x0800aa99
 800a614:	2000091c 	.word	0x2000091c
 800a618:	200007f8 	.word	0x200007f8
 800a61c:	20000010 	.word	0x20000010
 800a620:	20000918 	.word	0x20000918
 800a624:	20000904 	.word	0x20000904
 800a628:	200008fc 	.word	0x200008fc

0800a62c <vTaskSuspendAll>:
=======
 800a6de:	e00e      	b.n	800a6fe <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e6:	d10a      	bne.n	800a6fe <vTaskStartScheduler+0xaa>
	__asm volatile
 800a6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ec:	f383 8811 	msr	BASEPRI, r3
 800a6f0:	f3bf 8f6f 	isb	sy
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	60fb      	str	r3, [r7, #12]
}
 800a6fa:	bf00      	nop
 800a6fc:	e7fe      	b.n	800a6fc <vTaskStartScheduler+0xa8>
}
 800a6fe:	bf00      	nop
 800a700:	3718      	adds	r7, #24
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	0800c348 	.word	0x0800c348
 800a70c:	0800ab95 	.word	0x0800ab95
 800a710:	20000920 	.word	0x20000920
 800a714:	200007fc 	.word	0x200007fc
 800a718:	20000010 	.word	0x20000010
 800a71c:	2000091c 	.word	0x2000091c
 800a720:	20000908 	.word	0x20000908
 800a724:	20000900 	.word	0x20000900

0800a728 <vTaskSuspendAll>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
<<<<<<< HEAD
 800a62c:	b480      	push	{r7}
 800a62e:	af00      	add	r7, sp, #0
=======
 800a728:	b480      	push	{r7}
 800a72a:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
<<<<<<< HEAD
 800a630:	4b04      	ldr	r3, [pc, #16]	; (800a644 <vTaskSuspendAll+0x18>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	3301      	adds	r3, #1
 800a636:	4a03      	ldr	r2, [pc, #12]	; (800a644 <vTaskSuspendAll+0x18>)
 800a638:	6013      	str	r3, [r2, #0]
=======
 800a72c:	4b04      	ldr	r3, [pc, #16]	; (800a740 <vTaskSuspendAll+0x18>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	3301      	adds	r3, #1
 800a732:	4a03      	ldr	r2, [pc, #12]	; (800a740 <vTaskSuspendAll+0x18>)
 800a734:	6013      	str	r3, [r2, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
<<<<<<< HEAD
 800a63a:	bf00      	nop
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr
 800a644:	20000920 	.word	0x20000920

0800a648 <xTaskResumeAll>:
=======
 800a736:	bf00      	nop
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr
 800a740:	20000924 	.word	0x20000924

0800a744 <xTaskResumeAll>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
<<<<<<< HEAD
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a64e:	2300      	movs	r3, #0
 800a650:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a652:	2300      	movs	r3, #0
 800a654:	60bb      	str	r3, [r7, #8]
=======
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a74a:	2300      	movs	r3, #0
 800a74c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a74e:	2300      	movs	r3, #0
 800a750:	60bb      	str	r3, [r7, #8]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
<<<<<<< HEAD
 800a656:	4b41      	ldr	r3, [pc, #260]	; (800a75c <xTaskResumeAll+0x114>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d10a      	bne.n	800a674 <xTaskResumeAll+0x2c>
	__asm volatile
 800a65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a662:	f383 8811 	msr	BASEPRI, r3
 800a666:	f3bf 8f6f 	isb	sy
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	603b      	str	r3, [r7, #0]
}
 800a670:	bf00      	nop
 800a672:	e7fe      	b.n	800a672 <xTaskResumeAll+0x2a>
=======
 800a752:	4b41      	ldr	r3, [pc, #260]	; (800a858 <xTaskResumeAll+0x114>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d10a      	bne.n	800a770 <xTaskResumeAll+0x2c>
	__asm volatile
 800a75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75e:	f383 8811 	msr	BASEPRI, r3
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	f3bf 8f4f 	dsb	sy
 800a76a:	603b      	str	r3, [r7, #0]
}
 800a76c:	bf00      	nop
 800a76e:	e7fe      	b.n	800a76e <xTaskResumeAll+0x2a>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
<<<<<<< HEAD
 800a674:	f000 fc7e 	bl	800af74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a678:	4b38      	ldr	r3, [pc, #224]	; (800a75c <xTaskResumeAll+0x114>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	3b01      	subs	r3, #1
 800a67e:	4a37      	ldr	r2, [pc, #220]	; (800a75c <xTaskResumeAll+0x114>)
 800a680:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a682:	4b36      	ldr	r3, [pc, #216]	; (800a75c <xTaskResumeAll+0x114>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d161      	bne.n	800a74e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a68a:	4b35      	ldr	r3, [pc, #212]	; (800a760 <xTaskResumeAll+0x118>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d05d      	beq.n	800a74e <xTaskResumeAll+0x106>
=======
 800a770:	f000 fc80 	bl	800b074 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a774:	4b38      	ldr	r3, [pc, #224]	; (800a858 <xTaskResumeAll+0x114>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	3b01      	subs	r3, #1
 800a77a:	4a37      	ldr	r2, [pc, #220]	; (800a858 <xTaskResumeAll+0x114>)
 800a77c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a77e:	4b36      	ldr	r3, [pc, #216]	; (800a858 <xTaskResumeAll+0x114>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d161      	bne.n	800a84a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a786:	4b35      	ldr	r3, [pc, #212]	; (800a85c <xTaskResumeAll+0x118>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d05d      	beq.n	800a84a <xTaskResumeAll+0x106>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
<<<<<<< HEAD
 800a692:	e02e      	b.n	800a6f2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a694:	4b33      	ldr	r3, [pc, #204]	; (800a764 <xTaskResumeAll+0x11c>)
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	3318      	adds	r3, #24
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7ff fbcd 	bl	8009e40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	3304      	adds	r3, #4
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7ff fbc8 	bl	8009e40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	409a      	lsls	r2, r3
 800a6b8:	4b2b      	ldr	r3, [pc, #172]	; (800a768 <xTaskResumeAll+0x120>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	4a2a      	ldr	r2, [pc, #168]	; (800a768 <xTaskResumeAll+0x120>)
 800a6c0:	6013      	str	r3, [r2, #0]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	4413      	add	r3, r2
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	4a27      	ldr	r2, [pc, #156]	; (800a76c <xTaskResumeAll+0x124>)
 800a6d0:	441a      	add	r2, r3
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	3304      	adds	r3, #4
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	4610      	mov	r0, r2
 800a6da:	f7ff fb54 	bl	8009d86 <vListInsertEnd>
=======
 800a78e:	e02e      	b.n	800a7ee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a790:	4b33      	ldr	r3, [pc, #204]	; (800a860 <xTaskResumeAll+0x11c>)
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	3318      	adds	r3, #24
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7ff fbcd 	bl	8009f3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	3304      	adds	r3, #4
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7ff fbc8 	bl	8009f3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	409a      	lsls	r2, r3
 800a7b4:	4b2b      	ldr	r3, [pc, #172]	; (800a864 <xTaskResumeAll+0x120>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	4a2a      	ldr	r2, [pc, #168]	; (800a864 <xTaskResumeAll+0x120>)
 800a7bc:	6013      	str	r3, [r2, #0]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	4413      	add	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	4a27      	ldr	r2, [pc, #156]	; (800a868 <xTaskResumeAll+0x124>)
 800a7cc:	441a      	add	r2, r3
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	3304      	adds	r3, #4
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	4610      	mov	r0, r2
 800a7d6:	f7ff fb54 	bl	8009e82 <vListInsertEnd>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e2:	4b23      	ldr	r3, [pc, #140]	; (800a770 <xTaskResumeAll+0x128>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d302      	bcc.n	800a6f2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a6ec:	4b21      	ldr	r3, [pc, #132]	; (800a774 <xTaskResumeAll+0x12c>)
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6f2:	4b1c      	ldr	r3, [pc, #112]	; (800a764 <xTaskResumeAll+0x11c>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1cc      	bne.n	800a694 <xTaskResumeAll+0x4c>
=======
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7de:	4b23      	ldr	r3, [pc, #140]	; (800a86c <xTaskResumeAll+0x128>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d302      	bcc.n	800a7ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a7e8:	4b21      	ldr	r3, [pc, #132]	; (800a870 <xTaskResumeAll+0x12c>)
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7ee:	4b1c      	ldr	r3, [pc, #112]	; (800a860 <xTaskResumeAll+0x11c>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d1cc      	bne.n	800a790 <xTaskResumeAll+0x4c>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
<<<<<<< HEAD
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d001      	beq.n	800a704 <xTaskResumeAll+0xbc>
=======
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d001      	beq.n	800a800 <xTaskResumeAll+0xbc>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
<<<<<<< HEAD
 800a700:	f000 fa84 	bl	800ac0c <prvResetNextTaskUnblockTime>
=======
 800a7fc:	f000 fa84 	bl	800ad08 <prvResetNextTaskUnblockTime>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
<<<<<<< HEAD
 800a704:	4b1c      	ldr	r3, [pc, #112]	; (800a778 <xTaskResumeAll+0x130>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d010      	beq.n	800a732 <xTaskResumeAll+0xea>
=======
 800a800:	4b1c      	ldr	r3, [pc, #112]	; (800a874 <xTaskResumeAll+0x130>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d010      	beq.n	800a82e <xTaskResumeAll+0xea>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 800a710:	f000 f846 	bl	800a7a0 <xTaskIncrementTick>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d002      	beq.n	800a720 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a71a:	4b16      	ldr	r3, [pc, #88]	; (800a774 <xTaskResumeAll+0x12c>)
 800a71c:	2201      	movs	r2, #1
 800a71e:	601a      	str	r2, [r3, #0]
=======
 800a80c:	f000 f846 	bl	800a89c <xTaskIncrementTick>
 800a810:	4603      	mov	r3, r0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d002      	beq.n	800a81c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a816:	4b16      	ldr	r3, [pc, #88]	; (800a870 <xTaskResumeAll+0x12c>)
 800a818:	2201      	movs	r2, #1
 800a81a:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
<<<<<<< HEAD
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	3b01      	subs	r3, #1
 800a724:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1f1      	bne.n	800a710 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a72c:	4b12      	ldr	r3, [pc, #72]	; (800a778 <xTaskResumeAll+0x130>)
 800a72e:	2200      	movs	r2, #0
 800a730:	601a      	str	r2, [r3, #0]
=======
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	3b01      	subs	r3, #1
 800a820:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1f1      	bne.n	800a80c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a828:	4b12      	ldr	r3, [pc, #72]	; (800a874 <xTaskResumeAll+0x130>)
 800a82a:	2200      	movs	r2, #0
 800a82c:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 800a732:	4b10      	ldr	r3, [pc, #64]	; (800a774 <xTaskResumeAll+0x12c>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d009      	beq.n	800a74e <xTaskResumeAll+0x106>
=======
 800a82e:	4b10      	ldr	r3, [pc, #64]	; (800a870 <xTaskResumeAll+0x12c>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d009      	beq.n	800a84a <xTaskResumeAll+0x106>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
<<<<<<< HEAD
 800a73a:	2301      	movs	r3, #1
 800a73c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a73e:	4b0f      	ldr	r3, [pc, #60]	; (800a77c <xTaskResumeAll+0x134>)
 800a740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a744:	601a      	str	r2, [r3, #0]
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	f3bf 8f6f 	isb	sy
=======
 800a836:	2301      	movs	r3, #1
 800a838:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a83a:	4b0f      	ldr	r3, [pc, #60]	; (800a878 <xTaskResumeAll+0x134>)
 800a83c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a840:	601a      	str	r2, [r3, #0]
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	f3bf 8f6f 	isb	sy
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
<<<<<<< HEAD
 800a74e:	f000 fc41 	bl	800afd4 <vPortExitCritical>

	return xAlreadyYielded;
 800a752:	68bb      	ldr	r3, [r7, #8]
}
 800a754:	4618      	mov	r0, r3
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	20000920 	.word	0x20000920
 800a760:	200008f8 	.word	0x200008f8
 800a764:	200008b8 	.word	0x200008b8
 800a768:	20000900 	.word	0x20000900
 800a76c:	200007fc 	.word	0x200007fc
 800a770:	200007f8 	.word	0x200007f8
 800a774:	2000090c 	.word	0x2000090c
 800a778:	20000908 	.word	0x20000908
 800a77c:	e000ed04 	.word	0xe000ed04

0800a780 <xTaskGetTickCount>:
=======
 800a84a:	f000 fc43 	bl	800b0d4 <vPortExitCritical>

	return xAlreadyYielded;
 800a84e:	68bb      	ldr	r3, [r7, #8]
}
 800a850:	4618      	mov	r0, r3
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	20000924 	.word	0x20000924
 800a85c:	200008fc 	.word	0x200008fc
 800a860:	200008bc 	.word	0x200008bc
 800a864:	20000904 	.word	0x20000904
 800a868:	20000800 	.word	0x20000800
 800a86c:	200007fc 	.word	0x200007fc
 800a870:	20000910 	.word	0x20000910
 800a874:	2000090c 	.word	0x2000090c
 800a878:	e000ed04 	.word	0xe000ed04

0800a87c <xTaskGetTickCount>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
<<<<<<< HEAD
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
=======
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
<<<<<<< HEAD
 800a786:	4b05      	ldr	r3, [pc, #20]	; (800a79c <xTaskGetTickCount+0x1c>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	607b      	str	r3, [r7, #4]
=======
 800a882:	4b05      	ldr	r3, [pc, #20]	; (800a898 <xTaskGetTickCount+0x1c>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	607b      	str	r3, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
<<<<<<< HEAD
 800a78c:	687b      	ldr	r3, [r7, #4]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	370c      	adds	r7, #12
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	200008fc 	.word	0x200008fc

0800a7a0 <xTaskIncrementTick>:
=======
 800a888:	687b      	ldr	r3, [r7, #4]
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	370c      	adds	r7, #12
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	20000900 	.word	0x20000900

0800a89c <xTaskIncrementTick>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
<<<<<<< HEAD
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	617b      	str	r3, [r7, #20]
=======
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b086      	sub	sp, #24
 800a8a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	617b      	str	r3, [r7, #20]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
<<<<<<< HEAD
 800a7aa:	4b4e      	ldr	r3, [pc, #312]	; (800a8e4 <xTaskIncrementTick+0x144>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f040 808e 	bne.w	800a8d0 <xTaskIncrementTick+0x130>
=======
 800a8a6:	4b4e      	ldr	r3, [pc, #312]	; (800a9e0 <xTaskIncrementTick+0x144>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	f040 808e 	bne.w	800a9cc <xTaskIncrementTick+0x130>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
<<<<<<< HEAD
 800a7b4:	4b4c      	ldr	r3, [pc, #304]	; (800a8e8 <xTaskIncrementTick+0x148>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	613b      	str	r3, [r7, #16]
=======
 800a8b0:	4b4c      	ldr	r3, [pc, #304]	; (800a9e4 <xTaskIncrementTick+0x148>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	613b      	str	r3, [r7, #16]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
<<<<<<< HEAD
 800a7bc:	4a4a      	ldr	r2, [pc, #296]	; (800a8e8 <xTaskIncrementTick+0x148>)
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d120      	bne.n	800a80a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a7c8:	4b48      	ldr	r3, [pc, #288]	; (800a8ec <xTaskIncrementTick+0x14c>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d00a      	beq.n	800a7e8 <xTaskIncrementTick+0x48>
	__asm volatile
 800a7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d6:	f383 8811 	msr	BASEPRI, r3
 800a7da:	f3bf 8f6f 	isb	sy
 800a7de:	f3bf 8f4f 	dsb	sy
 800a7e2:	603b      	str	r3, [r7, #0]
}
 800a7e4:	bf00      	nop
 800a7e6:	e7fe      	b.n	800a7e6 <xTaskIncrementTick+0x46>
 800a7e8:	4b40      	ldr	r3, [pc, #256]	; (800a8ec <xTaskIncrementTick+0x14c>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	60fb      	str	r3, [r7, #12]
 800a7ee:	4b40      	ldr	r3, [pc, #256]	; (800a8f0 <xTaskIncrementTick+0x150>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a3e      	ldr	r2, [pc, #248]	; (800a8ec <xTaskIncrementTick+0x14c>)
 800a7f4:	6013      	str	r3, [r2, #0]
 800a7f6:	4a3e      	ldr	r2, [pc, #248]	; (800a8f0 <xTaskIncrementTick+0x150>)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6013      	str	r3, [r2, #0]
 800a7fc:	4b3d      	ldr	r3, [pc, #244]	; (800a8f4 <xTaskIncrementTick+0x154>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	3301      	adds	r3, #1
 800a802:	4a3c      	ldr	r2, [pc, #240]	; (800a8f4 <xTaskIncrementTick+0x154>)
 800a804:	6013      	str	r3, [r2, #0]
 800a806:	f000 fa01 	bl	800ac0c <prvResetNextTaskUnblockTime>
=======
 800a8b8:	4a4a      	ldr	r2, [pc, #296]	; (800a9e4 <xTaskIncrementTick+0x148>)
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d120      	bne.n	800a906 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a8c4:	4b48      	ldr	r3, [pc, #288]	; (800a9e8 <xTaskIncrementTick+0x14c>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00a      	beq.n	800a8e4 <xTaskIncrementTick+0x48>
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	603b      	str	r3, [r7, #0]
}
 800a8e0:	bf00      	nop
 800a8e2:	e7fe      	b.n	800a8e2 <xTaskIncrementTick+0x46>
 800a8e4:	4b40      	ldr	r3, [pc, #256]	; (800a9e8 <xTaskIncrementTick+0x14c>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	60fb      	str	r3, [r7, #12]
 800a8ea:	4b40      	ldr	r3, [pc, #256]	; (800a9ec <xTaskIncrementTick+0x150>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a3e      	ldr	r2, [pc, #248]	; (800a9e8 <xTaskIncrementTick+0x14c>)
 800a8f0:	6013      	str	r3, [r2, #0]
 800a8f2:	4a3e      	ldr	r2, [pc, #248]	; (800a9ec <xTaskIncrementTick+0x150>)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6013      	str	r3, [r2, #0]
 800a8f8:	4b3d      	ldr	r3, [pc, #244]	; (800a9f0 <xTaskIncrementTick+0x154>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	4a3c      	ldr	r2, [pc, #240]	; (800a9f0 <xTaskIncrementTick+0x154>)
 800a900:	6013      	str	r3, [r2, #0]
 800a902:	f000 fa01 	bl	800ad08 <prvResetNextTaskUnblockTime>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
<<<<<<< HEAD
 800a80a:	4b3b      	ldr	r3, [pc, #236]	; (800a8f8 <xTaskIncrementTick+0x158>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	693a      	ldr	r2, [r7, #16]
 800a810:	429a      	cmp	r2, r3
 800a812:	d348      	bcc.n	800a8a6 <xTaskIncrementTick+0x106>
=======
 800a906:	4b3b      	ldr	r3, [pc, #236]	; (800a9f4 <xTaskIncrementTick+0x158>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	693a      	ldr	r2, [r7, #16]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d348      	bcc.n	800a9a2 <xTaskIncrementTick+0x106>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
<<<<<<< HEAD
 800a814:	4b35      	ldr	r3, [pc, #212]	; (800a8ec <xTaskIncrementTick+0x14c>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d104      	bne.n	800a828 <xTaskIncrementTick+0x88>
=======
 800a910:	4b35      	ldr	r3, [pc, #212]	; (800a9e8 <xTaskIncrementTick+0x14c>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d104      	bne.n	800a924 <xTaskIncrementTick+0x88>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
<<<<<<< HEAD
 800a81e:	4b36      	ldr	r3, [pc, #216]	; (800a8f8 <xTaskIncrementTick+0x158>)
 800a820:	f04f 32ff 	mov.w	r2, #4294967295
 800a824:	601a      	str	r2, [r3, #0]
					break;
 800a826:	e03e      	b.n	800a8a6 <xTaskIncrementTick+0x106>
=======
 800a91a:	4b36      	ldr	r3, [pc, #216]	; (800a9f4 <xTaskIncrementTick+0x158>)
 800a91c:	f04f 32ff 	mov.w	r2, #4294967295
 800a920:	601a      	str	r2, [r3, #0]
					break;
 800a922:	e03e      	b.n	800a9a2 <xTaskIncrementTick+0x106>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 800a828:	4b30      	ldr	r3, [pc, #192]	; (800a8ec <xTaskIncrementTick+0x14c>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a838:	693a      	ldr	r2, [r7, #16]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d203      	bcs.n	800a848 <xTaskIncrementTick+0xa8>
=======
 800a924:	4b30      	ldr	r3, [pc, #192]	; (800a9e8 <xTaskIncrementTick+0x14c>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	68db      	ldr	r3, [r3, #12]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d203      	bcs.n	800a944 <xTaskIncrementTick+0xa8>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
<<<<<<< HEAD
 800a840:	4a2d      	ldr	r2, [pc, #180]	; (800a8f8 <xTaskIncrementTick+0x158>)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a846:	e02e      	b.n	800a8a6 <xTaskIncrementTick+0x106>
=======
 800a93c:	4a2d      	ldr	r2, [pc, #180]	; (800a9f4 <xTaskIncrementTick+0x158>)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a942:	e02e      	b.n	800a9a2 <xTaskIncrementTick+0x106>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
<<<<<<< HEAD
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	3304      	adds	r3, #4
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7ff faf7 	bl	8009e40 <uxListRemove>
=======
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	3304      	adds	r3, #4
 800a948:	4618      	mov	r0, r3
 800a94a:	f7ff faf7 	bl	8009f3c <uxListRemove>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
<<<<<<< HEAD
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a856:	2b00      	cmp	r3, #0
 800a858:	d004      	beq.n	800a864 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	3318      	adds	r3, #24
 800a85e:	4618      	mov	r0, r3
 800a860:	f7ff faee 	bl	8009e40 <uxListRemove>
=======
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a952:	2b00      	cmp	r3, #0
 800a954:	d004      	beq.n	800a960 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	3318      	adds	r3, #24
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7ff faee 	bl	8009f3c <uxListRemove>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a868:	2201      	movs	r2, #1
 800a86a:	409a      	lsls	r2, r3
 800a86c:	4b23      	ldr	r3, [pc, #140]	; (800a8fc <xTaskIncrementTick+0x15c>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4313      	orrs	r3, r2
 800a872:	4a22      	ldr	r2, [pc, #136]	; (800a8fc <xTaskIncrementTick+0x15c>)
 800a874:	6013      	str	r3, [r2, #0]
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a87a:	4613      	mov	r3, r2
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	4413      	add	r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	4a1f      	ldr	r2, [pc, #124]	; (800a900 <xTaskIncrementTick+0x160>)
 800a884:	441a      	add	r2, r3
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	3304      	adds	r3, #4
 800a88a:	4619      	mov	r1, r3
 800a88c:	4610      	mov	r0, r2
 800a88e:	f7ff fa7a 	bl	8009d86 <vListInsertEnd>
=======
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a964:	2201      	movs	r2, #1
 800a966:	409a      	lsls	r2, r3
 800a968:	4b23      	ldr	r3, [pc, #140]	; (800a9f8 <xTaskIncrementTick+0x15c>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	4a22      	ldr	r2, [pc, #136]	; (800a9f8 <xTaskIncrementTick+0x15c>)
 800a970:	6013      	str	r3, [r2, #0]
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a976:	4613      	mov	r3, r2
 800a978:	009b      	lsls	r3, r3, #2
 800a97a:	4413      	add	r3, r2
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	4a1f      	ldr	r2, [pc, #124]	; (800a9fc <xTaskIncrementTick+0x160>)
 800a980:	441a      	add	r2, r3
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	3304      	adds	r3, #4
 800a986:	4619      	mov	r1, r3
 800a988:	4610      	mov	r0, r2
 800a98a:	f7ff fa7a 	bl	8009e82 <vListInsertEnd>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
<<<<<<< HEAD
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a896:	4b1b      	ldr	r3, [pc, #108]	; (800a904 <xTaskIncrementTick+0x164>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d3b9      	bcc.n	800a814 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8a4:	e7b6      	b.n	800a814 <xTaskIncrementTick+0x74>
=======
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a992:	4b1b      	ldr	r3, [pc, #108]	; (800aa00 <xTaskIncrementTick+0x164>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a998:	429a      	cmp	r2, r3
 800a99a:	d3b9      	bcc.n	800a910 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a99c:	2301      	movs	r3, #1
 800a99e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9a0:	e7b6      	b.n	800a910 <xTaskIncrementTick+0x74>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 800a8a6:	4b17      	ldr	r3, [pc, #92]	; (800a904 <xTaskIncrementTick+0x164>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ac:	4914      	ldr	r1, [pc, #80]	; (800a900 <xTaskIncrementTick+0x160>)
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	4413      	add	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	440b      	add	r3, r1
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d901      	bls.n	800a8c2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	617b      	str	r3, [r7, #20]
=======
 800a9a2:	4b17      	ldr	r3, [pc, #92]	; (800aa00 <xTaskIncrementTick+0x164>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a8:	4914      	ldr	r1, [pc, #80]	; (800a9fc <xTaskIncrementTick+0x160>)
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	009b      	lsls	r3, r3, #2
 800a9ae:	4413      	add	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	440b      	add	r3, r1
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d901      	bls.n	800a9be <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	617b      	str	r3, [r7, #20]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
<<<<<<< HEAD
 800a8c2:	4b11      	ldr	r3, [pc, #68]	; (800a908 <xTaskIncrementTick+0x168>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d007      	beq.n	800a8da <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	617b      	str	r3, [r7, #20]
 800a8ce:	e004      	b.n	800a8da <xTaskIncrementTick+0x13a>
=======
 800a9be:	4b11      	ldr	r3, [pc, #68]	; (800aa04 <xTaskIncrementTick+0x168>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d007      	beq.n	800a9d6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	617b      	str	r3, [r7, #20]
 800a9ca:	e004      	b.n	800a9d6 <xTaskIncrementTick+0x13a>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
<<<<<<< HEAD
 800a8d0:	4b0e      	ldr	r3, [pc, #56]	; (800a90c <xTaskIncrementTick+0x16c>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	4a0d      	ldr	r2, [pc, #52]	; (800a90c <xTaskIncrementTick+0x16c>)
 800a8d8:	6013      	str	r3, [r2, #0]
=======
 800a9cc:	4b0e      	ldr	r3, [pc, #56]	; (800aa08 <xTaskIncrementTick+0x16c>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	4a0d      	ldr	r2, [pc, #52]	; (800aa08 <xTaskIncrementTick+0x16c>)
 800a9d4:	6013      	str	r3, [r2, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
<<<<<<< HEAD
 800a8da:	697b      	ldr	r3, [r7, #20]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3718      	adds	r7, #24
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	20000920 	.word	0x20000920
 800a8e8:	200008fc 	.word	0x200008fc
 800a8ec:	200008b0 	.word	0x200008b0
 800a8f0:	200008b4 	.word	0x200008b4
 800a8f4:	20000910 	.word	0x20000910
 800a8f8:	20000918 	.word	0x20000918
 800a8fc:	20000900 	.word	0x20000900
 800a900:	200007fc 	.word	0x200007fc
 800a904:	200007f8 	.word	0x200007f8
 800a908:	2000090c 	.word	0x2000090c
 800a90c:	20000908 	.word	0x20000908

0800a910 <vTaskSwitchContext>:
=======
 800a9d6:	697b      	ldr	r3, [r7, #20]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3718      	adds	r7, #24
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	20000924 	.word	0x20000924
 800a9e4:	20000900 	.word	0x20000900
 800a9e8:	200008b4 	.word	0x200008b4
 800a9ec:	200008b8 	.word	0x200008b8
 800a9f0:	20000914 	.word	0x20000914
 800a9f4:	2000091c 	.word	0x2000091c
 800a9f8:	20000904 	.word	0x20000904
 800a9fc:	20000800 	.word	0x20000800
 800aa00:	200007fc 	.word	0x200007fc
 800aa04:	20000910 	.word	0x20000910
 800aa08:	2000090c 	.word	0x2000090c

0800aa0c <vTaskSwitchContext>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
<<<<<<< HEAD
 800a910:	b480      	push	{r7}
 800a912:	b087      	sub	sp, #28
 800a914:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a916:	4b29      	ldr	r3, [pc, #164]	; (800a9bc <vTaskSwitchContext+0xac>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d003      	beq.n	800a926 <vTaskSwitchContext+0x16>
=======
 800aa0c:	b480      	push	{r7}
 800aa0e:	b087      	sub	sp, #28
 800aa10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa12:	4b29      	ldr	r3, [pc, #164]	; (800aab8 <vTaskSwitchContext+0xac>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d003      	beq.n	800aa22 <vTaskSwitchContext+0x16>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 800a91e:	4b28      	ldr	r3, [pc, #160]	; (800a9c0 <vTaskSwitchContext+0xb0>)
 800a920:	2201      	movs	r2, #1
 800a922:	601a      	str	r2, [r3, #0]
=======
 800aa1a:	4b28      	ldr	r3, [pc, #160]	; (800aabc <vTaskSwitchContext+0xb0>)
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
<<<<<<< HEAD
 800a924:	e044      	b.n	800a9b0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a926:	4b26      	ldr	r3, [pc, #152]	; (800a9c0 <vTaskSwitchContext+0xb0>)
 800a928:	2200      	movs	r2, #0
 800a92a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a92c:	4b25      	ldr	r3, [pc, #148]	; (800a9c4 <vTaskSwitchContext+0xb4>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	fab3 f383 	clz	r3, r3
 800a938:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a93a:	7afb      	ldrb	r3, [r7, #11]
 800a93c:	f1c3 031f 	rsb	r3, r3, #31
 800a940:	617b      	str	r3, [r7, #20]
 800a942:	4921      	ldr	r1, [pc, #132]	; (800a9c8 <vTaskSwitchContext+0xb8>)
 800a944:	697a      	ldr	r2, [r7, #20]
 800a946:	4613      	mov	r3, r2
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	4413      	add	r3, r2
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	440b      	add	r3, r1
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d10a      	bne.n	800a96c <vTaskSwitchContext+0x5c>
	__asm volatile
 800a956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95a:	f383 8811 	msr	BASEPRI, r3
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	607b      	str	r3, [r7, #4]
}
 800a968:	bf00      	nop
 800a96a:	e7fe      	b.n	800a96a <vTaskSwitchContext+0x5a>
 800a96c:	697a      	ldr	r2, [r7, #20]
 800a96e:	4613      	mov	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	4413      	add	r3, r2
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	4a14      	ldr	r2, [pc, #80]	; (800a9c8 <vTaskSwitchContext+0xb8>)
 800a978:	4413      	add	r3, r2
 800a97a:	613b      	str	r3, [r7, #16]
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	685a      	ldr	r2, [r3, #4]
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	605a      	str	r2, [r3, #4]
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	685a      	ldr	r2, [r3, #4]
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	3308      	adds	r3, #8
 800a98e:	429a      	cmp	r2, r3
 800a990:	d104      	bne.n	800a99c <vTaskSwitchContext+0x8c>
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	685a      	ldr	r2, [r3, #4]
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	605a      	str	r2, [r3, #4]
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	4a0a      	ldr	r2, [pc, #40]	; (800a9cc <vTaskSwitchContext+0xbc>)
 800a9a4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a9a6:	4b09      	ldr	r3, [pc, #36]	; (800a9cc <vTaskSwitchContext+0xbc>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	334c      	adds	r3, #76	; 0x4c
 800a9ac:	4a08      	ldr	r2, [pc, #32]	; (800a9d0 <vTaskSwitchContext+0xc0>)
 800a9ae:	6013      	str	r3, [r2, #0]
}
 800a9b0:	bf00      	nop
 800a9b2:	371c      	adds	r7, #28
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	20000920 	.word	0x20000920
 800a9c0:	2000090c 	.word	0x2000090c
 800a9c4:	20000900 	.word	0x20000900
 800a9c8:	200007fc 	.word	0x200007fc
 800a9cc:	200007f8 	.word	0x200007f8
 800a9d0:	20000010 	.word	0x20000010

0800a9d4 <xTaskRemoveFromEventList>:
=======
 800aa20:	e044      	b.n	800aaac <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800aa22:	4b26      	ldr	r3, [pc, #152]	; (800aabc <vTaskSwitchContext+0xb0>)
 800aa24:	2200      	movs	r2, #0
 800aa26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa28:	4b25      	ldr	r3, [pc, #148]	; (800aac0 <vTaskSwitchContext+0xb4>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	fab3 f383 	clz	r3, r3
 800aa34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800aa36:	7afb      	ldrb	r3, [r7, #11]
 800aa38:	f1c3 031f 	rsb	r3, r3, #31
 800aa3c:	617b      	str	r3, [r7, #20]
 800aa3e:	4921      	ldr	r1, [pc, #132]	; (800aac4 <vTaskSwitchContext+0xb8>)
 800aa40:	697a      	ldr	r2, [r7, #20]
 800aa42:	4613      	mov	r3, r2
 800aa44:	009b      	lsls	r3, r3, #2
 800aa46:	4413      	add	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	440b      	add	r3, r1
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d10a      	bne.n	800aa68 <vTaskSwitchContext+0x5c>
	__asm volatile
 800aa52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa56:	f383 8811 	msr	BASEPRI, r3
 800aa5a:	f3bf 8f6f 	isb	sy
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	607b      	str	r3, [r7, #4]
}
 800aa64:	bf00      	nop
 800aa66:	e7fe      	b.n	800aa66 <vTaskSwitchContext+0x5a>
 800aa68:	697a      	ldr	r2, [r7, #20]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	4413      	add	r3, r2
 800aa70:	009b      	lsls	r3, r3, #2
 800aa72:	4a14      	ldr	r2, [pc, #80]	; (800aac4 <vTaskSwitchContext+0xb8>)
 800aa74:	4413      	add	r3, r2
 800aa76:	613b      	str	r3, [r7, #16]
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	685a      	ldr	r2, [r3, #4]
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	605a      	str	r2, [r3, #4]
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	685a      	ldr	r2, [r3, #4]
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	3308      	adds	r3, #8
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d104      	bne.n	800aa98 <vTaskSwitchContext+0x8c>
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	685a      	ldr	r2, [r3, #4]
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	605a      	str	r2, [r3, #4]
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	4a0a      	ldr	r2, [pc, #40]	; (800aac8 <vTaskSwitchContext+0xbc>)
 800aaa0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aaa2:	4b09      	ldr	r3, [pc, #36]	; (800aac8 <vTaskSwitchContext+0xbc>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	334c      	adds	r3, #76	; 0x4c
 800aaa8:	4a08      	ldr	r2, [pc, #32]	; (800aacc <vTaskSwitchContext+0xc0>)
 800aaaa:	6013      	str	r3, [r2, #0]
}
 800aaac:	bf00      	nop
 800aaae:	371c      	adds	r7, #28
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	20000924 	.word	0x20000924
 800aabc:	20000910 	.word	0x20000910
 800aac0:	20000904 	.word	0x20000904
 800aac4:	20000800 	.word	0x20000800
 800aac8:	200007fc 	.word	0x200007fc
 800aacc:	20000010 	.word	0x20000010

0800aad0 <xTaskRemoveFromEventList>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
<<<<<<< HEAD
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b086      	sub	sp, #24
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
=======
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b086      	sub	sp, #24
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
<<<<<<< HEAD
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d10a      	bne.n	800aa00 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ee:	f383 8811 	msr	BASEPRI, r3
 800a9f2:	f3bf 8f6f 	isb	sy
 800a9f6:	f3bf 8f4f 	dsb	sy
 800a9fa:	60fb      	str	r3, [r7, #12]
}
 800a9fc:	bf00      	nop
 800a9fe:	e7fe      	b.n	800a9fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	3318      	adds	r3, #24
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7ff fa1b 	bl	8009e40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa0a:	4b1d      	ldr	r3, [pc, #116]	; (800aa80 <xTaskRemoveFromEventList+0xac>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d11c      	bne.n	800aa4c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	3304      	adds	r3, #4
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7ff fa12 	bl	8009e40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa20:	2201      	movs	r2, #1
 800aa22:	409a      	lsls	r2, r3
 800aa24:	4b17      	ldr	r3, [pc, #92]	; (800aa84 <xTaskRemoveFromEventList+0xb0>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	4a16      	ldr	r2, [pc, #88]	; (800aa84 <xTaskRemoveFromEventList+0xb0>)
 800aa2c:	6013      	str	r3, [r2, #0]
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa32:	4613      	mov	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	4413      	add	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	4a13      	ldr	r2, [pc, #76]	; (800aa88 <xTaskRemoveFromEventList+0xb4>)
 800aa3c:	441a      	add	r2, r3
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	3304      	adds	r3, #4
 800aa42:	4619      	mov	r1, r3
 800aa44:	4610      	mov	r0, r2
 800aa46:	f7ff f99e 	bl	8009d86 <vListInsertEnd>
 800aa4a:	e005      	b.n	800aa58 <xTaskRemoveFromEventList+0x84>
=======
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	68db      	ldr	r3, [r3, #12]
 800aade:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d10a      	bne.n	800aafc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaea:	f383 8811 	msr	BASEPRI, r3
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	f3bf 8f4f 	dsb	sy
 800aaf6:	60fb      	str	r3, [r7, #12]
}
 800aaf8:	bf00      	nop
 800aafa:	e7fe      	b.n	800aafa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	3318      	adds	r3, #24
 800ab00:	4618      	mov	r0, r3
 800ab02:	f7ff fa1b 	bl	8009f3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab06:	4b1d      	ldr	r3, [pc, #116]	; (800ab7c <xTaskRemoveFromEventList+0xac>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d11c      	bne.n	800ab48 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	3304      	adds	r3, #4
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7ff fa12 	bl	8009f3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	409a      	lsls	r2, r3
 800ab20:	4b17      	ldr	r3, [pc, #92]	; (800ab80 <xTaskRemoveFromEventList+0xb0>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4313      	orrs	r3, r2
 800ab26:	4a16      	ldr	r2, [pc, #88]	; (800ab80 <xTaskRemoveFromEventList+0xb0>)
 800ab28:	6013      	str	r3, [r2, #0]
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab2e:	4613      	mov	r3, r2
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4413      	add	r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	4a13      	ldr	r2, [pc, #76]	; (800ab84 <xTaskRemoveFromEventList+0xb4>)
 800ab38:	441a      	add	r2, r3
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	3304      	adds	r3, #4
 800ab3e:	4619      	mov	r1, r3
 800ab40:	4610      	mov	r0, r2
 800ab42:	f7ff f99e 	bl	8009e82 <vListInsertEnd>
 800ab46:	e005      	b.n	800ab54 <xTaskRemoveFromEventList+0x84>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
<<<<<<< HEAD
 800aa4c:	693b      	ldr	r3, [r7, #16]
 800aa4e:	3318      	adds	r3, #24
 800aa50:	4619      	mov	r1, r3
 800aa52:	480e      	ldr	r0, [pc, #56]	; (800aa8c <xTaskRemoveFromEventList+0xb8>)
 800aa54:	f7ff f997 	bl	8009d86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa5c:	4b0c      	ldr	r3, [pc, #48]	; (800aa90 <xTaskRemoveFromEventList+0xbc>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d905      	bls.n	800aa72 <xTaskRemoveFromEventList+0x9e>
=======
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	3318      	adds	r3, #24
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	480e      	ldr	r0, [pc, #56]	; (800ab88 <xTaskRemoveFromEventList+0xb8>)
 800ab50:	f7ff f997 	bl	8009e82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab58:	4b0c      	ldr	r3, [pc, #48]	; (800ab8c <xTaskRemoveFromEventList+0xbc>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d905      	bls.n	800ab6e <xTaskRemoveFromEventList+0x9e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
<<<<<<< HEAD
 800aa66:	2301      	movs	r3, #1
 800aa68:	617b      	str	r3, [r7, #20]
=======
 800ab62:	2301      	movs	r3, #1
 800ab64:	617b      	str	r3, [r7, #20]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
<<<<<<< HEAD
 800aa6a:	4b0a      	ldr	r3, [pc, #40]	; (800aa94 <xTaskRemoveFromEventList+0xc0>)
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	601a      	str	r2, [r3, #0]
 800aa70:	e001      	b.n	800aa76 <xTaskRemoveFromEventList+0xa2>
=======
 800ab66:	4b0a      	ldr	r3, [pc, #40]	; (800ab90 <xTaskRemoveFromEventList+0xc0>)
 800ab68:	2201      	movs	r2, #1
 800ab6a:	601a      	str	r2, [r3, #0]
 800ab6c:	e001      	b.n	800ab72 <xTaskRemoveFromEventList+0xa2>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	}
	else
	{
		xReturn = pdFALSE;
<<<<<<< HEAD
 800aa72:	2300      	movs	r3, #0
 800aa74:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aa76:	697b      	ldr	r3, [r7, #20]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3718      	adds	r7, #24
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	20000920 	.word	0x20000920
 800aa84:	20000900 	.word	0x20000900
 800aa88:	200007fc 	.word	0x200007fc
 800aa8c:	200008b8 	.word	0x200008b8
 800aa90:	200007f8 	.word	0x200007f8
 800aa94:	2000090c 	.word	0x2000090c

0800aa98 <prvIdleTask>:
=======
 800ab6e:	2300      	movs	r3, #0
 800ab70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ab72:	697b      	ldr	r3, [r7, #20]
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3718      	adds	r7, #24
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	20000924 	.word	0x20000924
 800ab80:	20000904 	.word	0x20000904
 800ab84:	20000800 	.word	0x20000800
 800ab88:	200008bc 	.word	0x200008bc
 800ab8c:	200007fc 	.word	0x200007fc
 800ab90:	20000910 	.word	0x20000910

0800ab94 <prvIdleTask>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
<<<<<<< HEAD
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
=======
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
<<<<<<< HEAD
 800aaa0:	f000 f852 	bl	800ab48 <prvCheckTasksWaitingTermination>
=======
 800ab9c:	f000 f852 	bl	800ac44 <prvCheckTasksWaitingTermination>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
<<<<<<< HEAD
 800aaa4:	4b06      	ldr	r3, [pc, #24]	; (800aac0 <prvIdleTask+0x28>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d9f9      	bls.n	800aaa0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aaac:	4b05      	ldr	r3, [pc, #20]	; (800aac4 <prvIdleTask+0x2c>)
 800aaae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aab2:	601a      	str	r2, [r3, #0]
 800aab4:	f3bf 8f4f 	dsb	sy
 800aab8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aabc:	e7f0      	b.n	800aaa0 <prvIdleTask+0x8>
 800aabe:	bf00      	nop
 800aac0:	200007fc 	.word	0x200007fc
 800aac4:	e000ed04 	.word	0xe000ed04

0800aac8 <prvInitialiseTaskLists>:
=======
 800aba0:	4b06      	ldr	r3, [pc, #24]	; (800abbc <prvIdleTask+0x28>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d9f9      	bls.n	800ab9c <prvIdleTask+0x8>
			{
				taskYIELD();
 800aba8:	4b05      	ldr	r3, [pc, #20]	; (800abc0 <prvIdleTask+0x2c>)
 800abaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abae:	601a      	str	r2, [r3, #0]
 800abb0:	f3bf 8f4f 	dsb	sy
 800abb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800abb8:	e7f0      	b.n	800ab9c <prvIdleTask+0x8>
 800abba:	bf00      	nop
 800abbc:	20000800 	.word	0x20000800
 800abc0:	e000ed04 	.word	0xe000ed04

0800abc4 <prvInitialiseTaskLists>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
<<<<<<< HEAD
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aace:	2300      	movs	r3, #0
 800aad0:	607b      	str	r3, [r7, #4]
 800aad2:	e00c      	b.n	800aaee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	4613      	mov	r3, r2
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	4413      	add	r3, r2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	4a12      	ldr	r2, [pc, #72]	; (800ab28 <prvInitialiseTaskLists+0x60>)
 800aae0:	4413      	add	r3, r2
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7ff f922 	bl	8009d2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	3301      	adds	r3, #1
 800aaec:	607b      	str	r3, [r7, #4]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2b06      	cmp	r3, #6
 800aaf2:	d9ef      	bls.n	800aad4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aaf4:	480d      	ldr	r0, [pc, #52]	; (800ab2c <prvInitialiseTaskLists+0x64>)
 800aaf6:	f7ff f919 	bl	8009d2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aafa:	480d      	ldr	r0, [pc, #52]	; (800ab30 <prvInitialiseTaskLists+0x68>)
 800aafc:	f7ff f916 	bl	8009d2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ab00:	480c      	ldr	r0, [pc, #48]	; (800ab34 <prvInitialiseTaskLists+0x6c>)
 800ab02:	f7ff f913 	bl	8009d2c <vListInitialise>
=======
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abca:	2300      	movs	r3, #0
 800abcc:	607b      	str	r3, [r7, #4]
 800abce:	e00c      	b.n	800abea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	4613      	mov	r3, r2
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	4413      	add	r3, r2
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	4a12      	ldr	r2, [pc, #72]	; (800ac24 <prvInitialiseTaskLists+0x60>)
 800abdc:	4413      	add	r3, r2
 800abde:	4618      	mov	r0, r3
 800abe0:	f7ff f922 	bl	8009e28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	3301      	adds	r3, #1
 800abe8:	607b      	str	r3, [r7, #4]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2b06      	cmp	r3, #6
 800abee:	d9ef      	bls.n	800abd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800abf0:	480d      	ldr	r0, [pc, #52]	; (800ac28 <prvInitialiseTaskLists+0x64>)
 800abf2:	f7ff f919 	bl	8009e28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800abf6:	480d      	ldr	r0, [pc, #52]	; (800ac2c <prvInitialiseTaskLists+0x68>)
 800abf8:	f7ff f916 	bl	8009e28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800abfc:	480c      	ldr	r0, [pc, #48]	; (800ac30 <prvInitialiseTaskLists+0x6c>)
 800abfe:	f7ff f913 	bl	8009e28 <vListInitialise>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
<<<<<<< HEAD
 800ab06:	480c      	ldr	r0, [pc, #48]	; (800ab38 <prvInitialiseTaskLists+0x70>)
 800ab08:	f7ff f910 	bl	8009d2c <vListInitialise>
=======
 800ac02:	480c      	ldr	r0, [pc, #48]	; (800ac34 <prvInitialiseTaskLists+0x70>)
 800ac04:	f7ff f910 	bl	8009e28 <vListInitialise>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
<<<<<<< HEAD
 800ab0c:	480b      	ldr	r0, [pc, #44]	; (800ab3c <prvInitialiseTaskLists+0x74>)
 800ab0e:	f7ff f90d 	bl	8009d2c <vListInitialise>
=======
 800ac08:	480b      	ldr	r0, [pc, #44]	; (800ac38 <prvInitialiseTaskLists+0x74>)
 800ac0a:	f7ff f90d 	bl	8009e28 <vListInitialise>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
<<<<<<< HEAD
 800ab12:	4b0b      	ldr	r3, [pc, #44]	; (800ab40 <prvInitialiseTaskLists+0x78>)
 800ab14:	4a05      	ldr	r2, [pc, #20]	; (800ab2c <prvInitialiseTaskLists+0x64>)
 800ab16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ab18:	4b0a      	ldr	r3, [pc, #40]	; (800ab44 <prvInitialiseTaskLists+0x7c>)
 800ab1a:	4a05      	ldr	r2, [pc, #20]	; (800ab30 <prvInitialiseTaskLists+0x68>)
 800ab1c:	601a      	str	r2, [r3, #0]
}
 800ab1e:	bf00      	nop
 800ab20:	3708      	adds	r7, #8
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	200007fc 	.word	0x200007fc
 800ab2c:	20000888 	.word	0x20000888
 800ab30:	2000089c 	.word	0x2000089c
 800ab34:	200008b8 	.word	0x200008b8
 800ab38:	200008cc 	.word	0x200008cc
 800ab3c:	200008e4 	.word	0x200008e4
 800ab40:	200008b0 	.word	0x200008b0
 800ab44:	200008b4 	.word	0x200008b4

0800ab48 <prvCheckTasksWaitingTermination>:
=======
 800ac0e:	4b0b      	ldr	r3, [pc, #44]	; (800ac3c <prvInitialiseTaskLists+0x78>)
 800ac10:	4a05      	ldr	r2, [pc, #20]	; (800ac28 <prvInitialiseTaskLists+0x64>)
 800ac12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ac14:	4b0a      	ldr	r3, [pc, #40]	; (800ac40 <prvInitialiseTaskLists+0x7c>)
 800ac16:	4a05      	ldr	r2, [pc, #20]	; (800ac2c <prvInitialiseTaskLists+0x68>)
 800ac18:	601a      	str	r2, [r3, #0]
}
 800ac1a:	bf00      	nop
 800ac1c:	3708      	adds	r7, #8
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	20000800 	.word	0x20000800
 800ac28:	2000088c 	.word	0x2000088c
 800ac2c:	200008a0 	.word	0x200008a0
 800ac30:	200008bc 	.word	0x200008bc
 800ac34:	200008d0 	.word	0x200008d0
 800ac38:	200008e8 	.word	0x200008e8
 800ac3c:	200008b4 	.word	0x200008b4
 800ac40:	200008b8 	.word	0x200008b8

0800ac44 <prvCheckTasksWaitingTermination>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
<<<<<<< HEAD
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
=======
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
<<<<<<< HEAD
 800ab4e:	e019      	b.n	800ab84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ab50:	f000 fa10 	bl	800af74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab54:	4b10      	ldr	r3, [pc, #64]	; (800ab98 <prvCheckTasksWaitingTermination+0x50>)
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	3304      	adds	r3, #4
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7ff f96d 	bl	8009e40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ab66:	4b0d      	ldr	r3, [pc, #52]	; (800ab9c <prvCheckTasksWaitingTermination+0x54>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	4a0b      	ldr	r2, [pc, #44]	; (800ab9c <prvCheckTasksWaitingTermination+0x54>)
 800ab6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ab70:	4b0b      	ldr	r3, [pc, #44]	; (800aba0 <prvCheckTasksWaitingTermination+0x58>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	3b01      	subs	r3, #1
 800ab76:	4a0a      	ldr	r2, [pc, #40]	; (800aba0 <prvCheckTasksWaitingTermination+0x58>)
 800ab78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ab7a:	f000 fa2b 	bl	800afd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f810 	bl	800aba4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab84:	4b06      	ldr	r3, [pc, #24]	; (800aba0 <prvCheckTasksWaitingTermination+0x58>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1e1      	bne.n	800ab50 <prvCheckTasksWaitingTermination+0x8>
=======
 800ac4a:	e019      	b.n	800ac80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ac4c:	f000 fa12 	bl	800b074 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac50:	4b10      	ldr	r3, [pc, #64]	; (800ac94 <prvCheckTasksWaitingTermination+0x50>)
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	3304      	adds	r3, #4
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7ff f96d 	bl	8009f3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ac62:	4b0d      	ldr	r3, [pc, #52]	; (800ac98 <prvCheckTasksWaitingTermination+0x54>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	3b01      	subs	r3, #1
 800ac68:	4a0b      	ldr	r2, [pc, #44]	; (800ac98 <prvCheckTasksWaitingTermination+0x54>)
 800ac6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ac6c:	4b0b      	ldr	r3, [pc, #44]	; (800ac9c <prvCheckTasksWaitingTermination+0x58>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	3b01      	subs	r3, #1
 800ac72:	4a0a      	ldr	r2, [pc, #40]	; (800ac9c <prvCheckTasksWaitingTermination+0x58>)
 800ac74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ac76:	f000 fa2d 	bl	800b0d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 f810 	bl	800aca0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ac80:	4b06      	ldr	r3, [pc, #24]	; (800ac9c <prvCheckTasksWaitingTermination+0x58>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d1e1      	bne.n	800ac4c <prvCheckTasksWaitingTermination+0x8>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
<<<<<<< HEAD
 800ab8c:	bf00      	nop
 800ab8e:	bf00      	nop
 800ab90:	3708      	adds	r7, #8
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	200008cc 	.word	0x200008cc
 800ab9c:	200008f8 	.word	0x200008f8
 800aba0:	200008e0 	.word	0x200008e0

0800aba4 <prvDeleteTCB>:
=======
 800ac88:	bf00      	nop
 800ac8a:	bf00      	nop
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	200008d0 	.word	0x200008d0
 800ac98:	200008fc 	.word	0x200008fc
 800ac9c:	200008e4 	.word	0x200008e4

0800aca0 <prvDeleteTCB>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
<<<<<<< HEAD
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
=======
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
<<<<<<< HEAD
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	334c      	adds	r3, #76	; 0x4c
 800abb0:	4618      	mov	r0, r3
 800abb2:	f000 fdd9 	bl	800b768 <_reclaim_reent>
=======
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	334c      	adds	r3, #76	; 0x4c
 800acac:	4618      	mov	r0, r3
 800acae:	f000 fddb 	bl	800b868 <_reclaim_reent>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
<<<<<<< HEAD
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d108      	bne.n	800abd2 <prvDeleteTCB+0x2e>
=======
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d108      	bne.n	800acce <prvDeleteTCB+0x2e>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
<<<<<<< HEAD
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 fb83 	bl	800b2d0 <vPortFree>
				vPortFree( pxTCB );
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 fb80 	bl	800b2d0 <vPortFree>
=======
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc0:	4618      	mov	r0, r3
 800acc2:	f000 fb85 	bl	800b3d0 <vPortFree>
				vPortFree( pxTCB );
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 fb82 	bl	800b3d0 <vPortFree>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
<<<<<<< HEAD
 800abd0:	e018      	b.n	800ac04 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d103      	bne.n	800abe4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 fb77 	bl	800b2d0 <vPortFree>
	}
 800abe2:	e00f      	b.n	800ac04 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800abea:	2b02      	cmp	r3, #2
 800abec:	d00a      	beq.n	800ac04 <prvDeleteTCB+0x60>
	__asm volatile
 800abee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf2:	f383 8811 	msr	BASEPRI, r3
 800abf6:	f3bf 8f6f 	isb	sy
 800abfa:	f3bf 8f4f 	dsb	sy
 800abfe:	60fb      	str	r3, [r7, #12]
}
 800ac00:	bf00      	nop
 800ac02:	e7fe      	b.n	800ac02 <prvDeleteTCB+0x5e>
	}
 800ac04:	bf00      	nop
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <prvResetNextTaskUnblockTime>:
=======
 800accc:	e018      	b.n	800ad00 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d103      	bne.n	800ace0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 fb79 	bl	800b3d0 <vPortFree>
	}
 800acde:	e00f      	b.n	800ad00 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ace6:	2b02      	cmp	r3, #2
 800ace8:	d00a      	beq.n	800ad00 <prvDeleteTCB+0x60>
	__asm volatile
 800acea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acee:	f383 8811 	msr	BASEPRI, r3
 800acf2:	f3bf 8f6f 	isb	sy
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	60fb      	str	r3, [r7, #12]
}
 800acfc:	bf00      	nop
 800acfe:	e7fe      	b.n	800acfe <prvDeleteTCB+0x5e>
	}
 800ad00:	bf00      	nop
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <prvResetNextTaskUnblockTime>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
<<<<<<< HEAD
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac12:	4b0c      	ldr	r3, [pc, #48]	; (800ac44 <prvResetNextTaskUnblockTime+0x38>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d104      	bne.n	800ac26 <prvResetNextTaskUnblockTime+0x1a>
=======
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad0e:	4b0c      	ldr	r3, [pc, #48]	; (800ad40 <prvResetNextTaskUnblockTime+0x38>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d104      	bne.n	800ad22 <prvResetNextTaskUnblockTime+0x1a>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
<<<<<<< HEAD
 800ac1c:	4b0a      	ldr	r3, [pc, #40]	; (800ac48 <prvResetNextTaskUnblockTime+0x3c>)
 800ac1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac22:	601a      	str	r2, [r3, #0]
=======
 800ad18:	4b0a      	ldr	r3, [pc, #40]	; (800ad44 <prvResetNextTaskUnblockTime+0x3c>)
 800ad1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad1e:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
<<<<<<< HEAD
 800ac24:	e008      	b.n	800ac38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac26:	4b07      	ldr	r3, [pc, #28]	; (800ac44 <prvResetNextTaskUnblockTime+0x38>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	4a04      	ldr	r2, [pc, #16]	; (800ac48 <prvResetNextTaskUnblockTime+0x3c>)
 800ac36:	6013      	str	r3, [r2, #0]
}
 800ac38:	bf00      	nop
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	200008b0 	.word	0x200008b0
 800ac48:	20000918 	.word	0x20000918

0800ac4c <prvAddCurrentTaskToDelayedList>:
=======
 800ad20:	e008      	b.n	800ad34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad22:	4b07      	ldr	r3, [pc, #28]	; (800ad40 <prvResetNextTaskUnblockTime+0x38>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	4a04      	ldr	r2, [pc, #16]	; (800ad44 <prvResetNextTaskUnblockTime+0x3c>)
 800ad32:	6013      	str	r3, [r2, #0]
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr
 800ad40:	200008b4 	.word	0x200008b4
 800ad44:	2000091c 	.word	0x2000091c

0800ad48 <prvAddCurrentTaskToDelayedList>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
<<<<<<< HEAD
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ac56:	4b29      	ldr	r3, [pc, #164]	; (800acfc <prvAddCurrentTaskToDelayedList+0xb0>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	60fb      	str	r3, [r7, #12]
=======
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad52:	4b29      	ldr	r3, [pc, #164]	; (800adf8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	60fb      	str	r3, [r7, #12]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
 800ac5c:	4b28      	ldr	r3, [pc, #160]	; (800ad00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	3304      	adds	r3, #4
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7ff f8ec 	bl	8009e40 <uxListRemove>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10b      	bne.n	800ac86 <prvAddCurrentTaskToDelayedList+0x3a>
=======
 800ad58:	4b28      	ldr	r3, [pc, #160]	; (800adfc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	3304      	adds	r3, #4
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7ff f8ec 	bl	8009f3c <uxListRemove>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d10b      	bne.n	800ad82 <prvAddCurrentTaskToDelayedList+0x3a>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
<<<<<<< HEAD
 800ac6e:	4b24      	ldr	r3, [pc, #144]	; (800ad00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac74:	2201      	movs	r2, #1
 800ac76:	fa02 f303 	lsl.w	r3, r2, r3
 800ac7a:	43da      	mvns	r2, r3
 800ac7c:	4b21      	ldr	r3, [pc, #132]	; (800ad04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4013      	ands	r3, r2
 800ac82:	4a20      	ldr	r2, [pc, #128]	; (800ad04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ac84:	6013      	str	r3, [r2, #0]
=======
 800ad6a:	4b24      	ldr	r3, [pc, #144]	; (800adfc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad70:	2201      	movs	r2, #1
 800ad72:	fa02 f303 	lsl.w	r3, r2, r3
 800ad76:	43da      	mvns	r2, r3
 800ad78:	4b21      	ldr	r3, [pc, #132]	; (800ae00 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4013      	ands	r3, r2
 800ad7e:	4a20      	ldr	r2, [pc, #128]	; (800ae00 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ad80:	6013      	str	r3, [r2, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
<<<<<<< HEAD
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac8c:	d10a      	bne.n	800aca4 <prvAddCurrentTaskToDelayedList+0x58>
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d007      	beq.n	800aca4 <prvAddCurrentTaskToDelayedList+0x58>
=======
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad88:	d10a      	bne.n	800ada0 <prvAddCurrentTaskToDelayedList+0x58>
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d007      	beq.n	800ada0 <prvAddCurrentTaskToDelayedList+0x58>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
<<<<<<< HEAD
 800ac94:	4b1a      	ldr	r3, [pc, #104]	; (800ad00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	3304      	adds	r3, #4
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	481a      	ldr	r0, [pc, #104]	; (800ad08 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ac9e:	f7ff f872 	bl	8009d86 <vListInsertEnd>
=======
 800ad90:	4b1a      	ldr	r3, [pc, #104]	; (800adfc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	3304      	adds	r3, #4
 800ad96:	4619      	mov	r1, r3
 800ad98:	481a      	ldr	r0, [pc, #104]	; (800ae04 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ad9a:	f7ff f872 	bl	8009e82 <vListInsertEnd>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
<<<<<<< HEAD
 800aca2:	e026      	b.n	800acf2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4413      	add	r3, r2
 800acaa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800acac:	4b14      	ldr	r3, [pc, #80]	; (800ad00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800acb4:	68ba      	ldr	r2, [r7, #8]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d209      	bcs.n	800acd0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acbc:	4b13      	ldr	r3, [pc, #76]	; (800ad0c <prvAddCurrentTaskToDelayedList+0xc0>)
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	4b0f      	ldr	r3, [pc, #60]	; (800ad00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	3304      	adds	r3, #4
 800acc6:	4619      	mov	r1, r3
 800acc8:	4610      	mov	r0, r2
 800acca:	f7ff f880 	bl	8009dce <vListInsert>
}
 800acce:	e010      	b.n	800acf2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acd0:	4b0f      	ldr	r3, [pc, #60]	; (800ad10 <prvAddCurrentTaskToDelayedList+0xc4>)
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	4b0a      	ldr	r3, [pc, #40]	; (800ad00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	3304      	adds	r3, #4
 800acda:	4619      	mov	r1, r3
 800acdc:	4610      	mov	r0, r2
 800acde:	f7ff f876 	bl	8009dce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ace2:	4b0c      	ldr	r3, [pc, #48]	; (800ad14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68ba      	ldr	r2, [r7, #8]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d202      	bcs.n	800acf2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800acec:	4a09      	ldr	r2, [pc, #36]	; (800ad14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	6013      	str	r3, [r2, #0]
}
 800acf2:	bf00      	nop
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	200008fc 	.word	0x200008fc
 800ad00:	200007f8 	.word	0x200007f8
 800ad04:	20000900 	.word	0x20000900
 800ad08:	200008e4 	.word	0x200008e4
 800ad0c:	200008b4 	.word	0x200008b4
 800ad10:	200008b0 	.word	0x200008b0
 800ad14:	20000918 	.word	0x20000918

0800ad18 <pxPortInitialiseStack>:
=======
 800ad9e:	e026      	b.n	800adee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4413      	add	r3, r2
 800ada6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ada8:	4b14      	ldr	r3, [pc, #80]	; (800adfc <prvAddCurrentTaskToDelayedList+0xb4>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	68ba      	ldr	r2, [r7, #8]
 800adae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d209      	bcs.n	800adcc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adb8:	4b13      	ldr	r3, [pc, #76]	; (800ae08 <prvAddCurrentTaskToDelayedList+0xc0>)
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	4b0f      	ldr	r3, [pc, #60]	; (800adfc <prvAddCurrentTaskToDelayedList+0xb4>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	3304      	adds	r3, #4
 800adc2:	4619      	mov	r1, r3
 800adc4:	4610      	mov	r0, r2
 800adc6:	f7ff f880 	bl	8009eca <vListInsert>
}
 800adca:	e010      	b.n	800adee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adcc:	4b0f      	ldr	r3, [pc, #60]	; (800ae0c <prvAddCurrentTaskToDelayedList+0xc4>)
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	4b0a      	ldr	r3, [pc, #40]	; (800adfc <prvAddCurrentTaskToDelayedList+0xb4>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	3304      	adds	r3, #4
 800add6:	4619      	mov	r1, r3
 800add8:	4610      	mov	r0, r2
 800adda:	f7ff f876 	bl	8009eca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800adde:	4b0c      	ldr	r3, [pc, #48]	; (800ae10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	68ba      	ldr	r2, [r7, #8]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d202      	bcs.n	800adee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ade8:	4a09      	ldr	r2, [pc, #36]	; (800ae10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	6013      	str	r3, [r2, #0]
}
 800adee:	bf00      	nop
 800adf0:	3710      	adds	r7, #16
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	20000900 	.word	0x20000900
 800adfc:	200007fc 	.word	0x200007fc
 800ae00:	20000904 	.word	0x20000904
 800ae04:	200008e8 	.word	0x200008e8
 800ae08:	200008b8 	.word	0x200008b8
 800ae0c:	200008b4 	.word	0x200008b4
 800ae10:	2000091c 	.word	0x2000091c

0800ae14 <pxPortInitialiseStack>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
<<<<<<< HEAD
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	607a      	str	r2, [r7, #4]
=======
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
<<<<<<< HEAD
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	3b04      	subs	r3, #4
 800ad28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ad30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	3b04      	subs	r3, #4
 800ad36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	f023 0201 	bic.w	r2, r3, #1
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	3b04      	subs	r3, #4
 800ad46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ad48:	4a0c      	ldr	r2, [pc, #48]	; (800ad7c <pxPortInitialiseStack+0x64>)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	3b14      	subs	r3, #20
 800ad52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	601a      	str	r2, [r3, #0]
=======
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	3b04      	subs	r3, #4
 800ae24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ae2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	3b04      	subs	r3, #4
 800ae32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	f023 0201 	bic.w	r2, r3, #1
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	3b04      	subs	r3, #4
 800ae42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ae44:	4a0c      	ldr	r2, [pc, #48]	; (800ae78 <pxPortInitialiseStack+0x64>)
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	3b14      	subs	r3, #20
 800ae4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
<<<<<<< HEAD
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	3b04      	subs	r3, #4
 800ad5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f06f 0202 	mvn.w	r2, #2
 800ad66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	3b20      	subs	r3, #32
 800ad6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3714      	adds	r7, #20
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr
 800ad7c:	0800ad81 	.word	0x0800ad81

0800ad80 <prvTaskExitError>:
=======
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	3b04      	subs	r3, #4
 800ae5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f06f 0202 	mvn.w	r2, #2
 800ae62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	3b20      	subs	r3, #32
 800ae68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3714      	adds	r7, #20
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr
 800ae78:	0800ae7d 	.word	0x0800ae7d

0800ae7c <prvTaskExitError>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
<<<<<<< HEAD
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ad86:	2300      	movs	r3, #0
 800ad88:	607b      	str	r3, [r7, #4]
=======
 800ae7c:	b480      	push	{r7}
 800ae7e:	b085      	sub	sp, #20
 800ae80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ae82:	2300      	movs	r3, #0
 800ae84:	607b      	str	r3, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
<<<<<<< HEAD
 800ad8a:	4b12      	ldr	r3, [pc, #72]	; (800add4 <prvTaskExitError+0x54>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad92:	d00a      	beq.n	800adaa <prvTaskExitError+0x2a>
	__asm volatile
 800ad94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad98:	f383 8811 	msr	BASEPRI, r3
 800ad9c:	f3bf 8f6f 	isb	sy
 800ada0:	f3bf 8f4f 	dsb	sy
 800ada4:	60fb      	str	r3, [r7, #12]
}
 800ada6:	bf00      	nop
 800ada8:	e7fe      	b.n	800ada8 <prvTaskExitError+0x28>
	__asm volatile
 800adaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adae:	f383 8811 	msr	BASEPRI, r3
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	f3bf 8f4f 	dsb	sy
 800adba:	60bb      	str	r3, [r7, #8]
}
 800adbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800adbe:	bf00      	nop
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d0fc      	beq.n	800adc0 <prvTaskExitError+0x40>
=======
 800ae86:	4b12      	ldr	r3, [pc, #72]	; (800aed0 <prvTaskExitError+0x54>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae8e:	d00a      	beq.n	800aea6 <prvTaskExitError+0x2a>
	__asm volatile
 800ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	60fb      	str	r3, [r7, #12]
}
 800aea2:	bf00      	nop
 800aea4:	e7fe      	b.n	800aea4 <prvTaskExitError+0x28>
	__asm volatile
 800aea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeaa:	f383 8811 	msr	BASEPRI, r3
 800aeae:	f3bf 8f6f 	isb	sy
 800aeb2:	f3bf 8f4f 	dsb	sy
 800aeb6:	60bb      	str	r3, [r7, #8]
}
 800aeb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aeba:	bf00      	nop
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d0fc      	beq.n	800aebc <prvTaskExitError+0x40>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
<<<<<<< HEAD
 800adc6:	bf00      	nop
 800adc8:	bf00      	nop
 800adca:	3714      	adds	r7, #20
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr
 800add4:	2000000c 	.word	0x2000000c
	...

0800ade0 <SVC_Handler>:
=======
 800aec2:	bf00      	nop
 800aec4:	bf00      	nop
 800aec6:	3714      	adds	r7, #20
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr
 800aed0:	2000000c 	.word	0x2000000c
	...

0800aee0 <SVC_Handler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
<<<<<<< HEAD
 800ade0:	4b07      	ldr	r3, [pc, #28]	; (800ae00 <pxCurrentTCBConst2>)
 800ade2:	6819      	ldr	r1, [r3, #0]
 800ade4:	6808      	ldr	r0, [r1, #0]
 800ade6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adea:	f380 8809 	msr	PSP, r0
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	f04f 0000 	mov.w	r0, #0
 800adf6:	f380 8811 	msr	BASEPRI, r0
 800adfa:	4770      	bx	lr
 800adfc:	f3af 8000 	nop.w

0800ae00 <pxCurrentTCBConst2>:
 800ae00:	200007f8 	.word	0x200007f8
=======
 800aee0:	4b07      	ldr	r3, [pc, #28]	; (800af00 <pxCurrentTCBConst2>)
 800aee2:	6819      	ldr	r1, [r3, #0]
 800aee4:	6808      	ldr	r0, [r1, #0]
 800aee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeea:	f380 8809 	msr	PSP, r0
 800aeee:	f3bf 8f6f 	isb	sy
 800aef2:	f04f 0000 	mov.w	r0, #0
 800aef6:	f380 8811 	msr	BASEPRI, r0
 800aefa:	4770      	bx	lr
 800aefc:	f3af 8000 	nop.w

0800af00 <pxCurrentTCBConst2>:
 800af00:	200007fc 	.word	0x200007fc
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
<<<<<<< HEAD
 800ae04:	bf00      	nop
 800ae06:	bf00      	nop

0800ae08 <prvPortStartFirstTask>:
=======
 800af04:	bf00      	nop
 800af06:	bf00      	nop

0800af08 <prvPortStartFirstTask>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
<<<<<<< HEAD
 800ae08:	4808      	ldr	r0, [pc, #32]	; (800ae2c <prvPortStartFirstTask+0x24>)
 800ae0a:	6800      	ldr	r0, [r0, #0]
 800ae0c:	6800      	ldr	r0, [r0, #0]
 800ae0e:	f380 8808 	msr	MSP, r0
 800ae12:	f04f 0000 	mov.w	r0, #0
 800ae16:	f380 8814 	msr	CONTROL, r0
 800ae1a:	b662      	cpsie	i
 800ae1c:	b661      	cpsie	f
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	f3bf 8f6f 	isb	sy
 800ae26:	df00      	svc	0
 800ae28:	bf00      	nop
=======
 800af08:	4808      	ldr	r0, [pc, #32]	; (800af2c <prvPortStartFirstTask+0x24>)
 800af0a:	6800      	ldr	r0, [r0, #0]
 800af0c:	6800      	ldr	r0, [r0, #0]
 800af0e:	f380 8808 	msr	MSP, r0
 800af12:	f04f 0000 	mov.w	r0, #0
 800af16:	f380 8814 	msr	CONTROL, r0
 800af1a:	b662      	cpsie	i
 800af1c:	b661      	cpsie	f
 800af1e:	f3bf 8f4f 	dsb	sy
 800af22:	f3bf 8f6f 	isb	sy
 800af26:	df00      	svc	0
 800af28:	bf00      	nop
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
<<<<<<< HEAD
 800ae2a:	bf00      	nop
 800ae2c:	e000ed08 	.word	0xe000ed08

0800ae30 <xPortStartScheduler>:
=======
 800af2a:	bf00      	nop
 800af2c:	e000ed08 	.word	0xe000ed08

0800af30 <xPortStartScheduler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
<<<<<<< HEAD
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
=======
 800af30:	b580      	push	{r7, lr}
 800af32:	b086      	sub	sp, #24
 800af34:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
<<<<<<< HEAD
 800ae36:	4b46      	ldr	r3, [pc, #280]	; (800af50 <xPortStartScheduler+0x120>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a46      	ldr	r2, [pc, #280]	; (800af54 <xPortStartScheduler+0x124>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d10a      	bne.n	800ae56 <xPortStartScheduler+0x26>
	__asm volatile
 800ae40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	613b      	str	r3, [r7, #16]
}
 800ae52:	bf00      	nop
 800ae54:	e7fe      	b.n	800ae54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ae56:	4b3e      	ldr	r3, [pc, #248]	; (800af50 <xPortStartScheduler+0x120>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a3f      	ldr	r2, [pc, #252]	; (800af58 <xPortStartScheduler+0x128>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d10a      	bne.n	800ae76 <xPortStartScheduler+0x46>
	__asm volatile
 800ae60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae64:	f383 8811 	msr	BASEPRI, r3
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	60fb      	str	r3, [r7, #12]
}
 800ae72:	bf00      	nop
 800ae74:	e7fe      	b.n	800ae74 <xPortStartScheduler+0x44>
=======
 800af36:	4b46      	ldr	r3, [pc, #280]	; (800b050 <xPortStartScheduler+0x120>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a46      	ldr	r2, [pc, #280]	; (800b054 <xPortStartScheduler+0x124>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d10a      	bne.n	800af56 <xPortStartScheduler+0x26>
	__asm volatile
 800af40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af44:	f383 8811 	msr	BASEPRI, r3
 800af48:	f3bf 8f6f 	isb	sy
 800af4c:	f3bf 8f4f 	dsb	sy
 800af50:	613b      	str	r3, [r7, #16]
}
 800af52:	bf00      	nop
 800af54:	e7fe      	b.n	800af54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800af56:	4b3e      	ldr	r3, [pc, #248]	; (800b050 <xPortStartScheduler+0x120>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a3f      	ldr	r2, [pc, #252]	; (800b058 <xPortStartScheduler+0x128>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d10a      	bne.n	800af76 <xPortStartScheduler+0x46>
	__asm volatile
 800af60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af64:	f383 8811 	msr	BASEPRI, r3
 800af68:	f3bf 8f6f 	isb	sy
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	60fb      	str	r3, [r7, #12]
}
 800af72:	bf00      	nop
 800af74:	e7fe      	b.n	800af74 <xPortStartScheduler+0x44>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
<<<<<<< HEAD
 800ae76:	4b39      	ldr	r3, [pc, #228]	; (800af5c <xPortStartScheduler+0x12c>)
 800ae78:	617b      	str	r3, [r7, #20]
=======
 800af76:	4b39      	ldr	r3, [pc, #228]	; (800b05c <xPortStartScheduler+0x12c>)
 800af78:	617b      	str	r3, [r7, #20]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
<<<<<<< HEAD
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	607b      	str	r3, [r7, #4]
=======
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	607b      	str	r3, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
<<<<<<< HEAD
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	22ff      	movs	r2, #255	; 0xff
 800ae86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ae90:	78fb      	ldrb	r3, [r7, #3]
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ae98:	b2da      	uxtb	r2, r3
 800ae9a:	4b31      	ldr	r3, [pc, #196]	; (800af60 <xPortStartScheduler+0x130>)
 800ae9c:	701a      	strb	r2, [r3, #0]
=======
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	22ff      	movs	r2, #255	; 0xff
 800af86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800af90:	78fb      	ldrb	r3, [r7, #3]
 800af92:	b2db      	uxtb	r3, r3
 800af94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800af98:	b2da      	uxtb	r2, r3
 800af9a:	4b31      	ldr	r3, [pc, #196]	; (800b060 <xPortStartScheduler+0x130>)
 800af9c:	701a      	strb	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
<<<<<<< HEAD
 800ae9e:	4b31      	ldr	r3, [pc, #196]	; (800af64 <xPortStartScheduler+0x134>)
 800aea0:	2207      	movs	r2, #7
 800aea2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aea4:	e009      	b.n	800aeba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aea6:	4b2f      	ldr	r3, [pc, #188]	; (800af64 <xPortStartScheduler+0x134>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	4a2d      	ldr	r2, [pc, #180]	; (800af64 <xPortStartScheduler+0x134>)
 800aeae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aeb0:	78fb      	ldrb	r3, [r7, #3]
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	005b      	lsls	r3, r3, #1
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aeba:	78fb      	ldrb	r3, [r7, #3]
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aec2:	2b80      	cmp	r3, #128	; 0x80
 800aec4:	d0ef      	beq.n	800aea6 <xPortStartScheduler+0x76>
=======
 800af9e:	4b31      	ldr	r3, [pc, #196]	; (800b064 <xPortStartScheduler+0x134>)
 800afa0:	2207      	movs	r2, #7
 800afa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afa4:	e009      	b.n	800afba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800afa6:	4b2f      	ldr	r3, [pc, #188]	; (800b064 <xPortStartScheduler+0x134>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	3b01      	subs	r3, #1
 800afac:	4a2d      	ldr	r2, [pc, #180]	; (800b064 <xPortStartScheduler+0x134>)
 800afae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800afb0:	78fb      	ldrb	r3, [r7, #3]
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	005b      	lsls	r3, r3, #1
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afba:	78fb      	ldrb	r3, [r7, #3]
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afc2:	2b80      	cmp	r3, #128	; 0x80
 800afc4:	d0ef      	beq.n	800afa6 <xPortStartScheduler+0x76>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
<<<<<<< HEAD
 800aec6:	4b27      	ldr	r3, [pc, #156]	; (800af64 <xPortStartScheduler+0x134>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f1c3 0307 	rsb	r3, r3, #7
 800aece:	2b04      	cmp	r3, #4
 800aed0:	d00a      	beq.n	800aee8 <xPortStartScheduler+0xb8>
	__asm volatile
 800aed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed6:	f383 8811 	msr	BASEPRI, r3
 800aeda:	f3bf 8f6f 	isb	sy
 800aede:	f3bf 8f4f 	dsb	sy
 800aee2:	60bb      	str	r3, [r7, #8]
}
 800aee4:	bf00      	nop
 800aee6:	e7fe      	b.n	800aee6 <xPortStartScheduler+0xb6>
=======
 800afc6:	4b27      	ldr	r3, [pc, #156]	; (800b064 <xPortStartScheduler+0x134>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f1c3 0307 	rsb	r3, r3, #7
 800afce:	2b04      	cmp	r3, #4
 800afd0:	d00a      	beq.n	800afe8 <xPortStartScheduler+0xb8>
	__asm volatile
 800afd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	60bb      	str	r3, [r7, #8]
}
 800afe4:	bf00      	nop
 800afe6:	e7fe      	b.n	800afe6 <xPortStartScheduler+0xb6>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
<<<<<<< HEAD
 800aee8:	4b1e      	ldr	r3, [pc, #120]	; (800af64 <xPortStartScheduler+0x134>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	021b      	lsls	r3, r3, #8
 800aeee:	4a1d      	ldr	r2, [pc, #116]	; (800af64 <xPortStartScheduler+0x134>)
 800aef0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aef2:	4b1c      	ldr	r3, [pc, #112]	; (800af64 <xPortStartScheduler+0x134>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aefa:	4a1a      	ldr	r2, [pc, #104]	; (800af64 <xPortStartScheduler+0x134>)
 800aefc:	6013      	str	r3, [r2, #0]
=======
 800afe8:	4b1e      	ldr	r3, [pc, #120]	; (800b064 <xPortStartScheduler+0x134>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	021b      	lsls	r3, r3, #8
 800afee:	4a1d      	ldr	r2, [pc, #116]	; (800b064 <xPortStartScheduler+0x134>)
 800aff0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aff2:	4b1c      	ldr	r3, [pc, #112]	; (800b064 <xPortStartScheduler+0x134>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800affa:	4a1a      	ldr	r2, [pc, #104]	; (800b064 <xPortStartScheduler+0x134>)
 800affc:	6013      	str	r3, [r2, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
<<<<<<< HEAD
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	b2da      	uxtb	r2, r3
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	701a      	strb	r2, [r3, #0]
=======
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	b2da      	uxtb	r2, r3
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	701a      	strb	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
<<<<<<< HEAD
 800af06:	4b18      	ldr	r3, [pc, #96]	; (800af68 <xPortStartScheduler+0x138>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a17      	ldr	r2, [pc, #92]	; (800af68 <xPortStartScheduler+0x138>)
 800af0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800af10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800af12:	4b15      	ldr	r3, [pc, #84]	; (800af68 <xPortStartScheduler+0x138>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a14      	ldr	r2, [pc, #80]	; (800af68 <xPortStartScheduler+0x138>)
 800af18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800af1c:	6013      	str	r3, [r2, #0]
=======
 800b006:	4b18      	ldr	r3, [pc, #96]	; (800b068 <xPortStartScheduler+0x138>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a17      	ldr	r2, [pc, #92]	; (800b068 <xPortStartScheduler+0x138>)
 800b00c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b010:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b012:	4b15      	ldr	r3, [pc, #84]	; (800b068 <xPortStartScheduler+0x138>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a14      	ldr	r2, [pc, #80]	; (800b068 <xPortStartScheduler+0x138>)
 800b018:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b01c:	6013      	str	r3, [r2, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
<<<<<<< HEAD
 800af1e:	f000 f8dd 	bl	800b0dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800af22:	4b12      	ldr	r3, [pc, #72]	; (800af6c <xPortStartScheduler+0x13c>)
 800af24:	2200      	movs	r2, #0
 800af26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800af28:	f000 f8fc 	bl	800b124 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800af2c:	4b10      	ldr	r3, [pc, #64]	; (800af70 <xPortStartScheduler+0x140>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a0f      	ldr	r2, [pc, #60]	; (800af70 <xPortStartScheduler+0x140>)
 800af32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800af36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800af38:	f7ff ff66 	bl	800ae08 <prvPortStartFirstTask>
=======
 800b01e:	f000 f8dd 	bl	800b1dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b022:	4b12      	ldr	r3, [pc, #72]	; (800b06c <xPortStartScheduler+0x13c>)
 800b024:	2200      	movs	r2, #0
 800b026:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b028:	f000 f8fc 	bl	800b224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b02c:	4b10      	ldr	r3, [pc, #64]	; (800b070 <xPortStartScheduler+0x140>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a0f      	ldr	r2, [pc, #60]	; (800b070 <xPortStartScheduler+0x140>)
 800b032:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b036:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b038:	f7ff ff66 	bl	800af08 <prvPortStartFirstTask>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
<<<<<<< HEAD
 800af3c:	f7ff fce8 	bl	800a910 <vTaskSwitchContext>
	prvTaskExitError();
 800af40:	f7ff ff1e 	bl	800ad80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800af44:	2300      	movs	r3, #0
}
 800af46:	4618      	mov	r0, r3
 800af48:	3718      	adds	r7, #24
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	e000ed00 	.word	0xe000ed00
 800af54:	410fc271 	.word	0x410fc271
 800af58:	410fc270 	.word	0x410fc270
 800af5c:	e000e400 	.word	0xe000e400
 800af60:	20000924 	.word	0x20000924
 800af64:	20000928 	.word	0x20000928
 800af68:	e000ed20 	.word	0xe000ed20
 800af6c:	2000000c 	.word	0x2000000c
 800af70:	e000ef34 	.word	0xe000ef34

0800af74 <vPortEnterCritical>:
=======
 800b03c:	f7ff fce6 	bl	800aa0c <vTaskSwitchContext>
	prvTaskExitError();
 800b040:	f7ff ff1c 	bl	800ae7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b044:	2300      	movs	r3, #0
}
 800b046:	4618      	mov	r0, r3
 800b048:	3718      	adds	r7, #24
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	e000ed00 	.word	0xe000ed00
 800b054:	410fc271 	.word	0x410fc271
 800b058:	410fc270 	.word	0x410fc270
 800b05c:	e000e400 	.word	0xe000e400
 800b060:	20000928 	.word	0x20000928
 800b064:	2000092c 	.word	0x2000092c
 800b068:	e000ed20 	.word	0xe000ed20
 800b06c:	2000000c 	.word	0x2000000c
 800b070:	e000ef34 	.word	0xe000ef34

0800b074 <vPortEnterCritical>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
<<<<<<< HEAD
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
	__asm volatile
 800af7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7e:	f383 8811 	msr	BASEPRI, r3
 800af82:	f3bf 8f6f 	isb	sy
 800af86:	f3bf 8f4f 	dsb	sy
 800af8a:	607b      	str	r3, [r7, #4]
}
 800af8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800af8e:	4b0f      	ldr	r3, [pc, #60]	; (800afcc <vPortEnterCritical+0x58>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	3301      	adds	r3, #1
 800af94:	4a0d      	ldr	r2, [pc, #52]	; (800afcc <vPortEnterCritical+0x58>)
 800af96:	6013      	str	r3, [r2, #0]
=======
 800b074:	b480      	push	{r7}
 800b076:	b083      	sub	sp, #12
 800b078:	af00      	add	r7, sp, #0
	__asm volatile
 800b07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07e:	f383 8811 	msr	BASEPRI, r3
 800b082:	f3bf 8f6f 	isb	sy
 800b086:	f3bf 8f4f 	dsb	sy
 800b08a:	607b      	str	r3, [r7, #4]
}
 800b08c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b08e:	4b0f      	ldr	r3, [pc, #60]	; (800b0cc <vPortEnterCritical+0x58>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	3301      	adds	r3, #1
 800b094:	4a0d      	ldr	r2, [pc, #52]	; (800b0cc <vPortEnterCritical+0x58>)
 800b096:	6013      	str	r3, [r2, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
<<<<<<< HEAD
 800af98:	4b0c      	ldr	r3, [pc, #48]	; (800afcc <vPortEnterCritical+0x58>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d10f      	bne.n	800afc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800afa0:	4b0b      	ldr	r3, [pc, #44]	; (800afd0 <vPortEnterCritical+0x5c>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d00a      	beq.n	800afc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800afaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afae:	f383 8811 	msr	BASEPRI, r3
 800afb2:	f3bf 8f6f 	isb	sy
 800afb6:	f3bf 8f4f 	dsb	sy
 800afba:	603b      	str	r3, [r7, #0]
}
 800afbc:	bf00      	nop
 800afbe:	e7fe      	b.n	800afbe <vPortEnterCritical+0x4a>
	}
}
 800afc0:	bf00      	nop
 800afc2:	370c      	adds	r7, #12
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr
 800afcc:	2000000c 	.word	0x2000000c
 800afd0:	e000ed04 	.word	0xe000ed04

0800afd4 <vPortExitCritical>:
=======
 800b098:	4b0c      	ldr	r3, [pc, #48]	; (800b0cc <vPortEnterCritical+0x58>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d10f      	bne.n	800b0c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b0a0:	4b0b      	ldr	r3, [pc, #44]	; (800b0d0 <vPortEnterCritical+0x5c>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00a      	beq.n	800b0c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ae:	f383 8811 	msr	BASEPRI, r3
 800b0b2:	f3bf 8f6f 	isb	sy
 800b0b6:	f3bf 8f4f 	dsb	sy
 800b0ba:	603b      	str	r3, [r7, #0]
}
 800b0bc:	bf00      	nop
 800b0be:	e7fe      	b.n	800b0be <vPortEnterCritical+0x4a>
	}
}
 800b0c0:	bf00      	nop
 800b0c2:	370c      	adds	r7, #12
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr
 800b0cc:	2000000c 	.word	0x2000000c
 800b0d0:	e000ed04 	.word	0xe000ed04

0800b0d4 <vPortExitCritical>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
<<<<<<< HEAD
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800afda:	4b12      	ldr	r3, [pc, #72]	; (800b024 <vPortExitCritical+0x50>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10a      	bne.n	800aff8 <vPortExitCritical+0x24>
	__asm volatile
 800afe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe6:	f383 8811 	msr	BASEPRI, r3
 800afea:	f3bf 8f6f 	isb	sy
 800afee:	f3bf 8f4f 	dsb	sy
 800aff2:	607b      	str	r3, [r7, #4]
}
 800aff4:	bf00      	nop
 800aff6:	e7fe      	b.n	800aff6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aff8:	4b0a      	ldr	r3, [pc, #40]	; (800b024 <vPortExitCritical+0x50>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	3b01      	subs	r3, #1
 800affe:	4a09      	ldr	r2, [pc, #36]	; (800b024 <vPortExitCritical+0x50>)
 800b000:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b002:	4b08      	ldr	r3, [pc, #32]	; (800b024 <vPortExitCritical+0x50>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d105      	bne.n	800b016 <vPortExitCritical+0x42>
 800b00a:	2300      	movs	r3, #0
 800b00c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	f383 8811 	msr	BASEPRI, r3
}
 800b014:	bf00      	nop
=======
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b0da:	4b12      	ldr	r3, [pc, #72]	; (800b124 <vPortExitCritical+0x50>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d10a      	bne.n	800b0f8 <vPortExitCritical+0x24>
	__asm volatile
 800b0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e6:	f383 8811 	msr	BASEPRI, r3
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	607b      	str	r3, [r7, #4]
}
 800b0f4:	bf00      	nop
 800b0f6:	e7fe      	b.n	800b0f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b0f8:	4b0a      	ldr	r3, [pc, #40]	; (800b124 <vPortExitCritical+0x50>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	4a09      	ldr	r2, [pc, #36]	; (800b124 <vPortExitCritical+0x50>)
 800b100:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b102:	4b08      	ldr	r3, [pc, #32]	; (800b124 <vPortExitCritical+0x50>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d105      	bne.n	800b116 <vPortExitCritical+0x42>
 800b10a:	2300      	movs	r3, #0
 800b10c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	f383 8811 	msr	BASEPRI, r3
}
 800b114:	bf00      	nop
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	{
		portENABLE_INTERRUPTS();
	}
}
<<<<<<< HEAD
 800b016:	bf00      	nop
 800b018:	370c      	adds	r7, #12
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr
 800b022:	bf00      	nop
 800b024:	2000000c 	.word	0x2000000c
	...

0800b030 <PendSV_Handler>:
=======
 800b116:	bf00      	nop
 800b118:	370c      	adds	r7, #12
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop
 800b124:	2000000c 	.word	0x2000000c
	...

0800b130 <PendSV_Handler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
<<<<<<< HEAD
 800b030:	f3ef 8009 	mrs	r0, PSP
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	4b15      	ldr	r3, [pc, #84]	; (800b090 <pxCurrentTCBConst>)
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	f01e 0f10 	tst.w	lr, #16
 800b040:	bf08      	it	eq
 800b042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04a:	6010      	str	r0, [r2, #0]
 800b04c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b050:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b054:	f380 8811 	msr	BASEPRI, r0
 800b058:	f3bf 8f4f 	dsb	sy
 800b05c:	f3bf 8f6f 	isb	sy
 800b060:	f7ff fc56 	bl	800a910 <vTaskSwitchContext>
 800b064:	f04f 0000 	mov.w	r0, #0
 800b068:	f380 8811 	msr	BASEPRI, r0
 800b06c:	bc09      	pop	{r0, r3}
 800b06e:	6819      	ldr	r1, [r3, #0]
 800b070:	6808      	ldr	r0, [r1, #0]
 800b072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b076:	f01e 0f10 	tst.w	lr, #16
 800b07a:	bf08      	it	eq
 800b07c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b080:	f380 8809 	msr	PSP, r0
 800b084:	f3bf 8f6f 	isb	sy
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	f3af 8000 	nop.w

0800b090 <pxCurrentTCBConst>:
 800b090:	200007f8 	.word	0x200007f8
=======
 800b130:	f3ef 8009 	mrs	r0, PSP
 800b134:	f3bf 8f6f 	isb	sy
 800b138:	4b15      	ldr	r3, [pc, #84]	; (800b190 <pxCurrentTCBConst>)
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	f01e 0f10 	tst.w	lr, #16
 800b140:	bf08      	it	eq
 800b142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14a:	6010      	str	r0, [r2, #0]
 800b14c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b150:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b154:	f380 8811 	msr	BASEPRI, r0
 800b158:	f3bf 8f4f 	dsb	sy
 800b15c:	f3bf 8f6f 	isb	sy
 800b160:	f7ff fc54 	bl	800aa0c <vTaskSwitchContext>
 800b164:	f04f 0000 	mov.w	r0, #0
 800b168:	f380 8811 	msr	BASEPRI, r0
 800b16c:	bc09      	pop	{r0, r3}
 800b16e:	6819      	ldr	r1, [r3, #0]
 800b170:	6808      	ldr	r0, [r1, #0]
 800b172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b176:	f01e 0f10 	tst.w	lr, #16
 800b17a:	bf08      	it	eq
 800b17c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b180:	f380 8809 	msr	PSP, r0
 800b184:	f3bf 8f6f 	isb	sy
 800b188:	4770      	bx	lr
 800b18a:	bf00      	nop
 800b18c:	f3af 8000 	nop.w

0800b190 <pxCurrentTCBConst>:
 800b190:	200007fc 	.word	0x200007fc
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
<<<<<<< HEAD
 800b094:	bf00      	nop
 800b096:	bf00      	nop

0800b098 <SysTick_Handler>:
=======
 800b194:	bf00      	nop
 800b196:	bf00      	nop

0800b198 <SysTick_Handler>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
<<<<<<< HEAD
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
	__asm volatile
 800b09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	607b      	str	r3, [r7, #4]
}
 800b0b0:	bf00      	nop
=======
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
	__asm volatile
 800b19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	607b      	str	r3, [r7, #4]
}
 800b1b0:	bf00      	nop
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
<<<<<<< HEAD
 800b0b2:	f7ff fb75 	bl	800a7a0 <xTaskIncrementTick>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d003      	beq.n	800b0c4 <SysTick_Handler+0x2c>
=======
 800b1b2:	f7ff fb73 	bl	800a89c <xTaskIncrementTick>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d003      	beq.n	800b1c4 <SysTick_Handler+0x2c>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
<<<<<<< HEAD
 800b0bc:	4b06      	ldr	r3, [pc, #24]	; (800b0d8 <SysTick_Handler+0x40>)
 800b0be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0c2:	601a      	str	r2, [r3, #0]
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	f383 8811 	msr	BASEPRI, r3
}
 800b0ce:	bf00      	nop
=======
 800b1bc:	4b06      	ldr	r3, [pc, #24]	; (800b1d8 <SysTick_Handler+0x40>)
 800b1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1c2:	601a      	str	r2, [r3, #0]
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	f383 8811 	msr	BASEPRI, r3
}
 800b1ce:	bf00      	nop
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		}
	}
	portENABLE_INTERRUPTS();
}
<<<<<<< HEAD
 800b0d0:	bf00      	nop
 800b0d2:	3708      	adds	r7, #8
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	e000ed04 	.word	0xe000ed04

0800b0dc <vPortSetupTimerInterrupt>:
=======
 800b1d0:	bf00      	nop
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	e000ed04 	.word	0xe000ed04

0800b1dc <vPortSetupTimerInterrupt>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
<<<<<<< HEAD
 800b0dc:	b480      	push	{r7}
 800b0de:	af00      	add	r7, sp, #0
=======
 800b1dc:	b480      	push	{r7}
 800b1de:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
<<<<<<< HEAD
 800b0e0:	4b0b      	ldr	r3, [pc, #44]	; (800b110 <vPortSetupTimerInterrupt+0x34>)
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b0e6:	4b0b      	ldr	r3, [pc, #44]	; (800b114 <vPortSetupTimerInterrupt+0x38>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b0ec:	4b0a      	ldr	r3, [pc, #40]	; (800b118 <vPortSetupTimerInterrupt+0x3c>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a0a      	ldr	r2, [pc, #40]	; (800b11c <vPortSetupTimerInterrupt+0x40>)
 800b0f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0f6:	099b      	lsrs	r3, r3, #6
 800b0f8:	4a09      	ldr	r2, [pc, #36]	; (800b120 <vPortSetupTimerInterrupt+0x44>)
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b0fe:	4b04      	ldr	r3, [pc, #16]	; (800b110 <vPortSetupTimerInterrupt+0x34>)
 800b100:	2207      	movs	r2, #7
 800b102:	601a      	str	r2, [r3, #0]
}
 800b104:	bf00      	nop
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	e000e010 	.word	0xe000e010
 800b114:	e000e018 	.word	0xe000e018
 800b118:	20000000 	.word	0x20000000
 800b11c:	10624dd3 	.word	0x10624dd3
 800b120:	e000e014 	.word	0xe000e014

0800b124 <vPortEnableVFP>:
=======
 800b1e0:	4b0b      	ldr	r3, [pc, #44]	; (800b210 <vPortSetupTimerInterrupt+0x34>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b1e6:	4b0b      	ldr	r3, [pc, #44]	; (800b214 <vPortSetupTimerInterrupt+0x38>)
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b1ec:	4b0a      	ldr	r3, [pc, #40]	; (800b218 <vPortSetupTimerInterrupt+0x3c>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a0a      	ldr	r2, [pc, #40]	; (800b21c <vPortSetupTimerInterrupt+0x40>)
 800b1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1f6:	099b      	lsrs	r3, r3, #6
 800b1f8:	4a09      	ldr	r2, [pc, #36]	; (800b220 <vPortSetupTimerInterrupt+0x44>)
 800b1fa:	3b01      	subs	r3, #1
 800b1fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b1fe:	4b04      	ldr	r3, [pc, #16]	; (800b210 <vPortSetupTimerInterrupt+0x34>)
 800b200:	2207      	movs	r2, #7
 800b202:	601a      	str	r2, [r3, #0]
}
 800b204:	bf00      	nop
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	e000e010 	.word	0xe000e010
 800b214:	e000e018 	.word	0xe000e018
 800b218:	20000000 	.word	0x20000000
 800b21c:	10624dd3 	.word	0x10624dd3
 800b220:	e000e014 	.word	0xe000e014

0800b224 <vPortEnableVFP>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
<<<<<<< HEAD
 800b124:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b134 <vPortEnableVFP+0x10>
 800b128:	6801      	ldr	r1, [r0, #0]
 800b12a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b12e:	6001      	str	r1, [r0, #0]
 800b130:	4770      	bx	lr
=======
 800b224:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b234 <vPortEnableVFP+0x10>
 800b228:	6801      	ldr	r1, [r0, #0]
 800b22a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b22e:	6001      	str	r1, [r0, #0]
 800b230:	4770      	bx	lr
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
<<<<<<< HEAD
 800b132:	bf00      	nop
 800b134:	e000ed88 	.word	0xe000ed88

0800b138 <pvPortMalloc>:
=======
 800b232:	bf00      	nop
 800b234:	e000ed88 	.word	0xe000ed88

0800b238 <pvPortMalloc>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
<<<<<<< HEAD
 800b138:	b580      	push	{r7, lr}
 800b13a:	b08a      	sub	sp, #40	; 0x28
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b140:	2300      	movs	r3, #0
 800b142:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b144:	f7ff fa72 	bl	800a62c <vTaskSuspendAll>
=======
 800b238:	b580      	push	{r7, lr}
 800b23a:	b08a      	sub	sp, #40	; 0x28
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b240:	2300      	movs	r3, #0
 800b242:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b244:	f7ff fa70 	bl	800a728 <vTaskSuspendAll>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
<<<<<<< HEAD
 800b148:	4b5b      	ldr	r3, [pc, #364]	; (800b2b8 <pvPortMalloc+0x180>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d101      	bne.n	800b154 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b150:	f000 f920 	bl	800b394 <prvHeapInit>
=======
 800b248:	4b5b      	ldr	r3, [pc, #364]	; (800b3b8 <pvPortMalloc+0x180>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d101      	bne.n	800b254 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b250:	f000 f920 	bl	800b494 <prvHeapInit>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
<<<<<<< HEAD
 800b154:	4b59      	ldr	r3, [pc, #356]	; (800b2bc <pvPortMalloc+0x184>)
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4013      	ands	r3, r2
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f040 8093 	bne.w	800b288 <pvPortMalloc+0x150>
=======
 800b254:	4b59      	ldr	r3, [pc, #356]	; (800b3bc <pvPortMalloc+0x184>)
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4013      	ands	r3, r2
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f040 8093 	bne.w	800b388 <pvPortMalloc+0x150>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
<<<<<<< HEAD
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d01d      	beq.n	800b1a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b168:	2208      	movs	r2, #8
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4413      	add	r3, r2
 800b16e:	607b      	str	r3, [r7, #4]
=======
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d01d      	beq.n	800b2a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b268:	2208      	movs	r2, #8
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4413      	add	r3, r2
 800b26e:	607b      	str	r3, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
<<<<<<< HEAD
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f003 0307 	and.w	r3, r3, #7
 800b176:	2b00      	cmp	r3, #0
 800b178:	d014      	beq.n	800b1a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f023 0307 	bic.w	r3, r3, #7
 800b180:	3308      	adds	r3, #8
 800b182:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f003 0307 	and.w	r3, r3, #7
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00a      	beq.n	800b1a4 <pvPortMalloc+0x6c>
	__asm volatile
 800b18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	617b      	str	r3, [r7, #20]
}
 800b1a0:	bf00      	nop
 800b1a2:	e7fe      	b.n	800b1a2 <pvPortMalloc+0x6a>
=======
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f003 0307 	and.w	r3, r3, #7
 800b276:	2b00      	cmp	r3, #0
 800b278:	d014      	beq.n	800b2a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f023 0307 	bic.w	r3, r3, #7
 800b280:	3308      	adds	r3, #8
 800b282:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f003 0307 	and.w	r3, r3, #7
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00a      	beq.n	800b2a4 <pvPortMalloc+0x6c>
	__asm volatile
 800b28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	617b      	str	r3, [r7, #20]
}
 800b2a0:	bf00      	nop
 800b2a2:	e7fe      	b.n	800b2a2 <pvPortMalloc+0x6a>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
<<<<<<< HEAD
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d06e      	beq.n	800b288 <pvPortMalloc+0x150>
 800b1aa:	4b45      	ldr	r3, [pc, #276]	; (800b2c0 <pvPortMalloc+0x188>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d869      	bhi.n	800b288 <pvPortMalloc+0x150>
=======
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d06e      	beq.n	800b388 <pvPortMalloc+0x150>
 800b2aa:	4b45      	ldr	r3, [pc, #276]	; (800b3c0 <pvPortMalloc+0x188>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d869      	bhi.n	800b388 <pvPortMalloc+0x150>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
<<<<<<< HEAD
 800b1b4:	4b43      	ldr	r3, [pc, #268]	; (800b2c4 <pvPortMalloc+0x18c>)
 800b1b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b1b8:	4b42      	ldr	r3, [pc, #264]	; (800b2c4 <pvPortMalloc+0x18c>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1be:	e004      	b.n	800b1ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d903      	bls.n	800b1dc <pvPortMalloc+0xa4>
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1f1      	bne.n	800b1c0 <pvPortMalloc+0x88>
=======
 800b2b4:	4b43      	ldr	r3, [pc, #268]	; (800b3c4 <pvPortMalloc+0x18c>)
 800b2b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b2b8:	4b42      	ldr	r3, [pc, #264]	; (800b3c4 <pvPortMalloc+0x18c>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b2be:	e004      	b.n	800b2ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d903      	bls.n	800b2dc <pvPortMalloc+0xa4>
 800b2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1f1      	bne.n	800b2c0 <pvPortMalloc+0x88>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
<<<<<<< HEAD
 800b1dc:	4b36      	ldr	r3, [pc, #216]	; (800b2b8 <pvPortMalloc+0x180>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d050      	beq.n	800b288 <pvPortMalloc+0x150>
=======
 800b2dc:	4b36      	ldr	r3, [pc, #216]	; (800b3b8 <pvPortMalloc+0x180>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d050      	beq.n	800b388 <pvPortMalloc+0x150>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
<<<<<<< HEAD
 800b1e6:	6a3b      	ldr	r3, [r7, #32]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2208      	movs	r2, #8
 800b1ec:	4413      	add	r3, r2
 800b1ee:	61fb      	str	r3, [r7, #28]
=======
 800b2e6:	6a3b      	ldr	r3, [r7, #32]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2208      	movs	r2, #8
 800b2ec:	4413      	add	r3, r2
 800b2ee:	61fb      	str	r3, [r7, #28]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
<<<<<<< HEAD
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	6a3b      	ldr	r3, [r7, #32]
 800b1f6:	601a      	str	r2, [r3, #0]
=======
 800b2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	6a3b      	ldr	r3, [r7, #32]
 800b2f6:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
<<<<<<< HEAD
 800b1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fa:	685a      	ldr	r2, [r3, #4]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	1ad2      	subs	r2, r2, r3
 800b200:	2308      	movs	r3, #8
 800b202:	005b      	lsls	r3, r3, #1
 800b204:	429a      	cmp	r2, r3
 800b206:	d91f      	bls.n	800b248 <pvPortMalloc+0x110>
=======
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fa:	685a      	ldr	r2, [r3, #4]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	1ad2      	subs	r2, r2, r3
 800b300:	2308      	movs	r3, #8
 800b302:	005b      	lsls	r3, r3, #1
 800b304:	429a      	cmp	r2, r3
 800b306:	d91f      	bls.n	800b348 <pvPortMalloc+0x110>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
<<<<<<< HEAD
 800b208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4413      	add	r3, r2
 800b20e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	f003 0307 	and.w	r3, r3, #7
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00a      	beq.n	800b230 <pvPortMalloc+0xf8>
	__asm volatile
 800b21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21e:	f383 8811 	msr	BASEPRI, r3
 800b222:	f3bf 8f6f 	isb	sy
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	613b      	str	r3, [r7, #16]
}
 800b22c:	bf00      	nop
 800b22e:	e7fe      	b.n	800b22e <pvPortMalloc+0xf6>
=======
 800b308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4413      	add	r3, r2
 800b30e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	f003 0307 	and.w	r3, r3, #7
 800b316:	2b00      	cmp	r3, #0
 800b318:	d00a      	beq.n	800b330 <pvPortMalloc+0xf8>
	__asm volatile
 800b31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31e:	f383 8811 	msr	BASEPRI, r3
 800b322:	f3bf 8f6f 	isb	sy
 800b326:	f3bf 8f4f 	dsb	sy
 800b32a:	613b      	str	r3, [r7, #16]
}
 800b32c:	bf00      	nop
 800b32e:	e7fe      	b.n	800b32e <pvPortMalloc+0xf6>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
<<<<<<< HEAD
 800b230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b232:	685a      	ldr	r2, [r3, #4]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	1ad2      	subs	r2, r2, r3
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b242:	69b8      	ldr	r0, [r7, #24]
 800b244:	f000 f908 	bl	800b458 <prvInsertBlockIntoFreeList>
=======
 800b330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b332:	685a      	ldr	r2, [r3, #4]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	1ad2      	subs	r2, r2, r3
 800b338:	69bb      	ldr	r3, [r7, #24]
 800b33a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b342:	69b8      	ldr	r0, [r7, #24]
 800b344:	f000 f908 	bl	800b558 <prvInsertBlockIntoFreeList>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
<<<<<<< HEAD
 800b248:	4b1d      	ldr	r3, [pc, #116]	; (800b2c0 <pvPortMalloc+0x188>)
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	1ad3      	subs	r3, r2, r3
 800b252:	4a1b      	ldr	r2, [pc, #108]	; (800b2c0 <pvPortMalloc+0x188>)
 800b254:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b256:	4b1a      	ldr	r3, [pc, #104]	; (800b2c0 <pvPortMalloc+0x188>)
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	4b1b      	ldr	r3, [pc, #108]	; (800b2c8 <pvPortMalloc+0x190>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d203      	bcs.n	800b26a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b262:	4b17      	ldr	r3, [pc, #92]	; (800b2c0 <pvPortMalloc+0x188>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a18      	ldr	r2, [pc, #96]	; (800b2c8 <pvPortMalloc+0x190>)
 800b268:	6013      	str	r3, [r2, #0]
=======
 800b348:	4b1d      	ldr	r3, [pc, #116]	; (800b3c0 <pvPortMalloc+0x188>)
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	4a1b      	ldr	r2, [pc, #108]	; (800b3c0 <pvPortMalloc+0x188>)
 800b354:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b356:	4b1a      	ldr	r3, [pc, #104]	; (800b3c0 <pvPortMalloc+0x188>)
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	4b1b      	ldr	r3, [pc, #108]	; (800b3c8 <pvPortMalloc+0x190>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	429a      	cmp	r2, r3
 800b360:	d203      	bcs.n	800b36a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b362:	4b17      	ldr	r3, [pc, #92]	; (800b3c0 <pvPortMalloc+0x188>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4a18      	ldr	r2, [pc, #96]	; (800b3c8 <pvPortMalloc+0x190>)
 800b368:	6013      	str	r3, [r2, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
<<<<<<< HEAD
 800b26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26c:	685a      	ldr	r2, [r3, #4]
 800b26e:	4b13      	ldr	r3, [pc, #76]	; (800b2bc <pvPortMalloc+0x184>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	431a      	orrs	r2, r3
 800b274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b276:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27a:	2200      	movs	r2, #0
 800b27c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b27e:	4b13      	ldr	r3, [pc, #76]	; (800b2cc <pvPortMalloc+0x194>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	3301      	adds	r3, #1
 800b284:	4a11      	ldr	r2, [pc, #68]	; (800b2cc <pvPortMalloc+0x194>)
 800b286:	6013      	str	r3, [r2, #0]
=======
 800b36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36c:	685a      	ldr	r2, [r3, #4]
 800b36e:	4b13      	ldr	r3, [pc, #76]	; (800b3bc <pvPortMalloc+0x184>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	431a      	orrs	r2, r3
 800b374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b376:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37a:	2200      	movs	r2, #0
 800b37c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b37e:	4b13      	ldr	r3, [pc, #76]	; (800b3cc <pvPortMalloc+0x194>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	3301      	adds	r3, #1
 800b384:	4a11      	ldr	r2, [pc, #68]	; (800b3cc <pvPortMalloc+0x194>)
 800b386:	6013      	str	r3, [r2, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
<<<<<<< HEAD
 800b288:	f7ff f9de 	bl	800a648 <xTaskResumeAll>
=======
 800b388:	f7ff f9dc 	bl	800a744 <xTaskResumeAll>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
<<<<<<< HEAD
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	f003 0307 	and.w	r3, r3, #7
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00a      	beq.n	800b2ac <pvPortMalloc+0x174>
	__asm volatile
 800b296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29a:	f383 8811 	msr	BASEPRI, r3
 800b29e:	f3bf 8f6f 	isb	sy
 800b2a2:	f3bf 8f4f 	dsb	sy
 800b2a6:	60fb      	str	r3, [r7, #12]
}
 800b2a8:	bf00      	nop
 800b2aa:	e7fe      	b.n	800b2aa <pvPortMalloc+0x172>
	return pvReturn;
 800b2ac:	69fb      	ldr	r3, [r7, #28]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3728      	adds	r7, #40	; 0x28
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	20010334 	.word	0x20010334
 800b2bc:	20010348 	.word	0x20010348
 800b2c0:	20010338 	.word	0x20010338
 800b2c4:	2001032c 	.word	0x2001032c
 800b2c8:	2001033c 	.word	0x2001033c
 800b2cc:	20010340 	.word	0x20010340

0800b2d0 <vPortFree>:
=======
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	f003 0307 	and.w	r3, r3, #7
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00a      	beq.n	800b3ac <pvPortMalloc+0x174>
	__asm volatile
 800b396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39a:	f383 8811 	msr	BASEPRI, r3
 800b39e:	f3bf 8f6f 	isb	sy
 800b3a2:	f3bf 8f4f 	dsb	sy
 800b3a6:	60fb      	str	r3, [r7, #12]
}
 800b3a8:	bf00      	nop
 800b3aa:	e7fe      	b.n	800b3aa <pvPortMalloc+0x172>
	return pvReturn;
 800b3ac:	69fb      	ldr	r3, [r7, #28]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3728      	adds	r7, #40	; 0x28
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	20010338 	.word	0x20010338
 800b3bc:	2001034c 	.word	0x2001034c
 800b3c0:	2001033c 	.word	0x2001033c
 800b3c4:	20010330 	.word	0x20010330
 800b3c8:	20010340 	.word	0x20010340
 800b3cc:	20010344 	.word	0x20010344

0800b3d0 <vPortFree>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
<<<<<<< HEAD
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b086      	sub	sp, #24
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d04d      	beq.n	800b37e <vPortFree+0xae>
=======
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b086      	sub	sp, #24
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d04d      	beq.n	800b47e <vPortFree+0xae>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
<<<<<<< HEAD
 800b2e2:	2308      	movs	r3, #8
 800b2e4:	425b      	negs	r3, r3
 800b2e6:	697a      	ldr	r2, [r7, #20]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	685a      	ldr	r2, [r3, #4]
 800b2f4:	4b24      	ldr	r3, [pc, #144]	; (800b388 <vPortFree+0xb8>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4013      	ands	r3, r2
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d10a      	bne.n	800b314 <vPortFree+0x44>
	__asm volatile
 800b2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b302:	f383 8811 	msr	BASEPRI, r3
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	60fb      	str	r3, [r7, #12]
}
 800b310:	bf00      	nop
 800b312:	e7fe      	b.n	800b312 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00a      	beq.n	800b332 <vPortFree+0x62>
	__asm volatile
 800b31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b320:	f383 8811 	msr	BASEPRI, r3
 800b324:	f3bf 8f6f 	isb	sy
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	60bb      	str	r3, [r7, #8]
}
 800b32e:	bf00      	nop
 800b330:	e7fe      	b.n	800b330 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	685a      	ldr	r2, [r3, #4]
 800b336:	4b14      	ldr	r3, [pc, #80]	; (800b388 <vPortFree+0xb8>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4013      	ands	r3, r2
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d01e      	beq.n	800b37e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d11a      	bne.n	800b37e <vPortFree+0xae>
=======
 800b3e2:	2308      	movs	r3, #8
 800b3e4:	425b      	negs	r3, r3
 800b3e6:	697a      	ldr	r2, [r7, #20]
 800b3e8:	4413      	add	r3, r2
 800b3ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	685a      	ldr	r2, [r3, #4]
 800b3f4:	4b24      	ldr	r3, [pc, #144]	; (800b488 <vPortFree+0xb8>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4013      	ands	r3, r2
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d10a      	bne.n	800b414 <vPortFree+0x44>
	__asm volatile
 800b3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b402:	f383 8811 	msr	BASEPRI, r3
 800b406:	f3bf 8f6f 	isb	sy
 800b40a:	f3bf 8f4f 	dsb	sy
 800b40e:	60fb      	str	r3, [r7, #12]
}
 800b410:	bf00      	nop
 800b412:	e7fe      	b.n	800b412 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00a      	beq.n	800b432 <vPortFree+0x62>
	__asm volatile
 800b41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b420:	f383 8811 	msr	BASEPRI, r3
 800b424:	f3bf 8f6f 	isb	sy
 800b428:	f3bf 8f4f 	dsb	sy
 800b42c:	60bb      	str	r3, [r7, #8]
}
 800b42e:	bf00      	nop
 800b430:	e7fe      	b.n	800b430 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	685a      	ldr	r2, [r3, #4]
 800b436:	4b14      	ldr	r3, [pc, #80]	; (800b488 <vPortFree+0xb8>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4013      	ands	r3, r2
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d01e      	beq.n	800b47e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d11a      	bne.n	800b47e <vPortFree+0xae>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
<<<<<<< HEAD
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	685a      	ldr	r2, [r3, #4]
 800b34c:	4b0e      	ldr	r3, [pc, #56]	; (800b388 <vPortFree+0xb8>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	43db      	mvns	r3, r3
 800b352:	401a      	ands	r2, r3
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b358:	f7ff f968 	bl	800a62c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	685a      	ldr	r2, [r3, #4]
 800b360:	4b0a      	ldr	r3, [pc, #40]	; (800b38c <vPortFree+0xbc>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4413      	add	r3, r2
 800b366:	4a09      	ldr	r2, [pc, #36]	; (800b38c <vPortFree+0xbc>)
 800b368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b36a:	6938      	ldr	r0, [r7, #16]
 800b36c:	f000 f874 	bl	800b458 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b370:	4b07      	ldr	r3, [pc, #28]	; (800b390 <vPortFree+0xc0>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	3301      	adds	r3, #1
 800b376:	4a06      	ldr	r2, [pc, #24]	; (800b390 <vPortFree+0xc0>)
 800b378:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b37a:	f7ff f965 	bl	800a648 <xTaskResumeAll>
=======
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	685a      	ldr	r2, [r3, #4]
 800b44c:	4b0e      	ldr	r3, [pc, #56]	; (800b488 <vPortFree+0xb8>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	43db      	mvns	r3, r3
 800b452:	401a      	ands	r2, r3
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b458:	f7ff f966 	bl	800a728 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	685a      	ldr	r2, [r3, #4]
 800b460:	4b0a      	ldr	r3, [pc, #40]	; (800b48c <vPortFree+0xbc>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4413      	add	r3, r2
 800b466:	4a09      	ldr	r2, [pc, #36]	; (800b48c <vPortFree+0xbc>)
 800b468:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b46a:	6938      	ldr	r0, [r7, #16]
 800b46c:	f000 f874 	bl	800b558 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b470:	4b07      	ldr	r3, [pc, #28]	; (800b490 <vPortFree+0xc0>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	3301      	adds	r3, #1
 800b476:	4a06      	ldr	r2, [pc, #24]	; (800b490 <vPortFree+0xc0>)
 800b478:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b47a:	f7ff f963 	bl	800a744 <xTaskResumeAll>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
<<<<<<< HEAD
 800b37e:	bf00      	nop
 800b380:	3718      	adds	r7, #24
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	20010348 	.word	0x20010348
 800b38c:	20010338 	.word	0x20010338
 800b390:	20010344 	.word	0x20010344

0800b394 <prvHeapInit>:
=======
 800b47e:	bf00      	nop
 800b480:	3718      	adds	r7, #24
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	2001034c 	.word	0x2001034c
 800b48c:	2001033c 	.word	0x2001033c
 800b490:	20010348 	.word	0x20010348

0800b494 <prvHeapInit>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
<<<<<<< HEAD
 800b394:	b480      	push	{r7}
 800b396:	b085      	sub	sp, #20
 800b398:	af00      	add	r7, sp, #0
=======
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
<<<<<<< HEAD
 800b39a:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 800b39e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b3a0:	4b27      	ldr	r3, [pc, #156]	; (800b440 <prvHeapInit+0xac>)
 800b3a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f003 0307 	and.w	r3, r3, #7
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00c      	beq.n	800b3c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	3307      	adds	r3, #7
 800b3b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f023 0307 	bic.w	r3, r3, #7
 800b3ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b3bc:	68ba      	ldr	r2, [r7, #8]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	1ad3      	subs	r3, r2, r3
 800b3c2:	4a1f      	ldr	r2, [pc, #124]	; (800b440 <prvHeapInit+0xac>)
 800b3c4:	4413      	add	r3, r2
 800b3c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	607b      	str	r3, [r7, #4]
=======
 800b49a:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 800b49e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b4a0:	4b27      	ldr	r3, [pc, #156]	; (800b540 <prvHeapInit+0xac>)
 800b4a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f003 0307 	and.w	r3, r3, #7
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d00c      	beq.n	800b4c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	3307      	adds	r3, #7
 800b4b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f023 0307 	bic.w	r3, r3, #7
 800b4ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b4bc:	68ba      	ldr	r2, [r7, #8]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	1ad3      	subs	r3, r2, r3
 800b4c2:	4a1f      	ldr	r2, [pc, #124]	; (800b540 <prvHeapInit+0xac>)
 800b4c4:	4413      	add	r3, r2
 800b4c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	607b      	str	r3, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 800b3cc:	4a1d      	ldr	r2, [pc, #116]	; (800b444 <prvHeapInit+0xb0>)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b3d2:	4b1c      	ldr	r3, [pc, #112]	; (800b444 <prvHeapInit+0xb0>)
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	605a      	str	r2, [r3, #4]
=======
 800b4cc:	4a1d      	ldr	r2, [pc, #116]	; (800b544 <prvHeapInit+0xb0>)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b4d2:	4b1c      	ldr	r3, [pc, #112]	; (800b544 <prvHeapInit+0xb0>)
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	605a      	str	r2, [r3, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
<<<<<<< HEAD
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	68ba      	ldr	r2, [r7, #8]
 800b3dc:	4413      	add	r3, r2
 800b3de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b3e0:	2208      	movs	r2, #8
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	1a9b      	subs	r3, r3, r2
 800b3e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f023 0307 	bic.w	r3, r3, #7
 800b3ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	4a15      	ldr	r2, [pc, #84]	; (800b448 <prvHeapInit+0xb4>)
 800b3f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b3f6:	4b14      	ldr	r3, [pc, #80]	; (800b448 <prvHeapInit+0xb4>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b3fe:	4b12      	ldr	r3, [pc, #72]	; (800b448 <prvHeapInit+0xb4>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2200      	movs	r2, #0
 800b404:	601a      	str	r2, [r3, #0]
=======
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	68ba      	ldr	r2, [r7, #8]
 800b4dc:	4413      	add	r3, r2
 800b4de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b4e0:	2208      	movs	r2, #8
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	1a9b      	subs	r3, r3, r2
 800b4e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	f023 0307 	bic.w	r3, r3, #7
 800b4ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	4a15      	ldr	r2, [pc, #84]	; (800b548 <prvHeapInit+0xb4>)
 800b4f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b4f6:	4b14      	ldr	r3, [pc, #80]	; (800b548 <prvHeapInit+0xb4>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b4fe:	4b12      	ldr	r3, [pc, #72]	; (800b548 <prvHeapInit+0xb4>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2200      	movs	r2, #0
 800b504:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
<<<<<<< HEAD
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	68fa      	ldr	r2, [r7, #12]
 800b40e:	1ad2      	subs	r2, r2, r3
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b414:	4b0c      	ldr	r3, [pc, #48]	; (800b448 <prvHeapInit+0xb4>)
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	4a0a      	ldr	r2, [pc, #40]	; (800b44c <prvHeapInit+0xb8>)
 800b422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	4a09      	ldr	r2, [pc, #36]	; (800b450 <prvHeapInit+0xbc>)
 800b42a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b42c:	4b09      	ldr	r3, [pc, #36]	; (800b454 <prvHeapInit+0xc0>)
 800b42e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b432:	601a      	str	r2, [r3, #0]
}
 800b434:	bf00      	nop
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr
 800b440:	2000092c 	.word	0x2000092c
 800b444:	2001032c 	.word	0x2001032c
 800b448:	20010334 	.word	0x20010334
 800b44c:	2001033c 	.word	0x2001033c
 800b450:	20010338 	.word	0x20010338
 800b454:	20010348 	.word	0x20010348

0800b458 <prvInsertBlockIntoFreeList>:
=======
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	68fa      	ldr	r2, [r7, #12]
 800b50e:	1ad2      	subs	r2, r2, r3
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b514:	4b0c      	ldr	r3, [pc, #48]	; (800b548 <prvHeapInit+0xb4>)
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	4a0a      	ldr	r2, [pc, #40]	; (800b54c <prvHeapInit+0xb8>)
 800b522:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	4a09      	ldr	r2, [pc, #36]	; (800b550 <prvHeapInit+0xbc>)
 800b52a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b52c:	4b09      	ldr	r3, [pc, #36]	; (800b554 <prvHeapInit+0xc0>)
 800b52e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b532:	601a      	str	r2, [r3, #0]
}
 800b534:	bf00      	nop
 800b536:	3714      	adds	r7, #20
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr
 800b540:	20000930 	.word	0x20000930
 800b544:	20010330 	.word	0x20010330
 800b548:	20010338 	.word	0x20010338
 800b54c:	20010340 	.word	0x20010340
 800b550:	2001033c 	.word	0x2001033c
 800b554:	2001034c 	.word	0x2001034c

0800b558 <prvInsertBlockIntoFreeList>:
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
<<<<<<< HEAD
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
=======
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
<<<<<<< HEAD
 800b460:	4b28      	ldr	r3, [pc, #160]	; (800b504 <prvInsertBlockIntoFreeList+0xac>)
 800b462:	60fb      	str	r3, [r7, #12]
 800b464:	e002      	b.n	800b46c <prvInsertBlockIntoFreeList+0x14>
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	60fb      	str	r3, [r7, #12]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	429a      	cmp	r2, r3
 800b474:	d8f7      	bhi.n	800b466 <prvInsertBlockIntoFreeList+0xe>
=======
 800b560:	4b28      	ldr	r3, [pc, #160]	; (800b604 <prvInsertBlockIntoFreeList+0xac>)
 800b562:	60fb      	str	r3, [r7, #12]
 800b564:	e002      	b.n	800b56c <prvInsertBlockIntoFreeList+0x14>
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	60fb      	str	r3, [r7, #12]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	429a      	cmp	r2, r3
 800b574:	d8f7      	bhi.n	800b566 <prvInsertBlockIntoFreeList+0xe>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
<<<<<<< HEAD
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	68ba      	ldr	r2, [r7, #8]
 800b480:	4413      	add	r3, r2
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	429a      	cmp	r2, r3
 800b486:	d108      	bne.n	800b49a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	685a      	ldr	r2, [r3, #4]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	441a      	add	r2, r3
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	607b      	str	r3, [r7, #4]
=======
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	4413      	add	r3, r2
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	429a      	cmp	r2, r3
 800b586:	d108      	bne.n	800b59a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	685a      	ldr	r2, [r3, #4]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	441a      	add	r2, r3
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	607b      	str	r3, [r7, #4]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
<<<<<<< HEAD
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	68ba      	ldr	r2, [r7, #8]
 800b4a4:	441a      	add	r2, r3
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d118      	bne.n	800b4e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	4b15      	ldr	r3, [pc, #84]	; (800b508 <prvInsertBlockIntoFreeList+0xb0>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d00d      	beq.n	800b4d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	685a      	ldr	r2, [r3, #4]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	441a      	add	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	601a      	str	r2, [r3, #0]
 800b4d4:	e008      	b.n	800b4e8 <prvInsertBlockIntoFreeList+0x90>
=======
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	68ba      	ldr	r2, [r7, #8]
 800b5a4:	441a      	add	r2, r3
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d118      	bne.n	800b5e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681a      	ldr	r2, [r3, #0]
 800b5b2:	4b15      	ldr	r3, [pc, #84]	; (800b608 <prvInsertBlockIntoFreeList+0xb0>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d00d      	beq.n	800b5d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	685a      	ldr	r2, [r3, #4]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	441a      	add	r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	601a      	str	r2, [r3, #0]
 800b5d4:	e008      	b.n	800b5e8 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
<<<<<<< HEAD
 800b4d6:	4b0c      	ldr	r3, [pc, #48]	; (800b508 <prvInsertBlockIntoFreeList+0xb0>)
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	601a      	str	r2, [r3, #0]
 800b4de:	e003      	b.n	800b4e8 <prvInsertBlockIntoFreeList+0x90>
=======
 800b5d6:	4b0c      	ldr	r3, [pc, #48]	; (800b608 <prvInsertBlockIntoFreeList+0xb0>)
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	601a      	str	r2, [r3, #0]
 800b5de:	e003      	b.n	800b5e8 <prvInsertBlockIntoFreeList+0x90>
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
<<<<<<< HEAD
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	601a      	str	r2, [r3, #0]
=======
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
<<<<<<< HEAD
 800b4e8:	68fa      	ldr	r2, [r7, #12]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d002      	beq.n	800b4f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	687a      	ldr	r2, [r7, #4]
 800b4f4:	601a      	str	r2, [r3, #0]
=======
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d002      	beq.n	800b5f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	601a      	str	r2, [r3, #0]
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
<<<<<<< HEAD
 800b4f6:	bf00      	nop
 800b4f8:	3714      	adds	r7, #20
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	2001032c 	.word	0x2001032c
 800b508:	20010334 	.word	0x20010334

0800b50c <__errno>:
 800b50c:	4b01      	ldr	r3, [pc, #4]	; (800b514 <__errno+0x8>)
 800b50e:	6818      	ldr	r0, [r3, #0]
 800b510:	4770      	bx	lr
 800b512:	bf00      	nop
 800b514:	20000010 	.word	0x20000010

0800b518 <__libc_init_array>:
 800b518:	b570      	push	{r4, r5, r6, lr}
 800b51a:	4d0d      	ldr	r5, [pc, #52]	; (800b550 <__libc_init_array+0x38>)
 800b51c:	4c0d      	ldr	r4, [pc, #52]	; (800b554 <__libc_init_array+0x3c>)
 800b51e:	1b64      	subs	r4, r4, r5
 800b520:	10a4      	asrs	r4, r4, #2
 800b522:	2600      	movs	r6, #0
 800b524:	42a6      	cmp	r6, r4
 800b526:	d109      	bne.n	800b53c <__libc_init_array+0x24>
 800b528:	4d0b      	ldr	r5, [pc, #44]	; (800b558 <__libc_init_array+0x40>)
 800b52a:	4c0c      	ldr	r4, [pc, #48]	; (800b55c <__libc_init_array+0x44>)
 800b52c:	f000 fcf6 	bl	800bf1c <_init>
 800b530:	1b64      	subs	r4, r4, r5
 800b532:	10a4      	asrs	r4, r4, #2
 800b534:	2600      	movs	r6, #0
 800b536:	42a6      	cmp	r6, r4
 800b538:	d105      	bne.n	800b546 <__libc_init_array+0x2e>
 800b53a:	bd70      	pop	{r4, r5, r6, pc}
 800b53c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b540:	4798      	blx	r3
 800b542:	3601      	adds	r6, #1
 800b544:	e7ee      	b.n	800b524 <__libc_init_array+0xc>
 800b546:	f855 3b04 	ldr.w	r3, [r5], #4
 800b54a:	4798      	blx	r3
 800b54c:	3601      	adds	r6, #1
 800b54e:	e7f2      	b.n	800b536 <__libc_init_array+0x1e>
 800b550:	0800c30c 	.word	0x0800c30c
 800b554:	0800c30c 	.word	0x0800c30c
 800b558:	0800c30c 	.word	0x0800c30c
 800b55c:	0800c310 	.word	0x0800c310

0800b560 <memcpy>:
 800b560:	440a      	add	r2, r1
 800b562:	4291      	cmp	r1, r2
 800b564:	f100 33ff 	add.w	r3, r0, #4294967295
 800b568:	d100      	bne.n	800b56c <memcpy+0xc>
 800b56a:	4770      	bx	lr
 800b56c:	b510      	push	{r4, lr}
 800b56e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b572:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b576:	4291      	cmp	r1, r2
 800b578:	d1f9      	bne.n	800b56e <memcpy+0xe>
 800b57a:	bd10      	pop	{r4, pc}

0800b57c <memset>:
 800b57c:	4402      	add	r2, r0
 800b57e:	4603      	mov	r3, r0
 800b580:	4293      	cmp	r3, r2
 800b582:	d100      	bne.n	800b586 <memset+0xa>
 800b584:	4770      	bx	lr
 800b586:	f803 1b01 	strb.w	r1, [r3], #1
 800b58a:	e7f9      	b.n	800b580 <memset+0x4>

0800b58c <_free_r>:
 800b58c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b58e:	2900      	cmp	r1, #0
 800b590:	d044      	beq.n	800b61c <_free_r+0x90>
 800b592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b596:	9001      	str	r0, [sp, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	f1a1 0404 	sub.w	r4, r1, #4
 800b59e:	bfb8      	it	lt
 800b5a0:	18e4      	addlt	r4, r4, r3
 800b5a2:	f000 f96d 	bl	800b880 <__malloc_lock>
 800b5a6:	4a1e      	ldr	r2, [pc, #120]	; (800b620 <_free_r+0x94>)
 800b5a8:	9801      	ldr	r0, [sp, #4]
 800b5aa:	6813      	ldr	r3, [r2, #0]
 800b5ac:	b933      	cbnz	r3, 800b5bc <_free_r+0x30>
 800b5ae:	6063      	str	r3, [r4, #4]
 800b5b0:	6014      	str	r4, [r2, #0]
 800b5b2:	b003      	add	sp, #12
 800b5b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5b8:	f000 b968 	b.w	800b88c <__malloc_unlock>
 800b5bc:	42a3      	cmp	r3, r4
 800b5be:	d908      	bls.n	800b5d2 <_free_r+0x46>
 800b5c0:	6825      	ldr	r5, [r4, #0]
 800b5c2:	1961      	adds	r1, r4, r5
 800b5c4:	428b      	cmp	r3, r1
 800b5c6:	bf01      	itttt	eq
 800b5c8:	6819      	ldreq	r1, [r3, #0]
 800b5ca:	685b      	ldreq	r3, [r3, #4]
 800b5cc:	1949      	addeq	r1, r1, r5
 800b5ce:	6021      	streq	r1, [r4, #0]
 800b5d0:	e7ed      	b.n	800b5ae <_free_r+0x22>
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	b10b      	cbz	r3, 800b5dc <_free_r+0x50>
 800b5d8:	42a3      	cmp	r3, r4
 800b5da:	d9fa      	bls.n	800b5d2 <_free_r+0x46>
 800b5dc:	6811      	ldr	r1, [r2, #0]
 800b5de:	1855      	adds	r5, r2, r1
 800b5e0:	42a5      	cmp	r5, r4
 800b5e2:	d10b      	bne.n	800b5fc <_free_r+0x70>
 800b5e4:	6824      	ldr	r4, [r4, #0]
 800b5e6:	4421      	add	r1, r4
 800b5e8:	1854      	adds	r4, r2, r1
 800b5ea:	42a3      	cmp	r3, r4
 800b5ec:	6011      	str	r1, [r2, #0]
 800b5ee:	d1e0      	bne.n	800b5b2 <_free_r+0x26>
 800b5f0:	681c      	ldr	r4, [r3, #0]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	6053      	str	r3, [r2, #4]
 800b5f6:	4421      	add	r1, r4
 800b5f8:	6011      	str	r1, [r2, #0]
 800b5fa:	e7da      	b.n	800b5b2 <_free_r+0x26>
 800b5fc:	d902      	bls.n	800b604 <_free_r+0x78>
 800b5fe:	230c      	movs	r3, #12
 800b600:	6003      	str	r3, [r0, #0]
 800b602:	e7d6      	b.n	800b5b2 <_free_r+0x26>
 800b604:	6825      	ldr	r5, [r4, #0]
 800b606:	1961      	adds	r1, r4, r5
 800b608:	428b      	cmp	r3, r1
 800b60a:	bf04      	itt	eq
 800b60c:	6819      	ldreq	r1, [r3, #0]
 800b60e:	685b      	ldreq	r3, [r3, #4]
 800b610:	6063      	str	r3, [r4, #4]
 800b612:	bf04      	itt	eq
 800b614:	1949      	addeq	r1, r1, r5
 800b616:	6021      	streq	r1, [r4, #0]
 800b618:	6054      	str	r4, [r2, #4]
 800b61a:	e7ca      	b.n	800b5b2 <_free_r+0x26>
 800b61c:	b003      	add	sp, #12
 800b61e:	bd30      	pop	{r4, r5, pc}
 800b620:	2001034c 	.word	0x2001034c

0800b624 <sbrk_aligned>:
 800b624:	b570      	push	{r4, r5, r6, lr}
 800b626:	4e0e      	ldr	r6, [pc, #56]	; (800b660 <sbrk_aligned+0x3c>)
 800b628:	460c      	mov	r4, r1
 800b62a:	6831      	ldr	r1, [r6, #0]
 800b62c:	4605      	mov	r5, r0
 800b62e:	b911      	cbnz	r1, 800b636 <sbrk_aligned+0x12>
 800b630:	f000 f8f6 	bl	800b820 <_sbrk_r>
 800b634:	6030      	str	r0, [r6, #0]
 800b636:	4621      	mov	r1, r4
 800b638:	4628      	mov	r0, r5
 800b63a:	f000 f8f1 	bl	800b820 <_sbrk_r>
 800b63e:	1c43      	adds	r3, r0, #1
 800b640:	d00a      	beq.n	800b658 <sbrk_aligned+0x34>
 800b642:	1cc4      	adds	r4, r0, #3
 800b644:	f024 0403 	bic.w	r4, r4, #3
 800b648:	42a0      	cmp	r0, r4
 800b64a:	d007      	beq.n	800b65c <sbrk_aligned+0x38>
 800b64c:	1a21      	subs	r1, r4, r0
 800b64e:	4628      	mov	r0, r5
 800b650:	f000 f8e6 	bl	800b820 <_sbrk_r>
 800b654:	3001      	adds	r0, #1
 800b656:	d101      	bne.n	800b65c <sbrk_aligned+0x38>
 800b658:	f04f 34ff 	mov.w	r4, #4294967295
 800b65c:	4620      	mov	r0, r4
 800b65e:	bd70      	pop	{r4, r5, r6, pc}
 800b660:	20010350 	.word	0x20010350

0800b664 <_malloc_r>:
 800b664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b668:	1ccd      	adds	r5, r1, #3
 800b66a:	f025 0503 	bic.w	r5, r5, #3
 800b66e:	3508      	adds	r5, #8
 800b670:	2d0c      	cmp	r5, #12
 800b672:	bf38      	it	cc
 800b674:	250c      	movcc	r5, #12
 800b676:	2d00      	cmp	r5, #0
 800b678:	4607      	mov	r7, r0
 800b67a:	db01      	blt.n	800b680 <_malloc_r+0x1c>
 800b67c:	42a9      	cmp	r1, r5
 800b67e:	d905      	bls.n	800b68c <_malloc_r+0x28>
 800b680:	230c      	movs	r3, #12
 800b682:	603b      	str	r3, [r7, #0]
 800b684:	2600      	movs	r6, #0
 800b686:	4630      	mov	r0, r6
 800b688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b68c:	4e2e      	ldr	r6, [pc, #184]	; (800b748 <_malloc_r+0xe4>)
 800b68e:	f000 f8f7 	bl	800b880 <__malloc_lock>
 800b692:	6833      	ldr	r3, [r6, #0]
 800b694:	461c      	mov	r4, r3
 800b696:	bb34      	cbnz	r4, 800b6e6 <_malloc_r+0x82>
 800b698:	4629      	mov	r1, r5
 800b69a:	4638      	mov	r0, r7
 800b69c:	f7ff ffc2 	bl	800b624 <sbrk_aligned>
 800b6a0:	1c43      	adds	r3, r0, #1
 800b6a2:	4604      	mov	r4, r0
 800b6a4:	d14d      	bne.n	800b742 <_malloc_r+0xde>
 800b6a6:	6834      	ldr	r4, [r6, #0]
 800b6a8:	4626      	mov	r6, r4
 800b6aa:	2e00      	cmp	r6, #0
 800b6ac:	d140      	bne.n	800b730 <_malloc_r+0xcc>
 800b6ae:	6823      	ldr	r3, [r4, #0]
 800b6b0:	4631      	mov	r1, r6
 800b6b2:	4638      	mov	r0, r7
 800b6b4:	eb04 0803 	add.w	r8, r4, r3
 800b6b8:	f000 f8b2 	bl	800b820 <_sbrk_r>
 800b6bc:	4580      	cmp	r8, r0
 800b6be:	d13a      	bne.n	800b736 <_malloc_r+0xd2>
 800b6c0:	6821      	ldr	r1, [r4, #0]
 800b6c2:	3503      	adds	r5, #3
 800b6c4:	1a6d      	subs	r5, r5, r1
 800b6c6:	f025 0503 	bic.w	r5, r5, #3
 800b6ca:	3508      	adds	r5, #8
 800b6cc:	2d0c      	cmp	r5, #12
 800b6ce:	bf38      	it	cc
 800b6d0:	250c      	movcc	r5, #12
 800b6d2:	4629      	mov	r1, r5
 800b6d4:	4638      	mov	r0, r7
 800b6d6:	f7ff ffa5 	bl	800b624 <sbrk_aligned>
 800b6da:	3001      	adds	r0, #1
 800b6dc:	d02b      	beq.n	800b736 <_malloc_r+0xd2>
 800b6de:	6823      	ldr	r3, [r4, #0]
 800b6e0:	442b      	add	r3, r5
 800b6e2:	6023      	str	r3, [r4, #0]
 800b6e4:	e00e      	b.n	800b704 <_malloc_r+0xa0>
 800b6e6:	6822      	ldr	r2, [r4, #0]
 800b6e8:	1b52      	subs	r2, r2, r5
 800b6ea:	d41e      	bmi.n	800b72a <_malloc_r+0xc6>
 800b6ec:	2a0b      	cmp	r2, #11
 800b6ee:	d916      	bls.n	800b71e <_malloc_r+0xba>
 800b6f0:	1961      	adds	r1, r4, r5
 800b6f2:	42a3      	cmp	r3, r4
 800b6f4:	6025      	str	r5, [r4, #0]
 800b6f6:	bf18      	it	ne
 800b6f8:	6059      	strne	r1, [r3, #4]
 800b6fa:	6863      	ldr	r3, [r4, #4]
 800b6fc:	bf08      	it	eq
 800b6fe:	6031      	streq	r1, [r6, #0]
 800b700:	5162      	str	r2, [r4, r5]
 800b702:	604b      	str	r3, [r1, #4]
 800b704:	4638      	mov	r0, r7
 800b706:	f104 060b 	add.w	r6, r4, #11
 800b70a:	f000 f8bf 	bl	800b88c <__malloc_unlock>
 800b70e:	f026 0607 	bic.w	r6, r6, #7
 800b712:	1d23      	adds	r3, r4, #4
 800b714:	1af2      	subs	r2, r6, r3
 800b716:	d0b6      	beq.n	800b686 <_malloc_r+0x22>
 800b718:	1b9b      	subs	r3, r3, r6
 800b71a:	50a3      	str	r3, [r4, r2]
 800b71c:	e7b3      	b.n	800b686 <_malloc_r+0x22>
 800b71e:	6862      	ldr	r2, [r4, #4]
 800b720:	42a3      	cmp	r3, r4
 800b722:	bf0c      	ite	eq
 800b724:	6032      	streq	r2, [r6, #0]
 800b726:	605a      	strne	r2, [r3, #4]
 800b728:	e7ec      	b.n	800b704 <_malloc_r+0xa0>
 800b72a:	4623      	mov	r3, r4
 800b72c:	6864      	ldr	r4, [r4, #4]
 800b72e:	e7b2      	b.n	800b696 <_malloc_r+0x32>
 800b730:	4634      	mov	r4, r6
 800b732:	6876      	ldr	r6, [r6, #4]
 800b734:	e7b9      	b.n	800b6aa <_malloc_r+0x46>
 800b736:	230c      	movs	r3, #12
 800b738:	603b      	str	r3, [r7, #0]
 800b73a:	4638      	mov	r0, r7
 800b73c:	f000 f8a6 	bl	800b88c <__malloc_unlock>
 800b740:	e7a1      	b.n	800b686 <_malloc_r+0x22>
 800b742:	6025      	str	r5, [r4, #0]
 800b744:	e7de      	b.n	800b704 <_malloc_r+0xa0>
 800b746:	bf00      	nop
 800b748:	2001034c 	.word	0x2001034c

0800b74c <cleanup_glue>:
 800b74c:	b538      	push	{r3, r4, r5, lr}
 800b74e:	460c      	mov	r4, r1
 800b750:	6809      	ldr	r1, [r1, #0]
 800b752:	4605      	mov	r5, r0
 800b754:	b109      	cbz	r1, 800b75a <cleanup_glue+0xe>
 800b756:	f7ff fff9 	bl	800b74c <cleanup_glue>
 800b75a:	4621      	mov	r1, r4
 800b75c:	4628      	mov	r0, r5
 800b75e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b762:	f7ff bf13 	b.w	800b58c <_free_r>
	...

0800b768 <_reclaim_reent>:
 800b768:	4b2c      	ldr	r3, [pc, #176]	; (800b81c <_reclaim_reent+0xb4>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4283      	cmp	r3, r0
 800b76e:	b570      	push	{r4, r5, r6, lr}
 800b770:	4604      	mov	r4, r0
 800b772:	d051      	beq.n	800b818 <_reclaim_reent+0xb0>
 800b774:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b776:	b143      	cbz	r3, 800b78a <_reclaim_reent+0x22>
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d14a      	bne.n	800b814 <_reclaim_reent+0xac>
 800b77e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b780:	6819      	ldr	r1, [r3, #0]
 800b782:	b111      	cbz	r1, 800b78a <_reclaim_reent+0x22>
 800b784:	4620      	mov	r0, r4
 800b786:	f7ff ff01 	bl	800b58c <_free_r>
 800b78a:	6961      	ldr	r1, [r4, #20]
 800b78c:	b111      	cbz	r1, 800b794 <_reclaim_reent+0x2c>
 800b78e:	4620      	mov	r0, r4
 800b790:	f7ff fefc 	bl	800b58c <_free_r>
 800b794:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b796:	b111      	cbz	r1, 800b79e <_reclaim_reent+0x36>
 800b798:	4620      	mov	r0, r4
 800b79a:	f7ff fef7 	bl	800b58c <_free_r>
 800b79e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b7a0:	b111      	cbz	r1, 800b7a8 <_reclaim_reent+0x40>
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f7ff fef2 	bl	800b58c <_free_r>
 800b7a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b7aa:	b111      	cbz	r1, 800b7b2 <_reclaim_reent+0x4a>
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f7ff feed 	bl	800b58c <_free_r>
 800b7b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b7b4:	b111      	cbz	r1, 800b7bc <_reclaim_reent+0x54>
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f7ff fee8 	bl	800b58c <_free_r>
 800b7bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b7be:	b111      	cbz	r1, 800b7c6 <_reclaim_reent+0x5e>
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	f7ff fee3 	bl	800b58c <_free_r>
 800b7c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b7c8:	b111      	cbz	r1, 800b7d0 <_reclaim_reent+0x68>
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f7ff fede 	bl	800b58c <_free_r>
 800b7d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7d2:	b111      	cbz	r1, 800b7da <_reclaim_reent+0x72>
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f7ff fed9 	bl	800b58c <_free_r>
 800b7da:	69a3      	ldr	r3, [r4, #24]
 800b7dc:	b1e3      	cbz	r3, 800b818 <_reclaim_reent+0xb0>
 800b7de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	4798      	blx	r3
 800b7e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b7e6:	b1b9      	cbz	r1, 800b818 <_reclaim_reent+0xb0>
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b7ee:	f7ff bfad 	b.w	800b74c <cleanup_glue>
 800b7f2:	5949      	ldr	r1, [r1, r5]
 800b7f4:	b941      	cbnz	r1, 800b808 <_reclaim_reent+0xa0>
 800b7f6:	3504      	adds	r5, #4
 800b7f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7fa:	2d80      	cmp	r5, #128	; 0x80
 800b7fc:	68d9      	ldr	r1, [r3, #12]
 800b7fe:	d1f8      	bne.n	800b7f2 <_reclaim_reent+0x8a>
 800b800:	4620      	mov	r0, r4
 800b802:	f7ff fec3 	bl	800b58c <_free_r>
 800b806:	e7ba      	b.n	800b77e <_reclaim_reent+0x16>
 800b808:	680e      	ldr	r6, [r1, #0]
 800b80a:	4620      	mov	r0, r4
 800b80c:	f7ff febe 	bl	800b58c <_free_r>
 800b810:	4631      	mov	r1, r6
 800b812:	e7ef      	b.n	800b7f4 <_reclaim_reent+0x8c>
 800b814:	2500      	movs	r5, #0
 800b816:	e7ef      	b.n	800b7f8 <_reclaim_reent+0x90>
 800b818:	bd70      	pop	{r4, r5, r6, pc}
 800b81a:	bf00      	nop
 800b81c:	20000010 	.word	0x20000010

0800b820 <_sbrk_r>:
 800b820:	b538      	push	{r3, r4, r5, lr}
 800b822:	4d06      	ldr	r5, [pc, #24]	; (800b83c <_sbrk_r+0x1c>)
 800b824:	2300      	movs	r3, #0
 800b826:	4604      	mov	r4, r0
 800b828:	4608      	mov	r0, r1
 800b82a:	602b      	str	r3, [r5, #0]
 800b82c:	f7f6 fcc8 	bl	80021c0 <_sbrk>
 800b830:	1c43      	adds	r3, r0, #1
 800b832:	d102      	bne.n	800b83a <_sbrk_r+0x1a>
 800b834:	682b      	ldr	r3, [r5, #0]
 800b836:	b103      	cbz	r3, 800b83a <_sbrk_r+0x1a>
 800b838:	6023      	str	r3, [r4, #0]
 800b83a:	bd38      	pop	{r3, r4, r5, pc}
 800b83c:	20010354 	.word	0x20010354

0800b840 <siprintf>:
 800b840:	b40e      	push	{r1, r2, r3}
 800b842:	b500      	push	{lr}
 800b844:	b09c      	sub	sp, #112	; 0x70
 800b846:	ab1d      	add	r3, sp, #116	; 0x74
 800b848:	9002      	str	r0, [sp, #8]
 800b84a:	9006      	str	r0, [sp, #24]
 800b84c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b850:	4809      	ldr	r0, [pc, #36]	; (800b878 <siprintf+0x38>)
 800b852:	9107      	str	r1, [sp, #28]
 800b854:	9104      	str	r1, [sp, #16]
 800b856:	4909      	ldr	r1, [pc, #36]	; (800b87c <siprintf+0x3c>)
 800b858:	f853 2b04 	ldr.w	r2, [r3], #4
 800b85c:	9105      	str	r1, [sp, #20]
 800b85e:	6800      	ldr	r0, [r0, #0]
 800b860:	9301      	str	r3, [sp, #4]
 800b862:	a902      	add	r1, sp, #8
 800b864:	f000 f874 	bl	800b950 <_svfiprintf_r>
 800b868:	9b02      	ldr	r3, [sp, #8]
 800b86a:	2200      	movs	r2, #0
 800b86c:	701a      	strb	r2, [r3, #0]
 800b86e:	b01c      	add	sp, #112	; 0x70
 800b870:	f85d eb04 	ldr.w	lr, [sp], #4
 800b874:	b003      	add	sp, #12
 800b876:	4770      	bx	lr
 800b878:	20000010 	.word	0x20000010
 800b87c:	ffff0208 	.word	0xffff0208

0800b880 <__malloc_lock>:
 800b880:	4801      	ldr	r0, [pc, #4]	; (800b888 <__malloc_lock+0x8>)
 800b882:	f7f6 bdda 	b.w	800243a <__retarget_lock_acquire_recursive>
 800b886:	bf00      	nop
 800b888:	200007e8 	.word	0x200007e8

0800b88c <__malloc_unlock>:
 800b88c:	4801      	ldr	r0, [pc, #4]	; (800b894 <__malloc_unlock+0x8>)
 800b88e:	f7f6 bde8 	b.w	8002462 <__retarget_lock_release_recursive>
 800b892:	bf00      	nop
 800b894:	200007e8 	.word	0x200007e8

0800b898 <__ssputs_r>:
 800b898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b89c:	688e      	ldr	r6, [r1, #8]
 800b89e:	429e      	cmp	r6, r3
 800b8a0:	4682      	mov	sl, r0
 800b8a2:	460c      	mov	r4, r1
 800b8a4:	4690      	mov	r8, r2
 800b8a6:	461f      	mov	r7, r3
 800b8a8:	d838      	bhi.n	800b91c <__ssputs_r+0x84>
 800b8aa:	898a      	ldrh	r2, [r1, #12]
 800b8ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8b0:	d032      	beq.n	800b918 <__ssputs_r+0x80>
 800b8b2:	6825      	ldr	r5, [r4, #0]
 800b8b4:	6909      	ldr	r1, [r1, #16]
 800b8b6:	eba5 0901 	sub.w	r9, r5, r1
 800b8ba:	6965      	ldr	r5, [r4, #20]
 800b8bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	444b      	add	r3, r9
 800b8c8:	106d      	asrs	r5, r5, #1
 800b8ca:	429d      	cmp	r5, r3
 800b8cc:	bf38      	it	cc
 800b8ce:	461d      	movcc	r5, r3
 800b8d0:	0553      	lsls	r3, r2, #21
 800b8d2:	d531      	bpl.n	800b938 <__ssputs_r+0xa0>
 800b8d4:	4629      	mov	r1, r5
 800b8d6:	f7ff fec5 	bl	800b664 <_malloc_r>
 800b8da:	4606      	mov	r6, r0
 800b8dc:	b950      	cbnz	r0, 800b8f4 <__ssputs_r+0x5c>
 800b8de:	230c      	movs	r3, #12
 800b8e0:	f8ca 3000 	str.w	r3, [sl]
 800b8e4:	89a3      	ldrh	r3, [r4, #12]
 800b8e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8ea:	81a3      	strh	r3, [r4, #12]
 800b8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f4:	6921      	ldr	r1, [r4, #16]
 800b8f6:	464a      	mov	r2, r9
 800b8f8:	f7ff fe32 	bl	800b560 <memcpy>
 800b8fc:	89a3      	ldrh	r3, [r4, #12]
 800b8fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b906:	81a3      	strh	r3, [r4, #12]
 800b908:	6126      	str	r6, [r4, #16]
 800b90a:	6165      	str	r5, [r4, #20]
 800b90c:	444e      	add	r6, r9
 800b90e:	eba5 0509 	sub.w	r5, r5, r9
 800b912:	6026      	str	r6, [r4, #0]
 800b914:	60a5      	str	r5, [r4, #8]
 800b916:	463e      	mov	r6, r7
 800b918:	42be      	cmp	r6, r7
 800b91a:	d900      	bls.n	800b91e <__ssputs_r+0x86>
 800b91c:	463e      	mov	r6, r7
 800b91e:	6820      	ldr	r0, [r4, #0]
 800b920:	4632      	mov	r2, r6
 800b922:	4641      	mov	r1, r8
 800b924:	f000 faa8 	bl	800be78 <memmove>
 800b928:	68a3      	ldr	r3, [r4, #8]
 800b92a:	1b9b      	subs	r3, r3, r6
 800b92c:	60a3      	str	r3, [r4, #8]
 800b92e:	6823      	ldr	r3, [r4, #0]
 800b930:	4433      	add	r3, r6
 800b932:	6023      	str	r3, [r4, #0]
 800b934:	2000      	movs	r0, #0
 800b936:	e7db      	b.n	800b8f0 <__ssputs_r+0x58>
 800b938:	462a      	mov	r2, r5
 800b93a:	f000 fab7 	bl	800beac <_realloc_r>
 800b93e:	4606      	mov	r6, r0
 800b940:	2800      	cmp	r0, #0
 800b942:	d1e1      	bne.n	800b908 <__ssputs_r+0x70>
 800b944:	6921      	ldr	r1, [r4, #16]
 800b946:	4650      	mov	r0, sl
 800b948:	f7ff fe20 	bl	800b58c <_free_r>
 800b94c:	e7c7      	b.n	800b8de <__ssputs_r+0x46>
	...

0800b950 <_svfiprintf_r>:
 800b950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b954:	4698      	mov	r8, r3
 800b956:	898b      	ldrh	r3, [r1, #12]
 800b958:	061b      	lsls	r3, r3, #24
 800b95a:	b09d      	sub	sp, #116	; 0x74
 800b95c:	4607      	mov	r7, r0
 800b95e:	460d      	mov	r5, r1
 800b960:	4614      	mov	r4, r2
 800b962:	d50e      	bpl.n	800b982 <_svfiprintf_r+0x32>
 800b964:	690b      	ldr	r3, [r1, #16]
 800b966:	b963      	cbnz	r3, 800b982 <_svfiprintf_r+0x32>
 800b968:	2140      	movs	r1, #64	; 0x40
 800b96a:	f7ff fe7b 	bl	800b664 <_malloc_r>
 800b96e:	6028      	str	r0, [r5, #0]
 800b970:	6128      	str	r0, [r5, #16]
 800b972:	b920      	cbnz	r0, 800b97e <_svfiprintf_r+0x2e>
 800b974:	230c      	movs	r3, #12
 800b976:	603b      	str	r3, [r7, #0]
 800b978:	f04f 30ff 	mov.w	r0, #4294967295
 800b97c:	e0d1      	b.n	800bb22 <_svfiprintf_r+0x1d2>
 800b97e:	2340      	movs	r3, #64	; 0x40
 800b980:	616b      	str	r3, [r5, #20]
 800b982:	2300      	movs	r3, #0
 800b984:	9309      	str	r3, [sp, #36]	; 0x24
 800b986:	2320      	movs	r3, #32
 800b988:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b98c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b990:	2330      	movs	r3, #48	; 0x30
 800b992:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bb3c <_svfiprintf_r+0x1ec>
 800b996:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b99a:	f04f 0901 	mov.w	r9, #1
 800b99e:	4623      	mov	r3, r4
 800b9a0:	469a      	mov	sl, r3
 800b9a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9a6:	b10a      	cbz	r2, 800b9ac <_svfiprintf_r+0x5c>
 800b9a8:	2a25      	cmp	r2, #37	; 0x25
 800b9aa:	d1f9      	bne.n	800b9a0 <_svfiprintf_r+0x50>
 800b9ac:	ebba 0b04 	subs.w	fp, sl, r4
 800b9b0:	d00b      	beq.n	800b9ca <_svfiprintf_r+0x7a>
 800b9b2:	465b      	mov	r3, fp
 800b9b4:	4622      	mov	r2, r4
 800b9b6:	4629      	mov	r1, r5
 800b9b8:	4638      	mov	r0, r7
 800b9ba:	f7ff ff6d 	bl	800b898 <__ssputs_r>
 800b9be:	3001      	adds	r0, #1
 800b9c0:	f000 80aa 	beq.w	800bb18 <_svfiprintf_r+0x1c8>
 800b9c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9c6:	445a      	add	r2, fp
 800b9c8:	9209      	str	r2, [sp, #36]	; 0x24
 800b9ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	f000 80a2 	beq.w	800bb18 <_svfiprintf_r+0x1c8>
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b9da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9de:	f10a 0a01 	add.w	sl, sl, #1
 800b9e2:	9304      	str	r3, [sp, #16]
 800b9e4:	9307      	str	r3, [sp, #28]
 800b9e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9ea:	931a      	str	r3, [sp, #104]	; 0x68
 800b9ec:	4654      	mov	r4, sl
 800b9ee:	2205      	movs	r2, #5
 800b9f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9f4:	4851      	ldr	r0, [pc, #324]	; (800bb3c <_svfiprintf_r+0x1ec>)
 800b9f6:	f7f4 fc0b 	bl	8000210 <memchr>
 800b9fa:	9a04      	ldr	r2, [sp, #16]
 800b9fc:	b9d8      	cbnz	r0, 800ba36 <_svfiprintf_r+0xe6>
 800b9fe:	06d0      	lsls	r0, r2, #27
 800ba00:	bf44      	itt	mi
 800ba02:	2320      	movmi	r3, #32
 800ba04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba08:	0711      	lsls	r1, r2, #28
 800ba0a:	bf44      	itt	mi
 800ba0c:	232b      	movmi	r3, #43	; 0x2b
 800ba0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba12:	f89a 3000 	ldrb.w	r3, [sl]
 800ba16:	2b2a      	cmp	r3, #42	; 0x2a
 800ba18:	d015      	beq.n	800ba46 <_svfiprintf_r+0xf6>
 800ba1a:	9a07      	ldr	r2, [sp, #28]
 800ba1c:	4654      	mov	r4, sl
 800ba1e:	2000      	movs	r0, #0
 800ba20:	f04f 0c0a 	mov.w	ip, #10
 800ba24:	4621      	mov	r1, r4
 800ba26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba2a:	3b30      	subs	r3, #48	; 0x30
 800ba2c:	2b09      	cmp	r3, #9
 800ba2e:	d94e      	bls.n	800bace <_svfiprintf_r+0x17e>
 800ba30:	b1b0      	cbz	r0, 800ba60 <_svfiprintf_r+0x110>
 800ba32:	9207      	str	r2, [sp, #28]
 800ba34:	e014      	b.n	800ba60 <_svfiprintf_r+0x110>
 800ba36:	eba0 0308 	sub.w	r3, r0, r8
 800ba3a:	fa09 f303 	lsl.w	r3, r9, r3
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	9304      	str	r3, [sp, #16]
 800ba42:	46a2      	mov	sl, r4
 800ba44:	e7d2      	b.n	800b9ec <_svfiprintf_r+0x9c>
 800ba46:	9b03      	ldr	r3, [sp, #12]
 800ba48:	1d19      	adds	r1, r3, #4
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	9103      	str	r1, [sp, #12]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	bfbb      	ittet	lt
 800ba52:	425b      	neglt	r3, r3
 800ba54:	f042 0202 	orrlt.w	r2, r2, #2
 800ba58:	9307      	strge	r3, [sp, #28]
 800ba5a:	9307      	strlt	r3, [sp, #28]
 800ba5c:	bfb8      	it	lt
 800ba5e:	9204      	strlt	r2, [sp, #16]
 800ba60:	7823      	ldrb	r3, [r4, #0]
 800ba62:	2b2e      	cmp	r3, #46	; 0x2e
 800ba64:	d10c      	bne.n	800ba80 <_svfiprintf_r+0x130>
 800ba66:	7863      	ldrb	r3, [r4, #1]
 800ba68:	2b2a      	cmp	r3, #42	; 0x2a
 800ba6a:	d135      	bne.n	800bad8 <_svfiprintf_r+0x188>
 800ba6c:	9b03      	ldr	r3, [sp, #12]
 800ba6e:	1d1a      	adds	r2, r3, #4
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	9203      	str	r2, [sp, #12]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	bfb8      	it	lt
 800ba78:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba7c:	3402      	adds	r4, #2
 800ba7e:	9305      	str	r3, [sp, #20]
 800ba80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bb4c <_svfiprintf_r+0x1fc>
 800ba84:	7821      	ldrb	r1, [r4, #0]
 800ba86:	2203      	movs	r2, #3
 800ba88:	4650      	mov	r0, sl
 800ba8a:	f7f4 fbc1 	bl	8000210 <memchr>
 800ba8e:	b140      	cbz	r0, 800baa2 <_svfiprintf_r+0x152>
 800ba90:	2340      	movs	r3, #64	; 0x40
 800ba92:	eba0 000a 	sub.w	r0, r0, sl
 800ba96:	fa03 f000 	lsl.w	r0, r3, r0
 800ba9a:	9b04      	ldr	r3, [sp, #16]
 800ba9c:	4303      	orrs	r3, r0
 800ba9e:	3401      	adds	r4, #1
 800baa0:	9304      	str	r3, [sp, #16]
 800baa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baa6:	4826      	ldr	r0, [pc, #152]	; (800bb40 <_svfiprintf_r+0x1f0>)
 800baa8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800baac:	2206      	movs	r2, #6
 800baae:	f7f4 fbaf 	bl	8000210 <memchr>
 800bab2:	2800      	cmp	r0, #0
 800bab4:	d038      	beq.n	800bb28 <_svfiprintf_r+0x1d8>
 800bab6:	4b23      	ldr	r3, [pc, #140]	; (800bb44 <_svfiprintf_r+0x1f4>)
 800bab8:	bb1b      	cbnz	r3, 800bb02 <_svfiprintf_r+0x1b2>
 800baba:	9b03      	ldr	r3, [sp, #12]
 800babc:	3307      	adds	r3, #7
 800babe:	f023 0307 	bic.w	r3, r3, #7
 800bac2:	3308      	adds	r3, #8
 800bac4:	9303      	str	r3, [sp, #12]
 800bac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bac8:	4433      	add	r3, r6
 800baca:	9309      	str	r3, [sp, #36]	; 0x24
 800bacc:	e767      	b.n	800b99e <_svfiprintf_r+0x4e>
 800bace:	fb0c 3202 	mla	r2, ip, r2, r3
 800bad2:	460c      	mov	r4, r1
 800bad4:	2001      	movs	r0, #1
 800bad6:	e7a5      	b.n	800ba24 <_svfiprintf_r+0xd4>
 800bad8:	2300      	movs	r3, #0
 800bada:	3401      	adds	r4, #1
 800badc:	9305      	str	r3, [sp, #20]
 800bade:	4619      	mov	r1, r3
 800bae0:	f04f 0c0a 	mov.w	ip, #10
 800bae4:	4620      	mov	r0, r4
 800bae6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baea:	3a30      	subs	r2, #48	; 0x30
 800baec:	2a09      	cmp	r2, #9
 800baee:	d903      	bls.n	800baf8 <_svfiprintf_r+0x1a8>
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d0c5      	beq.n	800ba80 <_svfiprintf_r+0x130>
 800baf4:	9105      	str	r1, [sp, #20]
 800baf6:	e7c3      	b.n	800ba80 <_svfiprintf_r+0x130>
 800baf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bafc:	4604      	mov	r4, r0
 800bafe:	2301      	movs	r3, #1
 800bb00:	e7f0      	b.n	800bae4 <_svfiprintf_r+0x194>
 800bb02:	ab03      	add	r3, sp, #12
 800bb04:	9300      	str	r3, [sp, #0]
 800bb06:	462a      	mov	r2, r5
 800bb08:	4b0f      	ldr	r3, [pc, #60]	; (800bb48 <_svfiprintf_r+0x1f8>)
 800bb0a:	a904      	add	r1, sp, #16
 800bb0c:	4638      	mov	r0, r7
 800bb0e:	f3af 8000 	nop.w
 800bb12:	1c42      	adds	r2, r0, #1
 800bb14:	4606      	mov	r6, r0
 800bb16:	d1d6      	bne.n	800bac6 <_svfiprintf_r+0x176>
 800bb18:	89ab      	ldrh	r3, [r5, #12]
 800bb1a:	065b      	lsls	r3, r3, #25
 800bb1c:	f53f af2c 	bmi.w	800b978 <_svfiprintf_r+0x28>
 800bb20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb22:	b01d      	add	sp, #116	; 0x74
 800bb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb28:	ab03      	add	r3, sp, #12
 800bb2a:	9300      	str	r3, [sp, #0]
 800bb2c:	462a      	mov	r2, r5
 800bb2e:	4b06      	ldr	r3, [pc, #24]	; (800bb48 <_svfiprintf_r+0x1f8>)
 800bb30:	a904      	add	r1, sp, #16
 800bb32:	4638      	mov	r0, r7
 800bb34:	f000 f87a 	bl	800bc2c <_printf_i>
 800bb38:	e7eb      	b.n	800bb12 <_svfiprintf_r+0x1c2>
 800bb3a:	bf00      	nop
 800bb3c:	0800c2d0 	.word	0x0800c2d0
 800bb40:	0800c2da 	.word	0x0800c2da
 800bb44:	00000000 	.word	0x00000000
 800bb48:	0800b899 	.word	0x0800b899
 800bb4c:	0800c2d6 	.word	0x0800c2d6

0800bb50 <_printf_common>:
 800bb50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb54:	4616      	mov	r6, r2
 800bb56:	4699      	mov	r9, r3
 800bb58:	688a      	ldr	r2, [r1, #8]
 800bb5a:	690b      	ldr	r3, [r1, #16]
 800bb5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb60:	4293      	cmp	r3, r2
 800bb62:	bfb8      	it	lt
 800bb64:	4613      	movlt	r3, r2
 800bb66:	6033      	str	r3, [r6, #0]
 800bb68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb6c:	4607      	mov	r7, r0
 800bb6e:	460c      	mov	r4, r1
 800bb70:	b10a      	cbz	r2, 800bb76 <_printf_common+0x26>
 800bb72:	3301      	adds	r3, #1
 800bb74:	6033      	str	r3, [r6, #0]
 800bb76:	6823      	ldr	r3, [r4, #0]
 800bb78:	0699      	lsls	r1, r3, #26
 800bb7a:	bf42      	ittt	mi
 800bb7c:	6833      	ldrmi	r3, [r6, #0]
 800bb7e:	3302      	addmi	r3, #2
 800bb80:	6033      	strmi	r3, [r6, #0]
 800bb82:	6825      	ldr	r5, [r4, #0]
 800bb84:	f015 0506 	ands.w	r5, r5, #6
 800bb88:	d106      	bne.n	800bb98 <_printf_common+0x48>
 800bb8a:	f104 0a19 	add.w	sl, r4, #25
 800bb8e:	68e3      	ldr	r3, [r4, #12]
 800bb90:	6832      	ldr	r2, [r6, #0]
 800bb92:	1a9b      	subs	r3, r3, r2
 800bb94:	42ab      	cmp	r3, r5
 800bb96:	dc26      	bgt.n	800bbe6 <_printf_common+0x96>
 800bb98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb9c:	1e13      	subs	r3, r2, #0
 800bb9e:	6822      	ldr	r2, [r4, #0]
 800bba0:	bf18      	it	ne
 800bba2:	2301      	movne	r3, #1
 800bba4:	0692      	lsls	r2, r2, #26
 800bba6:	d42b      	bmi.n	800bc00 <_printf_common+0xb0>
 800bba8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbac:	4649      	mov	r1, r9
 800bbae:	4638      	mov	r0, r7
 800bbb0:	47c0      	blx	r8
 800bbb2:	3001      	adds	r0, #1
 800bbb4:	d01e      	beq.n	800bbf4 <_printf_common+0xa4>
 800bbb6:	6823      	ldr	r3, [r4, #0]
 800bbb8:	68e5      	ldr	r5, [r4, #12]
 800bbba:	6832      	ldr	r2, [r6, #0]
 800bbbc:	f003 0306 	and.w	r3, r3, #6
 800bbc0:	2b04      	cmp	r3, #4
 800bbc2:	bf08      	it	eq
 800bbc4:	1aad      	subeq	r5, r5, r2
 800bbc6:	68a3      	ldr	r3, [r4, #8]
 800bbc8:	6922      	ldr	r2, [r4, #16]
 800bbca:	bf0c      	ite	eq
 800bbcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbd0:	2500      	movne	r5, #0
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	bfc4      	itt	gt
 800bbd6:	1a9b      	subgt	r3, r3, r2
 800bbd8:	18ed      	addgt	r5, r5, r3
 800bbda:	2600      	movs	r6, #0
 800bbdc:	341a      	adds	r4, #26
 800bbde:	42b5      	cmp	r5, r6
 800bbe0:	d11a      	bne.n	800bc18 <_printf_common+0xc8>
 800bbe2:	2000      	movs	r0, #0
 800bbe4:	e008      	b.n	800bbf8 <_printf_common+0xa8>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	4652      	mov	r2, sl
 800bbea:	4649      	mov	r1, r9
 800bbec:	4638      	mov	r0, r7
 800bbee:	47c0      	blx	r8
 800bbf0:	3001      	adds	r0, #1
 800bbf2:	d103      	bne.n	800bbfc <_printf_common+0xac>
 800bbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbfc:	3501      	adds	r5, #1
 800bbfe:	e7c6      	b.n	800bb8e <_printf_common+0x3e>
 800bc00:	18e1      	adds	r1, r4, r3
 800bc02:	1c5a      	adds	r2, r3, #1
 800bc04:	2030      	movs	r0, #48	; 0x30
 800bc06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bc0a:	4422      	add	r2, r4
 800bc0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc14:	3302      	adds	r3, #2
 800bc16:	e7c7      	b.n	800bba8 <_printf_common+0x58>
 800bc18:	2301      	movs	r3, #1
 800bc1a:	4622      	mov	r2, r4
 800bc1c:	4649      	mov	r1, r9
 800bc1e:	4638      	mov	r0, r7
 800bc20:	47c0      	blx	r8
 800bc22:	3001      	adds	r0, #1
 800bc24:	d0e6      	beq.n	800bbf4 <_printf_common+0xa4>
 800bc26:	3601      	adds	r6, #1
 800bc28:	e7d9      	b.n	800bbde <_printf_common+0x8e>
	...

0800bc2c <_printf_i>:
 800bc2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc30:	7e0f      	ldrb	r7, [r1, #24]
 800bc32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bc34:	2f78      	cmp	r7, #120	; 0x78
 800bc36:	4691      	mov	r9, r2
 800bc38:	4680      	mov	r8, r0
 800bc3a:	460c      	mov	r4, r1
 800bc3c:	469a      	mov	sl, r3
 800bc3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc42:	d807      	bhi.n	800bc54 <_printf_i+0x28>
 800bc44:	2f62      	cmp	r7, #98	; 0x62
 800bc46:	d80a      	bhi.n	800bc5e <_printf_i+0x32>
 800bc48:	2f00      	cmp	r7, #0
 800bc4a:	f000 80d8 	beq.w	800bdfe <_printf_i+0x1d2>
 800bc4e:	2f58      	cmp	r7, #88	; 0x58
 800bc50:	f000 80a3 	beq.w	800bd9a <_printf_i+0x16e>
 800bc54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc5c:	e03a      	b.n	800bcd4 <_printf_i+0xa8>
 800bc5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc62:	2b15      	cmp	r3, #21
 800bc64:	d8f6      	bhi.n	800bc54 <_printf_i+0x28>
 800bc66:	a101      	add	r1, pc, #4	; (adr r1, 800bc6c <_printf_i+0x40>)
 800bc68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc6c:	0800bcc5 	.word	0x0800bcc5
 800bc70:	0800bcd9 	.word	0x0800bcd9
 800bc74:	0800bc55 	.word	0x0800bc55
 800bc78:	0800bc55 	.word	0x0800bc55
 800bc7c:	0800bc55 	.word	0x0800bc55
 800bc80:	0800bc55 	.word	0x0800bc55
 800bc84:	0800bcd9 	.word	0x0800bcd9
 800bc88:	0800bc55 	.word	0x0800bc55
 800bc8c:	0800bc55 	.word	0x0800bc55
 800bc90:	0800bc55 	.word	0x0800bc55
 800bc94:	0800bc55 	.word	0x0800bc55
 800bc98:	0800bde5 	.word	0x0800bde5
 800bc9c:	0800bd09 	.word	0x0800bd09
 800bca0:	0800bdc7 	.word	0x0800bdc7
 800bca4:	0800bc55 	.word	0x0800bc55
 800bca8:	0800bc55 	.word	0x0800bc55
 800bcac:	0800be07 	.word	0x0800be07
 800bcb0:	0800bc55 	.word	0x0800bc55
 800bcb4:	0800bd09 	.word	0x0800bd09
 800bcb8:	0800bc55 	.word	0x0800bc55
 800bcbc:	0800bc55 	.word	0x0800bc55
 800bcc0:	0800bdcf 	.word	0x0800bdcf
 800bcc4:	682b      	ldr	r3, [r5, #0]
 800bcc6:	1d1a      	adds	r2, r3, #4
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	602a      	str	r2, [r5, #0]
 800bccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bcd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	e0a3      	b.n	800be20 <_printf_i+0x1f4>
 800bcd8:	6820      	ldr	r0, [r4, #0]
 800bcda:	6829      	ldr	r1, [r5, #0]
 800bcdc:	0606      	lsls	r6, r0, #24
 800bcde:	f101 0304 	add.w	r3, r1, #4
 800bce2:	d50a      	bpl.n	800bcfa <_printf_i+0xce>
 800bce4:	680e      	ldr	r6, [r1, #0]
 800bce6:	602b      	str	r3, [r5, #0]
 800bce8:	2e00      	cmp	r6, #0
 800bcea:	da03      	bge.n	800bcf4 <_printf_i+0xc8>
 800bcec:	232d      	movs	r3, #45	; 0x2d
 800bcee:	4276      	negs	r6, r6
 800bcf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcf4:	485e      	ldr	r0, [pc, #376]	; (800be70 <_printf_i+0x244>)
 800bcf6:	230a      	movs	r3, #10
 800bcf8:	e019      	b.n	800bd2e <_printf_i+0x102>
 800bcfa:	680e      	ldr	r6, [r1, #0]
 800bcfc:	602b      	str	r3, [r5, #0]
 800bcfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bd02:	bf18      	it	ne
 800bd04:	b236      	sxthne	r6, r6
 800bd06:	e7ef      	b.n	800bce8 <_printf_i+0xbc>
 800bd08:	682b      	ldr	r3, [r5, #0]
 800bd0a:	6820      	ldr	r0, [r4, #0]
 800bd0c:	1d19      	adds	r1, r3, #4
 800bd0e:	6029      	str	r1, [r5, #0]
 800bd10:	0601      	lsls	r1, r0, #24
 800bd12:	d501      	bpl.n	800bd18 <_printf_i+0xec>
 800bd14:	681e      	ldr	r6, [r3, #0]
 800bd16:	e002      	b.n	800bd1e <_printf_i+0xf2>
 800bd18:	0646      	lsls	r6, r0, #25
 800bd1a:	d5fb      	bpl.n	800bd14 <_printf_i+0xe8>
 800bd1c:	881e      	ldrh	r6, [r3, #0]
 800bd1e:	4854      	ldr	r0, [pc, #336]	; (800be70 <_printf_i+0x244>)
 800bd20:	2f6f      	cmp	r7, #111	; 0x6f
 800bd22:	bf0c      	ite	eq
 800bd24:	2308      	moveq	r3, #8
 800bd26:	230a      	movne	r3, #10
 800bd28:	2100      	movs	r1, #0
 800bd2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd2e:	6865      	ldr	r5, [r4, #4]
 800bd30:	60a5      	str	r5, [r4, #8]
 800bd32:	2d00      	cmp	r5, #0
 800bd34:	bfa2      	ittt	ge
 800bd36:	6821      	ldrge	r1, [r4, #0]
 800bd38:	f021 0104 	bicge.w	r1, r1, #4
 800bd3c:	6021      	strge	r1, [r4, #0]
 800bd3e:	b90e      	cbnz	r6, 800bd44 <_printf_i+0x118>
 800bd40:	2d00      	cmp	r5, #0
 800bd42:	d04d      	beq.n	800bde0 <_printf_i+0x1b4>
 800bd44:	4615      	mov	r5, r2
 800bd46:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd4a:	fb03 6711 	mls	r7, r3, r1, r6
 800bd4e:	5dc7      	ldrb	r7, [r0, r7]
 800bd50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd54:	4637      	mov	r7, r6
 800bd56:	42bb      	cmp	r3, r7
 800bd58:	460e      	mov	r6, r1
 800bd5a:	d9f4      	bls.n	800bd46 <_printf_i+0x11a>
 800bd5c:	2b08      	cmp	r3, #8
 800bd5e:	d10b      	bne.n	800bd78 <_printf_i+0x14c>
 800bd60:	6823      	ldr	r3, [r4, #0]
 800bd62:	07de      	lsls	r6, r3, #31
 800bd64:	d508      	bpl.n	800bd78 <_printf_i+0x14c>
 800bd66:	6923      	ldr	r3, [r4, #16]
 800bd68:	6861      	ldr	r1, [r4, #4]
 800bd6a:	4299      	cmp	r1, r3
 800bd6c:	bfde      	ittt	le
 800bd6e:	2330      	movle	r3, #48	; 0x30
 800bd70:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd74:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd78:	1b52      	subs	r2, r2, r5
 800bd7a:	6122      	str	r2, [r4, #16]
 800bd7c:	f8cd a000 	str.w	sl, [sp]
 800bd80:	464b      	mov	r3, r9
 800bd82:	aa03      	add	r2, sp, #12
 800bd84:	4621      	mov	r1, r4
 800bd86:	4640      	mov	r0, r8
 800bd88:	f7ff fee2 	bl	800bb50 <_printf_common>
 800bd8c:	3001      	adds	r0, #1
 800bd8e:	d14c      	bne.n	800be2a <_printf_i+0x1fe>
 800bd90:	f04f 30ff 	mov.w	r0, #4294967295
 800bd94:	b004      	add	sp, #16
 800bd96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd9a:	4835      	ldr	r0, [pc, #212]	; (800be70 <_printf_i+0x244>)
 800bd9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bda0:	6829      	ldr	r1, [r5, #0]
 800bda2:	6823      	ldr	r3, [r4, #0]
 800bda4:	f851 6b04 	ldr.w	r6, [r1], #4
 800bda8:	6029      	str	r1, [r5, #0]
 800bdaa:	061d      	lsls	r5, r3, #24
 800bdac:	d514      	bpl.n	800bdd8 <_printf_i+0x1ac>
 800bdae:	07df      	lsls	r7, r3, #31
 800bdb0:	bf44      	itt	mi
 800bdb2:	f043 0320 	orrmi.w	r3, r3, #32
 800bdb6:	6023      	strmi	r3, [r4, #0]
 800bdb8:	b91e      	cbnz	r6, 800bdc2 <_printf_i+0x196>
 800bdba:	6823      	ldr	r3, [r4, #0]
 800bdbc:	f023 0320 	bic.w	r3, r3, #32
 800bdc0:	6023      	str	r3, [r4, #0]
 800bdc2:	2310      	movs	r3, #16
 800bdc4:	e7b0      	b.n	800bd28 <_printf_i+0xfc>
 800bdc6:	6823      	ldr	r3, [r4, #0]
 800bdc8:	f043 0320 	orr.w	r3, r3, #32
 800bdcc:	6023      	str	r3, [r4, #0]
 800bdce:	2378      	movs	r3, #120	; 0x78
 800bdd0:	4828      	ldr	r0, [pc, #160]	; (800be74 <_printf_i+0x248>)
 800bdd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bdd6:	e7e3      	b.n	800bda0 <_printf_i+0x174>
 800bdd8:	0659      	lsls	r1, r3, #25
 800bdda:	bf48      	it	mi
 800bddc:	b2b6      	uxthmi	r6, r6
 800bdde:	e7e6      	b.n	800bdae <_printf_i+0x182>
 800bde0:	4615      	mov	r5, r2
 800bde2:	e7bb      	b.n	800bd5c <_printf_i+0x130>
 800bde4:	682b      	ldr	r3, [r5, #0]
 800bde6:	6826      	ldr	r6, [r4, #0]
 800bde8:	6961      	ldr	r1, [r4, #20]
 800bdea:	1d18      	adds	r0, r3, #4
 800bdec:	6028      	str	r0, [r5, #0]
 800bdee:	0635      	lsls	r5, r6, #24
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	d501      	bpl.n	800bdf8 <_printf_i+0x1cc>
 800bdf4:	6019      	str	r1, [r3, #0]
 800bdf6:	e002      	b.n	800bdfe <_printf_i+0x1d2>
 800bdf8:	0670      	lsls	r0, r6, #25
 800bdfa:	d5fb      	bpl.n	800bdf4 <_printf_i+0x1c8>
 800bdfc:	8019      	strh	r1, [r3, #0]
 800bdfe:	2300      	movs	r3, #0
 800be00:	6123      	str	r3, [r4, #16]
 800be02:	4615      	mov	r5, r2
 800be04:	e7ba      	b.n	800bd7c <_printf_i+0x150>
 800be06:	682b      	ldr	r3, [r5, #0]
 800be08:	1d1a      	adds	r2, r3, #4
 800be0a:	602a      	str	r2, [r5, #0]
 800be0c:	681d      	ldr	r5, [r3, #0]
 800be0e:	6862      	ldr	r2, [r4, #4]
 800be10:	2100      	movs	r1, #0
 800be12:	4628      	mov	r0, r5
 800be14:	f7f4 f9fc 	bl	8000210 <memchr>
 800be18:	b108      	cbz	r0, 800be1e <_printf_i+0x1f2>
 800be1a:	1b40      	subs	r0, r0, r5
 800be1c:	6060      	str	r0, [r4, #4]
 800be1e:	6863      	ldr	r3, [r4, #4]
 800be20:	6123      	str	r3, [r4, #16]
 800be22:	2300      	movs	r3, #0
 800be24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be28:	e7a8      	b.n	800bd7c <_printf_i+0x150>
 800be2a:	6923      	ldr	r3, [r4, #16]
 800be2c:	462a      	mov	r2, r5
 800be2e:	4649      	mov	r1, r9
 800be30:	4640      	mov	r0, r8
 800be32:	47d0      	blx	sl
 800be34:	3001      	adds	r0, #1
 800be36:	d0ab      	beq.n	800bd90 <_printf_i+0x164>
 800be38:	6823      	ldr	r3, [r4, #0]
 800be3a:	079b      	lsls	r3, r3, #30
 800be3c:	d413      	bmi.n	800be66 <_printf_i+0x23a>
 800be3e:	68e0      	ldr	r0, [r4, #12]
 800be40:	9b03      	ldr	r3, [sp, #12]
 800be42:	4298      	cmp	r0, r3
 800be44:	bfb8      	it	lt
 800be46:	4618      	movlt	r0, r3
 800be48:	e7a4      	b.n	800bd94 <_printf_i+0x168>
 800be4a:	2301      	movs	r3, #1
 800be4c:	4632      	mov	r2, r6
 800be4e:	4649      	mov	r1, r9
 800be50:	4640      	mov	r0, r8
 800be52:	47d0      	blx	sl
 800be54:	3001      	adds	r0, #1
 800be56:	d09b      	beq.n	800bd90 <_printf_i+0x164>
 800be58:	3501      	adds	r5, #1
 800be5a:	68e3      	ldr	r3, [r4, #12]
 800be5c:	9903      	ldr	r1, [sp, #12]
 800be5e:	1a5b      	subs	r3, r3, r1
 800be60:	42ab      	cmp	r3, r5
 800be62:	dcf2      	bgt.n	800be4a <_printf_i+0x21e>
 800be64:	e7eb      	b.n	800be3e <_printf_i+0x212>
 800be66:	2500      	movs	r5, #0
 800be68:	f104 0619 	add.w	r6, r4, #25
 800be6c:	e7f5      	b.n	800be5a <_printf_i+0x22e>
 800be6e:	bf00      	nop
 800be70:	0800c2e1 	.word	0x0800c2e1
 800be74:	0800c2f2 	.word	0x0800c2f2

0800be78 <memmove>:
 800be78:	4288      	cmp	r0, r1
 800be7a:	b510      	push	{r4, lr}
 800be7c:	eb01 0402 	add.w	r4, r1, r2
 800be80:	d902      	bls.n	800be88 <memmove+0x10>
 800be82:	4284      	cmp	r4, r0
 800be84:	4623      	mov	r3, r4
 800be86:	d807      	bhi.n	800be98 <memmove+0x20>
 800be88:	1e43      	subs	r3, r0, #1
 800be8a:	42a1      	cmp	r1, r4
 800be8c:	d008      	beq.n	800bea0 <memmove+0x28>
 800be8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be96:	e7f8      	b.n	800be8a <memmove+0x12>
 800be98:	4402      	add	r2, r0
 800be9a:	4601      	mov	r1, r0
 800be9c:	428a      	cmp	r2, r1
 800be9e:	d100      	bne.n	800bea2 <memmove+0x2a>
 800bea0:	bd10      	pop	{r4, pc}
 800bea2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bea6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800beaa:	e7f7      	b.n	800be9c <memmove+0x24>

0800beac <_realloc_r>:
 800beac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beb0:	4680      	mov	r8, r0
 800beb2:	4614      	mov	r4, r2
 800beb4:	460e      	mov	r6, r1
 800beb6:	b921      	cbnz	r1, 800bec2 <_realloc_r+0x16>
 800beb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bebc:	4611      	mov	r1, r2
 800bebe:	f7ff bbd1 	b.w	800b664 <_malloc_r>
 800bec2:	b92a      	cbnz	r2, 800bed0 <_realloc_r+0x24>
 800bec4:	f7ff fb62 	bl	800b58c <_free_r>
 800bec8:	4625      	mov	r5, r4
 800beca:	4628      	mov	r0, r5
 800becc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bed0:	f000 f81b 	bl	800bf0a <_malloc_usable_size_r>
 800bed4:	4284      	cmp	r4, r0
 800bed6:	4607      	mov	r7, r0
 800bed8:	d802      	bhi.n	800bee0 <_realloc_r+0x34>
 800beda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bede:	d812      	bhi.n	800bf06 <_realloc_r+0x5a>
 800bee0:	4621      	mov	r1, r4
 800bee2:	4640      	mov	r0, r8
 800bee4:	f7ff fbbe 	bl	800b664 <_malloc_r>
 800bee8:	4605      	mov	r5, r0
 800beea:	2800      	cmp	r0, #0
 800beec:	d0ed      	beq.n	800beca <_realloc_r+0x1e>
 800beee:	42bc      	cmp	r4, r7
 800bef0:	4622      	mov	r2, r4
 800bef2:	4631      	mov	r1, r6
 800bef4:	bf28      	it	cs
 800bef6:	463a      	movcs	r2, r7
 800bef8:	f7ff fb32 	bl	800b560 <memcpy>
 800befc:	4631      	mov	r1, r6
 800befe:	4640      	mov	r0, r8
 800bf00:	f7ff fb44 	bl	800b58c <_free_r>
 800bf04:	e7e1      	b.n	800beca <_realloc_r+0x1e>
 800bf06:	4635      	mov	r5, r6
 800bf08:	e7df      	b.n	800beca <_realloc_r+0x1e>

0800bf0a <_malloc_usable_size_r>:
 800bf0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf0e:	1f18      	subs	r0, r3, #4
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	bfbc      	itt	lt
 800bf14:	580b      	ldrlt	r3, [r1, r0]
 800bf16:	18c0      	addlt	r0, r0, r3
 800bf18:	4770      	bx	lr
	...

0800bf1c <_init>:
 800bf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf1e:	bf00      	nop
 800bf20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf22:	bc08      	pop	{r3}
 800bf24:	469e      	mov	lr, r3
 800bf26:	4770      	bx	lr

0800bf28 <_fini>:
 800bf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf2a:	bf00      	nop
 800bf2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf2e:	bc08      	pop	{r3}
 800bf30:	469e      	mov	lr, r3
 800bf32:	4770      	bx	lr
=======
 800b5f6:	bf00      	nop
 800b5f8:	3714      	adds	r7, #20
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr
 800b602:	bf00      	nop
 800b604:	20010330 	.word	0x20010330
 800b608:	20010338 	.word	0x20010338

0800b60c <__errno>:
 800b60c:	4b01      	ldr	r3, [pc, #4]	; (800b614 <__errno+0x8>)
 800b60e:	6818      	ldr	r0, [r3, #0]
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	20000010 	.word	0x20000010

0800b618 <__libc_init_array>:
 800b618:	b570      	push	{r4, r5, r6, lr}
 800b61a:	4d0d      	ldr	r5, [pc, #52]	; (800b650 <__libc_init_array+0x38>)
 800b61c:	4c0d      	ldr	r4, [pc, #52]	; (800b654 <__libc_init_array+0x3c>)
 800b61e:	1b64      	subs	r4, r4, r5
 800b620:	10a4      	asrs	r4, r4, #2
 800b622:	2600      	movs	r6, #0
 800b624:	42a6      	cmp	r6, r4
 800b626:	d109      	bne.n	800b63c <__libc_init_array+0x24>
 800b628:	4d0b      	ldr	r5, [pc, #44]	; (800b658 <__libc_init_array+0x40>)
 800b62a:	4c0c      	ldr	r4, [pc, #48]	; (800b65c <__libc_init_array+0x44>)
 800b62c:	f000 fcf6 	bl	800c01c <_init>
 800b630:	1b64      	subs	r4, r4, r5
 800b632:	10a4      	asrs	r4, r4, #2
 800b634:	2600      	movs	r6, #0
 800b636:	42a6      	cmp	r6, r4
 800b638:	d105      	bne.n	800b646 <__libc_init_array+0x2e>
 800b63a:	bd70      	pop	{r4, r5, r6, pc}
 800b63c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b640:	4798      	blx	r3
 800b642:	3601      	adds	r6, #1
 800b644:	e7ee      	b.n	800b624 <__libc_init_array+0xc>
 800b646:	f855 3b04 	ldr.w	r3, [r5], #4
 800b64a:	4798      	blx	r3
 800b64c:	3601      	adds	r6, #1
 800b64e:	e7f2      	b.n	800b636 <__libc_init_array+0x1e>
 800b650:	0800c40c 	.word	0x0800c40c
 800b654:	0800c40c 	.word	0x0800c40c
 800b658:	0800c40c 	.word	0x0800c40c
 800b65c:	0800c410 	.word	0x0800c410

0800b660 <memcpy>:
 800b660:	440a      	add	r2, r1
 800b662:	4291      	cmp	r1, r2
 800b664:	f100 33ff 	add.w	r3, r0, #4294967295
 800b668:	d100      	bne.n	800b66c <memcpy+0xc>
 800b66a:	4770      	bx	lr
 800b66c:	b510      	push	{r4, lr}
 800b66e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b672:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b676:	4291      	cmp	r1, r2
 800b678:	d1f9      	bne.n	800b66e <memcpy+0xe>
 800b67a:	bd10      	pop	{r4, pc}

0800b67c <memset>:
 800b67c:	4402      	add	r2, r0
 800b67e:	4603      	mov	r3, r0
 800b680:	4293      	cmp	r3, r2
 800b682:	d100      	bne.n	800b686 <memset+0xa>
 800b684:	4770      	bx	lr
 800b686:	f803 1b01 	strb.w	r1, [r3], #1
 800b68a:	e7f9      	b.n	800b680 <memset+0x4>

0800b68c <_free_r>:
 800b68c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b68e:	2900      	cmp	r1, #0
 800b690:	d044      	beq.n	800b71c <_free_r+0x90>
 800b692:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b696:	9001      	str	r0, [sp, #4]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f1a1 0404 	sub.w	r4, r1, #4
 800b69e:	bfb8      	it	lt
 800b6a0:	18e4      	addlt	r4, r4, r3
 800b6a2:	f000 f96d 	bl	800b980 <__malloc_lock>
 800b6a6:	4a1e      	ldr	r2, [pc, #120]	; (800b720 <_free_r+0x94>)
 800b6a8:	9801      	ldr	r0, [sp, #4]
 800b6aa:	6813      	ldr	r3, [r2, #0]
 800b6ac:	b933      	cbnz	r3, 800b6bc <_free_r+0x30>
 800b6ae:	6063      	str	r3, [r4, #4]
 800b6b0:	6014      	str	r4, [r2, #0]
 800b6b2:	b003      	add	sp, #12
 800b6b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6b8:	f000 b968 	b.w	800b98c <__malloc_unlock>
 800b6bc:	42a3      	cmp	r3, r4
 800b6be:	d908      	bls.n	800b6d2 <_free_r+0x46>
 800b6c0:	6825      	ldr	r5, [r4, #0]
 800b6c2:	1961      	adds	r1, r4, r5
 800b6c4:	428b      	cmp	r3, r1
 800b6c6:	bf01      	itttt	eq
 800b6c8:	6819      	ldreq	r1, [r3, #0]
 800b6ca:	685b      	ldreq	r3, [r3, #4]
 800b6cc:	1949      	addeq	r1, r1, r5
 800b6ce:	6021      	streq	r1, [r4, #0]
 800b6d0:	e7ed      	b.n	800b6ae <_free_r+0x22>
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	b10b      	cbz	r3, 800b6dc <_free_r+0x50>
 800b6d8:	42a3      	cmp	r3, r4
 800b6da:	d9fa      	bls.n	800b6d2 <_free_r+0x46>
 800b6dc:	6811      	ldr	r1, [r2, #0]
 800b6de:	1855      	adds	r5, r2, r1
 800b6e0:	42a5      	cmp	r5, r4
 800b6e2:	d10b      	bne.n	800b6fc <_free_r+0x70>
 800b6e4:	6824      	ldr	r4, [r4, #0]
 800b6e6:	4421      	add	r1, r4
 800b6e8:	1854      	adds	r4, r2, r1
 800b6ea:	42a3      	cmp	r3, r4
 800b6ec:	6011      	str	r1, [r2, #0]
 800b6ee:	d1e0      	bne.n	800b6b2 <_free_r+0x26>
 800b6f0:	681c      	ldr	r4, [r3, #0]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	6053      	str	r3, [r2, #4]
 800b6f6:	4421      	add	r1, r4
 800b6f8:	6011      	str	r1, [r2, #0]
 800b6fa:	e7da      	b.n	800b6b2 <_free_r+0x26>
 800b6fc:	d902      	bls.n	800b704 <_free_r+0x78>
 800b6fe:	230c      	movs	r3, #12
 800b700:	6003      	str	r3, [r0, #0]
 800b702:	e7d6      	b.n	800b6b2 <_free_r+0x26>
 800b704:	6825      	ldr	r5, [r4, #0]
 800b706:	1961      	adds	r1, r4, r5
 800b708:	428b      	cmp	r3, r1
 800b70a:	bf04      	itt	eq
 800b70c:	6819      	ldreq	r1, [r3, #0]
 800b70e:	685b      	ldreq	r3, [r3, #4]
 800b710:	6063      	str	r3, [r4, #4]
 800b712:	bf04      	itt	eq
 800b714:	1949      	addeq	r1, r1, r5
 800b716:	6021      	streq	r1, [r4, #0]
 800b718:	6054      	str	r4, [r2, #4]
 800b71a:	e7ca      	b.n	800b6b2 <_free_r+0x26>
 800b71c:	b003      	add	sp, #12
 800b71e:	bd30      	pop	{r4, r5, pc}
 800b720:	20010350 	.word	0x20010350

0800b724 <sbrk_aligned>:
 800b724:	b570      	push	{r4, r5, r6, lr}
 800b726:	4e0e      	ldr	r6, [pc, #56]	; (800b760 <sbrk_aligned+0x3c>)
 800b728:	460c      	mov	r4, r1
 800b72a:	6831      	ldr	r1, [r6, #0]
 800b72c:	4605      	mov	r5, r0
 800b72e:	b911      	cbnz	r1, 800b736 <sbrk_aligned+0x12>
 800b730:	f000 f8f6 	bl	800b920 <_sbrk_r>
 800b734:	6030      	str	r0, [r6, #0]
 800b736:	4621      	mov	r1, r4
 800b738:	4628      	mov	r0, r5
 800b73a:	f000 f8f1 	bl	800b920 <_sbrk_r>
 800b73e:	1c43      	adds	r3, r0, #1
 800b740:	d00a      	beq.n	800b758 <sbrk_aligned+0x34>
 800b742:	1cc4      	adds	r4, r0, #3
 800b744:	f024 0403 	bic.w	r4, r4, #3
 800b748:	42a0      	cmp	r0, r4
 800b74a:	d007      	beq.n	800b75c <sbrk_aligned+0x38>
 800b74c:	1a21      	subs	r1, r4, r0
 800b74e:	4628      	mov	r0, r5
 800b750:	f000 f8e6 	bl	800b920 <_sbrk_r>
 800b754:	3001      	adds	r0, #1
 800b756:	d101      	bne.n	800b75c <sbrk_aligned+0x38>
 800b758:	f04f 34ff 	mov.w	r4, #4294967295
 800b75c:	4620      	mov	r0, r4
 800b75e:	bd70      	pop	{r4, r5, r6, pc}
 800b760:	20010354 	.word	0x20010354

0800b764 <_malloc_r>:
 800b764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b768:	1ccd      	adds	r5, r1, #3
 800b76a:	f025 0503 	bic.w	r5, r5, #3
 800b76e:	3508      	adds	r5, #8
 800b770:	2d0c      	cmp	r5, #12
 800b772:	bf38      	it	cc
 800b774:	250c      	movcc	r5, #12
 800b776:	2d00      	cmp	r5, #0
 800b778:	4607      	mov	r7, r0
 800b77a:	db01      	blt.n	800b780 <_malloc_r+0x1c>
 800b77c:	42a9      	cmp	r1, r5
 800b77e:	d905      	bls.n	800b78c <_malloc_r+0x28>
 800b780:	230c      	movs	r3, #12
 800b782:	603b      	str	r3, [r7, #0]
 800b784:	2600      	movs	r6, #0
 800b786:	4630      	mov	r0, r6
 800b788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b78c:	4e2e      	ldr	r6, [pc, #184]	; (800b848 <_malloc_r+0xe4>)
 800b78e:	f000 f8f7 	bl	800b980 <__malloc_lock>
 800b792:	6833      	ldr	r3, [r6, #0]
 800b794:	461c      	mov	r4, r3
 800b796:	bb34      	cbnz	r4, 800b7e6 <_malloc_r+0x82>
 800b798:	4629      	mov	r1, r5
 800b79a:	4638      	mov	r0, r7
 800b79c:	f7ff ffc2 	bl	800b724 <sbrk_aligned>
 800b7a0:	1c43      	adds	r3, r0, #1
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	d14d      	bne.n	800b842 <_malloc_r+0xde>
 800b7a6:	6834      	ldr	r4, [r6, #0]
 800b7a8:	4626      	mov	r6, r4
 800b7aa:	2e00      	cmp	r6, #0
 800b7ac:	d140      	bne.n	800b830 <_malloc_r+0xcc>
 800b7ae:	6823      	ldr	r3, [r4, #0]
 800b7b0:	4631      	mov	r1, r6
 800b7b2:	4638      	mov	r0, r7
 800b7b4:	eb04 0803 	add.w	r8, r4, r3
 800b7b8:	f000 f8b2 	bl	800b920 <_sbrk_r>
 800b7bc:	4580      	cmp	r8, r0
 800b7be:	d13a      	bne.n	800b836 <_malloc_r+0xd2>
 800b7c0:	6821      	ldr	r1, [r4, #0]
 800b7c2:	3503      	adds	r5, #3
 800b7c4:	1a6d      	subs	r5, r5, r1
 800b7c6:	f025 0503 	bic.w	r5, r5, #3
 800b7ca:	3508      	adds	r5, #8
 800b7cc:	2d0c      	cmp	r5, #12
 800b7ce:	bf38      	it	cc
 800b7d0:	250c      	movcc	r5, #12
 800b7d2:	4629      	mov	r1, r5
 800b7d4:	4638      	mov	r0, r7
 800b7d6:	f7ff ffa5 	bl	800b724 <sbrk_aligned>
 800b7da:	3001      	adds	r0, #1
 800b7dc:	d02b      	beq.n	800b836 <_malloc_r+0xd2>
 800b7de:	6823      	ldr	r3, [r4, #0]
 800b7e0:	442b      	add	r3, r5
 800b7e2:	6023      	str	r3, [r4, #0]
 800b7e4:	e00e      	b.n	800b804 <_malloc_r+0xa0>
 800b7e6:	6822      	ldr	r2, [r4, #0]
 800b7e8:	1b52      	subs	r2, r2, r5
 800b7ea:	d41e      	bmi.n	800b82a <_malloc_r+0xc6>
 800b7ec:	2a0b      	cmp	r2, #11
 800b7ee:	d916      	bls.n	800b81e <_malloc_r+0xba>
 800b7f0:	1961      	adds	r1, r4, r5
 800b7f2:	42a3      	cmp	r3, r4
 800b7f4:	6025      	str	r5, [r4, #0]
 800b7f6:	bf18      	it	ne
 800b7f8:	6059      	strne	r1, [r3, #4]
 800b7fa:	6863      	ldr	r3, [r4, #4]
 800b7fc:	bf08      	it	eq
 800b7fe:	6031      	streq	r1, [r6, #0]
 800b800:	5162      	str	r2, [r4, r5]
 800b802:	604b      	str	r3, [r1, #4]
 800b804:	4638      	mov	r0, r7
 800b806:	f104 060b 	add.w	r6, r4, #11
 800b80a:	f000 f8bf 	bl	800b98c <__malloc_unlock>
 800b80e:	f026 0607 	bic.w	r6, r6, #7
 800b812:	1d23      	adds	r3, r4, #4
 800b814:	1af2      	subs	r2, r6, r3
 800b816:	d0b6      	beq.n	800b786 <_malloc_r+0x22>
 800b818:	1b9b      	subs	r3, r3, r6
 800b81a:	50a3      	str	r3, [r4, r2]
 800b81c:	e7b3      	b.n	800b786 <_malloc_r+0x22>
 800b81e:	6862      	ldr	r2, [r4, #4]
 800b820:	42a3      	cmp	r3, r4
 800b822:	bf0c      	ite	eq
 800b824:	6032      	streq	r2, [r6, #0]
 800b826:	605a      	strne	r2, [r3, #4]
 800b828:	e7ec      	b.n	800b804 <_malloc_r+0xa0>
 800b82a:	4623      	mov	r3, r4
 800b82c:	6864      	ldr	r4, [r4, #4]
 800b82e:	e7b2      	b.n	800b796 <_malloc_r+0x32>
 800b830:	4634      	mov	r4, r6
 800b832:	6876      	ldr	r6, [r6, #4]
 800b834:	e7b9      	b.n	800b7aa <_malloc_r+0x46>
 800b836:	230c      	movs	r3, #12
 800b838:	603b      	str	r3, [r7, #0]
 800b83a:	4638      	mov	r0, r7
 800b83c:	f000 f8a6 	bl	800b98c <__malloc_unlock>
 800b840:	e7a1      	b.n	800b786 <_malloc_r+0x22>
 800b842:	6025      	str	r5, [r4, #0]
 800b844:	e7de      	b.n	800b804 <_malloc_r+0xa0>
 800b846:	bf00      	nop
 800b848:	20010350 	.word	0x20010350

0800b84c <cleanup_glue>:
 800b84c:	b538      	push	{r3, r4, r5, lr}
 800b84e:	460c      	mov	r4, r1
 800b850:	6809      	ldr	r1, [r1, #0]
 800b852:	4605      	mov	r5, r0
 800b854:	b109      	cbz	r1, 800b85a <cleanup_glue+0xe>
 800b856:	f7ff fff9 	bl	800b84c <cleanup_glue>
 800b85a:	4621      	mov	r1, r4
 800b85c:	4628      	mov	r0, r5
 800b85e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b862:	f7ff bf13 	b.w	800b68c <_free_r>
	...

0800b868 <_reclaim_reent>:
 800b868:	4b2c      	ldr	r3, [pc, #176]	; (800b91c <_reclaim_reent+0xb4>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4283      	cmp	r3, r0
 800b86e:	b570      	push	{r4, r5, r6, lr}
 800b870:	4604      	mov	r4, r0
 800b872:	d051      	beq.n	800b918 <_reclaim_reent+0xb0>
 800b874:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b876:	b143      	cbz	r3, 800b88a <_reclaim_reent+0x22>
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d14a      	bne.n	800b914 <_reclaim_reent+0xac>
 800b87e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b880:	6819      	ldr	r1, [r3, #0]
 800b882:	b111      	cbz	r1, 800b88a <_reclaim_reent+0x22>
 800b884:	4620      	mov	r0, r4
 800b886:	f7ff ff01 	bl	800b68c <_free_r>
 800b88a:	6961      	ldr	r1, [r4, #20]
 800b88c:	b111      	cbz	r1, 800b894 <_reclaim_reent+0x2c>
 800b88e:	4620      	mov	r0, r4
 800b890:	f7ff fefc 	bl	800b68c <_free_r>
 800b894:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b896:	b111      	cbz	r1, 800b89e <_reclaim_reent+0x36>
 800b898:	4620      	mov	r0, r4
 800b89a:	f7ff fef7 	bl	800b68c <_free_r>
 800b89e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b8a0:	b111      	cbz	r1, 800b8a8 <_reclaim_reent+0x40>
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f7ff fef2 	bl	800b68c <_free_r>
 800b8a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b8aa:	b111      	cbz	r1, 800b8b2 <_reclaim_reent+0x4a>
 800b8ac:	4620      	mov	r0, r4
 800b8ae:	f7ff feed 	bl	800b68c <_free_r>
 800b8b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b8b4:	b111      	cbz	r1, 800b8bc <_reclaim_reent+0x54>
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	f7ff fee8 	bl	800b68c <_free_r>
 800b8bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b8be:	b111      	cbz	r1, 800b8c6 <_reclaim_reent+0x5e>
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	f7ff fee3 	bl	800b68c <_free_r>
 800b8c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b8c8:	b111      	cbz	r1, 800b8d0 <_reclaim_reent+0x68>
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f7ff fede 	bl	800b68c <_free_r>
 800b8d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8d2:	b111      	cbz	r1, 800b8da <_reclaim_reent+0x72>
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f7ff fed9 	bl	800b68c <_free_r>
 800b8da:	69a3      	ldr	r3, [r4, #24]
 800b8dc:	b1e3      	cbz	r3, 800b918 <_reclaim_reent+0xb0>
 800b8de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	4798      	blx	r3
 800b8e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b8e6:	b1b9      	cbz	r1, 800b918 <_reclaim_reent+0xb0>
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b8ee:	f7ff bfad 	b.w	800b84c <cleanup_glue>
 800b8f2:	5949      	ldr	r1, [r1, r5]
 800b8f4:	b941      	cbnz	r1, 800b908 <_reclaim_reent+0xa0>
 800b8f6:	3504      	adds	r5, #4
 800b8f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8fa:	2d80      	cmp	r5, #128	; 0x80
 800b8fc:	68d9      	ldr	r1, [r3, #12]
 800b8fe:	d1f8      	bne.n	800b8f2 <_reclaim_reent+0x8a>
 800b900:	4620      	mov	r0, r4
 800b902:	f7ff fec3 	bl	800b68c <_free_r>
 800b906:	e7ba      	b.n	800b87e <_reclaim_reent+0x16>
 800b908:	680e      	ldr	r6, [r1, #0]
 800b90a:	4620      	mov	r0, r4
 800b90c:	f7ff febe 	bl	800b68c <_free_r>
 800b910:	4631      	mov	r1, r6
 800b912:	e7ef      	b.n	800b8f4 <_reclaim_reent+0x8c>
 800b914:	2500      	movs	r5, #0
 800b916:	e7ef      	b.n	800b8f8 <_reclaim_reent+0x90>
 800b918:	bd70      	pop	{r4, r5, r6, pc}
 800b91a:	bf00      	nop
 800b91c:	20000010 	.word	0x20000010

0800b920 <_sbrk_r>:
 800b920:	b538      	push	{r3, r4, r5, lr}
 800b922:	4d06      	ldr	r5, [pc, #24]	; (800b93c <_sbrk_r+0x1c>)
 800b924:	2300      	movs	r3, #0
 800b926:	4604      	mov	r4, r0
 800b928:	4608      	mov	r0, r1
 800b92a:	602b      	str	r3, [r5, #0]
 800b92c:	f7f6 fcc6 	bl	80022bc <_sbrk>
 800b930:	1c43      	adds	r3, r0, #1
 800b932:	d102      	bne.n	800b93a <_sbrk_r+0x1a>
 800b934:	682b      	ldr	r3, [r5, #0]
 800b936:	b103      	cbz	r3, 800b93a <_sbrk_r+0x1a>
 800b938:	6023      	str	r3, [r4, #0]
 800b93a:	bd38      	pop	{r3, r4, r5, pc}
 800b93c:	20010358 	.word	0x20010358

0800b940 <siprintf>:
 800b940:	b40e      	push	{r1, r2, r3}
 800b942:	b500      	push	{lr}
 800b944:	b09c      	sub	sp, #112	; 0x70
 800b946:	ab1d      	add	r3, sp, #116	; 0x74
 800b948:	9002      	str	r0, [sp, #8]
 800b94a:	9006      	str	r0, [sp, #24]
 800b94c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b950:	4809      	ldr	r0, [pc, #36]	; (800b978 <siprintf+0x38>)
 800b952:	9107      	str	r1, [sp, #28]
 800b954:	9104      	str	r1, [sp, #16]
 800b956:	4909      	ldr	r1, [pc, #36]	; (800b97c <siprintf+0x3c>)
 800b958:	f853 2b04 	ldr.w	r2, [r3], #4
 800b95c:	9105      	str	r1, [sp, #20]
 800b95e:	6800      	ldr	r0, [r0, #0]
 800b960:	9301      	str	r3, [sp, #4]
 800b962:	a902      	add	r1, sp, #8
 800b964:	f000 f874 	bl	800ba50 <_svfiprintf_r>
 800b968:	9b02      	ldr	r3, [sp, #8]
 800b96a:	2200      	movs	r2, #0
 800b96c:	701a      	strb	r2, [r3, #0]
 800b96e:	b01c      	add	sp, #112	; 0x70
 800b970:	f85d eb04 	ldr.w	lr, [sp], #4
 800b974:	b003      	add	sp, #12
 800b976:	4770      	bx	lr
 800b978:	20000010 	.word	0x20000010
 800b97c:	ffff0208 	.word	0xffff0208

0800b980 <__malloc_lock>:
 800b980:	4801      	ldr	r0, [pc, #4]	; (800b988 <__malloc_lock+0x8>)
 800b982:	f7f6 bdd8 	b.w	8002536 <__retarget_lock_acquire_recursive>
 800b986:	bf00      	nop
 800b988:	200007ec 	.word	0x200007ec

0800b98c <__malloc_unlock>:
 800b98c:	4801      	ldr	r0, [pc, #4]	; (800b994 <__malloc_unlock+0x8>)
 800b98e:	f7f6 bde6 	b.w	800255e <__retarget_lock_release_recursive>
 800b992:	bf00      	nop
 800b994:	200007ec 	.word	0x200007ec

0800b998 <__ssputs_r>:
 800b998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b99c:	688e      	ldr	r6, [r1, #8]
 800b99e:	429e      	cmp	r6, r3
 800b9a0:	4682      	mov	sl, r0
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	4690      	mov	r8, r2
 800b9a6:	461f      	mov	r7, r3
 800b9a8:	d838      	bhi.n	800ba1c <__ssputs_r+0x84>
 800b9aa:	898a      	ldrh	r2, [r1, #12]
 800b9ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b9b0:	d032      	beq.n	800ba18 <__ssputs_r+0x80>
 800b9b2:	6825      	ldr	r5, [r4, #0]
 800b9b4:	6909      	ldr	r1, [r1, #16]
 800b9b6:	eba5 0901 	sub.w	r9, r5, r1
 800b9ba:	6965      	ldr	r5, [r4, #20]
 800b9bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	444b      	add	r3, r9
 800b9c8:	106d      	asrs	r5, r5, #1
 800b9ca:	429d      	cmp	r5, r3
 800b9cc:	bf38      	it	cc
 800b9ce:	461d      	movcc	r5, r3
 800b9d0:	0553      	lsls	r3, r2, #21
 800b9d2:	d531      	bpl.n	800ba38 <__ssputs_r+0xa0>
 800b9d4:	4629      	mov	r1, r5
 800b9d6:	f7ff fec5 	bl	800b764 <_malloc_r>
 800b9da:	4606      	mov	r6, r0
 800b9dc:	b950      	cbnz	r0, 800b9f4 <__ssputs_r+0x5c>
 800b9de:	230c      	movs	r3, #12
 800b9e0:	f8ca 3000 	str.w	r3, [sl]
 800b9e4:	89a3      	ldrh	r3, [r4, #12]
 800b9e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9ea:	81a3      	strh	r3, [r4, #12]
 800b9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f4:	6921      	ldr	r1, [r4, #16]
 800b9f6:	464a      	mov	r2, r9
 800b9f8:	f7ff fe32 	bl	800b660 <memcpy>
 800b9fc:	89a3      	ldrh	r3, [r4, #12]
 800b9fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba06:	81a3      	strh	r3, [r4, #12]
 800ba08:	6126      	str	r6, [r4, #16]
 800ba0a:	6165      	str	r5, [r4, #20]
 800ba0c:	444e      	add	r6, r9
 800ba0e:	eba5 0509 	sub.w	r5, r5, r9
 800ba12:	6026      	str	r6, [r4, #0]
 800ba14:	60a5      	str	r5, [r4, #8]
 800ba16:	463e      	mov	r6, r7
 800ba18:	42be      	cmp	r6, r7
 800ba1a:	d900      	bls.n	800ba1e <__ssputs_r+0x86>
 800ba1c:	463e      	mov	r6, r7
 800ba1e:	6820      	ldr	r0, [r4, #0]
 800ba20:	4632      	mov	r2, r6
 800ba22:	4641      	mov	r1, r8
 800ba24:	f000 faa8 	bl	800bf78 <memmove>
 800ba28:	68a3      	ldr	r3, [r4, #8]
 800ba2a:	1b9b      	subs	r3, r3, r6
 800ba2c:	60a3      	str	r3, [r4, #8]
 800ba2e:	6823      	ldr	r3, [r4, #0]
 800ba30:	4433      	add	r3, r6
 800ba32:	6023      	str	r3, [r4, #0]
 800ba34:	2000      	movs	r0, #0
 800ba36:	e7db      	b.n	800b9f0 <__ssputs_r+0x58>
 800ba38:	462a      	mov	r2, r5
 800ba3a:	f000 fab7 	bl	800bfac <_realloc_r>
 800ba3e:	4606      	mov	r6, r0
 800ba40:	2800      	cmp	r0, #0
 800ba42:	d1e1      	bne.n	800ba08 <__ssputs_r+0x70>
 800ba44:	6921      	ldr	r1, [r4, #16]
 800ba46:	4650      	mov	r0, sl
 800ba48:	f7ff fe20 	bl	800b68c <_free_r>
 800ba4c:	e7c7      	b.n	800b9de <__ssputs_r+0x46>
	...

0800ba50 <_svfiprintf_r>:
 800ba50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba54:	4698      	mov	r8, r3
 800ba56:	898b      	ldrh	r3, [r1, #12]
 800ba58:	061b      	lsls	r3, r3, #24
 800ba5a:	b09d      	sub	sp, #116	; 0x74
 800ba5c:	4607      	mov	r7, r0
 800ba5e:	460d      	mov	r5, r1
 800ba60:	4614      	mov	r4, r2
 800ba62:	d50e      	bpl.n	800ba82 <_svfiprintf_r+0x32>
 800ba64:	690b      	ldr	r3, [r1, #16]
 800ba66:	b963      	cbnz	r3, 800ba82 <_svfiprintf_r+0x32>
 800ba68:	2140      	movs	r1, #64	; 0x40
 800ba6a:	f7ff fe7b 	bl	800b764 <_malloc_r>
 800ba6e:	6028      	str	r0, [r5, #0]
 800ba70:	6128      	str	r0, [r5, #16]
 800ba72:	b920      	cbnz	r0, 800ba7e <_svfiprintf_r+0x2e>
 800ba74:	230c      	movs	r3, #12
 800ba76:	603b      	str	r3, [r7, #0]
 800ba78:	f04f 30ff 	mov.w	r0, #4294967295
 800ba7c:	e0d1      	b.n	800bc22 <_svfiprintf_r+0x1d2>
 800ba7e:	2340      	movs	r3, #64	; 0x40
 800ba80:	616b      	str	r3, [r5, #20]
 800ba82:	2300      	movs	r3, #0
 800ba84:	9309      	str	r3, [sp, #36]	; 0x24
 800ba86:	2320      	movs	r3, #32
 800ba88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba90:	2330      	movs	r3, #48	; 0x30
 800ba92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bc3c <_svfiprintf_r+0x1ec>
 800ba96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba9a:	f04f 0901 	mov.w	r9, #1
 800ba9e:	4623      	mov	r3, r4
 800baa0:	469a      	mov	sl, r3
 800baa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baa6:	b10a      	cbz	r2, 800baac <_svfiprintf_r+0x5c>
 800baa8:	2a25      	cmp	r2, #37	; 0x25
 800baaa:	d1f9      	bne.n	800baa0 <_svfiprintf_r+0x50>
 800baac:	ebba 0b04 	subs.w	fp, sl, r4
 800bab0:	d00b      	beq.n	800baca <_svfiprintf_r+0x7a>
 800bab2:	465b      	mov	r3, fp
 800bab4:	4622      	mov	r2, r4
 800bab6:	4629      	mov	r1, r5
 800bab8:	4638      	mov	r0, r7
 800baba:	f7ff ff6d 	bl	800b998 <__ssputs_r>
 800babe:	3001      	adds	r0, #1
 800bac0:	f000 80aa 	beq.w	800bc18 <_svfiprintf_r+0x1c8>
 800bac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bac6:	445a      	add	r2, fp
 800bac8:	9209      	str	r2, [sp, #36]	; 0x24
 800baca:	f89a 3000 	ldrb.w	r3, [sl]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	f000 80a2 	beq.w	800bc18 <_svfiprintf_r+0x1c8>
 800bad4:	2300      	movs	r3, #0
 800bad6:	f04f 32ff 	mov.w	r2, #4294967295
 800bada:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bade:	f10a 0a01 	add.w	sl, sl, #1
 800bae2:	9304      	str	r3, [sp, #16]
 800bae4:	9307      	str	r3, [sp, #28]
 800bae6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baea:	931a      	str	r3, [sp, #104]	; 0x68
 800baec:	4654      	mov	r4, sl
 800baee:	2205      	movs	r2, #5
 800baf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baf4:	4851      	ldr	r0, [pc, #324]	; (800bc3c <_svfiprintf_r+0x1ec>)
 800baf6:	f7f4 fb8b 	bl	8000210 <memchr>
 800bafa:	9a04      	ldr	r2, [sp, #16]
 800bafc:	b9d8      	cbnz	r0, 800bb36 <_svfiprintf_r+0xe6>
 800bafe:	06d0      	lsls	r0, r2, #27
 800bb00:	bf44      	itt	mi
 800bb02:	2320      	movmi	r3, #32
 800bb04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb08:	0711      	lsls	r1, r2, #28
 800bb0a:	bf44      	itt	mi
 800bb0c:	232b      	movmi	r3, #43	; 0x2b
 800bb0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb12:	f89a 3000 	ldrb.w	r3, [sl]
 800bb16:	2b2a      	cmp	r3, #42	; 0x2a
 800bb18:	d015      	beq.n	800bb46 <_svfiprintf_r+0xf6>
 800bb1a:	9a07      	ldr	r2, [sp, #28]
 800bb1c:	4654      	mov	r4, sl
 800bb1e:	2000      	movs	r0, #0
 800bb20:	f04f 0c0a 	mov.w	ip, #10
 800bb24:	4621      	mov	r1, r4
 800bb26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb2a:	3b30      	subs	r3, #48	; 0x30
 800bb2c:	2b09      	cmp	r3, #9
 800bb2e:	d94e      	bls.n	800bbce <_svfiprintf_r+0x17e>
 800bb30:	b1b0      	cbz	r0, 800bb60 <_svfiprintf_r+0x110>
 800bb32:	9207      	str	r2, [sp, #28]
 800bb34:	e014      	b.n	800bb60 <_svfiprintf_r+0x110>
 800bb36:	eba0 0308 	sub.w	r3, r0, r8
 800bb3a:	fa09 f303 	lsl.w	r3, r9, r3
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	9304      	str	r3, [sp, #16]
 800bb42:	46a2      	mov	sl, r4
 800bb44:	e7d2      	b.n	800baec <_svfiprintf_r+0x9c>
 800bb46:	9b03      	ldr	r3, [sp, #12]
 800bb48:	1d19      	adds	r1, r3, #4
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	9103      	str	r1, [sp, #12]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	bfbb      	ittet	lt
 800bb52:	425b      	neglt	r3, r3
 800bb54:	f042 0202 	orrlt.w	r2, r2, #2
 800bb58:	9307      	strge	r3, [sp, #28]
 800bb5a:	9307      	strlt	r3, [sp, #28]
 800bb5c:	bfb8      	it	lt
 800bb5e:	9204      	strlt	r2, [sp, #16]
 800bb60:	7823      	ldrb	r3, [r4, #0]
 800bb62:	2b2e      	cmp	r3, #46	; 0x2e
 800bb64:	d10c      	bne.n	800bb80 <_svfiprintf_r+0x130>
 800bb66:	7863      	ldrb	r3, [r4, #1]
 800bb68:	2b2a      	cmp	r3, #42	; 0x2a
 800bb6a:	d135      	bne.n	800bbd8 <_svfiprintf_r+0x188>
 800bb6c:	9b03      	ldr	r3, [sp, #12]
 800bb6e:	1d1a      	adds	r2, r3, #4
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	9203      	str	r2, [sp, #12]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	bfb8      	it	lt
 800bb78:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb7c:	3402      	adds	r4, #2
 800bb7e:	9305      	str	r3, [sp, #20]
 800bb80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bc4c <_svfiprintf_r+0x1fc>
 800bb84:	7821      	ldrb	r1, [r4, #0]
 800bb86:	2203      	movs	r2, #3
 800bb88:	4650      	mov	r0, sl
 800bb8a:	f7f4 fb41 	bl	8000210 <memchr>
 800bb8e:	b140      	cbz	r0, 800bba2 <_svfiprintf_r+0x152>
 800bb90:	2340      	movs	r3, #64	; 0x40
 800bb92:	eba0 000a 	sub.w	r0, r0, sl
 800bb96:	fa03 f000 	lsl.w	r0, r3, r0
 800bb9a:	9b04      	ldr	r3, [sp, #16]
 800bb9c:	4303      	orrs	r3, r0
 800bb9e:	3401      	adds	r4, #1
 800bba0:	9304      	str	r3, [sp, #16]
 800bba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bba6:	4826      	ldr	r0, [pc, #152]	; (800bc40 <_svfiprintf_r+0x1f0>)
 800bba8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbac:	2206      	movs	r2, #6
 800bbae:	f7f4 fb2f 	bl	8000210 <memchr>
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	d038      	beq.n	800bc28 <_svfiprintf_r+0x1d8>
 800bbb6:	4b23      	ldr	r3, [pc, #140]	; (800bc44 <_svfiprintf_r+0x1f4>)
 800bbb8:	bb1b      	cbnz	r3, 800bc02 <_svfiprintf_r+0x1b2>
 800bbba:	9b03      	ldr	r3, [sp, #12]
 800bbbc:	3307      	adds	r3, #7
 800bbbe:	f023 0307 	bic.w	r3, r3, #7
 800bbc2:	3308      	adds	r3, #8
 800bbc4:	9303      	str	r3, [sp, #12]
 800bbc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbc8:	4433      	add	r3, r6
 800bbca:	9309      	str	r3, [sp, #36]	; 0x24
 800bbcc:	e767      	b.n	800ba9e <_svfiprintf_r+0x4e>
 800bbce:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbd2:	460c      	mov	r4, r1
 800bbd4:	2001      	movs	r0, #1
 800bbd6:	e7a5      	b.n	800bb24 <_svfiprintf_r+0xd4>
 800bbd8:	2300      	movs	r3, #0
 800bbda:	3401      	adds	r4, #1
 800bbdc:	9305      	str	r3, [sp, #20]
 800bbde:	4619      	mov	r1, r3
 800bbe0:	f04f 0c0a 	mov.w	ip, #10
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbea:	3a30      	subs	r2, #48	; 0x30
 800bbec:	2a09      	cmp	r2, #9
 800bbee:	d903      	bls.n	800bbf8 <_svfiprintf_r+0x1a8>
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d0c5      	beq.n	800bb80 <_svfiprintf_r+0x130>
 800bbf4:	9105      	str	r1, [sp, #20]
 800bbf6:	e7c3      	b.n	800bb80 <_svfiprintf_r+0x130>
 800bbf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbfc:	4604      	mov	r4, r0
 800bbfe:	2301      	movs	r3, #1
 800bc00:	e7f0      	b.n	800bbe4 <_svfiprintf_r+0x194>
 800bc02:	ab03      	add	r3, sp, #12
 800bc04:	9300      	str	r3, [sp, #0]
 800bc06:	462a      	mov	r2, r5
 800bc08:	4b0f      	ldr	r3, [pc, #60]	; (800bc48 <_svfiprintf_r+0x1f8>)
 800bc0a:	a904      	add	r1, sp, #16
 800bc0c:	4638      	mov	r0, r7
 800bc0e:	f3af 8000 	nop.w
 800bc12:	1c42      	adds	r2, r0, #1
 800bc14:	4606      	mov	r6, r0
 800bc16:	d1d6      	bne.n	800bbc6 <_svfiprintf_r+0x176>
 800bc18:	89ab      	ldrh	r3, [r5, #12]
 800bc1a:	065b      	lsls	r3, r3, #25
 800bc1c:	f53f af2c 	bmi.w	800ba78 <_svfiprintf_r+0x28>
 800bc20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc22:	b01d      	add	sp, #116	; 0x74
 800bc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc28:	ab03      	add	r3, sp, #12
 800bc2a:	9300      	str	r3, [sp, #0]
 800bc2c:	462a      	mov	r2, r5
 800bc2e:	4b06      	ldr	r3, [pc, #24]	; (800bc48 <_svfiprintf_r+0x1f8>)
 800bc30:	a904      	add	r1, sp, #16
 800bc32:	4638      	mov	r0, r7
 800bc34:	f000 f87a 	bl	800bd2c <_printf_i>
 800bc38:	e7eb      	b.n	800bc12 <_svfiprintf_r+0x1c2>
 800bc3a:	bf00      	nop
 800bc3c:	0800c3d0 	.word	0x0800c3d0
 800bc40:	0800c3da 	.word	0x0800c3da
 800bc44:	00000000 	.word	0x00000000
 800bc48:	0800b999 	.word	0x0800b999
 800bc4c:	0800c3d6 	.word	0x0800c3d6

0800bc50 <_printf_common>:
 800bc50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc54:	4616      	mov	r6, r2
 800bc56:	4699      	mov	r9, r3
 800bc58:	688a      	ldr	r2, [r1, #8]
 800bc5a:	690b      	ldr	r3, [r1, #16]
 800bc5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc60:	4293      	cmp	r3, r2
 800bc62:	bfb8      	it	lt
 800bc64:	4613      	movlt	r3, r2
 800bc66:	6033      	str	r3, [r6, #0]
 800bc68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc6c:	4607      	mov	r7, r0
 800bc6e:	460c      	mov	r4, r1
 800bc70:	b10a      	cbz	r2, 800bc76 <_printf_common+0x26>
 800bc72:	3301      	adds	r3, #1
 800bc74:	6033      	str	r3, [r6, #0]
 800bc76:	6823      	ldr	r3, [r4, #0]
 800bc78:	0699      	lsls	r1, r3, #26
 800bc7a:	bf42      	ittt	mi
 800bc7c:	6833      	ldrmi	r3, [r6, #0]
 800bc7e:	3302      	addmi	r3, #2
 800bc80:	6033      	strmi	r3, [r6, #0]
 800bc82:	6825      	ldr	r5, [r4, #0]
 800bc84:	f015 0506 	ands.w	r5, r5, #6
 800bc88:	d106      	bne.n	800bc98 <_printf_common+0x48>
 800bc8a:	f104 0a19 	add.w	sl, r4, #25
 800bc8e:	68e3      	ldr	r3, [r4, #12]
 800bc90:	6832      	ldr	r2, [r6, #0]
 800bc92:	1a9b      	subs	r3, r3, r2
 800bc94:	42ab      	cmp	r3, r5
 800bc96:	dc26      	bgt.n	800bce6 <_printf_common+0x96>
 800bc98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc9c:	1e13      	subs	r3, r2, #0
 800bc9e:	6822      	ldr	r2, [r4, #0]
 800bca0:	bf18      	it	ne
 800bca2:	2301      	movne	r3, #1
 800bca4:	0692      	lsls	r2, r2, #26
 800bca6:	d42b      	bmi.n	800bd00 <_printf_common+0xb0>
 800bca8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bcac:	4649      	mov	r1, r9
 800bcae:	4638      	mov	r0, r7
 800bcb0:	47c0      	blx	r8
 800bcb2:	3001      	adds	r0, #1
 800bcb4:	d01e      	beq.n	800bcf4 <_printf_common+0xa4>
 800bcb6:	6823      	ldr	r3, [r4, #0]
 800bcb8:	68e5      	ldr	r5, [r4, #12]
 800bcba:	6832      	ldr	r2, [r6, #0]
 800bcbc:	f003 0306 	and.w	r3, r3, #6
 800bcc0:	2b04      	cmp	r3, #4
 800bcc2:	bf08      	it	eq
 800bcc4:	1aad      	subeq	r5, r5, r2
 800bcc6:	68a3      	ldr	r3, [r4, #8]
 800bcc8:	6922      	ldr	r2, [r4, #16]
 800bcca:	bf0c      	ite	eq
 800bccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcd0:	2500      	movne	r5, #0
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	bfc4      	itt	gt
 800bcd6:	1a9b      	subgt	r3, r3, r2
 800bcd8:	18ed      	addgt	r5, r5, r3
 800bcda:	2600      	movs	r6, #0
 800bcdc:	341a      	adds	r4, #26
 800bcde:	42b5      	cmp	r5, r6
 800bce0:	d11a      	bne.n	800bd18 <_printf_common+0xc8>
 800bce2:	2000      	movs	r0, #0
 800bce4:	e008      	b.n	800bcf8 <_printf_common+0xa8>
 800bce6:	2301      	movs	r3, #1
 800bce8:	4652      	mov	r2, sl
 800bcea:	4649      	mov	r1, r9
 800bcec:	4638      	mov	r0, r7
 800bcee:	47c0      	blx	r8
 800bcf0:	3001      	adds	r0, #1
 800bcf2:	d103      	bne.n	800bcfc <_printf_common+0xac>
 800bcf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcfc:	3501      	adds	r5, #1
 800bcfe:	e7c6      	b.n	800bc8e <_printf_common+0x3e>
 800bd00:	18e1      	adds	r1, r4, r3
 800bd02:	1c5a      	adds	r2, r3, #1
 800bd04:	2030      	movs	r0, #48	; 0x30
 800bd06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd0a:	4422      	add	r2, r4
 800bd0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd14:	3302      	adds	r3, #2
 800bd16:	e7c7      	b.n	800bca8 <_printf_common+0x58>
 800bd18:	2301      	movs	r3, #1
 800bd1a:	4622      	mov	r2, r4
 800bd1c:	4649      	mov	r1, r9
 800bd1e:	4638      	mov	r0, r7
 800bd20:	47c0      	blx	r8
 800bd22:	3001      	adds	r0, #1
 800bd24:	d0e6      	beq.n	800bcf4 <_printf_common+0xa4>
 800bd26:	3601      	adds	r6, #1
 800bd28:	e7d9      	b.n	800bcde <_printf_common+0x8e>
	...

0800bd2c <_printf_i>:
 800bd2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd30:	7e0f      	ldrb	r7, [r1, #24]
 800bd32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd34:	2f78      	cmp	r7, #120	; 0x78
 800bd36:	4691      	mov	r9, r2
 800bd38:	4680      	mov	r8, r0
 800bd3a:	460c      	mov	r4, r1
 800bd3c:	469a      	mov	sl, r3
 800bd3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd42:	d807      	bhi.n	800bd54 <_printf_i+0x28>
 800bd44:	2f62      	cmp	r7, #98	; 0x62
 800bd46:	d80a      	bhi.n	800bd5e <_printf_i+0x32>
 800bd48:	2f00      	cmp	r7, #0
 800bd4a:	f000 80d8 	beq.w	800befe <_printf_i+0x1d2>
 800bd4e:	2f58      	cmp	r7, #88	; 0x58
 800bd50:	f000 80a3 	beq.w	800be9a <_printf_i+0x16e>
 800bd54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd5c:	e03a      	b.n	800bdd4 <_printf_i+0xa8>
 800bd5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd62:	2b15      	cmp	r3, #21
 800bd64:	d8f6      	bhi.n	800bd54 <_printf_i+0x28>
 800bd66:	a101      	add	r1, pc, #4	; (adr r1, 800bd6c <_printf_i+0x40>)
 800bd68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd6c:	0800bdc5 	.word	0x0800bdc5
 800bd70:	0800bdd9 	.word	0x0800bdd9
 800bd74:	0800bd55 	.word	0x0800bd55
 800bd78:	0800bd55 	.word	0x0800bd55
 800bd7c:	0800bd55 	.word	0x0800bd55
 800bd80:	0800bd55 	.word	0x0800bd55
 800bd84:	0800bdd9 	.word	0x0800bdd9
 800bd88:	0800bd55 	.word	0x0800bd55
 800bd8c:	0800bd55 	.word	0x0800bd55
 800bd90:	0800bd55 	.word	0x0800bd55
 800bd94:	0800bd55 	.word	0x0800bd55
 800bd98:	0800bee5 	.word	0x0800bee5
 800bd9c:	0800be09 	.word	0x0800be09
 800bda0:	0800bec7 	.word	0x0800bec7
 800bda4:	0800bd55 	.word	0x0800bd55
 800bda8:	0800bd55 	.word	0x0800bd55
 800bdac:	0800bf07 	.word	0x0800bf07
 800bdb0:	0800bd55 	.word	0x0800bd55
 800bdb4:	0800be09 	.word	0x0800be09
 800bdb8:	0800bd55 	.word	0x0800bd55
 800bdbc:	0800bd55 	.word	0x0800bd55
 800bdc0:	0800becf 	.word	0x0800becf
 800bdc4:	682b      	ldr	r3, [r5, #0]
 800bdc6:	1d1a      	adds	r2, r3, #4
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	602a      	str	r2, [r5, #0]
 800bdcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	e0a3      	b.n	800bf20 <_printf_i+0x1f4>
 800bdd8:	6820      	ldr	r0, [r4, #0]
 800bdda:	6829      	ldr	r1, [r5, #0]
 800bddc:	0606      	lsls	r6, r0, #24
 800bdde:	f101 0304 	add.w	r3, r1, #4
 800bde2:	d50a      	bpl.n	800bdfa <_printf_i+0xce>
 800bde4:	680e      	ldr	r6, [r1, #0]
 800bde6:	602b      	str	r3, [r5, #0]
 800bde8:	2e00      	cmp	r6, #0
 800bdea:	da03      	bge.n	800bdf4 <_printf_i+0xc8>
 800bdec:	232d      	movs	r3, #45	; 0x2d
 800bdee:	4276      	negs	r6, r6
 800bdf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdf4:	485e      	ldr	r0, [pc, #376]	; (800bf70 <_printf_i+0x244>)
 800bdf6:	230a      	movs	r3, #10
 800bdf8:	e019      	b.n	800be2e <_printf_i+0x102>
 800bdfa:	680e      	ldr	r6, [r1, #0]
 800bdfc:	602b      	str	r3, [r5, #0]
 800bdfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be02:	bf18      	it	ne
 800be04:	b236      	sxthne	r6, r6
 800be06:	e7ef      	b.n	800bde8 <_printf_i+0xbc>
 800be08:	682b      	ldr	r3, [r5, #0]
 800be0a:	6820      	ldr	r0, [r4, #0]
 800be0c:	1d19      	adds	r1, r3, #4
 800be0e:	6029      	str	r1, [r5, #0]
 800be10:	0601      	lsls	r1, r0, #24
 800be12:	d501      	bpl.n	800be18 <_printf_i+0xec>
 800be14:	681e      	ldr	r6, [r3, #0]
 800be16:	e002      	b.n	800be1e <_printf_i+0xf2>
 800be18:	0646      	lsls	r6, r0, #25
 800be1a:	d5fb      	bpl.n	800be14 <_printf_i+0xe8>
 800be1c:	881e      	ldrh	r6, [r3, #0]
 800be1e:	4854      	ldr	r0, [pc, #336]	; (800bf70 <_printf_i+0x244>)
 800be20:	2f6f      	cmp	r7, #111	; 0x6f
 800be22:	bf0c      	ite	eq
 800be24:	2308      	moveq	r3, #8
 800be26:	230a      	movne	r3, #10
 800be28:	2100      	movs	r1, #0
 800be2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be2e:	6865      	ldr	r5, [r4, #4]
 800be30:	60a5      	str	r5, [r4, #8]
 800be32:	2d00      	cmp	r5, #0
 800be34:	bfa2      	ittt	ge
 800be36:	6821      	ldrge	r1, [r4, #0]
 800be38:	f021 0104 	bicge.w	r1, r1, #4
 800be3c:	6021      	strge	r1, [r4, #0]
 800be3e:	b90e      	cbnz	r6, 800be44 <_printf_i+0x118>
 800be40:	2d00      	cmp	r5, #0
 800be42:	d04d      	beq.n	800bee0 <_printf_i+0x1b4>
 800be44:	4615      	mov	r5, r2
 800be46:	fbb6 f1f3 	udiv	r1, r6, r3
 800be4a:	fb03 6711 	mls	r7, r3, r1, r6
 800be4e:	5dc7      	ldrb	r7, [r0, r7]
 800be50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be54:	4637      	mov	r7, r6
 800be56:	42bb      	cmp	r3, r7
 800be58:	460e      	mov	r6, r1
 800be5a:	d9f4      	bls.n	800be46 <_printf_i+0x11a>
 800be5c:	2b08      	cmp	r3, #8
 800be5e:	d10b      	bne.n	800be78 <_printf_i+0x14c>
 800be60:	6823      	ldr	r3, [r4, #0]
 800be62:	07de      	lsls	r6, r3, #31
 800be64:	d508      	bpl.n	800be78 <_printf_i+0x14c>
 800be66:	6923      	ldr	r3, [r4, #16]
 800be68:	6861      	ldr	r1, [r4, #4]
 800be6a:	4299      	cmp	r1, r3
 800be6c:	bfde      	ittt	le
 800be6e:	2330      	movle	r3, #48	; 0x30
 800be70:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be74:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be78:	1b52      	subs	r2, r2, r5
 800be7a:	6122      	str	r2, [r4, #16]
 800be7c:	f8cd a000 	str.w	sl, [sp]
 800be80:	464b      	mov	r3, r9
 800be82:	aa03      	add	r2, sp, #12
 800be84:	4621      	mov	r1, r4
 800be86:	4640      	mov	r0, r8
 800be88:	f7ff fee2 	bl	800bc50 <_printf_common>
 800be8c:	3001      	adds	r0, #1
 800be8e:	d14c      	bne.n	800bf2a <_printf_i+0x1fe>
 800be90:	f04f 30ff 	mov.w	r0, #4294967295
 800be94:	b004      	add	sp, #16
 800be96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be9a:	4835      	ldr	r0, [pc, #212]	; (800bf70 <_printf_i+0x244>)
 800be9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bea0:	6829      	ldr	r1, [r5, #0]
 800bea2:	6823      	ldr	r3, [r4, #0]
 800bea4:	f851 6b04 	ldr.w	r6, [r1], #4
 800bea8:	6029      	str	r1, [r5, #0]
 800beaa:	061d      	lsls	r5, r3, #24
 800beac:	d514      	bpl.n	800bed8 <_printf_i+0x1ac>
 800beae:	07df      	lsls	r7, r3, #31
 800beb0:	bf44      	itt	mi
 800beb2:	f043 0320 	orrmi.w	r3, r3, #32
 800beb6:	6023      	strmi	r3, [r4, #0]
 800beb8:	b91e      	cbnz	r6, 800bec2 <_printf_i+0x196>
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	f023 0320 	bic.w	r3, r3, #32
 800bec0:	6023      	str	r3, [r4, #0]
 800bec2:	2310      	movs	r3, #16
 800bec4:	e7b0      	b.n	800be28 <_printf_i+0xfc>
 800bec6:	6823      	ldr	r3, [r4, #0]
 800bec8:	f043 0320 	orr.w	r3, r3, #32
 800becc:	6023      	str	r3, [r4, #0]
 800bece:	2378      	movs	r3, #120	; 0x78
 800bed0:	4828      	ldr	r0, [pc, #160]	; (800bf74 <_printf_i+0x248>)
 800bed2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bed6:	e7e3      	b.n	800bea0 <_printf_i+0x174>
 800bed8:	0659      	lsls	r1, r3, #25
 800beda:	bf48      	it	mi
 800bedc:	b2b6      	uxthmi	r6, r6
 800bede:	e7e6      	b.n	800beae <_printf_i+0x182>
 800bee0:	4615      	mov	r5, r2
 800bee2:	e7bb      	b.n	800be5c <_printf_i+0x130>
 800bee4:	682b      	ldr	r3, [r5, #0]
 800bee6:	6826      	ldr	r6, [r4, #0]
 800bee8:	6961      	ldr	r1, [r4, #20]
 800beea:	1d18      	adds	r0, r3, #4
 800beec:	6028      	str	r0, [r5, #0]
 800beee:	0635      	lsls	r5, r6, #24
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	d501      	bpl.n	800bef8 <_printf_i+0x1cc>
 800bef4:	6019      	str	r1, [r3, #0]
 800bef6:	e002      	b.n	800befe <_printf_i+0x1d2>
 800bef8:	0670      	lsls	r0, r6, #25
 800befa:	d5fb      	bpl.n	800bef4 <_printf_i+0x1c8>
 800befc:	8019      	strh	r1, [r3, #0]
 800befe:	2300      	movs	r3, #0
 800bf00:	6123      	str	r3, [r4, #16]
 800bf02:	4615      	mov	r5, r2
 800bf04:	e7ba      	b.n	800be7c <_printf_i+0x150>
 800bf06:	682b      	ldr	r3, [r5, #0]
 800bf08:	1d1a      	adds	r2, r3, #4
 800bf0a:	602a      	str	r2, [r5, #0]
 800bf0c:	681d      	ldr	r5, [r3, #0]
 800bf0e:	6862      	ldr	r2, [r4, #4]
 800bf10:	2100      	movs	r1, #0
 800bf12:	4628      	mov	r0, r5
 800bf14:	f7f4 f97c 	bl	8000210 <memchr>
 800bf18:	b108      	cbz	r0, 800bf1e <_printf_i+0x1f2>
 800bf1a:	1b40      	subs	r0, r0, r5
 800bf1c:	6060      	str	r0, [r4, #4]
 800bf1e:	6863      	ldr	r3, [r4, #4]
 800bf20:	6123      	str	r3, [r4, #16]
 800bf22:	2300      	movs	r3, #0
 800bf24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf28:	e7a8      	b.n	800be7c <_printf_i+0x150>
 800bf2a:	6923      	ldr	r3, [r4, #16]
 800bf2c:	462a      	mov	r2, r5
 800bf2e:	4649      	mov	r1, r9
 800bf30:	4640      	mov	r0, r8
 800bf32:	47d0      	blx	sl
 800bf34:	3001      	adds	r0, #1
 800bf36:	d0ab      	beq.n	800be90 <_printf_i+0x164>
 800bf38:	6823      	ldr	r3, [r4, #0]
 800bf3a:	079b      	lsls	r3, r3, #30
 800bf3c:	d413      	bmi.n	800bf66 <_printf_i+0x23a>
 800bf3e:	68e0      	ldr	r0, [r4, #12]
 800bf40:	9b03      	ldr	r3, [sp, #12]
 800bf42:	4298      	cmp	r0, r3
 800bf44:	bfb8      	it	lt
 800bf46:	4618      	movlt	r0, r3
 800bf48:	e7a4      	b.n	800be94 <_printf_i+0x168>
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	4632      	mov	r2, r6
 800bf4e:	4649      	mov	r1, r9
 800bf50:	4640      	mov	r0, r8
 800bf52:	47d0      	blx	sl
 800bf54:	3001      	adds	r0, #1
 800bf56:	d09b      	beq.n	800be90 <_printf_i+0x164>
 800bf58:	3501      	adds	r5, #1
 800bf5a:	68e3      	ldr	r3, [r4, #12]
 800bf5c:	9903      	ldr	r1, [sp, #12]
 800bf5e:	1a5b      	subs	r3, r3, r1
 800bf60:	42ab      	cmp	r3, r5
 800bf62:	dcf2      	bgt.n	800bf4a <_printf_i+0x21e>
 800bf64:	e7eb      	b.n	800bf3e <_printf_i+0x212>
 800bf66:	2500      	movs	r5, #0
 800bf68:	f104 0619 	add.w	r6, r4, #25
 800bf6c:	e7f5      	b.n	800bf5a <_printf_i+0x22e>
 800bf6e:	bf00      	nop
 800bf70:	0800c3e1 	.word	0x0800c3e1
 800bf74:	0800c3f2 	.word	0x0800c3f2

0800bf78 <memmove>:
 800bf78:	4288      	cmp	r0, r1
 800bf7a:	b510      	push	{r4, lr}
 800bf7c:	eb01 0402 	add.w	r4, r1, r2
 800bf80:	d902      	bls.n	800bf88 <memmove+0x10>
 800bf82:	4284      	cmp	r4, r0
 800bf84:	4623      	mov	r3, r4
 800bf86:	d807      	bhi.n	800bf98 <memmove+0x20>
 800bf88:	1e43      	subs	r3, r0, #1
 800bf8a:	42a1      	cmp	r1, r4
 800bf8c:	d008      	beq.n	800bfa0 <memmove+0x28>
 800bf8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf96:	e7f8      	b.n	800bf8a <memmove+0x12>
 800bf98:	4402      	add	r2, r0
 800bf9a:	4601      	mov	r1, r0
 800bf9c:	428a      	cmp	r2, r1
 800bf9e:	d100      	bne.n	800bfa2 <memmove+0x2a>
 800bfa0:	bd10      	pop	{r4, pc}
 800bfa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bfa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bfaa:	e7f7      	b.n	800bf9c <memmove+0x24>

0800bfac <_realloc_r>:
 800bfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb0:	4680      	mov	r8, r0
 800bfb2:	4614      	mov	r4, r2
 800bfb4:	460e      	mov	r6, r1
 800bfb6:	b921      	cbnz	r1, 800bfc2 <_realloc_r+0x16>
 800bfb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfbc:	4611      	mov	r1, r2
 800bfbe:	f7ff bbd1 	b.w	800b764 <_malloc_r>
 800bfc2:	b92a      	cbnz	r2, 800bfd0 <_realloc_r+0x24>
 800bfc4:	f7ff fb62 	bl	800b68c <_free_r>
 800bfc8:	4625      	mov	r5, r4
 800bfca:	4628      	mov	r0, r5
 800bfcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfd0:	f000 f81b 	bl	800c00a <_malloc_usable_size_r>
 800bfd4:	4284      	cmp	r4, r0
 800bfd6:	4607      	mov	r7, r0
 800bfd8:	d802      	bhi.n	800bfe0 <_realloc_r+0x34>
 800bfda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bfde:	d812      	bhi.n	800c006 <_realloc_r+0x5a>
 800bfe0:	4621      	mov	r1, r4
 800bfe2:	4640      	mov	r0, r8
 800bfe4:	f7ff fbbe 	bl	800b764 <_malloc_r>
 800bfe8:	4605      	mov	r5, r0
 800bfea:	2800      	cmp	r0, #0
 800bfec:	d0ed      	beq.n	800bfca <_realloc_r+0x1e>
 800bfee:	42bc      	cmp	r4, r7
 800bff0:	4622      	mov	r2, r4
 800bff2:	4631      	mov	r1, r6
 800bff4:	bf28      	it	cs
 800bff6:	463a      	movcs	r2, r7
 800bff8:	f7ff fb32 	bl	800b660 <memcpy>
 800bffc:	4631      	mov	r1, r6
 800bffe:	4640      	mov	r0, r8
 800c000:	f7ff fb44 	bl	800b68c <_free_r>
 800c004:	e7e1      	b.n	800bfca <_realloc_r+0x1e>
 800c006:	4635      	mov	r5, r6
 800c008:	e7df      	b.n	800bfca <_realloc_r+0x1e>

0800c00a <_malloc_usable_size_r>:
 800c00a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c00e:	1f18      	subs	r0, r3, #4
 800c010:	2b00      	cmp	r3, #0
 800c012:	bfbc      	itt	lt
 800c014:	580b      	ldrlt	r3, [r1, r0]
 800c016:	18c0      	addlt	r0, r0, r3
 800c018:	4770      	bx	lr
	...

0800c01c <_init>:
 800c01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c01e:	bf00      	nop
 800c020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c022:	bc08      	pop	{r3}
 800c024:	469e      	mov	lr, r3
 800c026:	4770      	bx	lr

0800c028 <_fini>:
 800c028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c02a:	bf00      	nop
 800c02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c02e:	bc08      	pop	{r3}
 800c030:	469e      	mov	lr, r3
 800c032:	4770      	bx	lr
>>>>>>> bfd350263db3b4d879dfe7180de43cc4c71ca080
