
AlgoFetBms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000babc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  0800bc8c  0800bc8c  0001bc8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c038  0800c038  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c038  0800c038  0001c038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c040  0800c040  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c040  0800c040  0001c040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c044  0800c044  0001c044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800c048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001033c  200000b4  0800c0fc  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200103f0  0800c0fc  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000225bf  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055fb  00000000  00000000  000426a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d98  00000000  00000000  00047ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b58  00000000  00000000  00049a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028af6  00000000  00000000  0004b590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000292c9  00000000  00000000  00074086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2be7  00000000  00000000  0009d34f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018ff36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b94  00000000  00000000  0018ff88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bc74 	.word	0x0800bc74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800bc74 	.word	0x0800bc74

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <Unpack_FCU_STATE_REQUEST_can_codegen>:

#endif // CAN_CODEGEN_USE_DIAG_MONITORS


uint32_t Unpack_FCU_STATE_REQUEST_can_codegen(FCU_STATE_REQUEST_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	4613      	mov	r3, r2
 8000520:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->FCU_StateRequest = (_d[0] & (0x07U));
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	f003 0307 	and.w	r3, r3, #7
 800052a:	b2da      	uxtb	r2, r3
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	701a      	strb	r2, [r3, #0]
  _m->mon1.frame_cnt++;

  FMon_FCU_STATE_REQUEST_can_codegen(&_m->mon1, FCU_STATE_REQUEST_CANID);
#endif // CAN_CODEGEN_USE_DIAG_MONITORS

  return FCU_STATE_REQUEST_CANID;
 8000530:	f240 1301 	movw	r3, #257	; 0x101
}
 8000534:	4618      	mov	r0, r3
 8000536:	3714      	adds	r7, #20
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <Pack_BAT_BMS_OvrVIEW_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_BMS_OvrVIEW_can_codegen(BAT_BMS_OvrVIEW_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_BMS_OvrVIEW_DLC) && (i < 8); cframe->Data[i++] = 0);
 800054a:	2300      	movs	r3, #0
 800054c:	73fb      	strb	r3, [r7, #15]
 800054e:	e007      	b.n	8000560 <Pack_BAT_BMS_OvrVIEW_can_codegen+0x20>
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	73fa      	strb	r2, [r7, #15]
 8000556:	461a      	mov	r2, r3
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	4413      	add	r3, r2
 800055c:	2200      	movs	r2, #0
 800055e:	715a      	strb	r2, [r3, #5]
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d802      	bhi.n	800056c <Pack_BAT_BMS_OvrVIEW_can_codegen+0x2c>
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	2b07      	cmp	r3, #7
 800056a:	d9f1      	bls.n	8000550 <Pack_BAT_BMS_OvrVIEW_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_bms_StateReqSrc & (0xFFU));
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	795a      	ldrb	r2, [r3, #5]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	4313      	orrs	r3, r2
 8000576:	b2da      	uxtb	r2, r3
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= (_m->BAT_bms_PackState & (0xFFU));
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	799a      	ldrb	r2, [r3, #6]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	785b      	ldrb	r3, [r3, #1]
 8000584:	4313      	orrs	r3, r2
 8000586:	b2da      	uxtb	r2, r3
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	719a      	strb	r2, [r3, #6]

  cframe->MsgId = BAT_BMS_OvrVIEW_CANID;
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <Pack_BAT_BMS_OvrVIEW_can_codegen+0x6c>)
 8000590:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_BMS_OvrVIEW_DLC;
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	2202      	movs	r2, #2
 8000596:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_BMS_OvrVIEW_IDE;
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	2201      	movs	r2, #1
 800059c:	735a      	strb	r2, [r3, #13]
  return BAT_BMS_OvrVIEW_CANID;
 800059e:	4b03      	ldr	r3, [pc, #12]	; (80005ac <Pack_BAT_BMS_OvrVIEW_can_codegen+0x6c>)
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	001ff610 	.word	0x001ff610

080005b0 <Pack_BAT_BMS_ExtTemp_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_BMS_ExtTemp_can_codegen(BAT_BMS_ExtTemp_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_BMS_ExtTemp_DLC) && (i < 8); cframe->Data[i++] = 0);
 80005ba:	2300      	movs	r3, #0
 80005bc:	73fb      	strb	r3, [r7, #15]
 80005be:	e007      	b.n	80005d0 <Pack_BAT_BMS_ExtTemp_can_codegen+0x20>
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	1c5a      	adds	r2, r3, #1
 80005c4:	73fa      	strb	r2, [r7, #15]
 80005c6:	461a      	mov	r2, r3
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	2200      	movs	r2, #0
 80005ce:	715a      	strb	r2, [r3, #5]
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	2b03      	cmp	r3, #3
 80005d4:	d802      	bhi.n	80005dc <Pack_BAT_BMS_ExtTemp_can_codegen+0x2c>
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	2b07      	cmp	r3, #7
 80005da:	d9f1      	bls.n	80005c0 <Pack_BAT_BMS_ExtTemp_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_bms_ext_temp1 & (0xFFU));
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	795a      	ldrb	r2, [r3, #5]
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	4313      	orrs	r3, r2
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_bms_ext_temp1 >> 8) & (0xFFU));
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	799a      	ldrb	r2, [r3, #6]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	0a1b      	lsrs	r3, r3, #8
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	4313      	orrs	r3, r2
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_bms_ext_temp2 & (0xFFU));
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	79da      	ldrb	r2, [r3, #7]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	885b      	ldrh	r3, [r3, #2]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	4313      	orrs	r3, r2
 8000610:	b2da      	uxtb	r2, r3
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_bms_ext_temp2 >> 8) & (0xFFU));
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	7a1a      	ldrb	r2, [r3, #8]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	885b      	ldrh	r3, [r3, #2]
 800061e:	0a1b      	lsrs	r3, r3, #8
 8000620:	b29b      	uxth	r3, r3
 8000622:	b2db      	uxtb	r3, r3
 8000624:	4313      	orrs	r3, r2
 8000626:	b2da      	uxtb	r2, r3
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	721a      	strb	r2, [r3, #8]

  cframe->MsgId = BAT_BMS_ExtTemp_CANID;
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	4a07      	ldr	r2, [pc, #28]	; (800064c <Pack_BAT_BMS_ExtTemp_can_codegen+0x9c>)
 8000630:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_BMS_ExtTemp_DLC;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	2204      	movs	r2, #4
 8000636:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_BMS_ExtTemp_IDE;
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	2201      	movs	r2, #1
 800063c:	735a      	strb	r2, [r3, #13]
  return BAT_BMS_ExtTemp_CANID;
 800063e:	4b03      	ldr	r3, [pc, #12]	; (800064c <Pack_BAT_BMS_ExtTemp_can_codegen+0x9c>)
}
 8000640:	4618      	mov	r0, r3
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	001ff611 	.word	0x001ff611

08000650 <Pack_BAT_AFE_vBRICK_A_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_AFE_vBRICK_A_can_codegen(BAT_AFE_vBRICK_A_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_AFE_vBRICK_A_DLC) && (i < 8); cframe->Data[i++] = 0);
 800065a:	2300      	movs	r3, #0
 800065c:	73fb      	strb	r3, [r7, #15]
 800065e:	e007      	b.n	8000670 <Pack_BAT_AFE_vBRICK_A_can_codegen+0x20>
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	73fa      	strb	r2, [r7, #15]
 8000666:	461a      	mov	r2, r3
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	4413      	add	r3, r2
 800066c:	2200      	movs	r2, #0
 800066e:	715a      	strb	r2, [r3, #5]
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	2b07      	cmp	r3, #7
 8000674:	d802      	bhi.n	800067c <Pack_BAT_AFE_vBRICK_A_can_codegen+0x2c>
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	2b07      	cmp	r3, #7
 800067a:	d9f1      	bls.n	8000660 <Pack_BAT_AFE_vBRICK_A_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_afe_vBrick01 & (0xFFU));
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	795a      	ldrb	r2, [r3, #5]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	4313      	orrs	r3, r2
 8000688:	b2da      	uxtb	r2, r3
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_afe_vBrick01 >> 8) & (0xFFU));
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	799a      	ldrb	r2, [r3, #6]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	0a1b      	lsrs	r3, r3, #8
 8000698:	b29b      	uxth	r3, r3
 800069a:	b2db      	uxtb	r3, r3
 800069c:	4313      	orrs	r3, r2
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_afe_vBrick02 & (0xFFU));
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	79da      	ldrb	r2, [r3, #7]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	885b      	ldrh	r3, [r3, #2]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_afe_vBrick02 >> 8) & (0xFFU));
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	7a1a      	ldrb	r2, [r3, #8]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	885b      	ldrh	r3, [r3, #2]
 80006be:	0a1b      	lsrs	r3, r3, #8
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	4313      	orrs	r3, r2
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	721a      	strb	r2, [r3, #8]
  cframe->Data[4] |= (_m->BAT_afe_vBrick03 & (0xFFU));
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	7a5a      	ldrb	r2, [r3, #9]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	889b      	ldrh	r3, [r3, #4]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	725a      	strb	r2, [r3, #9]
  cframe->Data[5] |= ((_m->BAT_afe_vBrick03 >> 8) & (0xFFU));
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	7a9a      	ldrb	r2, [r3, #10]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	889b      	ldrh	r3, [r3, #4]
 80006e6:	0a1b      	lsrs	r3, r3, #8
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	4313      	orrs	r3, r2
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	729a      	strb	r2, [r3, #10]
  cframe->Data[6] |= (_m->BAT_afe_vBrick04 & (0xFFU));
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	7ada      	ldrb	r2, [r3, #11]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	88db      	ldrh	r3, [r3, #6]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4313      	orrs	r3, r2
 8000700:	b2da      	uxtb	r2, r3
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	72da      	strb	r2, [r3, #11]
  cframe->Data[7] |= ((_m->BAT_afe_vBrick04 >> 8) & (0xFFU));
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	7b1a      	ldrb	r2, [r3, #12]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	88db      	ldrh	r3, [r3, #6]
 800070e:	0a1b      	lsrs	r3, r3, #8
 8000710:	b29b      	uxth	r3, r3
 8000712:	b2db      	uxtb	r3, r3
 8000714:	4313      	orrs	r3, r2
 8000716:	b2da      	uxtb	r2, r3
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	731a      	strb	r2, [r3, #12]

  cframe->MsgId = BAT_AFE_vBRICK_A_CANID;
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	4a07      	ldr	r2, [pc, #28]	; (800073c <Pack_BAT_AFE_vBRICK_A_can_codegen+0xec>)
 8000720:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_AFE_vBRICK_A_DLC;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	2208      	movs	r2, #8
 8000726:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_AFE_vBRICK_A_IDE;
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	2201      	movs	r2, #1
 800072c:	735a      	strb	r2, [r3, #13]
  return BAT_AFE_vBRICK_A_CANID;
 800072e:	4b03      	ldr	r3, [pc, #12]	; (800073c <Pack_BAT_AFE_vBRICK_A_can_codegen+0xec>)
}
 8000730:	4618      	mov	r0, r3
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	001ff710 	.word	0x001ff710

08000740 <Pack_BAT_AFE_vBRICK_B_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_AFE_vBRICK_B_can_codegen(BAT_AFE_vBRICK_B_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_AFE_vBRICK_B_DLC) && (i < 8); cframe->Data[i++] = 0);
 800074a:	2300      	movs	r3, #0
 800074c:	73fb      	strb	r3, [r7, #15]
 800074e:	e007      	b.n	8000760 <Pack_BAT_AFE_vBRICK_B_can_codegen+0x20>
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	1c5a      	adds	r2, r3, #1
 8000754:	73fa      	strb	r2, [r7, #15]
 8000756:	461a      	mov	r2, r3
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	4413      	add	r3, r2
 800075c:	2200      	movs	r2, #0
 800075e:	715a      	strb	r2, [r3, #5]
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	2b07      	cmp	r3, #7
 8000764:	d802      	bhi.n	800076c <Pack_BAT_AFE_vBRICK_B_can_codegen+0x2c>
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	2b07      	cmp	r3, #7
 800076a:	d9f1      	bls.n	8000750 <Pack_BAT_AFE_vBRICK_B_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_afe_vBrick05 & (0xFFU));
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	795a      	ldrb	r2, [r3, #5]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	4313      	orrs	r3, r2
 8000778:	b2da      	uxtb	r2, r3
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_afe_vBrick05 >> 8) & (0xFFU));
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	799a      	ldrb	r2, [r3, #6]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	0a1b      	lsrs	r3, r3, #8
 8000788:	b29b      	uxth	r3, r3
 800078a:	b2db      	uxtb	r3, r3
 800078c:	4313      	orrs	r3, r2
 800078e:	b2da      	uxtb	r2, r3
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_afe_vBrick06 & (0xFFU));
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	79da      	ldrb	r2, [r3, #7]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	885b      	ldrh	r3, [r3, #2]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	4313      	orrs	r3, r2
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_afe_vBrick06 >> 8) & (0xFFU));
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	7a1a      	ldrb	r2, [r3, #8]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	885b      	ldrh	r3, [r3, #2]
 80007ae:	0a1b      	lsrs	r3, r3, #8
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4313      	orrs	r3, r2
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	721a      	strb	r2, [r3, #8]
  cframe->Data[4] |= (_m->BAT_afe_vBrick07 & (0xFFU));
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	7a5a      	ldrb	r2, [r3, #9]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	889b      	ldrh	r3, [r3, #4]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4313      	orrs	r3, r2
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	725a      	strb	r2, [r3, #9]
  cframe->Data[5] |= ((_m->BAT_afe_vBrick07 >> 8) & (0xFFU));
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	7a9a      	ldrb	r2, [r3, #10]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	889b      	ldrh	r3, [r3, #4]
 80007d6:	0a1b      	lsrs	r3, r3, #8
 80007d8:	b29b      	uxth	r3, r3
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4313      	orrs	r3, r2
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	729a      	strb	r2, [r3, #10]
  cframe->Data[6] |= (_m->BAT_afe_vBrick08 & (0xFFU));
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	7ada      	ldrb	r2, [r3, #11]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	88db      	ldrh	r3, [r3, #6]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4313      	orrs	r3, r2
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	72da      	strb	r2, [r3, #11]
  cframe->Data[7] |= ((_m->BAT_afe_vBrick08 >> 8) & (0xFFU));
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	7b1a      	ldrb	r2, [r3, #12]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	88db      	ldrh	r3, [r3, #6]
 80007fe:	0a1b      	lsrs	r3, r3, #8
 8000800:	b29b      	uxth	r3, r3
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4313      	orrs	r3, r2
 8000806:	b2da      	uxtb	r2, r3
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	731a      	strb	r2, [r3, #12]

  cframe->MsgId = BAT_AFE_vBRICK_B_CANID;
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	4a07      	ldr	r2, [pc, #28]	; (800082c <Pack_BAT_AFE_vBRICK_B_can_codegen+0xec>)
 8000810:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_AFE_vBRICK_B_DLC;
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	2208      	movs	r2, #8
 8000816:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_AFE_vBRICK_B_IDE;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	735a      	strb	r2, [r3, #13]
  return BAT_AFE_vBRICK_B_CANID;
 800081e:	4b03      	ldr	r3, [pc, #12]	; (800082c <Pack_BAT_AFE_vBRICK_B_can_codegen+0xec>)
}
 8000820:	4618      	mov	r0, r3
 8000822:	3714      	adds	r7, #20
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	001ff711 	.word	0x001ff711

08000830 <Pack_BAT_AFE_vBRICK_C_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_AFE_vBRICK_C_can_codegen(BAT_AFE_vBRICK_C_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_AFE_vBRICK_C_DLC) && (i < 8); cframe->Data[i++] = 0);
 800083a:	2300      	movs	r3, #0
 800083c:	73fb      	strb	r3, [r7, #15]
 800083e:	e007      	b.n	8000850 <Pack_BAT_AFE_vBRICK_C_can_codegen+0x20>
 8000840:	7bfb      	ldrb	r3, [r7, #15]
 8000842:	1c5a      	adds	r2, r3, #1
 8000844:	73fa      	strb	r2, [r7, #15]
 8000846:	461a      	mov	r2, r3
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	4413      	add	r3, r2
 800084c:	2200      	movs	r2, #0
 800084e:	715a      	strb	r2, [r3, #5]
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	2b07      	cmp	r3, #7
 8000854:	d802      	bhi.n	800085c <Pack_BAT_AFE_vBRICK_C_can_codegen+0x2c>
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	2b07      	cmp	r3, #7
 800085a:	d9f1      	bls.n	8000840 <Pack_BAT_AFE_vBRICK_C_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_afe_vBrick09 & (0xFFU));
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	795a      	ldrb	r2, [r3, #5]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	881b      	ldrh	r3, [r3, #0]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4313      	orrs	r3, r2
 8000868:	b2da      	uxtb	r2, r3
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_afe_vBrick09 >> 8) & (0xFFU));
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	799a      	ldrb	r2, [r3, #6]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	0a1b      	lsrs	r3, r3, #8
 8000878:	b29b      	uxth	r3, r3
 800087a:	b2db      	uxtb	r3, r3
 800087c:	4313      	orrs	r3, r2
 800087e:	b2da      	uxtb	r2, r3
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_afe_vBrick10 & (0xFFU));
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	79da      	ldrb	r2, [r3, #7]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	885b      	ldrh	r3, [r3, #2]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4313      	orrs	r3, r2
 8000890:	b2da      	uxtb	r2, r3
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_afe_vBrick10 >> 8) & (0xFFU));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	7a1a      	ldrb	r2, [r3, #8]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	885b      	ldrh	r3, [r3, #2]
 800089e:	0a1b      	lsrs	r3, r3, #8
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	4313      	orrs	r3, r2
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	721a      	strb	r2, [r3, #8]
  cframe->Data[4] |= (_m->BAT_afe_vBrick11 & (0xFFU));
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	7a5a      	ldrb	r2, [r3, #9]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	889b      	ldrh	r3, [r3, #4]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	4313      	orrs	r3, r2
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	725a      	strb	r2, [r3, #9]
  cframe->Data[5] |= ((_m->BAT_afe_vBrick11 >> 8) & (0xFFU));
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	7a9a      	ldrb	r2, [r3, #10]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	889b      	ldrh	r3, [r3, #4]
 80008c6:	0a1b      	lsrs	r3, r3, #8
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	729a      	strb	r2, [r3, #10]
  cframe->Data[6] |= (_m->BAT_afe_vBrick12 & (0xFFU));
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	7ada      	ldrb	r2, [r3, #11]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	88db      	ldrh	r3, [r3, #6]
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4313      	orrs	r3, r2
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	72da      	strb	r2, [r3, #11]
  cframe->Data[7] |= ((_m->BAT_afe_vBrick12 >> 8) & (0xFFU));
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	7b1a      	ldrb	r2, [r3, #12]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	88db      	ldrh	r3, [r3, #6]
 80008ee:	0a1b      	lsrs	r3, r3, #8
 80008f0:	b29b      	uxth	r3, r3
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4313      	orrs	r3, r2
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	731a      	strb	r2, [r3, #12]

  cframe->MsgId = BAT_AFE_vBRICK_C_CANID;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	4a07      	ldr	r2, [pc, #28]	; (800091c <Pack_BAT_AFE_vBRICK_C_can_codegen+0xec>)
 8000900:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_AFE_vBRICK_C_DLC;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	2208      	movs	r2, #8
 8000906:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_AFE_vBRICK_C_IDE;
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	2201      	movs	r2, #1
 800090c:	735a      	strb	r2, [r3, #13]
  return BAT_AFE_vBRICK_C_CANID;
 800090e:	4b03      	ldr	r3, [pc, #12]	; (800091c <Pack_BAT_AFE_vBRICK_C_can_codegen+0xec>)
}
 8000910:	4618      	mov	r0, r3
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	001ff712 	.word	0x001ff712

08000920 <Pack_BAT_AFE_vBRICK_D_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_AFE_vBRICK_D_can_codegen(BAT_AFE_vBRICK_D_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_AFE_vBRICK_D_DLC) && (i < 8); cframe->Data[i++] = 0);
 800092a:	2300      	movs	r3, #0
 800092c:	73fb      	strb	r3, [r7, #15]
 800092e:	e007      	b.n	8000940 <Pack_BAT_AFE_vBRICK_D_can_codegen+0x20>
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	73fa      	strb	r2, [r7, #15]
 8000936:	461a      	mov	r2, r3
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	4413      	add	r3, r2
 800093c:	2200      	movs	r2, #0
 800093e:	715a      	strb	r2, [r3, #5]
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	2b03      	cmp	r3, #3
 8000944:	d802      	bhi.n	800094c <Pack_BAT_AFE_vBRICK_D_can_codegen+0x2c>
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	2b07      	cmp	r3, #7
 800094a:	d9f1      	bls.n	8000930 <Pack_BAT_AFE_vBRICK_D_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_afe_vBrick13 & (0xFFU));
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	795a      	ldrb	r2, [r3, #5]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	4313      	orrs	r3, r2
 8000958:	b2da      	uxtb	r2, r3
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_afe_vBrick13 >> 8) & (0xFFU));
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	799a      	ldrb	r2, [r3, #6]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	0a1b      	lsrs	r3, r3, #8
 8000968:	b29b      	uxth	r3, r3
 800096a:	b2db      	uxtb	r3, r3
 800096c:	4313      	orrs	r3, r2
 800096e:	b2da      	uxtb	r2, r3
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_afe_vBrick14 & (0xFFU));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	79da      	ldrb	r2, [r3, #7]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	885b      	ldrh	r3, [r3, #2]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	4313      	orrs	r3, r2
 8000980:	b2da      	uxtb	r2, r3
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_afe_vBrick14 >> 8) & (0xFFU));
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	7a1a      	ldrb	r2, [r3, #8]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	885b      	ldrh	r3, [r3, #2]
 800098e:	0a1b      	lsrs	r3, r3, #8
 8000990:	b29b      	uxth	r3, r3
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4313      	orrs	r3, r2
 8000996:	b2da      	uxtb	r2, r3
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	721a      	strb	r2, [r3, #8]

  cframe->MsgId = BAT_AFE_vBRICK_D_CANID;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	4a07      	ldr	r2, [pc, #28]	; (80009bc <Pack_BAT_AFE_vBRICK_D_can_codegen+0x9c>)
 80009a0:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_AFE_vBRICK_D_DLC;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	2204      	movs	r2, #4
 80009a6:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_AFE_vBRICK_D_IDE;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	2201      	movs	r2, #1
 80009ac:	735a      	strb	r2, [r3, #13]
  return BAT_AFE_vBRICK_D_CANID;
 80009ae:	4b03      	ldr	r3, [pc, #12]	; (80009bc <Pack_BAT_AFE_vBRICK_D_can_codegen+0x9c>)
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	001ff713 	.word	0x001ff713

080009c0 <Pack_BAT_GAUGE_OvrVIEW_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_GAUGE_OvrVIEW_can_codegen(BAT_GAUGE_OvrVIEW_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_GAUGE_OvrVIEW_DLC) && (i < 8); cframe->Data[i++] = 0);
 80009ca:	2300      	movs	r3, #0
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	e007      	b.n	80009e0 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x20>
 80009d0:	7bfb      	ldrb	r3, [r7, #15]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	73fa      	strb	r2, [r7, #15]
 80009d6:	461a      	mov	r2, r3
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	2200      	movs	r2, #0
 80009de:	715a      	strb	r2, [r3, #5]
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d802      	bhi.n	80009ec <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x2c>
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	2b07      	cmp	r3, #7
 80009ea:	d9f1      	bls.n	80009d0 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_gauge_SoC & (0xFFU));
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	795a      	ldrb	r2, [r3, #5]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= (_m->BAT_gauge_SoH & (0xFFU));
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	799a      	ldrb	r2, [r3, #6]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	785b      	ldrb	r3, [r3, #1]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_gauge_cycleCount & (0xFFU));
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	79da      	ldrb	r2, [r3, #7]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	885b      	ldrh	r3, [r3, #2]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	4313      	orrs	r3, r2
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_gauge_cycleCount >> 8) & (0xFFU));
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	7a1a      	ldrb	r2, [r3, #8]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	885b      	ldrh	r3, [r3, #2]
 8000a26:	0a1b      	lsrs	r3, r3, #8
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	721a      	strb	r2, [r3, #8]

  cframe->MsgId = BAT_GAUGE_OvrVIEW_CANID;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x94>)
 8000a38:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_GAUGE_OvrVIEW_DLC;
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_GAUGE_OvrVIEW_IDE;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	2201      	movs	r2, #1
 8000a44:	735a      	strb	r2, [r3, #13]
  return BAT_GAUGE_OvrVIEW_CANID;
 8000a46:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x94>)
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	001ff810 	.word	0x001ff810

08000a58 <Pack_BAT_GAUGE_ViT_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_GAUGE_ViT_can_codegen(BAT_GAUGE_ViT_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_GAUGE_ViT_DLC) && (i < 8); cframe->Data[i++] = 0);
 8000a62:	2300      	movs	r3, #0
 8000a64:	73fb      	strb	r3, [r7, #15]
 8000a66:	e007      	b.n	8000a78 <Pack_BAT_GAUGE_ViT_can_codegen+0x20>
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	73fa      	strb	r2, [r7, #15]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	4413      	add	r3, r2
 8000a74:	2200      	movs	r2, #0
 8000a76:	715a      	strb	r2, [r3, #5]
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	2b05      	cmp	r3, #5
 8000a7c:	d802      	bhi.n	8000a84 <Pack_BAT_GAUGE_ViT_can_codegen+0x2c>
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	2b07      	cmp	r3, #7
 8000a82:	d9f1      	bls.n	8000a68 <Pack_BAT_GAUGE_ViT_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_gauge_vPack & (0xFFU));
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	795a      	ldrb	r2, [r3, #5]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_gauge_vPack >> 8) & (0xFFU));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	799a      	ldrb	r2, [r3, #6]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	0a1b      	lsrs	r3, r3, #8
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_gauge_iPack & (0xFFU));
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	79da      	ldrb	r2, [r3, #7]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_gauge_iPack >> 8) & (0xFFU));
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	7a1a      	ldrb	r2, [r3, #8]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000aca:	121b      	asrs	r3, r3, #8
 8000acc:	b21b      	sxth	r3, r3
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	721a      	strb	r2, [r3, #8]
  cframe->Data[4] |= (_m->BAT_gauge_tPack & (0xFFU));
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	7a5a      	ldrb	r2, [r3, #9]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	889b      	ldrh	r3, [r3, #4]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	725a      	strb	r2, [r3, #9]
  cframe->Data[5] |= ((_m->BAT_gauge_tPack >> 8) & (0xFFU));
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	7a9a      	ldrb	r2, [r3, #10]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	889b      	ldrh	r3, [r3, #4]
 8000af2:	0a1b      	lsrs	r3, r3, #8
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	4313      	orrs	r3, r2
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	729a      	strb	r2, [r3, #10]

  cframe->MsgId = BAT_GAUGE_ViT_CANID;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <Pack_BAT_GAUGE_ViT_can_codegen+0xc8>)
 8000b04:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_GAUGE_ViT_DLC;
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	2206      	movs	r2, #6
 8000b0a:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_GAUGE_ViT_IDE;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	2201      	movs	r2, #1
 8000b10:	735a      	strb	r2, [r3, #13]
  return BAT_GAUGE_ViT_CANID;
 8000b12:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <Pack_BAT_GAUGE_ViT_can_codegen+0xc8>)
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	001ff820 	.word	0x001ff820

08000b24 <bq76952_init>:
extern int16_t bq76952_TS3config(void);
//------------------------------------------------------------------------------
// Static Functions definition

int16_t bq76952_init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
  int16_t ret_val = SYS_ERR;
 8000b2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b2e:	80fb      	strh	r3, [r7, #6]
  do
  {
    TsBmsPower_cfg_t.power_cfg_reg = PowerConfig;
 8000b30:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <bq76952_init+0x7c>)
 8000b32:	f249 2234 	movw	r2, #37428	; 0x9234
 8000b36:	805a      	strh	r2, [r3, #2]
    TsBmsPower_cfg_t.reg_val = 0x2D80;
 8000b38:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <bq76952_init+0x7c>)
 8000b3a:	f44f 5236 	mov.w	r2, #11648	; 0x2d80
 8000b3e:	80da      	strh	r2, [r3, #6]
    TsBmsPower_cfg_t.len = 4;
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <bq76952_init+0x7c>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	701a      	strb	r2, [r3, #0]
    AFE_RAMwrite.vCellModecmd = 0x03C3;           //0x03C3 for 6S | 0x0303 for 4S
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <bq76952_init+0x80>)
 8000b48:	f240 32c3 	movw	r2, #963	; 0x3c3
 8000b4c:	801a      	strh	r2, [r3, #0]
    AFE_RAMwrite.FETs_CONTROL = 0x0;
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <bq76952_init+0x80>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	805a      	strh	r2, [r3, #2]
    AFE_RAMwrite.enabledProtectionsA = 0xBC;
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <bq76952_init+0x80>)
 8000b56:	22bc      	movs	r2, #188	; 0xbc
 8000b58:	809a      	strh	r2, [r3, #4]
    AFE_RAMwrite.enabledProtectionsB = 0xF7;      //(Also sets OTC, OTD and OTF as 1)
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <bq76952_init+0x80>)
 8000b5c:	22f7      	movs	r2, #247	; 0xf7
 8000b5e:	80da      	strh	r2, [r3, #6]
    AFE_RAMwrite.prechargeStartVoltage = 0x0A8C;  //2700mV
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <bq76952_init+0x80>)
 8000b62:	f640 228c 	movw	r2, #2700	; 0xa8c
 8000b66:	811a      	strh	r2, [r3, #8]
    AFE_RAMwrite.prechargeStopVoltage = 0x0AF0;   //2800mV
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <bq76952_init+0x80>)
 8000b6a:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000b6e:	815a      	strh	r2, [r3, #10]
    AFE_RAMwrite.TS3config = 0x07;                //Default for TS3: 0X07 | Default for TS1: 0x07
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <bq76952_init+0x80>)
 8000b72:	2207      	movs	r2, #7
 8000b74:	819a      	strh	r2, [r3, #12]

    bq76952_vCellMode();
 8000b76:	f000 f99b 	bl	8000eb0 <bq76952_vCellMode>
    bq76952_FETs_Control();
 8000b7a:	f000 f969 	bl	8000e50 <bq76952_FETs_Control>
    bq76952_TS3config();
 8000b7e:	f000 f9c9 	bl	8000f14 <bq76952_TS3config>

        //bq76952_get_device_number(&device_number);
        //RESET #Resets the Bq769x2 Registers
        bq76952_AFE_reset();
 8000b82:	f000 f927 	bl	8000dd4 <bq76952_AFE_reset>

        // Enter config update mode
        bq76952_set_config_update();
 8000b86:	f000 f94e 	bl	8000e26 <bq76952_set_config_update>

        // TODO: Check if CFGUPDATE bit is SET

        //
        // Leave Reg1 and Reg2 mode in present state when entering deep-sleep state
        bq76952_set_powercfg(&TsBmsPower_cfg_t);
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <bq76952_init+0x7c>)
 8000b8c:	f000 f939 	bl	8000e02 <bq76952_set_powercfg>
    //OCCThreshold --> 0x05				#Rsense is 1mohm. Unit is 2mV, so 10mV means a threshold of 10A
    //OCD1Threshold --> 0x0A			#Rsense is 1mohm. Unit is 2mV, so 20mV means a threshold of 20A
    //SCDThreshold --> 0x02				#40mV across 1mohm, i.e, 40A. Refer to TRM page 168
    //SCDDelay --> 0x03					#30us. Enabled with a delay of (value - 1) * 15 us; min value of 1
    //SCDLLatchLimit --> 0x01			#Only with load removal. Refer to TRM page 170
    ret_val = SYS_OK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	80fb      	strh	r3, [r7, #6]
  } while(false);

  return ret_val;
 8000b94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200000d0 	.word	0x200000d0
 8000ba4:	200000d8 	.word	0x200000d8

08000ba8 <bq76952_FETs_SleepDisable>:

//------------------------------------------------------------------------------
// FET CONTROL COMMANDS
static int16_t bq76952_FETs_SleepDisable(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  // Puts the FETs in performance mode
  int16_t ret_val = SYS_ERR;
 8000bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bb2:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, SLEEP_DISABLE))
 8000bb4:	219a      	movs	r1, #154	; 0x9a
 8000bb6:	203e      	movs	r0, #62	; 0x3e
 8000bb8:	f000 fad8 	bl	800116c <bq76952_write_sub_cmd>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d102      	bne.n	8000bc8 <bq76952_FETs_SleepDisable+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	80fb      	strh	r3, [r7, #6]
 8000bc6:	e000      	b.n	8000bca <bq76952_FETs_SleepDisable+0x22>
      break;
 8000bc8:	bf00      	nop
  } while(false);
  return ret_val;
 8000bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <bq76952_FETs_enable>:
static int16_t bq76952_FETs_enable(void)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
  // Enables all the FETs to be controlled
  int16_t ret_val = SYS_ERR;
 8000bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000be0:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, FET_ENABLE))
 8000be2:	2122      	movs	r1, #34	; 0x22
 8000be4:	203e      	movs	r0, #62	; 0x3e
 8000be6:	f000 fac1 	bl	800116c <bq76952_write_sub_cmd>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <bq76952_FETs_enable+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	80fb      	strh	r3, [r7, #6]
 8000bf4:	e000      	b.n	8000bf8 <bq76952_FETs_enable+0x22>
      break;
 8000bf6:	bf00      	nop
  } while(false);
  return ret_val;
 8000bf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <bq76952_allFETs_on>:
static int16_t bq76952_allFETs_on(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
  // Switches on all the FETs
  int16_t ret_val = SYS_ERR;
 8000c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0e:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, ALL_FETS_ON))
 8000c10:	2196      	movs	r1, #150	; 0x96
 8000c12:	203e      	movs	r0, #62	; 0x3e
 8000c14:	f000 faaa 	bl	800116c <bq76952_write_sub_cmd>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d102      	bne.n	8000c24 <bq76952_allFETs_on+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	80fb      	strh	r3, [r7, #6]
 8000c22:	e000      	b.n	8000c26 <bq76952_allFETs_on+0x22>
      break;
 8000c24:	bf00      	nop
  } while(false);
  return ret_val;
 8000c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <bq76952_allFETs_off>:
static int16_t bq76952_allFETs_off(void)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
  // Switches off all the FETs
  int16_t ret_val = SYS_ERR;
 8000c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c3c:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, ALL_FETS_OFF))
 8000c3e:	2195      	movs	r1, #149	; 0x95
 8000c40:	203e      	movs	r0, #62	; 0x3e
 8000c42:	f000 fa93 	bl	800116c <bq76952_write_sub_cmd>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <bq76952_allFETs_off+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	80fb      	strh	r3, [r7, #6]
 8000c50:	e000      	b.n	8000c54 <bq76952_allFETs_off+0x22>
      break;
 8000c52:	bf00      	nop
  } while(false);
  return ret_val;
 8000c54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <bq76952_dischargeOFF>:
static int16_t bq76952_dischargeOFF(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
  //Disable DSG and PDSG FET drivers
  int16_t ret_val = SYS_ERR;
 8000c66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c6a:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, DSG_PDSG_OFF))
 8000c6c:	2193      	movs	r1, #147	; 0x93
 8000c6e:	203e      	movs	r0, #62	; 0x3e
 8000c70:	f000 fa7c 	bl	800116c <bq76952_write_sub_cmd>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d102      	bne.n	8000c80 <bq76952_dischargeOFF+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	80fb      	strh	r3, [r7, #6]
 8000c7e:	e000      	b.n	8000c82 <bq76952_dischargeOFF+0x22>
      break;
 8000c80:	bf00      	nop
  } while(false);
  return ret_val;
 8000c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <bq76952_chargeOFF>:
static int16_t bq76952_chargeOFF(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
  //Disable CHG and PCHG FET drivers
  int16_t ret_val = SYS_ERR;
 8000c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c98:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, CHG_PCHG_OFF))
 8000c9a:	2194      	movs	r1, #148	; 0x94
 8000c9c:	203e      	movs	r0, #62	; 0x3e
 8000c9e:	f000 fa65 	bl	800116c <bq76952_write_sub_cmd>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <bq76952_chargeOFF+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	80fb      	strh	r3, [r7, #6]
 8000cac:	e000      	b.n	8000cb0 <bq76952_chargeOFF+0x22>
      break;
 8000cae:	bf00      	nop
  } while(false);
  return ret_val;
 8000cb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <bq76952_FETs_ON>:


extern int16_t bq76952_FETs_ON(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
  //To switch on the FETs whenever required
  int8_t ret_val = SYS_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  do
  {
    if(SYS_OK!= bq76952_FETs_enable())
 8000cc6:	f7ff ff86 	bl	8000bd6 <bq76952_FETs_enable>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d112      	bne.n	8000cf6 <bq76952_FETs_ON+0x3a>
    {
      break;
    }
    HAL_Delay(50);
 8000cd0:	2032      	movs	r0, #50	; 0x32
 8000cd2:	f002 f8f5 	bl	8002ec0 <HAL_Delay>
    if(SYS_OK!= bq76952_FETs_SleepDisable())
 8000cd6:	f7ff ff67 	bl	8000ba8 <bq76952_FETs_SleepDisable>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d10c      	bne.n	8000cfa <bq76952_FETs_ON+0x3e>
    {
      break;
    }
    HAL_Delay(50);
 8000ce0:	2032      	movs	r0, #50	; 0x32
 8000ce2:	f002 f8ed 	bl	8002ec0 <HAL_Delay>
    if(SYS_OK!= bq76952_allFETs_on())
 8000ce6:	f7ff ff8d 	bl	8000c04 <bq76952_allFETs_on>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d106      	bne.n	8000cfe <bq76952_FETs_ON+0x42>
    {
      break;
    }
    ret_val = SYS_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	e004      	b.n	8000d00 <bq76952_FETs_ON+0x44>
      break;
 8000cf6:	bf00      	nop
 8000cf8:	e002      	b.n	8000d00 <bq76952_FETs_ON+0x44>
      break;
 8000cfa:	bf00      	nop
 8000cfc:	e000      	b.n	8000d00 <bq76952_FETs_ON+0x44>
      break;
 8000cfe:	bf00      	nop
  }while(false);
  return ret_val;
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	b21b      	sxth	r3, r3
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <bq76952_FETs_OFF>:
extern int16_t bq76952_FETs_OFF(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
  //To switch off the FETs whenever required
  int8_t ret_val = SYS_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	71fb      	strb	r3, [r7, #7]
  do
  {
    if(SYS_OK!= bq76952_FETs_enable())
 8000d18:	f7ff ff5d 	bl	8000bd6 <bq76952_FETs_enable>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10a      	bne.n	8000d38 <bq76952_FETs_OFF+0x2a>
    {
      break;
    }
    HAL_Delay(50);
 8000d22:	2032      	movs	r0, #50	; 0x32
 8000d24:	f002 f8cc 	bl	8002ec0 <HAL_Delay>
    if(SYS_OK!= bq76952_allFETs_off())
 8000d28:	f7ff ff83 	bl	8000c32 <bq76952_allFETs_off>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d104      	bne.n	8000d3c <bq76952_FETs_OFF+0x2e>
    {
      break;
    }
    ret_val = SYS_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	71fb      	strb	r3, [r7, #7]
 8000d36:	e002      	b.n	8000d3e <bq76952_FETs_OFF+0x30>
      break;
 8000d38:	bf00      	nop
 8000d3a:	e000      	b.n	8000d3e <bq76952_FETs_OFF+0x30>
      break;
 8000d3c:	bf00      	nop
  }while(false);
  return ret_val;
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	b21b      	sxth	r3, r3
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <bq76952_Charge>:

extern int16_t bq76952_Charge(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  //Takes the BMS to Charging mode
  uint8_t ret_val = SYS_ERR;
 8000d52:	23ff      	movs	r3, #255	; 0xff
 8000d54:	71fb      	strb	r3, [r7, #7]
  do
  {
    if(SYS_OK!= bq76952_FETs_enable())
 8000d56:	f7ff ff3e 	bl	8000bd6 <bq76952_FETs_enable>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d10c      	bne.n	8000d7a <bq76952_Charge+0x2e>
    {
      break;
    }
    if(SYS_OK!= bq76952_allFETs_on())
 8000d60:	f7ff ff50 	bl	8000c04 <bq76952_allFETs_on>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d109      	bne.n	8000d7e <bq76952_Charge+0x32>
    {
      break;
    }
    if(SYS_OK!= bq76952_dischargeOFF())
 8000d6a:	f7ff ff79 	bl	8000c60 <bq76952_dischargeOFF>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d106      	bne.n	8000d82 <bq76952_Charge+0x36>
    {
      break;
    }
    ret_val = SYS_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	e004      	b.n	8000d84 <bq76952_Charge+0x38>
      break;
 8000d7a:	bf00      	nop
 8000d7c:	e002      	b.n	8000d84 <bq76952_Charge+0x38>
      break;
 8000d7e:	bf00      	nop
 8000d80:	e000      	b.n	8000d84 <bq76952_Charge+0x38>
      break;
 8000d82:	bf00      	nop
  }while(false);
  return ret_val;
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	b21b      	sxth	r3, r3
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <bq76952_Discharge>:
extern int16_t bq76952_Discharge(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
  //Takes the BMS to Discharging mode
  uint8_t ret_val = SYS_ERR;
 8000d96:	23ff      	movs	r3, #255	; 0xff
 8000d98:	71fb      	strb	r3, [r7, #7]
  do
  {
    if(SYS_OK!= bq76952_FETs_enable())
 8000d9a:	f7ff ff1c 	bl	8000bd6 <bq76952_FETs_enable>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d10c      	bne.n	8000dbe <bq76952_Discharge+0x2e>
    {
      break;
    }
    if(SYS_OK!= bq76952_allFETs_on())
 8000da4:	f7ff ff2e 	bl	8000c04 <bq76952_allFETs_on>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d109      	bne.n	8000dc2 <bq76952_Discharge+0x32>
    {
      break;
    }
    if(SYS_OK!= bq76952_chargeOFF())
 8000dae:	f7ff ff6e 	bl	8000c8e <bq76952_chargeOFF>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d106      	bne.n	8000dc6 <bq76952_Discharge+0x36>
    {
      break;
    }
    ret_val = SYS_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	71fb      	strb	r3, [r7, #7]
 8000dbc:	e004      	b.n	8000dc8 <bq76952_Discharge+0x38>
      break;
 8000dbe:	bf00      	nop
 8000dc0:	e002      	b.n	8000dc8 <bq76952_Discharge+0x38>
      break;
 8000dc2:	bf00      	nop
 8000dc4:	e000      	b.n	8000dc8 <bq76952_Discharge+0x38>
      break;
 8000dc6:	bf00      	nop
  }while(false);
  return ret_val;
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	b21b      	sxth	r3, r3
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <bq76952_AFE_reset>:
  HAL_Delay(100);
}
//------------------------------------------------------------------------------------------------------------
//AFE Functions
extern int16_t bq76952_AFE_reset(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
  // Resets all the registers of the AFE
  int16_t ret_val = SYS_ERR;
 8000dda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dde:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, RESET))
 8000de0:	2112      	movs	r1, #18
 8000de2:	203e      	movs	r0, #62	; 0x3e
 8000de4:	f000 f9c2 	bl	800116c <bq76952_write_sub_cmd>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d102      	bne.n	8000df4 <bq76952_AFE_reset+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	80fb      	strh	r3, [r7, #6]
 8000df2:	e000      	b.n	8000df6 <bq76952_AFE_reset+0x22>
      break;
 8000df4:	bf00      	nop
  } while(false);
  return ret_val;
 8000df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <bq76952_set_powercfg>:

static int16_t bq76952_set_powercfg(TsBmsPower_cfg *pTsBmsPower_cfg_t)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b085      	sub	sp, #20
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
    //PowerConfig --> 0x2D80   #DPSLP_LDO bit -> 1

    int16_t ret_val = SYS_ERR;
 8000e0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e0e:	81fb      	strh	r3, [r7, #14]
    do
    {
        //if(SYS_OK != bq76952_write_to_register(SUB_CMD_REG_LSB_ADDR, pTsBmsPower_cfg_t->buffer, pTsBmsPower_cfg_t->len))
        {
            break;
 8000e10:	bf00      	nop
        }
    } while (false);
    ret_val = SYS_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	81fb      	strh	r3, [r7, #14]
    return ret_val;
 8000e16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <bq76952_set_config_update>:
  ret_val = SYS_OK;
  return ret_val;
}

static int16_t bq76952_set_config_update(void)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
    int16_t ret_val = SYS_ERR;
 8000e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e30:	80fb      	strh	r3, [r7, #6]
    do
    {
        if (SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, SET_CFGUPDATE))
 8000e32:	2190      	movs	r1, #144	; 0x90
 8000e34:	203e      	movs	r0, #62	; 0x3e
 8000e36:	f000 f999 	bl	800116c <bq76952_write_sub_cmd>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
        {
            break;
        }
    } while (false);
    ret_val = SYS_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	80fb      	strh	r3, [r7, #6]
    return ret_val;
 8000e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <bq76952_FETs_Control>:
  return ret_val;
}

/*------------------RAM Register Commands-----------------------------*/
extern int16_t bq76952_FETs_Control(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  //To control the FETs with MCU only
  uint16_t data=0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	80bb      	strh	r3, [r7, #4]
  int16_t ret_val = SYS_ERR;
 8000e5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e5e:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_RAM_register(FET_CONTROL, AFE_RAMwrite.FETs_CONTROL, 1))
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <bq76952_FETs_Control+0x5c>)
 8000e62:	885b      	ldrh	r3, [r3, #2]
 8000e64:	2201      	movs	r2, #1
 8000e66:	4619      	mov	r1, r3
 8000e68:	2097      	movs	r0, #151	; 0x97
 8000e6a:	f000 f885 	bl	8000f78 <bq76952_write_RAM_register>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d10f      	bne.n	8000e94 <bq76952_FETs_Control+0x44>
    {
      break;
    }
    if(SYS_OK != bq76952_read_RAM_register(FET_CONTROL, &data))
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	4619      	mov	r1, r3
 8000e78:	2097      	movs	r0, #151	; 0x97
 8000e7a:	f000 f8ef 	bl	800105c <bq76952_read_RAM_register>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d109      	bne.n	8000e98 <bq76952_FETs_Control+0x48>
    {
      break;
    }
    if(data!= AFE_RAMwrite.FETs_CONTROL)
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <bq76952_FETs_Control+0x5c>)
 8000e86:	885a      	ldrh	r2, [r3, #2]
 8000e88:	88bb      	ldrh	r3, [r7, #4]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d106      	bne.n	8000e9c <bq76952_FETs_Control+0x4c>
    {
      break;
    }
    ret_val = SYS_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	80fb      	strh	r3, [r7, #6]
 8000e92:	e004      	b.n	8000e9e <bq76952_FETs_Control+0x4e>
      break;
 8000e94:	bf00      	nop
 8000e96:	e002      	b.n	8000e9e <bq76952_FETs_Control+0x4e>
      break;
 8000e98:	bf00      	nop
 8000e9a:	e000      	b.n	8000e9e <bq76952_FETs_Control+0x4e>
      break;
 8000e9c:	bf00      	nop
  } while(false);

  return ret_val;
 8000e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200000d8 	.word	0x200000d8

08000eb0 <bq76952_vCellMode>:
extern int16_t bq76952_vCellMode (void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
  int16_t ret_val = SYS_ERR;
 8000eb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eba:	80fb      	strh	r3, [r7, #6]
  uint16_t data=0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	80bb      	strh	r3, [r7, #4]
  do
  {
    if(SYS_OK!= bq76952_write_RAM_register(VCellMode, AFE_RAMwrite.vCellModecmd, 2))
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <bq76952_vCellMode+0x60>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f249 3004 	movw	r0, #37636	; 0x9304
 8000ecc:	f000 f854 	bl	8000f78 <bq76952_write_RAM_register>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d110      	bne.n	8000ef8 <bq76952_vCellMode+0x48>
    {
      break;
    }
    if(SYS_OK!= bq76952_read_RAM_register(VCellMode, &data))
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f249 3004 	movw	r0, #37636	; 0x9304
 8000ede:	f000 f8bd 	bl	800105c <bq76952_read_RAM_register>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d109      	bne.n	8000efc <bq76952_vCellMode+0x4c>
    {
      break;
    }
    if(data!= AFE_RAMwrite.vCellModecmd)
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <bq76952_vCellMode+0x60>)
 8000eea:	881a      	ldrh	r2, [r3, #0]
 8000eec:	88bb      	ldrh	r3, [r7, #4]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d106      	bne.n	8000f00 <bq76952_vCellMode+0x50>
    {
      break;
    }
      ret_val = SYS_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	80fb      	strh	r3, [r7, #6]
 8000ef6:	e004      	b.n	8000f02 <bq76952_vCellMode+0x52>
      break;
 8000ef8:	bf00      	nop
 8000efa:	e002      	b.n	8000f02 <bq76952_vCellMode+0x52>
      break;
 8000efc:	bf00      	nop
 8000efe:	e000      	b.n	8000f02 <bq76952_vCellMode+0x52>
      break;
 8000f00:	bf00      	nop
  }while(false);
  return ret_val;
 8000f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200000d8 	.word	0x200000d8

08000f14 <bq76952_TS3config>:
    ret_val = SYS_OK;
  }while(false);
  return ret_val;
}
extern int16_t bq76952_TS3config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
  int16_t ret_val = SYS_ERR;
 8000f1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f1e:	80fb      	strh	r3, [r7, #6]
  uint16_t data=0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	80bb      	strh	r3, [r7, #4]
  do
  {
    if(SYS_OK!= bq76952_write_RAM_register(PrechargeStopVoltage, AFE_RAMwrite.TS3config, 1))
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <bq76952_TS3config+0x60>)
 8000f26:	899b      	ldrh	r3, [r3, #12]
 8000f28:	2201      	movs	r2, #1
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	f249 300c 	movw	r0, #37644	; 0x930c
 8000f30:	f000 f822 	bl	8000f78 <bq76952_write_RAM_register>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d110      	bne.n	8000f5c <bq76952_TS3config+0x48>
    {
      break;
    }
    if(SYS_OK!= bq76952_read_RAM_register(PrechargeStopVoltage, &data))
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f249 300c 	movw	r0, #37644	; 0x930c
 8000f42:	f000 f88b 	bl	800105c <bq76952_read_RAM_register>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d109      	bne.n	8000f60 <bq76952_TS3config+0x4c>
    {
      break;
    }
    if(data!= AFE_RAMwrite.TS3config)
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <bq76952_TS3config+0x60>)
 8000f4e:	899a      	ldrh	r2, [r3, #12]
 8000f50:	88bb      	ldrh	r3, [r7, #4]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	d106      	bne.n	8000f64 <bq76952_TS3config+0x50>
    {
      break;
    }ret_val = SYS_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	80fb      	strh	r3, [r7, #6]
 8000f5a:	e004      	b.n	8000f66 <bq76952_TS3config+0x52>
      break;
 8000f5c:	bf00      	nop
 8000f5e:	e002      	b.n	8000f66 <bq76952_TS3config+0x52>
      break;
 8000f60:	bf00      	nop
 8000f62:	e000      	b.n	8000f66 <bq76952_TS3config+0x52>
      break;
 8000f64:	bf00      	nop
  }while(false);
  return ret_val;
 8000f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200000d8 	.word	0x200000d8

08000f78 <bq76952_write_RAM_register>:
static int16_t bq76952_write_RAM_register (uint16_t reg_address, uint16_t cmd, uint8_t datalen)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	80fb      	strh	r3, [r7, #6]
 8000f82:	460b      	mov	r3, r1
 8000f84:	80bb      	strh	r3, [r7, #4]
 8000f86:	4613      	mov	r3, r2
 8000f88:	70fb      	strb	r3, [r7, #3]
  //Writes to RAM Register
  uint16_t TX_Buffer;
  uint16_t ret_val = SYS_ERR;
 8000f8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f8e:	82bb      	strh	r3, [r7, #20]
  uint8_t TX_Buff[2] = {0x00, 0x00};
 8000f90:	2300      	movs	r3, #0
 8000f92:	823b      	strh	r3, [r7, #16]
  uint8_t TX_RegData[4] = {0x00, 0x00, 0x00, 0x00};
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
  TX_RegData[0] = reg_address & 0xff;
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	733b      	strb	r3, [r7, #12]
  TX_RegData[1] = (reg_address >> 8) & 0xff;
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	737b      	strb	r3, [r7, #13]
  TX_RegData[2] = cmd & 0xff; //1st byte of data
 8000fa8:	88bb      	ldrh	r3, [r7, #4]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	73bb      	strb	r3, [r7, #14]
  TX_RegData[3] = (cmd>>8) & 0xff;
 8000fae:	88bb      	ldrh	r3, [r7, #4]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	73fb      	strb	r3, [r7, #15]
  switch(datalen)
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d002      	beq.n	8000fc4 <bq76952_write_RAM_register+0x4c>
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d013      	beq.n	8000fea <bq76952_write_RAM_register+0x72>
 8000fc2:	e025      	b.n	8001010 <bq76952_write_RAM_register+0x98>
  {
    case 1://1 byte datalength
      TX_Buff[0] = Checksum(TX_RegData, 3);
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2103      	movs	r1, #3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 f86c 	bl	80010a8 <Checksum>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	743b      	strb	r3, [r7, #16]
      TX_Buff[1] = 0x05; //combined length of register address and data
 8000fd4:	2305      	movs	r3, #5
 8000fd6:	747b      	strb	r3, [r7, #17]
      TX_Buffer = (TX_Buff[1] << 8) | TX_Buff[0];
 8000fd8:	7c7b      	ldrb	r3, [r7, #17]
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	b21a      	sxth	r2, r3
 8000fde:	7c3b      	ldrb	r3, [r7, #16]
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	b21b      	sxth	r3, r3
 8000fe6:	82fb      	strh	r3, [r7, #22]
      break;
 8000fe8:	e012      	b.n	8001010 <bq76952_write_RAM_register+0x98>
    case 2://2 byte datalength
      TX_Buff[0] = Checksum(TX_RegData, 4);
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	2104      	movs	r1, #4
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 f859 	bl	80010a8 <Checksum>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	743b      	strb	r3, [r7, #16]
      TX_Buff[1] = 0x06; //combined length of register address and data
 8000ffa:	2306      	movs	r3, #6
 8000ffc:	747b      	strb	r3, [r7, #17]
      TX_Buffer = (TX_Buff[1] << 8) | TX_Buff[0];
 8000ffe:	7c7b      	ldrb	r3, [r7, #17]
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	b21a      	sxth	r2, r3
 8001004:	7c3b      	ldrb	r3, [r7, #16]
 8001006:	b21b      	sxth	r3, r3
 8001008:	4313      	orrs	r3, r2
 800100a:	b21b      	sxth	r3, r3
 800100c:	82fb      	strh	r3, [r7, #22]
      break;
 800100e:	bf00      	nop
    //Add case for 4 bytes (0x08) if required
  }
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, reg_address)) //Writes register address to Subcommand Memory 0x3E
 8001010:	88fb      	ldrh	r3, [r7, #6]
 8001012:	4619      	mov	r1, r3
 8001014:	203e      	movs	r0, #62	; 0x3e
 8001016:	f000 f8a9 	bl	800116c <bq76952_write_sub_cmd>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d112      	bne.n	8001046 <bq76952_write_RAM_register+0xce>
    {
      break;
    }
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_DATA_BUFF_ADDR, cmd)) //Writes Command to Buffer Memory 0x40
 8001020:	88bb      	ldrh	r3, [r7, #4]
 8001022:	4619      	mov	r1, r3
 8001024:	2040      	movs	r0, #64	; 0x40
 8001026:	f000 f8a1 	bl	800116c <bq76952_write_sub_cmd>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d10c      	bne.n	800104a <bq76952_write_RAM_register+0xd2>
    {
      break;
    }
    if(SYS_OK != bq76952_write_sub_cmd(RAM_REG_LSB_ADDR, TX_Buffer))  //Writes Checksum and Datalength to 0x60 and 0x61
 8001030:	8afb      	ldrh	r3, [r7, #22]
 8001032:	4619      	mov	r1, r3
 8001034:	2060      	movs	r0, #96	; 0x60
 8001036:	f000 f899 	bl	800116c <bq76952_write_sub_cmd>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d106      	bne.n	800104e <bq76952_write_RAM_register+0xd6>
    {
      break;
    }
    ret_val = SYS_OK;
 8001040:	2300      	movs	r3, #0
 8001042:	82bb      	strh	r3, [r7, #20]
 8001044:	e004      	b.n	8001050 <bq76952_write_RAM_register+0xd8>
      break;
 8001046:	bf00      	nop
 8001048:	e002      	b.n	8001050 <bq76952_write_RAM_register+0xd8>
      break;
 800104a:	bf00      	nop
 800104c:	e000      	b.n	8001050 <bq76952_write_RAM_register+0xd8>
      break;
 800104e:	bf00      	nop
  }while(false);
  return ret_val;
 8001050:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <bq76952_read_RAM_register>:

static int16_t bq76952_read_RAM_register (uint16_t reg_address, uint16_t *pData)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	80fb      	strh	r3, [r7, #6]
  //Reads from the RAM Register
  uint16_t ret_val = SYS_ERR;
 8001068:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800106c:	81fb      	strh	r3, [r7, #14]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, reg_address))
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	4619      	mov	r1, r3
 8001072:	203e      	movs	r0, #62	; 0x3e
 8001074:	f000 f87a 	bl	800116c <bq76952_write_sub_cmd>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10b      	bne.n	8001096 <bq76952_read_RAM_register+0x3a>
    {
      break;
    }
    if(SYS_OK != bq76952_read_sub_cmd_data_buffer(SUB_CMD_DATA_BUFF_ADDR, &pData, 2))
 800107e:	463b      	mov	r3, r7
 8001080:	2202      	movs	r2, #2
 8001082:	4619      	mov	r1, r3
 8001084:	2040      	movs	r0, #64	; 0x40
 8001086:	f000 f8f7 	bl	8001278 <bq76952_read_sub_cmd_data_buffer>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d104      	bne.n	800109a <bq76952_read_RAM_register+0x3e>
    {
      break;
    }
    ret_val = SYS_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	81fb      	strh	r3, [r7, #14]
 8001094:	e002      	b.n	800109c <bq76952_read_RAM_register+0x40>
      break;
 8001096:	bf00      	nop
 8001098:	e000      	b.n	800109c <bq76952_read_RAM_register+0x40>
      break;
 800109a:	bf00      	nop
  }while(false);
  return ret_val;
 800109c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <Checksum>:

static uint8_t Checksum(uint8_t *pData, uint8_t len)
// Calculates the checksum when writing to a RAM register. The checksum is the inverse of the sum of the bytes.
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  uint8_t checksum = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	73bb      	strb	r3, [r7, #14]

  for(i=0; i<len; i++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	e009      	b.n	80010d2 <Checksum+0x2a>
    checksum += pData[i];
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	4413      	add	r3, r2
 80010c4:	781a      	ldrb	r2, [r3, #0]
 80010c6:	7bbb      	ldrb	r3, [r7, #14]
 80010c8:	4413      	add	r3, r2
 80010ca:	73bb      	strb	r3, [r7, #14]
  for(i=0; i<len; i++)
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	3301      	adds	r3, #1
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	7bfa      	ldrb	r2, [r7, #15]
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d3f1      	bcc.n	80010be <Checksum+0x16>

  checksum = 0xff & ~checksum;
 80010da:	7bbb      	ldrb	r3, [r7, #14]
 80010dc:	43db      	mvns	r3, r3
 80010de:	73bb      	strb	r3, [r7, #14]

  return(checksum);
 80010e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <CRC8>:


static uint8_t CRC8(uint8_t *pData, uint8_t len)
//Calculates CRC8 for passed bytes.
{
 80010ee:	b480      	push	{r7}
 80010f0:	b085      	sub	sp, #20
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	460b      	mov	r3, r1
 80010f8:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  uint8_t crc = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73bb      	strb	r3, [r7, #14]
  while(len-- != 0)
 80010fe:	e029      	b.n	8001154 <CRC8+0x66>
  {
    for (i = 0x80; i != 0; i /= 2)
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	e020      	b.n	8001148 <CRC8+0x5a>
    {
      if((crc & 0x80) != 0)
 8001106:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800110a:	2b00      	cmp	r3, #0
 800110c:	da09      	bge.n	8001122 <CRC8+0x34>
      {
        crc *= 2;
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	73bb      	strb	r3, [r7, #14]
        crc ^= 0x107;
 8001114:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001118:	f083 0307 	eor.w	r3, r3, #7
 800111c:	b25b      	sxtb	r3, r3
 800111e:	73bb      	strb	r3, [r7, #14]
 8001120:	e002      	b.n	8001128 <CRC8+0x3a>
      }
      else
        crc *= 2;
 8001122:	7bbb      	ldrb	r3, [r7, #14]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	73bb      	strb	r3, [r7, #14]

      if((*pData & i) != 0)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	781a      	ldrb	r2, [r3, #0]
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	4013      	ands	r3, r2
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <CRC8+0x54>
        crc ^= 0x107;
 8001136:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800113a:	f083 0307 	eor.w	r3, r3, #7
 800113e:	b25b      	sxtb	r3, r3
 8001140:	73bb      	strb	r3, [r7, #14]
    for (i = 0x80; i != 0; i /= 2)
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	085b      	lsrs	r3, r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1db      	bne.n	8001106 <CRC8+0x18>
    }
    pData++;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3301      	adds	r3, #1
 8001152:	607b      	str	r3, [r7, #4]
  while(len-- != 0)
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	1e5a      	subs	r2, r3, #1
 8001158:	70fa      	strb	r2, [r7, #3]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1d0      	bne.n	8001100 <CRC8+0x12>
  }
  return (crc);
 800115e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <bq76952_write_sub_cmd>:

//-----------------------------------------------------------------------------------------------------------------------------
// READ/WRITE FUNCTIONS FOR DIRECT COMMANDS and SUBCOMMANDS

static int16_t bq76952_write_sub_cmd(uint16_t subCmdRegAddr, uint16_t subCmd)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af02      	add	r7, sp, #8
 8001172:	4603      	mov	r3, r0
 8001174:	460a      	mov	r2, r1
 8001176:	80fb      	strh	r3, [r7, #6]
 8001178:	4613      	mov	r3, r2
 800117a:	80bb      	strh	r3, [r7, #4]
  //To write data to subcommand address register (0x3E)
  uint8_t subCmdRegAddrWRITE = subCmdRegAddr | 0x80u; //Changes the leftmost bit to 1 since W Operation
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001184:	76fb      	strb	r3, [r7, #27]
  int16_t ret_val = SYS_ERR;
 8001186:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800118a:	83fb      	strh	r3, [r7, #30]
  uint8_t pTxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 800118c:	4b37      	ldr	r3, [pc, #220]	; (800126c <bq76952_write_sub_cmd+0x100>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	823b      	strh	r3, [r7, #16]
 8001192:	2300      	movs	r3, #0
 8001194:	74bb      	strb	r3, [r7, #18]
  uint8_t pRxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 8001196:	4b35      	ldr	r3, [pc, #212]	; (800126c <bq76952_write_sub_cmd+0x100>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	81bb      	strh	r3, [r7, #12]
 800119c:	2300      	movs	r3, #0
 800119e:	73bb      	strb	r3, [r7, #14]
  uint8_t retry_cnt = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	777b      	strb	r3, [r7, #29]
  uint16_t TxByte, RxByte = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	833b      	strh	r3, [r7, #24]
  for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	773b      	strb	r3, [r7, #28]
 80011ac:	e054      	b.n	8001258 <bq76952_write_sub_cmd+0xec>
  {
    pTxData[0] = subCmdRegAddrWRITE + i;
 80011ae:	7efa      	ldrb	r2, [r7, #27]
 80011b0:	7f3b      	ldrb	r3, [r7, #28]
 80011b2:	4413      	add	r3, r2
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	743b      	strb	r3, [r7, #16]
    pTxData[1] = subCmd >> (i * 8); //To retrieve the lower byte and then the higher byte subsequently
 80011b8:	88ba      	ldrh	r2, [r7, #4]
 80011ba:	7f3b      	ldrb	r3, [r7, #28]
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	fa42 f303 	asr.w	r3, r2, r3
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	747b      	strb	r3, [r7, #17]
    pTxData[2] = CRC8(pTxData, SUB_CMD_LEN);
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	2102      	movs	r1, #2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff8e 	bl	80010ee <CRC8>
 80011d2:	4603      	mov	r3, r0
 80011d4:	74bb      	strb	r3, [r7, #18]
    TxByte = pTxData[0] | (pTxData[1] << 8);
 80011d6:	7c3b      	ldrb	r3, [r7, #16]
 80011d8:	b21a      	sxth	r2, r3
 80011da:	7c7b      	ldrb	r3, [r7, #17]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	82fb      	strh	r3, [r7, #22]
    do
    {
      HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);                                          // Enable CS
 80011e6:	2200      	movs	r2, #0
 80011e8:	2110      	movs	r1, #16
 80011ea:	4821      	ldr	r0, [pc, #132]	; (8001270 <bq76952_write_sub_cmd+0x104>)
 80011ec:	f004 fbb0 	bl	8005950 <HAL_GPIO_WritePin>
      HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, SPI_SUB_CMD_FRAME_LEN, SPI_WR_TIMEOUT_MS); // Rx & Tx simultaneously (Full Duplex)
 80011f0:	f107 020c 	add.w	r2, r7, #12
 80011f4:	f107 0110 	add.w	r1, r7, #16
 80011f8:	230a      	movs	r3, #10
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2303      	movs	r3, #3
 80011fe:	481d      	ldr	r0, [pc, #116]	; (8001274 <bq76952_write_sub_cmd+0x108>)
 8001200:	f007 fc56 	bl	8008ab0 <HAL_SPI_TransmitReceive>
      HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);                                          // Disable CS
 8001204:	2201      	movs	r2, #1
 8001206:	2110      	movs	r1, #16
 8001208:	4819      	ldr	r0, [pc, #100]	; (8001270 <bq76952_write_sub_cmd+0x104>)
 800120a:	f004 fba1 	bl	8005950 <HAL_GPIO_WritePin>
      HAL_Delay(2);
 800120e:	2002      	movs	r0, #2
 8001210:	f001 fe56 	bl	8002ec0 <HAL_Delay>
      RxByte = pRxData[0] | (pRxData[1] << 8);
 8001214:	7b3b      	ldrb	r3, [r7, #12]
 8001216:	b21a      	sxth	r2, r3
 8001218:	7b7b      	ldrb	r3, [r7, #13]
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b21b      	sxth	r3, r3
 8001222:	833b      	strh	r3, [r7, #24]
      retry_cnt++;
 8001224:	7f7b      	ldrb	r3, [r7, #29]
 8001226:	3301      	adds	r3, #1
 8001228:	777b      	strb	r3, [r7, #29]
    } while((TxByte != RxByte) && (retry_cnt < 4));
 800122a:	8afa      	ldrh	r2, [r7, #22]
 800122c:	8b3b      	ldrh	r3, [r7, #24]
 800122e:	429a      	cmp	r2, r3
 8001230:	d002      	beq.n	8001238 <bq76952_write_sub_cmd+0xcc>
 8001232:	7f7b      	ldrb	r3, [r7, #29]
 8001234:	2b03      	cmp	r3, #3
 8001236:	d9d6      	bls.n	80011e6 <bq76952_write_sub_cmd+0x7a>
    if(TxByte == RxByte)
 8001238:	8afa      	ldrh	r2, [r7, #22]
 800123a:	8b3b      	ldrh	r3, [r7, #24]
 800123c:	429a      	cmp	r2, r3
 800123e:	d104      	bne.n	800124a <bq76952_write_sub_cmd+0xde>
    {
      retry_cnt=0;
 8001240:	2300      	movs	r3, #0
 8001242:	777b      	strb	r3, [r7, #29]
      ret_val = SYS_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	83fb      	strh	r3, [r7, #30]
 8001248:	e003      	b.n	8001252 <bq76952_write_sub_cmd+0xe6>
    }
    else
    {
      ret_val = SYS_ERR;
 800124a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800124e:	83fb      	strh	r3, [r7, #30]
      break;
 8001250:	e005      	b.n	800125e <bq76952_write_sub_cmd+0xf2>
  for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8001252:	7f3b      	ldrb	r3, [r7, #28]
 8001254:	3301      	adds	r3, #1
 8001256:	773b      	strb	r3, [r7, #28]
 8001258:	7f3b      	ldrb	r3, [r7, #28]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d9a7      	bls.n	80011ae <bq76952_write_sub_cmd+0x42>
    }
  }
  return ret_val;
 800125e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	0800bc8c 	.word	0x0800bc8c
 8001270:	40020800 	.word	0x40020800
 8001274:	200006ec 	.word	0x200006ec

08001278 <bq76952_read_sub_cmd_data_buffer>:

static int16_t bq76952_read_sub_cmd_data_buffer(uint8_t subCmdRegAddr, uint16_t **pData, uint8_t len)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b090      	sub	sp, #64	; 0x40
 800127c:	af02      	add	r7, sp, #8
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	71fb      	strb	r3, [r7, #7]
 8001284:	4613      	mov	r3, r2
 8001286:	71bb      	strb	r3, [r7, #6]
  //To read data from the Subcommand Buffer register(0x40)
  uint8_t RX_DATA[SUB_CMD_DATA_BUFF_LEN_MAX] = {0};  //To store the initial data from the Buffer
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
 800129c:	615a      	str	r2, [r3, #20]
 800129e:	619a      	str	r2, [r3, #24]
  int16_t ret_val = SYS_ERR;
 80012a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a4:	86fb      	strh	r3, [r7, #54]	; 0x36
  do
  {
    if((len > SUB_CMD_DATA_BUFF_LEN_MAX) || (len == 0))
 80012a6:	79bb      	ldrb	r3, [r7, #6]
 80012a8:	2b20      	cmp	r3, #32
 80012aa:	f200 8085 	bhi.w	80013b8 <bq76952_read_sub_cmd_data_buffer+0x140>
 80012ae:	79bb      	ldrb	r3, [r7, #6]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 8081 	beq.w	80013b8 <bq76952_read_sub_cmd_data_buffer+0x140>
    {
      break;
    }
    if(pData == NULL)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d07c      	beq.n	80013b6 <bq76952_read_sub_cmd_data_buffer+0x13e>
    {
      break;
    }
    uint8_t pTxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 80012bc:	4b41      	ldr	r3, [pc, #260]	; (80013c4 <bq76952_read_sub_cmd_data_buffer+0x14c>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	81bb      	strh	r3, [r7, #12]
 80012c2:	2300      	movs	r3, #0
 80012c4:	73bb      	strb	r3, [r7, #14]
    uint8_t pRxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 80012c6:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <bq76952_read_sub_cmd_data_buffer+0x14c>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	813b      	strh	r3, [r7, #8]
 80012cc:	2300      	movs	r3, #0
 80012ce:	72bb      	strb	r3, [r7, #10]
    uint8_t retry_cnt = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint8_t TxByte, RxByte;
    for (uint8_t i = 0; i < len; i++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80012dc:	e05a      	b.n	8001394 <bq76952_read_sub_cmd_data_buffer+0x11c>
    {
      pTxData[0] = subCmdRegAddr + i;
 80012de:	79fa      	ldrb	r2, [r7, #7]
 80012e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80012e4:	4413      	add	r3, r2
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	733b      	strb	r3, [r7, #12]
      pTxData[1] = 0xFF;
 80012ea:	23ff      	movs	r3, #255	; 0xff
 80012ec:	737b      	strb	r3, [r7, #13]
      pTxData[2] = CRC8(pTxData, SUB_CMD_LEN);
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	2102      	movs	r1, #2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fefa 	bl	80010ee <CRC8>
 80012fa:	4603      	mov	r3, r0
 80012fc:	73bb      	strb	r3, [r7, #14]
      TxByte = pTxData[0];
 80012fe:	7b3b      	ldrb	r3, [r7, #12]
 8001300:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      retry_cnt = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
      do
      {
        HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);                                          // Enable CS
 800130a:	2200      	movs	r2, #0
 800130c:	2110      	movs	r1, #16
 800130e:	482e      	ldr	r0, [pc, #184]	; (80013c8 <bq76952_read_sub_cmd_data_buffer+0x150>)
 8001310:	f004 fb1e 	bl	8005950 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, SPI_SUB_CMD_FRAME_LEN, SPI_WR_TIMEOUT_MS); // Rx & Tx simultaneously (Full Duplex)
 8001314:	f107 0208 	add.w	r2, r7, #8
 8001318:	f107 010c 	add.w	r1, r7, #12
 800131c:	230a      	movs	r3, #10
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2303      	movs	r3, #3
 8001322:	482a      	ldr	r0, [pc, #168]	; (80013cc <bq76952_read_sub_cmd_data_buffer+0x154>)
 8001324:	f007 fbc4 	bl	8008ab0 <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);                                          // Disable CS
 8001328:	2201      	movs	r2, #1
 800132a:	2110      	movs	r1, #16
 800132c:	4826      	ldr	r0, [pc, #152]	; (80013c8 <bq76952_read_sub_cmd_data_buffer+0x150>)
 800132e:	f004 fb0f 	bl	8005950 <HAL_GPIO_WritePin>
        HAL_Delay(2);
 8001332:	2002      	movs	r0, #2
 8001334:	f001 fdc4 	bl	8002ec0 <HAL_Delay>
        RxByte = pRxData[0];
 8001338:	7a3b      	ldrb	r3, [r7, #8]
 800133a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        retry_cnt++;
 800133e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001342:	3301      	adds	r3, #1
 8001344:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
      } while((TxByte != RxByte) && (retry_cnt < 4));
 8001348:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800134c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001350:	429a      	cmp	r2, r3
 8001352:	d003      	beq.n	800135c <bq76952_read_sub_cmd_data_buffer+0xe4>
 8001354:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001358:	2b03      	cmp	r3, #3
 800135a:	d9d6      	bls.n	800130a <bq76952_read_sub_cmd_data_buffer+0x92>
      if(TxByte == RxByte)
 800135c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001360:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001364:	429a      	cmp	r2, r3
 8001366:	d10c      	bne.n	8001382 <bq76952_read_sub_cmd_data_buffer+0x10a>
      {
        retry_cnt=0;
 8001368:	2300      	movs	r3, #0
 800136a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        RX_DATA[i] = pRxData[1];
 800136e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001372:	7a7a      	ldrb	r2, [r7, #9]
 8001374:	3338      	adds	r3, #56	; 0x38
 8001376:	443b      	add	r3, r7
 8001378:	f803 2c28 	strb.w	r2, [r3, #-40]
        ret_val = SYS_OK;
 800137c:	2300      	movs	r3, #0
 800137e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001380:	e003      	b.n	800138a <bq76952_read_sub_cmd_data_buffer+0x112>
      }
      else
      {
        ret_val = SYS_ERR;
 8001382:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001386:	86fb      	strh	r3, [r7, #54]	; 0x36
        break;
 8001388:	e009      	b.n	800139e <bq76952_read_sub_cmd_data_buffer+0x126>
    for (uint8_t i = 0; i < len; i++)
 800138a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800138e:	3301      	adds	r3, #1
 8001390:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001394:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001398:	79bb      	ldrb	r3, [r7, #6]
 800139a:	429a      	cmp	r2, r3
 800139c:	d39f      	bcc.n	80012de <bq76952_read_sub_cmd_data_buffer+0x66>
      }
    }
    **pData= (RX_DATA[1] << 8) | RX_DATA[0];
 800139e:	7c7b      	ldrb	r3, [r7, #17]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	7c3b      	ldrb	r3, [r7, #16]
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	b292      	uxth	r2, r2
 80013b2:	801a      	strh	r2, [r3, #0]
 80013b4:	e000      	b.n	80013b8 <bq76952_read_sub_cmd_data_buffer+0x140>
      break;
 80013b6:	bf00      	nop
  } while(false);
  return ret_val;
 80013b8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3738      	adds	r7, #56	; 0x38
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	0800bc8c 	.word	0x0800bc8c
 80013c8:	40020800 	.word	0x40020800
 80013cc:	200006ec 	.word	0x200006ec

080013d0 <app_afe_init>:

  return ret_val;
}

int16_t app_afe_init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 80013d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013da:	80fb      	strh	r3, [r7, #6]
	do
	{
	    bq76952_init();
 80013dc:	f7ff fba2 	bl	8000b24 <bq76952_init>
		ret_val = SYS_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	80fb      	strh	r3, [r7, #6]
	}while(false);

	return ret_val;
 80013e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <app_bms_sm_init>:
        {.state = eBmsState_Sleep,
         .callback = {sm_state_sleep_entry, sm_state_sleep_main, sm_state_sleep_exit}}};


int16_t app_bms_sm_init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
    int16_t exit_code = SYS_ERR;
 80013f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013fa:	80fb      	strh	r3, [r7, #6]
    app_bms_state_transition_handler(eBmsState_Idle);
 80013fc:	2002      	movs	r0, #2
 80013fe:	f000 f809 	bl	8001414 <app_bms_state_transition_handler>

    exit_code = SYS_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	80fb      	strh	r3, [r7, #6]
    return exit_code;
 8001406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <app_bms_state_transition_handler>:

/* BMS StateMachine State Transition Handler */
int16_t app_bms_state_transition_handler(TeBmsState_t state)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
    int16_t exit_code = SYS_ERR;
 800141e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001422:	81fb      	strh	r3, [r7, #14]

    // 1.Exit current state
    if (NULL != bms_sm[state_machine.curr_state].callback.exit)
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <app_bms_state_transition_handler+0x7c>)
 8001426:	799b      	ldrb	r3, [r3, #6]
 8001428:	4a1a      	ldr	r2, [pc, #104]	; (8001494 <app_bms_state_transition_handler+0x80>)
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	4413      	add	r3, r2
 800142e:	330c      	adds	r3, #12
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d007      	beq.n	8001446 <app_bms_state_transition_handler+0x32>
    {
        bms_sm[state_machine.curr_state].callback.exit();
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <app_bms_state_transition_handler+0x7c>)
 8001438:	799b      	ldrb	r3, [r3, #6]
 800143a:	4a16      	ldr	r2, [pc, #88]	; (8001494 <app_bms_state_transition_handler+0x80>)
 800143c:	011b      	lsls	r3, r3, #4
 800143e:	4413      	add	r3, r2
 8001440:	330c      	adds	r3, #12
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4798      	blx	r3
    }

    // 2. Update State Transition
    state_machine.prev_state = state_machine.curr_state;
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <app_bms_state_transition_handler+0x7c>)
 8001448:	799a      	ldrb	r2, [r3, #6]
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <app_bms_state_transition_handler+0x7c>)
 800144c:	715a      	strb	r2, [r3, #5]
    state_machine.curr_state = state;
 800144e:	4a10      	ldr	r2, [pc, #64]	; (8001490 <app_bms_state_transition_handler+0x7c>)
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	7193      	strb	r3, [r2, #6]

    // 3. Enter New State
    if (NULL != bms_sm[state_machine.curr_state].callback.entry)
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <app_bms_state_transition_handler+0x7c>)
 8001456:	799b      	ldrb	r3, [r3, #6]
 8001458:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <app_bms_state_transition_handler+0x80>)
 800145a:	011b      	lsls	r3, r3, #4
 800145c:	4413      	add	r3, r2
 800145e:	3304      	adds	r3, #4
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00a      	beq.n	800147c <app_bms_state_transition_handler+0x68>
    {
        bms_sm[state_machine.curr_state].callback.entry();
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <app_bms_state_transition_handler+0x7c>)
 8001468:	799b      	ldrb	r3, [r3, #6]
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <app_bms_state_transition_handler+0x80>)
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	4413      	add	r3, r2
 8001470:	3304      	adds	r3, #4
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4798      	blx	r3
        exit_code = SYS_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	81fb      	strh	r3, [r7, #14]
 800147a:	e002      	b.n	8001482 <app_bms_state_transition_handler+0x6e>
    }
    else
    {
        exit_code = SYS_FAIL;
 800147c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001480:	81fb      	strh	r3, [r7, #14]
    }

    return exit_code;
 8001482:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200000e8 	.word	0x200000e8
 8001494:	0800bf58 	.word	0x0800bf58

08001498 <sm_state_drive_entry>:


// ------------------ DRIVE STATE ------------------------------
/* Drive Entry */
static void sm_state_drive_entry(TsStateMachine_t *const sm)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
    //TODO Close FET's
    sm_state_drive_main(sm);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 f804 	bl	80014ae <sm_state_drive_main>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <sm_state_drive_main>:

/* Drive Main */
static void sm_state_drive_main(TsStateMachine_t *const sm)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b084      	sub	sp, #16
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
    TeBmsState_t bms_state = eBmsState_Unknown;
 80014b6:	2300      	movs	r3, #0
 80014b8:	73fb      	strb	r3, [r7, #15]
    if((sm->inhibit_charge_entry == true) && (sm->inhibit_drive_entry == true))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	789b      	ldrb	r3, [r3, #2]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d006      	beq.n	80014d0 <sm_state_drive_main+0x22>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d002      	beq.n	80014d0 <sm_state_drive_main+0x22>
    {
        bms_state = eBmsState_Fault;
 80014ca:	2301      	movs	r3, #1
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	e018      	b.n	8001502 <sm_state_drive_main+0x54>
    }
    else
    {
        // Update BMS state to Drive
        // Wait for drive exit
        switch(sm->request)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	791b      	ldrb	r3, [r3, #4]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d002      	beq.n	80014de <sm_state_drive_main+0x30>
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d00c      	beq.n	80014f6 <sm_state_drive_main+0x48>
 80014dc:	e00e      	b.n	80014fc <sm_state_drive_main+0x4e>
        {
        case eBmsStateRequest_Charge:
            bms_state = (sm->inhibit_charge_entry == false) ? eBmsState_Charge : eBmsState_Drive;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	789b      	ldrb	r3, [r3, #2]
 80014e2:	f083 0301 	eor.w	r3, r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <sm_state_drive_main+0x42>
 80014ec:	2304      	movs	r3, #4
 80014ee:	e000      	b.n	80014f2 <sm_state_drive_main+0x44>
 80014f0:	2303      	movs	r3, #3
 80014f2:	73fb      	strb	r3, [r7, #15]
            break;
 80014f4:	e005      	b.n	8001502 <sm_state_drive_main+0x54>
//        case eBmsState_Idle:
//            bms_state = eBmsState_Idle;
//            break;
        case eBmsStateRequest_Sleep:
            bms_state = eBmsState_Sleep;
 80014f6:	2305      	movs	r3, #5
 80014f8:	73fb      	strb	r3, [r7, #15]
            break;
 80014fa:	e002      	b.n	8001502 <sm_state_drive_main+0x54>
        default: // Continue in Drive State
            bms_state = eBmsState_Drive;
 80014fc:	2303      	movs	r3, #3
 80014fe:	73fb      	strb	r3, [r7, #15]
            break;
 8001500:	bf00      	nop
        }
    }
    app_bms_state_transition_handler(bms_state);
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff85 	bl	8001414 <app_bms_state_transition_handler>
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <sm_state_drive_exit>:

/* Drive Exit */
static void sm_state_drive_exit(TsStateMachine_t *const sm)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
    // If requested Charge Connect to "charge_main"
    // Else Open Fet's and Connect to next State
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <sm_state_charge_entry>:

// ------------------ CHARGE STATE ------------------------------
/* Charge Enter */
static void sm_state_charge_entry(TsStateMachine_t *const sm)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
    // Close FET's
    sm_state_charge_main(sm);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 f804 	bl	800153c <sm_state_charge_main>
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <sm_state_charge_main>:

/* Charge Main*/
static void sm_state_charge_main(TsStateMachine_t *const sm)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
    TeBmsState_t bms_state = eBmsState_Unknown;
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]
    if((sm->inhibit_charge_entry == true) && (sm->inhibit_drive_entry == true))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	789b      	ldrb	r3, [r3, #2]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d006      	beq.n	800155e <sm_state_charge_main+0x22>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d002      	beq.n	800155e <sm_state_charge_main+0x22>
    {
        bms_state = eBmsState_Fault;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e01f      	b.n	800159e <sm_state_charge_main+0x62>
    }
    else
    {
        switch(sm->request)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	791b      	ldrb	r3, [r3, #4]
 8001562:	2b03      	cmp	r3, #3
 8001564:	d015      	beq.n	8001592 <sm_state_charge_main+0x56>
 8001566:	2b03      	cmp	r3, #3
 8001568:	dc16      	bgt.n	8001598 <sm_state_charge_main+0x5c>
 800156a:	2b01      	cmp	r3, #1
 800156c:	d002      	beq.n	8001574 <sm_state_charge_main+0x38>
 800156e:	2b02      	cmp	r3, #2
 8001570:	d00c      	beq.n	800158c <sm_state_charge_main+0x50>
 8001572:	e011      	b.n	8001598 <sm_state_charge_main+0x5c>
        {
        case eBmsStateRequest_Drive:
            bms_state = (sm->inhibit_drive_entry == false) ? eBmsState_Drive: eBmsState_Charge;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	f083 0301 	eor.w	r3, r3, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <sm_state_charge_main+0x4a>
 8001582:	2303      	movs	r3, #3
 8001584:	e000      	b.n	8001588 <sm_state_charge_main+0x4c>
 8001586:	2304      	movs	r3, #4
 8001588:	73fb      	strb	r3, [r7, #15]
            break;
 800158a:	e008      	b.n	800159e <sm_state_charge_main+0x62>
        case eBmsState_Idle:
            bms_state = eBmsState_Idle;
 800158c:	2302      	movs	r3, #2
 800158e:	73fb      	strb	r3, [r7, #15]
            break;
 8001590:	e005      	b.n	800159e <sm_state_charge_main+0x62>
        case eBmsStateRequest_Sleep:
            bms_state = eBmsState_Sleep;
 8001592:	2305      	movs	r3, #5
 8001594:	73fb      	strb	r3, [r7, #15]
            break;
 8001596:	e002      	b.n	800159e <sm_state_charge_main+0x62>
        default: // Continue in Drive State
            bms_state = eBmsState_Charge;
 8001598:	2304      	movs	r3, #4
 800159a:	73fb      	strb	r3, [r7, #15]
            break;
 800159c:	bf00      	nop
        }
    }
    app_bms_state_transition_handler(bms_state);
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff37 	bl	8001414 <app_bms_state_transition_handler>
}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <sm_state_charge_exit>:

/* Charge Exit */
static void sm_state_charge_exit(TsStateMachine_t *const sm)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
    // Stop Balancing
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <sm_state_fault_entry>:

// ------------------ FAULT STATE ------------------------------
/* Fault entry */
static void sm_state_fault_entry(TsStateMachine_t *const sm)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
    //TODO Open FET's
    sm_state_fault_main(sm);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f804 	bl	80015d8 <sm_state_fault_main>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <sm_state_fault_main>:

/* Fault Main */
static void sm_state_fault_main(TsStateMachine_t *const sm)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
    TeBmsState_t bms_state = eBmsState_Unknown;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]
    if((sm->inhibit_charge_entry == false) && (sm->inhibit_drive_entry == false))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	789b      	ldrb	r3, [r3, #2]
 80015e8:	f083 0301 	eor.w	r3, r3, #1
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d009      	beq.n	8001606 <sm_state_fault_main+0x2e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	f083 0301 	eor.w	r3, r3, #1
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <sm_state_fault_main+0x2e>
    {
        bms_state = eBmsState_Idle;
 8001600:	2302      	movs	r3, #2
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	e008      	b.n	8001618 <sm_state_fault_main+0x40>
    }
    else if (sm->request == eBmsStateRequest_Sleep)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	791b      	ldrb	r3, [r3, #4]
 800160a:	2b03      	cmp	r3, #3
 800160c:	d102      	bne.n	8001614 <sm_state_fault_main+0x3c>
    {
        bms_state = eBmsState_Sleep;
 800160e:	2305      	movs	r3, #5
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	e001      	b.n	8001618 <sm_state_fault_main+0x40>
    }
    else
    {
        // Continue in fault state
        bms_state = eBmsState_Fault;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
    }
    app_bms_state_transition_handler(bms_state);
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fefa 	bl	8001414 <app_bms_state_transition_handler>
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <sm_state_fault_exit>:

/* Fault exit */
static void sm_state_fault_exit(TsStateMachine_t *const sm)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <sm_state_idle_entry>:

// ------------------ IDLE STATE ------------------------------
/* Idle entry */
static void sm_state_idle_entry(TsStateMachine_t *const sm)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
    //TODO: Command FET's to Open

    // Jump to Idle Main
    sm_state_idle_main(sm);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f804 	bl	8001652 <sm_state_idle_main>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <sm_state_idle_main>:

/* Idle main */
static void sm_state_idle_main(TsStateMachine_t *const sm)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
    TeBmsState_t bms_state = eBmsState_Unknown;
 800165a:	2300      	movs	r3, #0
 800165c:	73fb      	strb	r3, [r7, #15]
    if((sm->inhibit_charge_entry == true) && (sm->inhibit_drive_entry == true))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	789b      	ldrb	r3, [r3, #2]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d006      	beq.n	8001674 <sm_state_idle_main+0x22>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d002      	beq.n	8001674 <sm_state_idle_main+0x22>
    {
        bms_state = eBmsState_Fault;
 800166e:	2301      	movs	r3, #1
 8001670:	73fb      	strb	r3, [r7, #15]
 8001672:	e027      	b.n	80016c4 <sm_state_idle_main+0x72>
    }
    else
    {
        switch(sm->request)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	791b      	ldrb	r3, [r3, #4]
 8001678:	2b03      	cmp	r3, #3
 800167a:	d01a      	beq.n	80016b2 <sm_state_idle_main+0x60>
 800167c:	2b03      	cmp	r3, #3
 800167e:	dc1b      	bgt.n	80016b8 <sm_state_idle_main+0x66>
 8001680:	2b01      	cmp	r3, #1
 8001682:	d002      	beq.n	800168a <sm_state_idle_main+0x38>
 8001684:	2b02      	cmp	r3, #2
 8001686:	d00a      	beq.n	800169e <sm_state_idle_main+0x4c>
 8001688:	e016      	b.n	80016b8 <sm_state_idle_main+0x66>
        {
        case eBmsStateRequest_Drive:
            if(sm->inhibit_drive_entry == false)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	f083 0301 	eor.w	r3, r3, #1
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d012      	beq.n	80016be <sm_state_idle_main+0x6c>
            {
                bms_state = eBmsState_Drive;
 8001698:	2303      	movs	r3, #3
 800169a:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800169c:	e00f      	b.n	80016be <sm_state_idle_main+0x6c>
        case eBmsStateRequest_Charge:
            if(sm->inhibit_charge_entry == false)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	789b      	ldrb	r3, [r3, #2]
 80016a2:	f083 0301 	eor.w	r3, r3, #1
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00a      	beq.n	80016c2 <sm_state_idle_main+0x70>
            {
                bms_state = eBmsState_Charge;
 80016ac:	2304      	movs	r3, #4
 80016ae:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80016b0:	e007      	b.n	80016c2 <sm_state_idle_main+0x70>
        case eBmsStateRequest_Sleep:
            // TODO Check for sleep conditions
            bms_state = eBmsState_Sleep;
 80016b2:	2305      	movs	r3, #5
 80016b4:	73fb      	strb	r3, [r7, #15]
            break;
 80016b6:	e005      	b.n	80016c4 <sm_state_idle_main+0x72>
        default: // Continue in Idle State
            bms_state = eBmsState_Idle;
 80016b8:	2302      	movs	r3, #2
 80016ba:	73fb      	strb	r3, [r7, #15]
        break;
 80016bc:	e002      	b.n	80016c4 <sm_state_idle_main+0x72>
            break;
 80016be:	bf00      	nop
 80016c0:	e000      	b.n	80016c4 <sm_state_idle_main+0x72>
            break;
 80016c2:	bf00      	nop
        }
    }
    app_bms_state_transition_handler(bms_state);
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fea4 	bl	8001414 <app_bms_state_transition_handler>
}
 80016cc:	bf00      	nop
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <sm_state_idle_exit>:

/* Idle exit */
static void sm_state_idle_exit(TsStateMachine_t *const sm)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <sm_state_sleep_entry>:

// ------------------ SLEEP STATE ------------------------------
/* Sleep entry */
static void sm_state_sleep_entry(TsStateMachine_t *const sm)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <sm_state_sleep_main>:
static void sm_state_sleep_main(TsStateMachine_t *const sm)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <sm_state_sleep_exit>:
static void sm_state_sleep_exit(TsStateMachine_t *const sm)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <sm_state_unknown_main>:

static void sm_state_unknown_main(TsStateMachine_t *const sm)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <app_gauge_init>:

	return ret_val;
}

int16_t app_gauge_init(void)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
    int16_t ret_val = SYS_ERR;
 800173e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001742:	80fb      	strh	r3, [r7, #6]

    // Config block reads
    block_read_cfg[eAlgoFet_BLOCK0].Addr = 0x02u;
 8001744:	4b07      	ldr	r3, [pc, #28]	; (8001764 <app_gauge_init+0x2c>)
 8001746:	2202      	movs	r2, #2
 8001748:	701a      	strb	r2, [r3, #0]
    block_read_cfg[eAlgoFet_BLOCK0].Len = 18u;
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <app_gauge_init+0x2c>)
 800174c:	2212      	movs	r2, #18
 800174e:	705a      	strb	r2, [r3, #1]

    ret_val = SYS_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	80fb      	strh	r3, [r7, #6]

    return ret_val;
 8001754:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	20000100 	.word	0x20000100

08001768 <app_sys_init>:

#include "app_afe.h"
#include "app_fuel_gauge.h"

int16_t app_sys_init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 800176e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001772:	80fb      	strh	r3, [r7, #6]
	do
	{
		// TODO:
		// IO Init
		(void) MX_GPIO_Init();
 8001774:	f000 fe14 	bl	80023a0 <MX_GPIO_Init>
		// I2C Init
		(void) MX_I2C1_Init();
 8001778:	f000 feee 	bl	8002558 <MX_I2C1_Init>
		// SPI Init
		(void) MX_SPI1_Init();
 800177c:	f001 f87c 	bl	8002878 <MX_SPI1_Init>
		// CAN Init
		(void) MX_CAN1_Init();
 8001780:	f000 fa04 	bl	8001b8c <MX_CAN1_Init>
		// PWM Init
		(void) MX_DMA_Init();
 8001784:	f000 fc90 	bl	80020a8 <MX_DMA_Init>
		// ADC Init
		(void) MX_ADC1_Init();
 8001788:	f000 f82a 	bl	80017e0 <MX_ADC1_Init>

	}while(false);

	return ret_val;
 800178c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <app_sys_peripheral_init>:

int16_t app_sys_peripheral_init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 800179e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a2:	80fb      	strh	r3, [r7, #6]
	do
	{
		// TODO:
		// AFE Init
		if(SYS_OK != app_afe_init())
 80017a4:	f7ff fe14 	bl	80013d0 <app_afe_init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10c      	bne.n	80017c8 <app_sys_peripheral_init+0x30>
		{
			break;
		}
		// Fuel Gauge Init
		if(SYS_OK != app_gauge_init())
 80017ae:	f7ff ffc3 	bl	8001738 <app_gauge_init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d109      	bne.n	80017cc <app_sys_peripheral_init+0x34>
		{
			break;
		}
		//State Machine Init
		if(SYS_OK != app_bms_sm_init())
 80017b8:	f7ff fe1a 	bl	80013f0 <app_bms_sm_init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d106      	bne.n	80017d0 <app_sys_peripheral_init+0x38>
		{
		    break;
		}
		// CAN NW Init

		ret_val = SYS_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	80fb      	strh	r3, [r7, #6]
 80017c6:	e004      	b.n	80017d2 <app_sys_peripheral_init+0x3a>
			break;
 80017c8:	bf00      	nop
 80017ca:	e002      	b.n	80017d2 <app_sys_peripheral_init+0x3a>
			break;
 80017cc:	bf00      	nop
 80017ce:	e000      	b.n	80017d2 <app_sys_peripheral_init+0x3a>
		    break;
 80017d0:	bf00      	nop
	}while(false);

	return ret_val;
 80017d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017e6:	463b      	mov	r3, r7
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017f2:	4b21      	ldr	r3, [pc, #132]	; (8001878 <MX_ADC1_Init+0x98>)
 80017f4:	4a21      	ldr	r2, [pc, #132]	; (800187c <MX_ADC1_Init+0x9c>)
 80017f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <MX_ADC1_Init+0x98>)
 80017fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001800:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <MX_ADC1_Init+0x98>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001806:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <MX_ADC1_Init+0x98>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <MX_ADC1_Init+0x98>)
 800180e:	2200      	movs	r2, #0
 8001810:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <MX_ADC1_Init+0x98>)
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800181a:	4b17      	ldr	r3, [pc, #92]	; (8001878 <MX_ADC1_Init+0x98>)
 800181c:	2200      	movs	r2, #0
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001820:	4b15      	ldr	r3, [pc, #84]	; (8001878 <MX_ADC1_Init+0x98>)
 8001822:	4a17      	ldr	r2, [pc, #92]	; (8001880 <MX_ADC1_Init+0xa0>)
 8001824:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_ADC1_Init+0x98>)
 8001828:	2200      	movs	r2, #0
 800182a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <MX_ADC1_Init+0x98>)
 800182e:	2201      	movs	r2, #1
 8001830:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <MX_ADC1_Init+0x98>)
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <MX_ADC1_Init+0x98>)
 800183c:	2201      	movs	r2, #1
 800183e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001840:	480d      	ldr	r0, [pc, #52]	; (8001878 <MX_ADC1_Init+0x98>)
 8001842:	f001 fb61 	bl	8002f08 <HAL_ADC_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800184c:	f001 f804 	bl	8002858 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001850:	230a      	movs	r3, #10
 8001852:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001854:	2301      	movs	r3, #1
 8001856:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800185c:	463b      	mov	r3, r7
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_ADC1_Init+0x98>)
 8001862:	f001 fcbd 	bl	80031e0 <HAL_ADC_ConfigChannel>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800186c:	f000 fff4 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000108 	.word	0x20000108
 800187c:	40012000 	.word	0x40012000
 8001880:	0f000001 	.word	0x0f000001

08001884 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a17      	ldr	r2, [pc, #92]	; (8001900 <HAL_ADC_MspInit+0x7c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d127      	bne.n	80018f6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <HAL_ADC_MspInit+0x80>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ae:	4a15      	ldr	r2, [pc, #84]	; (8001904 <HAL_ADC_MspInit+0x80>)
 80018b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b4:	6453      	str	r3, [r2, #68]	; 0x44
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <HAL_ADC_MspInit+0x80>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <HAL_ADC_MspInit+0x80>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a0e      	ldr	r2, [pc, #56]	; (8001904 <HAL_ADC_MspInit+0x80>)
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <HAL_ADC_MspInit+0x80>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = TEMP1_IN_Pin|TEMP2_IN_Pin;
 80018de:	2303      	movs	r3, #3
 80018e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e2:	2303      	movs	r3, #3
 80018e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4805      	ldr	r0, [pc, #20]	; (8001908 <HAL_ADC_MspInit+0x84>)
 80018f2:	f003 fd09 	bl	8005308 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	; 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40012000 	.word	0x40012000
 8001904:	40023800 	.word	0x40023800
 8001908:	40020800 	.word	0x40020800

0800190c <HAL_CAN_RxFifo0MsgPendingCallback>:
int count = 0;
uint32_t id;
uint8_t state[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <tx_header_bat_bms_ovr>:

void tx_header_bat_bms_ovr()
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
	TxBatBmsOvr.DLC = BAT_BMS_OvrVIEW_DLC;
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <tx_header_bat_bms_ovr+0x34>)
 8001926:	2202      	movs	r2, #2
 8001928:	611a      	str	r2, [r3, #16]
	TxBatBmsOvr.ExtId = 0;
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <tx_header_bat_bms_ovr+0x34>)
 800192c:	2200      	movs	r2, #0
 800192e:	605a      	str	r2, [r3, #4]
	TxBatBmsOvr.IDE = CAN_ID_STD;
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <tx_header_bat_bms_ovr+0x34>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
	TxBatBmsOvr.RTR = CAN_RTR_DATA;
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <tx_header_bat_bms_ovr+0x34>)
 8001938:	2200      	movs	r2, #0
 800193a:	60da      	str	r2, [r3, #12]
	TxBatBmsOvr.StdId = BAT_BMS_OvrVIEW_CANID;
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <tx_header_bat_bms_ovr+0x34>)
 800193e:	4a06      	ldr	r2, [pc, #24]	; (8001958 <tx_header_bat_bms_ovr+0x38>)
 8001940:	601a      	str	r2, [r3, #0]
	TxBatBmsOvr.TransmitGlobalTime = DISABLE;
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <tx_header_bat_bms_ovr+0x34>)
 8001944:	2200      	movs	r2, #0
 8001946:	751a      	strb	r2, [r3, #20]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	200001bc 	.word	0x200001bc
 8001958:	001ff610 	.word	0x001ff610

0800195c <tx_header_bat_bms_ext_temp>:

void tx_header_bat_bms_ext_temp()
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
	TxBatExtTemp.DLC = BAT_BMS_ExtTemp_DLC;
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <tx_header_bat_bms_ext_temp+0x34>)
 8001962:	2204      	movs	r2, #4
 8001964:	611a      	str	r2, [r3, #16]
	TxBatExtTemp.ExtId = 0;
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <tx_header_bat_bms_ext_temp+0x34>)
 8001968:	2200      	movs	r2, #0
 800196a:	605a      	str	r2, [r3, #4]
	TxBatExtTemp.IDE = CAN_ID_STD;
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <tx_header_bat_bms_ext_temp+0x34>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
	TxBatExtTemp.RTR = CAN_RTR_DATA;
 8001972:	4b07      	ldr	r3, [pc, #28]	; (8001990 <tx_header_bat_bms_ext_temp+0x34>)
 8001974:	2200      	movs	r2, #0
 8001976:	60da      	str	r2, [r3, #12]
	TxBatExtTemp.StdId = BAT_BMS_ExtTemp_CANID;
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <tx_header_bat_bms_ext_temp+0x34>)
 800197a:	4a06      	ldr	r2, [pc, #24]	; (8001994 <tx_header_bat_bms_ext_temp+0x38>)
 800197c:	601a      	str	r2, [r3, #0]
	TxBatExtTemp.TransmitGlobalTime = DISABLE;
 800197e:	4b04      	ldr	r3, [pc, #16]	; (8001990 <tx_header_bat_bms_ext_temp+0x34>)
 8001980:	2200      	movs	r2, #0
 8001982:	751a      	strb	r2, [r3, #20]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	200001d4 	.word	0x200001d4
 8001994:	001ff611 	.word	0x001ff611

08001998 <tx_header_bat_gauge_ovr>:

void tx_header_bat_gauge_ovr()
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
	TxBatGaugeOvr.DLC = BAT_GAUGE_OvrVIEW_DLC;
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <tx_header_bat_gauge_ovr+0x34>)
 800199e:	2204      	movs	r2, #4
 80019a0:	611a      	str	r2, [r3, #16]
	TxBatGaugeOvr.ExtId = 0;
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <tx_header_bat_gauge_ovr+0x34>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	605a      	str	r2, [r3, #4]
	TxBatGaugeOvr.IDE = CAN_ID_STD;
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <tx_header_bat_gauge_ovr+0x34>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
	TxBatGaugeOvr.RTR = CAN_RTR_DATA;
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <tx_header_bat_gauge_ovr+0x34>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	60da      	str	r2, [r3, #12]
	TxBatGaugeOvr.StdId = BAT_GAUGE_OvrVIEW_CANID;
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <tx_header_bat_gauge_ovr+0x34>)
 80019b6:	4a06      	ldr	r2, [pc, #24]	; (80019d0 <tx_header_bat_gauge_ovr+0x38>)
 80019b8:	601a      	str	r2, [r3, #0]
	TxBatGaugeOvr.TransmitGlobalTime = DISABLE;
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <tx_header_bat_gauge_ovr+0x34>)
 80019bc:	2200      	movs	r2, #0
 80019be:	751a      	strb	r2, [r3, #20]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	200001ec 	.word	0x200001ec
 80019d0:	001ff810 	.word	0x001ff810

080019d4 <tx_header_bat_gauge_Vit>:

void tx_header_bat_gauge_Vit()
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
	TxBatGaugeVit.DLC = BAT_GAUGE_ViT_DLC;
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <tx_header_bat_gauge_Vit+0x34>)
 80019da:	2206      	movs	r2, #6
 80019dc:	611a      	str	r2, [r3, #16]
	TxBatGaugeVit.ExtId = 0;
 80019de:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <tx_header_bat_gauge_Vit+0x34>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	605a      	str	r2, [r3, #4]
	TxBatGaugeVit.IDE = CAN_ID_STD;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <tx_header_bat_gauge_Vit+0x34>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
	TxBatGaugeVit.RTR = CAN_RTR_DATA;
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <tx_header_bat_gauge_Vit+0x34>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	60da      	str	r2, [r3, #12]
	TxBatGaugeVit.StdId = BAT_GAUGE_ViT_CANID;
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <tx_header_bat_gauge_Vit+0x34>)
 80019f2:	4a06      	ldr	r2, [pc, #24]	; (8001a0c <tx_header_bat_gauge_Vit+0x38>)
 80019f4:	601a      	str	r2, [r3, #0]
	TxBatGaugeVit.TransmitGlobalTime = DISABLE;
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <tx_header_bat_gauge_Vit+0x34>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	751a      	strb	r2, [r3, #20]
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000204 	.word	0x20000204
 8001a0c:	001ff820 	.word	0x001ff820

08001a10 <tx_header_bat_brickA_Vit>:

void tx_header_bat_brickA_Vit()
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	TxBrickAViT.DLC = BAT_AFE_vBRICK_A_DLC;
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <tx_header_bat_brickA_Vit+0x34>)
 8001a16:	2208      	movs	r2, #8
 8001a18:	611a      	str	r2, [r3, #16]
	TxBrickAViT.ExtId = 0;
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <tx_header_bat_brickA_Vit+0x34>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	605a      	str	r2, [r3, #4]
	TxBrickAViT.IDE = CAN_ID_STD;
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <tx_header_bat_brickA_Vit+0x34>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
	TxBrickAViT.RTR = CAN_RTR_DATA;
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <tx_header_bat_brickA_Vit+0x34>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	60da      	str	r2, [r3, #12]
	TxBrickAViT.StdId = BAT_AFE_vBRICK_A_CANID;
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <tx_header_bat_brickA_Vit+0x34>)
 8001a2e:	4a06      	ldr	r2, [pc, #24]	; (8001a48 <tx_header_bat_brickA_Vit+0x38>)
 8001a30:	601a      	str	r2, [r3, #0]
	TxBrickAViT.TransmitGlobalTime = DISABLE;
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <tx_header_bat_brickA_Vit+0x34>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	751a      	strb	r2, [r3, #20]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	2000021c 	.word	0x2000021c
 8001a48:	001ff710 	.word	0x001ff710

08001a4c <tx_header_bat_brickB_Vit>:

void tx_header_bat_brickB_Vit()
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
	TxBrickBViT.DLC = BAT_AFE_vBRICK_B_DLC;
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <tx_header_bat_brickB_Vit+0x34>)
 8001a52:	2208      	movs	r2, #8
 8001a54:	611a      	str	r2, [r3, #16]
	TxBrickBViT.ExtId = 0;
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <tx_header_bat_brickB_Vit+0x34>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	605a      	str	r2, [r3, #4]
	TxBrickBViT.IDE = CAN_ID_STD;
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <tx_header_bat_brickB_Vit+0x34>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
	TxBrickBViT.RTR = CAN_RTR_DATA;
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <tx_header_bat_brickB_Vit+0x34>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
	TxBrickBViT.StdId = BAT_AFE_vBRICK_B_CANID;
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <tx_header_bat_brickB_Vit+0x34>)
 8001a6a:	4a06      	ldr	r2, [pc, #24]	; (8001a84 <tx_header_bat_brickB_Vit+0x38>)
 8001a6c:	601a      	str	r2, [r3, #0]
	TxBrickBViT.TransmitGlobalTime = DISABLE;
 8001a6e:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <tx_header_bat_brickB_Vit+0x34>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	751a      	strb	r2, [r3, #20]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000234 	.word	0x20000234
 8001a84:	001ff711 	.word	0x001ff711

08001a88 <tx_header_bat_brickC_Vit>:

void tx_header_bat_brickC_Vit()
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
	TxBrickCViT.DLC = BAT_AFE_vBRICK_C_DLC;
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <tx_header_bat_brickC_Vit+0x34>)
 8001a8e:	2208      	movs	r2, #8
 8001a90:	611a      	str	r2, [r3, #16]
	TxBrickCViT.ExtId = 0;
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <tx_header_bat_brickC_Vit+0x34>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	605a      	str	r2, [r3, #4]
	TxBrickCViT.IDE = CAN_ID_STD;
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <tx_header_bat_brickC_Vit+0x34>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
	TxBrickCViT.RTR = CAN_RTR_DATA;
 8001a9e:	4b07      	ldr	r3, [pc, #28]	; (8001abc <tx_header_bat_brickC_Vit+0x34>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	60da      	str	r2, [r3, #12]
	TxBrickCViT.StdId = BAT_AFE_vBRICK_C_CANID;
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <tx_header_bat_brickC_Vit+0x34>)
 8001aa6:	4a06      	ldr	r2, [pc, #24]	; (8001ac0 <tx_header_bat_brickC_Vit+0x38>)
 8001aa8:	601a      	str	r2, [r3, #0]
	TxBrickCViT.TransmitGlobalTime = DISABLE;
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <tx_header_bat_brickC_Vit+0x34>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	751a      	strb	r2, [r3, #20]
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	2000024c 	.word	0x2000024c
 8001ac0:	001ff712 	.word	0x001ff712

08001ac4 <tx_header_bat_brickD_vit>:

void tx_header_bat_brickD_vit()
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
	TxBrickDViT.DLC = BAT_AFE_vBRICK_D_DLC;
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <tx_header_bat_brickD_vit+0x34>)
 8001aca:	2204      	movs	r2, #4
 8001acc:	611a      	str	r2, [r3, #16]
	TxBrickDViT.ExtId = 0;
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <tx_header_bat_brickD_vit+0x34>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	605a      	str	r2, [r3, #4]
	TxBrickDViT.IDE = CAN_ID_STD;
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <tx_header_bat_brickD_vit+0x34>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
	TxBrickDViT.RTR = CAN_RTR_DATA;
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <tx_header_bat_brickD_vit+0x34>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
	TxBrickDViT.StdId = BAT_AFE_vBRICK_D_CANID;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <tx_header_bat_brickD_vit+0x34>)
 8001ae2:	4a06      	ldr	r2, [pc, #24]	; (8001afc <tx_header_bat_brickD_vit+0x38>)
 8001ae4:	601a      	str	r2, [r3, #0]
	TxBrickDViT.TransmitGlobalTime = DISABLE;
 8001ae6:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <tx_header_bat_brickD_vit+0x34>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	751a      	strb	r2, [r3, #20]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000264 	.word	0x20000264
 8001afc:	001ff713 	.word	0x001ff713

08001b00 <rx_header_fcu_state>:

void rx_header_fcu_state()
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
	RxHeader.DLC = 8;
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <rx_header_fcu_state+0x2c>)
 8001b06:	2208      	movs	r2, #8
 8001b08:	611a      	str	r2, [r3, #16]
	RxHeader.ExtId = 0;
 8001b0a:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <rx_header_fcu_state+0x2c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	605a      	str	r2, [r3, #4]
	RxHeader.IDE = CAN_ID_STD;
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <rx_header_fcu_state+0x2c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_REMOTE;
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <rx_header_fcu_state+0x2c>)
 8001b18:	2202      	movs	r2, #2
 8001b1a:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = 0x00;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <rx_header_fcu_state+0x2c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	2000027c 	.word	0x2000027c

08001b30 <set_filter_config>:

void set_filter_config()
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <set_filter_config+0x54>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
	filterConfig.FilterActivation = ENABLE;
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <set_filter_config+0x54>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	621a      	str	r2, [r3, #32]
	filterConfig.FilterBank = 2;
 8001b40:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <set_filter_config+0x54>)
 8001b42:	2202      	movs	r2, #2
 8001b44:	615a      	str	r2, [r3, #20]
	filterConfig.FilterIdLow = 0x0101;
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <set_filter_config+0x54>)
 8001b48:	f240 1201 	movw	r2, #257	; 0x101
 8001b4c:	605a      	str	r2, [r3, #4]
	filterConfig.FilterIdHigh = 0x0000;
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <set_filter_config+0x54>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
	filterConfig.FilterMaskIdLow = 0x1101;
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <set_filter_config+0x54>)
 8001b56:	f241 1201 	movw	r2, #4353	; 0x1101
 8001b5a:	60da      	str	r2, [r3, #12]
	filterConfig.FilterMaskIdHigh = 0x1111;
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <set_filter_config+0x54>)
 8001b5e:	f241 1211 	movw	r2, #4369	; 0x1111
 8001b62:	609a      	str	r2, [r3, #8]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <set_filter_config+0x54>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <set_filter_config+0x54>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	61da      	str	r2, [r3, #28]
	filterConfig.SlaveStartFilterBank = 3;
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <set_filter_config+0x54>)
 8001b72:	2203      	movs	r2, #3
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 8001b76:	4903      	ldr	r1, [pc, #12]	; (8001b84 <set_filter_config+0x54>)
 8001b78:	4803      	ldr	r0, [pc, #12]	; (8001b88 <set_filter_config+0x58>)
 8001b7a:	f002 f81b 	bl	8003bb4 <HAL_CAN_ConfigFilter>
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000150 	.word	0x20000150
 8001b88:	200002ac 	.word	0x200002ac

08001b8c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <MX_CAN1_Init+0x70>)
 8001b92:	4a1b      	ldr	r2, [pc, #108]	; (8001c00 <MX_CAN1_Init+0x74>)
 8001b94:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001b96:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <MX_CAN1_Init+0x70>)
 8001b98:	2205      	movs	r2, #5
 8001b9a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001b9c:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <MX_CAN1_Init+0x70>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <MX_CAN1_Init+0x70>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001ba8:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <MX_CAN1_Init+0x70>)
 8001baa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001bae:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <MX_CAN1_Init+0x70>)
 8001bb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bb6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001bb8:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <MX_CAN1_Init+0x70>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <MX_CAN1_Init+0x70>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <MX_CAN1_Init+0x70>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <MX_CAN1_Init+0x70>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <MX_CAN1_Init+0x70>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <MX_CAN1_Init+0x70>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001bdc:	4807      	ldr	r0, [pc, #28]	; (8001bfc <MX_CAN1_Init+0x70>)
 8001bde:	f001 fd7f 	bl	80036e0 <HAL_CAN_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001be8:	f000 fe36 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  HAL_CAN_Start(&hcan1);
 8001bec:	4803      	ldr	r0, [pc, #12]	; (8001bfc <MX_CAN1_Init+0x70>)
 8001bee:	f002 f92f 	bl	8003e50 <HAL_CAN_Start>
  rx_header_fcu_state();
 8001bf2:	f7ff ff85 	bl	8001b00 <rx_header_fcu_state>

  /* USER CODE END CAN1_Init 2 */

}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200002ac 	.word	0x200002ac
 8001c00:	40006400 	.word	0x40006400

08001c04 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a29      	ldr	r2, [pc, #164]	; (8001cc8 <HAL_CAN_MspInit+0xc4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d14c      	bne.n	8001cc0 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <HAL_CAN_MspInit+0xc8>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	4a27      	ldr	r2, [pc, #156]	; (8001ccc <HAL_CAN_MspInit+0xc8>)
 8001c30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40
 8001c36:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <HAL_CAN_MspInit+0xc8>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <HAL_CAN_MspInit+0xc8>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a20      	ldr	r2, [pc, #128]	; (8001ccc <HAL_CAN_MspInit+0xc8>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_CAN_MspInit+0xc8>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c70:	2309      	movs	r3, #9
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4815      	ldr	r0, [pc, #84]	; (8001cd0 <HAL_CAN_MspInit+0xcc>)
 8001c7c:	f003 fb44 	bl	8005308 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2105      	movs	r1, #5
 8001c84:	2013      	movs	r0, #19
 8001c86:	f002 fe75 	bl	8004974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001c8a:	2013      	movs	r0, #19
 8001c8c:	f002 fe9e 	bl	80049cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2105      	movs	r1, #5
 8001c94:	2014      	movs	r0, #20
 8001c96:	f002 fe6d 	bl	8004974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001c9a:	2014      	movs	r0, #20
 8001c9c:	f002 fe96 	bl	80049cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2105      	movs	r1, #5
 8001ca4:	2015      	movs	r0, #21
 8001ca6:	f002 fe65 	bl	8004974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001caa:	2015      	movs	r0, #21
 8001cac:	f002 fe8e 	bl	80049cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2105      	movs	r1, #5
 8001cb4:	2016      	movs	r0, #22
 8001cb6:	f002 fe5d 	bl	8004974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001cba:	2016      	movs	r0, #22
 8001cbc:	f002 fe86 	bl	80049cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	3728      	adds	r7, #40	; 0x28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40006400 	.word	0x40006400
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020000 	.word	0x40020000

08001cd4 <can_bat_gauge_ovr_write_data>:
  }
}

/* USER CODE BEGIN 1 */
void can_bat_gauge_ovr_write_data(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	tx_header_bat_gauge_ovr();
 8001cd8:	f7ff fe5e 	bl	8001998 <tx_header_bat_gauge_ovr>
	id = Pack_BAT_GAUGE_OvrVIEW_can_codegen(&batGaugeOvr, &canFrame);
 8001cdc:	4909      	ldr	r1, [pc, #36]	; (8001d04 <can_bat_gauge_ovr_write_data+0x30>)
 8001cde:	480a      	ldr	r0, [pc, #40]	; (8001d08 <can_bat_gauge_ovr_write_data+0x34>)
 8001ce0:	f7fe fe6e 	bl	80009c0 <Pack_BAT_GAUGE_OvrVIEW_can_codegen>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4a09      	ldr	r2, [pc, #36]	; (8001d0c <can_bat_gauge_ovr_write_data+0x38>)
 8001ce8:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff810)
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <can_bat_gauge_ovr_write_data+0x38>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a08      	ldr	r2, [pc, #32]	; (8001d10 <can_bat_gauge_ovr_write_data+0x3c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d105      	bne.n	8001d00 <can_bat_gauge_ovr_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBatGaugeOvr, canFrame.Data, &mailbox1Hz);
 8001cf4:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <can_bat_gauge_ovr_write_data+0x40>)
 8001cf6:	4a08      	ldr	r2, [pc, #32]	; (8001d18 <can_bat_gauge_ovr_write_data+0x44>)
 8001cf8:	4908      	ldr	r1, [pc, #32]	; (8001d1c <can_bat_gauge_ovr_write_data+0x48>)
 8001cfa:	4809      	ldr	r0, [pc, #36]	; (8001d20 <can_bat_gauge_ovr_write_data+0x4c>)
 8001cfc:	f002 f8ec 	bl	8003ed8 <HAL_CAN_AddTxMessage>
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000178 	.word	0x20000178
 8001d08:	200001b0 	.word	0x200001b0
 8001d0c:	200002a0 	.word	0x200002a0
 8001d10:	001ff810 	.word	0x001ff810
 8001d14:	20000298 	.word	0x20000298
 8001d18:	2000017d 	.word	0x2000017d
 8001d1c:	200001ec 	.word	0x200001ec
 8001d20:	200002ac 	.word	0x200002ac

08001d24 <can_bat_gauge_vit_write_data>:

void can_bat_gauge_vit_write_data(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
	tx_header_bat_gauge_Vit();
 8001d28:	f7ff fe54 	bl	80019d4 <tx_header_bat_gauge_Vit>
	id = Pack_BAT_GAUGE_ViT_can_codegen(&batGaugeViT, &canFrame);
 8001d2c:	4909      	ldr	r1, [pc, #36]	; (8001d54 <can_bat_gauge_vit_write_data+0x30>)
 8001d2e:	480a      	ldr	r0, [pc, #40]	; (8001d58 <can_bat_gauge_vit_write_data+0x34>)
 8001d30:	f7fe fe92 	bl	8000a58 <Pack_BAT_GAUGE_ViT_can_codegen>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <can_bat_gauge_vit_write_data+0x38>)
 8001d38:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff820)
 8001d3a:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <can_bat_gauge_vit_write_data+0x38>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a08      	ldr	r2, [pc, #32]	; (8001d60 <can_bat_gauge_vit_write_data+0x3c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d105      	bne.n	8001d50 <can_bat_gauge_vit_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBatGaugeVit, canFrame.Data, &mailbox10Hz);
 8001d44:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <can_bat_gauge_vit_write_data+0x40>)
 8001d46:	4a08      	ldr	r2, [pc, #32]	; (8001d68 <can_bat_gauge_vit_write_data+0x44>)
 8001d48:	4908      	ldr	r1, [pc, #32]	; (8001d6c <can_bat_gauge_vit_write_data+0x48>)
 8001d4a:	4809      	ldr	r0, [pc, #36]	; (8001d70 <can_bat_gauge_vit_write_data+0x4c>)
 8001d4c:	f002 f8c4 	bl	8003ed8 <HAL_CAN_AddTxMessage>
}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000178 	.word	0x20000178
 8001d58:	200001b4 	.word	0x200001b4
 8001d5c:	200002a0 	.word	0x200002a0
 8001d60:	001ff820 	.word	0x001ff820
 8001d64:	2000029c 	.word	0x2000029c
 8001d68:	2000017d 	.word	0x2000017d
 8001d6c:	20000204 	.word	0x20000204
 8001d70:	200002ac 	.word	0x200002ac

08001d74 <can_bms_ovr_write_data>:

void can_bms_ovr_write_data(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
	tx_header_bat_bms_ovr();
 8001d78:	f7ff fdd2 	bl	8001920 <tx_header_bat_bms_ovr>
	id = Pack_BAT_BMS_OvrVIEW_can_codegen(&batBmsOvr, &canFrame);
 8001d7c:	4909      	ldr	r1, [pc, #36]	; (8001da4 <can_bms_ovr_write_data+0x30>)
 8001d7e:	480a      	ldr	r0, [pc, #40]	; (8001da8 <can_bms_ovr_write_data+0x34>)
 8001d80:	f7fe fbde 	bl	8000540 <Pack_BAT_BMS_OvrVIEW_can_codegen>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4a09      	ldr	r2, [pc, #36]	; (8001dac <can_bms_ovr_write_data+0x38>)
 8001d88:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff610)
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <can_bms_ovr_write_data+0x38>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a08      	ldr	r2, [pc, #32]	; (8001db0 <can_bms_ovr_write_data+0x3c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d105      	bne.n	8001da0 <can_bms_ovr_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBatBmsOvr, canFrame.Data, &mailbox10Hz);
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <can_bms_ovr_write_data+0x40>)
 8001d96:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <can_bms_ovr_write_data+0x44>)
 8001d98:	4908      	ldr	r1, [pc, #32]	; (8001dbc <can_bms_ovr_write_data+0x48>)
 8001d9a:	4809      	ldr	r0, [pc, #36]	; (8001dc0 <can_bms_ovr_write_data+0x4c>)
 8001d9c:	f002 f89c 	bl	8003ed8 <HAL_CAN_AddTxMessage>
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000178 	.word	0x20000178
 8001da8:	2000018c 	.word	0x2000018c
 8001dac:	200002a0 	.word	0x200002a0
 8001db0:	001ff610 	.word	0x001ff610
 8001db4:	2000029c 	.word	0x2000029c
 8001db8:	2000017d 	.word	0x2000017d
 8001dbc:	200001bc 	.word	0x200001bc
 8001dc0:	200002ac 	.word	0x200002ac

08001dc4 <can_bms_exttemp_write_data>:

void can_bms_exttemp_write_data(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
	tx_header_bat_bms_ext_temp();
 8001dc8:	f7ff fdc8 	bl	800195c <tx_header_bat_bms_ext_temp>
	id = Pack_BAT_BMS_ExtTemp_can_codegen(&batBmsExtTemp, &canFrame);
 8001dcc:	4909      	ldr	r1, [pc, #36]	; (8001df4 <can_bms_exttemp_write_data+0x30>)
 8001dce:	480a      	ldr	r0, [pc, #40]	; (8001df8 <can_bms_exttemp_write_data+0x34>)
 8001dd0:	f7fe fbee 	bl	80005b0 <Pack_BAT_BMS_ExtTemp_can_codegen>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4a09      	ldr	r2, [pc, #36]	; (8001dfc <can_bms_exttemp_write_data+0x38>)
 8001dd8:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff611)
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <can_bms_exttemp_write_data+0x38>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a08      	ldr	r2, [pc, #32]	; (8001e00 <can_bms_exttemp_write_data+0x3c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d105      	bne.n	8001df0 <can_bms_exttemp_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBatExtTemp, canFrame.Data, &mailbox1Hz);
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <can_bms_exttemp_write_data+0x40>)
 8001de6:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <can_bms_exttemp_write_data+0x44>)
 8001de8:	4908      	ldr	r1, [pc, #32]	; (8001e0c <can_bms_exttemp_write_data+0x48>)
 8001dea:	4809      	ldr	r0, [pc, #36]	; (8001e10 <can_bms_exttemp_write_data+0x4c>)
 8001dec:	f002 f874 	bl	8003ed8 <HAL_CAN_AddTxMessage>
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000178 	.word	0x20000178
 8001df8:	20000190 	.word	0x20000190
 8001dfc:	200002a0 	.word	0x200002a0
 8001e00:	001ff611 	.word	0x001ff611
 8001e04:	20000298 	.word	0x20000298
 8001e08:	2000017d 	.word	0x2000017d
 8001e0c:	200001d4 	.word	0x200001d4
 8001e10:	200002ac 	.word	0x200002ac

08001e14 <can_bat_afe_brickA_write_data>:

void can_bat_afe_brickA_write_data(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
	tx_header_bat_brickA_Vit();
 8001e18:	f7ff fdfa 	bl	8001a10 <tx_header_bat_brickA_Vit>
	id = Pack_BAT_AFE_vBRICK_A_can_codegen(&batAfeBrickA, &canFrame);
 8001e1c:	490c      	ldr	r1, [pc, #48]	; (8001e50 <can_bat_afe_brickA_write_data+0x3c>)
 8001e1e:	480d      	ldr	r0, [pc, #52]	; (8001e54 <can_bat_afe_brickA_write_data+0x40>)
 8001e20:	f7fe fc16 	bl	8000650 <Pack_BAT_AFE_vBRICK_A_can_codegen>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4a0c      	ldr	r2, [pc, #48]	; (8001e58 <can_bat_afe_brickA_write_data+0x44>)
 8001e28:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff710)
 8001e2a:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <can_bat_afe_brickA_write_data+0x44>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <can_bat_afe_brickA_write_data+0x48>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d105      	bne.n	8001e40 <can_bat_afe_brickA_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBrickAViT, canFrame.Data, &mailbox1Hz);
 8001e34:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <can_bat_afe_brickA_write_data+0x4c>)
 8001e36:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <can_bat_afe_brickA_write_data+0x50>)
 8001e38:	490b      	ldr	r1, [pc, #44]	; (8001e68 <can_bat_afe_brickA_write_data+0x54>)
 8001e3a:	480c      	ldr	r0, [pc, #48]	; (8001e6c <can_bat_afe_brickA_write_data+0x58>)
 8001e3c:	f002 f84c 	bl	8003ed8 <HAL_CAN_AddTxMessage>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001e40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e44:	480a      	ldr	r0, [pc, #40]	; (8001e70 <can_bat_afe_brickA_write_data+0x5c>)
 8001e46:	f003 fdb5 	bl	80059b4 <HAL_GPIO_TogglePin>
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000178 	.word	0x20000178
 8001e54:	20000194 	.word	0x20000194
 8001e58:	200002a0 	.word	0x200002a0
 8001e5c:	001ff710 	.word	0x001ff710
 8001e60:	20000298 	.word	0x20000298
 8001e64:	2000017d 	.word	0x2000017d
 8001e68:	2000021c 	.word	0x2000021c
 8001e6c:	200002ac 	.word	0x200002ac
 8001e70:	40020400 	.word	0x40020400

08001e74 <can_bat_afe_brickB_write_data>:

void can_bat_afe_brickB_write_data(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	tx_header_bat_brickB_Vit();
 8001e78:	f7ff fde8 	bl	8001a4c <tx_header_bat_brickB_Vit>
	id = Pack_BAT_AFE_vBRICK_B_can_codegen(&batAfeBrickB, &canFrame);
 8001e7c:	4909      	ldr	r1, [pc, #36]	; (8001ea4 <can_bat_afe_brickB_write_data+0x30>)
 8001e7e:	480a      	ldr	r0, [pc, #40]	; (8001ea8 <can_bat_afe_brickB_write_data+0x34>)
 8001e80:	f7fe fc5e 	bl	8000740 <Pack_BAT_AFE_vBRICK_B_can_codegen>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4a09      	ldr	r2, [pc, #36]	; (8001eac <can_bat_afe_brickB_write_data+0x38>)
 8001e88:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff711)
 8001e8a:	4b08      	ldr	r3, [pc, #32]	; (8001eac <can_bat_afe_brickB_write_data+0x38>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <can_bat_afe_brickB_write_data+0x3c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d105      	bne.n	8001ea0 <can_bat_afe_brickB_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBrickBViT, canFrame.Data, &mailbox1Hz);
 8001e94:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <can_bat_afe_brickB_write_data+0x40>)
 8001e96:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <can_bat_afe_brickB_write_data+0x44>)
 8001e98:	4908      	ldr	r1, [pc, #32]	; (8001ebc <can_bat_afe_brickB_write_data+0x48>)
 8001e9a:	4809      	ldr	r0, [pc, #36]	; (8001ec0 <can_bat_afe_brickB_write_data+0x4c>)
 8001e9c:	f002 f81c 	bl	8003ed8 <HAL_CAN_AddTxMessage>
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000178 	.word	0x20000178
 8001ea8:	2000019c 	.word	0x2000019c
 8001eac:	200002a0 	.word	0x200002a0
 8001eb0:	001ff711 	.word	0x001ff711
 8001eb4:	20000298 	.word	0x20000298
 8001eb8:	2000017d 	.word	0x2000017d
 8001ebc:	20000234 	.word	0x20000234
 8001ec0:	200002ac 	.word	0x200002ac

08001ec4 <can_bat_afe_brickC_write_data>:

void can_bat_afe_brickC_write_data(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
	tx_header_bat_brickC_Vit();
 8001ec8:	f7ff fdde 	bl	8001a88 <tx_header_bat_brickC_Vit>
	id = Pack_BAT_AFE_vBRICK_C_can_codegen(&batAfeBrickC, &canFrame);
 8001ecc:	4909      	ldr	r1, [pc, #36]	; (8001ef4 <can_bat_afe_brickC_write_data+0x30>)
 8001ece:	480a      	ldr	r0, [pc, #40]	; (8001ef8 <can_bat_afe_brickC_write_data+0x34>)
 8001ed0:	f7fe fcae 	bl	8000830 <Pack_BAT_AFE_vBRICK_C_can_codegen>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	4a09      	ldr	r2, [pc, #36]	; (8001efc <can_bat_afe_brickC_write_data+0x38>)
 8001ed8:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff712)
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <can_bat_afe_brickC_write_data+0x38>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a08      	ldr	r2, [pc, #32]	; (8001f00 <can_bat_afe_brickC_write_data+0x3c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d105      	bne.n	8001ef0 <can_bat_afe_brickC_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBrickCViT, canFrame.Data, &mailbox1Hz);
 8001ee4:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <can_bat_afe_brickC_write_data+0x40>)
 8001ee6:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <can_bat_afe_brickC_write_data+0x44>)
 8001ee8:	4908      	ldr	r1, [pc, #32]	; (8001f0c <can_bat_afe_brickC_write_data+0x48>)
 8001eea:	4809      	ldr	r0, [pc, #36]	; (8001f10 <can_bat_afe_brickC_write_data+0x4c>)
 8001eec:	f001 fff4 	bl	8003ed8 <HAL_CAN_AddTxMessage>
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000178 	.word	0x20000178
 8001ef8:	200001a4 	.word	0x200001a4
 8001efc:	200002a0 	.word	0x200002a0
 8001f00:	001ff712 	.word	0x001ff712
 8001f04:	20000298 	.word	0x20000298
 8001f08:	2000017d 	.word	0x2000017d
 8001f0c:	2000024c 	.word	0x2000024c
 8001f10:	200002ac 	.word	0x200002ac

08001f14 <can_bat_afe_brickD_write_data>:

void can_bat_afe_brickD_write_data(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
	tx_header_bat_brickD_vit();
 8001f18:	f7ff fdd4 	bl	8001ac4 <tx_header_bat_brickD_vit>
	id = Pack_BAT_AFE_vBRICK_D_can_codegen(&batAfeBrickD, &canFrame);
 8001f1c:	4909      	ldr	r1, [pc, #36]	; (8001f44 <can_bat_afe_brickD_write_data+0x30>)
 8001f1e:	480a      	ldr	r0, [pc, #40]	; (8001f48 <can_bat_afe_brickD_write_data+0x34>)
 8001f20:	f7fe fcfe 	bl	8000920 <Pack_BAT_AFE_vBRICK_D_can_codegen>
 8001f24:	4603      	mov	r3, r0
 8001f26:	4a09      	ldr	r2, [pc, #36]	; (8001f4c <can_bat_afe_brickD_write_data+0x38>)
 8001f28:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff713)
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <can_bat_afe_brickD_write_data+0x38>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a08      	ldr	r2, [pc, #32]	; (8001f50 <can_bat_afe_brickD_write_data+0x3c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d105      	bne.n	8001f40 <can_bat_afe_brickD_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBrickDViT, canFrame.Data, &mailbox1Hz);
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <can_bat_afe_brickD_write_data+0x40>)
 8001f36:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <can_bat_afe_brickD_write_data+0x44>)
 8001f38:	4908      	ldr	r1, [pc, #32]	; (8001f5c <can_bat_afe_brickD_write_data+0x48>)
 8001f3a:	4809      	ldr	r0, [pc, #36]	; (8001f60 <can_bat_afe_brickD_write_data+0x4c>)
 8001f3c:	f001 ffcc 	bl	8003ed8 <HAL_CAN_AddTxMessage>
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000178 	.word	0x20000178
 8001f48:	200001ac 	.word	0x200001ac
 8001f4c:	200002a0 	.word	0x200002a0
 8001f50:	001ff713 	.word	0x001ff713
 8001f54:	20000298 	.word	0x20000298
 8001f58:	2000017d 	.word	0x2000017d
 8001f5c:	20000264 	.word	0x20000264
 8001f60:	200002ac 	.word	0x200002ac

08001f64 <can_fcu_read_data>:

void can_fcu_read_data()
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	set_filter_config();
 8001f68:	f7ff fde2 	bl	8001b30 <set_filter_config>
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, state) == HAL_OK)
 8001f6c:	4b48      	ldr	r3, [pc, #288]	; (8002090 <can_fcu_read_data+0x12c>)
 8001f6e:	4a49      	ldr	r2, [pc, #292]	; (8002094 <can_fcu_read_data+0x130>)
 8001f70:	2100      	movs	r1, #0
 8001f72:	4849      	ldr	r0, [pc, #292]	; (8002098 <can_fcu_read_data+0x134>)
 8001f74:	f002 f8d4 	bl	8004120 <HAL_CAN_GetRxMessage>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f040 8083 	bne.w	8002086 <can_fcu_read_data+0x122>
		{
		id = Unpack_FCU_STATE_REQUEST_can_codegen(&fcuState, &state, 1);
 8001f80:	2201      	movs	r2, #1
 8001f82:	4943      	ldr	r1, [pc, #268]	; (8002090 <can_fcu_read_data+0x12c>)
 8001f84:	4845      	ldr	r0, [pc, #276]	; (800209c <can_fcu_read_data+0x138>)
 8001f86:	f7fe fac5 	bl	8000514 <Unpack_FCU_STATE_REQUEST_can_codegen>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4a44      	ldr	r2, [pc, #272]	; (80020a0 <can_fcu_read_data+0x13c>)
 8001f8e:	6013      	str	r3, [r2, #0]
		switch (state[0]) {
 8001f90:	4b3f      	ldr	r3, [pc, #252]	; (8002090 <can_fcu_read_data+0x12c>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d878      	bhi.n	800208a <can_fcu_read_data+0x126>
 8001f98:	a201      	add	r2, pc, #4	; (adr r2, 8001fa0 <can_fcu_read_data+0x3c>)
 8001f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9e:	bf00      	nop
 8001fa0:	08001fb5 	.word	0x08001fb5
 8001fa4:	08001fdf 	.word	0x08001fdf
 8001fa8:	08002009 	.word	0x08002009
 8001fac:	08002033 	.word	0x08002033
 8001fb0:	0800205d 	.word	0x0800205d
			case 0:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fba:	483a      	ldr	r0, [pc, #232]	; (80020a4 <can_fcu_read_data+0x140>)
 8001fbc:	f003 fcc8 	bl	8005950 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fc6:	4837      	ldr	r0, [pc, #220]	; (80020a4 <can_fcu_read_data+0x140>)
 8001fc8:	f003 fcc2 	bl	8005950 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fd2:	4834      	ldr	r0, [pc, #208]	; (80020a4 <can_fcu_read_data+0x140>)
 8001fd4:	f003 fcbc 	bl	8005950 <HAL_GPIO_WritePin>
				bq76952_FETs_OFF(); // replace with all fets off function call
 8001fd8:	f7fe fe99 	bl	8000d0e <bq76952_FETs_OFF>
				break;
 8001fdc:	e056      	b.n	800208c <can_fcu_read_data+0x128>
			case 1:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fe4:	482f      	ldr	r0, [pc, #188]	; (80020a4 <can_fcu_read_data+0x140>)
 8001fe6:	f003 fcb3 	bl	8005950 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff0:	482c      	ldr	r0, [pc, #176]	; (80020a4 <can_fcu_read_data+0x140>)
 8001ff2:	f003 fcad 	bl	8005950 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ffc:	4829      	ldr	r0, [pc, #164]	; (80020a4 <can_fcu_read_data+0x140>)
 8001ffe:	f003 fca7 	bl	8005950 <HAL_GPIO_WritePin>
				bq76952_FETs_ON(); //replace with all fets on function call
 8002002:	f7fe fe5b 	bl	8000cbc <bq76952_FETs_ON>
				break;
 8002006:	e041      	b.n	800208c <can_fcu_read_data+0x128>
			case 2:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8002008:	2201      	movs	r2, #1
 800200a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800200e:	4825      	ldr	r0, [pc, #148]	; (80020a4 <can_fcu_read_data+0x140>)
 8002010:	f003 fc9e 	bl	8005950 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 8002014:	2200      	movs	r2, #0
 8002016:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800201a:	4822      	ldr	r0, [pc, #136]	; (80020a4 <can_fcu_read_data+0x140>)
 800201c:	f003 fc98 	bl	8005950 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 8002020:	2200      	movs	r2, #0
 8002022:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002026:	481f      	ldr	r0, [pc, #124]	; (80020a4 <can_fcu_read_data+0x140>)
 8002028:	f003 fc92 	bl	8005950 <HAL_GPIO_WritePin>
				bq76952_AFE_reset();// replace with afe reset function call
 800202c:	f7fe fed2 	bl	8000dd4 <bq76952_AFE_reset>
				break;
 8002030:	e02c      	b.n	800208c <can_fcu_read_data+0x128>
			case 3:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8002032:	2200      	movs	r2, #0
 8002034:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002038:	481a      	ldr	r0, [pc, #104]	; (80020a4 <can_fcu_read_data+0x140>)
 800203a:	f003 fc89 	bl	8005950 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 800203e:	2200      	movs	r2, #0
 8002040:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002044:	4817      	ldr	r0, [pc, #92]	; (80020a4 <can_fcu_read_data+0x140>)
 8002046:	f003 fc83 	bl	8005950 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002050:	4814      	ldr	r0, [pc, #80]	; (80020a4 <can_fcu_read_data+0x140>)
 8002052:	f003 fc7d 	bl	8005950 <HAL_GPIO_WritePin>
				bq76952_Charge();
 8002056:	f7fe fe79 	bl	8000d4c <bq76952_Charge>
				break;
 800205a:	e017      	b.n	800208c <can_fcu_read_data+0x128>
			case 4:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 800205c:	2201      	movs	r2, #1
 800205e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002062:	4810      	ldr	r0, [pc, #64]	; (80020a4 <can_fcu_read_data+0x140>)
 8002064:	f003 fc74 	bl	8005950 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
 8002068:	2201      	movs	r2, #1
 800206a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800206e:	480d      	ldr	r0, [pc, #52]	; (80020a4 <can_fcu_read_data+0x140>)
 8002070:	f003 fc6e 	bl	8005950 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 8002074:	2201      	movs	r2, #1
 8002076:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800207a:	480a      	ldr	r0, [pc, #40]	; (80020a4 <can_fcu_read_data+0x140>)
 800207c:	f003 fc68 	bl	8005950 <HAL_GPIO_WritePin>
				bq76952_Discharge();
 8002080:	f7fe fe86 	bl	8000d90 <bq76952_Discharge>
				break;
 8002084:	e002      	b.n	800208c <can_fcu_read_data+0x128>
			default:
				break;
		}
		}
 8002086:	bf00      	nop
 8002088:	e000      	b.n	800208c <can_fcu_read_data+0x128>
				break;
 800208a:	bf00      	nop
}
 800208c:	bf00      	nop
 800208e:	bd80      	pop	{r7, pc}
 8002090:	200002a4 	.word	0x200002a4
 8002094:	2000027c 	.word	0x2000027c
 8002098:	200002ac 	.word	0x200002ac
 800209c:	20000188 	.word	0x20000188
 80020a0:	200002a0 	.word	0x200002a0
 80020a4:	40020400 	.word	0x40020400

080020a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <MX_DMA_Init+0x88>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a1e      	ldr	r2, [pc, #120]	; (8002130 <MX_DMA_Init+0x88>)
 80020b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <MX_DMA_Init+0x88>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c6:	607b      	str	r3, [r7, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	603b      	str	r3, [r7, #0]
 80020ce:	4b18      	ldr	r3, [pc, #96]	; (8002130 <MX_DMA_Init+0x88>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a17      	ldr	r2, [pc, #92]	; (8002130 <MX_DMA_Init+0x88>)
 80020d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <MX_DMA_Init+0x88>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2105      	movs	r1, #5
 80020ea:	200b      	movs	r0, #11
 80020ec:	f002 fc42 	bl	8004974 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80020f0:	200b      	movs	r0, #11
 80020f2:	f002 fc6b 	bl	80049cc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2105      	movs	r1, #5
 80020fa:	2011      	movs	r0, #17
 80020fc:	f002 fc3a 	bl	8004974 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002100:	2011      	movs	r0, #17
 8002102:	f002 fc63 	bl	80049cc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2105      	movs	r1, #5
 800210a:	2038      	movs	r0, #56	; 0x38
 800210c:	f002 fc32 	bl	8004974 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002110:	2038      	movs	r0, #56	; 0x38
 8002112:	f002 fc5b 	bl	80049cc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2105      	movs	r1, #5
 800211a:	203b      	movs	r0, #59	; 0x3b
 800211c:	f002 fc2a 	bl	8004974 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002120:	203b      	movs	r0, #59	; 0x3b
 8002122:	f002 fc53 	bl	80049cc <HAL_NVIC_EnableIRQ>

}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800

08002134 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4a07      	ldr	r2, [pc, #28]	; (8002160 <vApplicationGetIdleTaskMemory+0x2c>)
 8002144:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	4a06      	ldr	r2, [pc, #24]	; (8002164 <vApplicationGetIdleTaskMemory+0x30>)
 800214a:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2280      	movs	r2, #128	; 0x80
 8002150:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000324 	.word	0x20000324
 8002164:	200003d8 	.word	0x200003d8

08002168 <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8002168:	b5b0      	push	{r4, r5, r7, lr}
 800216a:	b096      	sub	sp, #88	; 0x58
 800216c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */
	can_tx_queue = xQueueCreate(10, sizeof(uint32_t)); //to be used to queue the messages being sent on CAN line
 800216e:	2200      	movs	r2, #0
 8002170:	2104      	movs	r1, #4
 8002172:	200a      	movs	r0, #10
 8002174:	f007 fdce 	bl	8009d14 <xQueueGenericCreate>
 8002178:	4603      	mov	r3, r0
 800217a:	4a27      	ldr	r2, [pc, #156]	; (8002218 <MX_FREERTOS_Init+0xb0>)
 800217c:	6013      	str	r3, [r2, #0]
													//only 3 messages can be transmitted at once at the hardware level.
	can_rx_queue = xQueueCreate(10, sizeof(uint32_t));
 800217e:	2200      	movs	r2, #0
 8002180:	2104      	movs	r1, #4
 8002182:	200a      	movs	r0, #10
 8002184:	f007 fdc6 	bl	8009d14 <xQueueGenericCreate>
 8002188:	4603      	mov	r3, r0
 800218a:	4a24      	ldr	r2, [pc, #144]	; (800221c <MX_FREERTOS_Init+0xb4>)
 800218c:	6013      	str	r3, [r2, #0]


	if(can_tx_queue != NULL)
 800218e:	4b22      	ldr	r3, [pc, #136]	; (8002218 <MX_FREERTOS_Init+0xb0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d005      	beq.n	80021a2 <MX_FREERTOS_Init+0x3a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8002196:	2201      	movs	r2, #1
 8002198:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800219c:	4820      	ldr	r0, [pc, #128]	; (8002220 <MX_FREERTOS_Init+0xb8>)
 800219e:	f003 fbd7 	bl	8005950 <HAL_GPIO_WritePin>
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* definition and creation of APP_1HZ_TASK */
    osThreadDef(APP_1HZ_TASK, app_task_1Hz, osPriorityNormal, 0, 128);
 80021a2:	4b20      	ldr	r3, [pc, #128]	; (8002224 <MX_FREERTOS_Init+0xbc>)
 80021a4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80021a8:	461d      	mov	r5, r3
 80021aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    APP_1HZ_TASKHandle = osThreadCreate(osThread(APP_1HZ_TASK), NULL);
 80021b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f007 fc41 	bl	8009a44 <osThreadCreate>
 80021c2:	4603      	mov	r3, r0
 80021c4:	4a18      	ldr	r2, [pc, #96]	; (8002228 <MX_FREERTOS_Init+0xc0>)
 80021c6:	6013      	str	r3, [r2, #0]

  /* definition and creation of APP_10HZ_TASK */
  osThreadDef(APP_10HZ_TASK, app_task_10hz, osPriorityNormal, 0, 128);
 80021c8:	4b18      	ldr	r3, [pc, #96]	; (800222c <MX_FREERTOS_Init+0xc4>)
 80021ca:	f107 0420 	add.w	r4, r7, #32
 80021ce:	461d      	mov	r5, r3
 80021d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_10HZ_TASKHandle = osThreadCreate(osThread(APP_10HZ_TASK), NULL);
 80021dc:	f107 0320 	add.w	r3, r7, #32
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f007 fc2e 	bl	8009a44 <osThreadCreate>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4a11      	ldr	r2, [pc, #68]	; (8002230 <MX_FREERTOS_Init+0xc8>)
 80021ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of APP_100HZ_TASK */
  osThreadDef(APP_100HZ_TASK, app_task_100hz, osPriorityNormal, 0, 128);
 80021ee:	4b11      	ldr	r3, [pc, #68]	; (8002234 <MX_FREERTOS_Init+0xcc>)
 80021f0:	1d3c      	adds	r4, r7, #4
 80021f2:	461d      	mov	r5, r3
 80021f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_100HZ_TASKHandle = osThreadCreate(osThread(APP_100HZ_TASK), NULL);
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	2100      	movs	r1, #0
 8002204:	4618      	mov	r0, r3
 8002206:	f007 fc1d 	bl	8009a44 <osThreadCreate>
 800220a:	4603      	mov	r3, r0
 800220c:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <MX_FREERTOS_Init+0xd0>)
 800220e:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    /* USER CODE END RTOS_THREADS */
}
 8002210:	bf00      	nop
 8002212:	3758      	adds	r7, #88	; 0x58
 8002214:	46bd      	mov	sp, r7
 8002216:	bdb0      	pop	{r4, r5, r7, pc}
 8002218:	2000031c 	.word	0x2000031c
 800221c:	20000320 	.word	0x20000320
 8002220:	40020400 	.word	0x40020400
 8002224:	0800bcc0 	.word	0x0800bcc0
 8002228:	20000310 	.word	0x20000310
 800222c:	0800bcdc 	.word	0x0800bcdc
 8002230:	20000314 	.word	0x20000314
 8002234:	0800bcf8 	.word	0x0800bcf8
 8002238:	20000318 	.word	0x20000318

0800223c <app_task_1Hz>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_app_task_1Hz */
void app_task_1Hz(void const *argument)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN app_task_1Hz */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 1000;
 8002244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002248:	613b      	str	r3, [r7, #16]
    xLastWakeTime = xTaskGetTickCount();
 800224a:	f008 fc05 	bl	800aa58 <xTaskGetTickCount>
 800224e:	4603      	mov	r3, r0
 8002250:	60fb      	str	r3, [r7, #12]
    /* Infinite loop */
    for (;;)
    {
    	//xSemaphoreTake(can_task_semaphore_handle, 10);
    	for(int i = 1;i<7;i++)
 8002252:	2301      	movs	r3, #1
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	e00c      	b.n	8002272 <app_task_1Hz+0x36>
    	{
    		xQueueSend(can_tx_queue, &can_IDs[i], (TickType_t)10);
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <app_task_1Hz+0x4c>)
 800225a:	6818      	ldr	r0, [r3, #0]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4a0a      	ldr	r2, [pc, #40]	; (800228c <app_task_1Hz+0x50>)
 8002262:	1899      	adds	r1, r3, r2
 8002264:	2300      	movs	r3, #0
 8002266:	220a      	movs	r2, #10
 8002268:	f007 fdae 	bl	8009dc8 <xQueueGenericSend>
    	for(int i = 1;i<7;i++)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	3301      	adds	r3, #1
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b06      	cmp	r3, #6
 8002276:	ddef      	ble.n	8002258 <app_task_1Hz+0x1c>
    	}
    	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	6939      	ldr	r1, [r7, #16]
 800227e:	4618      	mov	r0, r3
 8002280:	f008 fa58 	bl	800a734 <vTaskDelayUntil>
    	for(int i = 1;i<7;i++)
 8002284:	e7e5      	b.n	8002252 <app_task_1Hz+0x16>
 8002286:	bf00      	nop
 8002288:	2000031c 	.word	0x2000031c
 800228c:	20000020 	.word	0x20000020

08002290 <app_task_10hz>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_app_task_10hz */
void app_task_10hz(void const *argument)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN app_task_10hz */
    TickType_t xLastWakeTime;
    uint16_t counter = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	82fb      	strh	r3, [r7, #22]
    const TickType_t xFrequency = 100;
 800229c:	2364      	movs	r3, #100	; 0x64
 800229e:	613b      	str	r3, [r7, #16]
    xLastWakeTime = xTaskGetTickCount();
 80022a0:	f008 fbda 	bl	800aa58 <xTaskGetTickCount>
 80022a4:	4603      	mov	r3, r0
 80022a6:	60fb      	str	r3, [r7, #12]
    /* Infinite loop */
    for (;;)
    {
    //xSemaphoreTake(can_task_semaphore_handle, 1000);
    if(counter%5==0)
 80022a8:	8afa      	ldrh	r2, [r7, #22]
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <app_task_10hz+0x64>)
 80022ac:	fba3 1302 	umull	r1, r3, r3, r2
 80022b0:	0899      	lsrs	r1, r3, #2
 80022b2:	460b      	mov	r3, r1
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <app_task_10hz+0x34>
    	can_fcu_read_data();
 80022c0:	f7ff fe50 	bl	8001f64 <can_fcu_read_data>
    counter++;
 80022c4:	8afb      	ldrh	r3, [r7, #22]
 80022c6:	3301      	adds	r3, #1
 80022c8:	82fb      	strh	r3, [r7, #22]
    xQueueSend(can_tx_queue, &can_IDs[0],(TickType_t)10); //GaugeVit
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <app_task_10hz+0x68>)
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	2300      	movs	r3, #0
 80022d0:	220a      	movs	r2, #10
 80022d2:	490a      	ldr	r1, [pc, #40]	; (80022fc <app_task_10hz+0x6c>)
 80022d4:	f007 fd78 	bl	8009dc8 <xQueueGenericSend>
    xQueueSend(can_tx_queue, &can_IDs[7],(TickType_t)10); //BMS Ovr
 80022d8:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <app_task_10hz+0x68>)
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	2300      	movs	r3, #0
 80022de:	220a      	movs	r2, #10
 80022e0:	4907      	ldr	r1, [pc, #28]	; (8002300 <app_task_10hz+0x70>)
 80022e2:	f007 fd71 	bl	8009dc8 <xQueueGenericSend>
    vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80022e6:	f107 030c 	add.w	r3, r7, #12
 80022ea:	6939      	ldr	r1, [r7, #16]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f008 fa21 	bl	800a734 <vTaskDelayUntil>
    if(counter%5==0)
 80022f2:	e7d9      	b.n	80022a8 <app_task_10hz+0x18>
 80022f4:	cccccccd 	.word	0xcccccccd
 80022f8:	2000031c 	.word	0x2000031c
 80022fc:	20000020 	.word	0x20000020
 8002300:	2000003c 	.word	0x2000003c

08002304 <app_task_100hz>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_app_task_100hz */
void app_task_100hz(void const *argument)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN app_task_100hz */
    TickType_t xLastWakeTime;
    uint32_t* pReceive;
    const TickType_t xFrequency = 10;
 800230c:	230a      	movs	r3, #10
 800230e:	613b      	str	r3, [r7, #16]
    xLastWakeTime = xTaskGetTickCount();
 8002310:	f008 fba2 	bl	800aa58 <xTaskGetTickCount>
 8002314:	4603      	mov	r3, r0
 8002316:	60fb      	str	r3, [r7, #12]
    /* Infinite loop */
    for (;;)
    {
    		if(uxQueueMessagesWaiting(can_tx_queue) > 0)
 8002318:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <app_task_100hz+0x8c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f007 ff31 	bl	800a184 <uxQueueMessagesWaiting>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d02b      	beq.n	8002380 <app_task_100hz+0x7c>
    		{
    		//xSemaphoreTake(can_task_semaphore_handle, 10);
    		if(xQueueReceive(can_tx_queue, &pReceive, 100) == pdPASS)
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <app_task_100hz+0x8c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f107 0108 	add.w	r1, r7, #8
 8002330:	2264      	movs	r2, #100	; 0x64
 8002332:	4618      	mov	r0, r3
 8002334:	f007 fe46 	bl	8009fc4 <xQueueReceive>
 8002338:	4603      	mov	r3, r0
 800233a:	2b01      	cmp	r3, #1
 800233c:	d120      	bne.n	8002380 <app_task_100hz+0x7c>
    		{
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800233e:	2201      	movs	r2, #1
 8002340:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002344:	4813      	ldr	r0, [pc, #76]	; (8002394 <app_task_100hz+0x90>)
 8002346:	f003 fb03 	bl	8005950 <HAL_GPIO_WritePin>
    		for(int i=0;i<9;i++)
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e014      	b.n	800237a <app_task_100hz+0x76>
    			{
    				if(pReceive == can_IDs[i])
 8002350:	4a11      	ldr	r2, [pc, #68]	; (8002398 <app_task_100hz+0x94>)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002358:	461a      	mov	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	429a      	cmp	r2, r3
 800235e:	d109      	bne.n	8002374 <app_task_100hz+0x70>
    				{
    					(func_ptrs[i])();
 8002360:	4a0e      	ldr	r2, [pc, #56]	; (800239c <app_task_100hz+0x98>)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002368:	4798      	blx	r3
    					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800236a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800236e:	4809      	ldr	r0, [pc, #36]	; (8002394 <app_task_100hz+0x90>)
 8002370:	f003 fb20 	bl	80059b4 <HAL_GPIO_TogglePin>
    		for(int i=0;i<9;i++)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	3301      	adds	r3, #1
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2b08      	cmp	r3, #8
 800237e:	dde7      	ble.n	8002350 <app_task_100hz+0x4c>
    				}
    			}
    		}
    		}
    	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	6939      	ldr	r1, [r7, #16]
 8002386:	4618      	mov	r0, r3
 8002388:	f008 f9d4 	bl	800a734 <vTaskDelayUntil>
    		if(uxQueueMessagesWaiting(can_tx_queue) > 0)
 800238c:	e7c4      	b.n	8002318 <app_task_100hz+0x14>
 800238e:	bf00      	nop
 8002390:	2000031c 	.word	0x2000031c
 8002394:	40020400 	.word	0x40020400
 8002398:	20000020 	.word	0x20000020
 800239c:	20000000 	.word	0x20000000

080023a0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	; 0x28
 80023a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	60da      	str	r2, [r3, #12]
 80023b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	4b62      	ldr	r3, [pc, #392]	; (8002544 <MX_GPIO_Init+0x1a4>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a61      	ldr	r2, [pc, #388]	; (8002544 <MX_GPIO_Init+0x1a4>)
 80023c0:	f043 0304 	orr.w	r3, r3, #4
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b5f      	ldr	r3, [pc, #380]	; (8002544 <MX_GPIO_Init+0x1a4>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	4b5b      	ldr	r3, [pc, #364]	; (8002544 <MX_GPIO_Init+0x1a4>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a5a      	ldr	r2, [pc, #360]	; (8002544 <MX_GPIO_Init+0x1a4>)
 80023dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b58      	ldr	r3, [pc, #352]	; (8002544 <MX_GPIO_Init+0x1a4>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	4b54      	ldr	r3, [pc, #336]	; (8002544 <MX_GPIO_Init+0x1a4>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a53      	ldr	r2, [pc, #332]	; (8002544 <MX_GPIO_Init+0x1a4>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b51      	ldr	r3, [pc, #324]	; (8002544 <MX_GPIO_Init+0x1a4>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	4b4d      	ldr	r3, [pc, #308]	; (8002544 <MX_GPIO_Init+0x1a4>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a4c      	ldr	r2, [pc, #304]	; (8002544 <MX_GPIO_Init+0x1a4>)
 8002414:	f043 0302 	orr.w	r3, r3, #2
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b4a      	ldr	r3, [pc, #296]	; (8002544 <MX_GPIO_Init+0x1a4>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	4b46      	ldr	r3, [pc, #280]	; (8002544 <MX_GPIO_Init+0x1a4>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a45      	ldr	r2, [pc, #276]	; (8002544 <MX_GPIO_Init+0x1a4>)
 8002430:	f043 0308 	orr.w	r3, r3, #8
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b43      	ldr	r3, [pc, #268]	; (8002544 <MX_GPIO_Init+0x1a4>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_SHUT_Pin|AFE_WAKE_Pin, GPIO_PIN_RESET);
 8002442:	2200      	movs	r2, #0
 8002444:	2106      	movs	r1, #6
 8002446:	4840      	ldr	r0, [pc, #256]	; (8002548 <MX_GPIO_Init+0x1a8>)
 8002448:	f003 fa82 	bl	8005950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SP1_CS_Pin|DFETOFF_OUT_Pin|LED3_OUT_Pin|LED2_OUT_Pin
 800244c:	2200      	movs	r2, #0
 800244e:	f44f 611f 	mov.w	r1, #2544	; 0x9f0
 8002452:	483e      	ldr	r0, [pc, #248]	; (800254c <MX_GPIO_Init+0x1ac>)
 8002454:	f003 fa7c 	bl	8005950 <HAL_GPIO_WritePin>
                          |LED1_OUT_Pin|PWR5V_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DDSG_IN_Pin|LED5_OUT_BLUE_Pin|LED5_OUT_GREEN_Pin|LED5_OUT_RED_Pin
 8002458:	2200      	movs	r2, #0
 800245a:	f24f 0104 	movw	r1, #61444	; 0xf004
 800245e:	483c      	ldr	r0, [pc, #240]	; (8002550 <MX_GPIO_Init+0x1b0>)
 8002460:	f003 fa76 	bl	8005950 <HAL_GPIO_WritePin>
                          |LED4_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 PC2
                           PC3 PC9 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2
 8002464:	f24f 630c 	movw	r3, #62988	; 0xf60c
 8002468:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800246a:	2303      	movs	r3, #3
 800246c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	4619      	mov	r1, r3
 8002478:	4834      	ldr	r0, [pc, #208]	; (800254c <MX_GPIO_Init+0x1ac>)
 800247a:	f002 ff45 	bl	8005308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 800247e:	f248 1319 	movw	r3, #33049	; 0x8119
 8002482:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002484:	2303      	movs	r3, #3
 8002486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	4619      	mov	r1, r3
 8002492:	482d      	ldr	r0, [pc, #180]	; (8002548 <MX_GPIO_Init+0x1a8>)
 8002494:	f002 ff38 	bl	8005308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RST_SHUT_Pin|AFE_WAKE_Pin;
 8002498:	2306      	movs	r3, #6
 800249a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249c:	2301      	movs	r3, #1
 800249e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a4:	2300      	movs	r3, #0
 80024a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	4619      	mov	r1, r3
 80024ae:	4826      	ldr	r0, [pc, #152]	; (8002548 <MX_GPIO_Init+0x1a8>)
 80024b0:	f002 ff2a 	bl	8005308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = SP1_CS_Pin|DFETOFF_OUT_Pin|LED3_OUT_Pin|LED2_OUT_Pin
 80024b4:	f44f 631f 	mov.w	r3, #2544	; 0x9f0
 80024b8:	617b      	str	r3, [r7, #20]
                          |LED1_OUT_Pin|PWR5V_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ba:	2301      	movs	r3, #1
 80024bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2300      	movs	r3, #0
 80024c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c6:	f107 0314 	add.w	r3, r7, #20
 80024ca:	4619      	mov	r1, r3
 80024cc:	481f      	ldr	r0, [pc, #124]	; (800254c <MX_GPIO_Init+0x1ac>)
 80024ce:	f002 ff1b 	bl	8005308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AFE_ALERT_IN_Pin|DCHG_IN_Pin;
 80024d2:	2303      	movs	r3, #3
 80024d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024de:	f107 0314 	add.w	r3, r7, #20
 80024e2:	4619      	mov	r1, r3
 80024e4:	481a      	ldr	r0, [pc, #104]	; (8002550 <MX_GPIO_Init+0x1b0>)
 80024e6:	f002 ff0f 	bl	8005308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DDSG_IN_Pin|LED5_OUT_BLUE_Pin|LED5_OUT_GREEN_Pin|LED5_OUT_RED_Pin
 80024ea:	f24f 0304 	movw	r3, #61444	; 0xf004
 80024ee:	617b      	str	r3, [r7, #20]
                          |LED4_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f0:	2301      	movs	r3, #1
 80024f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f8:	2300      	movs	r3, #0
 80024fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	4619      	mov	r1, r3
 8002502:	4813      	ldr	r0, [pc, #76]	; (8002550 <MX_GPIO_Init+0x1b0>)
 8002504:	f002 ff00 	bl	8005308 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 8002508:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 800250c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800250e:	2303      	movs	r3, #3
 8002510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4619      	mov	r1, r3
 800251c:	480c      	ldr	r0, [pc, #48]	; (8002550 <MX_GPIO_Init+0x1b0>)
 800251e:	f002 fef3 	bl	8005308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_IN_Pin;
 8002522:	2304      	movs	r3, #4
 8002524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_IN_GPIO_Port, &GPIO_InitStruct);
 800252e:	f107 0314 	add.w	r3, r7, #20
 8002532:	4619      	mov	r1, r3
 8002534:	4807      	ldr	r0, [pc, #28]	; (8002554 <MX_GPIO_Init+0x1b4>)
 8002536:	f002 fee7 	bl	8005308 <HAL_GPIO_Init>

}
 800253a:	bf00      	nop
 800253c:	3728      	adds	r7, #40	; 0x28
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800
 8002548:	40020000 	.word	0x40020000
 800254c:	40020800 	.word	0x40020800
 8002550:	40020400 	.word	0x40020400
 8002554:	40020c00 	.word	0x40020c00

08002558 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800255c:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <MX_I2C1_Init+0x50>)
 800255e:	4a13      	ldr	r2, [pc, #76]	; (80025ac <MX_I2C1_Init+0x54>)
 8002560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002562:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <MX_I2C1_Init+0x50>)
 8002564:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <MX_I2C1_Init+0x58>)
 8002566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002568:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <MX_I2C1_Init+0x50>)
 800256a:	2200      	movs	r2, #0
 800256c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 168;
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <MX_I2C1_Init+0x50>)
 8002570:	22a8      	movs	r2, #168	; 0xa8
 8002572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <MX_I2C1_Init+0x50>)
 8002576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800257a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800257c:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <MX_I2C1_Init+0x50>)
 800257e:	2200      	movs	r2, #0
 8002580:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <MX_I2C1_Init+0x50>)
 8002584:	2200      	movs	r2, #0
 8002586:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002588:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <MX_I2C1_Init+0x50>)
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <MX_I2C1_Init+0x50>)
 8002590:	2200      	movs	r2, #0
 8002592:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002594:	4804      	ldr	r0, [pc, #16]	; (80025a8 <MX_I2C1_Init+0x50>)
 8002596:	f003 fa35 	bl	8005a04 <HAL_I2C_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80025a0:	f000 f95a 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	200005d8 	.word	0x200005d8
 80025ac:	40005400 	.word	0x40005400
 80025b0:	000186a0 	.word	0x000186a0

080025b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	; 0x28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a50      	ldr	r2, [pc, #320]	; (8002714 <HAL_I2C_MspInit+0x160>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	f040 809a 	bne.w	800270c <HAL_I2C_MspInit+0x158>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d8:	2300      	movs	r3, #0
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	4b4e      	ldr	r3, [pc, #312]	; (8002718 <HAL_I2C_MspInit+0x164>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	4a4d      	ldr	r2, [pc, #308]	; (8002718 <HAL_I2C_MspInit+0x164>)
 80025e2:	f043 0302 	orr.w	r3, r3, #2
 80025e6:	6313      	str	r3, [r2, #48]	; 0x30
 80025e8:	4b4b      	ldr	r3, [pc, #300]	; (8002718 <HAL_I2C_MspInit+0x164>)
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025f4:	23c0      	movs	r3, #192	; 0xc0
 80025f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025f8:	2312      	movs	r3, #18
 80025fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002600:	2303      	movs	r3, #3
 8002602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002604:	2304      	movs	r3, #4
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002608:	f107 0314 	add.w	r3, r7, #20
 800260c:	4619      	mov	r1, r3
 800260e:	4843      	ldr	r0, [pc, #268]	; (800271c <HAL_I2C_MspInit+0x168>)
 8002610:	f002 fe7a 	bl	8005308 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	4b3f      	ldr	r3, [pc, #252]	; (8002718 <HAL_I2C_MspInit+0x164>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	4a3e      	ldr	r2, [pc, #248]	; (8002718 <HAL_I2C_MspInit+0x164>)
 800261e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002622:	6413      	str	r3, [r2, #64]	; 0x40
 8002624:	4b3c      	ldr	r3, [pc, #240]	; (8002718 <HAL_I2C_MspInit+0x164>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002630:	4b3b      	ldr	r3, [pc, #236]	; (8002720 <HAL_I2C_MspInit+0x16c>)
 8002632:	4a3c      	ldr	r2, [pc, #240]	; (8002724 <HAL_I2C_MspInit+0x170>)
 8002634:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002636:	4b3a      	ldr	r3, [pc, #232]	; (8002720 <HAL_I2C_MspInit+0x16c>)
 8002638:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800263c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800263e:	4b38      	ldr	r3, [pc, #224]	; (8002720 <HAL_I2C_MspInit+0x16c>)
 8002640:	2200      	movs	r2, #0
 8002642:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002644:	4b36      	ldr	r3, [pc, #216]	; (8002720 <HAL_I2C_MspInit+0x16c>)
 8002646:	2200      	movs	r2, #0
 8002648:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800264a:	4b35      	ldr	r3, [pc, #212]	; (8002720 <HAL_I2C_MspInit+0x16c>)
 800264c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002650:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002652:	4b33      	ldr	r3, [pc, #204]	; (8002720 <HAL_I2C_MspInit+0x16c>)
 8002654:	2200      	movs	r2, #0
 8002656:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002658:	4b31      	ldr	r3, [pc, #196]	; (8002720 <HAL_I2C_MspInit+0x16c>)
 800265a:	2200      	movs	r2, #0
 800265c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800265e:	4b30      	ldr	r3, [pc, #192]	; (8002720 <HAL_I2C_MspInit+0x16c>)
 8002660:	2200      	movs	r2, #0
 8002662:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002664:	4b2e      	ldr	r3, [pc, #184]	; (8002720 <HAL_I2C_MspInit+0x16c>)
 8002666:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800266a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800266c:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <HAL_I2C_MspInit+0x16c>)
 800266e:	2200      	movs	r2, #0
 8002670:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002672:	482b      	ldr	r0, [pc, #172]	; (8002720 <HAL_I2C_MspInit+0x16c>)
 8002674:	f002 f9c2 	bl	80049fc <HAL_DMA_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800267e:	f000 f8eb 	bl	8002858 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a26      	ldr	r2, [pc, #152]	; (8002720 <HAL_I2C_MspInit+0x16c>)
 8002686:	639a      	str	r2, [r3, #56]	; 0x38
 8002688:	4a25      	ldr	r2, [pc, #148]	; (8002720 <HAL_I2C_MspInit+0x16c>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800268e:	4b26      	ldr	r3, [pc, #152]	; (8002728 <HAL_I2C_MspInit+0x174>)
 8002690:	4a26      	ldr	r2, [pc, #152]	; (800272c <HAL_I2C_MspInit+0x178>)
 8002692:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002694:	4b24      	ldr	r3, [pc, #144]	; (8002728 <HAL_I2C_MspInit+0x174>)
 8002696:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800269a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800269c:	4b22      	ldr	r3, [pc, #136]	; (8002728 <HAL_I2C_MspInit+0x174>)
 800269e:	2240      	movs	r2, #64	; 0x40
 80026a0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026a2:	4b21      	ldr	r3, [pc, #132]	; (8002728 <HAL_I2C_MspInit+0x174>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026a8:	4b1f      	ldr	r3, [pc, #124]	; (8002728 <HAL_I2C_MspInit+0x174>)
 80026aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ae:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026b0:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <HAL_I2C_MspInit+0x174>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026b6:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <HAL_I2C_MspInit+0x174>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80026bc:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <HAL_I2C_MspInit+0x174>)
 80026be:	2200      	movs	r2, #0
 80026c0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80026c2:	4b19      	ldr	r3, [pc, #100]	; (8002728 <HAL_I2C_MspInit+0x174>)
 80026c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026c8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026ca:	4b17      	ldr	r3, [pc, #92]	; (8002728 <HAL_I2C_MspInit+0x174>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80026d0:	4815      	ldr	r0, [pc, #84]	; (8002728 <HAL_I2C_MspInit+0x174>)
 80026d2:	f002 f993 	bl	80049fc <HAL_DMA_Init>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 80026dc:	f000 f8bc 	bl	8002858 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a11      	ldr	r2, [pc, #68]	; (8002728 <HAL_I2C_MspInit+0x174>)
 80026e4:	635a      	str	r2, [r3, #52]	; 0x34
 80026e6:	4a10      	ldr	r2, [pc, #64]	; (8002728 <HAL_I2C_MspInit+0x174>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80026ec:	2200      	movs	r2, #0
 80026ee:	2105      	movs	r1, #5
 80026f0:	201f      	movs	r0, #31
 80026f2:	f002 f93f 	bl	8004974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80026f6:	201f      	movs	r0, #31
 80026f8:	f002 f968 	bl	80049cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80026fc:	2200      	movs	r2, #0
 80026fe:	2105      	movs	r1, #5
 8002700:	2020      	movs	r0, #32
 8002702:	f002 f937 	bl	8004974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002706:	2020      	movs	r0, #32
 8002708:	f002 f960 	bl	80049cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800270c:	bf00      	nop
 800270e:	3728      	adds	r7, #40	; 0x28
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40005400 	.word	0x40005400
 8002718:	40023800 	.word	0x40023800
 800271c:	40020400 	.word	0x40020400
 8002720:	2000062c 	.word	0x2000062c
 8002724:	40026010 	.word	0x40026010
 8002728:	2000068c 	.word	0x2000068c
 800272c:	400260a0 	.word	0x400260a0

08002730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002734:	f000 fb82 	bl	8002e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */
  (void)SystemClock_Config();
 8002738:	f000 f80a 	bl	8002750 <SystemClock_Config>
  // TODO: Sys_Init - HW
  (void)app_sys_init();
 800273c:	f7ff f814 	bl	8001768 <app_sys_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  // TODO: Sys_Init - SW Modules
  (void)app_sys_peripheral_init();
 8002740:	f7ff f82a 	bl	8001798 <app_sys_peripheral_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002744:	f7ff fd10 	bl	8002168 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002748:	f007 f975 	bl	8009a36 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800274c:	e7fe      	b.n	800274c <main+0x1c>
	...

08002750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b094      	sub	sp, #80	; 0x50
 8002754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002756:	f107 031c 	add.w	r3, r7, #28
 800275a:	2234      	movs	r2, #52	; 0x34
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f009 f9be 	bl	800bae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002764:	f107 0308 	add.w	r3, r7, #8
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002774:	2300      	movs	r3, #0
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	4b2c      	ldr	r3, [pc, #176]	; (800282c <SystemClock_Config+0xdc>)
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	4a2b      	ldr	r2, [pc, #172]	; (800282c <SystemClock_Config+0xdc>)
 800277e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002782:	6413      	str	r3, [r2, #64]	; 0x40
 8002784:	4b29      	ldr	r3, [pc, #164]	; (800282c <SystemClock_Config+0xdc>)
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278c:	607b      	str	r3, [r7, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002790:	2300      	movs	r3, #0
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	4b26      	ldr	r3, [pc, #152]	; (8002830 <SystemClock_Config+0xe0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a25      	ldr	r2, [pc, #148]	; (8002830 <SystemClock_Config+0xe0>)
 800279a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	4b23      	ldr	r3, [pc, #140]	; (8002830 <SystemClock_Config+0xe0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027a8:	603b      	str	r3, [r7, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027ac:	2301      	movs	r3, #1
 80027ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027b6:	2302      	movs	r3, #2
 80027b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80027c0:	2304      	movs	r3, #4
 80027c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80027c4:	23b4      	movs	r3, #180	; 0xb4
 80027c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027c8:	2302      	movs	r3, #2
 80027ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80027cc:	2302      	movs	r3, #2
 80027ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80027d0:	2302      	movs	r3, #2
 80027d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027d4:	f107 031c 	add.w	r3, r7, #28
 80027d8:	4618      	mov	r0, r3
 80027da:	f005 fc47 	bl	800806c <HAL_RCC_OscConfig>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80027e4:	f000 f838 	bl	8002858 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80027e8:	f004 ffb4 	bl	8007754 <HAL_PWREx_EnableOverDrive>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80027f2:	f000 f831 	bl	8002858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027f6:	230f      	movs	r3, #15
 80027f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027fa:	2302      	movs	r3, #2
 80027fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002802:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800280c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800280e:	f107 0308 	add.w	r3, r7, #8
 8002812:	2105      	movs	r1, #5
 8002814:	4618      	mov	r0, r3
 8002816:	f004 ffed 	bl	80077f4 <HAL_RCC_ClockConfig>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002820:	f000 f81a 	bl	8002858 <Error_Handler>
  }
}
 8002824:	bf00      	nop
 8002826:	3750      	adds	r7, #80	; 0x50
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40023800 	.word	0x40023800
 8002830:	40007000 	.word	0x40007000

08002834 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a04      	ldr	r2, [pc, #16]	; (8002854 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d101      	bne.n	800284a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002846:	f000 fb1b 	bl	8002e80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40010000 	.word	0x40010000

08002858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800285c:	b672      	cpsid	i
}
 800285e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002860:	e7fe      	b.n	8002860 <Error_Handler+0x8>

08002862 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800287c:	4b17      	ldr	r3, [pc, #92]	; (80028dc <MX_SPI1_Init+0x64>)
 800287e:	4a18      	ldr	r2, [pc, #96]	; (80028e0 <MX_SPI1_Init+0x68>)
 8002880:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002882:	4b16      	ldr	r3, [pc, #88]	; (80028dc <MX_SPI1_Init+0x64>)
 8002884:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002888:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800288a:	4b14      	ldr	r3, [pc, #80]	; (80028dc <MX_SPI1_Init+0x64>)
 800288c:	2200      	movs	r2, #0
 800288e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002890:	4b12      	ldr	r3, [pc, #72]	; (80028dc <MX_SPI1_Init+0x64>)
 8002892:	2200      	movs	r2, #0
 8002894:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002896:	4b11      	ldr	r3, [pc, #68]	; (80028dc <MX_SPI1_Init+0x64>)
 8002898:	2200      	movs	r2, #0
 800289a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800289c:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <MX_SPI1_Init+0x64>)
 800289e:	2200      	movs	r2, #0
 80028a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028a2:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <MX_SPI1_Init+0x64>)
 80028a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80028aa:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <MX_SPI1_Init+0x64>)
 80028ac:	2238      	movs	r2, #56	; 0x38
 80028ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028b0:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <MX_SPI1_Init+0x64>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <MX_SPI1_Init+0x64>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028bc:	4b07      	ldr	r3, [pc, #28]	; (80028dc <MX_SPI1_Init+0x64>)
 80028be:	2200      	movs	r2, #0
 80028c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <MX_SPI1_Init+0x64>)
 80028c4:	220a      	movs	r2, #10
 80028c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028c8:	4804      	ldr	r0, [pc, #16]	; (80028dc <MX_SPI1_Init+0x64>)
 80028ca:	f005 ff2b 	bl	8008724 <HAL_SPI_Init>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80028d4:	f7ff ffc0 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	200006ec 	.word	0x200006ec
 80028e0:	40013000 	.word	0x40013000

080028e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	; 0x28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 0314 	add.w	r3, r7, #20
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a4c      	ldr	r2, [pc, #304]	; (8002a34 <HAL_SPI_MspInit+0x150>)
 8002902:	4293      	cmp	r3, r2
 8002904:	f040 8092 	bne.w	8002a2c <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002908:	2300      	movs	r3, #0
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	4b4a      	ldr	r3, [pc, #296]	; (8002a38 <HAL_SPI_MspInit+0x154>)
 800290e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002910:	4a49      	ldr	r2, [pc, #292]	; (8002a38 <HAL_SPI_MspInit+0x154>)
 8002912:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002916:	6453      	str	r3, [r2, #68]	; 0x44
 8002918:	4b47      	ldr	r3, [pc, #284]	; (8002a38 <HAL_SPI_MspInit+0x154>)
 800291a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	4b43      	ldr	r3, [pc, #268]	; (8002a38 <HAL_SPI_MspInit+0x154>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	4a42      	ldr	r2, [pc, #264]	; (8002a38 <HAL_SPI_MspInit+0x154>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6313      	str	r3, [r2, #48]	; 0x30
 8002934:	4b40      	ldr	r3, [pc, #256]	; (8002a38 <HAL_SPI_MspInit+0x154>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002940:	23e0      	movs	r3, #224	; 0xe0
 8002942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294c:	2303      	movs	r3, #3
 800294e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002950:	2305      	movs	r3, #5
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	4619      	mov	r1, r3
 800295a:	4838      	ldr	r0, [pc, #224]	; (8002a3c <HAL_SPI_MspInit+0x158>)
 800295c:	f002 fcd4 	bl	8005308 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002960:	4b37      	ldr	r3, [pc, #220]	; (8002a40 <HAL_SPI_MspInit+0x15c>)
 8002962:	4a38      	ldr	r2, [pc, #224]	; (8002a44 <HAL_SPI_MspInit+0x160>)
 8002964:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002966:	4b36      	ldr	r3, [pc, #216]	; (8002a40 <HAL_SPI_MspInit+0x15c>)
 8002968:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800296c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800296e:	4b34      	ldr	r3, [pc, #208]	; (8002a40 <HAL_SPI_MspInit+0x15c>)
 8002970:	2200      	movs	r2, #0
 8002972:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002974:	4b32      	ldr	r3, [pc, #200]	; (8002a40 <HAL_SPI_MspInit+0x15c>)
 8002976:	2200      	movs	r2, #0
 8002978:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800297a:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <HAL_SPI_MspInit+0x15c>)
 800297c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002980:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002982:	4b2f      	ldr	r3, [pc, #188]	; (8002a40 <HAL_SPI_MspInit+0x15c>)
 8002984:	2200      	movs	r2, #0
 8002986:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002988:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <HAL_SPI_MspInit+0x15c>)
 800298a:	2200      	movs	r2, #0
 800298c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800298e:	4b2c      	ldr	r3, [pc, #176]	; (8002a40 <HAL_SPI_MspInit+0x15c>)
 8002990:	2200      	movs	r2, #0
 8002992:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002994:	4b2a      	ldr	r3, [pc, #168]	; (8002a40 <HAL_SPI_MspInit+0x15c>)
 8002996:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800299a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800299c:	4b28      	ldr	r3, [pc, #160]	; (8002a40 <HAL_SPI_MspInit+0x15c>)
 800299e:	2200      	movs	r2, #0
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80029a2:	4827      	ldr	r0, [pc, #156]	; (8002a40 <HAL_SPI_MspInit+0x15c>)
 80029a4:	f002 f82a 	bl	80049fc <HAL_DMA_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80029ae:	f7ff ff53 	bl	8002858 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a22      	ldr	r2, [pc, #136]	; (8002a40 <HAL_SPI_MspInit+0x15c>)
 80029b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80029b8:	4a21      	ldr	r2, [pc, #132]	; (8002a40 <HAL_SPI_MspInit+0x15c>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80029be:	4b22      	ldr	r3, [pc, #136]	; (8002a48 <HAL_SPI_MspInit+0x164>)
 80029c0:	4a22      	ldr	r2, [pc, #136]	; (8002a4c <HAL_SPI_MspInit+0x168>)
 80029c2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80029c4:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <HAL_SPI_MspInit+0x164>)
 80029c6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80029ca:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029cc:	4b1e      	ldr	r3, [pc, #120]	; (8002a48 <HAL_SPI_MspInit+0x164>)
 80029ce:	2240      	movs	r2, #64	; 0x40
 80029d0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d2:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <HAL_SPI_MspInit+0x164>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029d8:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <HAL_SPI_MspInit+0x164>)
 80029da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029de:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029e0:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <HAL_SPI_MspInit+0x164>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029e6:	4b18      	ldr	r3, [pc, #96]	; (8002a48 <HAL_SPI_MspInit+0x164>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80029ec:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <HAL_SPI_MspInit+0x164>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <HAL_SPI_MspInit+0x164>)
 80029f4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80029f8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029fa:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <HAL_SPI_MspInit+0x164>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002a00:	4811      	ldr	r0, [pc, #68]	; (8002a48 <HAL_SPI_MspInit+0x164>)
 8002a02:	f001 fffb 	bl	80049fc <HAL_DMA_Init>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8002a0c:	f7ff ff24 	bl	8002858 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a0d      	ldr	r2, [pc, #52]	; (8002a48 <HAL_SPI_MspInit+0x164>)
 8002a14:	649a      	str	r2, [r3, #72]	; 0x48
 8002a16:	4a0c      	ldr	r2, [pc, #48]	; (8002a48 <HAL_SPI_MspInit+0x164>)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2105      	movs	r1, #5
 8002a20:	2023      	movs	r0, #35	; 0x23
 8002a22:	f001 ffa7 	bl	8004974 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002a26:	2023      	movs	r0, #35	; 0x23
 8002a28:	f001 ffd0 	bl	80049cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	3728      	adds	r7, #40	; 0x28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40013000 	.word	0x40013000
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40020000 	.word	0x40020000
 8002a40:	2000076c 	.word	0x2000076c
 8002a44:	40026410 	.word	0x40026410
 8002a48:	200007cc 	.word	0x200007cc
 8002a4c:	40026458 	.word	0x40026458

08002a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <HAL_MspInit+0x54>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	4a11      	ldr	r2, [pc, #68]	; (8002aa4 <HAL_MspInit+0x54>)
 8002a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a64:	6453      	str	r3, [r2, #68]	; 0x44
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <HAL_MspInit+0x54>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6e:	607b      	str	r3, [r7, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_MspInit+0x54>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	4a0a      	ldr	r2, [pc, #40]	; (8002aa4 <HAL_MspInit+0x54>)
 8002a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a80:	6413      	str	r3, [r2, #64]	; 0x40
 8002a82:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <HAL_MspInit+0x54>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	210f      	movs	r1, #15
 8002a92:	f06f 0001 	mvn.w	r0, #1
 8002a96:	f001 ff6d 	bl	8004974 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800

08002aa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08c      	sub	sp, #48	; 0x30
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	4b2f      	ldr	r3, [pc, #188]	; (8002b7c <HAL_InitTick+0xd4>)
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac0:	4a2e      	ldr	r2, [pc, #184]	; (8002b7c <HAL_InitTick+0xd4>)
 8002ac2:	f043 0301 	orr.w	r3, r3, #1
 8002ac6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac8:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <HAL_InitTick+0xd4>)
 8002aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ad4:	f107 020c 	add.w	r2, r7, #12
 8002ad8:	f107 0310 	add.w	r3, r7, #16
 8002adc:	4611      	mov	r1, r2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f005 f862 	bl	8007ba8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002ae4:	f005 f84c 	bl	8007b80 <HAL_RCC_GetPCLK2Freq>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af0:	4a23      	ldr	r2, [pc, #140]	; (8002b80 <HAL_InitTick+0xd8>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	0c9b      	lsrs	r3, r3, #18
 8002af8:	3b01      	subs	r3, #1
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002afc:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <HAL_InitTick+0xdc>)
 8002afe:	4a22      	ldr	r2, [pc, #136]	; (8002b88 <HAL_InitTick+0xe0>)
 8002b00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002b02:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <HAL_InitTick+0xdc>)
 8002b04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b08:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002b0a:	4a1e      	ldr	r2, [pc, #120]	; (8002b84 <HAL_InitTick+0xdc>)
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002b10:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <HAL_InitTick+0xdc>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b16:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <HAL_InitTick+0xdc>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <HAL_InitTick+0xdc>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002b22:	4818      	ldr	r0, [pc, #96]	; (8002b84 <HAL_InitTick+0xdc>)
 8002b24:	f006 fba2 	bl	800926c <HAL_TIM_Base_Init>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d11b      	bne.n	8002b6e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002b36:	4813      	ldr	r0, [pc, #76]	; (8002b84 <HAL_InitTick+0xdc>)
 8002b38:	f006 fc92 	bl	8009460 <HAL_TIM_Base_Start_IT>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002b42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d111      	bne.n	8002b6e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002b4a:	2019      	movs	r0, #25
 8002b4c:	f001 ff3e 	bl	80049cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b0f      	cmp	r3, #15
 8002b54:	d808      	bhi.n	8002b68 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002b56:	2200      	movs	r2, #0
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	2019      	movs	r0, #25
 8002b5c:	f001 ff0a 	bl	8004974 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b60:	4a0a      	ldr	r2, [pc, #40]	; (8002b8c <HAL_InitTick+0xe4>)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	e002      	b.n	8002b6e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3730      	adds	r7, #48	; 0x30
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	431bde83 	.word	0x431bde83
 8002b84:	2000082c 	.word	0x2000082c
 8002b88:	40010000 	.word	0x40010000
 8002b8c:	20000044 	.word	0x20000044

08002b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b94:	e7fe      	b.n	8002b94 <NMI_Handler+0x4>

08002b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b96:	b480      	push	{r7}
 8002b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b9a:	e7fe      	b.n	8002b9a <HardFault_Handler+0x4>

08002b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ba0:	e7fe      	b.n	8002ba0 <MemManage_Handler+0x4>

08002ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ba6:	e7fe      	b.n	8002ba6 <BusFault_Handler+0x4>

08002ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bac:	e7fe      	b.n	8002bac <UsageFault_Handler+0x4>

08002bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bb2:	bf00      	nop
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 8002bc0:	4802      	ldr	r0, [pc, #8]	; (8002bcc <WWDG_IRQHandler+0x10>)
 8002bc2:	f006 fef7 	bl	80099b4 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000874 	.word	0x20000874

08002bd0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002bd4:	4802      	ldr	r0, [pc, #8]	; (8002be0 <DMA1_Stream0_IRQHandler+0x10>)
 8002bd6:	f002 f94d 	bl	8004e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	2000062c 	.word	0x2000062c

08002be4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002be8:	4802      	ldr	r0, [pc, #8]	; (8002bf4 <DMA1_Stream6_IRQHandler+0x10>)
 8002bea:	f002 f943 	bl	8004e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	2000068c 	.word	0x2000068c

08002bf8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002bfc:	4802      	ldr	r0, [pc, #8]	; (8002c08 <CAN1_TX_IRQHandler+0x10>)
 8002bfe:	f001 fbad 	bl	800435c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	200002ac 	.word	0x200002ac

08002c0c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c10:	4802      	ldr	r0, [pc, #8]	; (8002c1c <CAN1_RX0_IRQHandler+0x10>)
 8002c12:	f001 fba3 	bl	800435c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	200002ac 	.word	0x200002ac

08002c20 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c24:	4802      	ldr	r0, [pc, #8]	; (8002c30 <CAN1_RX1_IRQHandler+0x10>)
 8002c26:	f001 fb99 	bl	800435c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	200002ac 	.word	0x200002ac

08002c34 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c38:	4802      	ldr	r0, [pc, #8]	; (8002c44 <CAN1_SCE_IRQHandler+0x10>)
 8002c3a:	f001 fb8f 	bl	800435c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200002ac 	.word	0x200002ac

08002c48 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c4c:	4802      	ldr	r0, [pc, #8]	; (8002c58 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002c4e:	f006 fccd 	bl	80095ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	2000082c 	.word	0x2000082c

08002c5c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c60:	4802      	ldr	r0, [pc, #8]	; (8002c6c <I2C1_EV_IRQHandler+0x10>)
 8002c62:	f003 f89b 	bl	8005d9c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	200005d8 	.word	0x200005d8

08002c70 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002c74:	4802      	ldr	r0, [pc, #8]	; (8002c80 <I2C1_ER_IRQHandler+0x10>)
 8002c76:	f003 fa02 	bl	800607e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	200005d8 	.word	0x200005d8

08002c84 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002c88:	4802      	ldr	r0, [pc, #8]	; (8002c94 <SPI1_IRQHandler+0x10>)
 8002c8a:	f006 f8bf 	bl	8008e0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	200006ec 	.word	0x200006ec

08002c98 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002c9c:	4802      	ldr	r0, [pc, #8]	; (8002ca8 <DMA2_Stream0_IRQHandler+0x10>)
 8002c9e:	f002 f8e9 	bl	8004e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	2000076c 	.word	0x2000076c

08002cac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002cb0:	4802      	ldr	r0, [pc, #8]	; (8002cbc <DMA2_Stream3_IRQHandler+0x10>)
 8002cb2:	f002 f8df 	bl	8004e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	200007cc 	.word	0x200007cc

08002cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <SystemInit+0x20>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cca:	4a05      	ldr	r2, [pc, #20]	; (8002ce0 <SystemInit+0x20>)
 8002ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ce8:	480d      	ldr	r0, [pc, #52]	; (8002d20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cea:	490e      	ldr	r1, [pc, #56]	; (8002d24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cec:	4a0e      	ldr	r2, [pc, #56]	; (8002d28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cf0:	e002      	b.n	8002cf8 <LoopCopyDataInit>

08002cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cf6:	3304      	adds	r3, #4

08002cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cfc:	d3f9      	bcc.n	8002cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cfe:	4a0b      	ldr	r2, [pc, #44]	; (8002d2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d00:	4c0b      	ldr	r4, [pc, #44]	; (8002d30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d04:	e001      	b.n	8002d0a <LoopFillZerobss>

08002d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d08:	3204      	adds	r2, #4

08002d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d0c:	d3fb      	bcc.n	8002d06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d0e:	f7ff ffd7 	bl	8002cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d12:	f008 feb3 	bl	800ba7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d16:	f7ff fd0b 	bl	8002730 <main>
  bx  lr    
 8002d1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d24:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8002d28:	0800c048 	.word	0x0800c048
  ldr r2, =_sbss
 8002d2c:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8002d30:	200103f0 	.word	0x200103f0

08002d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d34:	e7fe      	b.n	8002d34 <ADC_IRQHandler>

08002d36 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d104      	bne.n	8002d4e <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d44:	b672      	cpsid	i
}
 8002d46:	bf00      	nop
 8002d48:	f7ff fd86 	bl	8002858 <Error_Handler>
 8002d4c:	e7fe      	b.n	8002d4c <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	7a1b      	ldrb	r3, [r3, #8]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d904      	bls.n	8002d60 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d56:	b672      	cpsid	i
}
 8002d58:	bf00      	nop
 8002d5a:	f7ff fd7d 	bl	8002858 <Error_Handler>
 8002d5e:	e7fe      	b.n	8002d5e <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7a1b      	ldrb	r3, [r3, #8]
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	b2d1      	uxtb	r1, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	7211      	strb	r1, [r2, #8]
 8002d6c:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d6e:	f3ef 8211 	mrs	r2, BASEPRI
 8002d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	60fa      	str	r2, [r7, #12]
 8002d84:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8002d8e:	bf00      	nop
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d104      	bne.n	8002dae <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002da4:	b672      	cpsid	i
}
 8002da6:	bf00      	nop
 8002da8:	f7ff fd56 	bl	8002858 <Error_Handler>
 8002dac:	e7fe      	b.n	8002dac <stm32_lock_release+0x16>
  lock->nesting_level--;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	7a1b      	ldrb	r3, [r3, #8]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	7a1b      	ldrb	r3, [r3, #8]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d904      	bls.n	8002dcc <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc2:	b672      	cpsid	i
}
 8002dc4:	bf00      	nop
 8002dc6:	f7ff fd47 	bl	8002858 <Error_Handler>
 8002dca:	e7fe      	b.n	8002dca <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	7a1b      	ldrb	r3, [r3, #8]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dd8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002de0:	bf00      	nop
}
 8002de2:	bf00      	nop
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d104      	bne.n	8002e02 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002df8:	b672      	cpsid	i
}
 8002dfa:	bf00      	nop
 8002dfc:	f7ff fd2c 	bl	8002858 <Error_Handler>
 8002e00:	e7fe      	b.n	8002e00 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff96 	bl	8002d36 <stm32_lock_acquire>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d104      	bne.n	8002e2a <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002e20:	b672      	cpsid	i
}
 8002e22:	bf00      	nop
 8002e24:	f7ff fd18 	bl	8002858 <Error_Handler>
 8002e28:	e7fe      	b.n	8002e28 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ffb2 	bl	8002d96 <stm32_lock_release>
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e40:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <HAL_Init+0x40>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <HAL_Init+0x40>)
 8002e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_Init+0x40>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <HAL_Init+0x40>)
 8002e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e58:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <HAL_Init+0x40>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a07      	ldr	r2, [pc, #28]	; (8002e7c <HAL_Init+0x40>)
 8002e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e64:	2003      	movs	r0, #3
 8002e66:	f001 fd65 	bl	8004934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e6a:	200f      	movs	r0, #15
 8002e6c:	f7ff fe1c 	bl	8002aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e70:	f7ff fdee 	bl	8002a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023c00 	.word	0x40023c00

08002e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_IncTick+0x20>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_IncTick+0x24>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4413      	add	r3, r2
 8002e90:	4a04      	ldr	r2, [pc, #16]	; (8002ea4 <HAL_IncTick+0x24>)
 8002e92:	6013      	str	r3, [r2, #0]
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	20000048 	.word	0x20000048
 8002ea4:	20000894 	.word	0x20000894

08002ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8002eac:	4b03      	ldr	r3, [pc, #12]	; (8002ebc <HAL_GetTick+0x14>)
 8002eae:	681b      	ldr	r3, [r3, #0]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20000894 	.word	0x20000894

08002ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ec8:	f7ff ffee 	bl	8002ea8 <HAL_GetTick>
 8002ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	d005      	beq.n	8002ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eda:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <HAL_Delay+0x44>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ee6:	bf00      	nop
 8002ee8:	f7ff ffde 	bl	8002ea8 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d8f7      	bhi.n	8002ee8 <HAL_Delay+0x28>
  {
  }
}
 8002ef8:	bf00      	nop
 8002efa:	bf00      	nop
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000048 	.word	0x20000048

08002f08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e15c      	b.n	80031d8 <HAL_ADC_Init+0x2d0>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a8e      	ldr	r2, [pc, #568]	; (800315c <HAL_ADC_Init+0x254>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00e      	beq.n	8002f46 <HAL_ADC_Init+0x3e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a8c      	ldr	r2, [pc, #560]	; (8003160 <HAL_ADC_Init+0x258>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d009      	beq.n	8002f46 <HAL_ADC_Init+0x3e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a8b      	ldr	r2, [pc, #556]	; (8003164 <HAL_ADC_Init+0x25c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d004      	beq.n	8002f46 <HAL_ADC_Init+0x3e>
 8002f3c:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8002f40:	4889      	ldr	r0, [pc, #548]	; (8003168 <HAL_ADC_Init+0x260>)
 8002f42:	f7ff fc8e 	bl	8002862 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d013      	beq.n	8002f76 <HAL_ADC_Init+0x6e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f56:	d00e      	beq.n	8002f76 <HAL_ADC_Init+0x6e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f60:	d009      	beq.n	8002f76 <HAL_ADC_Init+0x6e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f6a:	d004      	beq.n	8002f76 <HAL_ADC_Init+0x6e>
 8002f6c:	f240 1143 	movw	r1, #323	; 0x143
 8002f70:	487d      	ldr	r0, [pc, #500]	; (8003168 <HAL_ADC_Init+0x260>)
 8002f72:	f7ff fc76 	bl	8002862 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d013      	beq.n	8002fa6 <HAL_ADC_Init+0x9e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f86:	d00e      	beq.n	8002fa6 <HAL_ADC_Init+0x9e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f90:	d009      	beq.n	8002fa6 <HAL_ADC_Init+0x9e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f9a:	d004      	beq.n	8002fa6 <HAL_ADC_Init+0x9e>
 8002f9c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8002fa0:	4871      	ldr	r0, [pc, #452]	; (8003168 <HAL_ADC_Init+0x260>)
 8002fa2:	f7ff fc5e 	bl	8002862 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d008      	beq.n	8002fc0 <HAL_ADC_Init+0xb8>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d004      	beq.n	8002fc0 <HAL_ADC_Init+0xb8>
 8002fb6:	f240 1145 	movw	r1, #325	; 0x145
 8002fba:	486b      	ldr	r0, [pc, #428]	; (8003168 <HAL_ADC_Init+0x260>)
 8002fbc:	f7ff fc51 	bl	8002862 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	7e1b      	ldrb	r3, [r3, #24]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_ADC_Init+0xd2>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	7e1b      	ldrb	r3, [r3, #24]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d004      	beq.n	8002fda <HAL_ADC_Init+0xd2>
 8002fd0:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002fd4:	4864      	ldr	r0, [pc, #400]	; (8003168 <HAL_ADC_Init+0x260>)
 8002fd6:	f7ff fc44 	bl	8002862 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d054      	beq.n	800308c <HAL_ADC_Init+0x184>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fea:	d04f      	beq.n	800308c <HAL_ADC_Init+0x184>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ff4:	d04a      	beq.n	800308c <HAL_ADC_Init+0x184>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ffe:	d045      	beq.n	800308c <HAL_ADC_Init+0x184>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003008:	d040      	beq.n	800308c <HAL_ADC_Init+0x184>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003012:	d03b      	beq.n	800308c <HAL_ADC_Init+0x184>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800301c:	d036      	beq.n	800308c <HAL_ADC_Init+0x184>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003022:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 8003026:	d031      	beq.n	800308c <HAL_ADC_Init+0x184>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003030:	d02c      	beq.n	800308c <HAL_ADC_Init+0x184>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 800303a:	d027      	beq.n	800308c <HAL_ADC_Init+0x184>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8003044:	d022      	beq.n	800308c <HAL_ADC_Init+0x184>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 800304e:	d01d      	beq.n	800308c <HAL_ADC_Init+0x184>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003058:	d018      	beq.n	800308c <HAL_ADC_Init+0x184>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 8003062:	d013      	beq.n	800308c <HAL_ADC_Init+0x184>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 800306c:	d00e      	beq.n	800308c <HAL_ADC_Init+0x184>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003076:	d009      	beq.n	800308c <HAL_ADC_Init+0x184>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	4a3b      	ldr	r2, [pc, #236]	; (800316c <HAL_ADC_Init+0x264>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d004      	beq.n	800308c <HAL_ADC_Init+0x184>
 8003082:	f240 1147 	movw	r1, #327	; 0x147
 8003086:	4838      	ldr	r0, [pc, #224]	; (8003168 <HAL_ADC_Init+0x260>)
 8003088:	f7ff fbeb 	bl	8002862 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d009      	beq.n	80030a8 <HAL_ADC_Init+0x1a0>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800309c:	d004      	beq.n	80030a8 <HAL_ADC_Init+0x1a0>
 800309e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80030a2:	4831      	ldr	r0, [pc, #196]	; (8003168 <HAL_ADC_Init+0x260>)
 80030a4:	f7ff fbdd 	bl	8002862 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_ADC_Init+0x1b0>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	2b10      	cmp	r3, #16
 80030b6:	d904      	bls.n	80030c2 <HAL_ADC_Init+0x1ba>
 80030b8:	f240 1149 	movw	r1, #329	; 0x149
 80030bc:	482a      	ldr	r0, [pc, #168]	; (8003168 <HAL_ADC_Init+0x260>)
 80030be:	f7ff fbd0 	bl	8002862 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d009      	beq.n	80030e0 <HAL_ADC_Init+0x1d8>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d004      	beq.n	80030e0 <HAL_ADC_Init+0x1d8>
 80030d6:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80030da:	4823      	ldr	r0, [pc, #140]	; (8003168 <HAL_ADC_Init+0x260>)
 80030dc:	f7ff fbc1 	bl	8002862 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d00c      	beq.n	8003102 <HAL_ADC_Init+0x1fa>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_ADC_Init+0x1fa>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d004      	beq.n	8003102 <HAL_ADC_Init+0x1fa>
 80030f8:	f240 114b 	movw	r1, #331	; 0x14b
 80030fc:	481a      	ldr	r0, [pc, #104]	; (8003168 <HAL_ADC_Init+0x260>)
 80030fe:	f7ff fbb0 	bl	8002862 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d009      	beq.n	8003120 <HAL_ADC_Init+0x218>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d004      	beq.n	8003120 <HAL_ADC_Init+0x218>
 8003116:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800311a:	4813      	ldr	r0, [pc, #76]	; (8003168 <HAL_ADC_Init+0x260>)
 800311c:	f7ff fba1 	bl	8002862 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003124:	4a11      	ldr	r2, [pc, #68]	; (800316c <HAL_ADC_Init+0x264>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d022      	beq.n	8003170 <HAL_ADC_Init+0x268>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d01e      	beq.n	8003170 <HAL_ADC_Init+0x268>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800313a:	d019      	beq.n	8003170 <HAL_ADC_Init+0x268>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003144:	d014      	beq.n	8003170 <HAL_ADC_Init+0x268>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800314e:	d00f      	beq.n	8003170 <HAL_ADC_Init+0x268>
 8003150:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8003154:	4804      	ldr	r0, [pc, #16]	; (8003168 <HAL_ADC_Init+0x260>)
 8003156:	f7ff fb84 	bl	8002862 <assert_failed>
 800315a:	e009      	b.n	8003170 <HAL_ADC_Init+0x268>
 800315c:	40012000 	.word	0x40012000
 8003160:	40012100 	.word	0x40012100
 8003164:	40012200 	.word	0x40012200
 8003168:	0800bd14 	.word	0x0800bd14
 800316c:	0f000001 	.word	0x0f000001
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <HAL_ADC_Init+0x284>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7fe fb83 	bl	8001884 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	f003 0310 	and.w	r3, r3, #16
 8003194:	2b00      	cmp	r3, #0
 8003196:	d118      	bne.n	80031ca <HAL_ADC_Init+0x2c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031a0:	f023 0302 	bic.w	r3, r3, #2
 80031a4:	f043 0202 	orr.w	r2, r3, #2
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f98d 	bl	80034cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	f023 0303 	bic.w	r3, r3, #3
 80031c0:	f043 0201 	orr.w	r2, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	641a      	str	r2, [r3, #64]	; 0x40
 80031c8:	e001      	b.n	80031ce <HAL_ADC_Init+0x2c6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b12      	cmp	r3, #18
 80031f4:	d909      	bls.n	800320a <HAL_ADC_ConfigChannel+0x2a>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a72      	ldr	r2, [pc, #456]	; (80033c4 <HAL_ADC_ConfigChannel+0x1e4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d004      	beq.n	800320a <HAL_ADC_ConfigChannel+0x2a>
 8003200:	f240 618b 	movw	r1, #1675	; 0x68b
 8003204:	4870      	ldr	r0, [pc, #448]	; (80033c8 <HAL_ADC_ConfigChannel+0x1e8>)
 8003206:	f7ff fb2c 	bl	8002862 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_ADC_ConfigChannel+0x3a>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b10      	cmp	r3, #16
 8003218:	d904      	bls.n	8003224 <HAL_ADC_ConfigChannel+0x44>
 800321a:	f240 618c 	movw	r1, #1676	; 0x68c
 800321e:	486a      	ldr	r0, [pc, #424]	; (80033c8 <HAL_ADC_ConfigChannel+0x1e8>)
 8003220:	f7ff fb1f 	bl	8002862 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d020      	beq.n	800326e <HAL_ADC_ConfigChannel+0x8e>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d01c      	beq.n	800326e <HAL_ADC_ConfigChannel+0x8e>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b02      	cmp	r3, #2
 800323a:	d018      	beq.n	800326e <HAL_ADC_ConfigChannel+0x8e>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b03      	cmp	r3, #3
 8003242:	d014      	beq.n	800326e <HAL_ADC_ConfigChannel+0x8e>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2b04      	cmp	r3, #4
 800324a:	d010      	beq.n	800326e <HAL_ADC_ConfigChannel+0x8e>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b05      	cmp	r3, #5
 8003252:	d00c      	beq.n	800326e <HAL_ADC_ConfigChannel+0x8e>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	2b06      	cmp	r3, #6
 800325a:	d008      	beq.n	800326e <HAL_ADC_ConfigChannel+0x8e>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b07      	cmp	r3, #7
 8003262:	d004      	beq.n	800326e <HAL_ADC_ConfigChannel+0x8e>
 8003264:	f240 618d 	movw	r1, #1677	; 0x68d
 8003268:	4857      	ldr	r0, [pc, #348]	; (80033c8 <HAL_ADC_ConfigChannel+0x1e8>)
 800326a:	f7ff fafa 	bl	8002862 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_ADC_ConfigChannel+0x9c>
 8003278:	2302      	movs	r3, #2
 800327a:	e118      	b.n	80034ae <HAL_ADC_ConfigChannel+0x2ce>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b09      	cmp	r3, #9
 800328a:	d925      	bls.n	80032d8 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68d9      	ldr	r1, [r3, #12]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	b29b      	uxth	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	4613      	mov	r3, r2
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	4413      	add	r3, r2
 80032a0:	3b1e      	subs	r3, #30
 80032a2:	2207      	movs	r2, #7
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43da      	mvns	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	400a      	ands	r2, r1
 80032b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68d9      	ldr	r1, [r3, #12]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	4618      	mov	r0, r3
 80032c4:	4603      	mov	r3, r0
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	4403      	add	r3, r0
 80032ca:	3b1e      	subs	r3, #30
 80032cc:	409a      	lsls	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	e022      	b.n	800331e <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6919      	ldr	r1, [r3, #16]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	2207      	movs	r2, #7
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43da      	mvns	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	400a      	ands	r2, r1
 80032fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6919      	ldr	r1, [r3, #16]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	b29b      	uxth	r3, r3
 800330c:	4618      	mov	r0, r3
 800330e:	4603      	mov	r3, r0
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	4403      	add	r3, r0
 8003314:	409a      	lsls	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b06      	cmp	r3, #6
 8003324:	d824      	bhi.n	8003370 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	3b05      	subs	r3, #5
 8003338:	221f      	movs	r2, #31
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43da      	mvns	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	400a      	ands	r2, r1
 8003346:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	b29b      	uxth	r3, r3
 8003354:	4618      	mov	r0, r3
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	3b05      	subs	r3, #5
 8003362:	fa00 f203 	lsl.w	r2, r0, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	635a      	str	r2, [r3, #52]	; 0x34
 800336e:	e051      	b.n	8003414 <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b0c      	cmp	r3, #12
 8003376:	d829      	bhi.n	80033cc <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	3b23      	subs	r3, #35	; 0x23
 800338a:	221f      	movs	r2, #31
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43da      	mvns	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	400a      	ands	r2, r1
 8003398:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	4618      	mov	r0, r3
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	3b23      	subs	r3, #35	; 0x23
 80033b4:	fa00 f203 	lsl.w	r2, r0, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
 80033c0:	e028      	b.n	8003414 <HAL_ADC_ConfigChannel+0x234>
 80033c2:	bf00      	nop
 80033c4:	10000012 	.word	0x10000012
 80033c8:	0800bd14 	.word	0x0800bd14
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	3b41      	subs	r3, #65	; 0x41
 80033de:	221f      	movs	r2, #31
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43da      	mvns	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	400a      	ands	r2, r1
 80033ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	4618      	mov	r0, r3
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	3b41      	subs	r3, #65	; 0x41
 8003408:	fa00 f203 	lsl.w	r2, r0, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003414:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <HAL_ADC_ConfigChannel+0x2d8>)
 8003416:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a27      	ldr	r2, [pc, #156]	; (80034bc <HAL_ADC_ConfigChannel+0x2dc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d10f      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x262>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b12      	cmp	r3, #18
 8003428:	d10b      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a1d      	ldr	r2, [pc, #116]	; (80034bc <HAL_ADC_ConfigChannel+0x2dc>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d12b      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x2c4>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1b      	ldr	r2, [pc, #108]	; (80034c0 <HAL_ADC_ConfigChannel+0x2e0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d003      	beq.n	800345e <HAL_ADC_ConfigChannel+0x27e>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b11      	cmp	r3, #17
 800345c:	d122      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a11      	ldr	r2, [pc, #68]	; (80034c0 <HAL_ADC_ConfigChannel+0x2e0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d111      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003480:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <HAL_ADC_ConfigChannel+0x2e4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a10      	ldr	r2, [pc, #64]	; (80034c8 <HAL_ADC_ConfigChannel+0x2e8>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	0c9a      	lsrs	r2, r3, #18
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003496:	e002      	b.n	800349e <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	3b01      	subs	r3, #1
 800349c:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1f9      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40012300 	.word	0x40012300
 80034bc:	40012000 	.word	0x40012000
 80034c0:	10000012 	.word	0x10000012
 80034c4:	20000040 	.word	0x20000040
 80034c8:	431bde83 	.word	0x431bde83

080034cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034d4:	4b7f      	ldr	r3, [pc, #508]	; (80036d4 <ADC_Init+0x208>)
 80034d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003500:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6859      	ldr	r1, [r3, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	021a      	lsls	r2, r3, #8
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003524:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6859      	ldr	r1, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003546:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6899      	ldr	r1, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	4a5e      	ldr	r2, [pc, #376]	; (80036d8 <ADC_Init+0x20c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d022      	beq.n	80035aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003572:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6899      	ldr	r1, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003594:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6899      	ldr	r1, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	e00f      	b.n	80035ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0202 	bic.w	r2, r2, #2
 80035d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6899      	ldr	r1, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	7e1b      	ldrb	r3, [r3, #24]
 80035e4:	005a      	lsls	r2, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d028      	beq.n	800364a <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <ADC_Init+0x13c>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	2b08      	cmp	r3, #8
 8003606:	d904      	bls.n	8003612 <ADC_Init+0x146>
 8003608:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 800360c:	4833      	ldr	r0, [pc, #204]	; (80036dc <ADC_Init+0x210>)
 800360e:	f7ff f928 	bl	8002862 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003620:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003630:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6859      	ldr	r1, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	3b01      	subs	r3, #1
 800363e:	035a      	lsls	r2, r3, #13
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	605a      	str	r2, [r3, #4]
 8003648:	e007      	b.n	800365a <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003658:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003668:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	3b01      	subs	r3, #1
 8003676:	051a      	lsls	r2, r3, #20
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800368e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6899      	ldr	r1, [r3, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800369c:	025a      	lsls	r2, r3, #9
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6899      	ldr	r1, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	029a      	lsls	r2, r3, #10
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	609a      	str	r2, [r3, #8]
}
 80036ca:	bf00      	nop
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40012300 	.word	0x40012300
 80036d8:	0f000001 	.word	0x0f000001
 80036dc:	0800bd14 	.word	0x0800bd14

080036e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e243      	b.n	8003b7a <HAL_CAN_Init+0x49a>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a93      	ldr	r2, [pc, #588]	; (8003944 <HAL_CAN_Init+0x264>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d009      	beq.n	8003710 <HAL_CAN_Init+0x30>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a91      	ldr	r2, [pc, #580]	; (8003948 <HAL_CAN_Init+0x268>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d004      	beq.n	8003710 <HAL_CAN_Init+0x30>
 8003706:	f240 111d 	movw	r1, #285	; 0x11d
 800370a:	4890      	ldr	r0, [pc, #576]	; (800394c <HAL_CAN_Init+0x26c>)
 800370c:	f7ff f8a9 	bl	8002862 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	7e1b      	ldrb	r3, [r3, #24]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d008      	beq.n	800372a <HAL_CAN_Init+0x4a>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	7e1b      	ldrb	r3, [r3, #24]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d004      	beq.n	800372a <HAL_CAN_Init+0x4a>
 8003720:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003724:	4889      	ldr	r0, [pc, #548]	; (800394c <HAL_CAN_Init+0x26c>)
 8003726:	f7ff f89c 	bl	8002862 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	7e5b      	ldrb	r3, [r3, #25]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <HAL_CAN_Init+0x64>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	7e5b      	ldrb	r3, [r3, #25]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d004      	beq.n	8003744 <HAL_CAN_Init+0x64>
 800373a:	f240 111f 	movw	r1, #287	; 0x11f
 800373e:	4883      	ldr	r0, [pc, #524]	; (800394c <HAL_CAN_Init+0x26c>)
 8003740:	f7ff f88f 	bl	8002862 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	7e9b      	ldrb	r3, [r3, #26]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_CAN_Init+0x7e>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	7e9b      	ldrb	r3, [r3, #26]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d004      	beq.n	800375e <HAL_CAN_Init+0x7e>
 8003754:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003758:	487c      	ldr	r0, [pc, #496]	; (800394c <HAL_CAN_Init+0x26c>)
 800375a:	f7ff f882 	bl	8002862 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	7edb      	ldrb	r3, [r3, #27]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d008      	beq.n	8003778 <HAL_CAN_Init+0x98>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	7edb      	ldrb	r3, [r3, #27]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d004      	beq.n	8003778 <HAL_CAN_Init+0x98>
 800376e:	f240 1121 	movw	r1, #289	; 0x121
 8003772:	4876      	ldr	r0, [pc, #472]	; (800394c <HAL_CAN_Init+0x26c>)
 8003774:	f7ff f875 	bl	8002862 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	7f1b      	ldrb	r3, [r3, #28]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_CAN_Init+0xb2>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	7f1b      	ldrb	r3, [r3, #28]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d004      	beq.n	8003792 <HAL_CAN_Init+0xb2>
 8003788:	f44f 7191 	mov.w	r1, #290	; 0x122
 800378c:	486f      	ldr	r0, [pc, #444]	; (800394c <HAL_CAN_Init+0x26c>)
 800378e:	f7ff f868 	bl	8002862 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	7f5b      	ldrb	r3, [r3, #29]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <HAL_CAN_Init+0xcc>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	7f5b      	ldrb	r3, [r3, #29]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d004      	beq.n	80037ac <HAL_CAN_Init+0xcc>
 80037a2:	f240 1123 	movw	r1, #291	; 0x123
 80037a6:	4869      	ldr	r0, [pc, #420]	; (800394c <HAL_CAN_Init+0x26c>)
 80037a8:	f7ff f85b 	bl	8002862 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d013      	beq.n	80037dc <HAL_CAN_Init+0xfc>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037bc:	d00e      	beq.n	80037dc <HAL_CAN_Init+0xfc>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037c6:	d009      	beq.n	80037dc <HAL_CAN_Init+0xfc>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80037d0:	d004      	beq.n	80037dc <HAL_CAN_Init+0xfc>
 80037d2:	f44f 7192 	mov.w	r1, #292	; 0x124
 80037d6:	485d      	ldr	r0, [pc, #372]	; (800394c <HAL_CAN_Init+0x26c>)
 80037d8:	f7ff f843 	bl	8002862 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d013      	beq.n	800380c <HAL_CAN_Init+0x12c>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037ec:	d00e      	beq.n	800380c <HAL_CAN_Init+0x12c>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037f6:	d009      	beq.n	800380c <HAL_CAN_Init+0x12c>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003800:	d004      	beq.n	800380c <HAL_CAN_Init+0x12c>
 8003802:	f240 1125 	movw	r1, #293	; 0x125
 8003806:	4851      	ldr	r0, [pc, #324]	; (800394c <HAL_CAN_Init+0x26c>)
 8003808:	f7ff f82b 	bl	8002862 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d04f      	beq.n	80038b4 <HAL_CAN_Init+0x1d4>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381c:	d04a      	beq.n	80038b4 <HAL_CAN_Init+0x1d4>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003826:	d045      	beq.n	80038b4 <HAL_CAN_Init+0x1d4>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003830:	d040      	beq.n	80038b4 <HAL_CAN_Init+0x1d4>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800383a:	d03b      	beq.n	80038b4 <HAL_CAN_Init+0x1d4>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003844:	d036      	beq.n	80038b4 <HAL_CAN_Init+0x1d4>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800384e:	d031      	beq.n	80038b4 <HAL_CAN_Init+0x1d4>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8003858:	d02c      	beq.n	80038b4 <HAL_CAN_Init+0x1d4>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003862:	d027      	beq.n	80038b4 <HAL_CAN_Init+0x1d4>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 800386c:	d022      	beq.n	80038b4 <HAL_CAN_Init+0x1d4>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8003876:	d01d      	beq.n	80038b4 <HAL_CAN_Init+0x1d4>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8003880:	d018      	beq.n	80038b4 <HAL_CAN_Init+0x1d4>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800388a:	d013      	beq.n	80038b4 <HAL_CAN_Init+0x1d4>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8003894:	d00e      	beq.n	80038b4 <HAL_CAN_Init+0x1d4>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800389e:	d009      	beq.n	80038b4 <HAL_CAN_Init+0x1d4>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 80038a8:	d004      	beq.n	80038b4 <HAL_CAN_Init+0x1d4>
 80038aa:	f44f 7193 	mov.w	r1, #294	; 0x126
 80038ae:	4827      	ldr	r0, [pc, #156]	; (800394c <HAL_CAN_Init+0x26c>)
 80038b0:	f7fe ffd7 	bl	8002862 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d027      	beq.n	800390c <HAL_CAN_Init+0x22c>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038c4:	d022      	beq.n	800390c <HAL_CAN_Init+0x22c>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038ce:	d01d      	beq.n	800390c <HAL_CAN_Init+0x22c>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038d8:	d018      	beq.n	800390c <HAL_CAN_Init+0x22c>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038e2:	d013      	beq.n	800390c <HAL_CAN_Init+0x22c>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80038ec:	d00e      	beq.n	800390c <HAL_CAN_Init+0x22c>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80038f6:	d009      	beq.n	800390c <HAL_CAN_Init+0x22c>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8003900:	d004      	beq.n	800390c <HAL_CAN_Init+0x22c>
 8003902:	f240 1127 	movw	r1, #295	; 0x127
 8003906:	4811      	ldr	r0, [pc, #68]	; (800394c <HAL_CAN_Init+0x26c>)
 8003908:	f7fe ffab 	bl	8002862 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d004      	beq.n	800391e <HAL_CAN_Init+0x23e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391c:	d904      	bls.n	8003928 <HAL_CAN_Init+0x248>
 800391e:	f44f 7194 	mov.w	r1, #296	; 0x128
 8003922:	480a      	ldr	r0, [pc, #40]	; (800394c <HAL_CAN_Init+0x26c>)
 8003924:	f7fe ff9d 	bl	8002862 <assert_failed>

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d13d      	bne.n	80039b0 <HAL_CAN_Init+0x2d0>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a06      	ldr	r2, [pc, #24]	; (8003950 <HAL_CAN_Init+0x270>)
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a05      	ldr	r2, [pc, #20]	; (8003954 <HAL_CAN_Init+0x274>)
 800393e:	645a      	str	r2, [r3, #68]	; 0x44
 8003940:	e00a      	b.n	8003958 <HAL_CAN_Init+0x278>
 8003942:	bf00      	nop
 8003944:	40006400 	.word	0x40006400
 8003948:	40006800 	.word	0x40006800
 800394c:	0800bd4c 	.word	0x0800bd4c
 8003950:	0800190d 	.word	0x0800190d
 8003954:	0800475f 	.word	0x0800475f
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a8a      	ldr	r2, [pc, #552]	; (8003b84 <HAL_CAN_Init+0x4a4>)
 800395c:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a89      	ldr	r2, [pc, #548]	; (8003b88 <HAL_CAN_Init+0x4a8>)
 8003962:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a89      	ldr	r2, [pc, #548]	; (8003b8c <HAL_CAN_Init+0x4ac>)
 8003968:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a88      	ldr	r2, [pc, #544]	; (8003b90 <HAL_CAN_Init+0x4b0>)
 800396e:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a88      	ldr	r2, [pc, #544]	; (8003b94 <HAL_CAN_Init+0x4b4>)
 8003974:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a87      	ldr	r2, [pc, #540]	; (8003b98 <HAL_CAN_Init+0x4b8>)
 800397a:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a87      	ldr	r2, [pc, #540]	; (8003b9c <HAL_CAN_Init+0x4bc>)
 8003980:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a86      	ldr	r2, [pc, #536]	; (8003ba0 <HAL_CAN_Init+0x4c0>)
 8003986:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a86      	ldr	r2, [pc, #536]	; (8003ba4 <HAL_CAN_Init+0x4c4>)
 800398c:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a85      	ldr	r2, [pc, #532]	; (8003ba8 <HAL_CAN_Init+0x4c8>)
 8003992:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a85      	ldr	r2, [pc, #532]	; (8003bac <HAL_CAN_Init+0x4cc>)
 8003998:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d102      	bne.n	80039a8 <HAL_CAN_Init+0x2c8>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a82      	ldr	r2, [pc, #520]	; (8003bb0 <HAL_CAN_Init+0x4d0>)
 80039a6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039c0:	f7ff fa72 	bl	8002ea8 <HAL_GetTick>
 80039c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80039c6:	e012      	b.n	80039ee <HAL_CAN_Init+0x30e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80039c8:	f7ff fa6e 	bl	8002ea8 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b0a      	cmp	r3, #10
 80039d4:	d90b      	bls.n	80039ee <HAL_CAN_Init+0x30e>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2205      	movs	r2, #5
 80039e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e0c5      	b.n	8003b7a <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0e5      	beq.n	80039c8 <HAL_CAN_Init+0x2e8>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0202 	bic.w	r2, r2, #2
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a0c:	f7ff fa4c 	bl	8002ea8 <HAL_GetTick>
 8003a10:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a12:	e012      	b.n	8003a3a <HAL_CAN_Init+0x35a>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a14:	f7ff fa48 	bl	8002ea8 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b0a      	cmp	r3, #10
 8003a20:	d90b      	bls.n	8003a3a <HAL_CAN_Init+0x35a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2205      	movs	r2, #5
 8003a32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e09f      	b.n	8003b7a <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e5      	bne.n	8003a14 <HAL_CAN_Init+0x334>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	7e1b      	ldrb	r3, [r3, #24]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d108      	bne.n	8003a62 <HAL_CAN_Init+0x382>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	e007      	b.n	8003a72 <HAL_CAN_Init+0x392>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	7e5b      	ldrb	r3, [r3, #25]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d108      	bne.n	8003a8c <HAL_CAN_Init+0x3ac>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	e007      	b.n	8003a9c <HAL_CAN_Init+0x3bc>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	7e9b      	ldrb	r3, [r3, #26]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d108      	bne.n	8003ab6 <HAL_CAN_Init+0x3d6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0220 	orr.w	r2, r2, #32
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	e007      	b.n	8003ac6 <HAL_CAN_Init+0x3e6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0220 	bic.w	r2, r2, #32
 8003ac4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	7edb      	ldrb	r3, [r3, #27]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d108      	bne.n	8003ae0 <HAL_CAN_Init+0x400>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0210 	bic.w	r2, r2, #16
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	e007      	b.n	8003af0 <HAL_CAN_Init+0x410>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0210 	orr.w	r2, r2, #16
 8003aee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	7f1b      	ldrb	r3, [r3, #28]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d108      	bne.n	8003b0a <HAL_CAN_Init+0x42a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0208 	orr.w	r2, r2, #8
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	e007      	b.n	8003b1a <HAL_CAN_Init+0x43a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0208 	bic.w	r2, r2, #8
 8003b18:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	7f5b      	ldrb	r3, [r3, #29]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d108      	bne.n	8003b34 <HAL_CAN_Init+0x454>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0204 	orr.w	r2, r2, #4
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	e007      	b.n	8003b44 <HAL_CAN_Init+0x464>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0204 	bic.w	r2, r2, #4
 8003b42:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	ea42 0103 	orr.w	r1, r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	1e5a      	subs	r2, r3, #1
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	08004773 	.word	0x08004773
 8003b88:	08004787 	.word	0x08004787
 8003b8c:	080046e7 	.word	0x080046e7
 8003b90:	080046fb 	.word	0x080046fb
 8003b94:	0800470f 	.word	0x0800470f
 8003b98:	08004723 	.word	0x08004723
 8003b9c:	08004737 	.word	0x08004737
 8003ba0:	0800474b 	.word	0x0800474b
 8003ba4:	0800479b 	.word	0x0800479b
 8003ba8:	080047af 	.word	0x080047af
 8003bac:	080047c3 	.word	0x080047c3
 8003bb0:	08001c05 	.word	0x08001c05

08003bb4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bca:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003bcc:	7cfb      	ldrb	r3, [r7, #19]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d003      	beq.n	8003bda <HAL_CAN_ConfigFilter+0x26>
 8003bd2:	7cfb      	ldrb	r3, [r7, #19]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	f040 812c 	bne.w	8003e32 <HAL_CAN_ConfigFilter+0x27e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be2:	d304      	bcc.n	8003bee <HAL_CAN_ConfigFilter+0x3a>
 8003be4:	f44f 7154 	mov.w	r1, #848	; 0x350
 8003be8:	4897      	ldr	r0, [pc, #604]	; (8003e48 <HAL_CAN_ConfigFilter+0x294>)
 8003bea:	f7fe fe3a 	bl	8002862 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf6:	d304      	bcc.n	8003c02 <HAL_CAN_ConfigFilter+0x4e>
 8003bf8:	f240 3151 	movw	r1, #849	; 0x351
 8003bfc:	4892      	ldr	r0, [pc, #584]	; (8003e48 <HAL_CAN_ConfigFilter+0x294>)
 8003bfe:	f7fe fe30 	bl	8002862 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c0a:	d304      	bcc.n	8003c16 <HAL_CAN_ConfigFilter+0x62>
 8003c0c:	f240 3152 	movw	r1, #850	; 0x352
 8003c10:	488d      	ldr	r0, [pc, #564]	; (8003e48 <HAL_CAN_ConfigFilter+0x294>)
 8003c12:	f7fe fe26 	bl	8002862 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c1e:	d304      	bcc.n	8003c2a <HAL_CAN_ConfigFilter+0x76>
 8003c20:	f240 3153 	movw	r1, #851	; 0x353
 8003c24:	4888      	ldr	r0, [pc, #544]	; (8003e48 <HAL_CAN_ConfigFilter+0x294>)
 8003c26:	f7fe fe1c 	bl	8002862 <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d008      	beq.n	8003c44 <HAL_CAN_ConfigFilter+0x90>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d004      	beq.n	8003c44 <HAL_CAN_ConfigFilter+0x90>
 8003c3a:	f44f 7155 	mov.w	r1, #852	; 0x354
 8003c3e:	4882      	ldr	r0, [pc, #520]	; (8003e48 <HAL_CAN_ConfigFilter+0x294>)
 8003c40:	f7fe fe0f 	bl	8002862 <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_CAN_ConfigFilter+0xaa>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d004      	beq.n	8003c5e <HAL_CAN_ConfigFilter+0xaa>
 8003c54:	f240 3155 	movw	r1, #853	; 0x355
 8003c58:	487b      	ldr	r0, [pc, #492]	; (8003e48 <HAL_CAN_ConfigFilter+0x294>)
 8003c5a:	f7fe fe02 	bl	8002862 <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d008      	beq.n	8003c78 <HAL_CAN_ConfigFilter+0xc4>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d004      	beq.n	8003c78 <HAL_CAN_ConfigFilter+0xc4>
 8003c6e:	f240 3156 	movw	r1, #854	; 0x356
 8003c72:	4875      	ldr	r0, [pc, #468]	; (8003e48 <HAL_CAN_ConfigFilter+0x294>)
 8003c74:	f7fe fdf5 	bl	8002862 <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_CAN_ConfigFilter+0xde>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d004      	beq.n	8003c92 <HAL_CAN_ConfigFilter+0xde>
 8003c88:	f240 3157 	movw	r1, #855	; 0x357
 8003c8c:	486e      	ldr	r0, [pc, #440]	; (8003e48 <HAL_CAN_ConfigFilter+0x294>)
 8003c8e:	f7fe fde8 	bl	8002862 <assert_failed>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003c92:	4b6e      	ldr	r3, [pc, #440]	; (8003e4c <HAL_CAN_ConfigFilter+0x298>)
 8003c94:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	2b1b      	cmp	r3, #27
 8003c9c:	d904      	bls.n	8003ca8 <HAL_CAN_ConfigFilter+0xf4>
 8003c9e:	f240 3172 	movw	r1, #882	; 0x372
 8003ca2:	4869      	ldr	r0, [pc, #420]	; (8003e48 <HAL_CAN_ConfigFilter+0x294>)
 8003ca4:	f7fe fddd 	bl	8002862 <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	2b1b      	cmp	r3, #27
 8003cae:	d904      	bls.n	8003cba <HAL_CAN_ConfigFilter+0x106>
 8003cb0:	f240 3173 	movw	r1, #883	; 0x373
 8003cb4:	4864      	ldr	r0, [pc, #400]	; (8003e48 <HAL_CAN_ConfigFilter+0x294>)
 8003cb6:	f7fe fdd4 	bl	8002862 <assert_failed>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003cc0:	f043 0201 	orr.w	r2, r3, #1
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003cd0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	021b      	lsls	r3, r3, #8
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f003 031f 	and.w	r3, r3, #31
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	43db      	mvns	r3, r3
 8003d08:	401a      	ands	r2, r3
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d123      	bne.n	8003d60 <HAL_CAN_ConfigFilter+0x1ac>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	43db      	mvns	r3, r3
 8003d22:	401a      	ands	r2, r3
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d3a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	3248      	adds	r2, #72	; 0x48
 8003d40:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d54:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d56:	6979      	ldr	r1, [r7, #20]
 8003d58:	3348      	adds	r3, #72	; 0x48
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	440b      	add	r3, r1
 8003d5e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d122      	bne.n	8003dae <HAL_CAN_ConfigFilter+0x1fa>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	431a      	orrs	r2, r3
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d88:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	3248      	adds	r2, #72	; 0x48
 8003d8e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003da2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003da4:	6979      	ldr	r1, [r7, #20]
 8003da6:	3348      	adds	r3, #72	; 0x48
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	440b      	add	r3, r1
 8003dac:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <HAL_CAN_ConfigFilter+0x216>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	401a      	ands	r2, r3
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003dc8:	e007      	b.n	8003dda <HAL_CAN_ConfigFilter+0x226>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d109      	bne.n	8003df6 <HAL_CAN_ConfigFilter+0x242>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	43db      	mvns	r3, r3
 8003dec:	401a      	ands	r2, r3
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003df4:	e007      	b.n	8003e06 <HAL_CAN_ConfigFilter+0x252>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d107      	bne.n	8003e1e <HAL_CAN_ConfigFilter+0x26a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e24:	f023 0201 	bic.w	r2, r3, #1
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e006      	b.n	8003e40 <HAL_CAN_ConfigFilter+0x28c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
  }
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	0800bd4c 	.word	0x0800bd4c
 8003e4c:	40006400 	.word	0x40006400

08003e50 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d12e      	bne.n	8003ec2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0201 	bic.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e7c:	f7ff f814 	bl	8002ea8 <HAL_GetTick>
 8003e80:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e82:	e012      	b.n	8003eaa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e84:	f7ff f810 	bl	8002ea8 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b0a      	cmp	r3, #10
 8003e90:	d90b      	bls.n	8003eaa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2205      	movs	r2, #5
 8003ea2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e012      	b.n	8003ed0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e5      	bne.n	8003e84 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	e006      	b.n	8003ed0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
  }
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eec:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d008      	beq.n	8003f10 <HAL_CAN_AddTxMessage+0x38>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d004      	beq.n	8003f10 <HAL_CAN_AddTxMessage+0x38>
 8003f06:	f240 41e9 	movw	r1, #1257	; 0x4e9
 8003f0a:	4884      	ldr	r0, [pc, #528]	; (800411c <HAL_CAN_AddTxMessage+0x244>)
 8003f0c:	f7fe fca9 	bl	8002862 <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d008      	beq.n	8003f2a <HAL_CAN_AddTxMessage+0x52>
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d004      	beq.n	8003f2a <HAL_CAN_AddTxMessage+0x52>
 8003f20:	f240 41ea 	movw	r1, #1258	; 0x4ea
 8003f24:	487d      	ldr	r0, [pc, #500]	; (800411c <HAL_CAN_AddTxMessage+0x244>)
 8003f26:	f7fe fc9c 	bl	8002862 <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d904      	bls.n	8003f3c <HAL_CAN_AddTxMessage+0x64>
 8003f32:	f240 41eb 	movw	r1, #1259	; 0x4eb
 8003f36:	4879      	ldr	r0, [pc, #484]	; (800411c <HAL_CAN_AddTxMessage+0x244>)
 8003f38:	f7fe fc93 	bl	8002862 <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10a      	bne.n	8003f5a <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f4c:	d30f      	bcc.n	8003f6e <HAL_CAN_AddTxMessage+0x96>
 8003f4e:	f240 41ee 	movw	r1, #1262	; 0x4ee
 8003f52:	4872      	ldr	r0, [pc, #456]	; (800411c <HAL_CAN_AddTxMessage+0x244>)
 8003f54:	f7fe fc85 	bl	8002862 <assert_failed>
 8003f58:	e009      	b.n	8003f6e <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f62:	d304      	bcc.n	8003f6e <HAL_CAN_AddTxMessage+0x96>
 8003f64:	f240 41f2 	movw	r1, #1266	; 0x4f2
 8003f68:	486c      	ldr	r0, [pc, #432]	; (800411c <HAL_CAN_AddTxMessage+0x244>)
 8003f6a:	f7fe fc7a 	bl	8002862 <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	7d1b      	ldrb	r3, [r3, #20]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d008      	beq.n	8003f88 <HAL_CAN_AddTxMessage+0xb0>
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	7d1b      	ldrb	r3, [r3, #20]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d004      	beq.n	8003f88 <HAL_CAN_AddTxMessage+0xb0>
 8003f7e:	f240 41f4 	movw	r1, #1268	; 0x4f4
 8003f82:	4866      	ldr	r0, [pc, #408]	; (800411c <HAL_CAN_AddTxMessage+0x244>)
 8003f84:	f7fe fc6d 	bl	8002862 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8003f88:	7ffb      	ldrb	r3, [r7, #31]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d003      	beq.n	8003f96 <HAL_CAN_AddTxMessage+0xbe>
 8003f8e:	7ffb      	ldrb	r3, [r7, #31]
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	f040 80b8 	bne.w	8004106 <HAL_CAN_AddTxMessage+0x22e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d105      	bne.n	8003fb6 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80a0 	beq.w	80040f6 <HAL_CAN_AddTxMessage+0x21e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	0e1b      	lsrs	r3, r3, #24
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d907      	bls.n	8003fd6 <HAL_CAN_AddTxMessage+0xfe>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e09e      	b.n	8004114 <HAL_CAN_AddTxMessage+0x23c>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	409a      	lsls	r2, r3
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10d      	bne.n	8004004 <HAL_CAN_AddTxMessage+0x12c>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003ff2:	68f9      	ldr	r1, [r7, #12]
 8003ff4:	6809      	ldr	r1, [r1, #0]
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	3318      	adds	r3, #24
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	440b      	add	r3, r1
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e00f      	b.n	8004024 <HAL_CAN_AddTxMessage+0x14c>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800400e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004014:	68f9      	ldr	r1, [r7, #12]
 8004016:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004018:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	3318      	adds	r3, #24
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	440b      	add	r3, r1
 8004022:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6819      	ldr	r1, [r3, #0]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	3318      	adds	r3, #24
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	440b      	add	r3, r1
 8004034:	3304      	adds	r3, #4
 8004036:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	7d1b      	ldrb	r3, [r3, #20]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d111      	bne.n	8004064 <HAL_CAN_AddTxMessage+0x18c>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	3318      	adds	r3, #24
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	4413      	add	r3, r2
 800404c:	3304      	adds	r3, #4
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	6811      	ldr	r1, [r2, #0]
 8004054:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	3318      	adds	r3, #24
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	440b      	add	r3, r1
 8004060:	3304      	adds	r3, #4
 8004062:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3307      	adds	r3, #7
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	061a      	lsls	r2, r3, #24
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3306      	adds	r3, #6
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	041b      	lsls	r3, r3, #16
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3305      	adds	r3, #5
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	4313      	orrs	r3, r2
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	3204      	adds	r2, #4
 8004084:	7812      	ldrb	r2, [r2, #0]
 8004086:	4610      	mov	r0, r2
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	6811      	ldr	r1, [r2, #0]
 800408c:	ea43 0200 	orr.w	r2, r3, r0
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	440b      	add	r3, r1
 8004096:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800409a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3303      	adds	r3, #3
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	061a      	lsls	r2, r3, #24
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3302      	adds	r3, #2
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	041b      	lsls	r3, r3, #16
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3301      	adds	r3, #1
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	4313      	orrs	r3, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	7812      	ldrb	r2, [r2, #0]
 80040bc:	4610      	mov	r0, r2
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	6811      	ldr	r1, [r2, #0]
 80040c2:	ea43 0200 	orr.w	r2, r3, r0
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	440b      	add	r3, r1
 80040cc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80040d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	3318      	adds	r3, #24
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	4413      	add	r3, r2
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	6811      	ldr	r1, [r2, #0]
 80040e4:	f043 0201 	orr.w	r2, r3, #1
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	3318      	adds	r3, #24
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	440b      	add	r3, r1
 80040f0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e00e      	b.n	8004114 <HAL_CAN_AddTxMessage+0x23c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e006      	b.n	8004114 <HAL_CAN_AddTxMessage+0x23c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
  }
}
 8004114:	4618      	mov	r0, r3
 8004116:	3720      	adds	r7, #32
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	0800bd4c 	.word	0x0800bd4c

08004120 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004134:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d007      	beq.n	800414c <HAL_CAN_GetRxMessage+0x2c>
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d004      	beq.n	800414c <HAL_CAN_GetRxMessage+0x2c>
 8004142:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 8004146:	4884      	ldr	r0, [pc, #528]	; (8004358 <HAL_CAN_GetRxMessage+0x238>)
 8004148:	f7fe fb8b 	bl	8002862 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 800414c:	7dfb      	ldrb	r3, [r7, #23]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d003      	beq.n	800415a <HAL_CAN_GetRxMessage+0x3a>
 8004152:	7dfb      	ldrb	r3, [r7, #23]
 8004154:	2b02      	cmp	r3, #2
 8004156:	f040 80f3 	bne.w	8004340 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10e      	bne.n	800417e <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d116      	bne.n	800419c <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e0e7      	b.n	800434e <HAL_CAN_GetRxMessage+0x22e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f003 0303 	and.w	r3, r3, #3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d107      	bne.n	800419c <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0d8      	b.n	800434e <HAL_CAN_GetRxMessage+0x22e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	331b      	adds	r3, #27
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	4413      	add	r3, r2
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0204 	and.w	r2, r3, #4
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10c      	bne.n	80041d4 <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	331b      	adds	r3, #27
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	4413      	add	r3, r2
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	0d5b      	lsrs	r3, r3, #21
 80041ca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	e00b      	b.n	80041ec <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	331b      	adds	r3, #27
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	4413      	add	r3, r2
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	08db      	lsrs	r3, r3, #3
 80041e4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	331b      	adds	r3, #27
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	4413      	add	r3, r2
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0202 	and.w	r2, r3, #2
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	331b      	adds	r3, #27
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	4413      	add	r3, r2
 800420e:	3304      	adds	r3, #4
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 020f 	and.w	r2, r3, #15
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	331b      	adds	r3, #27
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	4413      	add	r3, r2
 8004226:	3304      	adds	r3, #4
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	0a1b      	lsrs	r3, r3, #8
 800422c:	b2da      	uxtb	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	331b      	adds	r3, #27
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	4413      	add	r3, r2
 800423e:	3304      	adds	r3, #4
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	0c1b      	lsrs	r3, r3, #16
 8004244:	b29a      	uxth	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	4413      	add	r3, r2
 8004254:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	b2da      	uxtb	r2, r3
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	4413      	add	r3, r2
 800426a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	0a1a      	lsrs	r2, r3, #8
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	3301      	adds	r3, #1
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	4413      	add	r3, r2
 8004284:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	0c1a      	lsrs	r2, r3, #16
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	3302      	adds	r3, #2
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	4413      	add	r3, r2
 800429e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	0e1a      	lsrs	r2, r3, #24
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	3303      	adds	r3, #3
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	3304      	adds	r3, #4
 80042c2:	b2d2      	uxtb	r2, r2
 80042c4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	0a1a      	lsrs	r2, r3, #8
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	3305      	adds	r3, #5
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	0c1a      	lsrs	r2, r3, #16
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	3306      	adds	r3, #6
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	4413      	add	r3, r2
 8004304:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	0e1a      	lsrs	r2, r3, #24
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	3307      	adds	r3, #7
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d108      	bne.n	800432c <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 0220 	orr.w	r2, r2, #32
 8004328:	60da      	str	r2, [r3, #12]
 800432a:	e007      	b.n	800433c <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	691a      	ldr	r2, [r3, #16]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0220 	orr.w	r2, r2, #32
 800433a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800433c:	2300      	movs	r3, #0
 800433e:	e006      	b.n	800434e <HAL_CAN_GetRxMessage+0x22e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004344:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
  }
}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	0800bd4c 	.word	0x0800bd4c

0800435c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004364:	2300      	movs	r3, #0
 8004366:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 8083 	beq.w	80044aa <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d025      	beq.n	80043fa <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2201      	movs	r2, #1
 80043b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d004      	beq.n	80043ca <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	4798      	blx	r3
 80043c8:	e017      	b.n	80043fa <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d004      	beq.n	80043de <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
 80043dc:	e00d      	b.n	80043fa <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	f003 0308 	and.w	r3, r3, #8
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
 80043f0:	e003      	b.n	80043fa <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004400:	2b00      	cmp	r3, #0
 8004402:	d026      	beq.n	8004452 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800440c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004414:	2b00      	cmp	r3, #0
 8004416:	d004      	beq.n	8004422 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	4798      	blx	r3
 8004420:	e017      	b.n	8004452 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004428:	2b00      	cmp	r3, #0
 800442a:	d004      	beq.n	8004436 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004432:	627b      	str	r3, [r7, #36]	; 0x24
 8004434:	e00d      	b.n	8004452 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800443c:	2b00      	cmp	r3, #0
 800443e:	d004      	beq.n	800444a <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
 8004448:	e003      	b.n	8004452 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d026      	beq.n	80044aa <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004464:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d004      	beq.n	800447a <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4798      	blx	r3
 8004478:	e017      	b.n	80044aa <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d004      	beq.n	800448e <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
 800448c:	e00d      	b.n	80044aa <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d004      	beq.n	80044a2 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
 80044a0:	e003      	b.n	80044aa <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00c      	beq.n	80044ce <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d007      	beq.n	80044ce <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2210      	movs	r2, #16
 80044cc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00c      	beq.n	80044f2 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2208      	movs	r2, #8
 80044e8:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f003 0303 	and.w	r3, r3, #3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00c      	beq.n	8004536 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f003 0310 	and.w	r3, r3, #16
 8004522:	2b00      	cmp	r3, #0
 8004524:	d007      	beq.n	8004536 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800452c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2210      	movs	r2, #16
 8004534:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00c      	beq.n	800455a <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d007      	beq.n	800455a <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2208      	movs	r2, #8
 8004550:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	f003 0310 	and.w	r3, r3, #16
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00c      	beq.n	800459e <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b00      	cmp	r3, #0
 800458c:	d007      	beq.n	800459e <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2210      	movs	r2, #16
 8004594:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00c      	beq.n	80045c2 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d007      	beq.n	80045c2 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2208      	movs	r2, #8
 80045b8:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d07b      	beq.n	80046c4 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d072      	beq.n	80046bc <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d008      	beq.n	80045f2 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	f043 0301 	orr.w	r3, r3, #1
 80045f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	f043 0302 	orr.w	r3, r3, #2
 800460c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004614:	2b00      	cmp	r3, #0
 8004616:	d008      	beq.n	800462a <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	f043 0304 	orr.w	r3, r3, #4
 8004628:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004630:	2b00      	cmp	r3, #0
 8004632:	d043      	beq.n	80046bc <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800463a:	2b00      	cmp	r3, #0
 800463c:	d03e      	beq.n	80046bc <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004644:	2b60      	cmp	r3, #96	; 0x60
 8004646:	d02b      	beq.n	80046a0 <HAL_CAN_IRQHandler+0x344>
 8004648:	2b60      	cmp	r3, #96	; 0x60
 800464a:	d82e      	bhi.n	80046aa <HAL_CAN_IRQHandler+0x34e>
 800464c:	2b50      	cmp	r3, #80	; 0x50
 800464e:	d022      	beq.n	8004696 <HAL_CAN_IRQHandler+0x33a>
 8004650:	2b50      	cmp	r3, #80	; 0x50
 8004652:	d82a      	bhi.n	80046aa <HAL_CAN_IRQHandler+0x34e>
 8004654:	2b40      	cmp	r3, #64	; 0x40
 8004656:	d019      	beq.n	800468c <HAL_CAN_IRQHandler+0x330>
 8004658:	2b40      	cmp	r3, #64	; 0x40
 800465a:	d826      	bhi.n	80046aa <HAL_CAN_IRQHandler+0x34e>
 800465c:	2b30      	cmp	r3, #48	; 0x30
 800465e:	d010      	beq.n	8004682 <HAL_CAN_IRQHandler+0x326>
 8004660:	2b30      	cmp	r3, #48	; 0x30
 8004662:	d822      	bhi.n	80046aa <HAL_CAN_IRQHandler+0x34e>
 8004664:	2b10      	cmp	r3, #16
 8004666:	d002      	beq.n	800466e <HAL_CAN_IRQHandler+0x312>
 8004668:	2b20      	cmp	r3, #32
 800466a:	d005      	beq.n	8004678 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800466c:	e01d      	b.n	80046aa <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	f043 0308 	orr.w	r3, r3, #8
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004676:	e019      	b.n	80046ac <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	f043 0310 	orr.w	r3, r3, #16
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004680:	e014      	b.n	80046ac <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	f043 0320 	orr.w	r3, r3, #32
 8004688:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800468a:	e00f      	b.n	80046ac <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004694:	e00a      	b.n	80046ac <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800469e:	e005      	b.n	80046ac <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80046a8:	e000      	b.n	80046ac <HAL_CAN_IRQHandler+0x350>
            break;
 80046aa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80046ba:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2204      	movs	r2, #4
 80046c2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d009      	beq.n	80046de <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80046de:	bf00      	nop
 80046e0:	3728      	adds	r7, #40	; 0x28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047e8:	4b0c      	ldr	r3, [pc, #48]	; (800481c <__NVIC_SetPriorityGrouping+0x44>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047f4:	4013      	ands	r3, r2
 80047f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800480a:	4a04      	ldr	r2, [pc, #16]	; (800481c <__NVIC_SetPriorityGrouping+0x44>)
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	60d3      	str	r3, [r2, #12]
}
 8004810:	bf00      	nop
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	e000ed00 	.word	0xe000ed00

08004820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004824:	4b04      	ldr	r3, [pc, #16]	; (8004838 <__NVIC_GetPriorityGrouping+0x18>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	0a1b      	lsrs	r3, r3, #8
 800482a:	f003 0307 	and.w	r3, r3, #7
}
 800482e:	4618      	mov	r0, r3
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	e000ed00 	.word	0xe000ed00

0800483c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	4603      	mov	r3, r0
 8004844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800484a:	2b00      	cmp	r3, #0
 800484c:	db0b      	blt.n	8004866 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800484e:	79fb      	ldrb	r3, [r7, #7]
 8004850:	f003 021f 	and.w	r2, r3, #31
 8004854:	4907      	ldr	r1, [pc, #28]	; (8004874 <__NVIC_EnableIRQ+0x38>)
 8004856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485a:	095b      	lsrs	r3, r3, #5
 800485c:	2001      	movs	r0, #1
 800485e:	fa00 f202 	lsl.w	r2, r0, r2
 8004862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	e000e100 	.word	0xe000e100

08004878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	4603      	mov	r3, r0
 8004880:	6039      	str	r1, [r7, #0]
 8004882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004888:	2b00      	cmp	r3, #0
 800488a:	db0a      	blt.n	80048a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	b2da      	uxtb	r2, r3
 8004890:	490c      	ldr	r1, [pc, #48]	; (80048c4 <__NVIC_SetPriority+0x4c>)
 8004892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004896:	0112      	lsls	r2, r2, #4
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	440b      	add	r3, r1
 800489c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048a0:	e00a      	b.n	80048b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	4908      	ldr	r1, [pc, #32]	; (80048c8 <__NVIC_SetPriority+0x50>)
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	3b04      	subs	r3, #4
 80048b0:	0112      	lsls	r2, r2, #4
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	440b      	add	r3, r1
 80048b6:	761a      	strb	r2, [r3, #24]
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	e000e100 	.word	0xe000e100
 80048c8:	e000ed00 	.word	0xe000ed00

080048cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b089      	sub	sp, #36	; 0x24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	f1c3 0307 	rsb	r3, r3, #7
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	bf28      	it	cs
 80048ea:	2304      	movcs	r3, #4
 80048ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	3304      	adds	r3, #4
 80048f2:	2b06      	cmp	r3, #6
 80048f4:	d902      	bls.n	80048fc <NVIC_EncodePriority+0x30>
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	3b03      	subs	r3, #3
 80048fa:	e000      	b.n	80048fe <NVIC_EncodePriority+0x32>
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004900:	f04f 32ff 	mov.w	r2, #4294967295
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	43da      	mvns	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	401a      	ands	r2, r3
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004914:	f04f 31ff 	mov.w	r1, #4294967295
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	fa01 f303 	lsl.w	r3, r1, r3
 800491e:	43d9      	mvns	r1, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004924:	4313      	orrs	r3, r2
         );
}
 8004926:	4618      	mov	r0, r3
 8004928:	3724      	adds	r7, #36	; 0x24
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
	...

08004934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b07      	cmp	r3, #7
 8004940:	d00f      	beq.n	8004962 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b06      	cmp	r3, #6
 8004946:	d00c      	beq.n	8004962 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b05      	cmp	r3, #5
 800494c:	d009      	beq.n	8004962 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b04      	cmp	r3, #4
 8004952:	d006      	beq.n	8004962 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b03      	cmp	r3, #3
 8004958:	d003      	beq.n	8004962 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800495a:	2190      	movs	r1, #144	; 0x90
 800495c:	4804      	ldr	r0, [pc, #16]	; (8004970 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800495e:	f7fd ff80 	bl	8002862 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff ff38 	bl	80047d8 <__NVIC_SetPriorityGrouping>
}
 8004968:	bf00      	nop
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	0800bd84 	.word	0x0800bd84

08004974 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b0f      	cmp	r3, #15
 800498a:	d903      	bls.n	8004994 <HAL_NVIC_SetPriority+0x20>
 800498c:	21a8      	movs	r1, #168	; 0xa8
 800498e:	480e      	ldr	r0, [pc, #56]	; (80049c8 <HAL_NVIC_SetPriority+0x54>)
 8004990:	f7fd ff67 	bl	8002862 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2b0f      	cmp	r3, #15
 8004998:	d903      	bls.n	80049a2 <HAL_NVIC_SetPriority+0x2e>
 800499a:	21a9      	movs	r1, #169	; 0xa9
 800499c:	480a      	ldr	r0, [pc, #40]	; (80049c8 <HAL_NVIC_SetPriority+0x54>)
 800499e:	f7fd ff60 	bl	8002862 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049a2:	f7ff ff3d 	bl	8004820 <__NVIC_GetPriorityGrouping>
 80049a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	6978      	ldr	r0, [r7, #20]
 80049ae:	f7ff ff8d 	bl	80048cc <NVIC_EncodePriority>
 80049b2:	4602      	mov	r2, r0
 80049b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049b8:	4611      	mov	r1, r2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff ff5c 	bl	8004878 <__NVIC_SetPriority>
}
 80049c0:	bf00      	nop
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	0800bd84 	.word	0x0800bd84

080049cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80049d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	da03      	bge.n	80049e6 <HAL_NVIC_EnableIRQ+0x1a>
 80049de:	21bc      	movs	r1, #188	; 0xbc
 80049e0:	4805      	ldr	r0, [pc, #20]	; (80049f8 <HAL_NVIC_EnableIRQ+0x2c>)
 80049e2:	f7fd ff3e 	bl	8002862 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff ff26 	bl	800483c <__NVIC_EnableIRQ>
}
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	0800bd84 	.word	0x0800bd84

080049fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a08:	f7fe fa4e 	bl	8002ea8 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e203      	b.n	8004e20 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a8b      	ldr	r2, [pc, #556]	; (8004c4c <HAL_DMA_Init+0x250>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d04e      	beq.n	8004ac0 <HAL_DMA_Init+0xc4>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a8a      	ldr	r2, [pc, #552]	; (8004c50 <HAL_DMA_Init+0x254>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d049      	beq.n	8004ac0 <HAL_DMA_Init+0xc4>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a88      	ldr	r2, [pc, #544]	; (8004c54 <HAL_DMA_Init+0x258>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d044      	beq.n	8004ac0 <HAL_DMA_Init+0xc4>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a87      	ldr	r2, [pc, #540]	; (8004c58 <HAL_DMA_Init+0x25c>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d03f      	beq.n	8004ac0 <HAL_DMA_Init+0xc4>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a85      	ldr	r2, [pc, #532]	; (8004c5c <HAL_DMA_Init+0x260>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d03a      	beq.n	8004ac0 <HAL_DMA_Init+0xc4>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a84      	ldr	r2, [pc, #528]	; (8004c60 <HAL_DMA_Init+0x264>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d035      	beq.n	8004ac0 <HAL_DMA_Init+0xc4>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a82      	ldr	r2, [pc, #520]	; (8004c64 <HAL_DMA_Init+0x268>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d030      	beq.n	8004ac0 <HAL_DMA_Init+0xc4>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a81      	ldr	r2, [pc, #516]	; (8004c68 <HAL_DMA_Init+0x26c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d02b      	beq.n	8004ac0 <HAL_DMA_Init+0xc4>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a7f      	ldr	r2, [pc, #508]	; (8004c6c <HAL_DMA_Init+0x270>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d026      	beq.n	8004ac0 <HAL_DMA_Init+0xc4>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a7e      	ldr	r2, [pc, #504]	; (8004c70 <HAL_DMA_Init+0x274>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d021      	beq.n	8004ac0 <HAL_DMA_Init+0xc4>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a7c      	ldr	r2, [pc, #496]	; (8004c74 <HAL_DMA_Init+0x278>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d01c      	beq.n	8004ac0 <HAL_DMA_Init+0xc4>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a7b      	ldr	r2, [pc, #492]	; (8004c78 <HAL_DMA_Init+0x27c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d017      	beq.n	8004ac0 <HAL_DMA_Init+0xc4>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a79      	ldr	r2, [pc, #484]	; (8004c7c <HAL_DMA_Init+0x280>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d012      	beq.n	8004ac0 <HAL_DMA_Init+0xc4>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a78      	ldr	r2, [pc, #480]	; (8004c80 <HAL_DMA_Init+0x284>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00d      	beq.n	8004ac0 <HAL_DMA_Init+0xc4>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a76      	ldr	r2, [pc, #472]	; (8004c84 <HAL_DMA_Init+0x288>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d008      	beq.n	8004ac0 <HAL_DMA_Init+0xc4>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a75      	ldr	r2, [pc, #468]	; (8004c88 <HAL_DMA_Init+0x28c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d003      	beq.n	8004ac0 <HAL_DMA_Init+0xc4>
 8004ab8:	21b7      	movs	r1, #183	; 0xb7
 8004aba:	4874      	ldr	r0, [pc, #464]	; (8004c8c <HAL_DMA_Init+0x290>)
 8004abc:	f7fd fed1 	bl	8002862 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d026      	beq.n	8004b16 <HAL_DMA_Init+0x11a>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ad0:	d021      	beq.n	8004b16 <HAL_DMA_Init+0x11a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ada:	d01c      	beq.n	8004b16 <HAL_DMA_Init+0x11a>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8004ae4:	d017      	beq.n	8004b16 <HAL_DMA_Init+0x11a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aee:	d012      	beq.n	8004b16 <HAL_DMA_Init+0x11a>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8004af8:	d00d      	beq.n	8004b16 <HAL_DMA_Init+0x11a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004b02:	d008      	beq.n	8004b16 <HAL_DMA_Init+0x11a>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8004b0c:	d003      	beq.n	8004b16 <HAL_DMA_Init+0x11a>
 8004b0e:	21b8      	movs	r1, #184	; 0xb8
 8004b10:	485e      	ldr	r0, [pc, #376]	; (8004c8c <HAL_DMA_Init+0x290>)
 8004b12:	f7fd fea6 	bl	8002862 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00b      	beq.n	8004b36 <HAL_DMA_Init+0x13a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2b40      	cmp	r3, #64	; 0x40
 8004b24:	d007      	beq.n	8004b36 <HAL_DMA_Init+0x13a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2b80      	cmp	r3, #128	; 0x80
 8004b2c:	d003      	beq.n	8004b36 <HAL_DMA_Init+0x13a>
 8004b2e:	21b9      	movs	r1, #185	; 0xb9
 8004b30:	4856      	ldr	r0, [pc, #344]	; (8004c8c <HAL_DMA_Init+0x290>)
 8004b32:	f7fd fe96 	bl	8002862 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b3e:	d007      	beq.n	8004b50 <HAL_DMA_Init+0x154>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <HAL_DMA_Init+0x154>
 8004b48:	21ba      	movs	r1, #186	; 0xba
 8004b4a:	4850      	ldr	r0, [pc, #320]	; (8004c8c <HAL_DMA_Init+0x290>)
 8004b4c:	f7fd fe89 	bl	8002862 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b58:	d007      	beq.n	8004b6a <HAL_DMA_Init+0x16e>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_DMA_Init+0x16e>
 8004b62:	21bb      	movs	r1, #187	; 0xbb
 8004b64:	4849      	ldr	r0, [pc, #292]	; (8004c8c <HAL_DMA_Init+0x290>)
 8004b66:	f7fd fe7c 	bl	8002862 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00d      	beq.n	8004b8e <HAL_DMA_Init+0x192>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b7a:	d008      	beq.n	8004b8e <HAL_DMA_Init+0x192>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b84:	d003      	beq.n	8004b8e <HAL_DMA_Init+0x192>
 8004b86:	21bc      	movs	r1, #188	; 0xbc
 8004b88:	4840      	ldr	r0, [pc, #256]	; (8004c8c <HAL_DMA_Init+0x290>)
 8004b8a:	f7fd fe6a 	bl	8002862 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00d      	beq.n	8004bb2 <HAL_DMA_Init+0x1b6>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b9e:	d008      	beq.n	8004bb2 <HAL_DMA_Init+0x1b6>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ba8:	d003      	beq.n	8004bb2 <HAL_DMA_Init+0x1b6>
 8004baa:	21bd      	movs	r1, #189	; 0xbd
 8004bac:	4837      	ldr	r0, [pc, #220]	; (8004c8c <HAL_DMA_Init+0x290>)
 8004bae:	f7fd fe58 	bl	8002862 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00c      	beq.n	8004bd4 <HAL_DMA_Init+0x1d8>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc2:	d007      	beq.n	8004bd4 <HAL_DMA_Init+0x1d8>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	2b20      	cmp	r3, #32
 8004bca:	d003      	beq.n	8004bd4 <HAL_DMA_Init+0x1d8>
 8004bcc:	21be      	movs	r1, #190	; 0xbe
 8004bce:	482f      	ldr	r0, [pc, #188]	; (8004c8c <HAL_DMA_Init+0x290>)
 8004bd0:	f7fd fe47 	bl	8002862 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d012      	beq.n	8004c02 <HAL_DMA_Init+0x206>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be4:	d00d      	beq.n	8004c02 <HAL_DMA_Init+0x206>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bee:	d008      	beq.n	8004c02 <HAL_DMA_Init+0x206>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bf8:	d003      	beq.n	8004c02 <HAL_DMA_Init+0x206>
 8004bfa:	21bf      	movs	r1, #191	; 0xbf
 8004bfc:	4823      	ldr	r0, [pc, #140]	; (8004c8c <HAL_DMA_Init+0x290>)
 8004bfe:	f7fd fe30 	bl	8002862 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d007      	beq.n	8004c1a <HAL_DMA_Init+0x21e>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d003      	beq.n	8004c1a <HAL_DMA_Init+0x21e>
 8004c12:	21c0      	movs	r1, #192	; 0xc0
 8004c14:	481d      	ldr	r0, [pc, #116]	; (8004c8c <HAL_DMA_Init+0x290>)
 8004c16:	f7fd fe24 	bl	8002862 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d064      	beq.n	8004cec <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d032      	beq.n	8004c90 <HAL_DMA_Init+0x294>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d02e      	beq.n	8004c90 <HAL_DMA_Init+0x294>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d02a      	beq.n	8004c90 <HAL_DMA_Init+0x294>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	2b03      	cmp	r3, #3
 8004c40:	d026      	beq.n	8004c90 <HAL_DMA_Init+0x294>
 8004c42:	21c5      	movs	r1, #197	; 0xc5
 8004c44:	4811      	ldr	r0, [pc, #68]	; (8004c8c <HAL_DMA_Init+0x290>)
 8004c46:	f7fd fe0c 	bl	8002862 <assert_failed>
 8004c4a:	e021      	b.n	8004c90 <HAL_DMA_Init+0x294>
 8004c4c:	40026010 	.word	0x40026010
 8004c50:	40026028 	.word	0x40026028
 8004c54:	40026040 	.word	0x40026040
 8004c58:	40026058 	.word	0x40026058
 8004c5c:	40026070 	.word	0x40026070
 8004c60:	40026088 	.word	0x40026088
 8004c64:	400260a0 	.word	0x400260a0
 8004c68:	400260b8 	.word	0x400260b8
 8004c6c:	40026410 	.word	0x40026410
 8004c70:	40026428 	.word	0x40026428
 8004c74:	40026440 	.word	0x40026440
 8004c78:	40026458 	.word	0x40026458
 8004c7c:	40026470 	.word	0x40026470
 8004c80:	40026488 	.word	0x40026488
 8004c84:	400264a0 	.word	0x400264a0
 8004c88:	400264b8 	.word	0x400264b8
 8004c8c:	0800bdc0 	.word	0x0800bdc0
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d012      	beq.n	8004cbe <HAL_DMA_Init+0x2c2>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ca0:	d00d      	beq.n	8004cbe <HAL_DMA_Init+0x2c2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004caa:	d008      	beq.n	8004cbe <HAL_DMA_Init+0x2c2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cb4:	d003      	beq.n	8004cbe <HAL_DMA_Init+0x2c2>
 8004cb6:	21c6      	movs	r1, #198	; 0xc6
 8004cb8:	485b      	ldr	r0, [pc, #364]	; (8004e28 <HAL_DMA_Init+0x42c>)
 8004cba:	f7fd fdd2 	bl	8002862 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d012      	beq.n	8004cec <HAL_DMA_Init+0x2f0>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cce:	d00d      	beq.n	8004cec <HAL_DMA_Init+0x2f0>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cd8:	d008      	beq.n	8004cec <HAL_DMA_Init+0x2f0>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004ce2:	d003      	beq.n	8004cec <HAL_DMA_Init+0x2f0>
 8004ce4:	21c7      	movs	r1, #199	; 0xc7
 8004ce6:	4850      	ldr	r0, [pc, #320]	; (8004e28 <HAL_DMA_Init+0x42c>)
 8004ce8:	f7fd fdbb 	bl	8002862 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0201 	bic.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d0c:	e00f      	b.n	8004d2e <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d0e:	f7fe f8cb 	bl	8002ea8 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b05      	cmp	r3, #5
 8004d1a:	d908      	bls.n	8004d2e <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2203      	movs	r2, #3
 8004d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e078      	b.n	8004e20 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1e8      	bne.n	8004d0e <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	4b39      	ldr	r3, [pc, #228]	; (8004e2c <HAL_DMA_Init+0x430>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d107      	bne.n	8004d98 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	4313      	orrs	r3, r2
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f023 0307 	bic.w	r3, r3, #7
 8004dae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d117      	bne.n	8004df2 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00e      	beq.n	8004df2 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fa1b 	bl	8005210 <DMA_CheckFifoParam>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2240      	movs	r2, #64	; 0x40
 8004de4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004dee:	2301      	movs	r3, #1
 8004df0:	e016      	b.n	8004e20 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f9d2 	bl	80051a4 <DMA_CalcBaseAndBitshift>
 8004e00:	4603      	mov	r3, r0
 8004e02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e08:	223f      	movs	r2, #63	; 0x3f
 8004e0a:	409a      	lsls	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	0800bdc0 	.word	0x0800bdc0
 8004e2c:	f010803f 	.word	0xf010803f

08004e30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d004      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2280      	movs	r2, #128	; 0x80
 8004e48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e00c      	b.n	8004e68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2205      	movs	r2, #5
 8004e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0201 	bic.w	r2, r2, #1
 8004e64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e80:	4b8e      	ldr	r3, [pc, #568]	; (80050bc <HAL_DMA_IRQHandler+0x248>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a8e      	ldr	r2, [pc, #568]	; (80050c0 <HAL_DMA_IRQHandler+0x24c>)
 8004e86:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8a:	0a9b      	lsrs	r3, r3, #10
 8004e8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e9e:	2208      	movs	r2, #8
 8004ea0:	409a      	lsls	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01a      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d013      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0204 	bic.w	r2, r2, #4
 8004ec6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ecc:	2208      	movs	r2, #8
 8004ece:	409a      	lsls	r2, r3
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed8:	f043 0201 	orr.w	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	409a      	lsls	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4013      	ands	r3, r2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d012      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00b      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f02:	2201      	movs	r2, #1
 8004f04:	409a      	lsls	r2, r3
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0e:	f043 0202 	orr.w	r2, r3, #2
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1a:	2204      	movs	r2, #4
 8004f1c:	409a      	lsls	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4013      	ands	r3, r2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d012      	beq.n	8004f4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00b      	beq.n	8004f4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f38:	2204      	movs	r2, #4
 8004f3a:	409a      	lsls	r2, r3
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f44:	f043 0204 	orr.w	r2, r3, #4
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f50:	2210      	movs	r2, #16
 8004f52:	409a      	lsls	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4013      	ands	r3, r2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d043      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d03c      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f6e:	2210      	movs	r2, #16
 8004f70:	409a      	lsls	r2, r3
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d018      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d108      	bne.n	8004fa4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d024      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	4798      	blx	r3
 8004fa2:	e01f      	b.n	8004fe4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d01b      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	4798      	blx	r3
 8004fb4:	e016      	b.n	8004fe4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d107      	bne.n	8004fd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0208 	bic.w	r2, r2, #8
 8004fd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe8:	2220      	movs	r2, #32
 8004fea:	409a      	lsls	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 808f 	beq.w	8005114 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 8087 	beq.w	8005114 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500a:	2220      	movs	r2, #32
 800500c:	409a      	lsls	r2, r3
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b05      	cmp	r3, #5
 800501c:	d136      	bne.n	800508c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0216 	bic.w	r2, r2, #22
 800502c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695a      	ldr	r2, [r3, #20]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800503c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d103      	bne.n	800504e <HAL_DMA_IRQHandler+0x1da>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800504a:	2b00      	cmp	r3, #0
 800504c:	d007      	beq.n	800505e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0208 	bic.w	r2, r2, #8
 800505c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005062:	223f      	movs	r2, #63	; 0x3f
 8005064:	409a      	lsls	r2, r3
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800507e:	2b00      	cmp	r3, #0
 8005080:	d07e      	beq.n	8005180 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	4798      	blx	r3
        }
        return;
 800508a:	e079      	b.n	8005180 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d01d      	beq.n	80050d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10d      	bne.n	80050c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d031      	beq.n	8005114 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	4798      	blx	r3
 80050b8:	e02c      	b.n	8005114 <HAL_DMA_IRQHandler+0x2a0>
 80050ba:	bf00      	nop
 80050bc:	20000040 	.word	0x20000040
 80050c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d023      	beq.n	8005114 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	4798      	blx	r3
 80050d4:	e01e      	b.n	8005114 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10f      	bne.n	8005104 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0210 	bic.w	r2, r2, #16
 80050f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005118:	2b00      	cmp	r3, #0
 800511a:	d032      	beq.n	8005182 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d022      	beq.n	800516e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2205      	movs	r2, #5
 800512c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0201 	bic.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	3301      	adds	r3, #1
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	429a      	cmp	r2, r3
 800514a:	d307      	bcc.n	800515c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f2      	bne.n	8005140 <HAL_DMA_IRQHandler+0x2cc>
 800515a:	e000      	b.n	800515e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800515c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d005      	beq.n	8005182 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	4798      	blx	r3
 800517e:	e000      	b.n	8005182 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005180:	bf00      	nop
    }
  }
}
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005196:	b2db      	uxtb	r3, r3
}
 8005198:	4618      	mov	r0, r3
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	3b10      	subs	r3, #16
 80051b4:	4a14      	ldr	r2, [pc, #80]	; (8005208 <DMA_CalcBaseAndBitshift+0x64>)
 80051b6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ba:	091b      	lsrs	r3, r3, #4
 80051bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80051be:	4a13      	ldr	r2, [pc, #76]	; (800520c <DMA_CalcBaseAndBitshift+0x68>)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	d909      	bls.n	80051e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051da:	f023 0303 	bic.w	r3, r3, #3
 80051de:	1d1a      	adds	r2, r3, #4
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	659a      	str	r2, [r3, #88]	; 0x58
 80051e4:	e007      	b.n	80051f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80051ee:	f023 0303 	bic.w	r3, r3, #3
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	aaaaaaab 	.word	0xaaaaaaab
 800520c:	0800bfd0 	.word	0x0800bfd0

08005210 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005218:	2300      	movs	r3, #0
 800521a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005220:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d11f      	bne.n	800526a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b03      	cmp	r3, #3
 800522e:	d856      	bhi.n	80052de <DMA_CheckFifoParam+0xce>
 8005230:	a201      	add	r2, pc, #4	; (adr r2, 8005238 <DMA_CheckFifoParam+0x28>)
 8005232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005236:	bf00      	nop
 8005238:	08005249 	.word	0x08005249
 800523c:	0800525b 	.word	0x0800525b
 8005240:	08005249 	.word	0x08005249
 8005244:	080052df 	.word	0x080052df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d046      	beq.n	80052e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005258:	e043      	b.n	80052e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005262:	d140      	bne.n	80052e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005268:	e03d      	b.n	80052e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005272:	d121      	bne.n	80052b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b03      	cmp	r3, #3
 8005278:	d837      	bhi.n	80052ea <DMA_CheckFifoParam+0xda>
 800527a:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <DMA_CheckFifoParam+0x70>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	08005291 	.word	0x08005291
 8005284:	08005297 	.word	0x08005297
 8005288:	08005291 	.word	0x08005291
 800528c:	080052a9 	.word	0x080052a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	73fb      	strb	r3, [r7, #15]
      break;
 8005294:	e030      	b.n	80052f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d025      	beq.n	80052ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052a6:	e022      	b.n	80052ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052b0:	d11f      	bne.n	80052f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80052b6:	e01c      	b.n	80052f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d903      	bls.n	80052c6 <DMA_CheckFifoParam+0xb6>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b03      	cmp	r3, #3
 80052c2:	d003      	beq.n	80052cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80052c4:	e018      	b.n	80052f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	73fb      	strb	r3, [r7, #15]
      break;
 80052ca:	e015      	b.n	80052f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00e      	beq.n	80052f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	73fb      	strb	r3, [r7, #15]
      break;
 80052dc:	e00b      	b.n	80052f6 <DMA_CheckFifoParam+0xe6>
      break;
 80052de:	bf00      	nop
 80052e0:	e00a      	b.n	80052f8 <DMA_CheckFifoParam+0xe8>
      break;
 80052e2:	bf00      	nop
 80052e4:	e008      	b.n	80052f8 <DMA_CheckFifoParam+0xe8>
      break;
 80052e6:	bf00      	nop
 80052e8:	e006      	b.n	80052f8 <DMA_CheckFifoParam+0xe8>
      break;
 80052ea:	bf00      	nop
 80052ec:	e004      	b.n	80052f8 <DMA_CheckFifoParam+0xe8>
      break;
 80052ee:	bf00      	nop
 80052f0:	e002      	b.n	80052f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80052f2:	bf00      	nop
 80052f4:	e000      	b.n	80052f8 <DMA_CheckFifoParam+0xe8>
      break;
 80052f6:	bf00      	nop
    }
  } 
  
  return status; 
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop

08005308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b088      	sub	sp, #32
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005316:	2300      	movs	r3, #0
 8005318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800531a:	2300      	movs	r3, #0
 800531c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a37      	ldr	r2, [pc, #220]	; (8005400 <HAL_GPIO_Init+0xf8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d01f      	beq.n	8005366 <HAL_GPIO_Init+0x5e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a36      	ldr	r2, [pc, #216]	; (8005404 <HAL_GPIO_Init+0xfc>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d01b      	beq.n	8005366 <HAL_GPIO_Init+0x5e>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a35      	ldr	r2, [pc, #212]	; (8005408 <HAL_GPIO_Init+0x100>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d017      	beq.n	8005366 <HAL_GPIO_Init+0x5e>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a34      	ldr	r2, [pc, #208]	; (800540c <HAL_GPIO_Init+0x104>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d013      	beq.n	8005366 <HAL_GPIO_Init+0x5e>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a33      	ldr	r2, [pc, #204]	; (8005410 <HAL_GPIO_Init+0x108>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00f      	beq.n	8005366 <HAL_GPIO_Init+0x5e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a32      	ldr	r2, [pc, #200]	; (8005414 <HAL_GPIO_Init+0x10c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00b      	beq.n	8005366 <HAL_GPIO_Init+0x5e>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a31      	ldr	r2, [pc, #196]	; (8005418 <HAL_GPIO_Init+0x110>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d007      	beq.n	8005366 <HAL_GPIO_Init+0x5e>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a30      	ldr	r2, [pc, #192]	; (800541c <HAL_GPIO_Init+0x114>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d003      	beq.n	8005366 <HAL_GPIO_Init+0x5e>
 800535e:	21ac      	movs	r1, #172	; 0xac
 8005360:	482f      	ldr	r0, [pc, #188]	; (8005420 <HAL_GPIO_Init+0x118>)
 8005362:	f7fd fa7e 	bl	8002862 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	b29b      	uxth	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d005      	beq.n	800537c <HAL_GPIO_Init+0x74>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	0c1b      	lsrs	r3, r3, #16
 8005376:	041b      	lsls	r3, r3, #16
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <HAL_GPIO_Init+0x7c>
 800537c:	21ad      	movs	r1, #173	; 0xad
 800537e:	4828      	ldr	r0, [pc, #160]	; (8005420 <HAL_GPIO_Init+0x118>)
 8005380:	f7fd fa6f 	bl	8002862 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d035      	beq.n	80053f8 <HAL_GPIO_Init+0xf0>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d031      	beq.n	80053f8 <HAL_GPIO_Init+0xf0>
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2b11      	cmp	r3, #17
 800539a:	d02d      	beq.n	80053f8 <HAL_GPIO_Init+0xf0>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d029      	beq.n	80053f8 <HAL_GPIO_Init+0xf0>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b12      	cmp	r3, #18
 80053aa:	d025      	beq.n	80053f8 <HAL_GPIO_Init+0xf0>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80053b4:	d020      	beq.n	80053f8 <HAL_GPIO_Init+0xf0>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80053be:	d01b      	beq.n	80053f8 <HAL_GPIO_Init+0xf0>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80053c8:	d016      	beq.n	80053f8 <HAL_GPIO_Init+0xf0>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80053d2:	d011      	beq.n	80053f8 <HAL_GPIO_Init+0xf0>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80053dc:	d00c      	beq.n	80053f8 <HAL_GPIO_Init+0xf0>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80053e6:	d007      	beq.n	80053f8 <HAL_GPIO_Init+0xf0>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b03      	cmp	r3, #3
 80053ee:	d003      	beq.n	80053f8 <HAL_GPIO_Init+0xf0>
 80053f0:	21ae      	movs	r1, #174	; 0xae
 80053f2:	480b      	ldr	r0, [pc, #44]	; (8005420 <HAL_GPIO_Init+0x118>)
 80053f4:	f7fd fa35 	bl	8002862 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053f8:	2300      	movs	r3, #0
 80053fa:	61fb      	str	r3, [r7, #28]
 80053fc:	e289      	b.n	8005912 <HAL_GPIO_Init+0x60a>
 80053fe:	bf00      	nop
 8005400:	40020000 	.word	0x40020000
 8005404:	40020400 	.word	0x40020400
 8005408:	40020800 	.word	0x40020800
 800540c:	40020c00 	.word	0x40020c00
 8005410:	40021000 	.word	0x40021000
 8005414:	40021400 	.word	0x40021400
 8005418:	40021800 	.word	0x40021800
 800541c:	40021c00 	.word	0x40021c00
 8005420:	0800bdf8 	.word	0x0800bdf8
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005424:	2201      	movs	r2, #1
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	4013      	ands	r3, r2
 8005436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	429a      	cmp	r2, r3
 800543e:	f040 8265 	bne.w	800590c <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f003 0303 	and.w	r3, r3, #3
 800544a:	2b01      	cmp	r3, #1
 800544c:	d005      	beq.n	800545a <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005456:	2b02      	cmp	r3, #2
 8005458:	d144      	bne.n	80054e4 <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00f      	beq.n	8005482 <HAL_GPIO_Init+0x17a>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d00b      	beq.n	8005482 <HAL_GPIO_Init+0x17a>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d007      	beq.n	8005482 <HAL_GPIO_Init+0x17a>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	2b03      	cmp	r3, #3
 8005478:	d003      	beq.n	8005482 <HAL_GPIO_Init+0x17a>
 800547a:	21c0      	movs	r1, #192	; 0xc0
 800547c:	4831      	ldr	r0, [pc, #196]	; (8005544 <HAL_GPIO_Init+0x23c>)
 800547e:	f7fd f9f0 	bl	8002862 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	2203      	movs	r2, #3
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	43db      	mvns	r3, r3
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	4013      	ands	r3, r2
 8005498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054b8:	2201      	movs	r2, #1
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	fa02 f303 	lsl.w	r3, r2, r3
 80054c0:	43db      	mvns	r3, r3
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	4013      	ands	r3, r2
 80054c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	091b      	lsrs	r3, r3, #4
 80054ce:	f003 0201 	and.w	r2, r3, #1
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	4313      	orrs	r3, r2
 80054dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f003 0303 	and.w	r3, r3, #3
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d02b      	beq.n	8005548 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00b      	beq.n	8005510 <HAL_GPIO_Init+0x208>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d007      	beq.n	8005510 <HAL_GPIO_Init+0x208>
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2b02      	cmp	r3, #2
 8005506:	d003      	beq.n	8005510 <HAL_GPIO_Init+0x208>
 8005508:	21d1      	movs	r1, #209	; 0xd1
 800550a:	480e      	ldr	r0, [pc, #56]	; (8005544 <HAL_GPIO_Init+0x23c>)
 800550c:	f7fd f9a9 	bl	8002862 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	2203      	movs	r2, #3
 800551c:	fa02 f303 	lsl.w	r3, r2, r3
 8005520:	43db      	mvns	r3, r3
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	4013      	ands	r3, r2
 8005526:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	fa02 f303 	lsl.w	r3, r2, r3
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	4313      	orrs	r3, r2
 8005538:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	60da      	str	r2, [r3, #12]
 8005540:	e002      	b.n	8005548 <HAL_GPIO_Init+0x240>
 8005542:	bf00      	nop
 8005544:	0800bdf8 	.word	0x0800bdf8
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f003 0303 	and.w	r3, r3, #3
 8005550:	2b02      	cmp	r3, #2
 8005552:	f040 810c 	bne.w	800576e <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 80e3 	beq.w	8005726 <HAL_GPIO_Init+0x41e>
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	2b09      	cmp	r3, #9
 8005566:	f000 80de 	beq.w	8005726 <HAL_GPIO_Init+0x41e>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 80d9 	beq.w	8005726 <HAL_GPIO_Init+0x41e>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 80d4 	beq.w	8005726 <HAL_GPIO_Init+0x41e>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 80cf 	beq.w	8005726 <HAL_GPIO_Init+0x41e>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 80ca 	beq.w	8005726 <HAL_GPIO_Init+0x41e>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2b01      	cmp	r3, #1
 8005598:	f000 80c5 	beq.w	8005726 <HAL_GPIO_Init+0x41e>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	f000 80c0 	beq.w	8005726 <HAL_GPIO_Init+0x41e>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	f000 80bb 	beq.w	8005726 <HAL_GPIO_Init+0x41e>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	f000 80b6 	beq.w	8005726 <HAL_GPIO_Init+0x41e>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	f000 80b1 	beq.w	8005726 <HAL_GPIO_Init+0x41e>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	f000 80ac 	beq.w	8005726 <HAL_GPIO_Init+0x41e>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	f000 80a7 	beq.w	8005726 <HAL_GPIO_Init+0x41e>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	2b04      	cmp	r3, #4
 80055de:	f000 80a2 	beq.w	8005726 <HAL_GPIO_Init+0x41e>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	f000 809d 	beq.w	8005726 <HAL_GPIO_Init+0x41e>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	2b05      	cmp	r3, #5
 80055f2:	f000 8098 	beq.w	8005726 <HAL_GPIO_Init+0x41e>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	2b05      	cmp	r3, #5
 80055fc:	f000 8093 	beq.w	8005726 <HAL_GPIO_Init+0x41e>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	2b09      	cmp	r3, #9
 8005606:	f000 808e 	beq.w	8005726 <HAL_GPIO_Init+0x41e>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	2b06      	cmp	r3, #6
 8005610:	f000 8089 	beq.w	8005726 <HAL_GPIO_Init+0x41e>
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	2b09      	cmp	r3, #9
 800561a:	f000 8084 	beq.w	8005726 <HAL_GPIO_Init+0x41e>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	2b07      	cmp	r3, #7
 8005624:	d07f      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	2b07      	cmp	r3, #7
 800562c:	d07b      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	2b07      	cmp	r3, #7
 8005634:	d077      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	2b08      	cmp	r3, #8
 800563c:	d073      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	2b08      	cmp	r3, #8
 8005644:	d06f      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b08      	cmp	r3, #8
 800564c:	d06b      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b09      	cmp	r3, #9
 8005654:	d067      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	2b09      	cmp	r3, #9
 800565c:	d063      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b0a      	cmp	r3, #10
 8005664:	d05f      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b0a      	cmp	r3, #10
 800566c:	d05b      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	2b0b      	cmp	r3, #11
 8005674:	d057      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	2b0c      	cmp	r3, #12
 800567c:	d053      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b0c      	cmp	r3, #12
 8005684:	d04f      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	2b0d      	cmp	r3, #13
 800568c:	d04b      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	2b0f      	cmp	r3, #15
 8005694:	d047      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	2b05      	cmp	r3, #5
 800569c:	d043      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2b0c      	cmp	r3, #12
 80056a4:	d03f      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	2b06      	cmp	r3, #6
 80056ac:	d03b      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d037      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d033      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	2b05      	cmp	r3, #5
 80056c4:	d02f      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	2b06      	cmp	r3, #6
 80056cc:	d02b      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	2b06      	cmp	r3, #6
 80056d4:	d027      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2b07      	cmp	r3, #7
 80056dc:	d023      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	2b07      	cmp	r3, #7
 80056e4:	d01f      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	2b07      	cmp	r3, #7
 80056ec:	d01b      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	2b07      	cmp	r3, #7
 80056f4:	d017      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d013      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	2b08      	cmp	r3, #8
 8005704:	d00f      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	2b09      	cmp	r3, #9
 800570c:	d00b      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b0a      	cmp	r3, #10
 8005714:	d007      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b0a      	cmp	r3, #10
 800571c:	d003      	beq.n	8005726 <HAL_GPIO_Init+0x41e>
 800571e:	21de      	movs	r1, #222	; 0xde
 8005720:	4880      	ldr	r0, [pc, #512]	; (8005924 <HAL_GPIO_Init+0x61c>)
 8005722:	f7fd f89e 	bl	8002862 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	08da      	lsrs	r2, r3, #3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3208      	adds	r2, #8
 800572e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	f003 0307 	and.w	r3, r3, #7
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	220f      	movs	r2, #15
 800573e:	fa02 f303 	lsl.w	r3, r2, r3
 8005742:	43db      	mvns	r3, r3
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	4013      	ands	r3, r2
 8005748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	691a      	ldr	r2, [r3, #16]
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	4313      	orrs	r3, r2
 800575e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	08da      	lsrs	r2, r3, #3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3208      	adds	r2, #8
 8005768:	69b9      	ldr	r1, [r7, #24]
 800576a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	2203      	movs	r2, #3
 800577a:	fa02 f303 	lsl.w	r3, r2, r3
 800577e:	43db      	mvns	r3, r3
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	4013      	ands	r3, r2
 8005784:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f003 0203 	and.w	r2, r3, #3
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	fa02 f303 	lsl.w	r3, r2, r3
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	4313      	orrs	r3, r2
 800579a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 80ae 	beq.w	800590c <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057b0:	2300      	movs	r3, #0
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	4b5c      	ldr	r3, [pc, #368]	; (8005928 <HAL_GPIO_Init+0x620>)
 80057b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b8:	4a5b      	ldr	r2, [pc, #364]	; (8005928 <HAL_GPIO_Init+0x620>)
 80057ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057be:	6453      	str	r3, [r2, #68]	; 0x44
 80057c0:	4b59      	ldr	r3, [pc, #356]	; (8005928 <HAL_GPIO_Init+0x620>)
 80057c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057cc:	4a57      	ldr	r2, [pc, #348]	; (800592c <HAL_GPIO_Init+0x624>)
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	089b      	lsrs	r3, r3, #2
 80057d2:	3302      	adds	r3, #2
 80057d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	f003 0303 	and.w	r3, r3, #3
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	220f      	movs	r2, #15
 80057e4:	fa02 f303 	lsl.w	r3, r2, r3
 80057e8:	43db      	mvns	r3, r3
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	4013      	ands	r3, r2
 80057ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a4f      	ldr	r2, [pc, #316]	; (8005930 <HAL_GPIO_Init+0x628>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d025      	beq.n	8005844 <HAL_GPIO_Init+0x53c>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a4e      	ldr	r2, [pc, #312]	; (8005934 <HAL_GPIO_Init+0x62c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d01f      	beq.n	8005840 <HAL_GPIO_Init+0x538>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a4d      	ldr	r2, [pc, #308]	; (8005938 <HAL_GPIO_Init+0x630>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d019      	beq.n	800583c <HAL_GPIO_Init+0x534>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a4c      	ldr	r2, [pc, #304]	; (800593c <HAL_GPIO_Init+0x634>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d013      	beq.n	8005838 <HAL_GPIO_Init+0x530>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a4b      	ldr	r2, [pc, #300]	; (8005940 <HAL_GPIO_Init+0x638>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00d      	beq.n	8005834 <HAL_GPIO_Init+0x52c>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a4a      	ldr	r2, [pc, #296]	; (8005944 <HAL_GPIO_Init+0x63c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d007      	beq.n	8005830 <HAL_GPIO_Init+0x528>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a49      	ldr	r2, [pc, #292]	; (8005948 <HAL_GPIO_Init+0x640>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d101      	bne.n	800582c <HAL_GPIO_Init+0x524>
 8005828:	2306      	movs	r3, #6
 800582a:	e00c      	b.n	8005846 <HAL_GPIO_Init+0x53e>
 800582c:	2307      	movs	r3, #7
 800582e:	e00a      	b.n	8005846 <HAL_GPIO_Init+0x53e>
 8005830:	2305      	movs	r3, #5
 8005832:	e008      	b.n	8005846 <HAL_GPIO_Init+0x53e>
 8005834:	2304      	movs	r3, #4
 8005836:	e006      	b.n	8005846 <HAL_GPIO_Init+0x53e>
 8005838:	2303      	movs	r3, #3
 800583a:	e004      	b.n	8005846 <HAL_GPIO_Init+0x53e>
 800583c:	2302      	movs	r3, #2
 800583e:	e002      	b.n	8005846 <HAL_GPIO_Init+0x53e>
 8005840:	2301      	movs	r3, #1
 8005842:	e000      	b.n	8005846 <HAL_GPIO_Init+0x53e>
 8005844:	2300      	movs	r3, #0
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	f002 0203 	and.w	r2, r2, #3
 800584c:	0092      	lsls	r2, r2, #2
 800584e:	4093      	lsls	r3, r2
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	4313      	orrs	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005856:	4935      	ldr	r1, [pc, #212]	; (800592c <HAL_GPIO_Init+0x624>)
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	089b      	lsrs	r3, r3, #2
 800585c:	3302      	adds	r3, #2
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005864:	4b39      	ldr	r3, [pc, #228]	; (800594c <HAL_GPIO_Init+0x644>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	43db      	mvns	r3, r3
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	4013      	ands	r3, r2
 8005872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	4313      	orrs	r3, r2
 8005886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005888:	4a30      	ldr	r2, [pc, #192]	; (800594c <HAL_GPIO_Init+0x644>)
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800588e:	4b2f      	ldr	r3, [pc, #188]	; (800594c <HAL_GPIO_Init+0x644>)
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	43db      	mvns	r3, r3
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	4013      	ands	r3, r2
 800589c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058b2:	4a26      	ldr	r2, [pc, #152]	; (800594c <HAL_GPIO_Init+0x644>)
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058b8:	4b24      	ldr	r3, [pc, #144]	; (800594c <HAL_GPIO_Init+0x644>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	43db      	mvns	r3, r3
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	4013      	ands	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d003      	beq.n	80058dc <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058dc:	4a1b      	ldr	r2, [pc, #108]	; (800594c <HAL_GPIO_Init+0x644>)
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058e2:	4b1a      	ldr	r3, [pc, #104]	; (800594c <HAL_GPIO_Init+0x644>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	43db      	mvns	r3, r3
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	4013      	ands	r3, r2
 80058f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	4313      	orrs	r3, r2
 8005904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005906:	4a11      	ldr	r2, [pc, #68]	; (800594c <HAL_GPIO_Init+0x644>)
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	3301      	adds	r3, #1
 8005910:	61fb      	str	r3, [r7, #28]
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	2b0f      	cmp	r3, #15
 8005916:	f67f ad85 	bls.w	8005424 <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 800591a:	bf00      	nop
 800591c:	bf00      	nop
 800591e:	3720      	adds	r7, #32
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	0800bdf8 	.word	0x0800bdf8
 8005928:	40023800 	.word	0x40023800
 800592c:	40013800 	.word	0x40013800
 8005930:	40020000 	.word	0x40020000
 8005934:	40020400 	.word	0x40020400
 8005938:	40020800 	.word	0x40020800
 800593c:	40020c00 	.word	0x40020c00
 8005940:	40021000 	.word	0x40021000
 8005944:	40021400 	.word	0x40021400
 8005948:	40021800 	.word	0x40021800
 800594c:	40013c00 	.word	0x40013c00

08005950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	807b      	strh	r3, [r7, #2]
 800595c:	4613      	mov	r3, r2
 800595e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8005960:	887b      	ldrh	r3, [r7, #2]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d004      	beq.n	8005970 <HAL_GPIO_WritePin+0x20>
 8005966:	887b      	ldrh	r3, [r7, #2]
 8005968:	0c1b      	lsrs	r3, r3, #16
 800596a:	041b      	lsls	r3, r3, #16
 800596c:	2b00      	cmp	r3, #0
 800596e:	d004      	beq.n	800597a <HAL_GPIO_WritePin+0x2a>
 8005970:	f240 119d 	movw	r1, #413	; 0x19d
 8005974:	480e      	ldr	r0, [pc, #56]	; (80059b0 <HAL_GPIO_WritePin+0x60>)
 8005976:	f7fc ff74 	bl	8002862 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800597a:	787b      	ldrb	r3, [r7, #1]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d007      	beq.n	8005990 <HAL_GPIO_WritePin+0x40>
 8005980:	787b      	ldrb	r3, [r7, #1]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d004      	beq.n	8005990 <HAL_GPIO_WritePin+0x40>
 8005986:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800598a:	4809      	ldr	r0, [pc, #36]	; (80059b0 <HAL_GPIO_WritePin+0x60>)
 800598c:	f7fc ff69 	bl	8002862 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8005990:	787b      	ldrb	r3, [r7, #1]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005996:	887a      	ldrh	r2, [r7, #2]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800599c:	e003      	b.n	80059a6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800599e:	887b      	ldrh	r3, [r7, #2]
 80059a0:	041a      	lsls	r2, r3, #16
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	619a      	str	r2, [r3, #24]
}
 80059a6:	bf00      	nop
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	0800bdf8 	.word	0x0800bdf8

080059b4 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80059c0:	887b      	ldrh	r3, [r7, #2]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d004      	beq.n	80059d0 <HAL_GPIO_TogglePin+0x1c>
 80059c6:	887b      	ldrh	r3, [r7, #2]
 80059c8:	0c1b      	lsrs	r3, r3, #16
 80059ca:	041b      	lsls	r3, r3, #16
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d004      	beq.n	80059da <HAL_GPIO_TogglePin+0x26>
 80059d0:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80059d4:	480a      	ldr	r0, [pc, #40]	; (8005a00 <HAL_GPIO_TogglePin+0x4c>)
 80059d6:	f7fc ff44 	bl	8002862 <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059e0:	887a      	ldrh	r2, [r7, #2]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4013      	ands	r3, r2
 80059e6:	041a      	lsls	r2, r3, #16
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	43d9      	mvns	r1, r3
 80059ec:	887b      	ldrh	r3, [r7, #2]
 80059ee:	400b      	ands	r3, r1
 80059f0:	431a      	orrs	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	619a      	str	r2, [r3, #24]
}
 80059f6:	bf00      	nop
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	0800bdf8 	.word	0x0800bdf8

08005a04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e1bd      	b.n	8005d92 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a93      	ldr	r2, [pc, #588]	; (8005c68 <HAL_I2C_Init+0x264>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d00e      	beq.n	8005a3e <HAL_I2C_Init+0x3a>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a91      	ldr	r2, [pc, #580]	; (8005c6c <HAL_I2C_Init+0x268>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d009      	beq.n	8005a3e <HAL_I2C_Init+0x3a>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a90      	ldr	r2, [pc, #576]	; (8005c70 <HAL_I2C_Init+0x26c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d004      	beq.n	8005a3e <HAL_I2C_Init+0x3a>
 8005a34:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8005a38:	488e      	ldr	r0, [pc, #568]	; (8005c74 <HAL_I2C_Init+0x270>)
 8005a3a:	f7fc ff12 	bl	8002862 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d004      	beq.n	8005a50 <HAL_I2C_Init+0x4c>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	4a8b      	ldr	r2, [pc, #556]	; (8005c78 <HAL_I2C_Init+0x274>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d904      	bls.n	8005a5a <HAL_I2C_Init+0x56>
 8005a50:	f240 11bf 	movw	r1, #447	; 0x1bf
 8005a54:	4887      	ldr	r0, [pc, #540]	; (8005c74 <HAL_I2C_Init+0x270>)
 8005a56:	f7fc ff04 	bl	8002862 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d009      	beq.n	8005a76 <HAL_I2C_Init+0x72>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a6a:	d004      	beq.n	8005a76 <HAL_I2C_Init+0x72>
 8005a6c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8005a70:	4880      	ldr	r0, [pc, #512]	; (8005c74 <HAL_I2C_Init+0x270>)
 8005a72:	f7fc fef6 	bl	8002862 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005a7e:	f023 0303 	bic.w	r3, r3, #3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d004      	beq.n	8005a90 <HAL_I2C_Init+0x8c>
 8005a86:	f240 11c1 	movw	r1, #449	; 0x1c1
 8005a8a:	487a      	ldr	r0, [pc, #488]	; (8005c74 <HAL_I2C_Init+0x270>)
 8005a8c:	f7fc fee9 	bl	8002862 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a98:	d009      	beq.n	8005aae <HAL_I2C_Init+0xaa>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005aa2:	d004      	beq.n	8005aae <HAL_I2C_Init+0xaa>
 8005aa4:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8005aa8:	4872      	ldr	r0, [pc, #456]	; (8005c74 <HAL_I2C_Init+0x270>)
 8005aaa:	f7fc feda 	bl	8002862 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d008      	beq.n	8005ac8 <HAL_I2C_Init+0xc4>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d004      	beq.n	8005ac8 <HAL_I2C_Init+0xc4>
 8005abe:	f240 11c3 	movw	r1, #451	; 0x1c3
 8005ac2:	486c      	ldr	r0, [pc, #432]	; (8005c74 <HAL_I2C_Init+0x270>)
 8005ac4:	f7fc fecd 	bl	8002862 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d004      	beq.n	8005ade <HAL_I2C_Init+0xda>
 8005ad4:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8005ad8:	4866      	ldr	r0, [pc, #408]	; (8005c74 <HAL_I2C_Init+0x270>)
 8005ada:	f7fc fec2 	bl	8002862 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d008      	beq.n	8005af8 <HAL_I2C_Init+0xf4>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	2b40      	cmp	r3, #64	; 0x40
 8005aec:	d004      	beq.n	8005af8 <HAL_I2C_Init+0xf4>
 8005aee:	f240 11c5 	movw	r1, #453	; 0x1c5
 8005af2:	4860      	ldr	r0, [pc, #384]	; (8005c74 <HAL_I2C_Init+0x270>)
 8005af4:	f7fc feb5 	bl	8002862 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d008      	beq.n	8005b12 <HAL_I2C_Init+0x10e>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	2b80      	cmp	r3, #128	; 0x80
 8005b06:	d004      	beq.n	8005b12 <HAL_I2C_Init+0x10e>
 8005b08:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8005b0c:	4859      	ldr	r0, [pc, #356]	; (8005c74 <HAL_I2C_Init+0x270>)
 8005b0e:	f7fc fea8 	bl	8002862 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d106      	bne.n	8005b2c <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7fc fd44 	bl	80025b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2224      	movs	r2, #36	; 0x24
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f022 0201 	bic.w	r2, r2, #1
 8005b42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b64:	f001 fff8 	bl	8007b58 <HAL_RCC_GetPCLK1Freq>
 8005b68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	4a43      	ldr	r2, [pc, #268]	; (8005c7c <HAL_I2C_Init+0x278>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d807      	bhi.n	8005b84 <HAL_I2C_Init+0x180>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4a42      	ldr	r2, [pc, #264]	; (8005c80 <HAL_I2C_Init+0x27c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	bf94      	ite	ls
 8005b7c:	2301      	movls	r3, #1
 8005b7e:	2300      	movhi	r3, #0
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	e006      	b.n	8005b92 <HAL_I2C_Init+0x18e>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4a3f      	ldr	r2, [pc, #252]	; (8005c84 <HAL_I2C_Init+0x280>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	bf94      	ite	ls
 8005b8c:	2301      	movls	r3, #1
 8005b8e:	2300      	movhi	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e0fb      	b.n	8005d92 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4a3a      	ldr	r2, [pc, #232]	; (8005c88 <HAL_I2C_Init+0x284>)
 8005b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba2:	0c9b      	lsrs	r3, r3, #18
 8005ba4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	4a2c      	ldr	r2, [pc, #176]	; (8005c7c <HAL_I2C_Init+0x278>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d802      	bhi.n	8005bd4 <HAL_I2C_Init+0x1d0>
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	e009      	b.n	8005be8 <HAL_I2C_Init+0x1e4>
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005bda:	fb02 f303 	mul.w	r3, r2, r3
 8005bde:	4a2b      	ldr	r2, [pc, #172]	; (8005c8c <HAL_I2C_Init+0x288>)
 8005be0:	fba2 2303 	umull	r2, r3, r2, r3
 8005be4:	099b      	lsrs	r3, r3, #6
 8005be6:	3301      	adds	r3, #1
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6812      	ldr	r2, [r2, #0]
 8005bec:	430b      	orrs	r3, r1
 8005bee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005bfa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	491e      	ldr	r1, [pc, #120]	; (8005c7c <HAL_I2C_Init+0x278>)
 8005c04:	428b      	cmp	r3, r1
 8005c06:	d819      	bhi.n	8005c3c <HAL_I2C_Init+0x238>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	1e59      	subs	r1, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	005b      	lsls	r3, r3, #1
 8005c12:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c16:	1c59      	adds	r1, r3, #1
 8005c18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c1c:	400b      	ands	r3, r1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <HAL_I2C_Init+0x234>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	1e59      	subs	r1, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c30:	3301      	adds	r3, #1
 8005c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c36:	e065      	b.n	8005d04 <HAL_I2C_Init+0x300>
 8005c38:	2304      	movs	r3, #4
 8005c3a:	e063      	b.n	8005d04 <HAL_I2C_Init+0x300>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d125      	bne.n	8005c90 <HAL_I2C_Init+0x28c>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	1e58      	subs	r0, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6859      	ldr	r1, [r3, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	440b      	add	r3, r1
 8005c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c56:	3301      	adds	r3, #1
 8005c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	bf0c      	ite	eq
 8005c60:	2301      	moveq	r3, #1
 8005c62:	2300      	movne	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	e026      	b.n	8005cb6 <HAL_I2C_Init+0x2b2>
 8005c68:	40005400 	.word	0x40005400
 8005c6c:	40005800 	.word	0x40005800
 8005c70:	40005c00 	.word	0x40005c00
 8005c74:	0800be34 	.word	0x0800be34
 8005c78:	00061a80 	.word	0x00061a80
 8005c7c:	000186a0 	.word	0x000186a0
 8005c80:	001e847f 	.word	0x001e847f
 8005c84:	003d08ff 	.word	0x003d08ff
 8005c88:	431bde83 	.word	0x431bde83
 8005c8c:	10624dd3 	.word	0x10624dd3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	1e58      	subs	r0, r3, #1
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6859      	ldr	r1, [r3, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	440b      	add	r3, r1
 8005c9e:	0099      	lsls	r1, r3, #2
 8005ca0:	440b      	add	r3, r1
 8005ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	bf0c      	ite	eq
 8005cb0:	2301      	moveq	r3, #1
 8005cb2:	2300      	movne	r3, #0
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <HAL_I2C_Init+0x2ba>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e022      	b.n	8005d04 <HAL_I2C_Init+0x300>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10e      	bne.n	8005ce4 <HAL_I2C_Init+0x2e0>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	1e58      	subs	r0, r3, #1
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6859      	ldr	r1, [r3, #4]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	440b      	add	r3, r1
 8005cd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cd8:	3301      	adds	r3, #1
 8005cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ce2:	e00f      	b.n	8005d04 <HAL_I2C_Init+0x300>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	1e58      	subs	r0, r3, #1
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6859      	ldr	r1, [r3, #4]
 8005cec:	460b      	mov	r3, r1
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	440b      	add	r3, r1
 8005cf2:	0099      	lsls	r1, r3, #2
 8005cf4:	440b      	add	r3, r1
 8005cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	6809      	ldr	r1, [r1, #0]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	69da      	ldr	r2, [r3, #28]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6911      	ldr	r1, [r2, #16]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	68d2      	ldr	r2, [r2, #12]
 8005d3e:	4311      	orrs	r1, r2
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6812      	ldr	r2, [r2, #0]
 8005d44:	430b      	orrs	r3, r1
 8005d46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	695a      	ldr	r2, [r3, #20]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0201 	orr.w	r2, r2, #1
 8005d72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop

08005d9c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b088      	sub	sp, #32
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dbc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
 8005dc8:	2b10      	cmp	r3, #16
 8005dca:	d003      	beq.n	8005dd4 <HAL_I2C_EV_IRQHandler+0x38>
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	2b40      	cmp	r3, #64	; 0x40
 8005dd0:	f040 80c1 	bne.w	8005f56 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10d      	bne.n	8005e0a <HAL_I2C_EV_IRQHandler+0x6e>
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005df4:	d003      	beq.n	8005dfe <HAL_I2C_EV_IRQHandler+0x62>
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005dfc:	d101      	bne.n	8005e02 <HAL_I2C_EV_IRQHandler+0x66>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e000      	b.n	8005e04 <HAL_I2C_EV_IRQHandler+0x68>
 8005e02:	2300      	movs	r3, #0
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	f000 8132 	beq.w	800606e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00c      	beq.n	8005e2e <HAL_I2C_EV_IRQHandler+0x92>
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	0a5b      	lsrs	r3, r3, #9
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d006      	beq.n	8005e2e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f001 fc7b 	bl	800771c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fd83 	bl	8006932 <I2C_Master_SB>
 8005e2c:	e092      	b.n	8005f54 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	08db      	lsrs	r3, r3, #3
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d009      	beq.n	8005e4e <HAL_I2C_EV_IRQHandler+0xb2>
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	0a5b      	lsrs	r3, r3, #9
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fdf9 	bl	8006a3e <I2C_Master_ADD10>
 8005e4c:	e082      	b.n	8005f54 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	085b      	lsrs	r3, r3, #1
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d009      	beq.n	8005e6e <HAL_I2C_EV_IRQHandler+0xd2>
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	0a5b      	lsrs	r3, r3, #9
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 fe13 	bl	8006a92 <I2C_Master_ADDR>
 8005e6c:	e072      	b.n	8005f54 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	089b      	lsrs	r3, r3, #2
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d03b      	beq.n	8005ef2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e88:	f000 80f3 	beq.w	8006072 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	09db      	lsrs	r3, r3, #7
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00f      	beq.n	8005eb8 <HAL_I2C_EV_IRQHandler+0x11c>
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	0a9b      	lsrs	r3, r3, #10
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d009      	beq.n	8005eb8 <HAL_I2C_EV_IRQHandler+0x11c>
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	089b      	lsrs	r3, r3, #2
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d103      	bne.n	8005eb8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f9f3 	bl	800629c <I2C_MasterTransmit_TXE>
 8005eb6:	e04d      	b.n	8005f54 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	089b      	lsrs	r3, r3, #2
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 80d6 	beq.w	8006072 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	0a5b      	lsrs	r3, r3, #9
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 80cf 	beq.w	8006072 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005ed4:	7bbb      	ldrb	r3, [r7, #14]
 8005ed6:	2b21      	cmp	r3, #33	; 0x21
 8005ed8:	d103      	bne.n	8005ee2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fa7a 	bl	80063d4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ee0:	e0c7      	b.n	8006072 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
 8005ee4:	2b40      	cmp	r3, #64	; 0x40
 8005ee6:	f040 80c4 	bne.w	8006072 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fae8 	bl	80064c0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ef0:	e0bf      	b.n	8006072 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f00:	f000 80b7 	beq.w	8006072 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	099b      	lsrs	r3, r3, #6
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00f      	beq.n	8005f30 <HAL_I2C_EV_IRQHandler+0x194>
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	0a9b      	lsrs	r3, r3, #10
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d009      	beq.n	8005f30 <HAL_I2C_EV_IRQHandler+0x194>
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	089b      	lsrs	r3, r3, #2
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d103      	bne.n	8005f30 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fb5d 	bl	80065e8 <I2C_MasterReceive_RXNE>
 8005f2e:	e011      	b.n	8005f54 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	089b      	lsrs	r3, r3, #2
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 809a 	beq.w	8006072 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	0a5b      	lsrs	r3, r3, #9
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 8093 	beq.w	8006072 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fc06 	bl	800675e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f52:	e08e      	b.n	8006072 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005f54:	e08d      	b.n	8006072 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d004      	beq.n	8005f68 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	61fb      	str	r3, [r7, #28]
 8005f66:	e007      	b.n	8005f78 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	085b      	lsrs	r3, r3, #1
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d012      	beq.n	8005faa <HAL_I2C_EV_IRQHandler+0x20e>
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	0a5b      	lsrs	r3, r3, #9
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00c      	beq.n	8005faa <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d003      	beq.n	8005fa0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005fa0:	69b9      	ldr	r1, [r7, #24]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 ffc4 	bl	8006f30 <I2C_Slave_ADDR>
 8005fa8:	e066      	b.n	8006078 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	091b      	lsrs	r3, r3, #4
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d009      	beq.n	8005fca <HAL_I2C_EV_IRQHandler+0x22e>
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	0a5b      	lsrs	r3, r3, #9
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fffe 	bl	8006fc4 <I2C_Slave_STOPF>
 8005fc8:	e056      	b.n	8006078 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005fca:	7bbb      	ldrb	r3, [r7, #14]
 8005fcc:	2b21      	cmp	r3, #33	; 0x21
 8005fce:	d002      	beq.n	8005fd6 <HAL_I2C_EV_IRQHandler+0x23a>
 8005fd0:	7bbb      	ldrb	r3, [r7, #14]
 8005fd2:	2b29      	cmp	r3, #41	; 0x29
 8005fd4:	d125      	bne.n	8006022 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	09db      	lsrs	r3, r3, #7
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00f      	beq.n	8006002 <HAL_I2C_EV_IRQHandler+0x266>
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	0a9b      	lsrs	r3, r3, #10
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d009      	beq.n	8006002 <HAL_I2C_EV_IRQHandler+0x266>
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	089b      	lsrs	r3, r3, #2
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d103      	bne.n	8006002 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 feda 	bl	8006db4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006000:	e039      	b.n	8006076 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	089b      	lsrs	r3, r3, #2
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b00      	cmp	r3, #0
 800600c:	d033      	beq.n	8006076 <HAL_I2C_EV_IRQHandler+0x2da>
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	0a5b      	lsrs	r3, r3, #9
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d02d      	beq.n	8006076 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 ff07 	bl	8006e2e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006020:	e029      	b.n	8006076 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	099b      	lsrs	r3, r3, #6
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00f      	beq.n	800604e <HAL_I2C_EV_IRQHandler+0x2b2>
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	0a9b      	lsrs	r3, r3, #10
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d009      	beq.n	800604e <HAL_I2C_EV_IRQHandler+0x2b2>
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	089b      	lsrs	r3, r3, #2
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b00      	cmp	r3, #0
 8006044:	d103      	bne.n	800604e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 ff12 	bl	8006e70 <I2C_SlaveReceive_RXNE>
 800604c:	e014      	b.n	8006078 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	089b      	lsrs	r3, r3, #2
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00e      	beq.n	8006078 <HAL_I2C_EV_IRQHandler+0x2dc>
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	0a5b      	lsrs	r3, r3, #9
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d008      	beq.n	8006078 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 ff40 	bl	8006eec <I2C_SlaveReceive_BTF>
 800606c:	e004      	b.n	8006078 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800606e:	bf00      	nop
 8006070:	e002      	b.n	8006078 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006072:	bf00      	nop
 8006074:	e000      	b.n	8006078 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006076:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006078:	3720      	adds	r7, #32
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b08a      	sub	sp, #40	; 0x28
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006096:	2300      	movs	r3, #0
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060a0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	0a1b      	lsrs	r3, r3, #8
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00e      	beq.n	80060cc <HAL_I2C_ER_IRQHandler+0x4e>
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	0a1b      	lsrs	r3, r3, #8
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d008      	beq.n	80060cc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	f043 0301 	orr.w	r3, r3, #1
 80060c0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060ca:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	0a5b      	lsrs	r3, r3, #9
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00e      	beq.n	80060f6 <HAL_I2C_ER_IRQHandler+0x78>
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	0a1b      	lsrs	r3, r3, #8
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d008      	beq.n	80060f6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	f043 0302 	orr.w	r3, r3, #2
 80060ea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80060f4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	0a9b      	lsrs	r3, r3, #10
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d03f      	beq.n	8006182 <HAL_I2C_ER_IRQHandler+0x104>
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	0a1b      	lsrs	r3, r3, #8
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d039      	beq.n	8006182 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800610e:	7efb      	ldrb	r3, [r7, #27]
 8006110:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006116:	b29b      	uxth	r3, r3
 8006118:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006120:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006126:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006128:	7ebb      	ldrb	r3, [r7, #26]
 800612a:	2b20      	cmp	r3, #32
 800612c:	d112      	bne.n	8006154 <HAL_I2C_ER_IRQHandler+0xd6>
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10f      	bne.n	8006154 <HAL_I2C_ER_IRQHandler+0xd6>
 8006134:	7cfb      	ldrb	r3, [r7, #19]
 8006136:	2b21      	cmp	r3, #33	; 0x21
 8006138:	d008      	beq.n	800614c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800613a:	7cfb      	ldrb	r3, [r7, #19]
 800613c:	2b29      	cmp	r3, #41	; 0x29
 800613e:	d005      	beq.n	800614c <HAL_I2C_ER_IRQHandler+0xce>
 8006140:	7cfb      	ldrb	r3, [r7, #19]
 8006142:	2b28      	cmp	r3, #40	; 0x28
 8006144:	d106      	bne.n	8006154 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2b21      	cmp	r3, #33	; 0x21
 800614a:	d103      	bne.n	8006154 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f001 f869 	bl	8007224 <I2C_Slave_AF>
 8006152:	e016      	b.n	8006182 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800615c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	f043 0304 	orr.w	r3, r3, #4
 8006164:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006166:	7efb      	ldrb	r3, [r7, #27]
 8006168:	2b10      	cmp	r3, #16
 800616a:	d002      	beq.n	8006172 <HAL_I2C_ER_IRQHandler+0xf4>
 800616c:	7efb      	ldrb	r3, [r7, #27]
 800616e:	2b40      	cmp	r3, #64	; 0x40
 8006170:	d107      	bne.n	8006182 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006180:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	0adb      	lsrs	r3, r3, #11
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00e      	beq.n	80061ac <HAL_I2C_ER_IRQHandler+0x12e>
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	0a1b      	lsrs	r3, r3, #8
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d008      	beq.n	80061ac <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	f043 0308 	orr.w	r3, r3, #8
 80061a0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80061aa:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d008      	beq.n	80061c4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	431a      	orrs	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f001 f8a0 	bl	8007304 <I2C_ITError>
  }
}
 80061c4:	bf00      	nop
 80061c6:	3728      	adds	r7, #40	; 0x28
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	70fb      	strb	r3, [r7, #3]
 8006228:	4613      	mov	r3, r2
 800622a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d150      	bne.n	8006364 <I2C_MasterTransmit_TXE+0xc8>
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
 80062c4:	2b21      	cmp	r3, #33	; 0x21
 80062c6:	d14d      	bne.n	8006364 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b08      	cmp	r3, #8
 80062cc:	d01d      	beq.n	800630a <I2C_MasterTransmit_TXE+0x6e>
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b20      	cmp	r3, #32
 80062d2:	d01a      	beq.n	800630a <I2C_MasterTransmit_TXE+0x6e>
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062da:	d016      	beq.n	800630a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062ea:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2211      	movs	r2, #17
 80062f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f7ff ff62 	bl	80061cc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006308:	e060      	b.n	80063cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006318:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006328:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b40      	cmp	r3, #64	; 0x40
 8006342:	d107      	bne.n	8006354 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7ff ff7d 	bl	800624c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006352:	e03b      	b.n	80063cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7ff ff35 	bl	80061cc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006362:	e033      	b.n	80063cc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	2b21      	cmp	r3, #33	; 0x21
 8006368:	d005      	beq.n	8006376 <I2C_MasterTransmit_TXE+0xda>
 800636a:	7bbb      	ldrb	r3, [r7, #14]
 800636c:	2b40      	cmp	r3, #64	; 0x40
 800636e:	d12d      	bne.n	80063cc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	2b22      	cmp	r3, #34	; 0x22
 8006374:	d12a      	bne.n	80063cc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637a:	b29b      	uxth	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d108      	bne.n	8006392 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800638e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006390:	e01c      	b.n	80063cc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b40      	cmp	r3, #64	; 0x40
 800639c:	d103      	bne.n	80063a6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f88e 	bl	80064c0 <I2C_MemoryTransmit_TXE_BTF>
}
 80063a4:	e012      	b.n	80063cc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	781a      	ldrb	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	3b01      	subs	r3, #1
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80063ca:	e7ff      	b.n	80063cc <I2C_MasterTransmit_TXE+0x130>
 80063cc:	bf00      	nop
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b21      	cmp	r3, #33	; 0x21
 80063ec:	d164      	bne.n	80064b8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d012      	beq.n	800641e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	781a      	ldrb	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006412:	b29b      	uxth	r3, r3
 8006414:	3b01      	subs	r3, #1
 8006416:	b29a      	uxth	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800641c:	e04c      	b.n	80064b8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2b08      	cmp	r3, #8
 8006422:	d01d      	beq.n	8006460 <I2C_MasterTransmit_BTF+0x8c>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b20      	cmp	r3, #32
 8006428:	d01a      	beq.n	8006460 <I2C_MasterTransmit_BTF+0x8c>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006430:	d016      	beq.n	8006460 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006440:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2211      	movs	r2, #17
 8006446:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2220      	movs	r2, #32
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7ff feb7 	bl	80061cc <HAL_I2C_MasterTxCpltCallback>
}
 800645e:	e02b      	b.n	80064b8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800646e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800647e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2220      	movs	r2, #32
 800648a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b40      	cmp	r3, #64	; 0x40
 8006498:	d107      	bne.n	80064aa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7ff fed2 	bl	800624c <HAL_I2C_MemTxCpltCallback>
}
 80064a8:	e006      	b.n	80064b8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7ff fe8a 	bl	80061cc <HAL_I2C_MasterTxCpltCallback>
}
 80064b8:	bf00      	nop
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d11d      	bne.n	8006514 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d10b      	bne.n	80064f8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064f0:	1c9a      	adds	r2, r3, #2
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80064f6:	e073      	b.n	80065e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	121b      	asrs	r3, r3, #8
 8006500:	b2da      	uxtb	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006512:	e065      	b.n	80065e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006518:	2b01      	cmp	r3, #1
 800651a:	d10b      	bne.n	8006534 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006520:	b2da      	uxtb	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800652c:	1c5a      	adds	r2, r3, #1
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006532:	e055      	b.n	80065e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006538:	2b02      	cmp	r3, #2
 800653a:	d151      	bne.n	80065e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800653c:	7bfb      	ldrb	r3, [r7, #15]
 800653e:	2b22      	cmp	r3, #34	; 0x22
 8006540:	d10d      	bne.n	800655e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006550:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800655c:	e040      	b.n	80065e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006562:	b29b      	uxth	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	d015      	beq.n	8006594 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	2b21      	cmp	r3, #33	; 0x21
 800656c:	d112      	bne.n	8006594 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006572:	781a      	ldrb	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006588:	b29b      	uxth	r3, r3
 800658a:	3b01      	subs	r3, #1
 800658c:	b29a      	uxth	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006592:	e025      	b.n	80065e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006598:	b29b      	uxth	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d120      	bne.n	80065e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800659e:	7bfb      	ldrb	r3, [r7, #15]
 80065a0:	2b21      	cmp	r3, #33	; 0x21
 80065a2:	d11d      	bne.n	80065e0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065b2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065c2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2220      	movs	r2, #32
 80065ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7ff fe36 	bl	800624c <HAL_I2C_MemTxCpltCallback>
}
 80065e0:	bf00      	nop
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b22      	cmp	r3, #34	; 0x22
 80065fa:	f040 80ac 	bne.w	8006756 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006602:	b29b      	uxth	r3, r3
 8006604:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2b03      	cmp	r3, #3
 800660a:	d921      	bls.n	8006650 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691a      	ldr	r2, [r3, #16]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006628:	b29b      	uxth	r3, r3
 800662a:	3b01      	subs	r3, #1
 800662c:	b29a      	uxth	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006636:	b29b      	uxth	r3, r3
 8006638:	2b03      	cmp	r3, #3
 800663a:	f040 808c 	bne.w	8006756 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800664c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800664e:	e082      	b.n	8006756 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006654:	2b02      	cmp	r3, #2
 8006656:	d075      	beq.n	8006744 <I2C_MasterReceive_RXNE+0x15c>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d002      	beq.n	8006664 <I2C_MasterReceive_RXNE+0x7c>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d16f      	bne.n	8006744 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f001 f827 	bl	80076b8 <I2C_WaitOnSTOPRequestThroughIT>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d142      	bne.n	80066f6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800667e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800668e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691a      	ldr	r2, [r3, #16]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	1c5a      	adds	r2, r3, #1
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2220      	movs	r2, #32
 80066ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b40      	cmp	r3, #64	; 0x40
 80066c8:	d10a      	bne.n	80066e0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7ff fdc1 	bl	8006260 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80066de:	e03a      	b.n	8006756 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2212      	movs	r2, #18
 80066ec:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7ff fd76 	bl	80061e0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80066f4:	e02f      	b.n	8006756 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006704:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	691a      	ldr	r2, [r3, #16]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006722:	b29b      	uxth	r3, r3
 8006724:	3b01      	subs	r3, #1
 8006726:	b29a      	uxth	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2220      	movs	r2, #32
 8006730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7ff fd99 	bl	8006274 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006742:	e008      	b.n	8006756 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006752:	605a      	str	r2, [r3, #4]
}
 8006754:	e7ff      	b.n	8006756 <I2C_MasterReceive_RXNE+0x16e>
 8006756:	bf00      	nop
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b084      	sub	sp, #16
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b04      	cmp	r3, #4
 8006774:	d11b      	bne.n	80067ae <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006784:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	691a      	ldr	r2, [r3, #16]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006790:	b2d2      	uxtb	r2, r2
 8006792:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	3b01      	subs	r3, #1
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80067ac:	e0bd      	b.n	800692a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	d129      	bne.n	800680c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067c6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	d00a      	beq.n	80067e4 <I2C_MasterReceive_BTF+0x86>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d007      	beq.n	80067e4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	691a      	ldr	r2, [r3, #16]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006800:	b29b      	uxth	r3, r3
 8006802:	3b01      	subs	r3, #1
 8006804:	b29a      	uxth	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800680a:	e08e      	b.n	800692a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b02      	cmp	r3, #2
 8006814:	d176      	bne.n	8006904 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d002      	beq.n	8006822 <I2C_MasterReceive_BTF+0xc4>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2b10      	cmp	r3, #16
 8006820:	d108      	bne.n	8006834 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006830:	601a      	str	r2, [r3, #0]
 8006832:	e019      	b.n	8006868 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2b04      	cmp	r3, #4
 8006838:	d002      	beq.n	8006840 <I2C_MasterReceive_BTF+0xe2>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2b02      	cmp	r3, #2
 800683e:	d108      	bne.n	8006852 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	e00a      	b.n	8006868 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2b10      	cmp	r3, #16
 8006856:	d007      	beq.n	8006868 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006866:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	691a      	ldr	r2, [r3, #16]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006872:	b2d2      	uxtb	r2, r2
 8006874:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006884:	b29b      	uxth	r3, r3
 8006886:	3b01      	subs	r3, #1
 8006888:	b29a      	uxth	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	691a      	ldr	r2, [r3, #16]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	b2d2      	uxtb	r2, r2
 800689a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	3b01      	subs	r3, #1
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80068c2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2220      	movs	r2, #32
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b40      	cmp	r3, #64	; 0x40
 80068d6:	d10a      	bne.n	80068ee <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7ff fcba 	bl	8006260 <HAL_I2C_MemRxCpltCallback>
}
 80068ec:	e01d      	b.n	800692a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2212      	movs	r2, #18
 80068fa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7ff fc6f 	bl	80061e0 <HAL_I2C_MasterRxCpltCallback>
}
 8006902:	e012      	b.n	800692a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	691a      	ldr	r2, [r3, #16]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690e:	b2d2      	uxtb	r2, r2
 8006910:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006920:	b29b      	uxth	r3, r3
 8006922:	3b01      	subs	r3, #1
 8006924:	b29a      	uxth	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800692a:	bf00      	nop
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b40      	cmp	r3, #64	; 0x40
 8006944:	d117      	bne.n	8006976 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800694a:	2b00      	cmp	r3, #0
 800694c:	d109      	bne.n	8006962 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006952:	b2db      	uxtb	r3, r3
 8006954:	461a      	mov	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800695e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006960:	e067      	b.n	8006a32 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006966:	b2db      	uxtb	r3, r3
 8006968:	f043 0301 	orr.w	r3, r3, #1
 800696c:	b2da      	uxtb	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	611a      	str	r2, [r3, #16]
}
 8006974:	e05d      	b.n	8006a32 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800697e:	d133      	bne.n	80069e8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006986:	b2db      	uxtb	r3, r3
 8006988:	2b21      	cmp	r3, #33	; 0x21
 800698a:	d109      	bne.n	80069a0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006990:	b2db      	uxtb	r3, r3
 8006992:	461a      	mov	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800699c:	611a      	str	r2, [r3, #16]
 800699e:	e008      	b.n	80069b2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	f043 0301 	orr.w	r3, r3, #1
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d004      	beq.n	80069c4 <I2C_Master_SB+0x92>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d108      	bne.n	80069d6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d032      	beq.n	8006a32 <I2C_Master_SB+0x100>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d02d      	beq.n	8006a32 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069e4:	605a      	str	r2, [r3, #4]
}
 80069e6:	e024      	b.n	8006a32 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10e      	bne.n	8006a0e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	11db      	asrs	r3, r3, #7
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	f003 0306 	and.w	r3, r3, #6
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	f063 030f 	orn	r3, r3, #15
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	611a      	str	r2, [r3, #16]
}
 8006a0c:	e011      	b.n	8006a32 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d10d      	bne.n	8006a32 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	11db      	asrs	r3, r3, #7
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	f003 0306 	and.w	r3, r3, #6
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	f063 030e 	orn	r3, r3, #14
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	611a      	str	r2, [r3, #16]
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d004      	beq.n	8006a64 <I2C_Master_ADD10+0x26>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d108      	bne.n	8006a76 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00c      	beq.n	8006a86 <I2C_Master_ADD10+0x48>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d007      	beq.n	8006a86 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a84:	605a      	str	r2, [r3, #4]
  }
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b091      	sub	sp, #68	; 0x44
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006aa0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aae:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	2b22      	cmp	r3, #34	; 0x22
 8006aba:	f040 8169 	bne.w	8006d90 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10f      	bne.n	8006ae6 <I2C_Master_ADDR+0x54>
 8006ac6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006aca:	2b40      	cmp	r3, #64	; 0x40
 8006acc:	d10b      	bne.n	8006ae6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ace:	2300      	movs	r3, #0
 8006ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	633b      	str	r3, [r7, #48]	; 0x30
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae4:	e160      	b.n	8006da8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d11d      	bne.n	8006b2a <I2C_Master_ADDR+0x98>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006af6:	d118      	bne.n	8006b2a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006af8:	2300      	movs	r3, #0
 8006afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b1c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	651a      	str	r2, [r3, #80]	; 0x50
 8006b28:	e13e      	b.n	8006da8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d113      	bne.n	8006b5c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b34:	2300      	movs	r3, #0
 8006b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b48:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b58:	601a      	str	r2, [r3, #0]
 8006b5a:	e115      	b.n	8006d88 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	f040 808a 	bne.w	8006c7c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b6e:	d137      	bne.n	8006be0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b7e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b8e:	d113      	bne.n	8006bb8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b9e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	627b      	str	r3, [r7, #36]	; 0x24
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	e0e7      	b.n	8006d88 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bb8:	2300      	movs	r3, #0
 8006bba:	623b      	str	r3, [r7, #32]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	623b      	str	r3, [r7, #32]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	623b      	str	r3, [r7, #32]
 8006bcc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	e0d3      	b.n	8006d88 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be2:	2b08      	cmp	r3, #8
 8006be4:	d02e      	beq.n	8006c44 <I2C_Master_ADDR+0x1b2>
 8006be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be8:	2b20      	cmp	r3, #32
 8006bea:	d02b      	beq.n	8006c44 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bee:	2b12      	cmp	r3, #18
 8006bf0:	d102      	bne.n	8006bf8 <I2C_Master_ADDR+0x166>
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d125      	bne.n	8006c44 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	d00e      	beq.n	8006c1c <I2C_Master_ADDR+0x18a>
 8006bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d00b      	beq.n	8006c1c <I2C_Master_ADDR+0x18a>
 8006c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c06:	2b10      	cmp	r3, #16
 8006c08:	d008      	beq.n	8006c1c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	e007      	b.n	8006c2c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006c2a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	61fb      	str	r3, [r7, #28]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	61fb      	str	r3, [r7, #28]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	61fb      	str	r3, [r7, #28]
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	e0a1      	b.n	8006d88 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c52:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c54:	2300      	movs	r3, #0
 8006c56:	61bb      	str	r3, [r7, #24]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	61bb      	str	r3, [r7, #24]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	61bb      	str	r3, [r7, #24]
 8006c68:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	e085      	b.n	8006d88 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d14d      	bne.n	8006d22 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c88:	2b04      	cmp	r3, #4
 8006c8a:	d016      	beq.n	8006cba <I2C_Master_ADDR+0x228>
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d013      	beq.n	8006cba <I2C_Master_ADDR+0x228>
 8006c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c94:	2b10      	cmp	r3, #16
 8006c96:	d010      	beq.n	8006cba <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ca6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	e007      	b.n	8006cca <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cc8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd8:	d117      	bne.n	8006d0a <I2C_Master_ADDR+0x278>
 8006cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ce0:	d00b      	beq.n	8006cfa <I2C_Master_ADDR+0x268>
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d008      	beq.n	8006cfa <I2C_Master_ADDR+0x268>
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cea:	2b08      	cmp	r3, #8
 8006cec:	d005      	beq.n	8006cfa <I2C_Master_ADDR+0x268>
 8006cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf0:	2b10      	cmp	r3, #16
 8006cf2:	d002      	beq.n	8006cfa <I2C_Master_ADDR+0x268>
 8006cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf6:	2b20      	cmp	r3, #32
 8006cf8:	d107      	bne.n	8006d0a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d08:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	617b      	str	r3, [r7, #20]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	617b      	str	r3, [r7, #20]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	617b      	str	r3, [r7, #20]
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	e032      	b.n	8006d88 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d30:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d40:	d117      	bne.n	8006d72 <I2C_Master_ADDR+0x2e0>
 8006d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d48:	d00b      	beq.n	8006d62 <I2C_Master_ADDR+0x2d0>
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d008      	beq.n	8006d62 <I2C_Master_ADDR+0x2d0>
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	2b08      	cmp	r3, #8
 8006d54:	d005      	beq.n	8006d62 <I2C_Master_ADDR+0x2d0>
 8006d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d58:	2b10      	cmp	r3, #16
 8006d5a:	d002      	beq.n	8006d62 <I2C_Master_ADDR+0x2d0>
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	d107      	bne.n	8006d72 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d70:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d72:	2300      	movs	r3, #0
 8006d74:	613b      	str	r3, [r7, #16]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	613b      	str	r3, [r7, #16]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	613b      	str	r3, [r7, #16]
 8006d86:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006d8e:	e00b      	b.n	8006da8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	68fb      	ldr	r3, [r7, #12]
}
 8006da6:	e7ff      	b.n	8006da8 <I2C_Master_ADDR+0x316>
 8006da8:	bf00      	nop
 8006daa:	3744      	adds	r7, #68	; 0x44
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d02b      	beq.n	8006e26 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd2:	781a      	ldrb	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	3b01      	subs	r3, #1
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d114      	bne.n	8006e26 <I2C_SlaveTransmit_TXE+0x72>
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
 8006dfe:	2b29      	cmp	r3, #41	; 0x29
 8006e00:	d111      	bne.n	8006e26 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e10:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2221      	movs	r2, #33	; 0x21
 8006e16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2228      	movs	r2, #40	; 0x28
 8006e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7ff f9e7 	bl	80061f4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006e26:	bf00      	nop
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d011      	beq.n	8006e64 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	781a      	ldrb	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e7e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d02c      	beq.n	8006ee4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	691a      	ldr	r2, [r3, #16]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	b2d2      	uxtb	r2, r2
 8006e96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d114      	bne.n	8006ee4 <I2C_SlaveReceive_RXNE+0x74>
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
 8006ebc:	2b2a      	cmp	r3, #42	; 0x2a
 8006ebe:	d111      	bne.n	8006ee4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ece:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2222      	movs	r2, #34	; 0x22
 8006ed4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2228      	movs	r2, #40	; 0x28
 8006eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7ff f992 	bl	8006208 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006ee4:	bf00      	nop
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d012      	beq.n	8006f24 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	691a      	ldr	r2, [r3, #16]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f08:	b2d2      	uxtb	r2, r2
 8006f0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	1c5a      	adds	r2, r3, #1
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f4a:	2b28      	cmp	r3, #40	; 0x28
 8006f4c:	d127      	bne.n	8006f9e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f5c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	089b      	lsrs	r3, r3, #2
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	09db      	lsrs	r3, r3, #7
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d103      	bne.n	8006f82 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	81bb      	strh	r3, [r7, #12]
 8006f80:	e002      	b.n	8006f88 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006f90:	89ba      	ldrh	r2, [r7, #12]
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
 8006f94:	4619      	mov	r1, r3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7ff f940 	bl	800621c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006f9c:	e00e      	b.n	8006fbc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60bb      	str	r3, [r7, #8]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	60bb      	str	r3, [r7, #8]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	60bb      	str	r3, [r7, #8]
 8006fb2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006fbc:	bf00      	nop
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fd2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fe2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	60bb      	str	r3, [r7, #8]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	60bb      	str	r3, [r7, #8]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 0201 	orr.w	r2, r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]
 8007000:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007010:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800701c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007020:	d172      	bne.n	8007108 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007022:	7bfb      	ldrb	r3, [r7, #15]
 8007024:	2b22      	cmp	r3, #34	; 0x22
 8007026:	d002      	beq.n	800702e <I2C_Slave_STOPF+0x6a>
 8007028:	7bfb      	ldrb	r3, [r7, #15]
 800702a:	2b2a      	cmp	r3, #42	; 0x2a
 800702c:	d135      	bne.n	800709a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	b29a      	uxth	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007040:	b29b      	uxth	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d005      	beq.n	8007052 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	f043 0204 	orr.w	r2, r3, #4
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007060:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007066:	4618      	mov	r0, r3
 8007068:	f7fe f88e 	bl	8005188 <HAL_DMA_GetState>
 800706c:	4603      	mov	r3, r0
 800706e:	2b01      	cmp	r3, #1
 8007070:	d049      	beq.n	8007106 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	4a69      	ldr	r2, [pc, #420]	; (800721c <I2C_Slave_STOPF+0x258>)
 8007078:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707e:	4618      	mov	r0, r3
 8007080:	f7fd fed6 	bl	8004e30 <HAL_DMA_Abort_IT>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d03d      	beq.n	8007106 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007094:	4610      	mov	r0, r2
 8007096:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007098:	e035      	b.n	8007106 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	b29a      	uxth	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d005      	beq.n	80070be <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b6:	f043 0204 	orr.w	r2, r3, #4
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fe f858 	bl	8005188 <HAL_DMA_GetState>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d014      	beq.n	8007108 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e2:	4a4e      	ldr	r2, [pc, #312]	; (800721c <I2C_Slave_STOPF+0x258>)
 80070e4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fd fea0 	bl	8004e30 <HAL_DMA_Abort_IT>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d008      	beq.n	8007108 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007100:	4610      	mov	r0, r2
 8007102:	4798      	blx	r3
 8007104:	e000      	b.n	8007108 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007106:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800710c:	b29b      	uxth	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d03e      	beq.n	8007190 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b04      	cmp	r3, #4
 800711e:	d112      	bne.n	8007146 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	691a      	ldr	r2, [r3, #16]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	b2d2      	uxtb	r2, r2
 800712c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007132:	1c5a      	adds	r2, r3, #1
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800713c:	b29b      	uxth	r3, r3
 800713e:	3b01      	subs	r3, #1
 8007140:	b29a      	uxth	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007150:	2b40      	cmp	r3, #64	; 0x40
 8007152:	d112      	bne.n	800717a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691a      	ldr	r2, [r3, #16]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715e:	b2d2      	uxtb	r2, r2
 8007160:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007170:	b29b      	uxth	r3, r3
 8007172:	3b01      	subs	r3, #1
 8007174:	b29a      	uxth	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800717e:	b29b      	uxth	r3, r3
 8007180:	2b00      	cmp	r3, #0
 8007182:	d005      	beq.n	8007190 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007188:	f043 0204 	orr.w	r2, r3, #4
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f8b3 	bl	8007304 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800719e:	e039      	b.n	8007214 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80071a0:	7bfb      	ldrb	r3, [r7, #15]
 80071a2:	2b2a      	cmp	r3, #42	; 0x2a
 80071a4:	d109      	bne.n	80071ba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2228      	movs	r2, #40	; 0x28
 80071b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7ff f827 	bl	8006208 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b28      	cmp	r3, #40	; 0x28
 80071c4:	d111      	bne.n	80071ea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a15      	ldr	r2, [pc, #84]	; (8007220 <I2C_Slave_STOPF+0x25c>)
 80071ca:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7ff f828 	bl	8006238 <HAL_I2C_ListenCpltCallback>
}
 80071e8:	e014      	b.n	8007214 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ee:	2b22      	cmp	r3, #34	; 0x22
 80071f0:	d002      	beq.n	80071f8 <I2C_Slave_STOPF+0x234>
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
 80071f4:	2b22      	cmp	r3, #34	; 0x22
 80071f6:	d10d      	bne.n	8007214 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2220      	movs	r2, #32
 8007202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7fe fffa 	bl	8006208 <HAL_I2C_SlaveRxCpltCallback>
}
 8007214:	bf00      	nop
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	08007569 	.word	0x08007569
 8007220:	ffff0000 	.word	0xffff0000

08007224 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007232:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007238:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	2b08      	cmp	r3, #8
 800723e:	d002      	beq.n	8007246 <I2C_Slave_AF+0x22>
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	2b20      	cmp	r3, #32
 8007244:	d129      	bne.n	800729a <I2C_Slave_AF+0x76>
 8007246:	7bfb      	ldrb	r3, [r7, #15]
 8007248:	2b28      	cmp	r3, #40	; 0x28
 800724a:	d126      	bne.n	800729a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a2c      	ldr	r2, [pc, #176]	; (8007300 <I2C_Slave_AF+0xdc>)
 8007250:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007260:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800726a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800727a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2220      	movs	r2, #32
 8007286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7fe ffd0 	bl	8006238 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007298:	e02e      	b.n	80072f8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800729a:	7bfb      	ldrb	r3, [r7, #15]
 800729c:	2b21      	cmp	r3, #33	; 0x21
 800729e:	d126      	bne.n	80072ee <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a17      	ldr	r2, [pc, #92]	; (8007300 <I2C_Slave_AF+0xdc>)
 80072a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2221      	movs	r2, #33	; 0x21
 80072aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2220      	movs	r2, #32
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072ca:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072d4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072e4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7fe ff84 	bl	80061f4 <HAL_I2C_SlaveTxCpltCallback>
}
 80072ec:	e004      	b.n	80072f8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072f6:	615a      	str	r2, [r3, #20]
}
 80072f8:	bf00      	nop
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	ffff0000 	.word	0xffff0000

08007304 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007312:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800731a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800731c:	7bbb      	ldrb	r3, [r7, #14]
 800731e:	2b10      	cmp	r3, #16
 8007320:	d002      	beq.n	8007328 <I2C_ITError+0x24>
 8007322:	7bbb      	ldrb	r3, [r7, #14]
 8007324:	2b40      	cmp	r3, #64	; 0x40
 8007326:	d10a      	bne.n	800733e <I2C_ITError+0x3a>
 8007328:	7bfb      	ldrb	r3, [r7, #15]
 800732a:	2b22      	cmp	r3, #34	; 0x22
 800732c:	d107      	bne.n	800733e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800733c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800733e:	7bfb      	ldrb	r3, [r7, #15]
 8007340:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007344:	2b28      	cmp	r3, #40	; 0x28
 8007346:	d107      	bne.n	8007358 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2228      	movs	r2, #40	; 0x28
 8007352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007356:	e015      	b.n	8007384 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007366:	d00a      	beq.n	800737e <I2C_ITError+0x7a>
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	2b60      	cmp	r3, #96	; 0x60
 800736c:	d007      	beq.n	800737e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2220      	movs	r2, #32
 8007372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800738e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007392:	d162      	bne.n	800745a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073a2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d020      	beq.n	80073f4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b6:	4a6a      	ldr	r2, [pc, #424]	; (8007560 <I2C_ITError+0x25c>)
 80073b8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fd fd36 	bl	8004e30 <HAL_DMA_Abort_IT>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 8089 	beq.w	80074de <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f022 0201 	bic.w	r2, r2, #1
 80073da:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2220      	movs	r2, #32
 80073e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80073ee:	4610      	mov	r0, r2
 80073f0:	4798      	blx	r3
 80073f2:	e074      	b.n	80074de <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f8:	4a59      	ldr	r2, [pc, #356]	; (8007560 <I2C_ITError+0x25c>)
 80073fa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007400:	4618      	mov	r0, r3
 8007402:	f7fd fd15 	bl	8004e30 <HAL_DMA_Abort_IT>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d068      	beq.n	80074de <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007416:	2b40      	cmp	r3, #64	; 0x40
 8007418:	d10b      	bne.n	8007432 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	691a      	ldr	r2, [r3, #16]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007424:	b2d2      	uxtb	r2, r2
 8007426:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742c:	1c5a      	adds	r2, r3, #1
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0201 	bic.w	r2, r2, #1
 8007440:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2220      	movs	r2, #32
 8007446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007454:	4610      	mov	r0, r2
 8007456:	4798      	blx	r3
 8007458:	e041      	b.n	80074de <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b60      	cmp	r3, #96	; 0x60
 8007464:	d125      	bne.n	80074b2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2220      	movs	r2, #32
 800746a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747e:	2b40      	cmp	r3, #64	; 0x40
 8007480:	d10b      	bne.n	800749a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	691a      	ldr	r2, [r3, #16]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748c:	b2d2      	uxtb	r2, r2
 800748e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007494:	1c5a      	adds	r2, r3, #1
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 0201 	bic.w	r2, r2, #1
 80074a8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7fe feec 	bl	8006288 <HAL_I2C_AbortCpltCallback>
 80074b0:	e015      	b.n	80074de <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074bc:	2b40      	cmp	r3, #64	; 0x40
 80074be:	d10b      	bne.n	80074d8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	691a      	ldr	r2, [r3, #16]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ca:	b2d2      	uxtb	r2, r2
 80074cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7fe fecb 	bl	8006274 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d10e      	bne.n	800750c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d109      	bne.n	800750c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d104      	bne.n	800750c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007508:	2b00      	cmp	r3, #0
 800750a:	d007      	beq.n	800751c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800751a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007522:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007528:	f003 0304 	and.w	r3, r3, #4
 800752c:	2b04      	cmp	r3, #4
 800752e:	d113      	bne.n	8007558 <I2C_ITError+0x254>
 8007530:	7bfb      	ldrb	r3, [r7, #15]
 8007532:	2b28      	cmp	r3, #40	; 0x28
 8007534:	d110      	bne.n	8007558 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a0a      	ldr	r2, [pc, #40]	; (8007564 <I2C_ITError+0x260>)
 800753a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2220      	movs	r2, #32
 8007546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7fe fe70 	bl	8006238 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007558:	bf00      	nop
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	08007569 	.word	0x08007569
 8007564:	ffff0000 	.word	0xffff0000

08007568 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007578:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007580:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007582:	4b4b      	ldr	r3, [pc, #300]	; (80076b0 <I2C_DMAAbort+0x148>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	08db      	lsrs	r3, r3, #3
 8007588:	4a4a      	ldr	r2, [pc, #296]	; (80076b4 <I2C_DMAAbort+0x14c>)
 800758a:	fba2 2303 	umull	r2, r3, r2, r3
 800758e:	0a1a      	lsrs	r2, r3, #8
 8007590:	4613      	mov	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4413      	add	r3, r2
 8007596:	00da      	lsls	r2, r3, #3
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d106      	bne.n	80075b0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	f043 0220 	orr.w	r2, r3, #32
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80075ae:	e00a      	b.n	80075c6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075c4:	d0ea      	beq.n	800759c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d2:	2200      	movs	r2, #0
 80075d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d003      	beq.n	80075e6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e2:	2200      	movs	r2, #0
 80075e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075f4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	2200      	movs	r2, #0
 80075fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007608:	2200      	movs	r2, #0
 800760a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007610:	2b00      	cmp	r3, #0
 8007612:	d003      	beq.n	800761c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007618:	2200      	movs	r2, #0
 800761a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f022 0201 	bic.w	r2, r2, #1
 800762a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b60      	cmp	r3, #96	; 0x60
 8007636:	d10e      	bne.n	8007656 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	2220      	movs	r2, #32
 800763c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2200      	movs	r2, #0
 800764c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800764e:	6978      	ldr	r0, [r7, #20]
 8007650:	f7fe fe1a 	bl	8006288 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007654:	e027      	b.n	80076a6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007656:	7cfb      	ldrb	r3, [r7, #19]
 8007658:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800765c:	2b28      	cmp	r3, #40	; 0x28
 800765e:	d117      	bne.n	8007690 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f042 0201 	orr.w	r2, r2, #1
 800766e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800767e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	2200      	movs	r2, #0
 8007684:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	2228      	movs	r2, #40	; 0x28
 800768a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800768e:	e007      	b.n	80076a0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	2220      	movs	r2, #32
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80076a0:	6978      	ldr	r0, [r7, #20]
 80076a2:	f7fe fde7 	bl	8006274 <HAL_I2C_ErrorCallback>
}
 80076a6:	bf00      	nop
 80076a8:	3718      	adds	r7, #24
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	20000040 	.word	0x20000040
 80076b4:	14f8b589 	.word	0x14f8b589

080076b8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80076c4:	4b13      	ldr	r3, [pc, #76]	; (8007714 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	08db      	lsrs	r3, r3, #3
 80076ca:	4a13      	ldr	r2, [pc, #76]	; (8007718 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80076cc:	fba2 2303 	umull	r2, r3, r2, r3
 80076d0:	0a1a      	lsrs	r2, r3, #8
 80076d2:	4613      	mov	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	3b01      	subs	r3, #1
 80076de:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d107      	bne.n	80076f6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	f043 0220 	orr.w	r2, r3, #32
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e008      	b.n	8007708 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007704:	d0e9      	beq.n	80076da <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	20000040 	.word	0x20000040
 8007718:	14f8b589 	.word	0x14f8b589

0800771c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800772c:	d103      	bne.n	8007736 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007734:	e007      	b.n	8007746 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800773e:	d102      	bne.n	8007746 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2208      	movs	r2, #8
 8007744:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
	...

08007754 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800775a:	2300      	movs	r3, #0
 800775c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800775e:	2300      	movs	r3, #0
 8007760:	603b      	str	r3, [r7, #0]
 8007762:	4b20      	ldr	r3, [pc, #128]	; (80077e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8007764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007766:	4a1f      	ldr	r2, [pc, #124]	; (80077e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8007768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800776c:	6413      	str	r3, [r2, #64]	; 0x40
 800776e:	4b1d      	ldr	r3, [pc, #116]	; (80077e4 <HAL_PWREx_EnableOverDrive+0x90>)
 8007770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007776:	603b      	str	r3, [r7, #0]
 8007778:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800777a:	4b1b      	ldr	r3, [pc, #108]	; (80077e8 <HAL_PWREx_EnableOverDrive+0x94>)
 800777c:	2201      	movs	r2, #1
 800777e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007780:	f7fb fb92 	bl	8002ea8 <HAL_GetTick>
 8007784:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007786:	e009      	b.n	800779c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007788:	f7fb fb8e 	bl	8002ea8 <HAL_GetTick>
 800778c:	4602      	mov	r2, r0
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007796:	d901      	bls.n	800779c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e01f      	b.n	80077dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800779c:	4b13      	ldr	r3, [pc, #76]	; (80077ec <HAL_PWREx_EnableOverDrive+0x98>)
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077a8:	d1ee      	bne.n	8007788 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80077aa:	4b11      	ldr	r3, [pc, #68]	; (80077f0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077ac:	2201      	movs	r2, #1
 80077ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077b0:	f7fb fb7a 	bl	8002ea8 <HAL_GetTick>
 80077b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80077b6:	e009      	b.n	80077cc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80077b8:	f7fb fb76 	bl	8002ea8 <HAL_GetTick>
 80077bc:	4602      	mov	r2, r0
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077c6:	d901      	bls.n	80077cc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e007      	b.n	80077dc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80077cc:	4b07      	ldr	r3, [pc, #28]	; (80077ec <HAL_PWREx_EnableOverDrive+0x98>)
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077d8:	d1ee      	bne.n	80077b8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	40023800 	.word	0x40023800
 80077e8:	420e0040 	.word	0x420e0040
 80077ec:	40007000 	.word	0x40007000
 80077f0:	420e0044 	.word	0x420e0044

080077f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e18c      	b.n	8007b22 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d003      	beq.n	8007818 <HAL_RCC_ClockConfig+0x24>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b0f      	cmp	r3, #15
 8007816:	d904      	bls.n	8007822 <HAL_RCC_ClockConfig+0x2e>
 8007818:	f240 215a 	movw	r1, #602	; 0x25a
 800781c:	4887      	ldr	r0, [pc, #540]	; (8007a3c <HAL_RCC_ClockConfig+0x248>)
 800781e:	f7fb f820 	bl	8002862 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d031      	beq.n	800788c <HAL_RCC_ClockConfig+0x98>
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d02e      	beq.n	800788c <HAL_RCC_ClockConfig+0x98>
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b02      	cmp	r3, #2
 8007832:	d02b      	beq.n	800788c <HAL_RCC_ClockConfig+0x98>
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2b03      	cmp	r3, #3
 8007838:	d028      	beq.n	800788c <HAL_RCC_ClockConfig+0x98>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b04      	cmp	r3, #4
 800783e:	d025      	beq.n	800788c <HAL_RCC_ClockConfig+0x98>
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	2b05      	cmp	r3, #5
 8007844:	d022      	beq.n	800788c <HAL_RCC_ClockConfig+0x98>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b06      	cmp	r3, #6
 800784a:	d01f      	beq.n	800788c <HAL_RCC_ClockConfig+0x98>
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2b07      	cmp	r3, #7
 8007850:	d01c      	beq.n	800788c <HAL_RCC_ClockConfig+0x98>
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b08      	cmp	r3, #8
 8007856:	d019      	beq.n	800788c <HAL_RCC_ClockConfig+0x98>
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2b09      	cmp	r3, #9
 800785c:	d016      	beq.n	800788c <HAL_RCC_ClockConfig+0x98>
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	2b0a      	cmp	r3, #10
 8007862:	d013      	beq.n	800788c <HAL_RCC_ClockConfig+0x98>
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	2b0b      	cmp	r3, #11
 8007868:	d010      	beq.n	800788c <HAL_RCC_ClockConfig+0x98>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b0c      	cmp	r3, #12
 800786e:	d00d      	beq.n	800788c <HAL_RCC_ClockConfig+0x98>
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2b0d      	cmp	r3, #13
 8007874:	d00a      	beq.n	800788c <HAL_RCC_ClockConfig+0x98>
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	2b0e      	cmp	r3, #14
 800787a:	d007      	beq.n	800788c <HAL_RCC_ClockConfig+0x98>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b0f      	cmp	r3, #15
 8007880:	d004      	beq.n	800788c <HAL_RCC_ClockConfig+0x98>
 8007882:	f240 215b 	movw	r1, #603	; 0x25b
 8007886:	486d      	ldr	r0, [pc, #436]	; (8007a3c <HAL_RCC_ClockConfig+0x248>)
 8007888:	f7fa ffeb 	bl	8002862 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800788c:	4b6c      	ldr	r3, [pc, #432]	; (8007a40 <HAL_RCC_ClockConfig+0x24c>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 030f 	and.w	r3, r3, #15
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	429a      	cmp	r2, r3
 8007898:	d90c      	bls.n	80078b4 <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800789a:	4b69      	ldr	r3, [pc, #420]	; (8007a40 <HAL_RCC_ClockConfig+0x24c>)
 800789c:	683a      	ldr	r2, [r7, #0]
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078a2:	4b67      	ldr	r3, [pc, #412]	; (8007a40 <HAL_RCC_ClockConfig+0x24c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 030f 	and.w	r3, r3, #15
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d001      	beq.n	80078b4 <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e136      	b.n	8007b22 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0302 	and.w	r3, r3, #2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d049      	beq.n	8007954 <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d005      	beq.n	80078d8 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078cc:	4b5d      	ldr	r3, [pc, #372]	; (8007a44 <HAL_RCC_ClockConfig+0x250>)
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	4a5c      	ldr	r2, [pc, #368]	; (8007a44 <HAL_RCC_ClockConfig+0x250>)
 80078d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80078d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0308 	and.w	r3, r3, #8
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d005      	beq.n	80078f0 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078e4:	4b57      	ldr	r3, [pc, #348]	; (8007a44 <HAL_RCC_ClockConfig+0x250>)
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	4a56      	ldr	r2, [pc, #344]	; (8007a44 <HAL_RCC_ClockConfig+0x250>)
 80078ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80078ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d024      	beq.n	8007942 <HAL_RCC_ClockConfig+0x14e>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	2b80      	cmp	r3, #128	; 0x80
 80078fe:	d020      	beq.n	8007942 <HAL_RCC_ClockConfig+0x14e>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	2b90      	cmp	r3, #144	; 0x90
 8007906:	d01c      	beq.n	8007942 <HAL_RCC_ClockConfig+0x14e>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	2ba0      	cmp	r3, #160	; 0xa0
 800790e:	d018      	beq.n	8007942 <HAL_RCC_ClockConfig+0x14e>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	2bb0      	cmp	r3, #176	; 0xb0
 8007916:	d014      	beq.n	8007942 <HAL_RCC_ClockConfig+0x14e>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	2bc0      	cmp	r3, #192	; 0xc0
 800791e:	d010      	beq.n	8007942 <HAL_RCC_ClockConfig+0x14e>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	2bd0      	cmp	r3, #208	; 0xd0
 8007926:	d00c      	beq.n	8007942 <HAL_RCC_ClockConfig+0x14e>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	2be0      	cmp	r3, #224	; 0xe0
 800792e:	d008      	beq.n	8007942 <HAL_RCC_ClockConfig+0x14e>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	2bf0      	cmp	r3, #240	; 0xf0
 8007936:	d004      	beq.n	8007942 <HAL_RCC_ClockConfig+0x14e>
 8007938:	f240 217e 	movw	r1, #638	; 0x27e
 800793c:	483f      	ldr	r0, [pc, #252]	; (8007a3c <HAL_RCC_ClockConfig+0x248>)
 800793e:	f7fa ff90 	bl	8002862 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007942:	4b40      	ldr	r3, [pc, #256]	; (8007a44 <HAL_RCC_ClockConfig+0x250>)
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	493d      	ldr	r1, [pc, #244]	; (8007a44 <HAL_RCC_ClockConfig+0x250>)
 8007950:	4313      	orrs	r3, r2
 8007952:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	2b00      	cmp	r3, #0
 800795e:	d059      	beq.n	8007a14 <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d010      	beq.n	800798a <HAL_RCC_ClockConfig+0x196>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d00c      	beq.n	800798a <HAL_RCC_ClockConfig+0x196>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	2b02      	cmp	r3, #2
 8007976:	d008      	beq.n	800798a <HAL_RCC_ClockConfig+0x196>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	2b03      	cmp	r3, #3
 800797e:	d004      	beq.n	800798a <HAL_RCC_ClockConfig+0x196>
 8007980:	f240 2185 	movw	r1, #645	; 0x285
 8007984:	482d      	ldr	r0, [pc, #180]	; (8007a3c <HAL_RCC_ClockConfig+0x248>)
 8007986:	f7fa ff6c 	bl	8002862 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d107      	bne.n	80079a2 <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007992:	4b2c      	ldr	r3, [pc, #176]	; (8007a44 <HAL_RCC_ClockConfig+0x250>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d119      	bne.n	80079d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e0bf      	b.n	8007b22 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d003      	beq.n	80079b2 <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d107      	bne.n	80079c2 <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079b2:	4b24      	ldr	r3, [pc, #144]	; (8007a44 <HAL_RCC_ClockConfig+0x250>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d109      	bne.n	80079d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e0af      	b.n	8007b22 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079c2:	4b20      	ldr	r3, [pc, #128]	; (8007a44 <HAL_RCC_ClockConfig+0x250>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0302 	and.w	r3, r3, #2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d101      	bne.n	80079d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e0a7      	b.n	8007b22 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079d2:	4b1c      	ldr	r3, [pc, #112]	; (8007a44 <HAL_RCC_ClockConfig+0x250>)
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f023 0203 	bic.w	r2, r3, #3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	4919      	ldr	r1, [pc, #100]	; (8007a44 <HAL_RCC_ClockConfig+0x250>)
 80079e0:	4313      	orrs	r3, r2
 80079e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80079e4:	f7fb fa60 	bl	8002ea8 <HAL_GetTick>
 80079e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079ea:	e00a      	b.n	8007a02 <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079ec:	f7fb fa5c 	bl	8002ea8 <HAL_GetTick>
 80079f0:	4602      	mov	r2, r0
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d901      	bls.n	8007a02 <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e08f      	b.n	8007b22 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a02:	4b10      	ldr	r3, [pc, #64]	; (8007a44 <HAL_RCC_ClockConfig+0x250>)
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f003 020c 	and.w	r2, r3, #12
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d1eb      	bne.n	80079ec <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a14:	4b0a      	ldr	r3, [pc, #40]	; (8007a40 <HAL_RCC_ClockConfig+0x24c>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 030f 	and.w	r3, r3, #15
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d212      	bcs.n	8007a48 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a22:	4b07      	ldr	r3, [pc, #28]	; (8007a40 <HAL_RCC_ClockConfig+0x24c>)
 8007a24:	683a      	ldr	r2, [r7, #0]
 8007a26:	b2d2      	uxtb	r2, r2
 8007a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a2a:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <HAL_RCC_ClockConfig+0x24c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 030f 	and.w	r3, r3, #15
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d007      	beq.n	8007a48 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e072      	b.n	8007b22 <HAL_RCC_ClockConfig+0x32e>
 8007a3c:	0800be6c 	.word	0x0800be6c
 8007a40:	40023c00 	.word	0x40023c00
 8007a44:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0304 	and.w	r3, r3, #4
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d025      	beq.n	8007aa0 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d018      	beq.n	8007a8e <HAL_RCC_ClockConfig+0x29a>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a64:	d013      	beq.n	8007a8e <HAL_RCC_ClockConfig+0x29a>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007a6e:	d00e      	beq.n	8007a8e <HAL_RCC_ClockConfig+0x29a>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007a78:	d009      	beq.n	8007a8e <HAL_RCC_ClockConfig+0x29a>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007a82:	d004      	beq.n	8007a8e <HAL_RCC_ClockConfig+0x29a>
 8007a84:	f240 21c3 	movw	r1, #707	; 0x2c3
 8007a88:	4828      	ldr	r0, [pc, #160]	; (8007b2c <HAL_RCC_ClockConfig+0x338>)
 8007a8a:	f7fa feea 	bl	8002862 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a8e:	4b28      	ldr	r3, [pc, #160]	; (8007b30 <HAL_RCC_ClockConfig+0x33c>)
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	4925      	ldr	r1, [pc, #148]	; (8007b30 <HAL_RCC_ClockConfig+0x33c>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 0308 	and.w	r3, r3, #8
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d026      	beq.n	8007afa <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d018      	beq.n	8007ae6 <HAL_RCC_ClockConfig+0x2f2>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007abc:	d013      	beq.n	8007ae6 <HAL_RCC_ClockConfig+0x2f2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007ac6:	d00e      	beq.n	8007ae6 <HAL_RCC_ClockConfig+0x2f2>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007ad0:	d009      	beq.n	8007ae6 <HAL_RCC_ClockConfig+0x2f2>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8007ada:	d004      	beq.n	8007ae6 <HAL_RCC_ClockConfig+0x2f2>
 8007adc:	f240 21ca 	movw	r1, #714	; 0x2ca
 8007ae0:	4812      	ldr	r0, [pc, #72]	; (8007b2c <HAL_RCC_ClockConfig+0x338>)
 8007ae2:	f7fa febe 	bl	8002862 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ae6:	4b12      	ldr	r3, [pc, #72]	; (8007b30 <HAL_RCC_ClockConfig+0x33c>)
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	00db      	lsls	r3, r3, #3
 8007af4:	490e      	ldr	r1, [pc, #56]	; (8007b30 <HAL_RCC_ClockConfig+0x33c>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007afa:	f000 f887 	bl	8007c0c <HAL_RCC_GetSysClockFreq>
 8007afe:	4602      	mov	r2, r0
 8007b00:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <HAL_RCC_ClockConfig+0x33c>)
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	091b      	lsrs	r3, r3, #4
 8007b06:	f003 030f 	and.w	r3, r3, #15
 8007b0a:	490a      	ldr	r1, [pc, #40]	; (8007b34 <HAL_RCC_ClockConfig+0x340>)
 8007b0c:	5ccb      	ldrb	r3, [r1, r3]
 8007b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b12:	4a09      	ldr	r2, [pc, #36]	; (8007b38 <HAL_RCC_ClockConfig+0x344>)
 8007b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007b16:	4b09      	ldr	r3, [pc, #36]	; (8007b3c <HAL_RCC_ClockConfig+0x348>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fa ffc4 	bl	8002aa8 <HAL_InitTick>

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	0800be6c 	.word	0x0800be6c
 8007b30:	40023800 	.word	0x40023800
 8007b34:	0800bfb8 	.word	0x0800bfb8
 8007b38:	20000040 	.word	0x20000040
 8007b3c:	20000044 	.word	0x20000044

08007b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b40:	b480      	push	{r7}
 8007b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b44:	4b03      	ldr	r3, [pc, #12]	; (8007b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b46:	681b      	ldr	r3, [r3, #0]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	20000040 	.word	0x20000040

08007b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007b5c:	f7ff fff0 	bl	8007b40 <HAL_RCC_GetHCLKFreq>
 8007b60:	4602      	mov	r2, r0
 8007b62:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	0a9b      	lsrs	r3, r3, #10
 8007b68:	f003 0307 	and.w	r3, r3, #7
 8007b6c:	4903      	ldr	r1, [pc, #12]	; (8007b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b6e:	5ccb      	ldrb	r3, [r1, r3]
 8007b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	40023800 	.word	0x40023800
 8007b7c:	0800bfc8 	.word	0x0800bfc8

08007b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007b84:	f7ff ffdc 	bl	8007b40 <HAL_RCC_GetHCLKFreq>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	0b5b      	lsrs	r3, r3, #13
 8007b90:	f003 0307 	and.w	r3, r3, #7
 8007b94:	4903      	ldr	r1, [pc, #12]	; (8007ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b96:	5ccb      	ldrb	r3, [r1, r3]
 8007b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	40023800 	.word	0x40023800
 8007ba4:	0800bfc8 	.word	0x0800bfc8

08007ba8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	220f      	movs	r2, #15
 8007bb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007bb8:	4b12      	ldr	r3, [pc, #72]	; (8007c04 <HAL_RCC_GetClockConfig+0x5c>)
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f003 0203 	and.w	r2, r3, #3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007bc4:	4b0f      	ldr	r3, [pc, #60]	; (8007c04 <HAL_RCC_GetClockConfig+0x5c>)
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007bd0:	4b0c      	ldr	r3, [pc, #48]	; (8007c04 <HAL_RCC_GetClockConfig+0x5c>)
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007bdc:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <HAL_RCC_GetClockConfig+0x5c>)
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	08db      	lsrs	r3, r3, #3
 8007be2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007bea:	4b07      	ldr	r3, [pc, #28]	; (8007c08 <HAL_RCC_GetClockConfig+0x60>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 020f 	and.w	r2, r3, #15
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	601a      	str	r2, [r3, #0]
}
 8007bf6:	bf00      	nop
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	40023800 	.word	0x40023800
 8007c08:	40023c00 	.word	0x40023c00

08007c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c10:	b0ae      	sub	sp, #184	; 0xb8
 8007c12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007c14:	2300      	movs	r3, #0
 8007c16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007c20:	2300      	movs	r3, #0
 8007c22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c32:	4bcb      	ldr	r3, [pc, #812]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x354>)
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f003 030c 	and.w	r3, r3, #12
 8007c3a:	2b0c      	cmp	r3, #12
 8007c3c:	f200 8206 	bhi.w	800804c <HAL_RCC_GetSysClockFreq+0x440>
 8007c40:	a201      	add	r2, pc, #4	; (adr r2, 8007c48 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c46:	bf00      	nop
 8007c48:	08007c7d 	.word	0x08007c7d
 8007c4c:	0800804d 	.word	0x0800804d
 8007c50:	0800804d 	.word	0x0800804d
 8007c54:	0800804d 	.word	0x0800804d
 8007c58:	08007c85 	.word	0x08007c85
 8007c5c:	0800804d 	.word	0x0800804d
 8007c60:	0800804d 	.word	0x0800804d
 8007c64:	0800804d 	.word	0x0800804d
 8007c68:	08007c8d 	.word	0x08007c8d
 8007c6c:	0800804d 	.word	0x0800804d
 8007c70:	0800804d 	.word	0x0800804d
 8007c74:	0800804d 	.word	0x0800804d
 8007c78:	08007e7d 	.word	0x08007e7d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c7c:	4bb9      	ldr	r3, [pc, #740]	; (8007f64 <HAL_RCC_GetSysClockFreq+0x358>)
 8007c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007c82:	e1e7      	b.n	8008054 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c84:	4bb8      	ldr	r3, [pc, #736]	; (8007f68 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007c86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007c8a:	e1e3      	b.n	8008054 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c8c:	4bb4      	ldr	r3, [pc, #720]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x354>)
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c98:	4bb1      	ldr	r3, [pc, #708]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x354>)
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d071      	beq.n	8007d88 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ca4:	4bae      	ldr	r3, [pc, #696]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x354>)
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	099b      	lsrs	r3, r3, #6
 8007caa:	2200      	movs	r2, #0
 8007cac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007cb0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007cb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007cc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007cca:	4622      	mov	r2, r4
 8007ccc:	462b      	mov	r3, r5
 8007cce:	f04f 0000 	mov.w	r0, #0
 8007cd2:	f04f 0100 	mov.w	r1, #0
 8007cd6:	0159      	lsls	r1, r3, #5
 8007cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007cdc:	0150      	lsls	r0, r2, #5
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	1a51      	subs	r1, r2, r1
 8007ce6:	6439      	str	r1, [r7, #64]	; 0x40
 8007ce8:	4629      	mov	r1, r5
 8007cea:	eb63 0301 	sbc.w	r3, r3, r1
 8007cee:	647b      	str	r3, [r7, #68]	; 0x44
 8007cf0:	f04f 0200 	mov.w	r2, #0
 8007cf4:	f04f 0300 	mov.w	r3, #0
 8007cf8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007cfc:	4649      	mov	r1, r9
 8007cfe:	018b      	lsls	r3, r1, #6
 8007d00:	4641      	mov	r1, r8
 8007d02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007d06:	4641      	mov	r1, r8
 8007d08:	018a      	lsls	r2, r1, #6
 8007d0a:	4641      	mov	r1, r8
 8007d0c:	1a51      	subs	r1, r2, r1
 8007d0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d10:	4649      	mov	r1, r9
 8007d12:	eb63 0301 	sbc.w	r3, r3, r1
 8007d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d18:	f04f 0200 	mov.w	r2, #0
 8007d1c:	f04f 0300 	mov.w	r3, #0
 8007d20:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007d24:	4649      	mov	r1, r9
 8007d26:	00cb      	lsls	r3, r1, #3
 8007d28:	4641      	mov	r1, r8
 8007d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d2e:	4641      	mov	r1, r8
 8007d30:	00ca      	lsls	r2, r1, #3
 8007d32:	4610      	mov	r0, r2
 8007d34:	4619      	mov	r1, r3
 8007d36:	4603      	mov	r3, r0
 8007d38:	4622      	mov	r2, r4
 8007d3a:	189b      	adds	r3, r3, r2
 8007d3c:	633b      	str	r3, [r7, #48]	; 0x30
 8007d3e:	462b      	mov	r3, r5
 8007d40:	460a      	mov	r2, r1
 8007d42:	eb42 0303 	adc.w	r3, r2, r3
 8007d46:	637b      	str	r3, [r7, #52]	; 0x34
 8007d48:	f04f 0200 	mov.w	r2, #0
 8007d4c:	f04f 0300 	mov.w	r3, #0
 8007d50:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007d54:	4629      	mov	r1, r5
 8007d56:	024b      	lsls	r3, r1, #9
 8007d58:	4621      	mov	r1, r4
 8007d5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007d5e:	4621      	mov	r1, r4
 8007d60:	024a      	lsls	r2, r1, #9
 8007d62:	4610      	mov	r0, r2
 8007d64:	4619      	mov	r1, r3
 8007d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007d74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007d78:	f7f8 fa4a 	bl	8000210 <__aeabi_uldivmod>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4613      	mov	r3, r2
 8007d82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d86:	e067      	b.n	8007e58 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d88:	4b75      	ldr	r3, [pc, #468]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	099b      	lsrs	r3, r3, #6
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d94:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007d98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007da0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007da2:	2300      	movs	r3, #0
 8007da4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007da6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007daa:	4622      	mov	r2, r4
 8007dac:	462b      	mov	r3, r5
 8007dae:	f04f 0000 	mov.w	r0, #0
 8007db2:	f04f 0100 	mov.w	r1, #0
 8007db6:	0159      	lsls	r1, r3, #5
 8007db8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007dbc:	0150      	lsls	r0, r2, #5
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	1a51      	subs	r1, r2, r1
 8007dc6:	62b9      	str	r1, [r7, #40]	; 0x28
 8007dc8:	4629      	mov	r1, r5
 8007dca:	eb63 0301 	sbc.w	r3, r3, r1
 8007dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dd0:	f04f 0200 	mov.w	r2, #0
 8007dd4:	f04f 0300 	mov.w	r3, #0
 8007dd8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007ddc:	4649      	mov	r1, r9
 8007dde:	018b      	lsls	r3, r1, #6
 8007de0:	4641      	mov	r1, r8
 8007de2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007de6:	4641      	mov	r1, r8
 8007de8:	018a      	lsls	r2, r1, #6
 8007dea:	4641      	mov	r1, r8
 8007dec:	ebb2 0a01 	subs.w	sl, r2, r1
 8007df0:	4649      	mov	r1, r9
 8007df2:	eb63 0b01 	sbc.w	fp, r3, r1
 8007df6:	f04f 0200 	mov.w	r2, #0
 8007dfa:	f04f 0300 	mov.w	r3, #0
 8007dfe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e02:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e0a:	4692      	mov	sl, r2
 8007e0c:	469b      	mov	fp, r3
 8007e0e:	4623      	mov	r3, r4
 8007e10:	eb1a 0303 	adds.w	r3, sl, r3
 8007e14:	623b      	str	r3, [r7, #32]
 8007e16:	462b      	mov	r3, r5
 8007e18:	eb4b 0303 	adc.w	r3, fp, r3
 8007e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e1e:	f04f 0200 	mov.w	r2, #0
 8007e22:	f04f 0300 	mov.w	r3, #0
 8007e26:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007e2a:	4629      	mov	r1, r5
 8007e2c:	028b      	lsls	r3, r1, #10
 8007e2e:	4621      	mov	r1, r4
 8007e30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e34:	4621      	mov	r1, r4
 8007e36:	028a      	lsls	r2, r1, #10
 8007e38:	4610      	mov	r0, r2
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e40:	2200      	movs	r2, #0
 8007e42:	673b      	str	r3, [r7, #112]	; 0x70
 8007e44:	677a      	str	r2, [r7, #116]	; 0x74
 8007e46:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007e4a:	f7f8 f9e1 	bl	8000210 <__aeabi_uldivmod>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	460b      	mov	r3, r1
 8007e52:	4613      	mov	r3, r2
 8007e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e58:	4b41      	ldr	r3, [pc, #260]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x354>)
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	0c1b      	lsrs	r3, r3, #16
 8007e5e:	f003 0303 	and.w	r3, r3, #3
 8007e62:	3301      	adds	r3, #1
 8007e64:	005b      	lsls	r3, r3, #1
 8007e66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007e6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007e7a:	e0eb      	b.n	8008054 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e7c:	4b38      	ldr	r3, [pc, #224]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x354>)
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e88:	4b35      	ldr	r3, [pc, #212]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x354>)
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d06b      	beq.n	8007f6c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e94:	4b32      	ldr	r3, [pc, #200]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x354>)
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	099b      	lsrs	r3, r3, #6
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ea6:	663b      	str	r3, [r7, #96]	; 0x60
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	667b      	str	r3, [r7, #100]	; 0x64
 8007eac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007eb0:	4622      	mov	r2, r4
 8007eb2:	462b      	mov	r3, r5
 8007eb4:	f04f 0000 	mov.w	r0, #0
 8007eb8:	f04f 0100 	mov.w	r1, #0
 8007ebc:	0159      	lsls	r1, r3, #5
 8007ebe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ec2:	0150      	lsls	r0, r2, #5
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4621      	mov	r1, r4
 8007eca:	1a51      	subs	r1, r2, r1
 8007ecc:	61b9      	str	r1, [r7, #24]
 8007ece:	4629      	mov	r1, r5
 8007ed0:	eb63 0301 	sbc.w	r3, r3, r1
 8007ed4:	61fb      	str	r3, [r7, #28]
 8007ed6:	f04f 0200 	mov.w	r2, #0
 8007eda:	f04f 0300 	mov.w	r3, #0
 8007ede:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007ee2:	4659      	mov	r1, fp
 8007ee4:	018b      	lsls	r3, r1, #6
 8007ee6:	4651      	mov	r1, sl
 8007ee8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007eec:	4651      	mov	r1, sl
 8007eee:	018a      	lsls	r2, r1, #6
 8007ef0:	4651      	mov	r1, sl
 8007ef2:	ebb2 0801 	subs.w	r8, r2, r1
 8007ef6:	4659      	mov	r1, fp
 8007ef8:	eb63 0901 	sbc.w	r9, r3, r1
 8007efc:	f04f 0200 	mov.w	r2, #0
 8007f00:	f04f 0300 	mov.w	r3, #0
 8007f04:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f0c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f10:	4690      	mov	r8, r2
 8007f12:	4699      	mov	r9, r3
 8007f14:	4623      	mov	r3, r4
 8007f16:	eb18 0303 	adds.w	r3, r8, r3
 8007f1a:	613b      	str	r3, [r7, #16]
 8007f1c:	462b      	mov	r3, r5
 8007f1e:	eb49 0303 	adc.w	r3, r9, r3
 8007f22:	617b      	str	r3, [r7, #20]
 8007f24:	f04f 0200 	mov.w	r2, #0
 8007f28:	f04f 0300 	mov.w	r3, #0
 8007f2c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8007f30:	4629      	mov	r1, r5
 8007f32:	024b      	lsls	r3, r1, #9
 8007f34:	4621      	mov	r1, r4
 8007f36:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	024a      	lsls	r2, r1, #9
 8007f3e:	4610      	mov	r0, r2
 8007f40:	4619      	mov	r1, r3
 8007f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f46:	2200      	movs	r2, #0
 8007f48:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f4a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007f4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007f50:	f7f8 f95e 	bl	8000210 <__aeabi_uldivmod>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	4613      	mov	r3, r2
 8007f5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f5e:	e065      	b.n	800802c <HAL_RCC_GetSysClockFreq+0x420>
 8007f60:	40023800 	.word	0x40023800
 8007f64:	00f42400 	.word	0x00f42400
 8007f68:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f6c:	4b3d      	ldr	r3, [pc, #244]	; (8008064 <HAL_RCC_GetSysClockFreq+0x458>)
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	099b      	lsrs	r3, r3, #6
 8007f72:	2200      	movs	r2, #0
 8007f74:	4618      	mov	r0, r3
 8007f76:	4611      	mov	r1, r2
 8007f78:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007f7c:	653b      	str	r3, [r7, #80]	; 0x50
 8007f7e:	2300      	movs	r3, #0
 8007f80:	657b      	str	r3, [r7, #84]	; 0x54
 8007f82:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8007f86:	4642      	mov	r2, r8
 8007f88:	464b      	mov	r3, r9
 8007f8a:	f04f 0000 	mov.w	r0, #0
 8007f8e:	f04f 0100 	mov.w	r1, #0
 8007f92:	0159      	lsls	r1, r3, #5
 8007f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f98:	0150      	lsls	r0, r2, #5
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	4641      	mov	r1, r8
 8007fa0:	1a51      	subs	r1, r2, r1
 8007fa2:	60b9      	str	r1, [r7, #8]
 8007fa4:	4649      	mov	r1, r9
 8007fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8007faa:	60fb      	str	r3, [r7, #12]
 8007fac:	f04f 0200 	mov.w	r2, #0
 8007fb0:	f04f 0300 	mov.w	r3, #0
 8007fb4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007fb8:	4659      	mov	r1, fp
 8007fba:	018b      	lsls	r3, r1, #6
 8007fbc:	4651      	mov	r1, sl
 8007fbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007fc2:	4651      	mov	r1, sl
 8007fc4:	018a      	lsls	r2, r1, #6
 8007fc6:	4651      	mov	r1, sl
 8007fc8:	1a54      	subs	r4, r2, r1
 8007fca:	4659      	mov	r1, fp
 8007fcc:	eb63 0501 	sbc.w	r5, r3, r1
 8007fd0:	f04f 0200 	mov.w	r2, #0
 8007fd4:	f04f 0300 	mov.w	r3, #0
 8007fd8:	00eb      	lsls	r3, r5, #3
 8007fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fde:	00e2      	lsls	r2, r4, #3
 8007fe0:	4614      	mov	r4, r2
 8007fe2:	461d      	mov	r5, r3
 8007fe4:	4643      	mov	r3, r8
 8007fe6:	18e3      	adds	r3, r4, r3
 8007fe8:	603b      	str	r3, [r7, #0]
 8007fea:	464b      	mov	r3, r9
 8007fec:	eb45 0303 	adc.w	r3, r5, r3
 8007ff0:	607b      	str	r3, [r7, #4]
 8007ff2:	f04f 0200 	mov.w	r2, #0
 8007ff6:	f04f 0300 	mov.w	r3, #0
 8007ffa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ffe:	4629      	mov	r1, r5
 8008000:	028b      	lsls	r3, r1, #10
 8008002:	4621      	mov	r1, r4
 8008004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008008:	4621      	mov	r1, r4
 800800a:	028a      	lsls	r2, r1, #10
 800800c:	4610      	mov	r0, r2
 800800e:	4619      	mov	r1, r3
 8008010:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008014:	2200      	movs	r2, #0
 8008016:	64bb      	str	r3, [r7, #72]	; 0x48
 8008018:	64fa      	str	r2, [r7, #76]	; 0x4c
 800801a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800801e:	f7f8 f8f7 	bl	8000210 <__aeabi_uldivmod>
 8008022:	4602      	mov	r2, r0
 8008024:	460b      	mov	r3, r1
 8008026:	4613      	mov	r3, r2
 8008028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800802c:	4b0d      	ldr	r3, [pc, #52]	; (8008064 <HAL_RCC_GetSysClockFreq+0x458>)
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	0f1b      	lsrs	r3, r3, #28
 8008032:	f003 0307 	and.w	r3, r3, #7
 8008036:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800803a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800803e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008042:	fbb2 f3f3 	udiv	r3, r2, r3
 8008046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800804a:	e003      	b.n	8008054 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800804c:	4b06      	ldr	r3, [pc, #24]	; (8008068 <HAL_RCC_GetSysClockFreq+0x45c>)
 800804e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008052:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008054:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008058:	4618      	mov	r0, r3
 800805a:	37b8      	adds	r7, #184	; 0xb8
 800805c:	46bd      	mov	sp, r7
 800805e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008062:	bf00      	nop
 8008064:	40023800 	.word	0x40023800
 8008068:	00f42400 	.word	0x00f42400

0800806c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d101      	bne.n	800807e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e347      	b.n	800870e <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b0f      	cmp	r3, #15
 8008084:	d904      	bls.n	8008090 <HAL_RCC_OscConfig+0x24>
 8008086:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 800808a:	4893      	ldr	r0, [pc, #588]	; (80082d8 <HAL_RCC_OscConfig+0x26c>)
 800808c:	f7fa fbe9 	bl	8002862 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 8096 	beq.w	80081ca <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00e      	beq.n	80080c4 <HAL_RCC_OscConfig+0x58>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080ae:	d009      	beq.n	80080c4 <HAL_RCC_OscConfig+0x58>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080b8:	d004      	beq.n	80080c4 <HAL_RCC_OscConfig+0x58>
 80080ba:	f640 5115 	movw	r1, #3349	; 0xd15
 80080be:	4886      	ldr	r0, [pc, #536]	; (80082d8 <HAL_RCC_OscConfig+0x26c>)
 80080c0:	f7fa fbcf 	bl	8002862 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80080c4:	4b85      	ldr	r3, [pc, #532]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f003 030c 	and.w	r3, r3, #12
 80080cc:	2b04      	cmp	r3, #4
 80080ce:	d019      	beq.n	8008104 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80080d0:	4b82      	ldr	r3, [pc, #520]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80080d8:	2b08      	cmp	r3, #8
 80080da:	d106      	bne.n	80080ea <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80080dc:	4b7f      	ldr	r3, [pc, #508]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080e8:	d00c      	beq.n	8008104 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080ea:	4b7c      	ldr	r3, [pc, #496]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80080f2:	2b0c      	cmp	r3, #12
 80080f4:	d112      	bne.n	800811c <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80080f6:	4b79      	ldr	r3, [pc, #484]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008102:	d10b      	bne.n	800811c <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008104:	4b75      	ldr	r3, [pc, #468]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d05b      	beq.n	80081c8 <HAL_RCC_OscConfig+0x15c>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d157      	bne.n	80081c8 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e2f8      	b.n	800870e <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008124:	d106      	bne.n	8008134 <HAL_RCC_OscConfig+0xc8>
 8008126:	4b6d      	ldr	r3, [pc, #436]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a6c      	ldr	r2, [pc, #432]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 800812c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008130:	6013      	str	r3, [r2, #0]
 8008132:	e01d      	b.n	8008170 <HAL_RCC_OscConfig+0x104>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800813c:	d10c      	bne.n	8008158 <HAL_RCC_OscConfig+0xec>
 800813e:	4b67      	ldr	r3, [pc, #412]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a66      	ldr	r2, [pc, #408]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 8008144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008148:	6013      	str	r3, [r2, #0]
 800814a:	4b64      	ldr	r3, [pc, #400]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a63      	ldr	r2, [pc, #396]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 8008150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008154:	6013      	str	r3, [r2, #0]
 8008156:	e00b      	b.n	8008170 <HAL_RCC_OscConfig+0x104>
 8008158:	4b60      	ldr	r3, [pc, #384]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a5f      	ldr	r2, [pc, #380]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 800815e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008162:	6013      	str	r3, [r2, #0]
 8008164:	4b5d      	ldr	r3, [pc, #372]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a5c      	ldr	r2, [pc, #368]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 800816a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800816e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d013      	beq.n	80081a0 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008178:	f7fa fe96 	bl	8002ea8 <HAL_GetTick>
 800817c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800817e:	e008      	b.n	8008192 <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008180:	f7fa fe92 	bl	8002ea8 <HAL_GetTick>
 8008184:	4602      	mov	r2, r0
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	2b64      	cmp	r3, #100	; 0x64
 800818c:	d901      	bls.n	8008192 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e2bd      	b.n	800870e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008192:	4b52      	ldr	r3, [pc, #328]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d0f0      	beq.n	8008180 <HAL_RCC_OscConfig+0x114>
 800819e:	e014      	b.n	80081ca <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081a0:	f7fa fe82 	bl	8002ea8 <HAL_GetTick>
 80081a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081a6:	e008      	b.n	80081ba <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081a8:	f7fa fe7e 	bl	8002ea8 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	2b64      	cmp	r3, #100	; 0x64
 80081b4:	d901      	bls.n	80081ba <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e2a9      	b.n	800870e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80081ba:	4b48      	ldr	r3, [pc, #288]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1f0      	bne.n	80081a8 <HAL_RCC_OscConfig+0x13c>
 80081c6:	e000      	b.n	80081ca <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 0302 	and.w	r3, r3, #2
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 808c 	beq.w	80082f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d008      	beq.n	80081f2 <HAL_RCC_OscConfig+0x186>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d004      	beq.n	80081f2 <HAL_RCC_OscConfig+0x186>
 80081e8:	f640 514d 	movw	r1, #3405	; 0xd4d
 80081ec:	483a      	ldr	r0, [pc, #232]	; (80082d8 <HAL_RCC_OscConfig+0x26c>)
 80081ee:	f7fa fb38 	bl	8002862 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	2b1f      	cmp	r3, #31
 80081f8:	d904      	bls.n	8008204 <HAL_RCC_OscConfig+0x198>
 80081fa:	f640 514e 	movw	r1, #3406	; 0xd4e
 80081fe:	4836      	ldr	r0, [pc, #216]	; (80082d8 <HAL_RCC_OscConfig+0x26c>)
 8008200:	f7fa fb2f 	bl	8002862 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008204:	4b35      	ldr	r3, [pc, #212]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f003 030c 	and.w	r3, r3, #12
 800820c:	2b00      	cmp	r3, #0
 800820e:	d017      	beq.n	8008240 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008210:	4b32      	ldr	r3, [pc, #200]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008218:	2b08      	cmp	r3, #8
 800821a:	d105      	bne.n	8008228 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800821c:	4b2f      	ldr	r3, [pc, #188]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00b      	beq.n	8008240 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008228:	4b2c      	ldr	r3, [pc, #176]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008230:	2b0c      	cmp	r3, #12
 8008232:	d11c      	bne.n	800826e <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008234:	4b29      	ldr	r3, [pc, #164]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d116      	bne.n	800826e <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008240:	4b26      	ldr	r3, [pc, #152]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0302 	and.w	r3, r3, #2
 8008248:	2b00      	cmp	r3, #0
 800824a:	d005      	beq.n	8008258 <HAL_RCC_OscConfig+0x1ec>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d001      	beq.n	8008258 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e25a      	b.n	800870e <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008258:	4b20      	ldr	r3, [pc, #128]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	00db      	lsls	r3, r3, #3
 8008266:	491d      	ldr	r1, [pc, #116]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 8008268:	4313      	orrs	r3, r2
 800826a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800826c:	e040      	b.n	80082f0 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d020      	beq.n	80082b8 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008276:	4b1a      	ldr	r3, [pc, #104]	; (80082e0 <HAL_RCC_OscConfig+0x274>)
 8008278:	2201      	movs	r2, #1
 800827a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800827c:	f7fa fe14 	bl	8002ea8 <HAL_GetTick>
 8008280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008282:	e008      	b.n	8008296 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008284:	f7fa fe10 	bl	8002ea8 <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	2b02      	cmp	r3, #2
 8008290:	d901      	bls.n	8008296 <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e23b      	b.n	800870e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008296:	4b11      	ldr	r3, [pc, #68]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0302 	and.w	r3, r3, #2
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0f0      	beq.n	8008284 <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082a2:	4b0e      	ldr	r3, [pc, #56]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	00db      	lsls	r3, r3, #3
 80082b0:	490a      	ldr	r1, [pc, #40]	; (80082dc <HAL_RCC_OscConfig+0x270>)
 80082b2:	4313      	orrs	r3, r2
 80082b4:	600b      	str	r3, [r1, #0]
 80082b6:	e01b      	b.n	80082f0 <HAL_RCC_OscConfig+0x284>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082b8:	4b09      	ldr	r3, [pc, #36]	; (80082e0 <HAL_RCC_OscConfig+0x274>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082be:	f7fa fdf3 	bl	8002ea8 <HAL_GetTick>
 80082c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082c4:	e00e      	b.n	80082e4 <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082c6:	f7fa fdef 	bl	8002ea8 <HAL_GetTick>
 80082ca:	4602      	mov	r2, r0
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d907      	bls.n	80082e4 <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e21a      	b.n	800870e <HAL_RCC_OscConfig+0x6a2>
 80082d8:	0800bea4 	.word	0x0800bea4
 80082dc:	40023800 	.word	0x40023800
 80082e0:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082e4:	4b74      	ldr	r3, [pc, #464]	; (80084b8 <HAL_RCC_OscConfig+0x44c>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0302 	and.w	r3, r3, #2
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1ea      	bne.n	80082c6 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0308 	and.w	r3, r3, #8
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d03d      	beq.n	8008378 <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d008      	beq.n	8008316 <HAL_RCC_OscConfig+0x2aa>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d004      	beq.n	8008316 <HAL_RCC_OscConfig+0x2aa>
 800830c:	f640 5194 	movw	r1, #3476	; 0xd94
 8008310:	486a      	ldr	r0, [pc, #424]	; (80084bc <HAL_RCC_OscConfig+0x450>)
 8008312:	f7fa faa6 	bl	8002862 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d016      	beq.n	800834c <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800831e:	4b68      	ldr	r3, [pc, #416]	; (80084c0 <HAL_RCC_OscConfig+0x454>)
 8008320:	2201      	movs	r2, #1
 8008322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008324:	f7fa fdc0 	bl	8002ea8 <HAL_GetTick>
 8008328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800832a:	e008      	b.n	800833e <HAL_RCC_OscConfig+0x2d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800832c:	f7fa fdbc 	bl	8002ea8 <HAL_GetTick>
 8008330:	4602      	mov	r2, r0
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	2b02      	cmp	r3, #2
 8008338:	d901      	bls.n	800833e <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 800833a:	2303      	movs	r3, #3
 800833c:	e1e7      	b.n	800870e <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800833e:	4b5e      	ldr	r3, [pc, #376]	; (80084b8 <HAL_RCC_OscConfig+0x44c>)
 8008340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008342:	f003 0302 	and.w	r3, r3, #2
 8008346:	2b00      	cmp	r3, #0
 8008348:	d0f0      	beq.n	800832c <HAL_RCC_OscConfig+0x2c0>
 800834a:	e015      	b.n	8008378 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800834c:	4b5c      	ldr	r3, [pc, #368]	; (80084c0 <HAL_RCC_OscConfig+0x454>)
 800834e:	2200      	movs	r2, #0
 8008350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008352:	f7fa fda9 	bl	8002ea8 <HAL_GetTick>
 8008356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008358:	e008      	b.n	800836c <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800835a:	f7fa fda5 	bl	8002ea8 <HAL_GetTick>
 800835e:	4602      	mov	r2, r0
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	2b02      	cmp	r3, #2
 8008366:	d901      	bls.n	800836c <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e1d0      	b.n	800870e <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800836c:	4b52      	ldr	r3, [pc, #328]	; (80084b8 <HAL_RCC_OscConfig+0x44c>)
 800836e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008370:	f003 0302 	and.w	r3, r3, #2
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1f0      	bne.n	800835a <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0304 	and.w	r3, r3, #4
 8008380:	2b00      	cmp	r3, #0
 8008382:	f000 80b0 	beq.w	80084e6 <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008386:	2300      	movs	r3, #0
 8008388:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00c      	beq.n	80083ac <HAL_RCC_OscConfig+0x340>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d008      	beq.n	80083ac <HAL_RCC_OscConfig+0x340>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	2b05      	cmp	r3, #5
 80083a0:	d004      	beq.n	80083ac <HAL_RCC_OscConfig+0x340>
 80083a2:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 80083a6:	4845      	ldr	r0, [pc, #276]	; (80084bc <HAL_RCC_OscConfig+0x450>)
 80083a8:	f7fa fa5b 	bl	8002862 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083ac:	4b42      	ldr	r3, [pc, #264]	; (80084b8 <HAL_RCC_OscConfig+0x44c>)
 80083ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10f      	bne.n	80083d8 <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80083b8:	2300      	movs	r3, #0
 80083ba:	60bb      	str	r3, [r7, #8]
 80083bc:	4b3e      	ldr	r3, [pc, #248]	; (80084b8 <HAL_RCC_OscConfig+0x44c>)
 80083be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c0:	4a3d      	ldr	r2, [pc, #244]	; (80084b8 <HAL_RCC_OscConfig+0x44c>)
 80083c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083c6:	6413      	str	r3, [r2, #64]	; 0x40
 80083c8:	4b3b      	ldr	r3, [pc, #236]	; (80084b8 <HAL_RCC_OscConfig+0x44c>)
 80083ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083d0:	60bb      	str	r3, [r7, #8]
 80083d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083d4:	2301      	movs	r3, #1
 80083d6:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083d8:	4b3a      	ldr	r3, [pc, #232]	; (80084c4 <HAL_RCC_OscConfig+0x458>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d118      	bne.n	8008416 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80083e4:	4b37      	ldr	r3, [pc, #220]	; (80084c4 <HAL_RCC_OscConfig+0x458>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a36      	ldr	r2, [pc, #216]	; (80084c4 <HAL_RCC_OscConfig+0x458>)
 80083ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083f0:	f7fa fd5a 	bl	8002ea8 <HAL_GetTick>
 80083f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083f6:	e008      	b.n	800840a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083f8:	f7fa fd56 	bl	8002ea8 <HAL_GetTick>
 80083fc:	4602      	mov	r2, r0
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	2b02      	cmp	r3, #2
 8008404:	d901      	bls.n	800840a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e181      	b.n	800870e <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800840a:	4b2e      	ldr	r3, [pc, #184]	; (80084c4 <HAL_RCC_OscConfig+0x458>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008412:	2b00      	cmp	r3, #0
 8008414:	d0f0      	beq.n	80083f8 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d106      	bne.n	800842c <HAL_RCC_OscConfig+0x3c0>
 800841e:	4b26      	ldr	r3, [pc, #152]	; (80084b8 <HAL_RCC_OscConfig+0x44c>)
 8008420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008422:	4a25      	ldr	r2, [pc, #148]	; (80084b8 <HAL_RCC_OscConfig+0x44c>)
 8008424:	f043 0301 	orr.w	r3, r3, #1
 8008428:	6713      	str	r3, [r2, #112]	; 0x70
 800842a:	e01c      	b.n	8008466 <HAL_RCC_OscConfig+0x3fa>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	2b05      	cmp	r3, #5
 8008432:	d10c      	bne.n	800844e <HAL_RCC_OscConfig+0x3e2>
 8008434:	4b20      	ldr	r3, [pc, #128]	; (80084b8 <HAL_RCC_OscConfig+0x44c>)
 8008436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008438:	4a1f      	ldr	r2, [pc, #124]	; (80084b8 <HAL_RCC_OscConfig+0x44c>)
 800843a:	f043 0304 	orr.w	r3, r3, #4
 800843e:	6713      	str	r3, [r2, #112]	; 0x70
 8008440:	4b1d      	ldr	r3, [pc, #116]	; (80084b8 <HAL_RCC_OscConfig+0x44c>)
 8008442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008444:	4a1c      	ldr	r2, [pc, #112]	; (80084b8 <HAL_RCC_OscConfig+0x44c>)
 8008446:	f043 0301 	orr.w	r3, r3, #1
 800844a:	6713      	str	r3, [r2, #112]	; 0x70
 800844c:	e00b      	b.n	8008466 <HAL_RCC_OscConfig+0x3fa>
 800844e:	4b1a      	ldr	r3, [pc, #104]	; (80084b8 <HAL_RCC_OscConfig+0x44c>)
 8008450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008452:	4a19      	ldr	r2, [pc, #100]	; (80084b8 <HAL_RCC_OscConfig+0x44c>)
 8008454:	f023 0301 	bic.w	r3, r3, #1
 8008458:	6713      	str	r3, [r2, #112]	; 0x70
 800845a:	4b17      	ldr	r3, [pc, #92]	; (80084b8 <HAL_RCC_OscConfig+0x44c>)
 800845c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800845e:	4a16      	ldr	r2, [pc, #88]	; (80084b8 <HAL_RCC_OscConfig+0x44c>)
 8008460:	f023 0304 	bic.w	r3, r3, #4
 8008464:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d015      	beq.n	800849a <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800846e:	f7fa fd1b 	bl	8002ea8 <HAL_GetTick>
 8008472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008474:	e00a      	b.n	800848c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008476:	f7fa fd17 	bl	8002ea8 <HAL_GetTick>
 800847a:	4602      	mov	r2, r0
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	f241 3288 	movw	r2, #5000	; 0x1388
 8008484:	4293      	cmp	r3, r2
 8008486:	d901      	bls.n	800848c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e140      	b.n	800870e <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800848c:	4b0a      	ldr	r3, [pc, #40]	; (80084b8 <HAL_RCC_OscConfig+0x44c>)
 800848e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008490:	f003 0302 	and.w	r3, r3, #2
 8008494:	2b00      	cmp	r3, #0
 8008496:	d0ee      	beq.n	8008476 <HAL_RCC_OscConfig+0x40a>
 8008498:	e01c      	b.n	80084d4 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800849a:	f7fa fd05 	bl	8002ea8 <HAL_GetTick>
 800849e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084a0:	e012      	b.n	80084c8 <HAL_RCC_OscConfig+0x45c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084a2:	f7fa fd01 	bl	8002ea8 <HAL_GetTick>
 80084a6:	4602      	mov	r2, r0
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d909      	bls.n	80084c8 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e12a      	b.n	800870e <HAL_RCC_OscConfig+0x6a2>
 80084b8:	40023800 	.word	0x40023800
 80084bc:	0800bea4 	.word	0x0800bea4
 80084c0:	42470e80 	.word	0x42470e80
 80084c4:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084c8:	4b93      	ldr	r3, [pc, #588]	; (8008718 <HAL_RCC_OscConfig+0x6ac>)
 80084ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084cc:	f003 0302 	and.w	r3, r3, #2
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1e6      	bne.n	80084a2 <HAL_RCC_OscConfig+0x436>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084d4:	7dfb      	ldrb	r3, [r7, #23]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d105      	bne.n	80084e6 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084da:	4b8f      	ldr	r3, [pc, #572]	; (8008718 <HAL_RCC_OscConfig+0x6ac>)
 80084dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084de:	4a8e      	ldr	r2, [pc, #568]	; (8008718 <HAL_RCC_OscConfig+0x6ac>)
 80084e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00c      	beq.n	8008508 <HAL_RCC_OscConfig+0x49c>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d008      	beq.n	8008508 <HAL_RCC_OscConfig+0x49c>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d004      	beq.n	8008508 <HAL_RCC_OscConfig+0x49c>
 80084fe:	f640 6103 	movw	r1, #3587	; 0xe03
 8008502:	4886      	ldr	r0, [pc, #536]	; (800871c <HAL_RCC_OscConfig+0x6b0>)
 8008504:	f7fa f9ad 	bl	8002862 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 80fd 	beq.w	800870c <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008512:	4b81      	ldr	r3, [pc, #516]	; (8008718 <HAL_RCC_OscConfig+0x6ac>)
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f003 030c 	and.w	r3, r3, #12
 800851a:	2b08      	cmp	r3, #8
 800851c:	f000 80b6 	beq.w	800868c <HAL_RCC_OscConfig+0x620>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	2b02      	cmp	r3, #2
 8008526:	f040 809a 	bne.w	800865e <HAL_RCC_OscConfig+0x5f2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d009      	beq.n	8008546 <HAL_RCC_OscConfig+0x4da>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	69db      	ldr	r3, [r3, #28]
 8008536:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800853a:	d004      	beq.n	8008546 <HAL_RCC_OscConfig+0x4da>
 800853c:	f640 610c 	movw	r1, #3596	; 0xe0c
 8008540:	4876      	ldr	r0, [pc, #472]	; (800871c <HAL_RCC_OscConfig+0x6b0>)
 8008542:	f7fa f98e 	bl	8002862 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	2b3f      	cmp	r3, #63	; 0x3f
 800854c:	d904      	bls.n	8008558 <HAL_RCC_OscConfig+0x4ec>
 800854e:	f640 610d 	movw	r1, #3597	; 0xe0d
 8008552:	4872      	ldr	r0, [pc, #456]	; (800871c <HAL_RCC_OscConfig+0x6b0>)
 8008554:	f7fa f985 	bl	8002862 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855c:	2b31      	cmp	r3, #49	; 0x31
 800855e:	d904      	bls.n	800856a <HAL_RCC_OscConfig+0x4fe>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008564:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8008568:	d904      	bls.n	8008574 <HAL_RCC_OscConfig+0x508>
 800856a:	f640 610e 	movw	r1, #3598	; 0xe0e
 800856e:	486b      	ldr	r0, [pc, #428]	; (800871c <HAL_RCC_OscConfig+0x6b0>)
 8008570:	f7fa f977 	bl	8002862 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008578:	2b02      	cmp	r3, #2
 800857a:	d010      	beq.n	800859e <HAL_RCC_OscConfig+0x532>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008580:	2b04      	cmp	r3, #4
 8008582:	d00c      	beq.n	800859e <HAL_RCC_OscConfig+0x532>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008588:	2b06      	cmp	r3, #6
 800858a:	d008      	beq.n	800859e <HAL_RCC_OscConfig+0x532>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008590:	2b08      	cmp	r3, #8
 8008592:	d004      	beq.n	800859e <HAL_RCC_OscConfig+0x532>
 8008594:	f640 610f 	movw	r1, #3599	; 0xe0f
 8008598:	4860      	ldr	r0, [pc, #384]	; (800871c <HAL_RCC_OscConfig+0x6b0>)
 800859a:	f7fa f962 	bl	8002862 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d903      	bls.n	80085ae <HAL_RCC_OscConfig+0x542>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085aa:	2b0f      	cmp	r3, #15
 80085ac:	d904      	bls.n	80085b8 <HAL_RCC_OscConfig+0x54c>
 80085ae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80085b2:	485a      	ldr	r0, [pc, #360]	; (800871c <HAL_RCC_OscConfig+0x6b0>)
 80085b4:	f7fa f955 	bl	8002862 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d903      	bls.n	80085c8 <HAL_RCC_OscConfig+0x55c>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c4:	2b07      	cmp	r3, #7
 80085c6:	d904      	bls.n	80085d2 <HAL_RCC_OscConfig+0x566>
 80085c8:	f640 6111 	movw	r1, #3601	; 0xe11
 80085cc:	4853      	ldr	r0, [pc, #332]	; (800871c <HAL_RCC_OscConfig+0x6b0>)
 80085ce:	f7fa f948 	bl	8002862 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085d2:	4b53      	ldr	r3, [pc, #332]	; (8008720 <HAL_RCC_OscConfig+0x6b4>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085d8:	f7fa fc66 	bl	8002ea8 <HAL_GetTick>
 80085dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085de:	e008      	b.n	80085f2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085e0:	f7fa fc62 	bl	8002ea8 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d901      	bls.n	80085f2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e08d      	b.n	800870e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085f2:	4b49      	ldr	r3, [pc, #292]	; (8008718 <HAL_RCC_OscConfig+0x6ac>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1f0      	bne.n	80085e0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	69da      	ldr	r2, [r3, #28]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	431a      	orrs	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	019b      	lsls	r3, r3, #6
 800860e:	431a      	orrs	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008614:	085b      	lsrs	r3, r3, #1
 8008616:	3b01      	subs	r3, #1
 8008618:	041b      	lsls	r3, r3, #16
 800861a:	431a      	orrs	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008620:	061b      	lsls	r3, r3, #24
 8008622:	431a      	orrs	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008628:	071b      	lsls	r3, r3, #28
 800862a:	493b      	ldr	r1, [pc, #236]	; (8008718 <HAL_RCC_OscConfig+0x6ac>)
 800862c:	4313      	orrs	r3, r2
 800862e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008630:	4b3b      	ldr	r3, [pc, #236]	; (8008720 <HAL_RCC_OscConfig+0x6b4>)
 8008632:	2201      	movs	r2, #1
 8008634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008636:	f7fa fc37 	bl	8002ea8 <HAL_GetTick>
 800863a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800863c:	e008      	b.n	8008650 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800863e:	f7fa fc33 	bl	8002ea8 <HAL_GetTick>
 8008642:	4602      	mov	r2, r0
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	2b02      	cmp	r3, #2
 800864a:	d901      	bls.n	8008650 <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 800864c:	2303      	movs	r3, #3
 800864e:	e05e      	b.n	800870e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008650:	4b31      	ldr	r3, [pc, #196]	; (8008718 <HAL_RCC_OscConfig+0x6ac>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d0f0      	beq.n	800863e <HAL_RCC_OscConfig+0x5d2>
 800865c:	e056      	b.n	800870c <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800865e:	4b30      	ldr	r3, [pc, #192]	; (8008720 <HAL_RCC_OscConfig+0x6b4>)
 8008660:	2200      	movs	r2, #0
 8008662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008664:	f7fa fc20 	bl	8002ea8 <HAL_GetTick>
 8008668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800866a:	e008      	b.n	800867e <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800866c:	f7fa fc1c 	bl	8002ea8 <HAL_GetTick>
 8008670:	4602      	mov	r2, r0
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	2b02      	cmp	r3, #2
 8008678:	d901      	bls.n	800867e <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e047      	b.n	800870e <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800867e:	4b26      	ldr	r3, [pc, #152]	; (8008718 <HAL_RCC_OscConfig+0x6ac>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1f0      	bne.n	800866c <HAL_RCC_OscConfig+0x600>
 800868a:	e03f      	b.n	800870c <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d101      	bne.n	8008698 <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e03a      	b.n	800870e <HAL_RCC_OscConfig+0x6a2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008698:	4b1f      	ldr	r3, [pc, #124]	; (8008718 <HAL_RCC_OscConfig+0x6ac>)
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d030      	beq.n	8008708 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d129      	bne.n	8008708 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086be:	429a      	cmp	r2, r3
 80086c0:	d122      	bne.n	8008708 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80086c8:	4013      	ands	r3, r2
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80086ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d119      	bne.n	8008708 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086de:	085b      	lsrs	r3, r3, #1
 80086e0:	3b01      	subs	r3, #1
 80086e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d10f      	bne.n	8008708 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d107      	bne.n	8008708 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008702:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008704:	429a      	cmp	r2, r3
 8008706:	d001      	beq.n	800870c <HAL_RCC_OscConfig+0x6a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e000      	b.n	800870e <HAL_RCC_OscConfig+0x6a2>
        }
      }
    }
  }
  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	40023800 	.word	0x40023800
 800871c:	0800bea4 	.word	0x0800bea4
 8008720:	42470060 	.word	0x42470060

08008724 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e1a4      	b.n	8008a80 <HAL_SPI_Init+0x35c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a72      	ldr	r2, [pc, #456]	; (8008904 <HAL_SPI_Init+0x1e0>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d013      	beq.n	8008768 <HAL_SPI_Init+0x44>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a70      	ldr	r2, [pc, #448]	; (8008908 <HAL_SPI_Init+0x1e4>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d00e      	beq.n	8008768 <HAL_SPI_Init+0x44>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a6f      	ldr	r2, [pc, #444]	; (800890c <HAL_SPI_Init+0x1e8>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d009      	beq.n	8008768 <HAL_SPI_Init+0x44>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a6d      	ldr	r2, [pc, #436]	; (8008910 <HAL_SPI_Init+0x1ec>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d004      	beq.n	8008768 <HAL_SPI_Init+0x44>
 800875e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008762:	486c      	ldr	r0, [pc, #432]	; (8008914 <HAL_SPI_Init+0x1f0>)
 8008764:	f7fa f87d 	bl	8002862 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d009      	beq.n	8008784 <HAL_SPI_Init+0x60>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008778:	d004      	beq.n	8008784 <HAL_SPI_Init+0x60>
 800877a:	f240 1141 	movw	r1, #321	; 0x141
 800877e:	4865      	ldr	r0, [pc, #404]	; (8008914 <HAL_SPI_Init+0x1f0>)
 8008780:	f7fa f86f 	bl	8002862 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00e      	beq.n	80087aa <HAL_SPI_Init+0x86>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008794:	d009      	beq.n	80087aa <HAL_SPI_Init+0x86>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800879e:	d004      	beq.n	80087aa <HAL_SPI_Init+0x86>
 80087a0:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80087a4:	485b      	ldr	r0, [pc, #364]	; (8008914 <HAL_SPI_Init+0x1f0>)
 80087a6:	f7fa f85c 	bl	8002862 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087b2:	d008      	beq.n	80087c6 <HAL_SPI_Init+0xa2>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d004      	beq.n	80087c6 <HAL_SPI_Init+0xa2>
 80087bc:	f240 1143 	movw	r1, #323	; 0x143
 80087c0:	4854      	ldr	r0, [pc, #336]	; (8008914 <HAL_SPI_Init+0x1f0>)
 80087c2:	f7fa f84e 	bl	8002862 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087ce:	d00d      	beq.n	80087ec <HAL_SPI_Init+0xc8>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d009      	beq.n	80087ec <HAL_SPI_Init+0xc8>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087e0:	d004      	beq.n	80087ec <HAL_SPI_Init+0xc8>
 80087e2:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80087e6:	484b      	ldr	r0, [pc, #300]	; (8008914 <HAL_SPI_Init+0x1f0>)
 80087e8:	f7fa f83b 	bl	8002862 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	69db      	ldr	r3, [r3, #28]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d020      	beq.n	8008836 <HAL_SPI_Init+0x112>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	2b08      	cmp	r3, #8
 80087fa:	d01c      	beq.n	8008836 <HAL_SPI_Init+0x112>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	69db      	ldr	r3, [r3, #28]
 8008800:	2b10      	cmp	r3, #16
 8008802:	d018      	beq.n	8008836 <HAL_SPI_Init+0x112>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	69db      	ldr	r3, [r3, #28]
 8008808:	2b18      	cmp	r3, #24
 800880a:	d014      	beq.n	8008836 <HAL_SPI_Init+0x112>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	69db      	ldr	r3, [r3, #28]
 8008810:	2b20      	cmp	r3, #32
 8008812:	d010      	beq.n	8008836 <HAL_SPI_Init+0x112>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	69db      	ldr	r3, [r3, #28]
 8008818:	2b28      	cmp	r3, #40	; 0x28
 800881a:	d00c      	beq.n	8008836 <HAL_SPI_Init+0x112>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	69db      	ldr	r3, [r3, #28]
 8008820:	2b30      	cmp	r3, #48	; 0x30
 8008822:	d008      	beq.n	8008836 <HAL_SPI_Init+0x112>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	69db      	ldr	r3, [r3, #28]
 8008828:	2b38      	cmp	r3, #56	; 0x38
 800882a:	d004      	beq.n	8008836 <HAL_SPI_Init+0x112>
 800882c:	f240 1145 	movw	r1, #325	; 0x145
 8008830:	4838      	ldr	r0, [pc, #224]	; (8008914 <HAL_SPI_Init+0x1f0>)
 8008832:	f7fa f816 	bl	8002862 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d008      	beq.n	8008850 <HAL_SPI_Init+0x12c>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a1b      	ldr	r3, [r3, #32]
 8008842:	2b80      	cmp	r3, #128	; 0x80
 8008844:	d004      	beq.n	8008850 <HAL_SPI_Init+0x12c>
 8008846:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800884a:	4832      	ldr	r0, [pc, #200]	; (8008914 <HAL_SPI_Init+0x1f0>)
 800884c:	f7fa f809 	bl	8002862 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008854:	2b00      	cmp	r3, #0
 8008856:	d008      	beq.n	800886a <HAL_SPI_Init+0x146>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885c:	2b10      	cmp	r3, #16
 800885e:	d004      	beq.n	800886a <HAL_SPI_Init+0x146>
 8008860:	f240 1147 	movw	r1, #327	; 0x147
 8008864:	482b      	ldr	r0, [pc, #172]	; (8008914 <HAL_SPI_Init+0x1f0>)
 8008866:	f7f9 fffc 	bl	8002862 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	2b00      	cmp	r3, #0
 8008870:	d152      	bne.n	8008918 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d008      	beq.n	800888c <HAL_SPI_Init+0x168>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	2b02      	cmp	r3, #2
 8008880:	d004      	beq.n	800888c <HAL_SPI_Init+0x168>
 8008882:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8008886:	4823      	ldr	r0, [pc, #140]	; (8008914 <HAL_SPI_Init+0x1f0>)
 8008888:	f7f9 ffeb 	bl	8002862 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	695b      	ldr	r3, [r3, #20]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d008      	beq.n	80088a6 <HAL_SPI_Init+0x182>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d004      	beq.n	80088a6 <HAL_SPI_Init+0x182>
 800889c:	f240 114b 	movw	r1, #331	; 0x14b
 80088a0:	481c      	ldr	r0, [pc, #112]	; (8008914 <HAL_SPI_Init+0x1f0>)
 80088a2:	f7f9 ffde 	bl	8002862 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088ae:	d125      	bne.n	80088fc <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	69db      	ldr	r3, [r3, #28]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d05a      	beq.n	800896e <HAL_SPI_Init+0x24a>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	69db      	ldr	r3, [r3, #28]
 80088bc:	2b08      	cmp	r3, #8
 80088be:	d056      	beq.n	800896e <HAL_SPI_Init+0x24a>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	69db      	ldr	r3, [r3, #28]
 80088c4:	2b10      	cmp	r3, #16
 80088c6:	d052      	beq.n	800896e <HAL_SPI_Init+0x24a>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	69db      	ldr	r3, [r3, #28]
 80088cc:	2b18      	cmp	r3, #24
 80088ce:	d04e      	beq.n	800896e <HAL_SPI_Init+0x24a>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	69db      	ldr	r3, [r3, #28]
 80088d4:	2b20      	cmp	r3, #32
 80088d6:	d04a      	beq.n	800896e <HAL_SPI_Init+0x24a>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	69db      	ldr	r3, [r3, #28]
 80088dc:	2b28      	cmp	r3, #40	; 0x28
 80088de:	d046      	beq.n	800896e <HAL_SPI_Init+0x24a>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	69db      	ldr	r3, [r3, #28]
 80088e4:	2b30      	cmp	r3, #48	; 0x30
 80088e6:	d042      	beq.n	800896e <HAL_SPI_Init+0x24a>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	69db      	ldr	r3, [r3, #28]
 80088ec:	2b38      	cmp	r3, #56	; 0x38
 80088ee:	d03e      	beq.n	800896e <HAL_SPI_Init+0x24a>
 80088f0:	f240 114f 	movw	r1, #335	; 0x14f
 80088f4:	4807      	ldr	r0, [pc, #28]	; (8008914 <HAL_SPI_Init+0x1f0>)
 80088f6:	f7f9 ffb4 	bl	8002862 <assert_failed>
 80088fa:	e038      	b.n	800896e <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	61da      	str	r2, [r3, #28]
 8008902:	e034      	b.n	800896e <HAL_SPI_Init+0x24a>
 8008904:	40013000 	.word	0x40013000
 8008908:	40003800 	.word	0x40003800
 800890c:	40003c00 	.word	0x40003c00
 8008910:	40013400 	.word	0x40013400
 8008914:	0800bee0 	.word	0x0800bee0
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	69db      	ldr	r3, [r3, #28]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d020      	beq.n	8008962 <HAL_SPI_Init+0x23e>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	2b08      	cmp	r3, #8
 8008926:	d01c      	beq.n	8008962 <HAL_SPI_Init+0x23e>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	2b10      	cmp	r3, #16
 800892e:	d018      	beq.n	8008962 <HAL_SPI_Init+0x23e>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	2b18      	cmp	r3, #24
 8008936:	d014      	beq.n	8008962 <HAL_SPI_Init+0x23e>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	69db      	ldr	r3, [r3, #28]
 800893c:	2b20      	cmp	r3, #32
 800893e:	d010      	beq.n	8008962 <HAL_SPI_Init+0x23e>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	69db      	ldr	r3, [r3, #28]
 8008944:	2b28      	cmp	r3, #40	; 0x28
 8008946:	d00c      	beq.n	8008962 <HAL_SPI_Init+0x23e>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	69db      	ldr	r3, [r3, #28]
 800894c:	2b30      	cmp	r3, #48	; 0x30
 800894e:	d008      	beq.n	8008962 <HAL_SPI_Init+0x23e>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	69db      	ldr	r3, [r3, #28]
 8008954:	2b38      	cmp	r3, #56	; 0x38
 8008956:	d004      	beq.n	8008962 <HAL_SPI_Init+0x23e>
 8008958:	f240 1159 	movw	r1, #345	; 0x159
 800895c:	484a      	ldr	r0, [pc, #296]	; (8008a88 <HAL_SPI_Init+0x364>)
 800895e:	f7f9 ff80 	bl	8002862 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b00      	cmp	r3, #0
 800897e:	d126      	bne.n	80089ce <HAL_SPI_Init+0x2aa>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a40      	ldr	r2, [pc, #256]	; (8008a8c <HAL_SPI_Init+0x368>)
 800898c:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a3f      	ldr	r2, [pc, #252]	; (8008a90 <HAL_SPI_Init+0x36c>)
 8008992:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a3f      	ldr	r2, [pc, #252]	; (8008a94 <HAL_SPI_Init+0x370>)
 8008998:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a3e      	ldr	r2, [pc, #248]	; (8008a98 <HAL_SPI_Init+0x374>)
 800899e:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a3e      	ldr	r2, [pc, #248]	; (8008a9c <HAL_SPI_Init+0x378>)
 80089a4:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a3d      	ldr	r2, [pc, #244]	; (8008aa0 <HAL_SPI_Init+0x37c>)
 80089aa:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	4a3d      	ldr	r2, [pc, #244]	; (8008aa4 <HAL_SPI_Init+0x380>)
 80089b0:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a3c      	ldr	r2, [pc, #240]	; (8008aa8 <HAL_SPI_Init+0x384>)
 80089b6:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d102      	bne.n	80089c6 <HAL_SPI_Init+0x2a2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a3a      	ldr	r2, [pc, #232]	; (8008aac <HAL_SPI_Init+0x388>)
 80089c4:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2202      	movs	r2, #2
 80089d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80089f6:	431a      	orrs	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a00:	431a      	orrs	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	f003 0302 	and.w	r3, r3, #2
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	f003 0301 	and.w	r3, r3, #1
 8008a14:	431a      	orrs	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a1e:	431a      	orrs	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	69db      	ldr	r3, [r3, #28]
 8008a24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a32:	ea42 0103 	orr.w	r1, r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	430a      	orrs	r2, r1
 8008a44:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	0c1b      	lsrs	r3, r3, #16
 8008a4c:	f003 0104 	and.w	r1, r3, #4
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a54:	f003 0210 	and.w	r2, r3, #16
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	430a      	orrs	r2, r1
 8008a5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	69da      	ldr	r2, [r3, #28]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	0800bee0 	.word	0x0800bee0
 8008a8c:	0800900d 	.word	0x0800900d
 8008a90:	08009021 	.word	0x08009021
 8008a94:	08009035 	.word	0x08009035
 8008a98:	08009049 	.word	0x08009049
 8008a9c:	0800905d 	.word	0x0800905d
 8008aa0:	08009071 	.word	0x08009071
 8008aa4:	08009085 	.word	0x08009085
 8008aa8:	08009099 	.word	0x08009099
 8008aac:	080028e5 	.word	0x080028e5

08008ab0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08c      	sub	sp, #48	; 0x30
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d004      	beq.n	8008ada <HAL_SPI_TransmitReceive+0x2a>
 8008ad0:	f240 417c 	movw	r1, #1148	; 0x47c
 8008ad4:	4884      	ldr	r0, [pc, #528]	; (8008ce8 <HAL_SPI_TransmitReceive+0x238>)
 8008ad6:	f7f9 fec4 	bl	8002862 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d101      	bne.n	8008ae8 <HAL_SPI_TransmitReceive+0x38>
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	e18d      	b.n	8008e04 <HAL_SPI_TransmitReceive+0x354>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008af0:	f7fa f9da 	bl	8002ea8 <HAL_GetTick>
 8008af4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008afc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008b06:	887b      	ldrh	r3, [r7, #2]
 8008b08:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008b0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d00f      	beq.n	8008b32 <HAL_SPI_TransmitReceive+0x82>
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b18:	d107      	bne.n	8008b2a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d103      	bne.n	8008b2a <HAL_SPI_TransmitReceive+0x7a>
 8008b22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b26:	2b04      	cmp	r3, #4
 8008b28:	d003      	beq.n	8008b32 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008b30:	e15e      	b.n	8008df0 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d005      	beq.n	8008b44 <HAL_SPI_TransmitReceive+0x94>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d002      	beq.n	8008b44 <HAL_SPI_TransmitReceive+0x94>
 8008b3e:	887b      	ldrh	r3, [r7, #2]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d103      	bne.n	8008b4c <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008b4a:	e151      	b.n	8008df0 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b04      	cmp	r3, #4
 8008b56:	d003      	beq.n	8008b60 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2205      	movs	r2, #5
 8008b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	887a      	ldrh	r2, [r7, #2]
 8008b70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	887a      	ldrh	r2, [r7, #2]
 8008b76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	887a      	ldrh	r2, [r7, #2]
 8008b82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	887a      	ldrh	r2, [r7, #2]
 8008b88:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba0:	2b40      	cmp	r3, #64	; 0x40
 8008ba2:	d007      	beq.n	8008bb4 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bbc:	d178      	bne.n	8008cb0 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d002      	beq.n	8008bcc <HAL_SPI_TransmitReceive+0x11c>
 8008bc6:	8b7b      	ldrh	r3, [r7, #26]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d166      	bne.n	8008c9a <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd0:	881a      	ldrh	r2, [r3, #0]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bdc:	1c9a      	adds	r2, r3, #2
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	3b01      	subs	r3, #1
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bf0:	e053      	b.n	8008c9a <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f003 0302 	and.w	r3, r3, #2
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d11b      	bne.n	8008c38 <HAL_SPI_TransmitReceive+0x188>
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d016      	beq.n	8008c38 <HAL_SPI_TransmitReceive+0x188>
 8008c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d113      	bne.n	8008c38 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c14:	881a      	ldrh	r2, [r3, #0]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c20:	1c9a      	adds	r2, r3, #2
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008c34:	2300      	movs	r3, #0
 8008c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f003 0301 	and.w	r3, r3, #1
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d119      	bne.n	8008c7a <HAL_SPI_TransmitReceive+0x1ca>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d014      	beq.n	8008c7a <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68da      	ldr	r2, [r3, #12]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5a:	b292      	uxth	r2, r2
 8008c5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c62:	1c9a      	adds	r2, r3, #2
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008c76:	2301      	movs	r3, #1
 8008c78:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008c7a:	f7fa f915 	bl	8002ea8 <HAL_GetTick>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d807      	bhi.n	8008c9a <HAL_SPI_TransmitReceive+0x1ea>
 8008c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c90:	d003      	beq.n	8008c9a <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008c98:	e0aa      	b.n	8008df0 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1a6      	bne.n	8008bf2 <HAL_SPI_TransmitReceive+0x142>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1a1      	bne.n	8008bf2 <HAL_SPI_TransmitReceive+0x142>
 8008cae:	e07f      	b.n	8008db0 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d002      	beq.n	8008cbe <HAL_SPI_TransmitReceive+0x20e>
 8008cb8:	8b7b      	ldrh	r3, [r7, #26]
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d16e      	bne.n	8008d9c <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	330c      	adds	r3, #12
 8008cc8:	7812      	ldrb	r2, [r2, #0]
 8008cca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd0:	1c5a      	adds	r2, r3, #1
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ce4:	e05a      	b.n	8008d9c <HAL_SPI_TransmitReceive+0x2ec>
 8008ce6:	bf00      	nop
 8008ce8:	0800bee0 	.word	0x0800bee0
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f003 0302 	and.w	r3, r3, #2
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d11c      	bne.n	8008d34 <HAL_SPI_TransmitReceive+0x284>
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d017      	beq.n	8008d34 <HAL_SPI_TransmitReceive+0x284>
 8008d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d114      	bne.n	8008d34 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	330c      	adds	r3, #12
 8008d14:	7812      	ldrb	r2, [r2, #0]
 8008d16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d30:	2300      	movs	r3, #0
 8008d32:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d119      	bne.n	8008d76 <HAL_SPI_TransmitReceive+0x2c6>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d014      	beq.n	8008d76 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68da      	ldr	r2, [r3, #12]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d56:	b2d2      	uxtb	r2, r2
 8008d58:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5e:	1c5a      	adds	r2, r3, #1
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008d72:	2301      	movs	r3, #1
 8008d74:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008d76:	f7fa f897 	bl	8002ea8 <HAL_GetTick>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d803      	bhi.n	8008d8e <HAL_SPI_TransmitReceive+0x2de>
 8008d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8c:	d102      	bne.n	8008d94 <HAL_SPI_TransmitReceive+0x2e4>
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d103      	bne.n	8008d9c <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8008d94:	2303      	movs	r3, #3
 8008d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008d9a:	e029      	b.n	8008df0 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1a2      	bne.n	8008cec <HAL_SPI_TransmitReceive+0x23c>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d19d      	bne.n	8008cec <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008db2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f000 fa17 	bl	80091e8 <SPI_EndRxTxTransaction>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d006      	beq.n	8008dce <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2220      	movs	r2, #32
 8008dca:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008dcc:	e010      	b.n	8008df0 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10b      	bne.n	8008dee <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	617b      	str	r3, [r7, #20]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	617b      	str	r3, [r7, #20]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	617b      	str	r3, [r7, #20]
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	e000      	b.n	8008df0 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8008dee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008e00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3730      	adds	r7, #48	; 0x30
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b088      	sub	sp, #32
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	099b      	lsrs	r3, r3, #6
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10f      	bne.n	8008e50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00a      	beq.n	8008e50 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	099b      	lsrs	r3, r3, #6
 8008e3e:	f003 0301 	and.w	r3, r3, #1
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d004      	beq.n	8008e50 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	4798      	blx	r3
    return;
 8008e4e:	e0d8      	b.n	8009002 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	085b      	lsrs	r3, r3, #1
 8008e54:	f003 0301 	and.w	r3, r3, #1
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00a      	beq.n	8008e72 <HAL_SPI_IRQHandler+0x66>
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	09db      	lsrs	r3, r3, #7
 8008e60:	f003 0301 	and.w	r3, r3, #1
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d004      	beq.n	8008e72 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	4798      	blx	r3
    return;
 8008e70:	e0c7      	b.n	8009002 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	095b      	lsrs	r3, r3, #5
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10c      	bne.n	8008e98 <HAL_SPI_IRQHandler+0x8c>
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	099b      	lsrs	r3, r3, #6
 8008e82:	f003 0301 	and.w	r3, r3, #1
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d106      	bne.n	8008e98 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	0a1b      	lsrs	r3, r3, #8
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f000 80b5 	beq.w	8009002 <HAL_SPI_IRQHandler+0x1f6>
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	095b      	lsrs	r3, r3, #5
 8008e9c:	f003 0301 	and.w	r3, r3, #1
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 80ae 	beq.w	8009002 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	099b      	lsrs	r3, r3, #6
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d023      	beq.n	8008efa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d011      	beq.n	8008ee2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ec2:	f043 0204 	orr.w	r2, r3, #4
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008eca:	2300      	movs	r3, #0
 8008ecc:	617b      	str	r3, [r7, #20]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	617b      	str	r3, [r7, #20]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	617b      	str	r3, [r7, #20]
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	e00b      	b.n	8008efa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	613b      	str	r3, [r7, #16]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	613b      	str	r3, [r7, #16]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	613b      	str	r3, [r7, #16]
 8008ef6:	693b      	ldr	r3, [r7, #16]
        return;
 8008ef8:	e083      	b.n	8009002 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	095b      	lsrs	r3, r3, #5
 8008efe:	f003 0301 	and.w	r3, r3, #1
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d014      	beq.n	8008f30 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f0a:	f043 0201 	orr.w	r2, r3, #1
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f12:	2300      	movs	r3, #0
 8008f14:	60fb      	str	r3, [r7, #12]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f2c:	601a      	str	r2, [r3, #0]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	0a1b      	lsrs	r3, r3, #8
 8008f34:	f003 0301 	and.w	r3, r3, #1
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00c      	beq.n	8008f56 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f40:	f043 0208 	orr.w	r2, r3, #8
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008f48:	2300      	movs	r3, #0
 8008f4a:	60bb      	str	r3, [r7, #8]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	60bb      	str	r3, [r7, #8]
 8008f54:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d050      	beq.n	8009000 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	685a      	ldr	r2, [r3, #4]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008f6c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2201      	movs	r2, #1
 8008f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	f003 0302 	and.w	r3, r3, #2
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d104      	bne.n	8008f8a <HAL_SPI_IRQHandler+0x17e>
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d034      	beq.n	8008ff4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f022 0203 	bic.w	r2, r2, #3
 8008f98:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d011      	beq.n	8008fc6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fa6:	4a18      	ldr	r2, [pc, #96]	; (8009008 <HAL_SPI_IRQHandler+0x1fc>)
 8008fa8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fb ff3e 	bl	8004e30 <HAL_DMA_Abort_IT>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d005      	beq.n	8008fc6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d017      	beq.n	8008ffe <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fd2:	4a0d      	ldr	r2, [pc, #52]	; (8009008 <HAL_SPI_IRQHandler+0x1fc>)
 8008fd4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7fb ff28 	bl	8004e30 <HAL_DMA_Abort_IT>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00b      	beq.n	8008ffe <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008ff2:	e004      	b.n	8008ffe <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008ffc:	e000      	b.n	8009000 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8008ffe:	bf00      	nop
    return;
 8009000:	bf00      	nop
  }
}
 8009002:	3720      	adds	r7, #32
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	080090ad 	.word	0x080090ad

0800900c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800908c:	bf00      	nop
 800908e:	370c      	adds	r7, #12
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80090ce:	bf00      	nop
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
	...

080090d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b088      	sub	sp, #32
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	603b      	str	r3, [r7, #0]
 80090e4:	4613      	mov	r3, r2
 80090e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80090e8:	f7f9 fede 	bl	8002ea8 <HAL_GetTick>
 80090ec:	4602      	mov	r2, r0
 80090ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f0:	1a9b      	subs	r3, r3, r2
 80090f2:	683a      	ldr	r2, [r7, #0]
 80090f4:	4413      	add	r3, r2
 80090f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80090f8:	f7f9 fed6 	bl	8002ea8 <HAL_GetTick>
 80090fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80090fe:	4b39      	ldr	r3, [pc, #228]	; (80091e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	015b      	lsls	r3, r3, #5
 8009104:	0d1b      	lsrs	r3, r3, #20
 8009106:	69fa      	ldr	r2, [r7, #28]
 8009108:	fb02 f303 	mul.w	r3, r2, r3
 800910c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800910e:	e054      	b.n	80091ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009116:	d050      	beq.n	80091ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009118:	f7f9 fec6 	bl	8002ea8 <HAL_GetTick>
 800911c:	4602      	mov	r2, r0
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	69fa      	ldr	r2, [r7, #28]
 8009124:	429a      	cmp	r2, r3
 8009126:	d902      	bls.n	800912e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d13d      	bne.n	80091aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	685a      	ldr	r2, [r3, #4]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800913c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009146:	d111      	bne.n	800916c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009150:	d004      	beq.n	800915c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800915a:	d107      	bne.n	800916c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800916a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009174:	d10f      	bne.n	8009196 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009194:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2201      	movs	r2, #1
 800919a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e017      	b.n	80091da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	689a      	ldr	r2, [r3, #8]
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	4013      	ands	r3, r2
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	bf0c      	ite	eq
 80091ca:	2301      	moveq	r3, #1
 80091cc:	2300      	movne	r3, #0
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	461a      	mov	r2, r3
 80091d2:	79fb      	ldrb	r3, [r7, #7]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d19b      	bne.n	8009110 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3720      	adds	r7, #32
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	20000040 	.word	0x20000040

080091e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b088      	sub	sp, #32
 80091ec:	af02      	add	r7, sp, #8
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80091f4:	4b1b      	ldr	r3, [pc, #108]	; (8009264 <SPI_EndRxTxTransaction+0x7c>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a1b      	ldr	r2, [pc, #108]	; (8009268 <SPI_EndRxTxTransaction+0x80>)
 80091fa:	fba2 2303 	umull	r2, r3, r2, r3
 80091fe:	0d5b      	lsrs	r3, r3, #21
 8009200:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009204:	fb02 f303 	mul.w	r3, r2, r3
 8009208:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009212:	d112      	bne.n	800923a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	2200      	movs	r2, #0
 800921c:	2180      	movs	r1, #128	; 0x80
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f7ff ff5a 	bl	80090d8 <SPI_WaitFlagStateUntilTimeout>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d016      	beq.n	8009258 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800922e:	f043 0220 	orr.w	r2, r3, #32
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009236:	2303      	movs	r3, #3
 8009238:	e00f      	b.n	800925a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00a      	beq.n	8009256 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	3b01      	subs	r3, #1
 8009244:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009250:	2b80      	cmp	r3, #128	; 0x80
 8009252:	d0f2      	beq.n	800923a <SPI_EndRxTxTransaction+0x52>
 8009254:	e000      	b.n	8009258 <SPI_EndRxTxTransaction+0x70>
        break;
 8009256:	bf00      	nop
  }

  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3718      	adds	r7, #24
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	20000040 	.word	0x20000040
 8009268:	165e9f81 	.word	0x165e9f81

0800926c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e0c5      	b.n	800940a <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4a64      	ldr	r2, [pc, #400]	; (8009414 <HAL_TIM_Base_Init+0x1a8>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d045      	beq.n	8009314 <HAL_TIM_Base_Init+0xa8>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009290:	d040      	beq.n	8009314 <HAL_TIM_Base_Init+0xa8>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a60      	ldr	r2, [pc, #384]	; (8009418 <HAL_TIM_Base_Init+0x1ac>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d03b      	beq.n	8009314 <HAL_TIM_Base_Init+0xa8>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a5e      	ldr	r2, [pc, #376]	; (800941c <HAL_TIM_Base_Init+0x1b0>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d036      	beq.n	8009314 <HAL_TIM_Base_Init+0xa8>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a5d      	ldr	r2, [pc, #372]	; (8009420 <HAL_TIM_Base_Init+0x1b4>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d031      	beq.n	8009314 <HAL_TIM_Base_Init+0xa8>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a5b      	ldr	r2, [pc, #364]	; (8009424 <HAL_TIM_Base_Init+0x1b8>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d02c      	beq.n	8009314 <HAL_TIM_Base_Init+0xa8>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a5a      	ldr	r2, [pc, #360]	; (8009428 <HAL_TIM_Base_Init+0x1bc>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d027      	beq.n	8009314 <HAL_TIM_Base_Init+0xa8>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a58      	ldr	r2, [pc, #352]	; (800942c <HAL_TIM_Base_Init+0x1c0>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d022      	beq.n	8009314 <HAL_TIM_Base_Init+0xa8>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a57      	ldr	r2, [pc, #348]	; (8009430 <HAL_TIM_Base_Init+0x1c4>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d01d      	beq.n	8009314 <HAL_TIM_Base_Init+0xa8>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a55      	ldr	r2, [pc, #340]	; (8009434 <HAL_TIM_Base_Init+0x1c8>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d018      	beq.n	8009314 <HAL_TIM_Base_Init+0xa8>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a54      	ldr	r2, [pc, #336]	; (8009438 <HAL_TIM_Base_Init+0x1cc>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d013      	beq.n	8009314 <HAL_TIM_Base_Init+0xa8>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a52      	ldr	r2, [pc, #328]	; (800943c <HAL_TIM_Base_Init+0x1d0>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d00e      	beq.n	8009314 <HAL_TIM_Base_Init+0xa8>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a51      	ldr	r2, [pc, #324]	; (8009440 <HAL_TIM_Base_Init+0x1d4>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d009      	beq.n	8009314 <HAL_TIM_Base_Init+0xa8>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a4f      	ldr	r2, [pc, #316]	; (8009444 <HAL_TIM_Base_Init+0x1d8>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d004      	beq.n	8009314 <HAL_TIM_Base_Init+0xa8>
 800930a:	f240 1113 	movw	r1, #275	; 0x113
 800930e:	484e      	ldr	r0, [pc, #312]	; (8009448 <HAL_TIM_Base_Init+0x1dc>)
 8009310:	f7f9 faa7 	bl	8002862 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d014      	beq.n	8009346 <HAL_TIM_Base_Init+0xda>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	2b10      	cmp	r3, #16
 8009322:	d010      	beq.n	8009346 <HAL_TIM_Base_Init+0xda>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	2b20      	cmp	r3, #32
 800932a:	d00c      	beq.n	8009346 <HAL_TIM_Base_Init+0xda>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	2b40      	cmp	r3, #64	; 0x40
 8009332:	d008      	beq.n	8009346 <HAL_TIM_Base_Init+0xda>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	2b60      	cmp	r3, #96	; 0x60
 800933a:	d004      	beq.n	8009346 <HAL_TIM_Base_Init+0xda>
 800933c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8009340:	4841      	ldr	r0, [pc, #260]	; (8009448 <HAL_TIM_Base_Init+0x1dc>)
 8009342:	f7f9 fa8e 	bl	8002862 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00e      	beq.n	800936c <HAL_TIM_Base_Init+0x100>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009356:	d009      	beq.n	800936c <HAL_TIM_Base_Init+0x100>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009360:	d004      	beq.n	800936c <HAL_TIM_Base_Init+0x100>
 8009362:	f240 1115 	movw	r1, #277	; 0x115
 8009366:	4838      	ldr	r0, [pc, #224]	; (8009448 <HAL_TIM_Base_Init+0x1dc>)
 8009368:	f7f9 fa7b 	bl	8002862 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	699b      	ldr	r3, [r3, #24]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d008      	beq.n	8009386 <HAL_TIM_Base_Init+0x11a>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	2b80      	cmp	r3, #128	; 0x80
 800937a:	d004      	beq.n	8009386 <HAL_TIM_Base_Init+0x11a>
 800937c:	f44f 718b 	mov.w	r1, #278	; 0x116
 8009380:	4831      	ldr	r0, [pc, #196]	; (8009448 <HAL_TIM_Base_Init+0x1dc>)
 8009382:	f7f9 fa6e 	bl	8002862 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800938c:	b2db      	uxtb	r3, r3
 800938e:	2b00      	cmp	r3, #0
 8009390:	d106      	bne.n	80093a0 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f856 	bl	800944c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2202      	movs	r2, #2
 80093a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	3304      	adds	r3, #4
 80093b0:	4619      	mov	r1, r3
 80093b2:	4610      	mov	r0, r2
 80093b4:	f000 fa4a 	bl	800984c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	40010000 	.word	0x40010000
 8009418:	40000400 	.word	0x40000400
 800941c:	40000800 	.word	0x40000800
 8009420:	40000c00 	.word	0x40000c00
 8009424:	40001000 	.word	0x40001000
 8009428:	40001400 	.word	0x40001400
 800942c:	40010400 	.word	0x40010400
 8009430:	40014000 	.word	0x40014000
 8009434:	40014400 	.word	0x40014400
 8009438:	40014800 	.word	0x40014800
 800943c:	40001800 	.word	0x40001800
 8009440:	40001c00 	.word	0x40001c00
 8009444:	40002000 	.word	0x40002000
 8009448:	0800bf18 	.word	0x0800bf18

0800944c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a51      	ldr	r2, [pc, #324]	; (80095b4 <HAL_TIM_Base_Start_IT+0x154>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d045      	beq.n	80094fe <HAL_TIM_Base_Start_IT+0x9e>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800947a:	d040      	beq.n	80094fe <HAL_TIM_Base_Start_IT+0x9e>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a4d      	ldr	r2, [pc, #308]	; (80095b8 <HAL_TIM_Base_Start_IT+0x158>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d03b      	beq.n	80094fe <HAL_TIM_Base_Start_IT+0x9e>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a4c      	ldr	r2, [pc, #304]	; (80095bc <HAL_TIM_Base_Start_IT+0x15c>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d036      	beq.n	80094fe <HAL_TIM_Base_Start_IT+0x9e>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a4a      	ldr	r2, [pc, #296]	; (80095c0 <HAL_TIM_Base_Start_IT+0x160>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d031      	beq.n	80094fe <HAL_TIM_Base_Start_IT+0x9e>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a49      	ldr	r2, [pc, #292]	; (80095c4 <HAL_TIM_Base_Start_IT+0x164>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d02c      	beq.n	80094fe <HAL_TIM_Base_Start_IT+0x9e>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a47      	ldr	r2, [pc, #284]	; (80095c8 <HAL_TIM_Base_Start_IT+0x168>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d027      	beq.n	80094fe <HAL_TIM_Base_Start_IT+0x9e>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a46      	ldr	r2, [pc, #280]	; (80095cc <HAL_TIM_Base_Start_IT+0x16c>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d022      	beq.n	80094fe <HAL_TIM_Base_Start_IT+0x9e>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a44      	ldr	r2, [pc, #272]	; (80095d0 <HAL_TIM_Base_Start_IT+0x170>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d01d      	beq.n	80094fe <HAL_TIM_Base_Start_IT+0x9e>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a43      	ldr	r2, [pc, #268]	; (80095d4 <HAL_TIM_Base_Start_IT+0x174>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d018      	beq.n	80094fe <HAL_TIM_Base_Start_IT+0x9e>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a41      	ldr	r2, [pc, #260]	; (80095d8 <HAL_TIM_Base_Start_IT+0x178>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d013      	beq.n	80094fe <HAL_TIM_Base_Start_IT+0x9e>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a40      	ldr	r2, [pc, #256]	; (80095dc <HAL_TIM_Base_Start_IT+0x17c>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d00e      	beq.n	80094fe <HAL_TIM_Base_Start_IT+0x9e>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a3e      	ldr	r2, [pc, #248]	; (80095e0 <HAL_TIM_Base_Start_IT+0x180>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d009      	beq.n	80094fe <HAL_TIM_Base_Start_IT+0x9e>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a3d      	ldr	r2, [pc, #244]	; (80095e4 <HAL_TIM_Base_Start_IT+0x184>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d004      	beq.n	80094fe <HAL_TIM_Base_Start_IT+0x9e>
 80094f4:	f240 11cf 	movw	r1, #463	; 0x1cf
 80094f8:	483b      	ldr	r0, [pc, #236]	; (80095e8 <HAL_TIM_Base_Start_IT+0x188>)
 80094fa:	f7f9 f9b2 	bl	8002862 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b01      	cmp	r3, #1
 8009508:	d001      	beq.n	800950e <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e04e      	b.n	80095ac <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2202      	movs	r2, #2
 8009512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68da      	ldr	r2, [r3, #12]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f042 0201 	orr.w	r2, r2, #1
 8009524:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a22      	ldr	r2, [pc, #136]	; (80095b4 <HAL_TIM_Base_Start_IT+0x154>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d022      	beq.n	8009576 <HAL_TIM_Base_Start_IT+0x116>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009538:	d01d      	beq.n	8009576 <HAL_TIM_Base_Start_IT+0x116>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a1e      	ldr	r2, [pc, #120]	; (80095b8 <HAL_TIM_Base_Start_IT+0x158>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d018      	beq.n	8009576 <HAL_TIM_Base_Start_IT+0x116>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a1c      	ldr	r2, [pc, #112]	; (80095bc <HAL_TIM_Base_Start_IT+0x15c>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d013      	beq.n	8009576 <HAL_TIM_Base_Start_IT+0x116>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a1b      	ldr	r2, [pc, #108]	; (80095c0 <HAL_TIM_Base_Start_IT+0x160>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d00e      	beq.n	8009576 <HAL_TIM_Base_Start_IT+0x116>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a1b      	ldr	r2, [pc, #108]	; (80095cc <HAL_TIM_Base_Start_IT+0x16c>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d009      	beq.n	8009576 <HAL_TIM_Base_Start_IT+0x116>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a1a      	ldr	r2, [pc, #104]	; (80095d0 <HAL_TIM_Base_Start_IT+0x170>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d004      	beq.n	8009576 <HAL_TIM_Base_Start_IT+0x116>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a1a      	ldr	r2, [pc, #104]	; (80095dc <HAL_TIM_Base_Start_IT+0x17c>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d111      	bne.n	800959a <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	f003 0307 	and.w	r3, r3, #7
 8009580:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2b06      	cmp	r3, #6
 8009586:	d010      	beq.n	80095aa <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f042 0201 	orr.w	r2, r2, #1
 8009596:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009598:	e007      	b.n	80095aa <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f042 0201 	orr.w	r2, r2, #1
 80095a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	40010000 	.word	0x40010000
 80095b8:	40000400 	.word	0x40000400
 80095bc:	40000800 	.word	0x40000800
 80095c0:	40000c00 	.word	0x40000c00
 80095c4:	40001000 	.word	0x40001000
 80095c8:	40001400 	.word	0x40001400
 80095cc:	40010400 	.word	0x40010400
 80095d0:	40014000 	.word	0x40014000
 80095d4:	40014400 	.word	0x40014400
 80095d8:	40014800 	.word	0x40014800
 80095dc:	40001800 	.word	0x40001800
 80095e0:	40001c00 	.word	0x40001c00
 80095e4:	40002000 	.word	0x40002000
 80095e8:	0800bf18 	.word	0x0800bf18

080095ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	f003 0302 	and.w	r3, r3, #2
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d122      	bne.n	8009648 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	f003 0302 	and.w	r3, r3, #2
 800960c:	2b02      	cmp	r3, #2
 800960e:	d11b      	bne.n	8009648 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f06f 0202 	mvn.w	r2, #2
 8009618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	699b      	ldr	r3, [r3, #24]
 8009626:	f003 0303 	and.w	r3, r3, #3
 800962a:	2b00      	cmp	r3, #0
 800962c:	d003      	beq.n	8009636 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 f8ee 	bl	8009810 <HAL_TIM_IC_CaptureCallback>
 8009634:	e005      	b.n	8009642 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f8e0 	bl	80097fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 f8f1 	bl	8009824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	f003 0304 	and.w	r3, r3, #4
 8009652:	2b04      	cmp	r3, #4
 8009654:	d122      	bne.n	800969c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	f003 0304 	and.w	r3, r3, #4
 8009660:	2b04      	cmp	r3, #4
 8009662:	d11b      	bne.n	800969c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f06f 0204 	mvn.w	r2, #4
 800966c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2202      	movs	r2, #2
 8009672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800967e:	2b00      	cmp	r3, #0
 8009680:	d003      	beq.n	800968a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f8c4 	bl	8009810 <HAL_TIM_IC_CaptureCallback>
 8009688:	e005      	b.n	8009696 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f8b6 	bl	80097fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 f8c7 	bl	8009824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	f003 0308 	and.w	r3, r3, #8
 80096a6:	2b08      	cmp	r3, #8
 80096a8:	d122      	bne.n	80096f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	f003 0308 	and.w	r3, r3, #8
 80096b4:	2b08      	cmp	r3, #8
 80096b6:	d11b      	bne.n	80096f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f06f 0208 	mvn.w	r2, #8
 80096c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2204      	movs	r2, #4
 80096c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	69db      	ldr	r3, [r3, #28]
 80096ce:	f003 0303 	and.w	r3, r3, #3
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d003      	beq.n	80096de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f89a 	bl	8009810 <HAL_TIM_IC_CaptureCallback>
 80096dc:	e005      	b.n	80096ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f88c 	bl	80097fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f89d 	bl	8009824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	f003 0310 	and.w	r3, r3, #16
 80096fa:	2b10      	cmp	r3, #16
 80096fc:	d122      	bne.n	8009744 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	f003 0310 	and.w	r3, r3, #16
 8009708:	2b10      	cmp	r3, #16
 800970a:	d11b      	bne.n	8009744 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f06f 0210 	mvn.w	r2, #16
 8009714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2208      	movs	r2, #8
 800971a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	69db      	ldr	r3, [r3, #28]
 8009722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009726:	2b00      	cmp	r3, #0
 8009728:	d003      	beq.n	8009732 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f870 	bl	8009810 <HAL_TIM_IC_CaptureCallback>
 8009730:	e005      	b.n	800973e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f862 	bl	80097fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f873 	bl	8009824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	f003 0301 	and.w	r3, r3, #1
 800974e:	2b01      	cmp	r3, #1
 8009750:	d10e      	bne.n	8009770 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	f003 0301 	and.w	r3, r3, #1
 800975c:	2b01      	cmp	r3, #1
 800975e:	d107      	bne.n	8009770 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f06f 0201 	mvn.w	r2, #1
 8009768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7f9 f862 	bl	8002834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800977a:	2b80      	cmp	r3, #128	; 0x80
 800977c:	d10e      	bne.n	800979c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68db      	ldr	r3, [r3, #12]
 8009784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009788:	2b80      	cmp	r3, #128	; 0x80
 800978a:	d107      	bne.n	800979c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f902 	bl	80099a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a6:	2b40      	cmp	r3, #64	; 0x40
 80097a8:	d10e      	bne.n	80097c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b4:	2b40      	cmp	r3, #64	; 0x40
 80097b6:	d107      	bne.n	80097c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80097c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 f838 	bl	8009838 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	691b      	ldr	r3, [r3, #16]
 80097ce:	f003 0320 	and.w	r3, r3, #32
 80097d2:	2b20      	cmp	r3, #32
 80097d4:	d10e      	bne.n	80097f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	f003 0320 	and.w	r3, r3, #32
 80097e0:	2b20      	cmp	r3, #32
 80097e2:	d107      	bne.n	80097f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f06f 0220 	mvn.w	r2, #32
 80097ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f8cc 	bl	800998c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80097f4:	bf00      	nop
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009804:	bf00      	nop
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a40      	ldr	r2, [pc, #256]	; (8009960 <TIM_Base_SetConfig+0x114>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d013      	beq.n	800988c <TIM_Base_SetConfig+0x40>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800986a:	d00f      	beq.n	800988c <TIM_Base_SetConfig+0x40>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a3d      	ldr	r2, [pc, #244]	; (8009964 <TIM_Base_SetConfig+0x118>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d00b      	beq.n	800988c <TIM_Base_SetConfig+0x40>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a3c      	ldr	r2, [pc, #240]	; (8009968 <TIM_Base_SetConfig+0x11c>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d007      	beq.n	800988c <TIM_Base_SetConfig+0x40>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a3b      	ldr	r2, [pc, #236]	; (800996c <TIM_Base_SetConfig+0x120>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d003      	beq.n	800988c <TIM_Base_SetConfig+0x40>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a3a      	ldr	r2, [pc, #232]	; (8009970 <TIM_Base_SetConfig+0x124>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d108      	bne.n	800989e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	4313      	orrs	r3, r2
 800989c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a2f      	ldr	r2, [pc, #188]	; (8009960 <TIM_Base_SetConfig+0x114>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d02b      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ac:	d027      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a2c      	ldr	r2, [pc, #176]	; (8009964 <TIM_Base_SetConfig+0x118>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d023      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a2b      	ldr	r2, [pc, #172]	; (8009968 <TIM_Base_SetConfig+0x11c>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d01f      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a2a      	ldr	r2, [pc, #168]	; (800996c <TIM_Base_SetConfig+0x120>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d01b      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a29      	ldr	r2, [pc, #164]	; (8009970 <TIM_Base_SetConfig+0x124>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d017      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a28      	ldr	r2, [pc, #160]	; (8009974 <TIM_Base_SetConfig+0x128>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d013      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a27      	ldr	r2, [pc, #156]	; (8009978 <TIM_Base_SetConfig+0x12c>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d00f      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a26      	ldr	r2, [pc, #152]	; (800997c <TIM_Base_SetConfig+0x130>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d00b      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a25      	ldr	r2, [pc, #148]	; (8009980 <TIM_Base_SetConfig+0x134>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d007      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a24      	ldr	r2, [pc, #144]	; (8009984 <TIM_Base_SetConfig+0x138>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d003      	beq.n	80098fe <TIM_Base_SetConfig+0xb2>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	4a23      	ldr	r2, [pc, #140]	; (8009988 <TIM_Base_SetConfig+0x13c>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d108      	bne.n	8009910 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	4313      	orrs	r3, r2
 800990e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	4313      	orrs	r3, r2
 800991c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	689a      	ldr	r2, [r3, #8]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a0a      	ldr	r2, [pc, #40]	; (8009960 <TIM_Base_SetConfig+0x114>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d003      	beq.n	8009944 <TIM_Base_SetConfig+0xf8>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a0c      	ldr	r2, [pc, #48]	; (8009970 <TIM_Base_SetConfig+0x124>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d103      	bne.n	800994c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	691a      	ldr	r2, [r3, #16]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	615a      	str	r2, [r3, #20]
}
 8009952:	bf00      	nop
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	40010000 	.word	0x40010000
 8009964:	40000400 	.word	0x40000400
 8009968:	40000800 	.word	0x40000800
 800996c:	40000c00 	.word	0x40000c00
 8009970:	40010400 	.word	0x40010400
 8009974:	40014000 	.word	0x40014000
 8009978:	40014400 	.word	0x40014400
 800997c:	40014800 	.word	0x40014800
 8009980:	40001800 	.word	0x40001800
 8009984:	40001c00 	.word	0x40001c00
 8009988:	40002000 	.word	0x40002000

0800998c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099ca:	d10e      	bne.n	80099ea <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	f003 0301 	and.w	r3, r3, #1
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d107      	bne.n	80099ea <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f06f 0201 	mvn.w	r2, #1
 80099e2:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f804 	bl	80099f2 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 80099ea:	bf00      	nop
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 80099f2:	b480      	push	{r7}
 80099f4:	b083      	sub	sp, #12
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 80099fa:	bf00      	nop
 80099fc:	370c      	adds	r7, #12
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr

08009a06 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009a06:	b480      	push	{r7}
 8009a08:	b085      	sub	sp, #20
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009a10:	2300      	movs	r3, #0
 8009a12:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009a14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a18:	2b84      	cmp	r3, #132	; 0x84
 8009a1a:	d005      	beq.n	8009a28 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009a1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4413      	add	r3, r2
 8009a24:	3303      	adds	r3, #3
 8009a26:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009a28:	68fb      	ldr	r3, [r7, #12]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3714      	adds	r7, #20
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr

08009a36 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009a3a:	f000 fef9 	bl	800a830 <vTaskStartScheduler>
  
  return osOK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a46:	b089      	sub	sp, #36	; 0x24
 8009a48:	af04      	add	r7, sp, #16
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	695b      	ldr	r3, [r3, #20]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d020      	beq.n	8009a98 <osThreadCreate+0x54>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d01c      	beq.n	8009a98 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	685c      	ldr	r4, [r3, #4]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681d      	ldr	r5, [r3, #0]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	691e      	ldr	r6, [r3, #16]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7ff ffc8 	bl	8009a06 <makeFreeRtosPriority>
 8009a76:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	695b      	ldr	r3, [r3, #20]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a80:	9202      	str	r2, [sp, #8]
 8009a82:	9301      	str	r3, [sp, #4]
 8009a84:	9100      	str	r1, [sp, #0]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	4632      	mov	r2, r6
 8009a8a:	4629      	mov	r1, r5
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	f000 fca7 	bl	800a3e0 <xTaskCreateStatic>
 8009a92:	4603      	mov	r3, r0
 8009a94:	60fb      	str	r3, [r7, #12]
 8009a96:	e01c      	b.n	8009ad2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	685c      	ldr	r4, [r3, #4]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009aa4:	b29e      	uxth	r6, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7ff ffaa 	bl	8009a06 <makeFreeRtosPriority>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	f107 030c 	add.w	r3, r7, #12
 8009ab8:	9301      	str	r3, [sp, #4]
 8009aba:	9200      	str	r2, [sp, #0]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	4632      	mov	r2, r6
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f000 fce9 	bl	800a49a <xTaskCreate>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d001      	beq.n	8009ad2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	e000      	b.n	8009ad4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009adc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f103 0208 	add.w	r2, r3, #8
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f04f 32ff 	mov.w	r2, #4294967295
 8009af4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f103 0208 	add.w	r2, r3, #8
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f103 0208 	add.w	r2, r3, #8
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b10:	bf00      	nop
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b2a:	bf00      	nop
 8009b2c:	370c      	adds	r7, #12
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr

08009b36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b36:	b480      	push	{r7}
 8009b38:	b085      	sub	sp, #20
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
 8009b3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	689a      	ldr	r2, [r3, #8]
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	683a      	ldr	r2, [r7, #0]
 8009b5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	683a      	ldr	r2, [r7, #0]
 8009b60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	1c5a      	adds	r2, r3, #1
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	601a      	str	r2, [r3, #0]
}
 8009b72:	bf00      	nop
 8009b74:	3714      	adds	r7, #20
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr

08009b7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b7e:	b480      	push	{r7}
 8009b80:	b085      	sub	sp, #20
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b94:	d103      	bne.n	8009b9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	691b      	ldr	r3, [r3, #16]
 8009b9a:	60fb      	str	r3, [r7, #12]
 8009b9c:	e00c      	b.n	8009bb8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	3308      	adds	r3, #8
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	e002      	b.n	8009bac <vListInsert+0x2e>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	60fb      	str	r3, [r7, #12]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d2f6      	bcs.n	8009ba6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	685a      	ldr	r2, [r3, #4]
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	683a      	ldr	r2, [r7, #0]
 8009bc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	683a      	ldr	r2, [r7, #0]
 8009bd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	1c5a      	adds	r2, r3, #1
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	601a      	str	r2, [r3, #0]
}
 8009be4:	bf00      	nop
 8009be6:	3714      	adds	r7, #20
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	691b      	ldr	r3, [r3, #16]
 8009bfc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	6892      	ldr	r2, [r2, #8]
 8009c06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	6852      	ldr	r2, [r2, #4]
 8009c10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d103      	bne.n	8009c24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	689a      	ldr	r2, [r3, #8]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	1e5a      	subs	r2, r3, #1
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3714      	adds	r7, #20
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10a      	bne.n	8009c6e <xQueueGenericReset+0x2a>
	__asm volatile
 8009c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5c:	f383 8811 	msr	BASEPRI, r3
 8009c60:	f3bf 8f6f 	isb	sy
 8009c64:	f3bf 8f4f 	dsb	sy
 8009c68:	60bb      	str	r3, [r7, #8]
}
 8009c6a:	bf00      	nop
 8009c6c:	e7fe      	b.n	8009c6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009c6e:	f001 fc39 	bl	800b4e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c7a:	68f9      	ldr	r1, [r7, #12]
 8009c7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c7e:	fb01 f303 	mul.w	r3, r1, r3
 8009c82:	441a      	add	r2, r3
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	68f9      	ldr	r1, [r7, #12]
 8009ca2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ca4:	fb01 f303 	mul.w	r3, r1, r3
 8009ca8:	441a      	add	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	22ff      	movs	r2, #255	; 0xff
 8009cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	22ff      	movs	r2, #255	; 0xff
 8009cba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d114      	bne.n	8009cee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d01a      	beq.n	8009d02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	3310      	adds	r3, #16
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f001 f80f 	bl	800acf4 <xTaskRemoveFromEventList>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d012      	beq.n	8009d02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009cdc:	4b0c      	ldr	r3, [pc, #48]	; (8009d10 <xQueueGenericReset+0xcc>)
 8009cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	f3bf 8f4f 	dsb	sy
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	e009      	b.n	8009d02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	3310      	adds	r3, #16
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7ff fef2 	bl	8009adc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	3324      	adds	r3, #36	; 0x24
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7ff feed 	bl	8009adc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d02:	f001 fc1f 	bl	800b544 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d06:	2301      	movs	r3, #1
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	e000ed04 	.word	0xe000ed04

08009d14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b08a      	sub	sp, #40	; 0x28
 8009d18:	af02      	add	r7, sp, #8
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	4613      	mov	r3, r2
 8009d20:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d10a      	bne.n	8009d3e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2c:	f383 8811 	msr	BASEPRI, r3
 8009d30:	f3bf 8f6f 	isb	sy
 8009d34:	f3bf 8f4f 	dsb	sy
 8009d38:	613b      	str	r3, [r7, #16]
}
 8009d3a:	bf00      	nop
 8009d3c:	e7fe      	b.n	8009d3c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	fb02 f303 	mul.w	r3, r2, r3
 8009d46:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	3348      	adds	r3, #72	; 0x48
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f001 fcab 	bl	800b6a8 <pvPortMalloc>
 8009d52:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d011      	beq.n	8009d7e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	3348      	adds	r3, #72	; 0x48
 8009d62:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d6c:	79fa      	ldrb	r2, [r7, #7]
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	9300      	str	r3, [sp, #0]
 8009d72:	4613      	mov	r3, r2
 8009d74:	697a      	ldr	r2, [r7, #20]
 8009d76:	68b9      	ldr	r1, [r7, #8]
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 f805 	bl	8009d88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d7e:	69bb      	ldr	r3, [r7, #24]
	}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3720      	adds	r7, #32
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
 8009d94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d103      	bne.n	8009da4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	69ba      	ldr	r2, [r7, #24]
 8009da0:	601a      	str	r2, [r3, #0]
 8009da2:	e002      	b.n	8009daa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	687a      	ldr	r2, [r7, #4]
 8009da8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	68fa      	ldr	r2, [r7, #12]
 8009dae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009db6:	2101      	movs	r1, #1
 8009db8:	69b8      	ldr	r0, [r7, #24]
 8009dba:	f7ff ff43 	bl	8009c44 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009dbe:	bf00      	nop
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
	...

08009dc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b08e      	sub	sp, #56	; 0x38
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
 8009dd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10a      	bne.n	8009dfa <xQueueGenericSend+0x32>
	__asm volatile
 8009de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009df6:	bf00      	nop
 8009df8:	e7fe      	b.n	8009df8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d103      	bne.n	8009e08 <xQueueGenericSend+0x40>
 8009e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d101      	bne.n	8009e0c <xQueueGenericSend+0x44>
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e000      	b.n	8009e0e <xQueueGenericSend+0x46>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10a      	bne.n	8009e28 <xQueueGenericSend+0x60>
	__asm volatile
 8009e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e16:	f383 8811 	msr	BASEPRI, r3
 8009e1a:	f3bf 8f6f 	isb	sy
 8009e1e:	f3bf 8f4f 	dsb	sy
 8009e22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e24:	bf00      	nop
 8009e26:	e7fe      	b.n	8009e26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d103      	bne.n	8009e36 <xQueueGenericSend+0x6e>
 8009e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d101      	bne.n	8009e3a <xQueueGenericSend+0x72>
 8009e36:	2301      	movs	r3, #1
 8009e38:	e000      	b.n	8009e3c <xQueueGenericSend+0x74>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d10a      	bne.n	8009e56 <xQueueGenericSend+0x8e>
	__asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	623b      	str	r3, [r7, #32]
}
 8009e52:	bf00      	nop
 8009e54:	e7fe      	b.n	8009e54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e56:	f001 f90d 	bl	800b074 <xTaskGetSchedulerState>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d102      	bne.n	8009e66 <xQueueGenericSend+0x9e>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d101      	bne.n	8009e6a <xQueueGenericSend+0xa2>
 8009e66:	2301      	movs	r3, #1
 8009e68:	e000      	b.n	8009e6c <xQueueGenericSend+0xa4>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10a      	bne.n	8009e86 <xQueueGenericSend+0xbe>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	61fb      	str	r3, [r7, #28]
}
 8009e82:	bf00      	nop
 8009e84:	e7fe      	b.n	8009e84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e86:	f001 fb2d 	bl	800b4e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d302      	bcc.n	8009e9c <xQueueGenericSend+0xd4>
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d129      	bne.n	8009ef0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	68b9      	ldr	r1, [r7, #8]
 8009ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ea2:	f000 f98d 	bl	800a1c0 <prvCopyDataToQueue>
 8009ea6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d010      	beq.n	8009ed2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb2:	3324      	adds	r3, #36	; 0x24
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f000 ff1d 	bl	800acf4 <xTaskRemoveFromEventList>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d013      	beq.n	8009ee8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ec0:	4b3f      	ldr	r3, [pc, #252]	; (8009fc0 <xQueueGenericSend+0x1f8>)
 8009ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec6:	601a      	str	r2, [r3, #0]
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	e00a      	b.n	8009ee8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d007      	beq.n	8009ee8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ed8:	4b39      	ldr	r3, [pc, #228]	; (8009fc0 <xQueueGenericSend+0x1f8>)
 8009eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ede:	601a      	str	r2, [r3, #0]
 8009ee0:	f3bf 8f4f 	dsb	sy
 8009ee4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ee8:	f001 fb2c 	bl	800b544 <vPortExitCritical>
				return pdPASS;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e063      	b.n	8009fb8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d103      	bne.n	8009efe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ef6:	f001 fb25 	bl	800b544 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009efa:	2300      	movs	r3, #0
 8009efc:	e05c      	b.n	8009fb8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d106      	bne.n	8009f12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f04:	f107 0314 	add.w	r3, r7, #20
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 ff55 	bl	800adb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f12:	f001 fb17 	bl	800b544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f16:	f000 fcf5 	bl	800a904 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f1a:	f001 fae3 	bl	800b4e4 <vPortEnterCritical>
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f24:	b25b      	sxtb	r3, r3
 8009f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2a:	d103      	bne.n	8009f34 <xQueueGenericSend+0x16c>
 8009f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f3a:	b25b      	sxtb	r3, r3
 8009f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f40:	d103      	bne.n	8009f4a <xQueueGenericSend+0x182>
 8009f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f4a:	f001 fafb 	bl	800b544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f4e:	1d3a      	adds	r2, r7, #4
 8009f50:	f107 0314 	add.w	r3, r7, #20
 8009f54:	4611      	mov	r1, r2
 8009f56:	4618      	mov	r0, r3
 8009f58:	f000 ff44 	bl	800ade4 <xTaskCheckForTimeOut>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d124      	bne.n	8009fac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f64:	f000 fa24 	bl	800a3b0 <prvIsQueueFull>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d018      	beq.n	8009fa0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f70:	3310      	adds	r3, #16
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	4611      	mov	r1, r2
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 fe98 	bl	800acac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f7e:	f000 f9af 	bl	800a2e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f82:	f000 fccd 	bl	800a920 <xTaskResumeAll>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f47f af7c 	bne.w	8009e86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009f8e:	4b0c      	ldr	r3, [pc, #48]	; (8009fc0 <xQueueGenericSend+0x1f8>)
 8009f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f94:	601a      	str	r2, [r3, #0]
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	f3bf 8f6f 	isb	sy
 8009f9e:	e772      	b.n	8009e86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009fa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fa2:	f000 f99d 	bl	800a2e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fa6:	f000 fcbb 	bl	800a920 <xTaskResumeAll>
 8009faa:	e76c      	b.n	8009e86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009fac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fae:	f000 f997 	bl	800a2e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fb2:	f000 fcb5 	bl	800a920 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009fb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3738      	adds	r7, #56	; 0x38
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	e000ed04 	.word	0xe000ed04

08009fc4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b08c      	sub	sp, #48	; 0x30
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10a      	bne.n	8009ff4 <xQueueReceive+0x30>
	__asm volatile
 8009fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe2:	f383 8811 	msr	BASEPRI, r3
 8009fe6:	f3bf 8f6f 	isb	sy
 8009fea:	f3bf 8f4f 	dsb	sy
 8009fee:	623b      	str	r3, [r7, #32]
}
 8009ff0:	bf00      	nop
 8009ff2:	e7fe      	b.n	8009ff2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d103      	bne.n	800a002 <xQueueReceive+0x3e>
 8009ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <xQueueReceive+0x42>
 800a002:	2301      	movs	r3, #1
 800a004:	e000      	b.n	800a008 <xQueueReceive+0x44>
 800a006:	2300      	movs	r3, #0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d10a      	bne.n	800a022 <xQueueReceive+0x5e>
	__asm volatile
 800a00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	61fb      	str	r3, [r7, #28]
}
 800a01e:	bf00      	nop
 800a020:	e7fe      	b.n	800a020 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a022:	f001 f827 	bl	800b074 <xTaskGetSchedulerState>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d102      	bne.n	800a032 <xQueueReceive+0x6e>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d101      	bne.n	800a036 <xQueueReceive+0x72>
 800a032:	2301      	movs	r3, #1
 800a034:	e000      	b.n	800a038 <xQueueReceive+0x74>
 800a036:	2300      	movs	r3, #0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d10a      	bne.n	800a052 <xQueueReceive+0x8e>
	__asm volatile
 800a03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a040:	f383 8811 	msr	BASEPRI, r3
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	61bb      	str	r3, [r7, #24]
}
 800a04e:	bf00      	nop
 800a050:	e7fe      	b.n	800a050 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a052:	f001 fa47 	bl	800b4e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a05a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d01f      	beq.n	800a0a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a062:	68b9      	ldr	r1, [r7, #8]
 800a064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a066:	f000 f915 	bl	800a294 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06c:	1e5a      	subs	r2, r3, #1
 800a06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a070:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00f      	beq.n	800a09a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07c:	3310      	adds	r3, #16
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 fe38 	bl	800acf4 <xTaskRemoveFromEventList>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d007      	beq.n	800a09a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a08a:	4b3d      	ldr	r3, [pc, #244]	; (800a180 <xQueueReceive+0x1bc>)
 800a08c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a090:	601a      	str	r2, [r3, #0]
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a09a:	f001 fa53 	bl	800b544 <vPortExitCritical>
				return pdPASS;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e069      	b.n	800a176 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d103      	bne.n	800a0b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0a8:	f001 fa4c 	bl	800b544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	e062      	b.n	800a176 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d106      	bne.n	800a0c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0b6:	f107 0310 	add.w	r3, r7, #16
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 fe7c 	bl	800adb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0c4:	f001 fa3e 	bl	800b544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0c8:	f000 fc1c 	bl	800a904 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0cc:	f001 fa0a 	bl	800b4e4 <vPortEnterCritical>
 800a0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0d6:	b25b      	sxtb	r3, r3
 800a0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0dc:	d103      	bne.n	800a0e6 <xQueueReceive+0x122>
 800a0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0ec:	b25b      	sxtb	r3, r3
 800a0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f2:	d103      	bne.n	800a0fc <xQueueReceive+0x138>
 800a0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0fc:	f001 fa22 	bl	800b544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a100:	1d3a      	adds	r2, r7, #4
 800a102:	f107 0310 	add.w	r3, r7, #16
 800a106:	4611      	mov	r1, r2
 800a108:	4618      	mov	r0, r3
 800a10a:	f000 fe6b 	bl	800ade4 <xTaskCheckForTimeOut>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d123      	bne.n	800a15c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a114:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a116:	f000 f935 	bl	800a384 <prvIsQueueEmpty>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d017      	beq.n	800a150 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a122:	3324      	adds	r3, #36	; 0x24
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	4611      	mov	r1, r2
 800a128:	4618      	mov	r0, r3
 800a12a:	f000 fdbf 	bl	800acac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a12e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a130:	f000 f8d6 	bl	800a2e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a134:	f000 fbf4 	bl	800a920 <xTaskResumeAll>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d189      	bne.n	800a052 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a13e:	4b10      	ldr	r3, [pc, #64]	; (800a180 <xQueueReceive+0x1bc>)
 800a140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a144:	601a      	str	r2, [r3, #0]
 800a146:	f3bf 8f4f 	dsb	sy
 800a14a:	f3bf 8f6f 	isb	sy
 800a14e:	e780      	b.n	800a052 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a152:	f000 f8c5 	bl	800a2e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a156:	f000 fbe3 	bl	800a920 <xTaskResumeAll>
 800a15a:	e77a      	b.n	800a052 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a15c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a15e:	f000 f8bf 	bl	800a2e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a162:	f000 fbdd 	bl	800a920 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a168:	f000 f90c 	bl	800a384 <prvIsQueueEmpty>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	f43f af6f 	beq.w	800a052 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a174:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a176:	4618      	mov	r0, r3
 800a178:	3730      	adds	r7, #48	; 0x30
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	e000ed04 	.word	0xe000ed04

0800a184 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10a      	bne.n	800a1a8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800a192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a196:	f383 8811 	msr	BASEPRI, r3
 800a19a:	f3bf 8f6f 	isb	sy
 800a19e:	f3bf 8f4f 	dsb	sy
 800a1a2:	60bb      	str	r3, [r7, #8]
}
 800a1a4:	bf00      	nop
 800a1a6:	e7fe      	b.n	800a1a6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800a1a8:	f001 f99c 	bl	800b4e4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a1b2:	f001 f9c7 	bl	800b544 <vPortExitCritical>

	return uxReturn;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3710      	adds	r7, #16
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d10d      	bne.n	800a1fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d14d      	bne.n	800a282 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f000 ff60 	bl	800b0b0 <xTaskPriorityDisinherit>
 800a1f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	609a      	str	r2, [r3, #8]
 800a1f8:	e043      	b.n	800a282 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d119      	bne.n	800a234 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6858      	ldr	r0, [r3, #4]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a208:	461a      	mov	r2, r3
 800a20a:	68b9      	ldr	r1, [r7, #8]
 800a20c:	f001 fc5a 	bl	800bac4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	685a      	ldr	r2, [r3, #4]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a218:	441a      	add	r2, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	685a      	ldr	r2, [r3, #4]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	429a      	cmp	r2, r3
 800a228:	d32b      	bcc.n	800a282 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	605a      	str	r2, [r3, #4]
 800a232:	e026      	b.n	800a282 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	68d8      	ldr	r0, [r3, #12]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23c:	461a      	mov	r2, r3
 800a23e:	68b9      	ldr	r1, [r7, #8]
 800a240:	f001 fc40 	bl	800bac4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	68da      	ldr	r2, [r3, #12]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a24c:	425b      	negs	r3, r3
 800a24e:	441a      	add	r2, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	68da      	ldr	r2, [r3, #12]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d207      	bcs.n	800a270 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	689a      	ldr	r2, [r3, #8]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a268:	425b      	negs	r3, r3
 800a26a:	441a      	add	r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2b02      	cmp	r3, #2
 800a274:	d105      	bne.n	800a282 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d002      	beq.n	800a282 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	3b01      	subs	r3, #1
 800a280:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	1c5a      	adds	r2, r3, #1
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a28a:	697b      	ldr	r3, [r7, #20]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3718      	adds	r7, #24
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d018      	beq.n	800a2d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	68da      	ldr	r2, [r3, #12]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ae:	441a      	add	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	68da      	ldr	r2, [r3, #12]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d303      	bcc.n	800a2c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	68d9      	ldr	r1, [r3, #12]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	6838      	ldr	r0, [r7, #0]
 800a2d4:	f001 fbf6 	bl	800bac4 <memcpy>
	}
}
 800a2d8:	bf00      	nop
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a2e8:	f001 f8fc 	bl	800b4e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2f4:	e011      	b.n	800a31a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d012      	beq.n	800a324 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	3324      	adds	r3, #36	; 0x24
 800a302:	4618      	mov	r0, r3
 800a304:	f000 fcf6 	bl	800acf4 <xTaskRemoveFromEventList>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a30e:	f000 fdcb 	bl	800aea8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a312:	7bfb      	ldrb	r3, [r7, #15]
 800a314:	3b01      	subs	r3, #1
 800a316:	b2db      	uxtb	r3, r3
 800a318:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a31a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	dce9      	bgt.n	800a2f6 <prvUnlockQueue+0x16>
 800a322:	e000      	b.n	800a326 <prvUnlockQueue+0x46>
					break;
 800a324:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	22ff      	movs	r2, #255	; 0xff
 800a32a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a32e:	f001 f909 	bl	800b544 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a332:	f001 f8d7 	bl	800b4e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a33c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a33e:	e011      	b.n	800a364 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d012      	beq.n	800a36e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	3310      	adds	r3, #16
 800a34c:	4618      	mov	r0, r3
 800a34e:	f000 fcd1 	bl	800acf4 <xTaskRemoveFromEventList>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a358:	f000 fda6 	bl	800aea8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a35c:	7bbb      	ldrb	r3, [r7, #14]
 800a35e:	3b01      	subs	r3, #1
 800a360:	b2db      	uxtb	r3, r3
 800a362:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a364:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	dce9      	bgt.n	800a340 <prvUnlockQueue+0x60>
 800a36c:	e000      	b.n	800a370 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a36e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	22ff      	movs	r2, #255	; 0xff
 800a374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a378:	f001 f8e4 	bl	800b544 <vPortExitCritical>
}
 800a37c:	bf00      	nop
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a38c:	f001 f8aa 	bl	800b4e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a394:	2b00      	cmp	r3, #0
 800a396:	d102      	bne.n	800a39e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a398:	2301      	movs	r3, #1
 800a39a:	60fb      	str	r3, [r7, #12]
 800a39c:	e001      	b.n	800a3a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a3a2:	f001 f8cf 	bl	800b544 <vPortExitCritical>

	return xReturn;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3710      	adds	r7, #16
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a3b8:	f001 f894 	bl	800b4e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d102      	bne.n	800a3ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	60fb      	str	r3, [r7, #12]
 800a3cc:	e001      	b.n	800a3d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a3d2:	f001 f8b7 	bl	800b544 <vPortExitCritical>

	return xReturn;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b08e      	sub	sp, #56	; 0x38
 800a3e4:	af04      	add	r7, sp, #16
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
 800a3ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d10a      	bne.n	800a40a <xTaskCreateStatic+0x2a>
	__asm volatile
 800a3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f8:	f383 8811 	msr	BASEPRI, r3
 800a3fc:	f3bf 8f6f 	isb	sy
 800a400:	f3bf 8f4f 	dsb	sy
 800a404:	623b      	str	r3, [r7, #32]
}
 800a406:	bf00      	nop
 800a408:	e7fe      	b.n	800a408 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d10a      	bne.n	800a426 <xTaskCreateStatic+0x46>
	__asm volatile
 800a410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a414:	f383 8811 	msr	BASEPRI, r3
 800a418:	f3bf 8f6f 	isb	sy
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	61fb      	str	r3, [r7, #28]
}
 800a422:	bf00      	nop
 800a424:	e7fe      	b.n	800a424 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a426:	23b4      	movs	r3, #180	; 0xb4
 800a428:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	2bb4      	cmp	r3, #180	; 0xb4
 800a42e:	d00a      	beq.n	800a446 <xTaskCreateStatic+0x66>
	__asm volatile
 800a430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a434:	f383 8811 	msr	BASEPRI, r3
 800a438:	f3bf 8f6f 	isb	sy
 800a43c:	f3bf 8f4f 	dsb	sy
 800a440:	61bb      	str	r3, [r7, #24]
}
 800a442:	bf00      	nop
 800a444:	e7fe      	b.n	800a444 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a446:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d01e      	beq.n	800a48c <xTaskCreateStatic+0xac>
 800a44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a450:	2b00      	cmp	r3, #0
 800a452:	d01b      	beq.n	800a48c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a456:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a45c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a460:	2202      	movs	r2, #2
 800a462:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a466:	2300      	movs	r3, #0
 800a468:	9303      	str	r3, [sp, #12]
 800a46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46c:	9302      	str	r3, [sp, #8]
 800a46e:	f107 0314 	add.w	r3, r7, #20
 800a472:	9301      	str	r3, [sp, #4]
 800a474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a476:	9300      	str	r3, [sp, #0]
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	68b9      	ldr	r1, [r7, #8]
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f000 f850 	bl	800a524 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a486:	f000 f8eb 	bl	800a660 <prvAddNewTaskToReadyList>
 800a48a:	e001      	b.n	800a490 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a48c:	2300      	movs	r3, #0
 800a48e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a490:	697b      	ldr	r3, [r7, #20]
	}
 800a492:	4618      	mov	r0, r3
 800a494:	3728      	adds	r7, #40	; 0x28
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b08c      	sub	sp, #48	; 0x30
 800a49e:	af04      	add	r7, sp, #16
 800a4a0:	60f8      	str	r0, [r7, #12]
 800a4a2:	60b9      	str	r1, [r7, #8]
 800a4a4:	603b      	str	r3, [r7, #0]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a4aa:	88fb      	ldrh	r3, [r7, #6]
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f001 f8fa 	bl	800b6a8 <pvPortMalloc>
 800a4b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00e      	beq.n	800a4da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a4bc:	20b4      	movs	r0, #180	; 0xb4
 800a4be:	f001 f8f3 	bl	800b6a8 <pvPortMalloc>
 800a4c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d003      	beq.n	800a4d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	697a      	ldr	r2, [r7, #20]
 800a4ce:	631a      	str	r2, [r3, #48]	; 0x30
 800a4d0:	e005      	b.n	800a4de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a4d2:	6978      	ldr	r0, [r7, #20]
 800a4d4:	f001 f9b4 	bl	800b840 <vPortFree>
 800a4d8:	e001      	b.n	800a4de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d017      	beq.n	800a514 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a4ec:	88fa      	ldrh	r2, [r7, #6]
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	9303      	str	r3, [sp, #12]
 800a4f2:	69fb      	ldr	r3, [r7, #28]
 800a4f4:	9302      	str	r3, [sp, #8]
 800a4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f8:	9301      	str	r3, [sp, #4]
 800a4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	68b9      	ldr	r1, [r7, #8]
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f000 f80e 	bl	800a524 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a508:	69f8      	ldr	r0, [r7, #28]
 800a50a:	f000 f8a9 	bl	800a660 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a50e:	2301      	movs	r3, #1
 800a510:	61bb      	str	r3, [r7, #24]
 800a512:	e002      	b.n	800a51a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a514:	f04f 33ff 	mov.w	r3, #4294967295
 800a518:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a51a:	69bb      	ldr	r3, [r7, #24]
	}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3720      	adds	r7, #32
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b088      	sub	sp, #32
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	607a      	str	r2, [r7, #4]
 800a530:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a53c:	3b01      	subs	r3, #1
 800a53e:	009b      	lsls	r3, r3, #2
 800a540:	4413      	add	r3, r2
 800a542:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	f023 0307 	bic.w	r3, r3, #7
 800a54a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	f003 0307 	and.w	r3, r3, #7
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00a      	beq.n	800a56c <prvInitialiseNewTask+0x48>
	__asm volatile
 800a556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55a:	f383 8811 	msr	BASEPRI, r3
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f3bf 8f4f 	dsb	sy
 800a566:	617b      	str	r3, [r7, #20]
}
 800a568:	bf00      	nop
 800a56a:	e7fe      	b.n	800a56a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d01f      	beq.n	800a5b2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a572:	2300      	movs	r3, #0
 800a574:	61fb      	str	r3, [r7, #28]
 800a576:	e012      	b.n	800a59e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a578:	68ba      	ldr	r2, [r7, #8]
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	4413      	add	r3, r2
 800a57e:	7819      	ldrb	r1, [r3, #0]
 800a580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	4413      	add	r3, r2
 800a586:	3334      	adds	r3, #52	; 0x34
 800a588:	460a      	mov	r2, r1
 800a58a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a58c:	68ba      	ldr	r2, [r7, #8]
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	4413      	add	r3, r2
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d006      	beq.n	800a5a6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	3301      	adds	r3, #1
 800a59c:	61fb      	str	r3, [r7, #28]
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	2b0f      	cmp	r3, #15
 800a5a2:	d9e9      	bls.n	800a578 <prvInitialiseNewTask+0x54>
 800a5a4:	e000      	b.n	800a5a8 <prvInitialiseNewTask+0x84>
			{
				break;
 800a5a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a5b0:	e003      	b.n	800a5ba <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5bc:	2b06      	cmp	r3, #6
 800a5be:	d901      	bls.n	800a5c4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a5c0:	2306      	movs	r3, #6
 800a5c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5ce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d8:	3304      	adds	r3, #4
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7ff fa9e 	bl	8009b1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e2:	3318      	adds	r3, #24
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7ff fa99 	bl	8009b1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f2:	f1c3 0207 	rsb	r2, r3, #7
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a602:	2200      	movs	r2, #0
 800a604:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a612:	334c      	adds	r3, #76	; 0x4c
 800a614:	2260      	movs	r2, #96	; 0x60
 800a616:	2100      	movs	r1, #0
 800a618:	4618      	mov	r0, r3
 800a61a:	f001 fa61 	bl	800bae0 <memset>
 800a61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a620:	4a0c      	ldr	r2, [pc, #48]	; (800a654 <prvInitialiseNewTask+0x130>)
 800a622:	651a      	str	r2, [r3, #80]	; 0x50
 800a624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a626:	4a0c      	ldr	r2, [pc, #48]	; (800a658 <prvInitialiseNewTask+0x134>)
 800a628:	655a      	str	r2, [r3, #84]	; 0x54
 800a62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62c:	4a0b      	ldr	r2, [pc, #44]	; (800a65c <prvInitialiseNewTask+0x138>)
 800a62e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a630:	683a      	ldr	r2, [r7, #0]
 800a632:	68f9      	ldr	r1, [r7, #12]
 800a634:	69b8      	ldr	r0, [r7, #24]
 800a636:	f000 fe27 	bl	800b288 <pxPortInitialiseStack>
 800a63a:	4602      	mov	r2, r0
 800a63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a642:	2b00      	cmp	r3, #0
 800a644:	d002      	beq.n	800a64c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a64a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a64c:	bf00      	nop
 800a64e:	3720      	adds	r7, #32
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	0800bff8 	.word	0x0800bff8
 800a658:	0800c018 	.word	0x0800c018
 800a65c:	0800bfd8 	.word	0x0800bfd8

0800a660 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a668:	f000 ff3c 	bl	800b4e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a66c:	4b2a      	ldr	r3, [pc, #168]	; (800a718 <prvAddNewTaskToReadyList+0xb8>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	3301      	adds	r3, #1
 800a672:	4a29      	ldr	r2, [pc, #164]	; (800a718 <prvAddNewTaskToReadyList+0xb8>)
 800a674:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a676:	4b29      	ldr	r3, [pc, #164]	; (800a71c <prvAddNewTaskToReadyList+0xbc>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d109      	bne.n	800a692 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a67e:	4a27      	ldr	r2, [pc, #156]	; (800a71c <prvAddNewTaskToReadyList+0xbc>)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a684:	4b24      	ldr	r3, [pc, #144]	; (800a718 <prvAddNewTaskToReadyList+0xb8>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d110      	bne.n	800a6ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a68c:	f000 fc30 	bl	800aef0 <prvInitialiseTaskLists>
 800a690:	e00d      	b.n	800a6ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a692:	4b23      	ldr	r3, [pc, #140]	; (800a720 <prvAddNewTaskToReadyList+0xc0>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d109      	bne.n	800a6ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a69a:	4b20      	ldr	r3, [pc, #128]	; (800a71c <prvAddNewTaskToReadyList+0xbc>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d802      	bhi.n	800a6ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a6a8:	4a1c      	ldr	r2, [pc, #112]	; (800a71c <prvAddNewTaskToReadyList+0xbc>)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a6ae:	4b1d      	ldr	r3, [pc, #116]	; (800a724 <prvAddNewTaskToReadyList+0xc4>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	4a1b      	ldr	r2, [pc, #108]	; (800a724 <prvAddNewTaskToReadyList+0xc4>)
 800a6b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6bc:	2201      	movs	r2, #1
 800a6be:	409a      	lsls	r2, r3
 800a6c0:	4b19      	ldr	r3, [pc, #100]	; (800a728 <prvAddNewTaskToReadyList+0xc8>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	4a18      	ldr	r2, [pc, #96]	; (800a728 <prvAddNewTaskToReadyList+0xc8>)
 800a6c8:	6013      	str	r3, [r2, #0]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	009b      	lsls	r3, r3, #2
 800a6d2:	4413      	add	r3, r2
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	4a15      	ldr	r2, [pc, #84]	; (800a72c <prvAddNewTaskToReadyList+0xcc>)
 800a6d8:	441a      	add	r2, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	3304      	adds	r3, #4
 800a6de:	4619      	mov	r1, r3
 800a6e0:	4610      	mov	r0, r2
 800a6e2:	f7ff fa28 	bl	8009b36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a6e6:	f000 ff2d 	bl	800b544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a6ea:	4b0d      	ldr	r3, [pc, #52]	; (800a720 <prvAddNewTaskToReadyList+0xc0>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00e      	beq.n	800a710 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a6f2:	4b0a      	ldr	r3, [pc, #40]	; (800a71c <prvAddNewTaskToReadyList+0xbc>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d207      	bcs.n	800a710 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a700:	4b0b      	ldr	r3, [pc, #44]	; (800a730 <prvAddNewTaskToReadyList+0xd0>)
 800a702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a706:	601a      	str	r2, [r3, #0]
 800a708:	f3bf 8f4f 	dsb	sy
 800a70c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a710:	bf00      	nop
 800a712:	3708      	adds	r7, #8
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	20000998 	.word	0x20000998
 800a71c:	20000898 	.word	0x20000898
 800a720:	200009a4 	.word	0x200009a4
 800a724:	200009b4 	.word	0x200009b4
 800a728:	200009a0 	.word	0x200009a0
 800a72c:	2000089c 	.word	0x2000089c
 800a730:	e000ed04 	.word	0xe000ed04

0800a734 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a734:	b580      	push	{r7, lr}
 800a736:	b08a      	sub	sp, #40	; 0x28
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a73e:	2300      	movs	r3, #0
 800a740:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d10a      	bne.n	800a75e <vTaskDelayUntil+0x2a>
	__asm volatile
 800a748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74c:	f383 8811 	msr	BASEPRI, r3
 800a750:	f3bf 8f6f 	isb	sy
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	617b      	str	r3, [r7, #20]
}
 800a75a:	bf00      	nop
 800a75c:	e7fe      	b.n	800a75c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d10a      	bne.n	800a77a <vTaskDelayUntil+0x46>
	__asm volatile
 800a764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a768:	f383 8811 	msr	BASEPRI, r3
 800a76c:	f3bf 8f6f 	isb	sy
 800a770:	f3bf 8f4f 	dsb	sy
 800a774:	613b      	str	r3, [r7, #16]
}
 800a776:	bf00      	nop
 800a778:	e7fe      	b.n	800a778 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a77a:	4b2a      	ldr	r3, [pc, #168]	; (800a824 <vTaskDelayUntil+0xf0>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00a      	beq.n	800a798 <vTaskDelayUntil+0x64>
	__asm volatile
 800a782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	60fb      	str	r3, [r7, #12]
}
 800a794:	bf00      	nop
 800a796:	e7fe      	b.n	800a796 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a798:	f000 f8b4 	bl	800a904 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a79c:	4b22      	ldr	r3, [pc, #136]	; (800a828 <vTaskDelayUntil+0xf4>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6a3a      	ldr	r2, [r7, #32]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d20b      	bcs.n	800a7ce <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	69fa      	ldr	r2, [r7, #28]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d211      	bcs.n	800a7e4 <vTaskDelayUntil+0xb0>
 800a7c0:	69fa      	ldr	r2, [r7, #28]
 800a7c2:	6a3b      	ldr	r3, [r7, #32]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d90d      	bls.n	800a7e4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	627b      	str	r3, [r7, #36]	; 0x24
 800a7cc:	e00a      	b.n	800a7e4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	69fa      	ldr	r2, [r7, #28]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d303      	bcc.n	800a7e0 <vTaskDelayUntil+0xac>
 800a7d8:	69fa      	ldr	r2, [r7, #28]
 800a7da:	6a3b      	ldr	r3, [r7, #32]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d901      	bls.n	800a7e4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	69fa      	ldr	r2, [r7, #28]
 800a7e8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d006      	beq.n	800a7fe <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a7f0:	69fa      	ldr	r2, [r7, #28]
 800a7f2:	6a3b      	ldr	r3, [r7, #32]
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 fcdf 	bl	800b1bc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a7fe:	f000 f88f 	bl	800a920 <xTaskResumeAll>
 800a802:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d107      	bne.n	800a81a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a80a:	4b08      	ldr	r3, [pc, #32]	; (800a82c <vTaskDelayUntil+0xf8>)
 800a80c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a810:	601a      	str	r2, [r3, #0]
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a81a:	bf00      	nop
 800a81c:	3728      	adds	r7, #40	; 0x28
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	200009c0 	.word	0x200009c0
 800a828:	2000099c 	.word	0x2000099c
 800a82c:	e000ed04 	.word	0xe000ed04

0800a830 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b08a      	sub	sp, #40	; 0x28
 800a834:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a836:	2300      	movs	r3, #0
 800a838:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a83a:	2300      	movs	r3, #0
 800a83c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a83e:	463a      	mov	r2, r7
 800a840:	1d39      	adds	r1, r7, #4
 800a842:	f107 0308 	add.w	r3, r7, #8
 800a846:	4618      	mov	r0, r3
 800a848:	f7f7 fc74 	bl	8002134 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	9202      	str	r2, [sp, #8]
 800a854:	9301      	str	r3, [sp, #4]
 800a856:	2300      	movs	r3, #0
 800a858:	9300      	str	r3, [sp, #0]
 800a85a:	2300      	movs	r3, #0
 800a85c:	460a      	mov	r2, r1
 800a85e:	4921      	ldr	r1, [pc, #132]	; (800a8e4 <vTaskStartScheduler+0xb4>)
 800a860:	4821      	ldr	r0, [pc, #132]	; (800a8e8 <vTaskStartScheduler+0xb8>)
 800a862:	f7ff fdbd 	bl	800a3e0 <xTaskCreateStatic>
 800a866:	4603      	mov	r3, r0
 800a868:	4a20      	ldr	r2, [pc, #128]	; (800a8ec <vTaskStartScheduler+0xbc>)
 800a86a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a86c:	4b1f      	ldr	r3, [pc, #124]	; (800a8ec <vTaskStartScheduler+0xbc>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d002      	beq.n	800a87a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a874:	2301      	movs	r3, #1
 800a876:	617b      	str	r3, [r7, #20]
 800a878:	e001      	b.n	800a87e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a87a:	2300      	movs	r3, #0
 800a87c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d11b      	bne.n	800a8bc <vTaskStartScheduler+0x8c>
	__asm volatile
 800a884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a888:	f383 8811 	msr	BASEPRI, r3
 800a88c:	f3bf 8f6f 	isb	sy
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	613b      	str	r3, [r7, #16]
}
 800a896:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a898:	4b15      	ldr	r3, [pc, #84]	; (800a8f0 <vTaskStartScheduler+0xc0>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	334c      	adds	r3, #76	; 0x4c
 800a89e:	4a15      	ldr	r2, [pc, #84]	; (800a8f4 <vTaskStartScheduler+0xc4>)
 800a8a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a8a2:	4b15      	ldr	r3, [pc, #84]	; (800a8f8 <vTaskStartScheduler+0xc8>)
 800a8a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a8aa:	4b14      	ldr	r3, [pc, #80]	; (800a8fc <vTaskStartScheduler+0xcc>)
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a8b0:	4b13      	ldr	r3, [pc, #76]	; (800a900 <vTaskStartScheduler+0xd0>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a8b6:	f000 fd73 	bl	800b3a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a8ba:	e00e      	b.n	800a8da <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c2:	d10a      	bne.n	800a8da <vTaskStartScheduler+0xaa>
	__asm volatile
 800a8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c8:	f383 8811 	msr	BASEPRI, r3
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	60fb      	str	r3, [r7, #12]
}
 800a8d6:	bf00      	nop
 800a8d8:	e7fe      	b.n	800a8d8 <vTaskStartScheduler+0xa8>
}
 800a8da:	bf00      	nop
 800a8dc:	3718      	adds	r7, #24
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	0800bf50 	.word	0x0800bf50
 800a8e8:	0800aec1 	.word	0x0800aec1
 800a8ec:	200009bc 	.word	0x200009bc
 800a8f0:	20000898 	.word	0x20000898
 800a8f4:	20000050 	.word	0x20000050
 800a8f8:	200009b8 	.word	0x200009b8
 800a8fc:	200009a4 	.word	0x200009a4
 800a900:	2000099c 	.word	0x2000099c

0800a904 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a904:	b480      	push	{r7}
 800a906:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a908:	4b04      	ldr	r3, [pc, #16]	; (800a91c <vTaskSuspendAll+0x18>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	3301      	adds	r3, #1
 800a90e:	4a03      	ldr	r2, [pc, #12]	; (800a91c <vTaskSuspendAll+0x18>)
 800a910:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a912:	bf00      	nop
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr
 800a91c:	200009c0 	.word	0x200009c0

0800a920 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a926:	2300      	movs	r3, #0
 800a928:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a92a:	2300      	movs	r3, #0
 800a92c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a92e:	4b41      	ldr	r3, [pc, #260]	; (800aa34 <xTaskResumeAll+0x114>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d10a      	bne.n	800a94c <xTaskResumeAll+0x2c>
	__asm volatile
 800a936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93a:	f383 8811 	msr	BASEPRI, r3
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	f3bf 8f4f 	dsb	sy
 800a946:	603b      	str	r3, [r7, #0]
}
 800a948:	bf00      	nop
 800a94a:	e7fe      	b.n	800a94a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a94c:	f000 fdca 	bl	800b4e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a950:	4b38      	ldr	r3, [pc, #224]	; (800aa34 <xTaskResumeAll+0x114>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	3b01      	subs	r3, #1
 800a956:	4a37      	ldr	r2, [pc, #220]	; (800aa34 <xTaskResumeAll+0x114>)
 800a958:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a95a:	4b36      	ldr	r3, [pc, #216]	; (800aa34 <xTaskResumeAll+0x114>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d161      	bne.n	800aa26 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a962:	4b35      	ldr	r3, [pc, #212]	; (800aa38 <xTaskResumeAll+0x118>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d05d      	beq.n	800aa26 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a96a:	e02e      	b.n	800a9ca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a96c:	4b33      	ldr	r3, [pc, #204]	; (800aa3c <xTaskResumeAll+0x11c>)
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	3318      	adds	r3, #24
 800a978:	4618      	mov	r0, r3
 800a97a:	f7ff f939 	bl	8009bf0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	3304      	adds	r3, #4
 800a982:	4618      	mov	r0, r3
 800a984:	f7ff f934 	bl	8009bf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98c:	2201      	movs	r2, #1
 800a98e:	409a      	lsls	r2, r3
 800a990:	4b2b      	ldr	r3, [pc, #172]	; (800aa40 <xTaskResumeAll+0x120>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4313      	orrs	r3, r2
 800a996:	4a2a      	ldr	r2, [pc, #168]	; (800aa40 <xTaskResumeAll+0x120>)
 800a998:	6013      	str	r3, [r2, #0]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a99e:	4613      	mov	r3, r2
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	4413      	add	r3, r2
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	4a27      	ldr	r2, [pc, #156]	; (800aa44 <xTaskResumeAll+0x124>)
 800a9a8:	441a      	add	r2, r3
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	3304      	adds	r3, #4
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	4610      	mov	r0, r2
 800a9b2:	f7ff f8c0 	bl	8009b36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ba:	4b23      	ldr	r3, [pc, #140]	; (800aa48 <xTaskResumeAll+0x128>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d302      	bcc.n	800a9ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a9c4:	4b21      	ldr	r3, [pc, #132]	; (800aa4c <xTaskResumeAll+0x12c>)
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9ca:	4b1c      	ldr	r3, [pc, #112]	; (800aa3c <xTaskResumeAll+0x11c>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1cc      	bne.n	800a96c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d001      	beq.n	800a9dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a9d8:	f000 fb2c 	bl	800b034 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a9dc:	4b1c      	ldr	r3, [pc, #112]	; (800aa50 <xTaskResumeAll+0x130>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d010      	beq.n	800aa0a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a9e8:	f000 f846 	bl	800aa78 <xTaskIncrementTick>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d002      	beq.n	800a9f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a9f2:	4b16      	ldr	r3, [pc, #88]	; (800aa4c <xTaskResumeAll+0x12c>)
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d1f1      	bne.n	800a9e8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800aa04:	4b12      	ldr	r3, [pc, #72]	; (800aa50 <xTaskResumeAll+0x130>)
 800aa06:	2200      	movs	r2, #0
 800aa08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aa0a:	4b10      	ldr	r3, [pc, #64]	; (800aa4c <xTaskResumeAll+0x12c>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d009      	beq.n	800aa26 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aa12:	2301      	movs	r3, #1
 800aa14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aa16:	4b0f      	ldr	r3, [pc, #60]	; (800aa54 <xTaskResumeAll+0x134>)
 800aa18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa1c:	601a      	str	r2, [r3, #0]
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa26:	f000 fd8d 	bl	800b544 <vPortExitCritical>

	return xAlreadyYielded;
 800aa2a:	68bb      	ldr	r3, [r7, #8]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	200009c0 	.word	0x200009c0
 800aa38:	20000998 	.word	0x20000998
 800aa3c:	20000958 	.word	0x20000958
 800aa40:	200009a0 	.word	0x200009a0
 800aa44:	2000089c 	.word	0x2000089c
 800aa48:	20000898 	.word	0x20000898
 800aa4c:	200009ac 	.word	0x200009ac
 800aa50:	200009a8 	.word	0x200009a8
 800aa54:	e000ed04 	.word	0xe000ed04

0800aa58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa5e:	4b05      	ldr	r3, [pc, #20]	; (800aa74 <xTaskGetTickCount+0x1c>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa64:	687b      	ldr	r3, [r7, #4]
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	370c      	adds	r7, #12
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	2000099c 	.word	0x2000099c

0800aa78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa82:	4b4e      	ldr	r3, [pc, #312]	; (800abbc <xTaskIncrementTick+0x144>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f040 808e 	bne.w	800aba8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa8c:	4b4c      	ldr	r3, [pc, #304]	; (800abc0 <xTaskIncrementTick+0x148>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	3301      	adds	r3, #1
 800aa92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa94:	4a4a      	ldr	r2, [pc, #296]	; (800abc0 <xTaskIncrementTick+0x148>)
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d120      	bne.n	800aae2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aaa0:	4b48      	ldr	r3, [pc, #288]	; (800abc4 <xTaskIncrementTick+0x14c>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00a      	beq.n	800aac0 <xTaskIncrementTick+0x48>
	__asm volatile
 800aaaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaae:	f383 8811 	msr	BASEPRI, r3
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	603b      	str	r3, [r7, #0]
}
 800aabc:	bf00      	nop
 800aabe:	e7fe      	b.n	800aabe <xTaskIncrementTick+0x46>
 800aac0:	4b40      	ldr	r3, [pc, #256]	; (800abc4 <xTaskIncrementTick+0x14c>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	60fb      	str	r3, [r7, #12]
 800aac6:	4b40      	ldr	r3, [pc, #256]	; (800abc8 <xTaskIncrementTick+0x150>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a3e      	ldr	r2, [pc, #248]	; (800abc4 <xTaskIncrementTick+0x14c>)
 800aacc:	6013      	str	r3, [r2, #0]
 800aace:	4a3e      	ldr	r2, [pc, #248]	; (800abc8 <xTaskIncrementTick+0x150>)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6013      	str	r3, [r2, #0]
 800aad4:	4b3d      	ldr	r3, [pc, #244]	; (800abcc <xTaskIncrementTick+0x154>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	3301      	adds	r3, #1
 800aada:	4a3c      	ldr	r2, [pc, #240]	; (800abcc <xTaskIncrementTick+0x154>)
 800aadc:	6013      	str	r3, [r2, #0]
 800aade:	f000 faa9 	bl	800b034 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aae2:	4b3b      	ldr	r3, [pc, #236]	; (800abd0 <xTaskIncrementTick+0x158>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	693a      	ldr	r2, [r7, #16]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d348      	bcc.n	800ab7e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aaec:	4b35      	ldr	r3, [pc, #212]	; (800abc4 <xTaskIncrementTick+0x14c>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d104      	bne.n	800ab00 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaf6:	4b36      	ldr	r3, [pc, #216]	; (800abd0 <xTaskIncrementTick+0x158>)
 800aaf8:	f04f 32ff 	mov.w	r2, #4294967295
 800aafc:	601a      	str	r2, [r3, #0]
					break;
 800aafe:	e03e      	b.n	800ab7e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab00:	4b30      	ldr	r3, [pc, #192]	; (800abc4 <xTaskIncrementTick+0x14c>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ab10:	693a      	ldr	r2, [r7, #16]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d203      	bcs.n	800ab20 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ab18:	4a2d      	ldr	r2, [pc, #180]	; (800abd0 <xTaskIncrementTick+0x158>)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ab1e:	e02e      	b.n	800ab7e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	3304      	adds	r3, #4
 800ab24:	4618      	mov	r0, r3
 800ab26:	f7ff f863 	bl	8009bf0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d004      	beq.n	800ab3c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	3318      	adds	r3, #24
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7ff f85a 	bl	8009bf0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab40:	2201      	movs	r2, #1
 800ab42:	409a      	lsls	r2, r3
 800ab44:	4b23      	ldr	r3, [pc, #140]	; (800abd4 <xTaskIncrementTick+0x15c>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	4a22      	ldr	r2, [pc, #136]	; (800abd4 <xTaskIncrementTick+0x15c>)
 800ab4c:	6013      	str	r3, [r2, #0]
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab52:	4613      	mov	r3, r2
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4413      	add	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4a1f      	ldr	r2, [pc, #124]	; (800abd8 <xTaskIncrementTick+0x160>)
 800ab5c:	441a      	add	r2, r3
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	3304      	adds	r3, #4
 800ab62:	4619      	mov	r1, r3
 800ab64:	4610      	mov	r0, r2
 800ab66:	f7fe ffe6 	bl	8009b36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6e:	4b1b      	ldr	r3, [pc, #108]	; (800abdc <xTaskIncrementTick+0x164>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d3b9      	bcc.n	800aaec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab7c:	e7b6      	b.n	800aaec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab7e:	4b17      	ldr	r3, [pc, #92]	; (800abdc <xTaskIncrementTick+0x164>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab84:	4914      	ldr	r1, [pc, #80]	; (800abd8 <xTaskIncrementTick+0x160>)
 800ab86:	4613      	mov	r3, r2
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	4413      	add	r3, r2
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	440b      	add	r3, r1
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d901      	bls.n	800ab9a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ab96:	2301      	movs	r3, #1
 800ab98:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ab9a:	4b11      	ldr	r3, [pc, #68]	; (800abe0 <xTaskIncrementTick+0x168>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d007      	beq.n	800abb2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800aba2:	2301      	movs	r3, #1
 800aba4:	617b      	str	r3, [r7, #20]
 800aba6:	e004      	b.n	800abb2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aba8:	4b0e      	ldr	r3, [pc, #56]	; (800abe4 <xTaskIncrementTick+0x16c>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	3301      	adds	r3, #1
 800abae:	4a0d      	ldr	r2, [pc, #52]	; (800abe4 <xTaskIncrementTick+0x16c>)
 800abb0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800abb2:	697b      	ldr	r3, [r7, #20]
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3718      	adds	r7, #24
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	200009c0 	.word	0x200009c0
 800abc0:	2000099c 	.word	0x2000099c
 800abc4:	20000950 	.word	0x20000950
 800abc8:	20000954 	.word	0x20000954
 800abcc:	200009b0 	.word	0x200009b0
 800abd0:	200009b8 	.word	0x200009b8
 800abd4:	200009a0 	.word	0x200009a0
 800abd8:	2000089c 	.word	0x2000089c
 800abdc:	20000898 	.word	0x20000898
 800abe0:	200009ac 	.word	0x200009ac
 800abe4:	200009a8 	.word	0x200009a8

0800abe8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800abe8:	b480      	push	{r7}
 800abea:	b087      	sub	sp, #28
 800abec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800abee:	4b29      	ldr	r3, [pc, #164]	; (800ac94 <vTaskSwitchContext+0xac>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d003      	beq.n	800abfe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800abf6:	4b28      	ldr	r3, [pc, #160]	; (800ac98 <vTaskSwitchContext+0xb0>)
 800abf8:	2201      	movs	r2, #1
 800abfa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800abfc:	e044      	b.n	800ac88 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800abfe:	4b26      	ldr	r3, [pc, #152]	; (800ac98 <vTaskSwitchContext+0xb0>)
 800ac00:	2200      	movs	r2, #0
 800ac02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac04:	4b25      	ldr	r3, [pc, #148]	; (800ac9c <vTaskSwitchContext+0xb4>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	fab3 f383 	clz	r3, r3
 800ac10:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ac12:	7afb      	ldrb	r3, [r7, #11]
 800ac14:	f1c3 031f 	rsb	r3, r3, #31
 800ac18:	617b      	str	r3, [r7, #20]
 800ac1a:	4921      	ldr	r1, [pc, #132]	; (800aca0 <vTaskSwitchContext+0xb8>)
 800ac1c:	697a      	ldr	r2, [r7, #20]
 800ac1e:	4613      	mov	r3, r2
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4413      	add	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	440b      	add	r3, r1
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10a      	bne.n	800ac44 <vTaskSwitchContext+0x5c>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	607b      	str	r3, [r7, #4]
}
 800ac40:	bf00      	nop
 800ac42:	e7fe      	b.n	800ac42 <vTaskSwitchContext+0x5a>
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	4613      	mov	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	009b      	lsls	r3, r3, #2
 800ac4e:	4a14      	ldr	r2, [pc, #80]	; (800aca0 <vTaskSwitchContext+0xb8>)
 800ac50:	4413      	add	r3, r2
 800ac52:	613b      	str	r3, [r7, #16]
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	685a      	ldr	r2, [r3, #4]
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	605a      	str	r2, [r3, #4]
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	685a      	ldr	r2, [r3, #4]
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	3308      	adds	r3, #8
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d104      	bne.n	800ac74 <vTaskSwitchContext+0x8c>
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	685a      	ldr	r2, [r3, #4]
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	605a      	str	r2, [r3, #4]
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	4a0a      	ldr	r2, [pc, #40]	; (800aca4 <vTaskSwitchContext+0xbc>)
 800ac7c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac7e:	4b09      	ldr	r3, [pc, #36]	; (800aca4 <vTaskSwitchContext+0xbc>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	334c      	adds	r3, #76	; 0x4c
 800ac84:	4a08      	ldr	r2, [pc, #32]	; (800aca8 <vTaskSwitchContext+0xc0>)
 800ac86:	6013      	str	r3, [r2, #0]
}
 800ac88:	bf00      	nop
 800ac8a:	371c      	adds	r7, #28
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr
 800ac94:	200009c0 	.word	0x200009c0
 800ac98:	200009ac 	.word	0x200009ac
 800ac9c:	200009a0 	.word	0x200009a0
 800aca0:	2000089c 	.word	0x2000089c
 800aca4:	20000898 	.word	0x20000898
 800aca8:	20000050 	.word	0x20000050

0800acac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d10a      	bne.n	800acd2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800acbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc0:	f383 8811 	msr	BASEPRI, r3
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	60fb      	str	r3, [r7, #12]
}
 800acce:	bf00      	nop
 800acd0:	e7fe      	b.n	800acd0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acd2:	4b07      	ldr	r3, [pc, #28]	; (800acf0 <vTaskPlaceOnEventList+0x44>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	3318      	adds	r3, #24
 800acd8:	4619      	mov	r1, r3
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f7fe ff4f 	bl	8009b7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ace0:	2101      	movs	r1, #1
 800ace2:	6838      	ldr	r0, [r7, #0]
 800ace4:	f000 fa6a 	bl	800b1bc <prvAddCurrentTaskToDelayedList>
}
 800ace8:	bf00      	nop
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	20000898 	.word	0x20000898

0800acf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b086      	sub	sp, #24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d10a      	bne.n	800ad20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ad0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0e:	f383 8811 	msr	BASEPRI, r3
 800ad12:	f3bf 8f6f 	isb	sy
 800ad16:	f3bf 8f4f 	dsb	sy
 800ad1a:	60fb      	str	r3, [r7, #12]
}
 800ad1c:	bf00      	nop
 800ad1e:	e7fe      	b.n	800ad1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	3318      	adds	r3, #24
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7fe ff63 	bl	8009bf0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad2a:	4b1d      	ldr	r3, [pc, #116]	; (800ada0 <xTaskRemoveFromEventList+0xac>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d11c      	bne.n	800ad6c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	3304      	adds	r3, #4
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fe ff5a 	bl	8009bf0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad40:	2201      	movs	r2, #1
 800ad42:	409a      	lsls	r2, r3
 800ad44:	4b17      	ldr	r3, [pc, #92]	; (800ada4 <xTaskRemoveFromEventList+0xb0>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	4a16      	ldr	r2, [pc, #88]	; (800ada4 <xTaskRemoveFromEventList+0xb0>)
 800ad4c:	6013      	str	r3, [r2, #0]
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad52:	4613      	mov	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	4a13      	ldr	r2, [pc, #76]	; (800ada8 <xTaskRemoveFromEventList+0xb4>)
 800ad5c:	441a      	add	r2, r3
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	3304      	adds	r3, #4
 800ad62:	4619      	mov	r1, r3
 800ad64:	4610      	mov	r0, r2
 800ad66:	f7fe fee6 	bl	8009b36 <vListInsertEnd>
 800ad6a:	e005      	b.n	800ad78 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	3318      	adds	r3, #24
 800ad70:	4619      	mov	r1, r3
 800ad72:	480e      	ldr	r0, [pc, #56]	; (800adac <xTaskRemoveFromEventList+0xb8>)
 800ad74:	f7fe fedf 	bl	8009b36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad7c:	4b0c      	ldr	r3, [pc, #48]	; (800adb0 <xTaskRemoveFromEventList+0xbc>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d905      	bls.n	800ad92 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ad86:	2301      	movs	r3, #1
 800ad88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ad8a:	4b0a      	ldr	r3, [pc, #40]	; (800adb4 <xTaskRemoveFromEventList+0xc0>)
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	601a      	str	r2, [r3, #0]
 800ad90:	e001      	b.n	800ad96 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ad92:	2300      	movs	r3, #0
 800ad94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ad96:	697b      	ldr	r3, [r7, #20]
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3718      	adds	r7, #24
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	200009c0 	.word	0x200009c0
 800ada4:	200009a0 	.word	0x200009a0
 800ada8:	2000089c 	.word	0x2000089c
 800adac:	20000958 	.word	0x20000958
 800adb0:	20000898 	.word	0x20000898
 800adb4:	200009ac 	.word	0x200009ac

0800adb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800adc0:	4b06      	ldr	r3, [pc, #24]	; (800addc <vTaskInternalSetTimeOutState+0x24>)
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800adc8:	4b05      	ldr	r3, [pc, #20]	; (800ade0 <vTaskInternalSetTimeOutState+0x28>)
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	605a      	str	r2, [r3, #4]
}
 800add0:	bf00      	nop
 800add2:	370c      	adds	r7, #12
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr
 800addc:	200009b0 	.word	0x200009b0
 800ade0:	2000099c 	.word	0x2000099c

0800ade4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b088      	sub	sp, #32
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d10a      	bne.n	800ae0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800adf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf8:	f383 8811 	msr	BASEPRI, r3
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	613b      	str	r3, [r7, #16]
}
 800ae06:	bf00      	nop
 800ae08:	e7fe      	b.n	800ae08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d10a      	bne.n	800ae26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ae10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae14:	f383 8811 	msr	BASEPRI, r3
 800ae18:	f3bf 8f6f 	isb	sy
 800ae1c:	f3bf 8f4f 	dsb	sy
 800ae20:	60fb      	str	r3, [r7, #12]
}
 800ae22:	bf00      	nop
 800ae24:	e7fe      	b.n	800ae24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ae26:	f000 fb5d 	bl	800b4e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ae2a:	4b1d      	ldr	r3, [pc, #116]	; (800aea0 <xTaskCheckForTimeOut+0xbc>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	69ba      	ldr	r2, [r7, #24]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae42:	d102      	bne.n	800ae4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ae44:	2300      	movs	r3, #0
 800ae46:	61fb      	str	r3, [r7, #28]
 800ae48:	e023      	b.n	800ae92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	4b15      	ldr	r3, [pc, #84]	; (800aea4 <xTaskCheckForTimeOut+0xc0>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d007      	beq.n	800ae66 <xTaskCheckForTimeOut+0x82>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	69ba      	ldr	r2, [r7, #24]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d302      	bcc.n	800ae66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ae60:	2301      	movs	r3, #1
 800ae62:	61fb      	str	r3, [r7, #28]
 800ae64:	e015      	b.n	800ae92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	697a      	ldr	r2, [r7, #20]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d20b      	bcs.n	800ae88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	681a      	ldr	r2, [r3, #0]
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	1ad2      	subs	r2, r2, r3
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f7ff ff9b 	bl	800adb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ae82:	2300      	movs	r3, #0
 800ae84:	61fb      	str	r3, [r7, #28]
 800ae86:	e004      	b.n	800ae92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ae92:	f000 fb57 	bl	800b544 <vPortExitCritical>

	return xReturn;
 800ae96:	69fb      	ldr	r3, [r7, #28]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3720      	adds	r7, #32
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	2000099c 	.word	0x2000099c
 800aea4:	200009b0 	.word	0x200009b0

0800aea8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aea8:	b480      	push	{r7}
 800aeaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aeac:	4b03      	ldr	r3, [pc, #12]	; (800aebc <vTaskMissedYield+0x14>)
 800aeae:	2201      	movs	r2, #1
 800aeb0:	601a      	str	r2, [r3, #0]
}
 800aeb2:	bf00      	nop
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr
 800aebc:	200009ac 	.word	0x200009ac

0800aec0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aec8:	f000 f852 	bl	800af70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aecc:	4b06      	ldr	r3, [pc, #24]	; (800aee8 <prvIdleTask+0x28>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d9f9      	bls.n	800aec8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aed4:	4b05      	ldr	r3, [pc, #20]	; (800aeec <prvIdleTask+0x2c>)
 800aed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeda:	601a      	str	r2, [r3, #0]
 800aedc:	f3bf 8f4f 	dsb	sy
 800aee0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aee4:	e7f0      	b.n	800aec8 <prvIdleTask+0x8>
 800aee6:	bf00      	nop
 800aee8:	2000089c 	.word	0x2000089c
 800aeec:	e000ed04 	.word	0xe000ed04

0800aef0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aef6:	2300      	movs	r3, #0
 800aef8:	607b      	str	r3, [r7, #4]
 800aefa:	e00c      	b.n	800af16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	4613      	mov	r3, r2
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	4413      	add	r3, r2
 800af04:	009b      	lsls	r3, r3, #2
 800af06:	4a12      	ldr	r2, [pc, #72]	; (800af50 <prvInitialiseTaskLists+0x60>)
 800af08:	4413      	add	r3, r2
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7fe fde6 	bl	8009adc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	3301      	adds	r3, #1
 800af14:	607b      	str	r3, [r7, #4]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2b06      	cmp	r3, #6
 800af1a:	d9ef      	bls.n	800aefc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800af1c:	480d      	ldr	r0, [pc, #52]	; (800af54 <prvInitialiseTaskLists+0x64>)
 800af1e:	f7fe fddd 	bl	8009adc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800af22:	480d      	ldr	r0, [pc, #52]	; (800af58 <prvInitialiseTaskLists+0x68>)
 800af24:	f7fe fdda 	bl	8009adc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800af28:	480c      	ldr	r0, [pc, #48]	; (800af5c <prvInitialiseTaskLists+0x6c>)
 800af2a:	f7fe fdd7 	bl	8009adc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800af2e:	480c      	ldr	r0, [pc, #48]	; (800af60 <prvInitialiseTaskLists+0x70>)
 800af30:	f7fe fdd4 	bl	8009adc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800af34:	480b      	ldr	r0, [pc, #44]	; (800af64 <prvInitialiseTaskLists+0x74>)
 800af36:	f7fe fdd1 	bl	8009adc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800af3a:	4b0b      	ldr	r3, [pc, #44]	; (800af68 <prvInitialiseTaskLists+0x78>)
 800af3c:	4a05      	ldr	r2, [pc, #20]	; (800af54 <prvInitialiseTaskLists+0x64>)
 800af3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800af40:	4b0a      	ldr	r3, [pc, #40]	; (800af6c <prvInitialiseTaskLists+0x7c>)
 800af42:	4a05      	ldr	r2, [pc, #20]	; (800af58 <prvInitialiseTaskLists+0x68>)
 800af44:	601a      	str	r2, [r3, #0]
}
 800af46:	bf00      	nop
 800af48:	3708      	adds	r7, #8
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	2000089c 	.word	0x2000089c
 800af54:	20000928 	.word	0x20000928
 800af58:	2000093c 	.word	0x2000093c
 800af5c:	20000958 	.word	0x20000958
 800af60:	2000096c 	.word	0x2000096c
 800af64:	20000984 	.word	0x20000984
 800af68:	20000950 	.word	0x20000950
 800af6c:	20000954 	.word	0x20000954

0800af70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af76:	e019      	b.n	800afac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800af78:	f000 fab4 	bl	800b4e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af7c:	4b10      	ldr	r3, [pc, #64]	; (800afc0 <prvCheckTasksWaitingTermination+0x50>)
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	68db      	ldr	r3, [r3, #12]
 800af82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	3304      	adds	r3, #4
 800af88:	4618      	mov	r0, r3
 800af8a:	f7fe fe31 	bl	8009bf0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800af8e:	4b0d      	ldr	r3, [pc, #52]	; (800afc4 <prvCheckTasksWaitingTermination+0x54>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	3b01      	subs	r3, #1
 800af94:	4a0b      	ldr	r2, [pc, #44]	; (800afc4 <prvCheckTasksWaitingTermination+0x54>)
 800af96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800af98:	4b0b      	ldr	r3, [pc, #44]	; (800afc8 <prvCheckTasksWaitingTermination+0x58>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	3b01      	subs	r3, #1
 800af9e:	4a0a      	ldr	r2, [pc, #40]	; (800afc8 <prvCheckTasksWaitingTermination+0x58>)
 800afa0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800afa2:	f000 facf 	bl	800b544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f810 	bl	800afcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afac:	4b06      	ldr	r3, [pc, #24]	; (800afc8 <prvCheckTasksWaitingTermination+0x58>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1e1      	bne.n	800af78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800afb4:	bf00      	nop
 800afb6:	bf00      	nop
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	2000096c 	.word	0x2000096c
 800afc4:	20000998 	.word	0x20000998
 800afc8:	20000980 	.word	0x20000980

0800afcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	334c      	adds	r3, #76	; 0x4c
 800afd8:	4618      	mov	r0, r3
 800afda:	f000 fde3 	bl	800bba4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d108      	bne.n	800affa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afec:	4618      	mov	r0, r3
 800afee:	f000 fc27 	bl	800b840 <vPortFree>
				vPortFree( pxTCB );
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fc24 	bl	800b840 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aff8:	e018      	b.n	800b02c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b000:	2b01      	cmp	r3, #1
 800b002:	d103      	bne.n	800b00c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 fc1b 	bl	800b840 <vPortFree>
	}
 800b00a:	e00f      	b.n	800b02c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b012:	2b02      	cmp	r3, #2
 800b014:	d00a      	beq.n	800b02c <prvDeleteTCB+0x60>
	__asm volatile
 800b016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01a:	f383 8811 	msr	BASEPRI, r3
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	f3bf 8f4f 	dsb	sy
 800b026:	60fb      	str	r3, [r7, #12]
}
 800b028:	bf00      	nop
 800b02a:	e7fe      	b.n	800b02a <prvDeleteTCB+0x5e>
	}
 800b02c:	bf00      	nop
 800b02e:	3710      	adds	r7, #16
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b03a:	4b0c      	ldr	r3, [pc, #48]	; (800b06c <prvResetNextTaskUnblockTime+0x38>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d104      	bne.n	800b04e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b044:	4b0a      	ldr	r3, [pc, #40]	; (800b070 <prvResetNextTaskUnblockTime+0x3c>)
 800b046:	f04f 32ff 	mov.w	r2, #4294967295
 800b04a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b04c:	e008      	b.n	800b060 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b04e:	4b07      	ldr	r3, [pc, #28]	; (800b06c <prvResetNextTaskUnblockTime+0x38>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	4a04      	ldr	r2, [pc, #16]	; (800b070 <prvResetNextTaskUnblockTime+0x3c>)
 800b05e:	6013      	str	r3, [r2, #0]
}
 800b060:	bf00      	nop
 800b062:	370c      	adds	r7, #12
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr
 800b06c:	20000950 	.word	0x20000950
 800b070:	200009b8 	.word	0x200009b8

0800b074 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b074:	b480      	push	{r7}
 800b076:	b083      	sub	sp, #12
 800b078:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b07a:	4b0b      	ldr	r3, [pc, #44]	; (800b0a8 <xTaskGetSchedulerState+0x34>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d102      	bne.n	800b088 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b082:	2301      	movs	r3, #1
 800b084:	607b      	str	r3, [r7, #4]
 800b086:	e008      	b.n	800b09a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b088:	4b08      	ldr	r3, [pc, #32]	; (800b0ac <xTaskGetSchedulerState+0x38>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d102      	bne.n	800b096 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b090:	2302      	movs	r3, #2
 800b092:	607b      	str	r3, [r7, #4]
 800b094:	e001      	b.n	800b09a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b096:	2300      	movs	r3, #0
 800b098:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b09a:	687b      	ldr	r3, [r7, #4]
	}
 800b09c:	4618      	mov	r0, r3
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr
 800b0a8:	200009a4 	.word	0x200009a4
 800b0ac:	200009c0 	.word	0x200009c0

0800b0b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b086      	sub	sp, #24
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d06e      	beq.n	800b1a4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b0c6:	4b3a      	ldr	r3, [pc, #232]	; (800b1b0 <xTaskPriorityDisinherit+0x100>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	693a      	ldr	r2, [r7, #16]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d00a      	beq.n	800b0e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d4:	f383 8811 	msr	BASEPRI, r3
 800b0d8:	f3bf 8f6f 	isb	sy
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	60fb      	str	r3, [r7, #12]
}
 800b0e2:	bf00      	nop
 800b0e4:	e7fe      	b.n	800b0e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d10a      	bne.n	800b104 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	60bb      	str	r3, [r7, #8]
}
 800b100:	bf00      	nop
 800b102:	e7fe      	b.n	800b102 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b108:	1e5a      	subs	r2, r3, #1
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b116:	429a      	cmp	r2, r3
 800b118:	d044      	beq.n	800b1a4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d140      	bne.n	800b1a4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	3304      	adds	r3, #4
 800b126:	4618      	mov	r0, r3
 800b128:	f7fe fd62 	bl	8009bf0 <uxListRemove>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d115      	bne.n	800b15e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b136:	491f      	ldr	r1, [pc, #124]	; (800b1b4 <xTaskPriorityDisinherit+0x104>)
 800b138:	4613      	mov	r3, r2
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	4413      	add	r3, r2
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	440b      	add	r3, r1
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d10a      	bne.n	800b15e <xTaskPriorityDisinherit+0xae>
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b14c:	2201      	movs	r2, #1
 800b14e:	fa02 f303 	lsl.w	r3, r2, r3
 800b152:	43da      	mvns	r2, r3
 800b154:	4b18      	ldr	r3, [pc, #96]	; (800b1b8 <xTaskPriorityDisinherit+0x108>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4013      	ands	r3, r2
 800b15a:	4a17      	ldr	r2, [pc, #92]	; (800b1b8 <xTaskPriorityDisinherit+0x108>)
 800b15c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b16a:	f1c3 0207 	rsb	r2, r3, #7
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b176:	2201      	movs	r2, #1
 800b178:	409a      	lsls	r2, r3
 800b17a:	4b0f      	ldr	r3, [pc, #60]	; (800b1b8 <xTaskPriorityDisinherit+0x108>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4313      	orrs	r3, r2
 800b180:	4a0d      	ldr	r2, [pc, #52]	; (800b1b8 <xTaskPriorityDisinherit+0x108>)
 800b182:	6013      	str	r3, [r2, #0]
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b188:	4613      	mov	r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	4413      	add	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	4a08      	ldr	r2, [pc, #32]	; (800b1b4 <xTaskPriorityDisinherit+0x104>)
 800b192:	441a      	add	r2, r3
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	3304      	adds	r3, #4
 800b198:	4619      	mov	r1, r3
 800b19a:	4610      	mov	r0, r2
 800b19c:	f7fe fccb 	bl	8009b36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b1a4:	697b      	ldr	r3, [r7, #20]
	}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3718      	adds	r7, #24
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	20000898 	.word	0x20000898
 800b1b4:	2000089c 	.word	0x2000089c
 800b1b8:	200009a0 	.word	0x200009a0

0800b1bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b1c6:	4b29      	ldr	r3, [pc, #164]	; (800b26c <prvAddCurrentTaskToDelayedList+0xb0>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1cc:	4b28      	ldr	r3, [pc, #160]	; (800b270 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	3304      	adds	r3, #4
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7fe fd0c 	bl	8009bf0 <uxListRemove>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10b      	bne.n	800b1f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b1de:	4b24      	ldr	r3, [pc, #144]	; (800b270 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ea:	43da      	mvns	r2, r3
 800b1ec:	4b21      	ldr	r3, [pc, #132]	; (800b274 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	4a20      	ldr	r2, [pc, #128]	; (800b274 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b1f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1fc:	d10a      	bne.n	800b214 <prvAddCurrentTaskToDelayedList+0x58>
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d007      	beq.n	800b214 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b204:	4b1a      	ldr	r3, [pc, #104]	; (800b270 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	3304      	adds	r3, #4
 800b20a:	4619      	mov	r1, r3
 800b20c:	481a      	ldr	r0, [pc, #104]	; (800b278 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b20e:	f7fe fc92 	bl	8009b36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b212:	e026      	b.n	800b262 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4413      	add	r3, r2
 800b21a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b21c:	4b14      	ldr	r3, [pc, #80]	; (800b270 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68ba      	ldr	r2, [r7, #8]
 800b222:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b224:	68ba      	ldr	r2, [r7, #8]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d209      	bcs.n	800b240 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b22c:	4b13      	ldr	r3, [pc, #76]	; (800b27c <prvAddCurrentTaskToDelayedList+0xc0>)
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	4b0f      	ldr	r3, [pc, #60]	; (800b270 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	3304      	adds	r3, #4
 800b236:	4619      	mov	r1, r3
 800b238:	4610      	mov	r0, r2
 800b23a:	f7fe fca0 	bl	8009b7e <vListInsert>
}
 800b23e:	e010      	b.n	800b262 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b240:	4b0f      	ldr	r3, [pc, #60]	; (800b280 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	4b0a      	ldr	r3, [pc, #40]	; (800b270 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	3304      	adds	r3, #4
 800b24a:	4619      	mov	r1, r3
 800b24c:	4610      	mov	r0, r2
 800b24e:	f7fe fc96 	bl	8009b7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b252:	4b0c      	ldr	r3, [pc, #48]	; (800b284 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	68ba      	ldr	r2, [r7, #8]
 800b258:	429a      	cmp	r2, r3
 800b25a:	d202      	bcs.n	800b262 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b25c:	4a09      	ldr	r2, [pc, #36]	; (800b284 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	6013      	str	r3, [r2, #0]
}
 800b262:	bf00      	nop
 800b264:	3710      	adds	r7, #16
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	2000099c 	.word	0x2000099c
 800b270:	20000898 	.word	0x20000898
 800b274:	200009a0 	.word	0x200009a0
 800b278:	20000984 	.word	0x20000984
 800b27c:	20000954 	.word	0x20000954
 800b280:	20000950 	.word	0x20000950
 800b284:	200009b8 	.word	0x200009b8

0800b288 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	3b04      	subs	r3, #4
 800b298:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b2a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	3b04      	subs	r3, #4
 800b2a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	f023 0201 	bic.w	r2, r3, #1
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	3b04      	subs	r3, #4
 800b2b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b2b8:	4a0c      	ldr	r2, [pc, #48]	; (800b2ec <pxPortInitialiseStack+0x64>)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	3b14      	subs	r3, #20
 800b2c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	3b04      	subs	r3, #4
 800b2ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f06f 0202 	mvn.w	r2, #2
 800b2d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	3b20      	subs	r3, #32
 800b2dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b2de:	68fb      	ldr	r3, [r7, #12]
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3714      	adds	r7, #20
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr
 800b2ec:	0800b2f1 	.word	0x0800b2f1

0800b2f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b085      	sub	sp, #20
 800b2f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b2fa:	4b12      	ldr	r3, [pc, #72]	; (800b344 <prvTaskExitError+0x54>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b302:	d00a      	beq.n	800b31a <prvTaskExitError+0x2a>
	__asm volatile
 800b304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b308:	f383 8811 	msr	BASEPRI, r3
 800b30c:	f3bf 8f6f 	isb	sy
 800b310:	f3bf 8f4f 	dsb	sy
 800b314:	60fb      	str	r3, [r7, #12]
}
 800b316:	bf00      	nop
 800b318:	e7fe      	b.n	800b318 <prvTaskExitError+0x28>
	__asm volatile
 800b31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31e:	f383 8811 	msr	BASEPRI, r3
 800b322:	f3bf 8f6f 	isb	sy
 800b326:	f3bf 8f4f 	dsb	sy
 800b32a:	60bb      	str	r3, [r7, #8]
}
 800b32c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b32e:	bf00      	nop
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d0fc      	beq.n	800b330 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b336:	bf00      	nop
 800b338:	bf00      	nop
 800b33a:	3714      	adds	r7, #20
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr
 800b344:	2000004c 	.word	0x2000004c
	...

0800b350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b350:	4b07      	ldr	r3, [pc, #28]	; (800b370 <pxCurrentTCBConst2>)
 800b352:	6819      	ldr	r1, [r3, #0]
 800b354:	6808      	ldr	r0, [r1, #0]
 800b356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b35a:	f380 8809 	msr	PSP, r0
 800b35e:	f3bf 8f6f 	isb	sy
 800b362:	f04f 0000 	mov.w	r0, #0
 800b366:	f380 8811 	msr	BASEPRI, r0
 800b36a:	4770      	bx	lr
 800b36c:	f3af 8000 	nop.w

0800b370 <pxCurrentTCBConst2>:
 800b370:	20000898 	.word	0x20000898
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b374:	bf00      	nop
 800b376:	bf00      	nop

0800b378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b378:	4808      	ldr	r0, [pc, #32]	; (800b39c <prvPortStartFirstTask+0x24>)
 800b37a:	6800      	ldr	r0, [r0, #0]
 800b37c:	6800      	ldr	r0, [r0, #0]
 800b37e:	f380 8808 	msr	MSP, r0
 800b382:	f04f 0000 	mov.w	r0, #0
 800b386:	f380 8814 	msr	CONTROL, r0
 800b38a:	b662      	cpsie	i
 800b38c:	b661      	cpsie	f
 800b38e:	f3bf 8f4f 	dsb	sy
 800b392:	f3bf 8f6f 	isb	sy
 800b396:	df00      	svc	0
 800b398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b39a:	bf00      	nop
 800b39c:	e000ed08 	.word	0xe000ed08

0800b3a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b086      	sub	sp, #24
 800b3a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b3a6:	4b46      	ldr	r3, [pc, #280]	; (800b4c0 <xPortStartScheduler+0x120>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a46      	ldr	r2, [pc, #280]	; (800b4c4 <xPortStartScheduler+0x124>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d10a      	bne.n	800b3c6 <xPortStartScheduler+0x26>
	__asm volatile
 800b3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b4:	f383 8811 	msr	BASEPRI, r3
 800b3b8:	f3bf 8f6f 	isb	sy
 800b3bc:	f3bf 8f4f 	dsb	sy
 800b3c0:	613b      	str	r3, [r7, #16]
}
 800b3c2:	bf00      	nop
 800b3c4:	e7fe      	b.n	800b3c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b3c6:	4b3e      	ldr	r3, [pc, #248]	; (800b4c0 <xPortStartScheduler+0x120>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a3f      	ldr	r2, [pc, #252]	; (800b4c8 <xPortStartScheduler+0x128>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d10a      	bne.n	800b3e6 <xPortStartScheduler+0x46>
	__asm volatile
 800b3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d4:	f383 8811 	msr	BASEPRI, r3
 800b3d8:	f3bf 8f6f 	isb	sy
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	60fb      	str	r3, [r7, #12]
}
 800b3e2:	bf00      	nop
 800b3e4:	e7fe      	b.n	800b3e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b3e6:	4b39      	ldr	r3, [pc, #228]	; (800b4cc <xPortStartScheduler+0x12c>)
 800b3e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	22ff      	movs	r2, #255	; 0xff
 800b3f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b400:	78fb      	ldrb	r3, [r7, #3]
 800b402:	b2db      	uxtb	r3, r3
 800b404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b408:	b2da      	uxtb	r2, r3
 800b40a:	4b31      	ldr	r3, [pc, #196]	; (800b4d0 <xPortStartScheduler+0x130>)
 800b40c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b40e:	4b31      	ldr	r3, [pc, #196]	; (800b4d4 <xPortStartScheduler+0x134>)
 800b410:	2207      	movs	r2, #7
 800b412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b414:	e009      	b.n	800b42a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b416:	4b2f      	ldr	r3, [pc, #188]	; (800b4d4 <xPortStartScheduler+0x134>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	3b01      	subs	r3, #1
 800b41c:	4a2d      	ldr	r2, [pc, #180]	; (800b4d4 <xPortStartScheduler+0x134>)
 800b41e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b420:	78fb      	ldrb	r3, [r7, #3]
 800b422:	b2db      	uxtb	r3, r3
 800b424:	005b      	lsls	r3, r3, #1
 800b426:	b2db      	uxtb	r3, r3
 800b428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b42a:	78fb      	ldrb	r3, [r7, #3]
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b432:	2b80      	cmp	r3, #128	; 0x80
 800b434:	d0ef      	beq.n	800b416 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b436:	4b27      	ldr	r3, [pc, #156]	; (800b4d4 <xPortStartScheduler+0x134>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f1c3 0307 	rsb	r3, r3, #7
 800b43e:	2b04      	cmp	r3, #4
 800b440:	d00a      	beq.n	800b458 <xPortStartScheduler+0xb8>
	__asm volatile
 800b442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b446:	f383 8811 	msr	BASEPRI, r3
 800b44a:	f3bf 8f6f 	isb	sy
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	60bb      	str	r3, [r7, #8]
}
 800b454:	bf00      	nop
 800b456:	e7fe      	b.n	800b456 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b458:	4b1e      	ldr	r3, [pc, #120]	; (800b4d4 <xPortStartScheduler+0x134>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	021b      	lsls	r3, r3, #8
 800b45e:	4a1d      	ldr	r2, [pc, #116]	; (800b4d4 <xPortStartScheduler+0x134>)
 800b460:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b462:	4b1c      	ldr	r3, [pc, #112]	; (800b4d4 <xPortStartScheduler+0x134>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b46a:	4a1a      	ldr	r2, [pc, #104]	; (800b4d4 <xPortStartScheduler+0x134>)
 800b46c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	b2da      	uxtb	r2, r3
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b476:	4b18      	ldr	r3, [pc, #96]	; (800b4d8 <xPortStartScheduler+0x138>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a17      	ldr	r2, [pc, #92]	; (800b4d8 <xPortStartScheduler+0x138>)
 800b47c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b482:	4b15      	ldr	r3, [pc, #84]	; (800b4d8 <xPortStartScheduler+0x138>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a14      	ldr	r2, [pc, #80]	; (800b4d8 <xPortStartScheduler+0x138>)
 800b488:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b48c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b48e:	f000 f8dd 	bl	800b64c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b492:	4b12      	ldr	r3, [pc, #72]	; (800b4dc <xPortStartScheduler+0x13c>)
 800b494:	2200      	movs	r2, #0
 800b496:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b498:	f000 f8fc 	bl	800b694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b49c:	4b10      	ldr	r3, [pc, #64]	; (800b4e0 <xPortStartScheduler+0x140>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a0f      	ldr	r2, [pc, #60]	; (800b4e0 <xPortStartScheduler+0x140>)
 800b4a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b4a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b4a8:	f7ff ff66 	bl	800b378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b4ac:	f7ff fb9c 	bl	800abe8 <vTaskSwitchContext>
	prvTaskExitError();
 800b4b0:	f7ff ff1e 	bl	800b2f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b4b4:	2300      	movs	r3, #0
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3718      	adds	r7, #24
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	e000ed00 	.word	0xe000ed00
 800b4c4:	410fc271 	.word	0x410fc271
 800b4c8:	410fc270 	.word	0x410fc270
 800b4cc:	e000e400 	.word	0xe000e400
 800b4d0:	200009c4 	.word	0x200009c4
 800b4d4:	200009c8 	.word	0x200009c8
 800b4d8:	e000ed20 	.word	0xe000ed20
 800b4dc:	2000004c 	.word	0x2000004c
 800b4e0:	e000ef34 	.word	0xe000ef34

0800b4e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
	__asm volatile
 800b4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ee:	f383 8811 	msr	BASEPRI, r3
 800b4f2:	f3bf 8f6f 	isb	sy
 800b4f6:	f3bf 8f4f 	dsb	sy
 800b4fa:	607b      	str	r3, [r7, #4]
}
 800b4fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b4fe:	4b0f      	ldr	r3, [pc, #60]	; (800b53c <vPortEnterCritical+0x58>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	3301      	adds	r3, #1
 800b504:	4a0d      	ldr	r2, [pc, #52]	; (800b53c <vPortEnterCritical+0x58>)
 800b506:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b508:	4b0c      	ldr	r3, [pc, #48]	; (800b53c <vPortEnterCritical+0x58>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d10f      	bne.n	800b530 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b510:	4b0b      	ldr	r3, [pc, #44]	; (800b540 <vPortEnterCritical+0x5c>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	b2db      	uxtb	r3, r3
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00a      	beq.n	800b530 <vPortEnterCritical+0x4c>
	__asm volatile
 800b51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51e:	f383 8811 	msr	BASEPRI, r3
 800b522:	f3bf 8f6f 	isb	sy
 800b526:	f3bf 8f4f 	dsb	sy
 800b52a:	603b      	str	r3, [r7, #0]
}
 800b52c:	bf00      	nop
 800b52e:	e7fe      	b.n	800b52e <vPortEnterCritical+0x4a>
	}
}
 800b530:	bf00      	nop
 800b532:	370c      	adds	r7, #12
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr
 800b53c:	2000004c 	.word	0x2000004c
 800b540:	e000ed04 	.word	0xe000ed04

0800b544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b54a:	4b12      	ldr	r3, [pc, #72]	; (800b594 <vPortExitCritical+0x50>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d10a      	bne.n	800b568 <vPortExitCritical+0x24>
	__asm volatile
 800b552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b556:	f383 8811 	msr	BASEPRI, r3
 800b55a:	f3bf 8f6f 	isb	sy
 800b55e:	f3bf 8f4f 	dsb	sy
 800b562:	607b      	str	r3, [r7, #4]
}
 800b564:	bf00      	nop
 800b566:	e7fe      	b.n	800b566 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b568:	4b0a      	ldr	r3, [pc, #40]	; (800b594 <vPortExitCritical+0x50>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	3b01      	subs	r3, #1
 800b56e:	4a09      	ldr	r2, [pc, #36]	; (800b594 <vPortExitCritical+0x50>)
 800b570:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b572:	4b08      	ldr	r3, [pc, #32]	; (800b594 <vPortExitCritical+0x50>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d105      	bne.n	800b586 <vPortExitCritical+0x42>
 800b57a:	2300      	movs	r3, #0
 800b57c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	f383 8811 	msr	BASEPRI, r3
}
 800b584:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b586:	bf00      	nop
 800b588:	370c      	adds	r7, #12
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr
 800b592:	bf00      	nop
 800b594:	2000004c 	.word	0x2000004c
	...

0800b5a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b5a0:	f3ef 8009 	mrs	r0, PSP
 800b5a4:	f3bf 8f6f 	isb	sy
 800b5a8:	4b15      	ldr	r3, [pc, #84]	; (800b600 <pxCurrentTCBConst>)
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	f01e 0f10 	tst.w	lr, #16
 800b5b0:	bf08      	it	eq
 800b5b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b5b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ba:	6010      	str	r0, [r2, #0]
 800b5bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b5c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b5c4:	f380 8811 	msr	BASEPRI, r0
 800b5c8:	f3bf 8f4f 	dsb	sy
 800b5cc:	f3bf 8f6f 	isb	sy
 800b5d0:	f7ff fb0a 	bl	800abe8 <vTaskSwitchContext>
 800b5d4:	f04f 0000 	mov.w	r0, #0
 800b5d8:	f380 8811 	msr	BASEPRI, r0
 800b5dc:	bc09      	pop	{r0, r3}
 800b5de:	6819      	ldr	r1, [r3, #0]
 800b5e0:	6808      	ldr	r0, [r1, #0]
 800b5e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e6:	f01e 0f10 	tst.w	lr, #16
 800b5ea:	bf08      	it	eq
 800b5ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b5f0:	f380 8809 	msr	PSP, r0
 800b5f4:	f3bf 8f6f 	isb	sy
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop
 800b5fc:	f3af 8000 	nop.w

0800b600 <pxCurrentTCBConst>:
 800b600:	20000898 	.word	0x20000898
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b604:	bf00      	nop
 800b606:	bf00      	nop

0800b608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
	__asm volatile
 800b60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b612:	f383 8811 	msr	BASEPRI, r3
 800b616:	f3bf 8f6f 	isb	sy
 800b61a:	f3bf 8f4f 	dsb	sy
 800b61e:	607b      	str	r3, [r7, #4]
}
 800b620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b622:	f7ff fa29 	bl	800aa78 <xTaskIncrementTick>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d003      	beq.n	800b634 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b62c:	4b06      	ldr	r3, [pc, #24]	; (800b648 <SysTick_Handler+0x40>)
 800b62e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b632:	601a      	str	r2, [r3, #0]
 800b634:	2300      	movs	r3, #0
 800b636:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	f383 8811 	msr	BASEPRI, r3
}
 800b63e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b640:	bf00      	nop
 800b642:	3708      	adds	r7, #8
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	e000ed04 	.word	0xe000ed04

0800b64c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b64c:	b480      	push	{r7}
 800b64e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b650:	4b0b      	ldr	r3, [pc, #44]	; (800b680 <vPortSetupTimerInterrupt+0x34>)
 800b652:	2200      	movs	r2, #0
 800b654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b656:	4b0b      	ldr	r3, [pc, #44]	; (800b684 <vPortSetupTimerInterrupt+0x38>)
 800b658:	2200      	movs	r2, #0
 800b65a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b65c:	4b0a      	ldr	r3, [pc, #40]	; (800b688 <vPortSetupTimerInterrupt+0x3c>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a0a      	ldr	r2, [pc, #40]	; (800b68c <vPortSetupTimerInterrupt+0x40>)
 800b662:	fba2 2303 	umull	r2, r3, r2, r3
 800b666:	099b      	lsrs	r3, r3, #6
 800b668:	4a09      	ldr	r2, [pc, #36]	; (800b690 <vPortSetupTimerInterrupt+0x44>)
 800b66a:	3b01      	subs	r3, #1
 800b66c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b66e:	4b04      	ldr	r3, [pc, #16]	; (800b680 <vPortSetupTimerInterrupt+0x34>)
 800b670:	2207      	movs	r2, #7
 800b672:	601a      	str	r2, [r3, #0]
}
 800b674:	bf00      	nop
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr
 800b67e:	bf00      	nop
 800b680:	e000e010 	.word	0xe000e010
 800b684:	e000e018 	.word	0xe000e018
 800b688:	20000040 	.word	0x20000040
 800b68c:	10624dd3 	.word	0x10624dd3
 800b690:	e000e014 	.word	0xe000e014

0800b694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b6a4 <vPortEnableVFP+0x10>
 800b698:	6801      	ldr	r1, [r0, #0]
 800b69a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b69e:	6001      	str	r1, [r0, #0]
 800b6a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b6a2:	bf00      	nop
 800b6a4:	e000ed88 	.word	0xe000ed88

0800b6a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b08a      	sub	sp, #40	; 0x28
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b6b4:	f7ff f926 	bl	800a904 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b6b8:	4b5b      	ldr	r3, [pc, #364]	; (800b828 <pvPortMalloc+0x180>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d101      	bne.n	800b6c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b6c0:	f000 f920 	bl	800b904 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b6c4:	4b59      	ldr	r3, [pc, #356]	; (800b82c <pvPortMalloc+0x184>)
 800b6c6:	681a      	ldr	r2, [r3, #0]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4013      	ands	r3, r2
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	f040 8093 	bne.w	800b7f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d01d      	beq.n	800b714 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b6d8:	2208      	movs	r2, #8
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4413      	add	r3, r2
 800b6de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f003 0307 	and.w	r3, r3, #7
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d014      	beq.n	800b714 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f023 0307 	bic.w	r3, r3, #7
 800b6f0:	3308      	adds	r3, #8
 800b6f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f003 0307 	and.w	r3, r3, #7
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00a      	beq.n	800b714 <pvPortMalloc+0x6c>
	__asm volatile
 800b6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b702:	f383 8811 	msr	BASEPRI, r3
 800b706:	f3bf 8f6f 	isb	sy
 800b70a:	f3bf 8f4f 	dsb	sy
 800b70e:	617b      	str	r3, [r7, #20]
}
 800b710:	bf00      	nop
 800b712:	e7fe      	b.n	800b712 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d06e      	beq.n	800b7f8 <pvPortMalloc+0x150>
 800b71a:	4b45      	ldr	r3, [pc, #276]	; (800b830 <pvPortMalloc+0x188>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	429a      	cmp	r2, r3
 800b722:	d869      	bhi.n	800b7f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b724:	4b43      	ldr	r3, [pc, #268]	; (800b834 <pvPortMalloc+0x18c>)
 800b726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b728:	4b42      	ldr	r3, [pc, #264]	; (800b834 <pvPortMalloc+0x18c>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b72e:	e004      	b.n	800b73a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	429a      	cmp	r2, r3
 800b742:	d903      	bls.n	800b74c <pvPortMalloc+0xa4>
 800b744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1f1      	bne.n	800b730 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b74c:	4b36      	ldr	r3, [pc, #216]	; (800b828 <pvPortMalloc+0x180>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b752:	429a      	cmp	r2, r3
 800b754:	d050      	beq.n	800b7f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b756:	6a3b      	ldr	r3, [r7, #32]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2208      	movs	r2, #8
 800b75c:	4413      	add	r3, r2
 800b75e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	6a3b      	ldr	r3, [r7, #32]
 800b766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76a:	685a      	ldr	r2, [r3, #4]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	1ad2      	subs	r2, r2, r3
 800b770:	2308      	movs	r3, #8
 800b772:	005b      	lsls	r3, r3, #1
 800b774:	429a      	cmp	r2, r3
 800b776:	d91f      	bls.n	800b7b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	4413      	add	r3, r2
 800b77e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	f003 0307 	and.w	r3, r3, #7
 800b786:	2b00      	cmp	r3, #0
 800b788:	d00a      	beq.n	800b7a0 <pvPortMalloc+0xf8>
	__asm volatile
 800b78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78e:	f383 8811 	msr	BASEPRI, r3
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	f3bf 8f4f 	dsb	sy
 800b79a:	613b      	str	r3, [r7, #16]
}
 800b79c:	bf00      	nop
 800b79e:	e7fe      	b.n	800b79e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a2:	685a      	ldr	r2, [r3, #4]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	1ad2      	subs	r2, r2, r3
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b7b2:	69b8      	ldr	r0, [r7, #24]
 800b7b4:	f000 f908 	bl	800b9c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b7b8:	4b1d      	ldr	r3, [pc, #116]	; (800b830 <pvPortMalloc+0x188>)
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	1ad3      	subs	r3, r2, r3
 800b7c2:	4a1b      	ldr	r2, [pc, #108]	; (800b830 <pvPortMalloc+0x188>)
 800b7c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b7c6:	4b1a      	ldr	r3, [pc, #104]	; (800b830 <pvPortMalloc+0x188>)
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	4b1b      	ldr	r3, [pc, #108]	; (800b838 <pvPortMalloc+0x190>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d203      	bcs.n	800b7da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b7d2:	4b17      	ldr	r3, [pc, #92]	; (800b830 <pvPortMalloc+0x188>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a18      	ldr	r2, [pc, #96]	; (800b838 <pvPortMalloc+0x190>)
 800b7d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7dc:	685a      	ldr	r2, [r3, #4]
 800b7de:	4b13      	ldr	r3, [pc, #76]	; (800b82c <pvPortMalloc+0x184>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	431a      	orrs	r2, r3
 800b7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b7ee:	4b13      	ldr	r3, [pc, #76]	; (800b83c <pvPortMalloc+0x194>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	4a11      	ldr	r2, [pc, #68]	; (800b83c <pvPortMalloc+0x194>)
 800b7f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b7f8:	f7ff f892 	bl	800a920 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7fc:	69fb      	ldr	r3, [r7, #28]
 800b7fe:	f003 0307 	and.w	r3, r3, #7
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00a      	beq.n	800b81c <pvPortMalloc+0x174>
	__asm volatile
 800b806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80a:	f383 8811 	msr	BASEPRI, r3
 800b80e:	f3bf 8f6f 	isb	sy
 800b812:	f3bf 8f4f 	dsb	sy
 800b816:	60fb      	str	r3, [r7, #12]
}
 800b818:	bf00      	nop
 800b81a:	e7fe      	b.n	800b81a <pvPortMalloc+0x172>
	return pvReturn;
 800b81c:	69fb      	ldr	r3, [r7, #28]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3728      	adds	r7, #40	; 0x28
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	200103d4 	.word	0x200103d4
 800b82c:	200103e8 	.word	0x200103e8
 800b830:	200103d8 	.word	0x200103d8
 800b834:	200103cc 	.word	0x200103cc
 800b838:	200103dc 	.word	0x200103dc
 800b83c:	200103e0 	.word	0x200103e0

0800b840 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d04d      	beq.n	800b8ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b852:	2308      	movs	r3, #8
 800b854:	425b      	negs	r3, r3
 800b856:	697a      	ldr	r2, [r7, #20]
 800b858:	4413      	add	r3, r2
 800b85a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	685a      	ldr	r2, [r3, #4]
 800b864:	4b24      	ldr	r3, [pc, #144]	; (800b8f8 <vPortFree+0xb8>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	4013      	ands	r3, r2
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d10a      	bne.n	800b884 <vPortFree+0x44>
	__asm volatile
 800b86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	60fb      	str	r3, [r7, #12]
}
 800b880:	bf00      	nop
 800b882:	e7fe      	b.n	800b882 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00a      	beq.n	800b8a2 <vPortFree+0x62>
	__asm volatile
 800b88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b890:	f383 8811 	msr	BASEPRI, r3
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	60bb      	str	r3, [r7, #8]
}
 800b89e:	bf00      	nop
 800b8a0:	e7fe      	b.n	800b8a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	685a      	ldr	r2, [r3, #4]
 800b8a6:	4b14      	ldr	r3, [pc, #80]	; (800b8f8 <vPortFree+0xb8>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4013      	ands	r3, r2
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d01e      	beq.n	800b8ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d11a      	bne.n	800b8ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	685a      	ldr	r2, [r3, #4]
 800b8bc:	4b0e      	ldr	r3, [pc, #56]	; (800b8f8 <vPortFree+0xb8>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	43db      	mvns	r3, r3
 800b8c2:	401a      	ands	r2, r3
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b8c8:	f7ff f81c 	bl	800a904 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	685a      	ldr	r2, [r3, #4]
 800b8d0:	4b0a      	ldr	r3, [pc, #40]	; (800b8fc <vPortFree+0xbc>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	4a09      	ldr	r2, [pc, #36]	; (800b8fc <vPortFree+0xbc>)
 800b8d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b8da:	6938      	ldr	r0, [r7, #16]
 800b8dc:	f000 f874 	bl	800b9c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b8e0:	4b07      	ldr	r3, [pc, #28]	; (800b900 <vPortFree+0xc0>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	4a06      	ldr	r2, [pc, #24]	; (800b900 <vPortFree+0xc0>)
 800b8e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b8ea:	f7ff f819 	bl	800a920 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b8ee:	bf00      	nop
 800b8f0:	3718      	adds	r7, #24
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	200103e8 	.word	0x200103e8
 800b8fc:	200103d8 	.word	0x200103d8
 800b900:	200103e4 	.word	0x200103e4

0800b904 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b90a:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 800b90e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b910:	4b27      	ldr	r3, [pc, #156]	; (800b9b0 <prvHeapInit+0xac>)
 800b912:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f003 0307 	and.w	r3, r3, #7
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00c      	beq.n	800b938 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	3307      	adds	r3, #7
 800b922:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f023 0307 	bic.w	r3, r3, #7
 800b92a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b92c:	68ba      	ldr	r2, [r7, #8]
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	1ad3      	subs	r3, r2, r3
 800b932:	4a1f      	ldr	r2, [pc, #124]	; (800b9b0 <prvHeapInit+0xac>)
 800b934:	4413      	add	r3, r2
 800b936:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b93c:	4a1d      	ldr	r2, [pc, #116]	; (800b9b4 <prvHeapInit+0xb0>)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b942:	4b1c      	ldr	r3, [pc, #112]	; (800b9b4 <prvHeapInit+0xb0>)
 800b944:	2200      	movs	r2, #0
 800b946:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	68ba      	ldr	r2, [r7, #8]
 800b94c:	4413      	add	r3, r2
 800b94e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b950:	2208      	movs	r2, #8
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	1a9b      	subs	r3, r3, r2
 800b956:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	f023 0307 	bic.w	r3, r3, #7
 800b95e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	4a15      	ldr	r2, [pc, #84]	; (800b9b8 <prvHeapInit+0xb4>)
 800b964:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b966:	4b14      	ldr	r3, [pc, #80]	; (800b9b8 <prvHeapInit+0xb4>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	2200      	movs	r2, #0
 800b96c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b96e:	4b12      	ldr	r3, [pc, #72]	; (800b9b8 <prvHeapInit+0xb4>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2200      	movs	r2, #0
 800b974:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	1ad2      	subs	r2, r2, r3
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b984:	4b0c      	ldr	r3, [pc, #48]	; (800b9b8 <prvHeapInit+0xb4>)
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	4a0a      	ldr	r2, [pc, #40]	; (800b9bc <prvHeapInit+0xb8>)
 800b992:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	4a09      	ldr	r2, [pc, #36]	; (800b9c0 <prvHeapInit+0xbc>)
 800b99a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b99c:	4b09      	ldr	r3, [pc, #36]	; (800b9c4 <prvHeapInit+0xc0>)
 800b99e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b9a2:	601a      	str	r2, [r3, #0]
}
 800b9a4:	bf00      	nop
 800b9a6:	3714      	adds	r7, #20
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr
 800b9b0:	200009cc 	.word	0x200009cc
 800b9b4:	200103cc 	.word	0x200103cc
 800b9b8:	200103d4 	.word	0x200103d4
 800b9bc:	200103dc 	.word	0x200103dc
 800b9c0:	200103d8 	.word	0x200103d8
 800b9c4:	200103e8 	.word	0x200103e8

0800b9c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b9d0:	4b28      	ldr	r3, [pc, #160]	; (800ba74 <prvInsertBlockIntoFreeList+0xac>)
 800b9d2:	60fb      	str	r3, [r7, #12]
 800b9d4:	e002      	b.n	800b9dc <prvInsertBlockIntoFreeList+0x14>
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	60fb      	str	r3, [r7, #12]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	687a      	ldr	r2, [r7, #4]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d8f7      	bhi.n	800b9d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	68ba      	ldr	r2, [r7, #8]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d108      	bne.n	800ba0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	685a      	ldr	r2, [r3, #4]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	441a      	add	r2, r3
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	68ba      	ldr	r2, [r7, #8]
 800ba14:	441a      	add	r2, r3
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d118      	bne.n	800ba50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	4b15      	ldr	r3, [pc, #84]	; (800ba78 <prvInsertBlockIntoFreeList+0xb0>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d00d      	beq.n	800ba46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	685a      	ldr	r2, [r3, #4]
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	441a      	add	r2, r3
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	601a      	str	r2, [r3, #0]
 800ba44:	e008      	b.n	800ba58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ba46:	4b0c      	ldr	r3, [pc, #48]	; (800ba78 <prvInsertBlockIntoFreeList+0xb0>)
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	601a      	str	r2, [r3, #0]
 800ba4e:	e003      	b.n	800ba58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d002      	beq.n	800ba66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba66:	bf00      	nop
 800ba68:	3714      	adds	r7, #20
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	200103cc 	.word	0x200103cc
 800ba78:	200103d4 	.word	0x200103d4

0800ba7c <__libc_init_array>:
 800ba7c:	b570      	push	{r4, r5, r6, lr}
 800ba7e:	4d0d      	ldr	r5, [pc, #52]	; (800bab4 <__libc_init_array+0x38>)
 800ba80:	4c0d      	ldr	r4, [pc, #52]	; (800bab8 <__libc_init_array+0x3c>)
 800ba82:	1b64      	subs	r4, r4, r5
 800ba84:	10a4      	asrs	r4, r4, #2
 800ba86:	2600      	movs	r6, #0
 800ba88:	42a6      	cmp	r6, r4
 800ba8a:	d109      	bne.n	800baa0 <__libc_init_array+0x24>
 800ba8c:	4d0b      	ldr	r5, [pc, #44]	; (800babc <__libc_init_array+0x40>)
 800ba8e:	4c0c      	ldr	r4, [pc, #48]	; (800bac0 <__libc_init_array+0x44>)
 800ba90:	f000 f8f0 	bl	800bc74 <_init>
 800ba94:	1b64      	subs	r4, r4, r5
 800ba96:	10a4      	asrs	r4, r4, #2
 800ba98:	2600      	movs	r6, #0
 800ba9a:	42a6      	cmp	r6, r4
 800ba9c:	d105      	bne.n	800baaa <__libc_init_array+0x2e>
 800ba9e:	bd70      	pop	{r4, r5, r6, pc}
 800baa0:	f855 3b04 	ldr.w	r3, [r5], #4
 800baa4:	4798      	blx	r3
 800baa6:	3601      	adds	r6, #1
 800baa8:	e7ee      	b.n	800ba88 <__libc_init_array+0xc>
 800baaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800baae:	4798      	blx	r3
 800bab0:	3601      	adds	r6, #1
 800bab2:	e7f2      	b.n	800ba9a <__libc_init_array+0x1e>
 800bab4:	0800c040 	.word	0x0800c040
 800bab8:	0800c040 	.word	0x0800c040
 800babc:	0800c040 	.word	0x0800c040
 800bac0:	0800c044 	.word	0x0800c044

0800bac4 <memcpy>:
 800bac4:	440a      	add	r2, r1
 800bac6:	4291      	cmp	r1, r2
 800bac8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bacc:	d100      	bne.n	800bad0 <memcpy+0xc>
 800bace:	4770      	bx	lr
 800bad0:	b510      	push	{r4, lr}
 800bad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bad6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bada:	4291      	cmp	r1, r2
 800badc:	d1f9      	bne.n	800bad2 <memcpy+0xe>
 800bade:	bd10      	pop	{r4, pc}

0800bae0 <memset>:
 800bae0:	4402      	add	r2, r0
 800bae2:	4603      	mov	r3, r0
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d100      	bne.n	800baea <memset+0xa>
 800bae8:	4770      	bx	lr
 800baea:	f803 1b01 	strb.w	r1, [r3], #1
 800baee:	e7f9      	b.n	800bae4 <memset+0x4>

0800baf0 <_free_r>:
 800baf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800baf2:	2900      	cmp	r1, #0
 800baf4:	d044      	beq.n	800bb80 <_free_r+0x90>
 800baf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bafa:	9001      	str	r0, [sp, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	f1a1 0404 	sub.w	r4, r1, #4
 800bb02:	bfb8      	it	lt
 800bb04:	18e4      	addlt	r4, r4, r3
 800bb06:	f000 f8a9 	bl	800bc5c <__malloc_lock>
 800bb0a:	4a1e      	ldr	r2, [pc, #120]	; (800bb84 <_free_r+0x94>)
 800bb0c:	9801      	ldr	r0, [sp, #4]
 800bb0e:	6813      	ldr	r3, [r2, #0]
 800bb10:	b933      	cbnz	r3, 800bb20 <_free_r+0x30>
 800bb12:	6063      	str	r3, [r4, #4]
 800bb14:	6014      	str	r4, [r2, #0]
 800bb16:	b003      	add	sp, #12
 800bb18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb1c:	f000 b8a4 	b.w	800bc68 <__malloc_unlock>
 800bb20:	42a3      	cmp	r3, r4
 800bb22:	d908      	bls.n	800bb36 <_free_r+0x46>
 800bb24:	6825      	ldr	r5, [r4, #0]
 800bb26:	1961      	adds	r1, r4, r5
 800bb28:	428b      	cmp	r3, r1
 800bb2a:	bf01      	itttt	eq
 800bb2c:	6819      	ldreq	r1, [r3, #0]
 800bb2e:	685b      	ldreq	r3, [r3, #4]
 800bb30:	1949      	addeq	r1, r1, r5
 800bb32:	6021      	streq	r1, [r4, #0]
 800bb34:	e7ed      	b.n	800bb12 <_free_r+0x22>
 800bb36:	461a      	mov	r2, r3
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	b10b      	cbz	r3, 800bb40 <_free_r+0x50>
 800bb3c:	42a3      	cmp	r3, r4
 800bb3e:	d9fa      	bls.n	800bb36 <_free_r+0x46>
 800bb40:	6811      	ldr	r1, [r2, #0]
 800bb42:	1855      	adds	r5, r2, r1
 800bb44:	42a5      	cmp	r5, r4
 800bb46:	d10b      	bne.n	800bb60 <_free_r+0x70>
 800bb48:	6824      	ldr	r4, [r4, #0]
 800bb4a:	4421      	add	r1, r4
 800bb4c:	1854      	adds	r4, r2, r1
 800bb4e:	42a3      	cmp	r3, r4
 800bb50:	6011      	str	r1, [r2, #0]
 800bb52:	d1e0      	bne.n	800bb16 <_free_r+0x26>
 800bb54:	681c      	ldr	r4, [r3, #0]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	6053      	str	r3, [r2, #4]
 800bb5a:	4421      	add	r1, r4
 800bb5c:	6011      	str	r1, [r2, #0]
 800bb5e:	e7da      	b.n	800bb16 <_free_r+0x26>
 800bb60:	d902      	bls.n	800bb68 <_free_r+0x78>
 800bb62:	230c      	movs	r3, #12
 800bb64:	6003      	str	r3, [r0, #0]
 800bb66:	e7d6      	b.n	800bb16 <_free_r+0x26>
 800bb68:	6825      	ldr	r5, [r4, #0]
 800bb6a:	1961      	adds	r1, r4, r5
 800bb6c:	428b      	cmp	r3, r1
 800bb6e:	bf04      	itt	eq
 800bb70:	6819      	ldreq	r1, [r3, #0]
 800bb72:	685b      	ldreq	r3, [r3, #4]
 800bb74:	6063      	str	r3, [r4, #4]
 800bb76:	bf04      	itt	eq
 800bb78:	1949      	addeq	r1, r1, r5
 800bb7a:	6021      	streq	r1, [r4, #0]
 800bb7c:	6054      	str	r4, [r2, #4]
 800bb7e:	e7ca      	b.n	800bb16 <_free_r+0x26>
 800bb80:	b003      	add	sp, #12
 800bb82:	bd30      	pop	{r4, r5, pc}
 800bb84:	200103ec 	.word	0x200103ec

0800bb88 <cleanup_glue>:
 800bb88:	b538      	push	{r3, r4, r5, lr}
 800bb8a:	460c      	mov	r4, r1
 800bb8c:	6809      	ldr	r1, [r1, #0]
 800bb8e:	4605      	mov	r5, r0
 800bb90:	b109      	cbz	r1, 800bb96 <cleanup_glue+0xe>
 800bb92:	f7ff fff9 	bl	800bb88 <cleanup_glue>
 800bb96:	4621      	mov	r1, r4
 800bb98:	4628      	mov	r0, r5
 800bb9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb9e:	f7ff bfa7 	b.w	800baf0 <_free_r>
	...

0800bba4 <_reclaim_reent>:
 800bba4:	4b2c      	ldr	r3, [pc, #176]	; (800bc58 <_reclaim_reent+0xb4>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	4283      	cmp	r3, r0
 800bbaa:	b570      	push	{r4, r5, r6, lr}
 800bbac:	4604      	mov	r4, r0
 800bbae:	d051      	beq.n	800bc54 <_reclaim_reent+0xb0>
 800bbb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bbb2:	b143      	cbz	r3, 800bbc6 <_reclaim_reent+0x22>
 800bbb4:	68db      	ldr	r3, [r3, #12]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d14a      	bne.n	800bc50 <_reclaim_reent+0xac>
 800bbba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbbc:	6819      	ldr	r1, [r3, #0]
 800bbbe:	b111      	cbz	r1, 800bbc6 <_reclaim_reent+0x22>
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f7ff ff95 	bl	800baf0 <_free_r>
 800bbc6:	6961      	ldr	r1, [r4, #20]
 800bbc8:	b111      	cbz	r1, 800bbd0 <_reclaim_reent+0x2c>
 800bbca:	4620      	mov	r0, r4
 800bbcc:	f7ff ff90 	bl	800baf0 <_free_r>
 800bbd0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bbd2:	b111      	cbz	r1, 800bbda <_reclaim_reent+0x36>
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	f7ff ff8b 	bl	800baf0 <_free_r>
 800bbda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bbdc:	b111      	cbz	r1, 800bbe4 <_reclaim_reent+0x40>
 800bbde:	4620      	mov	r0, r4
 800bbe0:	f7ff ff86 	bl	800baf0 <_free_r>
 800bbe4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bbe6:	b111      	cbz	r1, 800bbee <_reclaim_reent+0x4a>
 800bbe8:	4620      	mov	r0, r4
 800bbea:	f7ff ff81 	bl	800baf0 <_free_r>
 800bbee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bbf0:	b111      	cbz	r1, 800bbf8 <_reclaim_reent+0x54>
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	f7ff ff7c 	bl	800baf0 <_free_r>
 800bbf8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bbfa:	b111      	cbz	r1, 800bc02 <_reclaim_reent+0x5e>
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	f7ff ff77 	bl	800baf0 <_free_r>
 800bc02:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bc04:	b111      	cbz	r1, 800bc0c <_reclaim_reent+0x68>
 800bc06:	4620      	mov	r0, r4
 800bc08:	f7ff ff72 	bl	800baf0 <_free_r>
 800bc0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc0e:	b111      	cbz	r1, 800bc16 <_reclaim_reent+0x72>
 800bc10:	4620      	mov	r0, r4
 800bc12:	f7ff ff6d 	bl	800baf0 <_free_r>
 800bc16:	69a3      	ldr	r3, [r4, #24]
 800bc18:	b1e3      	cbz	r3, 800bc54 <_reclaim_reent+0xb0>
 800bc1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	4798      	blx	r3
 800bc20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bc22:	b1b9      	cbz	r1, 800bc54 <_reclaim_reent+0xb0>
 800bc24:	4620      	mov	r0, r4
 800bc26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc2a:	f7ff bfad 	b.w	800bb88 <cleanup_glue>
 800bc2e:	5949      	ldr	r1, [r1, r5]
 800bc30:	b941      	cbnz	r1, 800bc44 <_reclaim_reent+0xa0>
 800bc32:	3504      	adds	r5, #4
 800bc34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc36:	2d80      	cmp	r5, #128	; 0x80
 800bc38:	68d9      	ldr	r1, [r3, #12]
 800bc3a:	d1f8      	bne.n	800bc2e <_reclaim_reent+0x8a>
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	f7ff ff57 	bl	800baf0 <_free_r>
 800bc42:	e7ba      	b.n	800bbba <_reclaim_reent+0x16>
 800bc44:	680e      	ldr	r6, [r1, #0]
 800bc46:	4620      	mov	r0, r4
 800bc48:	f7ff ff52 	bl	800baf0 <_free_r>
 800bc4c:	4631      	mov	r1, r6
 800bc4e:	e7ef      	b.n	800bc30 <_reclaim_reent+0x8c>
 800bc50:	2500      	movs	r5, #0
 800bc52:	e7ef      	b.n	800bc34 <_reclaim_reent+0x90>
 800bc54:	bd70      	pop	{r4, r5, r6, pc}
 800bc56:	bf00      	nop
 800bc58:	20000050 	.word	0x20000050

0800bc5c <__malloc_lock>:
 800bc5c:	4801      	ldr	r0, [pc, #4]	; (800bc64 <__malloc_lock+0x8>)
 800bc5e:	f7f7 b8c4 	b.w	8002dea <__retarget_lock_acquire_recursive>
 800bc62:	bf00      	nop
 800bc64:	20000888 	.word	0x20000888

0800bc68 <__malloc_unlock>:
 800bc68:	4801      	ldr	r0, [pc, #4]	; (800bc70 <__malloc_unlock+0x8>)
 800bc6a:	f7f7 b8d2 	b.w	8002e12 <__retarget_lock_release_recursive>
 800bc6e:	bf00      	nop
 800bc70:	20000888 	.word	0x20000888

0800bc74 <_init>:
 800bc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc76:	bf00      	nop
 800bc78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc7a:	bc08      	pop	{r3}
 800bc7c:	469e      	mov	lr, r3
 800bc7e:	4770      	bx	lr

0800bc80 <_fini>:
 800bc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc82:	bf00      	nop
 800bc84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc86:	bc08      	pop	{r3}
 800bc88:	469e      	mov	lr, r3
 800bc8a:	4770      	bx	lr
