
AlgoFetBms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  0800c5bc  0800c5bc  0001c5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c908  0800c908  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c908  0800c908  0001c908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c910  0800c910  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c910  0800c910  0001c910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c914  0800c914  0001c914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800c918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001038c  200000b4  0800c9cc  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20010440  0800c9cc  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002243d  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005500  00000000  00000000  00042521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  00047a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ab0  00000000  00000000  00049720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ee4  00000000  00000000  0004b1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028c6c  00000000  00000000  000730b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2883  00000000  00000000  0009bd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018e5a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a1c  00000000  00000000  0018e5f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c5a4 	.word	0x0800c5a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800c5a4 	.word	0x0800c5a4

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b974 	b.w	8000d4c <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	468e      	mov	lr, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14d      	bne.n	8000b26 <__udivmoddi4+0xaa>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4694      	mov	ip, r2
 8000a8e:	d969      	bls.n	8000b64 <__udivmoddi4+0xe8>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b152      	cbz	r2, 8000aac <__udivmoddi4+0x30>
 8000a96:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9a:	f1c2 0120 	rsb	r1, r2, #32
 8000a9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000aa2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aaa:	4094      	lsls	r4, r2
 8000aac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab0:	0c21      	lsrs	r1, r4, #16
 8000ab2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ab6:	fa1f f78c 	uxth.w	r7, ip
 8000aba:	fb08 e316 	mls	r3, r8, r6, lr
 8000abe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ac2:	fb06 f107 	mul.w	r1, r6, r7
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x64>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ad2:	f080 811f 	bcs.w	8000d14 <__udivmoddi4+0x298>
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	f240 811c 	bls.w	8000d14 <__udivmoddi4+0x298>
 8000adc:	3e02      	subs	r6, #2
 8000ade:	4463      	add	r3, ip
 8000ae0:	1a5b      	subs	r3, r3, r1
 8000ae2:	b2a4      	uxth	r4, r4
 8000ae4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af0:	fb00 f707 	mul.w	r7, r0, r7
 8000af4:	42a7      	cmp	r7, r4
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x92>
 8000af8:	eb1c 0404 	adds.w	r4, ip, r4
 8000afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b00:	f080 810a 	bcs.w	8000d18 <__udivmoddi4+0x29c>
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	f240 8107 	bls.w	8000d18 <__udivmoddi4+0x29c>
 8000b0a:	4464      	add	r4, ip
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b12:	1be4      	subs	r4, r4, r7
 8000b14:	2600      	movs	r6, #0
 8000b16:	b11d      	cbz	r5, 8000b20 <__udivmoddi4+0xa4>
 8000b18:	40d4      	lsrs	r4, r2
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b20:	4631      	mov	r1, r6
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d909      	bls.n	8000b3e <__udivmoddi4+0xc2>
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	f000 80ef 	beq.w	8000d0e <__udivmoddi4+0x292>
 8000b30:	2600      	movs	r6, #0
 8000b32:	e9c5 0100 	strd	r0, r1, [r5]
 8000b36:	4630      	mov	r0, r6
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	fab3 f683 	clz	r6, r3
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d14a      	bne.n	8000bdc <__udivmoddi4+0x160>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xd4>
 8000b4a:	4282      	cmp	r2, r0
 8000b4c:	f200 80f9 	bhi.w	8000d42 <__udivmoddi4+0x2c6>
 8000b50:	1a84      	subs	r4, r0, r2
 8000b52:	eb61 0303 	sbc.w	r3, r1, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	469e      	mov	lr, r3
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d0e0      	beq.n	8000b20 <__udivmoddi4+0xa4>
 8000b5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b62:	e7dd      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000b64:	b902      	cbnz	r2, 8000b68 <__udivmoddi4+0xec>
 8000b66:	deff      	udf	#255	; 0xff
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	f040 8092 	bne.w	8000c96 <__udivmoddi4+0x21a>
 8000b72:	eba1 010c 	sub.w	r1, r1, ip
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2601      	movs	r6, #1
 8000b80:	0c20      	lsrs	r0, r4, #16
 8000b82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b86:	fb07 1113 	mls	r1, r7, r3, r1
 8000b8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b8e:	fb0e f003 	mul.w	r0, lr, r3
 8000b92:	4288      	cmp	r0, r1
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x12c>
 8000b96:	eb1c 0101 	adds.w	r1, ip, r1
 8000b9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x12a>
 8000ba0:	4288      	cmp	r0, r1
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2c0>
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	1a09      	subs	r1, r1, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bb4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x156>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x154>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2ca>
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bda:	e79c      	b.n	8000b16 <__udivmoddi4+0x9a>
 8000bdc:	f1c6 0720 	rsb	r7, r6, #32
 8000be0:	40b3      	lsls	r3, r6
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa20 f407 	lsr.w	r4, r0, r7
 8000bee:	fa01 f306 	lsl.w	r3, r1, r6
 8000bf2:	431c      	orrs	r4, r3
 8000bf4:	40f9      	lsrs	r1, r7
 8000bf6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000bfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c02:	0c20      	lsrs	r0, r4, #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fb09 1118 	mls	r1, r9, r8, r1
 8000c0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c10:	fb08 f00e 	mul.w	r0, r8, lr
 8000c14:	4288      	cmp	r0, r1
 8000c16:	fa02 f206 	lsl.w	r2, r2, r6
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b8>
 8000c1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2bc>
 8000c28:	4288      	cmp	r0, r1
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2bc>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4461      	add	r1, ip
 8000c34:	1a09      	subs	r1, r1, r0
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c48:	458e      	cmp	lr, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1e2>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2b4>
 8000c56:	458e      	cmp	lr, r1
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2b4>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c62:	fba0 9402 	umull	r9, r4, r0, r2
 8000c66:	eba1 010e 	sub.w	r1, r1, lr
 8000c6a:	42a1      	cmp	r1, r4
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46a6      	mov	lr, r4
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x2a4>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x2a0>
 8000c74:	b15d      	cbz	r5, 8000c8e <__udivmoddi4+0x212>
 8000c76:	ebb3 0208 	subs.w	r2, r3, r8
 8000c7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c82:	fa22 f306 	lsr.w	r3, r2, r6
 8000c86:	40f1      	lsrs	r1, r6
 8000c88:	431f      	orrs	r7, r3
 8000c8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c8e:	2600      	movs	r6, #0
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	f1c2 0320 	rsb	r3, r2, #32
 8000c9a:	40d8      	lsrs	r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	4301      	orrs	r1, r0
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cb4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb8:	0c0b      	lsrs	r3, r1, #16
 8000cba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x260>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd4:	429e      	cmp	r6, r3
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	b289      	uxth	r1, r1
 8000ce0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ce4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cec:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x28a>
 8000cf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000d02:	3e02      	subs	r6, #2
 8000d04:	4461      	add	r1, ip
 8000d06:	1ac9      	subs	r1, r1, r3
 8000d08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0x104>
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e705      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e3      	b.n	8000ae0 <__udivmoddi4+0x64>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6f8      	b.n	8000b0e <__udivmoddi4+0x92>
 8000d1c:	454b      	cmp	r3, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f8>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f8>
 8000d2c:	4646      	mov	r6, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x28a>
 8000d30:	4620      	mov	r0, r4
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1e2>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x260>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b8>
 8000d3c:	3b02      	subs	r3, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x12c>
 8000d42:	4630      	mov	r0, r6
 8000d44:	e709      	b.n	8000b5a <__udivmoddi4+0xde>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x156>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <Unpack_FCU_STATE_REQUEST_can_codegen>:

#endif // CAN_CODEGEN_USE_DIAG_MONITORS


uint32_t Unpack_FCU_STATE_REQUEST_can_codegen(FCU_STATE_REQUEST_t* _m, const uint8_t* _d, uint8_t dlc_)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	71fb      	strb	r3, [r7, #7]
  (void)dlc_;
  _m->FCU_StateRequest = (_d[0] & (0x07U));
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	701a      	strb	r2, [r3, #0]
  _m->mon1.frame_cnt++;

  FMon_FCU_STATE_REQUEST_can_codegen(&_m->mon1, FCU_STATE_REQUEST_CANID);
#endif // CAN_CODEGEN_USE_DIAG_MONITORS

  return FCU_STATE_REQUEST_CANID;
 8000d6c:	f240 1301 	movw	r3, #257	; 0x101
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <Pack_BAT_BMS_OvrVIEW_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_BMS_OvrVIEW_can_codegen(BAT_BMS_OvrVIEW_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_BMS_OvrVIEW_DLC) && (i < 8); cframe->Data[i++] = 0);
 8000d86:	2300      	movs	r3, #0
 8000d88:	73fb      	strb	r3, [r7, #15]
 8000d8a:	e007      	b.n	8000d9c <Pack_BAT_BMS_OvrVIEW_can_codegen+0x20>
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	73fa      	strb	r2, [r7, #15]
 8000d92:	461a      	mov	r2, r3
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	715a      	strb	r2, [r3, #5]
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d802      	bhi.n	8000da8 <Pack_BAT_BMS_OvrVIEW_can_codegen+0x2c>
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	2b07      	cmp	r3, #7
 8000da6:	d9f1      	bls.n	8000d8c <Pack_BAT_BMS_OvrVIEW_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_bms_StateReqSrc & (0xFFU));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	795a      	ldrb	r2, [r3, #5]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= (_m->BAT_bms_PackState & (0xFFU));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	799a      	ldrb	r2, [r3, #6]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	785b      	ldrb	r3, [r3, #1]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	719a      	strb	r2, [r3, #6]

  cframe->MsgId = BAT_BMS_OvrVIEW_CANID;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <Pack_BAT_BMS_OvrVIEW_can_codegen+0x6c>)
 8000dcc:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_BMS_OvrVIEW_DLC;
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_BMS_OvrVIEW_IDE;
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	735a      	strb	r2, [r3, #13]
  return BAT_BMS_OvrVIEW_CANID;
 8000dda:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <Pack_BAT_BMS_OvrVIEW_can_codegen+0x6c>)
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	001ff610 	.word	0x001ff610

08000dec <Pack_BAT_BMS_ExtTemp_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_BMS_ExtTemp_can_codegen(BAT_BMS_ExtTemp_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_BMS_ExtTemp_DLC) && (i < 8); cframe->Data[i++] = 0);
 8000df6:	2300      	movs	r3, #0
 8000df8:	73fb      	strb	r3, [r7, #15]
 8000dfa:	e007      	b.n	8000e0c <Pack_BAT_BMS_ExtTemp_can_codegen+0x20>
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	73fa      	strb	r2, [r7, #15]
 8000e02:	461a      	mov	r2, r3
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	2200      	movs	r2, #0
 8000e0a:	715a      	strb	r2, [r3, #5]
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	2b03      	cmp	r3, #3
 8000e10:	d802      	bhi.n	8000e18 <Pack_BAT_BMS_ExtTemp_can_codegen+0x2c>
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	2b07      	cmp	r3, #7
 8000e16:	d9f1      	bls.n	8000dfc <Pack_BAT_BMS_ExtTemp_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_bms_ext_temp1 & (0xFFU));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	795a      	ldrb	r2, [r3, #5]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4313      	orrs	r3, r2
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_bms_ext_temp1 >> 8) & (0xFFU));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	799a      	ldrb	r2, [r3, #6]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	0a1b      	lsrs	r3, r3, #8
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_bms_ext_temp2 & (0xFFU));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	79da      	ldrb	r2, [r3, #7]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	885b      	ldrh	r3, [r3, #2]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_bms_ext_temp2 >> 8) & (0xFFU));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	7a1a      	ldrb	r2, [r3, #8]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	885b      	ldrh	r3, [r3, #2]
 8000e5a:	0a1b      	lsrs	r3, r3, #8
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	721a      	strb	r2, [r3, #8]

  cframe->MsgId = BAT_BMS_ExtTemp_CANID;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <Pack_BAT_BMS_ExtTemp_can_codegen+0x9c>)
 8000e6c:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_BMS_ExtTemp_DLC;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2204      	movs	r2, #4
 8000e72:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_BMS_ExtTemp_IDE;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	2201      	movs	r2, #1
 8000e78:	735a      	strb	r2, [r3, #13]
  return BAT_BMS_ExtTemp_CANID;
 8000e7a:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <Pack_BAT_BMS_ExtTemp_can_codegen+0x9c>)
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	001ff611 	.word	0x001ff611

08000e8c <Pack_BAT_AFE_vBRICK_A_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_AFE_vBRICK_A_can_codegen(BAT_AFE_vBRICK_A_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_AFE_vBRICK_A_DLC) && (i < 8); cframe->Data[i++] = 0);
 8000e96:	2300      	movs	r3, #0
 8000e98:	73fb      	strb	r3, [r7, #15]
 8000e9a:	e007      	b.n	8000eac <Pack_BAT_AFE_vBRICK_A_can_codegen+0x20>
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	73fa      	strb	r2, [r7, #15]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	715a      	strb	r2, [r3, #5]
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	2b07      	cmp	r3, #7
 8000eb0:	d802      	bhi.n	8000eb8 <Pack_BAT_AFE_vBRICK_A_can_codegen+0x2c>
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	2b07      	cmp	r3, #7
 8000eb6:	d9f1      	bls.n	8000e9c <Pack_BAT_AFE_vBRICK_A_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_afe_vBrick01 & (0xFFU));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	795a      	ldrb	r2, [r3, #5]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_afe_vBrick01 >> 8) & (0xFFU));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	799a      	ldrb	r2, [r3, #6]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	0a1b      	lsrs	r3, r3, #8
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_afe_vBrick02 & (0xFFU));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	79da      	ldrb	r2, [r3, #7]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	885b      	ldrh	r3, [r3, #2]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	4313      	orrs	r3, r2
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_afe_vBrick02 >> 8) & (0xFFU));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	7a1a      	ldrb	r2, [r3, #8]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	885b      	ldrh	r3, [r3, #2]
 8000efa:	0a1b      	lsrs	r3, r3, #8
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	721a      	strb	r2, [r3, #8]
  cframe->Data[4] |= (_m->BAT_afe_vBrick03 & (0xFFU));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	7a5a      	ldrb	r2, [r3, #9]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	889b      	ldrh	r3, [r3, #4]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4313      	orrs	r3, r2
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	725a      	strb	r2, [r3, #9]
  cframe->Data[5] |= ((_m->BAT_afe_vBrick03 >> 8) & (0xFFU));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	7a9a      	ldrb	r2, [r3, #10]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	889b      	ldrh	r3, [r3, #4]
 8000f22:	0a1b      	lsrs	r3, r3, #8
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	729a      	strb	r2, [r3, #10]
  cframe->Data[6] |= (_m->BAT_afe_vBrick04 & (0xFFU));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	7ada      	ldrb	r2, [r3, #11]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	88db      	ldrh	r3, [r3, #6]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	72da      	strb	r2, [r3, #11]
  cframe->Data[7] |= ((_m->BAT_afe_vBrick04 >> 8) & (0xFFU));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	7b1a      	ldrb	r2, [r3, #12]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	88db      	ldrh	r3, [r3, #6]
 8000f4a:	0a1b      	lsrs	r3, r3, #8
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	731a      	strb	r2, [r3, #12]

  cframe->MsgId = BAT_AFE_vBRICK_A_CANID;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <Pack_BAT_AFE_vBRICK_A_can_codegen+0xec>)
 8000f5c:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_AFE_vBRICK_A_DLC;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	2208      	movs	r2, #8
 8000f62:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_AFE_vBRICK_A_IDE;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2201      	movs	r2, #1
 8000f68:	735a      	strb	r2, [r3, #13]
  return BAT_AFE_vBRICK_A_CANID;
 8000f6a:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <Pack_BAT_AFE_vBRICK_A_can_codegen+0xec>)
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	001ff710 	.word	0x001ff710

08000f7c <Pack_BAT_AFE_vBRICK_B_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_AFE_vBRICK_B_can_codegen(BAT_AFE_vBRICK_B_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_AFE_vBRICK_B_DLC) && (i < 8); cframe->Data[i++] = 0);
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	e007      	b.n	8000f9c <Pack_BAT_AFE_vBRICK_B_can_codegen+0x20>
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	1c5a      	adds	r2, r3, #1
 8000f90:	73fa      	strb	r2, [r7, #15]
 8000f92:	461a      	mov	r2, r3
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	2200      	movs	r2, #0
 8000f9a:	715a      	strb	r2, [r3, #5]
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	2b07      	cmp	r3, #7
 8000fa0:	d802      	bhi.n	8000fa8 <Pack_BAT_AFE_vBRICK_B_can_codegen+0x2c>
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	2b07      	cmp	r3, #7
 8000fa6:	d9f1      	bls.n	8000f8c <Pack_BAT_AFE_vBRICK_B_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_afe_vBrick05 & (0xFFU));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	795a      	ldrb	r2, [r3, #5]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_afe_vBrick05 >> 8) & (0xFFU));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	799a      	ldrb	r2, [r3, #6]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	0a1b      	lsrs	r3, r3, #8
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_afe_vBrick06 & (0xFFU));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	79da      	ldrb	r2, [r3, #7]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	885b      	ldrh	r3, [r3, #2]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_afe_vBrick06 >> 8) & (0xFFU));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	7a1a      	ldrb	r2, [r3, #8]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	885b      	ldrh	r3, [r3, #2]
 8000fea:	0a1b      	lsrs	r3, r3, #8
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	721a      	strb	r2, [r3, #8]
  cframe->Data[4] |= (_m->BAT_afe_vBrick07 & (0xFFU));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	7a5a      	ldrb	r2, [r3, #9]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	889b      	ldrh	r3, [r3, #4]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	b2da      	uxtb	r2, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	725a      	strb	r2, [r3, #9]
  cframe->Data[5] |= ((_m->BAT_afe_vBrick07 >> 8) & (0xFFU));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	7a9a      	ldrb	r2, [r3, #10]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	889b      	ldrh	r3, [r3, #4]
 8001012:	0a1b      	lsrs	r3, r3, #8
 8001014:	b29b      	uxth	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4313      	orrs	r3, r2
 800101a:	b2da      	uxtb	r2, r3
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	729a      	strb	r2, [r3, #10]
  cframe->Data[6] |= (_m->BAT_afe_vBrick08 & (0xFFU));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	7ada      	ldrb	r2, [r3, #11]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	88db      	ldrh	r3, [r3, #6]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b2da      	uxtb	r2, r3
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	72da      	strb	r2, [r3, #11]
  cframe->Data[7] |= ((_m->BAT_afe_vBrick08 >> 8) & (0xFFU));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	7b1a      	ldrb	r2, [r3, #12]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	88db      	ldrh	r3, [r3, #6]
 800103a:	0a1b      	lsrs	r3, r3, #8
 800103c:	b29b      	uxth	r3, r3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	4313      	orrs	r3, r2
 8001042:	b2da      	uxtb	r2, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	731a      	strb	r2, [r3, #12]

  cframe->MsgId = BAT_AFE_vBRICK_B_CANID;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	4a07      	ldr	r2, [pc, #28]	; (8001068 <Pack_BAT_AFE_vBRICK_B_can_codegen+0xec>)
 800104c:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_AFE_vBRICK_B_DLC;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	2208      	movs	r2, #8
 8001052:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_AFE_vBRICK_B_IDE;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	735a      	strb	r2, [r3, #13]
  return BAT_AFE_vBRICK_B_CANID;
 800105a:	4b03      	ldr	r3, [pc, #12]	; (8001068 <Pack_BAT_AFE_vBRICK_B_can_codegen+0xec>)
}
 800105c:	4618      	mov	r0, r3
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	001ff711 	.word	0x001ff711

0800106c <Pack_BAT_AFE_vBRICK_C_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_AFE_vBRICK_C_can_codegen(BAT_AFE_vBRICK_C_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_AFE_vBRICK_C_DLC) && (i < 8); cframe->Data[i++] = 0);
 8001076:	2300      	movs	r3, #0
 8001078:	73fb      	strb	r3, [r7, #15]
 800107a:	e007      	b.n	800108c <Pack_BAT_AFE_vBRICK_C_can_codegen+0x20>
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	73fa      	strb	r2, [r7, #15]
 8001082:	461a      	mov	r2, r3
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	4413      	add	r3, r2
 8001088:	2200      	movs	r2, #0
 800108a:	715a      	strb	r2, [r3, #5]
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	2b07      	cmp	r3, #7
 8001090:	d802      	bhi.n	8001098 <Pack_BAT_AFE_vBRICK_C_can_codegen+0x2c>
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	2b07      	cmp	r3, #7
 8001096:	d9f1      	bls.n	800107c <Pack_BAT_AFE_vBRICK_C_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_afe_vBrick09 & (0xFFU));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	795a      	ldrb	r2, [r3, #5]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_afe_vBrick09 >> 8) & (0xFFU));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	799a      	ldrb	r2, [r3, #6]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_afe_vBrick10 & (0xFFU));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	79da      	ldrb	r2, [r3, #7]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	885b      	ldrh	r3, [r3, #2]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_afe_vBrick10 >> 8) & (0xFFU));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	7a1a      	ldrb	r2, [r3, #8]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	885b      	ldrh	r3, [r3, #2]
 80010da:	0a1b      	lsrs	r3, r3, #8
 80010dc:	b29b      	uxth	r3, r3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	721a      	strb	r2, [r3, #8]
  cframe->Data[4] |= (_m->BAT_afe_vBrick11 & (0xFFU));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	7a5a      	ldrb	r2, [r3, #9]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	889b      	ldrh	r3, [r3, #4]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	725a      	strb	r2, [r3, #9]
  cframe->Data[5] |= ((_m->BAT_afe_vBrick11 >> 8) & (0xFFU));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	7a9a      	ldrb	r2, [r3, #10]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	889b      	ldrh	r3, [r3, #4]
 8001102:	0a1b      	lsrs	r3, r3, #8
 8001104:	b29b      	uxth	r3, r3
 8001106:	b2db      	uxtb	r3, r3
 8001108:	4313      	orrs	r3, r2
 800110a:	b2da      	uxtb	r2, r3
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	729a      	strb	r2, [r3, #10]
  cframe->Data[6] |= (_m->BAT_afe_vBrick12 & (0xFFU));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	7ada      	ldrb	r2, [r3, #11]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	88db      	ldrh	r3, [r3, #6]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4313      	orrs	r3, r2
 800111c:	b2da      	uxtb	r2, r3
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	72da      	strb	r2, [r3, #11]
  cframe->Data[7] |= ((_m->BAT_afe_vBrick12 >> 8) & (0xFFU));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	7b1a      	ldrb	r2, [r3, #12]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	88db      	ldrh	r3, [r3, #6]
 800112a:	0a1b      	lsrs	r3, r3, #8
 800112c:	b29b      	uxth	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	4313      	orrs	r3, r2
 8001132:	b2da      	uxtb	r2, r3
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	731a      	strb	r2, [r3, #12]

  cframe->MsgId = BAT_AFE_vBRICK_C_CANID;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	4a07      	ldr	r2, [pc, #28]	; (8001158 <Pack_BAT_AFE_vBRICK_C_can_codegen+0xec>)
 800113c:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_AFE_vBRICK_C_DLC;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	2208      	movs	r2, #8
 8001142:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_AFE_vBRICK_C_IDE;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	2201      	movs	r2, #1
 8001148:	735a      	strb	r2, [r3, #13]
  return BAT_AFE_vBRICK_C_CANID;
 800114a:	4b03      	ldr	r3, [pc, #12]	; (8001158 <Pack_BAT_AFE_vBRICK_C_can_codegen+0xec>)
}
 800114c:	4618      	mov	r0, r3
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	001ff712 	.word	0x001ff712

0800115c <Pack_BAT_AFE_vBRICK_D_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_AFE_vBRICK_D_can_codegen(BAT_AFE_vBRICK_D_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_AFE_vBRICK_D_DLC) && (i < 8); cframe->Data[i++] = 0);
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]
 800116a:	e007      	b.n	800117c <Pack_BAT_AFE_vBRICK_D_can_codegen+0x20>
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	73fa      	strb	r2, [r7, #15]
 8001172:	461a      	mov	r2, r3
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	4413      	add	r3, r2
 8001178:	2200      	movs	r2, #0
 800117a:	715a      	strb	r2, [r3, #5]
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	2b03      	cmp	r3, #3
 8001180:	d802      	bhi.n	8001188 <Pack_BAT_AFE_vBRICK_D_can_codegen+0x2c>
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	2b07      	cmp	r3, #7
 8001186:	d9f1      	bls.n	800116c <Pack_BAT_AFE_vBRICK_D_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_afe_vBrick13 & (0xFFU));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	795a      	ldrb	r2, [r3, #5]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	4313      	orrs	r3, r2
 8001194:	b2da      	uxtb	r2, r3
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_afe_vBrick13 >> 8) & (0xFFU));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	799a      	ldrb	r2, [r3, #6]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	0a1b      	lsrs	r3, r3, #8
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_afe_vBrick14 & (0xFFU));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	79da      	ldrb	r2, [r3, #7]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	885b      	ldrh	r3, [r3, #2]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_afe_vBrick14 >> 8) & (0xFFU));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	7a1a      	ldrb	r2, [r3, #8]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	885b      	ldrh	r3, [r3, #2]
 80011ca:	0a1b      	lsrs	r3, r3, #8
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	721a      	strb	r2, [r3, #8]

  cframe->MsgId = BAT_AFE_vBRICK_D_CANID;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <Pack_BAT_AFE_vBRICK_D_can_codegen+0x9c>)
 80011dc:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_AFE_vBRICK_D_DLC;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	2204      	movs	r2, #4
 80011e2:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_AFE_vBRICK_D_IDE;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2201      	movs	r2, #1
 80011e8:	735a      	strb	r2, [r3, #13]
  return BAT_AFE_vBRICK_D_CANID;
 80011ea:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <Pack_BAT_AFE_vBRICK_D_can_codegen+0x9c>)
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	001ff713 	.word	0x001ff713

080011fc <Pack_BAT_GAUGE_OvrVIEW_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_GAUGE_OvrVIEW_can_codegen(BAT_GAUGE_OvrVIEW_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_GAUGE_OvrVIEW_DLC) && (i < 8); cframe->Data[i++] = 0);
 8001206:	2300      	movs	r3, #0
 8001208:	73fb      	strb	r3, [r7, #15]
 800120a:	e007      	b.n	800121c <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x20>
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	73fa      	strb	r2, [r7, #15]
 8001212:	461a      	mov	r2, r3
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	4413      	add	r3, r2
 8001218:	2200      	movs	r2, #0
 800121a:	715a      	strb	r2, [r3, #5]
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	2b03      	cmp	r3, #3
 8001220:	d802      	bhi.n	8001228 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x2c>
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	2b07      	cmp	r3, #7
 8001226:	d9f1      	bls.n	800120c <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_gauge_SoC & (0xFFU));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	795a      	ldrb	r2, [r3, #5]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4313      	orrs	r3, r2
 8001232:	b2da      	uxtb	r2, r3
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= (_m->BAT_gauge_SoH & (0xFFU));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	799a      	ldrb	r2, [r3, #6]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	785b      	ldrb	r3, [r3, #1]
 8001240:	4313      	orrs	r3, r2
 8001242:	b2da      	uxtb	r2, r3
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_gauge_cycleCount & (0xFFU));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	79da      	ldrb	r2, [r3, #7]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	885b      	ldrh	r3, [r3, #2]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	4313      	orrs	r3, r2
 8001254:	b2da      	uxtb	r2, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_gauge_cycleCount >> 8) & (0xFFU));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	7a1a      	ldrb	r2, [r3, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	885b      	ldrh	r3, [r3, #2]
 8001262:	0a1b      	lsrs	r3, r3, #8
 8001264:	b29b      	uxth	r3, r3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	b2da      	uxtb	r2, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	721a      	strb	r2, [r3, #8]

  cframe->MsgId = BAT_GAUGE_OvrVIEW_CANID;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	4a07      	ldr	r2, [pc, #28]	; (8001290 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x94>)
 8001274:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_GAUGE_OvrVIEW_DLC;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	2204      	movs	r2, #4
 800127a:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_GAUGE_OvrVIEW_IDE;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	2201      	movs	r2, #1
 8001280:	735a      	strb	r2, [r3, #13]
  return BAT_GAUGE_OvrVIEW_CANID;
 8001282:	4b03      	ldr	r3, [pc, #12]	; (8001290 <Pack_BAT_GAUGE_OvrVIEW_can_codegen+0x94>)
}
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	001ff810 	.word	0x001ff810

08001294 <Pack_BAT_GAUGE_ViT_can_codegen>:
}

#ifdef CAN_CODEGEN_USE_CANSTRUCT

uint32_t Pack_BAT_GAUGE_ViT_can_codegen(BAT_GAUGE_ViT_t* _m, __CoderDbcCanFrame_t__* cframe)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint8_t i; for (i = 0; (i < BAT_GAUGE_ViT_DLC) && (i < 8); cframe->Data[i++] = 0);
 800129e:	2300      	movs	r3, #0
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	e007      	b.n	80012b4 <Pack_BAT_GAUGE_ViT_can_codegen+0x20>
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	73fa      	strb	r2, [r7, #15]
 80012aa:	461a      	mov	r2, r3
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	2200      	movs	r2, #0
 80012b2:	715a      	strb	r2, [r3, #5]
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d802      	bhi.n	80012c0 <Pack_BAT_GAUGE_ViT_can_codegen+0x2c>
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	2b07      	cmp	r3, #7
 80012be:	d9f1      	bls.n	80012a4 <Pack_BAT_GAUGE_ViT_can_codegen+0x10>

  cframe->Data[0] |= (_m->BAT_gauge_vPack & (0xFFU));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	795a      	ldrb	r2, [r3, #5]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4313      	orrs	r3, r2
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	715a      	strb	r2, [r3, #5]
  cframe->Data[1] |= ((_m->BAT_gauge_vPack >> 8) & (0xFFU));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	799a      	ldrb	r2, [r3, #6]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	0a1b      	lsrs	r3, r3, #8
 80012dc:	b29b      	uxth	r3, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	719a      	strb	r2, [r3, #6]
  cframe->Data[2] |= (_m->BAT_gauge_iPack & (0xFFU));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	79da      	ldrb	r2, [r3, #7]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	71da      	strb	r2, [r3, #7]
  cframe->Data[3] |= ((_m->BAT_gauge_iPack >> 8) & (0xFFU));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	7a1a      	ldrb	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001306:	121b      	asrs	r3, r3, #8
 8001308:	b21b      	sxth	r3, r3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b2da      	uxtb	r2, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	721a      	strb	r2, [r3, #8]
  cframe->Data[4] |= (_m->BAT_gauge_tPack & (0xFFU));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	7a5a      	ldrb	r2, [r3, #9]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	889b      	ldrh	r3, [r3, #4]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b2da      	uxtb	r2, r3
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	725a      	strb	r2, [r3, #9]
  cframe->Data[5] |= ((_m->BAT_gauge_tPack >> 8) & (0xFFU));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	7a9a      	ldrb	r2, [r3, #10]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	889b      	ldrh	r3, [r3, #4]
 800132e:	0a1b      	lsrs	r3, r3, #8
 8001330:	b29b      	uxth	r3, r3
 8001332:	b2db      	uxtb	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b2da      	uxtb	r2, r3
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	729a      	strb	r2, [r3, #10]

  cframe->MsgId = BAT_GAUGE_ViT_CANID;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	4a07      	ldr	r2, [pc, #28]	; (800135c <Pack_BAT_GAUGE_ViT_can_codegen+0xc8>)
 8001340:	601a      	str	r2, [r3, #0]
  cframe->DLC = BAT_GAUGE_ViT_DLC;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	2206      	movs	r2, #6
 8001346:	711a      	strb	r2, [r3, #4]
  cframe->IDE = BAT_GAUGE_ViT_IDE;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	2201      	movs	r2, #1
 800134c:	735a      	strb	r2, [r3, #13]
  return BAT_GAUGE_ViT_CANID;
 800134e:	4b03      	ldr	r3, [pc, #12]	; (800135c <Pack_BAT_GAUGE_ViT_can_codegen+0xc8>)
}
 8001350:	4618      	mov	r0, r3
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	001ff820 	.word	0x001ff820

08001360 <bq76952_init>:
extern int16_t bq76952_TS3config(void);
//------------------------------------------------------------------------------
// Static Functions definition

int16_t bq76952_init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
  int16_t ret_val = SYS_ERR;
 8001366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800136a:	80fb      	strh	r3, [r7, #6]
  do
  {
    TsBmsPower_cfg_t.power_cfg_reg = PowerConfig;
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <bq76952_init+0x7c>)
 800136e:	f249 2234 	movw	r2, #37428	; 0x9234
 8001372:	805a      	strh	r2, [r3, #2]
    TsBmsPower_cfg_t.reg_val = 0x2D80;
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <bq76952_init+0x7c>)
 8001376:	f44f 5236 	mov.w	r2, #11648	; 0x2d80
 800137a:	80da      	strh	r2, [r3, #6]
    TsBmsPower_cfg_t.len = 4;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <bq76952_init+0x7c>)
 800137e:	2204      	movs	r2, #4
 8001380:	701a      	strb	r2, [r3, #0]
    AFE_RAMwrite.vCellModecmd = 0x03C3;           //0x03C3 for 6S | 0x0303 for 4S
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <bq76952_init+0x80>)
 8001384:	f240 32c3 	movw	r2, #963	; 0x3c3
 8001388:	801a      	strh	r2, [r3, #0]
    AFE_RAMwrite.FETs_CONTROL = 0x0;
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <bq76952_init+0x80>)
 800138c:	2200      	movs	r2, #0
 800138e:	805a      	strh	r2, [r3, #2]
    AFE_RAMwrite.enabledProtectionsA = 0xBC;
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <bq76952_init+0x80>)
 8001392:	22bc      	movs	r2, #188	; 0xbc
 8001394:	809a      	strh	r2, [r3, #4]
    AFE_RAMwrite.enabledProtectionsB = 0xF7;      //(Also sets OTC, OTD and OTF as 1)
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <bq76952_init+0x80>)
 8001398:	22f7      	movs	r2, #247	; 0xf7
 800139a:	80da      	strh	r2, [r3, #6]
    AFE_RAMwrite.prechargeStartVoltage = 0x0A8C;  //2700mV
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <bq76952_init+0x80>)
 800139e:	f640 228c 	movw	r2, #2700	; 0xa8c
 80013a2:	811a      	strh	r2, [r3, #8]
    AFE_RAMwrite.prechargeStopVoltage = 0x0AF0;   //2800mV
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <bq76952_init+0x80>)
 80013a6:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80013aa:	815a      	strh	r2, [r3, #10]
    AFE_RAMwrite.TS3config = 0x07;                //Default for TS3: 0X07 | Default for TS1: 0x07
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <bq76952_init+0x80>)
 80013ae:	2207      	movs	r2, #7
 80013b0:	819a      	strh	r2, [r3, #12]

    bq76952_vCellMode();
 80013b2:	f000 f9bd 	bl	8001730 <bq76952_vCellMode>
    bq76952_FETs_Control();
 80013b6:	f000 f98b 	bl	80016d0 <bq76952_FETs_Control>
    bq76952_TS3config();
 80013ba:	f000 f9eb 	bl	8001794 <bq76952_TS3config>

        //bq76952_get_device_number(&device_number);
        //RESET #Resets the Bq769x2 Registers
        bq76952_AFE_reset();
 80013be:	f000 f927 	bl	8001610 <bq76952_AFE_reset>

        // Enter config update mode
        bq76952_set_config_update();
 80013c2:	f000 f971 	bl	80016a8 <bq76952_set_config_update>

        // TODO: Check if CFGUPDATE bit is SET

        //
        // Leave Reg1 and Reg2 mode in present state when entering deep-sleep state
        bq76952_set_powercfg(&TsBmsPower_cfg_t);
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <bq76952_init+0x7c>)
 80013c8:	f000 f939 	bl	800163e <bq76952_set_powercfg>
    //OCCThreshold --> 0x05				#Rsense is 1mohm. Unit is 2mV, so 10mV means a threshold of 10A
    //OCD1Threshold --> 0x0A			#Rsense is 1mohm. Unit is 2mV, so 20mV means a threshold of 20A
    //SCDThreshold --> 0x02				#40mV across 1mohm, i.e, 40A. Refer to TRM page 168
    //SCDDelay --> 0x03					#30us. Enabled with a delay of (value - 1) * 15 us; min value of 1
    //SCDLLatchLimit --> 0x01			#Only with load removal. Refer to TRM page 170
    ret_val = SYS_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	80fb      	strh	r3, [r7, #6]
  } while(false);

  return ret_val;
 80013d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200000d0 	.word	0x200000d0
 80013e0:	200000d8 	.word	0x200000d8

080013e4 <bq76952_FETs_SleepDisable>:

//------------------------------------------------------------------------------
// FET CONTROL COMMANDS
static int16_t bq76952_FETs_SleepDisable(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
  // Puts the FETs in performance mode
  int16_t ret_val = SYS_ERR;
 80013ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ee:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, SLEEP_DISABLE))
 80013f0:	219a      	movs	r1, #154	; 0x9a
 80013f2:	203e      	movs	r0, #62	; 0x3e
 80013f4:	f000 fafa 	bl	80019ec <bq76952_write_sub_cmd>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d102      	bne.n	8001404 <bq76952_FETs_SleepDisable+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	80fb      	strh	r3, [r7, #6]
 8001402:	e000      	b.n	8001406 <bq76952_FETs_SleepDisable+0x22>
      break;
 8001404:	bf00      	nop
  } while(false);
  return ret_val;
 8001406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <bq76952_FETs_enable>:
static int16_t bq76952_FETs_enable(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
  // Enables all the FETs to be controlled
  int16_t ret_val = SYS_ERR;
 8001418:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800141c:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, FET_ENABLE))
 800141e:	2122      	movs	r1, #34	; 0x22
 8001420:	203e      	movs	r0, #62	; 0x3e
 8001422:	f000 fae3 	bl	80019ec <bq76952_write_sub_cmd>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <bq76952_FETs_enable+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	80fb      	strh	r3, [r7, #6]
 8001430:	e000      	b.n	8001434 <bq76952_FETs_enable+0x22>
      break;
 8001432:	bf00      	nop
  } while(false);
  return ret_val;
 8001434:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <bq76952_allFETs_on>:
static int16_t bq76952_allFETs_on(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
  // Switches on all the FETs
  int16_t ret_val = SYS_ERR;
 8001446:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800144a:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, ALL_FETS_ON))
 800144c:	2196      	movs	r1, #150	; 0x96
 800144e:	203e      	movs	r0, #62	; 0x3e
 8001450:	f000 facc 	bl	80019ec <bq76952_write_sub_cmd>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <bq76952_allFETs_on+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	80fb      	strh	r3, [r7, #6]
 800145e:	e000      	b.n	8001462 <bq76952_allFETs_on+0x22>
      break;
 8001460:	bf00      	nop
  } while(false);
  return ret_val;
 8001462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <bq76952_allFETs_off>:
static int16_t bq76952_allFETs_off(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
  // Switches off all the FETs
  int16_t ret_val = SYS_ERR;
 8001474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001478:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, ALL_FETS_OFF))
 800147a:	2195      	movs	r1, #149	; 0x95
 800147c:	203e      	movs	r0, #62	; 0x3e
 800147e:	f000 fab5 	bl	80019ec <bq76952_write_sub_cmd>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <bq76952_allFETs_off+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	80fb      	strh	r3, [r7, #6]
 800148c:	e000      	b.n	8001490 <bq76952_allFETs_off+0x22>
      break;
 800148e:	bf00      	nop
  } while(false);
  return ret_val;
 8001490:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <bq76952_dischargeOFF>:
static int16_t bq76952_dischargeOFF(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
  //Disable DSG and PDSG FET drivers
  int16_t ret_val = SYS_ERR;
 80014a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a6:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, DSG_PDSG_OFF))
 80014a8:	2193      	movs	r1, #147	; 0x93
 80014aa:	203e      	movs	r0, #62	; 0x3e
 80014ac:	f000 fa9e 	bl	80019ec <bq76952_write_sub_cmd>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <bq76952_dischargeOFF+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	80fb      	strh	r3, [r7, #6]
 80014ba:	e000      	b.n	80014be <bq76952_dischargeOFF+0x22>
      break;
 80014bc:	bf00      	nop
  } while(false);
  return ret_val;
 80014be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <bq76952_chargeOFF>:
static int16_t bq76952_chargeOFF(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
  //Disable CHG and PCHG FET drivers
  int16_t ret_val = SYS_ERR;
 80014d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d4:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, CHG_PCHG_OFF))
 80014d6:	2194      	movs	r1, #148	; 0x94
 80014d8:	203e      	movs	r0, #62	; 0x3e
 80014da:	f000 fa87 	bl	80019ec <bq76952_write_sub_cmd>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <bq76952_chargeOFF+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	80fb      	strh	r3, [r7, #6]
 80014e8:	e000      	b.n	80014ec <bq76952_chargeOFF+0x22>
      break;
 80014ea:	bf00      	nop
  } while(false);
  return ret_val;
 80014ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <bq76952_FETs_ON>:


extern int16_t bq76952_FETs_ON(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
  //To switch on the FETs whenever required
  int8_t ret_val = SYS_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	71fb      	strb	r3, [r7, #7]
  do
  {
    if(SYS_OK!= bq76952_FETs_enable())
 8001502:	f7ff ff86 	bl	8001412 <bq76952_FETs_enable>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d112      	bne.n	8001532 <bq76952_FETs_ON+0x3a>
    {
      break;
    }
    HAL_Delay(50);
 800150c:	2032      	movs	r0, #50	; 0x32
 800150e:	f002 f973 	bl	80037f8 <HAL_Delay>
    if(SYS_OK!= bq76952_FETs_SleepDisable())
 8001512:	f7ff ff67 	bl	80013e4 <bq76952_FETs_SleepDisable>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d10c      	bne.n	8001536 <bq76952_FETs_ON+0x3e>
    {
      break;
    }
    HAL_Delay(50);
 800151c:	2032      	movs	r0, #50	; 0x32
 800151e:	f002 f96b 	bl	80037f8 <HAL_Delay>
    if(SYS_OK!= bq76952_allFETs_on())
 8001522:	f7ff ff8d 	bl	8001440 <bq76952_allFETs_on>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d106      	bne.n	800153a <bq76952_FETs_ON+0x42>
    {
      break;
    }
    ret_val = SYS_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	71fb      	strb	r3, [r7, #7]
 8001530:	e004      	b.n	800153c <bq76952_FETs_ON+0x44>
      break;
 8001532:	bf00      	nop
 8001534:	e002      	b.n	800153c <bq76952_FETs_ON+0x44>
      break;
 8001536:	bf00      	nop
 8001538:	e000      	b.n	800153c <bq76952_FETs_ON+0x44>
      break;
 800153a:	bf00      	nop
  }while(false);
  return ret_val;
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	b21b      	sxth	r3, r3
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <bq76952_FETs_OFF>:
extern int16_t bq76952_FETs_OFF(void)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
  //To switch off the FETs whenever required
  int8_t ret_val = SYS_OK;
 8001550:	2300      	movs	r3, #0
 8001552:	71fb      	strb	r3, [r7, #7]
  do
  {
    if(SYS_OK!= bq76952_FETs_enable())
 8001554:	f7ff ff5d 	bl	8001412 <bq76952_FETs_enable>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10a      	bne.n	8001574 <bq76952_FETs_OFF+0x2a>
    {
      break;
    }
    HAL_Delay(50);
 800155e:	2032      	movs	r0, #50	; 0x32
 8001560:	f002 f94a 	bl	80037f8 <HAL_Delay>
    if(SYS_OK!= bq76952_allFETs_off())
 8001564:	f7ff ff83 	bl	800146e <bq76952_allFETs_off>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d104      	bne.n	8001578 <bq76952_FETs_OFF+0x2e>
    {
      break;
    }
    ret_val = SYS_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	71fb      	strb	r3, [r7, #7]
 8001572:	e002      	b.n	800157a <bq76952_FETs_OFF+0x30>
      break;
 8001574:	bf00      	nop
 8001576:	e000      	b.n	800157a <bq76952_FETs_OFF+0x30>
      break;
 8001578:	bf00      	nop
  }while(false);
  return ret_val;
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	b21b      	sxth	r3, r3
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <bq76952_Charge>:

extern int16_t bq76952_Charge(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
  //Takes the BMS to Charging mode
  uint8_t ret_val = SYS_ERR;
 800158e:	23ff      	movs	r3, #255	; 0xff
 8001590:	71fb      	strb	r3, [r7, #7]
  do
  {
    if(SYS_OK!= bq76952_FETs_enable())
 8001592:	f7ff ff3e 	bl	8001412 <bq76952_FETs_enable>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10c      	bne.n	80015b6 <bq76952_Charge+0x2e>
    {
      break;
    }
    if(SYS_OK!= bq76952_allFETs_on())
 800159c:	f7ff ff50 	bl	8001440 <bq76952_allFETs_on>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d109      	bne.n	80015ba <bq76952_Charge+0x32>
    {
      break;
    }
    if(SYS_OK!= bq76952_dischargeOFF())
 80015a6:	f7ff ff79 	bl	800149c <bq76952_dischargeOFF>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d106      	bne.n	80015be <bq76952_Charge+0x36>
    {
      break;
    }
    ret_val = SYS_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	71fb      	strb	r3, [r7, #7]
 80015b4:	e004      	b.n	80015c0 <bq76952_Charge+0x38>
      break;
 80015b6:	bf00      	nop
 80015b8:	e002      	b.n	80015c0 <bq76952_Charge+0x38>
      break;
 80015ba:	bf00      	nop
 80015bc:	e000      	b.n	80015c0 <bq76952_Charge+0x38>
      break;
 80015be:	bf00      	nop
  }while(false);
  return ret_val;
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	b21b      	sxth	r3, r3
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <bq76952_Discharge>:
extern int16_t bq76952_Discharge(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
  //Takes the BMS to Discharging mode
  uint8_t ret_val = SYS_ERR;
 80015d2:	23ff      	movs	r3, #255	; 0xff
 80015d4:	71fb      	strb	r3, [r7, #7]
  do
  {
    if(SYS_OK!= bq76952_FETs_enable())
 80015d6:	f7ff ff1c 	bl	8001412 <bq76952_FETs_enable>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10c      	bne.n	80015fa <bq76952_Discharge+0x2e>
    {
      break;
    }
    if(SYS_OK!= bq76952_allFETs_on())
 80015e0:	f7ff ff2e 	bl	8001440 <bq76952_allFETs_on>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d109      	bne.n	80015fe <bq76952_Discharge+0x32>
    {
      break;
    }
    if(SYS_OK!= bq76952_chargeOFF())
 80015ea:	f7ff ff6e 	bl	80014ca <bq76952_chargeOFF>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d106      	bne.n	8001602 <bq76952_Discharge+0x36>
    {
      break;
    }
    ret_val = SYS_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	e004      	b.n	8001604 <bq76952_Discharge+0x38>
      break;
 80015fa:	bf00      	nop
 80015fc:	e002      	b.n	8001604 <bq76952_Discharge+0x38>
      break;
 80015fe:	bf00      	nop
 8001600:	e000      	b.n	8001604 <bq76952_Discharge+0x38>
      break;
 8001602:	bf00      	nop
  }while(false);
  return ret_val;
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	b21b      	sxth	r3, r3
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <bq76952_AFE_reset>:
  HAL_Delay(100);
}
//------------------------------------------------------------------------------------------------------------
//AFE Functions
extern int16_t bq76952_AFE_reset(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
  // Resets all the registers of the AFE
  int16_t ret_val = SYS_ERR;
 8001616:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800161a:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, RESET))
 800161c:	2112      	movs	r1, #18
 800161e:	203e      	movs	r0, #62	; 0x3e
 8001620:	f000 f9e4 	bl	80019ec <bq76952_write_sub_cmd>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d102      	bne.n	8001630 <bq76952_AFE_reset+0x20>
    {
      break;
    }
    ret_val = SYS_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	80fb      	strh	r3, [r7, #6]
 800162e:	e000      	b.n	8001632 <bq76952_AFE_reset+0x22>
      break;
 8001630:	bf00      	nop
  } while(false);
  return ret_val;
 8001632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <bq76952_set_powercfg>:

static int16_t bq76952_set_powercfg(TsBmsPower_cfg *pTsBmsPower_cfg_t)
{
 800163e:	b480      	push	{r7}
 8001640:	b085      	sub	sp, #20
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
    //PowerConfig --> 0x2D80   #DPSLP_LDO bit -> 1

    int16_t ret_val = SYS_ERR;
 8001646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800164a:	81fb      	strh	r3, [r7, #14]
    do
    {
        //if(SYS_OK != bq76952_write_to_register(SUB_CMD_REG_LSB_ADDR, pTsBmsPower_cfg_t->buffer, pTsBmsPower_cfg_t->len))
        {
            break;
 800164c:	bf00      	nop
        }
    } while (false);
    ret_val = SYS_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	81fb      	strh	r3, [r7, #14]
    return ret_val;
 8001652:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <bq76952_get_device_number>:

extern int16_t bq76952_get_device_number(uint16_t *pDev_num)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b084      	sub	sp, #16
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
    int16_t ret_val = SYS_ERR;
 800166a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800166e:	81fb      	strh	r3, [r7, #14]
    do
    {
      if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, DEVICE_NUMBER))
 8001670:	2101      	movs	r1, #1
 8001672:	203e      	movs	r0, #62	; 0x3e
 8001674:	f000 f9ba 	bl	80019ec <bq76952_write_sub_cmd>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10b      	bne.n	8001696 <bq76952_get_device_number+0x34>
      {
        break;
      }
    if(SYS_OK != bq76952_read_sub_cmd_data_buffer(SUB_CMD_DATA_BUFF_ADDR, &pDev_num, 2))
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2202      	movs	r2, #2
 8001682:	4619      	mov	r1, r3
 8001684:	2040      	movs	r0, #64	; 0x40
 8001686:	f000 fa37 	bl	8001af8 <bq76952_read_sub_cmd_data_buffer>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d104      	bne.n	800169a <bq76952_get_device_number+0x38>
    {
      //pDev_num= *pDev_num;
      break;
    }
    ret_val = SYS_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	81fb      	strh	r3, [r7, #14]
 8001694:	e002      	b.n	800169c <bq76952_get_device_number+0x3a>
        break;
 8001696:	bf00      	nop
 8001698:	e000      	b.n	800169c <bq76952_get_device_number+0x3a>
      break;
 800169a:	bf00      	nop
  } while(false);
  return ret_val;
 800169c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <bq76952_set_config_update>:
  ret_val = SYS_OK;
  return ret_val;
}

static int16_t bq76952_set_config_update(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
    int16_t ret_val = SYS_ERR;
 80016ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b2:	80fb      	strh	r3, [r7, #6]
    do
    {
        if (SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, SET_CFGUPDATE))
 80016b4:	2190      	movs	r1, #144	; 0x90
 80016b6:	203e      	movs	r0, #62	; 0x3e
 80016b8:	f000 f998 	bl	80019ec <bq76952_write_sub_cmd>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
        {
            break;
        }
    } while (false);
    ret_val = SYS_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	80fb      	strh	r3, [r7, #6]
    return ret_val;
 80016c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <bq76952_FETs_Control>:
  return ret_val;
}

/*------------------RAM Register Commands-----------------------------*/
extern int16_t bq76952_FETs_Control(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
  //To control the FETs with MCU only
  uint16_t data=0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	80bb      	strh	r3, [r7, #4]
  int16_t ret_val = SYS_ERR;
 80016da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016de:	80fb      	strh	r3, [r7, #6]
  do
  {
    if(SYS_OK != bq76952_write_RAM_register(FET_CONTROL, AFE_RAMwrite.FETs_CONTROL, 1))
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <bq76952_FETs_Control+0x5c>)
 80016e2:	885b      	ldrh	r3, [r3, #2]
 80016e4:	2201      	movs	r2, #1
 80016e6:	4619      	mov	r1, r3
 80016e8:	2097      	movs	r0, #151	; 0x97
 80016ea:	f000 f885 	bl	80017f8 <bq76952_write_RAM_register>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d10f      	bne.n	8001714 <bq76952_FETs_Control+0x44>
    {
      break;
    }
    if(SYS_OK != bq76952_read_RAM_register(FET_CONTROL, &data))
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	4619      	mov	r1, r3
 80016f8:	2097      	movs	r0, #151	; 0x97
 80016fa:	f000 f8ef 	bl	80018dc <bq76952_read_RAM_register>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d109      	bne.n	8001718 <bq76952_FETs_Control+0x48>
    {
      break;
    }
    if(data!= AFE_RAMwrite.FETs_CONTROL)
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <bq76952_FETs_Control+0x5c>)
 8001706:	885a      	ldrh	r2, [r3, #2]
 8001708:	88bb      	ldrh	r3, [r7, #4]
 800170a:	429a      	cmp	r2, r3
 800170c:	d106      	bne.n	800171c <bq76952_FETs_Control+0x4c>
    {
      break;
    }
    ret_val = SYS_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	80fb      	strh	r3, [r7, #6]
 8001712:	e004      	b.n	800171e <bq76952_FETs_Control+0x4e>
      break;
 8001714:	bf00      	nop
 8001716:	e002      	b.n	800171e <bq76952_FETs_Control+0x4e>
      break;
 8001718:	bf00      	nop
 800171a:	e000      	b.n	800171e <bq76952_FETs_Control+0x4e>
      break;
 800171c:	bf00      	nop
  } while(false);

  return ret_val;
 800171e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200000d8 	.word	0x200000d8

08001730 <bq76952_vCellMode>:
extern int16_t bq76952_vCellMode (void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
  int16_t ret_val = SYS_ERR;
 8001736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800173a:	80fb      	strh	r3, [r7, #6]
  uint16_t data=0;
 800173c:	2300      	movs	r3, #0
 800173e:	80bb      	strh	r3, [r7, #4]
  do
  {
    if(SYS_OK!= bq76952_write_RAM_register(VCellMode, AFE_RAMwrite.vCellModecmd, 2))
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <bq76952_vCellMode+0x60>)
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	2202      	movs	r2, #2
 8001746:	4619      	mov	r1, r3
 8001748:	f249 3004 	movw	r0, #37636	; 0x9304
 800174c:	f000 f854 	bl	80017f8 <bq76952_write_RAM_register>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d110      	bne.n	8001778 <bq76952_vCellMode+0x48>
    {
      break;
    }
    if(SYS_OK!= bq76952_read_RAM_register(VCellMode, &data))
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4619      	mov	r1, r3
 800175a:	f249 3004 	movw	r0, #37636	; 0x9304
 800175e:	f000 f8bd 	bl	80018dc <bq76952_read_RAM_register>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d109      	bne.n	800177c <bq76952_vCellMode+0x4c>
    {
      break;
    }
    if(data!= AFE_RAMwrite.vCellModecmd)
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <bq76952_vCellMode+0x60>)
 800176a:	881a      	ldrh	r2, [r3, #0]
 800176c:	88bb      	ldrh	r3, [r7, #4]
 800176e:	429a      	cmp	r2, r3
 8001770:	d106      	bne.n	8001780 <bq76952_vCellMode+0x50>
    {
      break;
    }
      ret_val = SYS_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	80fb      	strh	r3, [r7, #6]
 8001776:	e004      	b.n	8001782 <bq76952_vCellMode+0x52>
      break;
 8001778:	bf00      	nop
 800177a:	e002      	b.n	8001782 <bq76952_vCellMode+0x52>
      break;
 800177c:	bf00      	nop
 800177e:	e000      	b.n	8001782 <bq76952_vCellMode+0x52>
      break;
 8001780:	bf00      	nop
  }while(false);
  return ret_val;
 8001782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200000d8 	.word	0x200000d8

08001794 <bq76952_TS3config>:
    ret_val = SYS_OK;
  }while(false);
  return ret_val;
}
extern int16_t bq76952_TS3config(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
  int16_t ret_val = SYS_ERR;
 800179a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800179e:	80fb      	strh	r3, [r7, #6]
  uint16_t data=0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	80bb      	strh	r3, [r7, #4]
  do
  {
    if(SYS_OK!= bq76952_write_RAM_register(PrechargeStopVoltage, AFE_RAMwrite.TS3config, 1))
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <bq76952_TS3config+0x60>)
 80017a6:	899b      	ldrh	r3, [r3, #12]
 80017a8:	2201      	movs	r2, #1
 80017aa:	4619      	mov	r1, r3
 80017ac:	f249 300c 	movw	r0, #37644	; 0x930c
 80017b0:	f000 f822 	bl	80017f8 <bq76952_write_RAM_register>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d110      	bne.n	80017dc <bq76952_TS3config+0x48>
    {
      break;
    }
    if(SYS_OK!= bq76952_read_RAM_register(PrechargeStopVoltage, &data))
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	4619      	mov	r1, r3
 80017be:	f249 300c 	movw	r0, #37644	; 0x930c
 80017c2:	f000 f88b 	bl	80018dc <bq76952_read_RAM_register>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d109      	bne.n	80017e0 <bq76952_TS3config+0x4c>
    {
      break;
    }
    if(data!= AFE_RAMwrite.TS3config)
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <bq76952_TS3config+0x60>)
 80017ce:	899a      	ldrh	r2, [r3, #12]
 80017d0:	88bb      	ldrh	r3, [r7, #4]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d106      	bne.n	80017e4 <bq76952_TS3config+0x50>
    {
      break;
    }ret_val = SYS_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	80fb      	strh	r3, [r7, #6]
 80017da:	e004      	b.n	80017e6 <bq76952_TS3config+0x52>
      break;
 80017dc:	bf00      	nop
 80017de:	e002      	b.n	80017e6 <bq76952_TS3config+0x52>
      break;
 80017e0:	bf00      	nop
 80017e2:	e000      	b.n	80017e6 <bq76952_TS3config+0x52>
      break;
 80017e4:	bf00      	nop
  }while(false);
  return ret_val;
 80017e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200000d8 	.word	0x200000d8

080017f8 <bq76952_write_RAM_register>:
static int16_t bq76952_write_RAM_register (uint16_t reg_address, uint16_t cmd, uint8_t datalen)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	80fb      	strh	r3, [r7, #6]
 8001802:	460b      	mov	r3, r1
 8001804:	80bb      	strh	r3, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	70fb      	strb	r3, [r7, #3]
  //Writes to RAM Register
  uint16_t TX_Buffer;
  uint16_t ret_val = SYS_ERR;
 800180a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800180e:	82bb      	strh	r3, [r7, #20]
  uint8_t TX_Buff[2] = {0x00, 0x00};
 8001810:	2300      	movs	r3, #0
 8001812:	823b      	strh	r3, [r7, #16]
  uint8_t TX_RegData[4] = {0x00, 0x00, 0x00, 0x00};
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
  TX_RegData[0] = reg_address & 0xff;
 8001818:	88fb      	ldrh	r3, [r7, #6]
 800181a:	b2db      	uxtb	r3, r3
 800181c:	733b      	strb	r3, [r7, #12]
  TX_RegData[1] = (reg_address >> 8) & 0xff;
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	b29b      	uxth	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	737b      	strb	r3, [r7, #13]
  TX_RegData[2] = cmd & 0xff; //1st byte of data
 8001828:	88bb      	ldrh	r3, [r7, #4]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	73bb      	strb	r3, [r7, #14]
  TX_RegData[3] = (cmd>>8) & 0xff;
 800182e:	88bb      	ldrh	r3, [r7, #4]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	b29b      	uxth	r3, r3
 8001834:	b2db      	uxtb	r3, r3
 8001836:	73fb      	strb	r3, [r7, #15]
  switch(datalen)
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d002      	beq.n	8001844 <bq76952_write_RAM_register+0x4c>
 800183e:	2b02      	cmp	r3, #2
 8001840:	d013      	beq.n	800186a <bq76952_write_RAM_register+0x72>
 8001842:	e025      	b.n	8001890 <bq76952_write_RAM_register+0x98>
  {
    case 1://1 byte datalength
      TX_Buff[0] = Checksum(TX_RegData, 3);
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	2103      	movs	r1, #3
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f86c 	bl	8001928 <Checksum>
 8001850:	4603      	mov	r3, r0
 8001852:	743b      	strb	r3, [r7, #16]
      TX_Buff[1] = 0x05; //combined length of register address and data
 8001854:	2305      	movs	r3, #5
 8001856:	747b      	strb	r3, [r7, #17]
      TX_Buffer = (TX_Buff[1] << 8) | TX_Buff[0];
 8001858:	7c7b      	ldrb	r3, [r7, #17]
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	b21a      	sxth	r2, r3
 800185e:	7c3b      	ldrb	r3, [r7, #16]
 8001860:	b21b      	sxth	r3, r3
 8001862:	4313      	orrs	r3, r2
 8001864:	b21b      	sxth	r3, r3
 8001866:	82fb      	strh	r3, [r7, #22]
      break;
 8001868:	e012      	b.n	8001890 <bq76952_write_RAM_register+0x98>
    case 2://2 byte datalength
      TX_Buff[0] = Checksum(TX_RegData, 4);
 800186a:	f107 030c 	add.w	r3, r7, #12
 800186e:	2104      	movs	r1, #4
 8001870:	4618      	mov	r0, r3
 8001872:	f000 f859 	bl	8001928 <Checksum>
 8001876:	4603      	mov	r3, r0
 8001878:	743b      	strb	r3, [r7, #16]
      TX_Buff[1] = 0x06; //combined length of register address and data
 800187a:	2306      	movs	r3, #6
 800187c:	747b      	strb	r3, [r7, #17]
      TX_Buffer = (TX_Buff[1] << 8) | TX_Buff[0];
 800187e:	7c7b      	ldrb	r3, [r7, #17]
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	b21a      	sxth	r2, r3
 8001884:	7c3b      	ldrb	r3, [r7, #16]
 8001886:	b21b      	sxth	r3, r3
 8001888:	4313      	orrs	r3, r2
 800188a:	b21b      	sxth	r3, r3
 800188c:	82fb      	strh	r3, [r7, #22]
      break;
 800188e:	bf00      	nop
    //Add case for 4 bytes (0x08) if required
  }
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, reg_address)) //Writes register address to Subcommand Memory 0x3E
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	4619      	mov	r1, r3
 8001894:	203e      	movs	r0, #62	; 0x3e
 8001896:	f000 f8a9 	bl	80019ec <bq76952_write_sub_cmd>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d112      	bne.n	80018c6 <bq76952_write_RAM_register+0xce>
    {
      break;
    }
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_DATA_BUFF_ADDR, cmd)) //Writes Command to Buffer Memory 0x40
 80018a0:	88bb      	ldrh	r3, [r7, #4]
 80018a2:	4619      	mov	r1, r3
 80018a4:	2040      	movs	r0, #64	; 0x40
 80018a6:	f000 f8a1 	bl	80019ec <bq76952_write_sub_cmd>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10c      	bne.n	80018ca <bq76952_write_RAM_register+0xd2>
    {
      break;
    }
    if(SYS_OK != bq76952_write_sub_cmd(RAM_REG_LSB_ADDR, TX_Buffer))  //Writes Checksum and Datalength to 0x60 and 0x61
 80018b0:	8afb      	ldrh	r3, [r7, #22]
 80018b2:	4619      	mov	r1, r3
 80018b4:	2060      	movs	r0, #96	; 0x60
 80018b6:	f000 f899 	bl	80019ec <bq76952_write_sub_cmd>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d106      	bne.n	80018ce <bq76952_write_RAM_register+0xd6>
    {
      break;
    }
    ret_val = SYS_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	82bb      	strh	r3, [r7, #20]
 80018c4:	e004      	b.n	80018d0 <bq76952_write_RAM_register+0xd8>
      break;
 80018c6:	bf00      	nop
 80018c8:	e002      	b.n	80018d0 <bq76952_write_RAM_register+0xd8>
      break;
 80018ca:	bf00      	nop
 80018cc:	e000      	b.n	80018d0 <bq76952_write_RAM_register+0xd8>
      break;
 80018ce:	bf00      	nop
  }while(false);
  return ret_val;
 80018d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <bq76952_read_RAM_register>:

static int16_t bq76952_read_RAM_register (uint16_t reg_address, uint16_t *pData)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	80fb      	strh	r3, [r7, #6]
  //Reads from the RAM Register
  uint16_t ret_val = SYS_ERR;
 80018e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ec:	81fb      	strh	r3, [r7, #14]
  do
  {
    if(SYS_OK != bq76952_write_sub_cmd(SUB_CMD_REG_LSB_ADDR, reg_address))
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	4619      	mov	r1, r3
 80018f2:	203e      	movs	r0, #62	; 0x3e
 80018f4:	f000 f87a 	bl	80019ec <bq76952_write_sub_cmd>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10b      	bne.n	8001916 <bq76952_read_RAM_register+0x3a>
    {
      break;
    }
    if(SYS_OK != bq76952_read_sub_cmd_data_buffer(SUB_CMD_DATA_BUFF_ADDR, &pData, 2))
 80018fe:	463b      	mov	r3, r7
 8001900:	2202      	movs	r2, #2
 8001902:	4619      	mov	r1, r3
 8001904:	2040      	movs	r0, #64	; 0x40
 8001906:	f000 f8f7 	bl	8001af8 <bq76952_read_sub_cmd_data_buffer>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d104      	bne.n	800191a <bq76952_read_RAM_register+0x3e>
    {
      break;
    }
    ret_val = SYS_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	81fb      	strh	r3, [r7, #14]
 8001914:	e002      	b.n	800191c <bq76952_read_RAM_register+0x40>
      break;
 8001916:	bf00      	nop
 8001918:	e000      	b.n	800191c <bq76952_read_RAM_register+0x40>
      break;
 800191a:	bf00      	nop
  }while(false);
  return ret_val;
 800191c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <Checksum>:

static uint8_t Checksum(uint8_t *pData, uint8_t len)
// Calculates the checksum when writing to a RAM register. The checksum is the inverse of the sum of the bytes.
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  uint8_t checksum = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	73bb      	strb	r3, [r7, #14]

  for(i=0; i<len; i++)
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	e009      	b.n	8001952 <Checksum+0x2a>
    checksum += pData[i];
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4413      	add	r3, r2
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	7bbb      	ldrb	r3, [r7, #14]
 8001948:	4413      	add	r3, r2
 800194a:	73bb      	strb	r3, [r7, #14]
  for(i=0; i<len; i++)
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	3301      	adds	r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
 8001952:	7bfa      	ldrb	r2, [r7, #15]
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	429a      	cmp	r2, r3
 8001958:	d3f1      	bcc.n	800193e <Checksum+0x16>

  checksum = 0xff & ~checksum;
 800195a:	7bbb      	ldrb	r3, [r7, #14]
 800195c:	43db      	mvns	r3, r3
 800195e:	73bb      	strb	r3, [r7, #14]

  return(checksum);
 8001960:	7bbb      	ldrb	r3, [r7, #14]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <CRC8>:


static uint8_t CRC8(uint8_t *pData, uint8_t len)
//Calculates CRC8 for passed bytes.
{
 800196e:	b480      	push	{r7}
 8001970:	b085      	sub	sp, #20
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	460b      	mov	r3, r1
 8001978:	70fb      	strb	r3, [r7, #3]
  uint8_t i;
  uint8_t crc = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	73bb      	strb	r3, [r7, #14]
  while(len-- != 0)
 800197e:	e029      	b.n	80019d4 <CRC8+0x66>
  {
    for (i = 0x80; i != 0; i /= 2)
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	73fb      	strb	r3, [r7, #15]
 8001984:	e020      	b.n	80019c8 <CRC8+0x5a>
    {
      if((crc & 0x80) != 0)
 8001986:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800198a:	2b00      	cmp	r3, #0
 800198c:	da09      	bge.n	80019a2 <CRC8+0x34>
      {
        crc *= 2;
 800198e:	7bbb      	ldrb	r3, [r7, #14]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	73bb      	strb	r3, [r7, #14]
        crc ^= 0x107;
 8001994:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001998:	f083 0307 	eor.w	r3, r3, #7
 800199c:	b25b      	sxtb	r3, r3
 800199e:	73bb      	strb	r3, [r7, #14]
 80019a0:	e002      	b.n	80019a8 <CRC8+0x3a>
      }
      else
        crc *= 2;
 80019a2:	7bbb      	ldrb	r3, [r7, #14]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	73bb      	strb	r3, [r7, #14]

      if((*pData & i) != 0)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	781a      	ldrb	r2, [r3, #0]
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	4013      	ands	r3, r2
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d005      	beq.n	80019c2 <CRC8+0x54>
        crc ^= 0x107;
 80019b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80019ba:	f083 0307 	eor.w	r3, r3, #7
 80019be:	b25b      	sxtb	r3, r3
 80019c0:	73bb      	strb	r3, [r7, #14]
    for (i = 0x80; i != 0; i /= 2)
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	085b      	lsrs	r3, r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1db      	bne.n	8001986 <CRC8+0x18>
    }
    pData++;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3301      	adds	r3, #1
 80019d2:	607b      	str	r3, [r7, #4]
  while(len-- != 0)
 80019d4:	78fb      	ldrb	r3, [r7, #3]
 80019d6:	1e5a      	subs	r2, r3, #1
 80019d8:	70fa      	strb	r2, [r7, #3]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1d0      	bne.n	8001980 <CRC8+0x12>
  }
  return (crc);
 80019de:	7bbb      	ldrb	r3, [r7, #14]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <bq76952_write_sub_cmd>:

//-----------------------------------------------------------------------------------------------------------------------------
// READ/WRITE FUNCTIONS FOR DIRECT COMMANDS and SUBCOMMANDS

static int16_t bq76952_write_sub_cmd(uint16_t subCmdRegAddr, uint16_t subCmd)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af02      	add	r7, sp, #8
 80019f2:	4603      	mov	r3, r0
 80019f4:	460a      	mov	r2, r1
 80019f6:	80fb      	strh	r3, [r7, #6]
 80019f8:	4613      	mov	r3, r2
 80019fa:	80bb      	strh	r3, [r7, #4]
  //To write data to subcommand address register (0x3E)
  uint8_t subCmdRegAddrWRITE = subCmdRegAddr | 0x80u; //Changes the leftmost bit to 1 since W Operation
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a04:	76fb      	strb	r3, [r7, #27]
  int16_t ret_val = SYS_ERR;
 8001a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a0a:	83fb      	strh	r3, [r7, #30]
  uint8_t pTxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 8001a0c:	4b37      	ldr	r3, [pc, #220]	; (8001aec <bq76952_write_sub_cmd+0x100>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	823b      	strh	r3, [r7, #16]
 8001a12:	2300      	movs	r3, #0
 8001a14:	74bb      	strb	r3, [r7, #18]
  uint8_t pRxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 8001a16:	4b35      	ldr	r3, [pc, #212]	; (8001aec <bq76952_write_sub_cmd+0x100>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81bb      	strh	r3, [r7, #12]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	73bb      	strb	r3, [r7, #14]
  uint8_t retry_cnt = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	777b      	strb	r3, [r7, #29]
  uint16_t TxByte, RxByte = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	833b      	strh	r3, [r7, #24]
  for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	773b      	strb	r3, [r7, #28]
 8001a2c:	e054      	b.n	8001ad8 <bq76952_write_sub_cmd+0xec>
  {
    pTxData[0] = subCmdRegAddrWRITE + i;
 8001a2e:	7efa      	ldrb	r2, [r7, #27]
 8001a30:	7f3b      	ldrb	r3, [r7, #28]
 8001a32:	4413      	add	r3, r2
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	743b      	strb	r3, [r7, #16]
    pTxData[1] = subCmd >> (i * 8); //To retrieve the lower byte and then the higher byte subsequently
 8001a38:	88ba      	ldrh	r2, [r7, #4]
 8001a3a:	7f3b      	ldrb	r3, [r7, #28]
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	fa42 f303 	asr.w	r3, r2, r3
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	747b      	strb	r3, [r7, #17]
    pTxData[2] = CRC8(pTxData, SUB_CMD_LEN);
 8001a46:	f107 0310 	add.w	r3, r7, #16
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff8e 	bl	800196e <CRC8>
 8001a52:	4603      	mov	r3, r0
 8001a54:	74bb      	strb	r3, [r7, #18]
    TxByte = pTxData[0] | (pTxData[1] << 8);
 8001a56:	7c3b      	ldrb	r3, [r7, #16]
 8001a58:	b21a      	sxth	r2, r3
 8001a5a:	7c7b      	ldrb	r3, [r7, #17]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	b21b      	sxth	r3, r3
 8001a60:	4313      	orrs	r3, r2
 8001a62:	b21b      	sxth	r3, r3
 8001a64:	82fb      	strh	r3, [r7, #22]
    do
    {
      HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);                                          // Enable CS
 8001a66:	2200      	movs	r2, #0
 8001a68:	2110      	movs	r1, #16
 8001a6a:	4821      	ldr	r0, [pc, #132]	; (8001af0 <bq76952_write_sub_cmd+0x104>)
 8001a6c:	f004 fc0c 	bl	8006288 <HAL_GPIO_WritePin>
      HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, SPI_SUB_CMD_FRAME_LEN, SPI_WR_TIMEOUT_MS); // Rx & Tx simultaneously (Full Duplex)
 8001a70:	f107 020c 	add.w	r2, r7, #12
 8001a74:	f107 0110 	add.w	r1, r7, #16
 8001a78:	230a      	movs	r3, #10
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	481d      	ldr	r0, [pc, #116]	; (8001af4 <bq76952_write_sub_cmd+0x108>)
 8001a80:	f007 fcb2 	bl	80093e8 <HAL_SPI_TransmitReceive>
      HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);                                          // Disable CS
 8001a84:	2201      	movs	r2, #1
 8001a86:	2110      	movs	r1, #16
 8001a88:	4819      	ldr	r0, [pc, #100]	; (8001af0 <bq76952_write_sub_cmd+0x104>)
 8001a8a:	f004 fbfd 	bl	8006288 <HAL_GPIO_WritePin>
      HAL_Delay(2);
 8001a8e:	2002      	movs	r0, #2
 8001a90:	f001 feb2 	bl	80037f8 <HAL_Delay>
      RxByte = pRxData[0] | (pRxData[1] << 8);
 8001a94:	7b3b      	ldrb	r3, [r7, #12]
 8001a96:	b21a      	sxth	r2, r3
 8001a98:	7b7b      	ldrb	r3, [r7, #13]
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	b21b      	sxth	r3, r3
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	833b      	strh	r3, [r7, #24]
      retry_cnt++;
 8001aa4:	7f7b      	ldrb	r3, [r7, #29]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	777b      	strb	r3, [r7, #29]
    } while((TxByte != RxByte) && (retry_cnt < 4));
 8001aaa:	8afa      	ldrh	r2, [r7, #22]
 8001aac:	8b3b      	ldrh	r3, [r7, #24]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d002      	beq.n	8001ab8 <bq76952_write_sub_cmd+0xcc>
 8001ab2:	7f7b      	ldrb	r3, [r7, #29]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d9d6      	bls.n	8001a66 <bq76952_write_sub_cmd+0x7a>
    if(TxByte == RxByte)
 8001ab8:	8afa      	ldrh	r2, [r7, #22]
 8001aba:	8b3b      	ldrh	r3, [r7, #24]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d104      	bne.n	8001aca <bq76952_write_sub_cmd+0xde>
    {
      retry_cnt=0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	777b      	strb	r3, [r7, #29]
      ret_val = SYS_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	83fb      	strh	r3, [r7, #30]
 8001ac8:	e003      	b.n	8001ad2 <bq76952_write_sub_cmd+0xe6>
    }
    else
    {
      ret_val = SYS_ERR;
 8001aca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ace:	83fb      	strh	r3, [r7, #30]
      break;
 8001ad0:	e005      	b.n	8001ade <bq76952_write_sub_cmd+0xf2>
  for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8001ad2:	7f3b      	ldrb	r3, [r7, #28]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	773b      	strb	r3, [r7, #28]
 8001ad8:	7f3b      	ldrb	r3, [r7, #28]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d9a7      	bls.n	8001a2e <bq76952_write_sub_cmd+0x42>
    }
  }
  return ret_val;
 8001ade:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	0800c5bc 	.word	0x0800c5bc
 8001af0:	40020800 	.word	0x40020800
 8001af4:	2000073c 	.word	0x2000073c

08001af8 <bq76952_read_sub_cmd_data_buffer>:

static int16_t bq76952_read_sub_cmd_data_buffer(uint8_t subCmdRegAddr, uint16_t **pData, uint8_t len)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b090      	sub	sp, #64	; 0x40
 8001afc:	af02      	add	r7, sp, #8
 8001afe:	4603      	mov	r3, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
 8001b04:	4613      	mov	r3, r2
 8001b06:	71bb      	strb	r3, [r7, #6]
  //To read data from the Subcommand Buffer register(0x40)
  uint8_t RX_DATA[SUB_CMD_DATA_BUFF_LEN_MAX] = {0};  //To store the initial data from the Buffer
 8001b08:	2300      	movs	r3, #0
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
 8001b1c:	615a      	str	r2, [r3, #20]
 8001b1e:	619a      	str	r2, [r3, #24]
  int16_t ret_val = SYS_ERR;
 8001b20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b24:	86fb      	strh	r3, [r7, #54]	; 0x36
  do
  {
    if((len > SUB_CMD_DATA_BUFF_LEN_MAX) || (len == 0))
 8001b26:	79bb      	ldrb	r3, [r7, #6]
 8001b28:	2b20      	cmp	r3, #32
 8001b2a:	f200 8085 	bhi.w	8001c38 <bq76952_read_sub_cmd_data_buffer+0x140>
 8001b2e:	79bb      	ldrb	r3, [r7, #6]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 8081 	beq.w	8001c38 <bq76952_read_sub_cmd_data_buffer+0x140>
    {
      break;
    }
    if(pData == NULL)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d07c      	beq.n	8001c36 <bq76952_read_sub_cmd_data_buffer+0x13e>
    {
      break;
    }
    uint8_t pTxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 8001b3c:	4b41      	ldr	r3, [pc, #260]	; (8001c44 <bq76952_read_sub_cmd_data_buffer+0x14c>)
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	81bb      	strh	r3, [r7, #12]
 8001b42:	2300      	movs	r3, #0
 8001b44:	73bb      	strb	r3, [r7, #14]
    uint8_t pRxData[SPI_SUB_CMD_FRAME_LEN] = { 0 };
 8001b46:	4b3f      	ldr	r3, [pc, #252]	; (8001c44 <bq76952_read_sub_cmd_data_buffer+0x14c>)
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	813b      	strh	r3, [r7, #8]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	72bb      	strb	r3, [r7, #10]
    uint8_t retry_cnt = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint8_t TxByte, RxByte;
    for (uint8_t i = 0; i < len; i++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001b5c:	e05a      	b.n	8001c14 <bq76952_read_sub_cmd_data_buffer+0x11c>
    {
      pTxData[0] = subCmdRegAddr + i;
 8001b5e:	79fa      	ldrb	r2, [r7, #7]
 8001b60:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001b64:	4413      	add	r3, r2
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	733b      	strb	r3, [r7, #12]
      pTxData[1] = 0xFF;
 8001b6a:	23ff      	movs	r3, #255	; 0xff
 8001b6c:	737b      	strb	r3, [r7, #13]
      pTxData[2] = CRC8(pTxData, SUB_CMD_LEN);
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	2102      	movs	r1, #2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fefa 	bl	800196e <CRC8>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	73bb      	strb	r3, [r7, #14]
      TxByte = pTxData[0];
 8001b7e:	7b3b      	ldrb	r3, [r7, #12]
 8001b80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      retry_cnt = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
      do
      {
        HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);                                          // Enable CS
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2110      	movs	r1, #16
 8001b8e:	482e      	ldr	r0, [pc, #184]	; (8001c48 <bq76952_read_sub_cmd_data_buffer+0x150>)
 8001b90:	f004 fb7a 	bl	8006288 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, SPI_SUB_CMD_FRAME_LEN, SPI_WR_TIMEOUT_MS); // Rx & Tx simultaneously (Full Duplex)
 8001b94:	f107 0208 	add.w	r2, r7, #8
 8001b98:	f107 010c 	add.w	r1, r7, #12
 8001b9c:	230a      	movs	r3, #10
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	482a      	ldr	r0, [pc, #168]	; (8001c4c <bq76952_read_sub_cmd_data_buffer+0x154>)
 8001ba4:	f007 fc20 	bl	80093e8 <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);                                          // Disable CS
 8001ba8:	2201      	movs	r2, #1
 8001baa:	2110      	movs	r1, #16
 8001bac:	4826      	ldr	r0, [pc, #152]	; (8001c48 <bq76952_read_sub_cmd_data_buffer+0x150>)
 8001bae:	f004 fb6b 	bl	8006288 <HAL_GPIO_WritePin>
        HAL_Delay(2);
 8001bb2:	2002      	movs	r0, #2
 8001bb4:	f001 fe20 	bl	80037f8 <HAL_Delay>
        RxByte = pRxData[0];
 8001bb8:	7a3b      	ldrb	r3, [r7, #8]
 8001bba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        retry_cnt++;
 8001bbe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
      } while((TxByte != RxByte) && (retry_cnt < 4));
 8001bc8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001bcc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d003      	beq.n	8001bdc <bq76952_read_sub_cmd_data_buffer+0xe4>
 8001bd4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d9d6      	bls.n	8001b8a <bq76952_read_sub_cmd_data_buffer+0x92>
      if(TxByte == RxByte)
 8001bdc:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001be0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d10c      	bne.n	8001c02 <bq76952_read_sub_cmd_data_buffer+0x10a>
      {
        retry_cnt=0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        RX_DATA[i] = pRxData[1];
 8001bee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001bf2:	7a7a      	ldrb	r2, [r7, #9]
 8001bf4:	3338      	adds	r3, #56	; 0x38
 8001bf6:	443b      	add	r3, r7
 8001bf8:	f803 2c28 	strb.w	r2, [r3, #-40]
        ret_val = SYS_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001c00:	e003      	b.n	8001c0a <bq76952_read_sub_cmd_data_buffer+0x112>
      }
      else
      {
        ret_val = SYS_ERR;
 8001c02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c06:	86fb      	strh	r3, [r7, #54]	; 0x36
        break;
 8001c08:	e009      	b.n	8001c1e <bq76952_read_sub_cmd_data_buffer+0x126>
    for (uint8_t i = 0; i < len; i++)
 8001c0a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c0e:	3301      	adds	r3, #1
 8001c10:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001c14:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001c18:	79bb      	ldrb	r3, [r7, #6]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d39f      	bcc.n	8001b5e <bq76952_read_sub_cmd_data_buffer+0x66>
      }
    }
    **pData= (RX_DATA[1] << 8) | RX_DATA[0];
 8001c1e:	7c7b      	ldrb	r3, [r7, #17]
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	b21a      	sxth	r2, r3
 8001c24:	7c3b      	ldrb	r3, [r7, #16]
 8001c26:	b21b      	sxth	r3, r3
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	b21a      	sxth	r2, r3
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	b292      	uxth	r2, r2
 8001c32:	801a      	strh	r2, [r3, #0]
 8001c34:	e000      	b.n	8001c38 <bq76952_read_sub_cmd_data_buffer+0x140>
      break;
 8001c36:	bf00      	nop
  } while(false);
  return ret_val;
 8001c38:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3738      	adds	r7, #56	; 0x38
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	0800c5bc 	.word	0x0800c5bc
 8001c48:	40020800 	.word	0x40020800
 8001c4c:	2000073c 	.word	0x2000073c

08001c50 <bq76952_dir_cmd_read>:
  }
  return ret_val;
}

extern int16_t bq76952_dir_cmd_read(uint8_t dirCmdRegAddr, uint16_t *pData, uint8_t len)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	71bb      	strb	r3, [r7, #6]
  //To read data from the direct command registers
  uint8_t RX_DATA[READ_DIR_CMD_BUFF_LEN] = {0};
 8001c60:	2300      	movs	r3, #0
 8001c62:	82bb      	strh	r3, [r7, #20]
  int16_t ret_val = SYS_ERR;
 8001c64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c68:	83fb      	strh	r3, [r7, #30]
  do
  {
    if((len > DIR_CMD_DATA_BUFF_LEN_MAX) || (len == 0))
 8001c6a:	79bb      	ldrb	r3, [r7, #6]
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d86f      	bhi.n	8001d50 <bq76952_dir_cmd_read+0x100>
 8001c70:	79bb      	ldrb	r3, [r7, #6]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d06c      	beq.n	8001d50 <bq76952_dir_cmd_read+0x100>
    {
      break;
    }
    if(pData == NULL)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d068      	beq.n	8001d4e <bq76952_dir_cmd_read+0xfe>
    {
      break;
    }
    uint8_t pTxData[SPI_DIR_CMD_FRAME_LEN] = { 0 };
 8001c7c:	4b37      	ldr	r3, [pc, #220]	; (8001d5c <bq76952_dir_cmd_read+0x10c>)
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	823b      	strh	r3, [r7, #16]
 8001c82:	2300      	movs	r3, #0
 8001c84:	74bb      	strb	r3, [r7, #18]
    uint8_t pRxData[SPI_DIR_CMD_FRAME_LEN] = { 0 };
 8001c86:	4b35      	ldr	r3, [pc, #212]	; (8001d5c <bq76952_dir_cmd_read+0x10c>)
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	81bb      	strh	r3, [r7, #12]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73bb      	strb	r3, [r7, #14]
    uint8_t retry_cnt = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	777b      	strb	r3, [r7, #29]
    uint16_t TxByte, RxByte;
    for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	773b      	strb	r3, [r7, #28]
 8001c98:	e04b      	b.n	8001d32 <bq76952_dir_cmd_read+0xe2>
    {
      pTxData[0] = dirCmdRegAddr + i;
 8001c9a:	79fa      	ldrb	r2, [r7, #7]
 8001c9c:	7f3b      	ldrb	r3, [r7, #28]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	743b      	strb	r3, [r7, #16]
      pTxData[1] = 0xFF;
 8001ca4:	23ff      	movs	r3, #255	; 0xff
 8001ca6:	747b      	strb	r3, [r7, #17]
      pTxData[2] = CRC8(pTxData, SUB_CMD_LEN);
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	2102      	movs	r1, #2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fe5d 	bl	800196e <CRC8>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	74bb      	strb	r3, [r7, #18]
      TxByte = pTxData[0];
 8001cb8:	7c3b      	ldrb	r3, [r7, #16]
 8001cba:	837b      	strh	r3, [r7, #26]
      retry_cnt = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	777b      	strb	r3, [r7, #29]
      do
      {
        HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 0);                                          // Enable CS
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2110      	movs	r1, #16
 8001cc4:	4826      	ldr	r0, [pc, #152]	; (8001d60 <bq76952_dir_cmd_read+0x110>)
 8001cc6:	f004 fadf 	bl	8006288 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, SPI_DIR_CMD_FRAME_LEN, SPI_WR_TIMEOUT_MS); // Rx & Tx simultaneously (Full Duplex)
 8001cca:	f107 020c 	add.w	r2, r7, #12
 8001cce:	f107 0110 	add.w	r1, r7, #16
 8001cd2:	230a      	movs	r3, #10
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	4822      	ldr	r0, [pc, #136]	; (8001d64 <bq76952_dir_cmd_read+0x114>)
 8001cda:	f007 fb85 	bl	80093e8 <HAL_SPI_TransmitReceive>
        HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);                                          // Disable CS
 8001cde:	2201      	movs	r2, #1
 8001ce0:	2110      	movs	r1, #16
 8001ce2:	481f      	ldr	r0, [pc, #124]	; (8001d60 <bq76952_dir_cmd_read+0x110>)
 8001ce4:	f004 fad0 	bl	8006288 <HAL_GPIO_WritePin>
        HAL_Delay(2);
 8001ce8:	2002      	movs	r0, #2
 8001cea:	f001 fd85 	bl	80037f8 <HAL_Delay>
        RxByte = pRxData[0];
 8001cee:	7b3b      	ldrb	r3, [r7, #12]
 8001cf0:	833b      	strh	r3, [r7, #24]
        retry_cnt++;
 8001cf2:	7f7b      	ldrb	r3, [r7, #29]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	777b      	strb	r3, [r7, #29]
      } while((TxByte != RxByte) && (retry_cnt < 4));
 8001cf8:	8b7a      	ldrh	r2, [r7, #26]
 8001cfa:	8b3b      	ldrh	r3, [r7, #24]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d002      	beq.n	8001d06 <bq76952_dir_cmd_read+0xb6>
 8001d00:	7f7b      	ldrb	r3, [r7, #29]
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d9dc      	bls.n	8001cc0 <bq76952_dir_cmd_read+0x70>
      if(TxByte == RxByte)
 8001d06:	8b7a      	ldrh	r2, [r7, #26]
 8001d08:	8b3b      	ldrh	r3, [r7, #24]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d10a      	bne.n	8001d24 <bq76952_dir_cmd_read+0xd4>
      {
        retry_cnt=0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	777b      	strb	r3, [r7, #29]
        RX_DATA[i] = pRxData[1];
 8001d12:	7f3b      	ldrb	r3, [r7, #28]
 8001d14:	7b7a      	ldrb	r2, [r7, #13]
 8001d16:	3320      	adds	r3, #32
 8001d18:	443b      	add	r3, r7
 8001d1a:	f803 2c0c 	strb.w	r2, [r3, #-12]
        ret_val = SYS_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	83fb      	strh	r3, [r7, #30]
 8001d22:	e003      	b.n	8001d2c <bq76952_dir_cmd_read+0xdc>
      }
      else
      {
        ret_val = SYS_ERR;
 8001d24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d28:	83fb      	strh	r3, [r7, #30]
        break;
 8001d2a:	e005      	b.n	8001d38 <bq76952_dir_cmd_read+0xe8>
    for (uint8_t i = 0; i < SUB_CMD_LEN; i++)
 8001d2c:	7f3b      	ldrb	r3, [r7, #28]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	773b      	strb	r3, [r7, #28]
 8001d32:	7f3b      	ldrb	r3, [r7, #28]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d9b0      	bls.n	8001c9a <bq76952_dir_cmd_read+0x4a>
      }
    }
    *pData= (RX_DATA[1] << 8) | RX_DATA[0];
 8001d38:	7d7b      	ldrb	r3, [r7, #21]
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	b21a      	sxth	r2, r3
 8001d3e:	7d3b      	ldrb	r3, [r7, #20]
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b21b      	sxth	r3, r3
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	801a      	strh	r2, [r3, #0]
 8001d4c:	e000      	b.n	8001d50 <bq76952_dir_cmd_read+0x100>
      break;
 8001d4e:	bf00      	nop
  } while(false);
  return ret_val;
 8001d50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	0800c5bc 	.word	0x0800c5bc
 8001d60:	40020800 	.word	0x40020800
 8001d64:	2000073c 	.word	0x2000073c

08001d68 <afe_data_read>:
BAT_AFE_vBRICK_D_t batAfeBrickD;
BAT_GAUGE_OvrVIEW_t batGaugeOvr;
BAT_GAUGE_ViT_t batGaugeViT;

int16_t afe_data_read(void)
{
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
  uint16_t data=0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	803b      	strh	r3, [r7, #0]
  uint8_t CellVoltageHolder = Cell1Voltage;
 8001d72:	2314      	movs	r3, #20
 8001d74:	71fb      	strb	r3, [r7, #7]
  int16_t ret_val = SYS_ERR;
 8001d76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d7a:	807b      	strh	r3, [r7, #2]
  do
  {
    if(SYS_OK == bq76952_get_device_number(&data))
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fc6f 	bl	8001662 <bq76952_get_device_number>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d102      	bne.n	8001d90 <afe_data_read+0x28>
      AFE_data.device_number = data;
 8001d8a:	883a      	ldrh	r2, [r7, #0]
 8001d8c:	4b82      	ldr	r3, [pc, #520]	; (8001f98 <afe_data_read+0x230>)
 8001d8e:	801a      	strh	r2, [r3, #0]
    if(SYS_OK == bq76952_dir_cmd_read(StackVoltage, &data, 2))
 8001d90:	463b      	mov	r3, r7
 8001d92:	2202      	movs	r2, #2
 8001d94:	4619      	mov	r1, r3
 8001d96:	2034      	movs	r0, #52	; 0x34
 8001d98:	f7ff ff5a 	bl	8001c50 <bq76952_dir_cmd_read>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d102      	bne.n	8001da8 <afe_data_read+0x40>
      AFE_data.stack_vol = data;
 8001da2:	883a      	ldrh	r2, [r7, #0]
 8001da4:	4b7c      	ldr	r3, [pc, #496]	; (8001f98 <afe_data_read+0x230>)
 8001da6:	805a      	strh	r2, [r3, #2]
    if(SYS_OK == bq76952_dir_cmd_read(PACKPinVoltage, &data, 2))
 8001da8:	463b      	mov	r3, r7
 8001daa:	2202      	movs	r2, #2
 8001dac:	4619      	mov	r1, r3
 8001dae:	2036      	movs	r0, #54	; 0x36
 8001db0:	f7ff ff4e 	bl	8001c50 <bq76952_dir_cmd_read>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d102      	bne.n	8001dc0 <afe_data_read+0x58>
    {
      AFE_data.pack_vol = data;
 8001dba:	883a      	ldrh	r2, [r7, #0]
 8001dbc:	4b76      	ldr	r3, [pc, #472]	; (8001f98 <afe_data_read+0x230>)
 8001dbe:	809a      	strh	r2, [r3, #4]
    }
    if(SYS_OK == bq76952_dir_cmd_read(CC2Current, &data, 2))
 8001dc0:	463b      	mov	r3, r7
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	203a      	movs	r0, #58	; 0x3a
 8001dc8:	f7ff ff42 	bl	8001c50 <bq76952_dir_cmd_read>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d102      	bne.n	8001dd8 <afe_data_read+0x70>
    {
      AFE_data.pack_curr = data;
 8001dd2:	883a      	ldrh	r2, [r7, #0]
 8001dd4:	4b70      	ldr	r3, [pc, #448]	; (8001f98 <afe_data_read+0x230>)
 8001dd6:	811a      	strh	r2, [r3, #8]
    }
      if(SYS_OK == bq76952_dir_cmd_read(TS1Temperature, &data, 2))
 8001dd8:	463b      	mov	r3, r7
 8001dda:	2202      	movs	r2, #2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	2070      	movs	r0, #112	; 0x70
 8001de0:	f7ff ff36 	bl	8001c50 <bq76952_dir_cmd_read>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <afe_data_read+0x88>
      {
    	  AFE_data.temps[0] = data;
 8001dea:	883a      	ldrh	r2, [r7, #0]
 8001dec:	4b6a      	ldr	r3, [pc, #424]	; (8001f98 <afe_data_read+0x230>)
 8001dee:	83da      	strh	r2, [r3, #30]
      }
    if(SYS_OK == bq76952_dir_cmd_read(TS3Temperature, &data, 2))
 8001df0:	463b      	mov	r3, r7
 8001df2:	2202      	movs	r2, #2
 8001df4:	4619      	mov	r1, r3
 8001df6:	2074      	movs	r0, #116	; 0x74
 8001df8:	f7ff ff2a 	bl	8001c50 <bq76952_dir_cmd_read>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d102      	bne.n	8001e08 <afe_data_read+0xa0>
      AFE_data.temps[1] = data;
 8001e02:	883a      	ldrh	r2, [r7, #0]
 8001e04:	4b64      	ldr	r3, [pc, #400]	; (8001f98 <afe_data_read+0x230>)
 8001e06:	841a      	strh	r2, [r3, #32]
    for(uint8_t i=0;i<10;i++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	71bb      	strb	r3, [r7, #6]
 8001e0c:	e016      	b.n	8001e3c <afe_data_read+0xd4>
    {
      do
      {
        if(SYS_OK == bq76952_dir_cmd_read(CellVoltageHolder, &data, 2))
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	4639      	mov	r1, r7
 8001e12:	2202      	movs	r2, #2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff1b 	bl	8001c50 <bq76952_dir_cmd_read>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10a      	bne.n	8001e36 <afe_data_read+0xce>
        {
          AFE_data.cellvoltages[i] = data;
 8001e20:	79bb      	ldrb	r3, [r7, #6]
 8001e22:	8839      	ldrh	r1, [r7, #0]
 8001e24:	4a5c      	ldr	r2, [pc, #368]	; (8001f98 <afe_data_read+0x230>)
 8001e26:	3304      	adds	r3, #4
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	4413      	add	r3, r2
 8001e2c:	460a      	mov	r2, r1
 8001e2e:	805a      	strh	r2, [r3, #2]
          CellVoltageHolder+=2;
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	3302      	adds	r3, #2
 8001e34:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i=0;i<10;i++)
 8001e36:	79bb      	ldrb	r3, [r7, #6]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	71bb      	strb	r3, [r7, #6]
 8001e3c:	79bb      	ldrb	r3, [r7, #6]
 8001e3e:	2b09      	cmp	r3, #9
 8001e40:	d9e5      	bls.n	8001e0e <afe_data_read+0xa6>
        }
      }while(false);
    }

    AFE_info.Device_Number = AFE_data.device_number;
 8001e42:	4b55      	ldr	r3, [pc, #340]	; (8001f98 <afe_data_read+0x230>)
 8001e44:	881a      	ldrh	r2, [r3, #0]
 8001e46:	4b55      	ldr	r3, [pc, #340]	; (8001f9c <afe_data_read+0x234>)
 8001e48:	801a      	strh	r2, [r3, #0]
    AFE_info.Stack_Voltage = 0.01*(AFE_data.stack_vol);                     //Returns Stack Voltage in Volts (V)
 8001e4a:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <afe_data_read+0x230>)
 8001e4c:	885b      	ldrh	r3, [r3, #2]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb30 	bl	80004b4 <__aeabi_i2d>
 8001e54:	a348      	add	r3, pc, #288	; (adr r3, 8001f78 <afe_data_read+0x210>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	f7fe fb95 	bl	8000588 <__aeabi_dmul>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	f7fe fda1 	bl	80009ac <__aeabi_d2f>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4a4b      	ldr	r2, [pc, #300]	; (8001f9c <afe_data_read+0x234>)
 8001e6e:	6053      	str	r3, [r2, #4]
    AFE_info.Pack_Voltage = 0.01*(AFE_data.pack_vol);                       //Returns Pack Voltage in Volts (V)
 8001e70:	4b49      	ldr	r3, [pc, #292]	; (8001f98 <afe_data_read+0x230>)
 8001e72:	889b      	ldrh	r3, [r3, #4]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fb1d 	bl	80004b4 <__aeabi_i2d>
 8001e7a:	a33f      	add	r3, pc, #252	; (adr r3, 8001f78 <afe_data_read+0x210>)
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	f7fe fb82 	bl	8000588 <__aeabi_dmul>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f7fe fd8e 	bl	80009ac <__aeabi_d2f>
 8001e90:	4603      	mov	r3, r0
 8001e92:	4a42      	ldr	r2, [pc, #264]	; (8001f9c <afe_data_read+0x234>)
 8001e94:	6093      	str	r3, [r2, #8]
    AFE_info.Pack_Current = (AFE_data.pack_curr);                      //Returns Pack Current in Amperes (A)
 8001e96:	4b40      	ldr	r3, [pc, #256]	; (8001f98 <afe_data_read+0x230>)
 8001e98:	891b      	ldrh	r3, [r3, #8]
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ea2:	4b3e      	ldr	r3, [pc, #248]	; (8001f9c <afe_data_read+0x234>)
 8001ea4:	edc3 7a04 	vstr	s15, [r3, #16]
    AFE_info.Temperatures[0] = (0.1*(AFE_data.temps[0]))-273.15;     //Returns TS1 in  Degree Celcius (C)
 8001ea8:	4b3b      	ldr	r3, [pc, #236]	; (8001f98 <afe_data_read+0x230>)
 8001eaa:	8bdb      	ldrh	r3, [r3, #30]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fb01 	bl	80004b4 <__aeabi_i2d>
 8001eb2:	a333      	add	r3, pc, #204	; (adr r3, 8001f80 <afe_data_read+0x218>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	f7fe fb66 	bl	8000588 <__aeabi_dmul>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	a330      	add	r3, pc, #192	; (adr r3, 8001f88 <afe_data_read+0x220>)
 8001ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eca:	f7fe f9a5 	bl	8000218 <__aeabi_dsub>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f7fe fd69 	bl	80009ac <__aeabi_d2f>
 8001eda:	4603      	mov	r3, r0
 8001edc:	4a2f      	ldr	r2, [pc, #188]	; (8001f9c <afe_data_read+0x234>)
 8001ede:	63d3      	str	r3, [r2, #60]	; 0x3c
    AFE_info.Temperatures[1] = (0.1*(AFE_data.temps[1]))-273.15;     //Returns TS1 in Degree Celcius (C)
 8001ee0:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <afe_data_read+0x230>)
 8001ee2:	8c1b      	ldrh	r3, [r3, #32]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fae5 	bl	80004b4 <__aeabi_i2d>
 8001eea:	a325      	add	r3, pc, #148	; (adr r3, 8001f80 <afe_data_read+0x218>)
 8001eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef0:	f7fe fb4a 	bl	8000588 <__aeabi_dmul>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	a322      	add	r3, pc, #136	; (adr r3, 8001f88 <afe_data_read+0x220>)
 8001efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f02:	f7fe f989 	bl	8000218 <__aeabi_dsub>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f7fe fd4d 	bl	80009ac <__aeabi_d2f>
 8001f12:	4603      	mov	r3, r0
 8001f14:	4a21      	ldr	r2, [pc, #132]	; (8001f9c <afe_data_read+0x234>)
 8001f16:	6413      	str	r3, [r2, #64]	; 0x40
    for(uint8_t i=0;i<10;i++)
 8001f18:	2300      	movs	r3, #0
 8001f1a:	717b      	strb	r3, [r7, #5]
 8001f1c:	e01e      	b.n	8001f5c <afe_data_read+0x1f4>
    {
      AFE_info.CellVoltages[i] = 0.001*(AFE_data.cellvoltages[i]);          //Returns Cell Voltages in Volts (V)
 8001f1e:	797b      	ldrb	r3, [r7, #5]
 8001f20:	4a1d      	ldr	r2, [pc, #116]	; (8001f98 <afe_data_read+0x230>)
 8001f22:	3304      	adds	r3, #4
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	885b      	ldrh	r3, [r3, #2]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fac2 	bl	80004b4 <__aeabi_i2d>
 8001f30:	a317      	add	r3, pc, #92	; (adr r3, 8001f90 <afe_data_read+0x228>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	f7fe fb27 	bl	8000588 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	797c      	ldrb	r4, [r7, #5]
 8001f40:	4610      	mov	r0, r2
 8001f42:	4619      	mov	r1, r3
 8001f44:	f7fe fd32 	bl	80009ac <__aeabi_d2f>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4914      	ldr	r1, [pc, #80]	; (8001f9c <afe_data_read+0x234>)
 8001f4c:	1d23      	adds	r3, r4, #4
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	3304      	adds	r3, #4
 8001f54:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++)
 8001f56:	797b      	ldrb	r3, [r7, #5]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	717b      	strb	r3, [r7, #5]
 8001f5c:	797b      	ldrb	r3, [r7, #5]
 8001f5e:	2b09      	cmp	r3, #9
 8001f60:	d9dd      	bls.n	8001f1e <afe_data_read+0x1b6>
    }
    ret_val = SYS_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	807b      	strh	r3, [r7, #2]
  }while(false);

  return ret_val;
 8001f66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd90      	pop	{r4, r7, pc}
 8001f72:	bf00      	nop
 8001f74:	f3af 8000 	nop.w
 8001f78:	47ae147b 	.word	0x47ae147b
 8001f7c:	3f847ae1 	.word	0x3f847ae1
 8001f80:	9999999a 	.word	0x9999999a
 8001f84:	3fb99999 	.word	0x3fb99999
 8001f88:	66666666 	.word	0x66666666
 8001f8c:	40711266 	.word	0x40711266
 8001f90:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f94:	3f50624d 	.word	0x3f50624d
 8001f98:	200000e8 	.word	0x200000e8
 8001f9c:	2000010c 	.word	0x2000010c

08001fa0 <data_afe_to_can>:

void data_afe_to_can()
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
	batGaugeViT.BAT_gauge_vPack = AFE_data.pack_vol;
 8001fa4:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <data_afe_to_can+0x78>)
 8001fa6:	889a      	ldrh	r2, [r3, #4]
 8001fa8:	4b1c      	ldr	r3, [pc, #112]	; (800201c <data_afe_to_can+0x7c>)
 8001faa:	801a      	strh	r2, [r3, #0]
	batGaugeViT.BAT_gauge_iPack = AFE_data.pack_curr;
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <data_afe_to_can+0x78>)
 8001fae:	891b      	ldrh	r3, [r3, #8]
 8001fb0:	b21a      	sxth	r2, r3
 8001fb2:	4b1a      	ldr	r3, [pc, #104]	; (800201c <data_afe_to_can+0x7c>)
 8001fb4:	805a      	strh	r2, [r3, #2]
	batGaugeViT.BAT_gauge_tPack = AFE_data.temps[0];
 8001fb6:	4b18      	ldr	r3, [pc, #96]	; (8002018 <data_afe_to_can+0x78>)
 8001fb8:	8bda      	ldrh	r2, [r3, #30]
 8001fba:	4b18      	ldr	r3, [pc, #96]	; (800201c <data_afe_to_can+0x7c>)
 8001fbc:	809a      	strh	r2, [r3, #4]
	batAfeBrickA.BAT_afe_vBrick01 = AFE_data.cellvoltages[0];
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <data_afe_to_can+0x78>)
 8001fc0:	895a      	ldrh	r2, [r3, #10]
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <data_afe_to_can+0x80>)
 8001fc4:	801a      	strh	r2, [r3, #0]
	batAfeBrickA.BAT_afe_vBrick02 = AFE_data.cellvoltages[1];
 8001fc6:	4b14      	ldr	r3, [pc, #80]	; (8002018 <data_afe_to_can+0x78>)
 8001fc8:	899a      	ldrh	r2, [r3, #12]
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <data_afe_to_can+0x80>)
 8001fcc:	805a      	strh	r2, [r3, #2]
	batAfeBrickA.BAT_afe_vBrick03 = AFE_data.cellvoltages[2];
 8001fce:	4b12      	ldr	r3, [pc, #72]	; (8002018 <data_afe_to_can+0x78>)
 8001fd0:	89da      	ldrh	r2, [r3, #14]
 8001fd2:	4b13      	ldr	r3, [pc, #76]	; (8002020 <data_afe_to_can+0x80>)
 8001fd4:	809a      	strh	r2, [r3, #4]
	batAfeBrickA.BAT_afe_vBrick04 = AFE_data.cellvoltages[3];
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <data_afe_to_can+0x78>)
 8001fd8:	8a1a      	ldrh	r2, [r3, #16]
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <data_afe_to_can+0x80>)
 8001fdc:	80da      	strh	r2, [r3, #6]
	batAfeBrickB.BAT_afe_vBrick05 = AFE_data.cellvoltages[4];
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <data_afe_to_can+0x78>)
 8001fe0:	8a5a      	ldrh	r2, [r3, #18]
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <data_afe_to_can+0x84>)
 8001fe4:	801a      	strh	r2, [r3, #0]
	batAfeBrickB.BAT_afe_vBrick06 = AFE_data.cellvoltages[5];
 8001fe6:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <data_afe_to_can+0x78>)
 8001fe8:	8a9a      	ldrh	r2, [r3, #20]
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <data_afe_to_can+0x84>)
 8001fec:	805a      	strh	r2, [r3, #2]
	batAfeBrickB.BAT_afe_vBrick07 = AFE_data.cellvoltages[6];
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <data_afe_to_can+0x78>)
 8001ff0:	8ada      	ldrh	r2, [r3, #22]
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <data_afe_to_can+0x84>)
 8001ff4:	809a      	strh	r2, [r3, #4]
	batAfeBrickB.BAT_afe_vBrick08 = AFE_data.cellvoltages[7];
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <data_afe_to_can+0x78>)
 8001ff8:	8b1a      	ldrh	r2, [r3, #24]
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <data_afe_to_can+0x84>)
 8001ffc:	80da      	strh	r2, [r3, #6]
	batAfeBrickC.BAT_afe_vBrick09 = AFE_data.cellvoltages[8];
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <data_afe_to_can+0x78>)
 8002000:	8b5a      	ldrh	r2, [r3, #26]
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <data_afe_to_can+0x88>)
 8002004:	801a      	strh	r2, [r3, #0]
	batAfeBrickC.BAT_afe_vBrick10 = AFE_data.cellvoltages[9];
 8002006:	4b04      	ldr	r3, [pc, #16]	; (8002018 <data_afe_to_can+0x78>)
 8002008:	8b9a      	ldrh	r2, [r3, #28]
 800200a:	4b07      	ldr	r3, [pc, #28]	; (8002028 <data_afe_to_can+0x88>)
 800200c:	805a      	strh	r2, [r3, #2]
}
 800200e:	bf00      	nop
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	200000e8 	.word	0x200000e8
 800201c:	2000017c 	.word	0x2000017c
 8002020:	2000015c 	.word	0x2000015c
 8002024:	20000164 	.word	0x20000164
 8002028:	2000016c 	.word	0x2000016c

0800202c <app_afe_init>:

int16_t app_afe_init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8002032:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002036:	80fb      	strh	r3, [r7, #6]
	do
	{
		HAL_GPIO_WritePin(SP1_CS_GPIO_Port, SP1_CS_Pin, 1);
 8002038:	2201      	movs	r2, #1
 800203a:	2110      	movs	r1, #16
 800203c:	4806      	ldr	r0, [pc, #24]	; (8002058 <app_afe_init+0x2c>)
 800203e:	f004 f923 	bl	8006288 <HAL_GPIO_WritePin>
	    bq76952_init();
 8002042:	f7ff f98d 	bl	8001360 <bq76952_init>
		ret_val = SYS_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	80fb      	strh	r3, [r7, #6]
	}while(false);

	return ret_val;
 800204a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40020800 	.word	0x40020800

0800205c <app_gauge_init>:

	return ret_val;
}

int16_t app_gauge_init(void)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
    int16_t ret_val = SYS_ERR;
 8002062:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002066:	80fb      	strh	r3, [r7, #6]

    // Config block reads
    block_read_cfg[eAlgoFet_BLOCK0].Addr = 0x02u;
 8002068:	4b07      	ldr	r3, [pc, #28]	; (8002088 <app_gauge_init+0x2c>)
 800206a:	2202      	movs	r2, #2
 800206c:	701a      	strb	r2, [r3, #0]
    block_read_cfg[eAlgoFet_BLOCK0].Len = 18u;
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <app_gauge_init+0x2c>)
 8002070:	2212      	movs	r2, #18
 8002072:	705a      	strb	r2, [r3, #1]

    ret_val = SYS_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	80fb      	strh	r3, [r7, #6]

    return ret_val;
 8002078:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	20000184 	.word	0x20000184

0800208c <app_sys_init>:

#include "app_afe.h"
#include "app_fuel_gauge.h"

int16_t app_sys_init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 8002092:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002096:	80fb      	strh	r3, [r7, #6]
	do
	{
		// TODO:
		// IO Init
		(void) MX_GPIO_Init();
 8002098:	f000 fe1e 	bl	8002cd8 <MX_GPIO_Init>
		// I2C Init
		(void) MX_I2C1_Init();
 800209c:	f000 fef8 	bl	8002e90 <MX_I2C1_Init>
		// SPI Init
		(void) MX_SPI1_Init();
 80020a0:	f001 f886 	bl	80031b0 <MX_SPI1_Init>
		// CAN Init
		(void) MX_CAN1_Init();
 80020a4:	f000 f9fc 	bl	80024a0 <MX_CAN1_Init>
		// PWM Init
		(void) MX_DMA_Init();
 80020a8:	f000 fc88 	bl	80029bc <MX_DMA_Init>
		// ADC Init
		(void) MX_ADC1_Init();
 80020ac:	f000 f822 	bl	80020f4 <MX_ADC1_Init>

	}while(false);

	return ret_val;
 80020b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <app_sys_peripheral_init>:

int16_t app_sys_peripheral_init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
	int16_t ret_val = SYS_ERR;
 80020c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020c6:	80fb      	strh	r3, [r7, #6]
	do
	{
		// TODO:
		// AFE Init
		if(SYS_OK != app_afe_init())
 80020c8:	f7ff ffb0 	bl	800202c <app_afe_init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d107      	bne.n	80020e2 <app_sys_peripheral_init+0x26>
		{
			break;
		}
		// Fuel Gauge Init
		if(SYS_OK != app_gauge_init())
 80020d2:	f7ff ffc3 	bl	800205c <app_gauge_init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d104      	bne.n	80020e6 <app_sys_peripheral_init+0x2a>
//		{
//		    break;
//		}
		// CAN NW Init

		ret_val = SYS_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	80fb      	strh	r3, [r7, #6]
 80020e0:	e002      	b.n	80020e8 <app_sys_peripheral_init+0x2c>
			break;
 80020e2:	bf00      	nop
 80020e4:	e000      	b.n	80020e8 <app_sys_peripheral_init+0x2c>
			break;
 80020e6:	bf00      	nop
	}while(false);

	return ret_val;
 80020e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020fa:	463b      	mov	r3, r7
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002106:	4b21      	ldr	r3, [pc, #132]	; (800218c <MX_ADC1_Init+0x98>)
 8002108:	4a21      	ldr	r2, [pc, #132]	; (8002190 <MX_ADC1_Init+0x9c>)
 800210a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800210c:	4b1f      	ldr	r3, [pc, #124]	; (800218c <MX_ADC1_Init+0x98>)
 800210e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002112:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002114:	4b1d      	ldr	r3, [pc, #116]	; (800218c <MX_ADC1_Init+0x98>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <MX_ADC1_Init+0x98>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002120:	4b1a      	ldr	r3, [pc, #104]	; (800218c <MX_ADC1_Init+0x98>)
 8002122:	2200      	movs	r2, #0
 8002124:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <MX_ADC1_Init+0x98>)
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800212e:	4b17      	ldr	r3, [pc, #92]	; (800218c <MX_ADC1_Init+0x98>)
 8002130:	2200      	movs	r2, #0
 8002132:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <MX_ADC1_Init+0x98>)
 8002136:	4a17      	ldr	r2, [pc, #92]	; (8002194 <MX_ADC1_Init+0xa0>)
 8002138:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800213a:	4b14      	ldr	r3, [pc, #80]	; (800218c <MX_ADC1_Init+0x98>)
 800213c:	2200      	movs	r2, #0
 800213e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <MX_ADC1_Init+0x98>)
 8002142:	2201      	movs	r2, #1
 8002144:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <MX_ADC1_Init+0x98>)
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <MX_ADC1_Init+0x98>)
 8002150:	2201      	movs	r2, #1
 8002152:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002154:	480d      	ldr	r0, [pc, #52]	; (800218c <MX_ADC1_Init+0x98>)
 8002156:	f001 fb73 	bl	8003840 <HAL_ADC_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002160:	f001 f816 	bl	8003190 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002164:	230a      	movs	r3, #10
 8002166:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002168:	2301      	movs	r3, #1
 800216a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002170:	463b      	mov	r3, r7
 8002172:	4619      	mov	r1, r3
 8002174:	4805      	ldr	r0, [pc, #20]	; (800218c <MX_ADC1_Init+0x98>)
 8002176:	f001 fccf 	bl	8003b18 <HAL_ADC_ConfigChannel>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002180:	f001 f806 	bl	8003190 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002184:	bf00      	nop
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	2000018c 	.word	0x2000018c
 8002190:	40012000 	.word	0x40012000
 8002194:	0f000001 	.word	0x0f000001

08002198 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a17      	ldr	r2, [pc, #92]	; (8002214 <HAL_ADC_MspInit+0x7c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d127      	bne.n	800220a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	4b16      	ldr	r3, [pc, #88]	; (8002218 <HAL_ADC_MspInit+0x80>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	4a15      	ldr	r2, [pc, #84]	; (8002218 <HAL_ADC_MspInit+0x80>)
 80021c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <HAL_ADC_MspInit+0x80>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <HAL_ADC_MspInit+0x80>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a0e      	ldr	r2, [pc, #56]	; (8002218 <HAL_ADC_MspInit+0x80>)
 80021e0:	f043 0304 	orr.w	r3, r3, #4
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <HAL_ADC_MspInit+0x80>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = TEMP1_IN_Pin|TEMP2_IN_Pin;
 80021f2:	2303      	movs	r3, #3
 80021f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021f6:	2303      	movs	r3, #3
 80021f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021fe:	f107 0314 	add.w	r3, r7, #20
 8002202:	4619      	mov	r1, r3
 8002204:	4805      	ldr	r0, [pc, #20]	; (800221c <HAL_ADC_MspInit+0x84>)
 8002206:	f003 fd1b 	bl	8005c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800220a:	bf00      	nop
 800220c:	3728      	adds	r7, #40	; 0x28
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40012000 	.word	0x40012000
 8002218:	40023800 	.word	0x40023800
 800221c:	40020800 	.word	0x40020800

08002220 <HAL_CAN_RxFifo0MsgPendingCallback>:
int count = 0;
uint32_t id;
uint8_t state[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_13);
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <tx_header_bat_bms_ovr>:

void tx_header_bat_bms_ovr()
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
	TxBatBmsOvr.DLC = BAT_BMS_OvrVIEW_DLC;
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <tx_header_bat_bms_ovr+0x34>)
 800223a:	2202      	movs	r2, #2
 800223c:	611a      	str	r2, [r3, #16]
	TxBatBmsOvr.ExtId = 0;
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <tx_header_bat_bms_ovr+0x34>)
 8002240:	2200      	movs	r2, #0
 8002242:	605a      	str	r2, [r3, #4]
	TxBatBmsOvr.IDE = CAN_ID_STD;
 8002244:	4b08      	ldr	r3, [pc, #32]	; (8002268 <tx_header_bat_bms_ovr+0x34>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
	TxBatBmsOvr.RTR = CAN_RTR_DATA;
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <tx_header_bat_bms_ovr+0x34>)
 800224c:	2200      	movs	r2, #0
 800224e:	60da      	str	r2, [r3, #12]
	TxBatBmsOvr.StdId = BAT_BMS_OvrVIEW_CANID;
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <tx_header_bat_bms_ovr+0x34>)
 8002252:	4a06      	ldr	r2, [pc, #24]	; (800226c <tx_header_bat_bms_ovr+0x38>)
 8002254:	601a      	str	r2, [r3, #0]
	TxBatBmsOvr.TransmitGlobalTime = DISABLE;
 8002256:	4b04      	ldr	r3, [pc, #16]	; (8002268 <tx_header_bat_bms_ovr+0x34>)
 8002258:	2200      	movs	r2, #0
 800225a:	751a      	strb	r2, [r3, #20]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	2000020c 	.word	0x2000020c
 800226c:	001ff610 	.word	0x001ff610

08002270 <tx_header_bat_bms_ext_temp>:

void tx_header_bat_bms_ext_temp()
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
	TxBatExtTemp.DLC = BAT_BMS_ExtTemp_DLC;
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <tx_header_bat_bms_ext_temp+0x34>)
 8002276:	2204      	movs	r2, #4
 8002278:	611a      	str	r2, [r3, #16]
	TxBatExtTemp.ExtId = 0;
 800227a:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <tx_header_bat_bms_ext_temp+0x34>)
 800227c:	2200      	movs	r2, #0
 800227e:	605a      	str	r2, [r3, #4]
	TxBatExtTemp.IDE = CAN_ID_STD;
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <tx_header_bat_bms_ext_temp+0x34>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
	TxBatExtTemp.RTR = CAN_RTR_DATA;
 8002286:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <tx_header_bat_bms_ext_temp+0x34>)
 8002288:	2200      	movs	r2, #0
 800228a:	60da      	str	r2, [r3, #12]
	TxBatExtTemp.StdId = BAT_BMS_ExtTemp_CANID;
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <tx_header_bat_bms_ext_temp+0x34>)
 800228e:	4a06      	ldr	r2, [pc, #24]	; (80022a8 <tx_header_bat_bms_ext_temp+0x38>)
 8002290:	601a      	str	r2, [r3, #0]
	TxBatExtTemp.TransmitGlobalTime = DISABLE;
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <tx_header_bat_bms_ext_temp+0x34>)
 8002294:	2200      	movs	r2, #0
 8002296:	751a      	strb	r2, [r3, #20]
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	20000224 	.word	0x20000224
 80022a8:	001ff611 	.word	0x001ff611

080022ac <tx_header_bat_gauge_ovr>:

void tx_header_bat_gauge_ovr()
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
	TxBatGaugeOvr.DLC = BAT_GAUGE_OvrVIEW_DLC;
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <tx_header_bat_gauge_ovr+0x34>)
 80022b2:	2204      	movs	r2, #4
 80022b4:	611a      	str	r2, [r3, #16]
	TxBatGaugeOvr.ExtId = 0;
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <tx_header_bat_gauge_ovr+0x34>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	605a      	str	r2, [r3, #4]
	TxBatGaugeOvr.IDE = CAN_ID_STD;
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <tx_header_bat_gauge_ovr+0x34>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
	TxBatGaugeOvr.RTR = CAN_RTR_DATA;
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <tx_header_bat_gauge_ovr+0x34>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	60da      	str	r2, [r3, #12]
	TxBatGaugeOvr.StdId = BAT_GAUGE_OvrVIEW_CANID;
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <tx_header_bat_gauge_ovr+0x34>)
 80022ca:	4a06      	ldr	r2, [pc, #24]	; (80022e4 <tx_header_bat_gauge_ovr+0x38>)
 80022cc:	601a      	str	r2, [r3, #0]
	TxBatGaugeOvr.TransmitGlobalTime = DISABLE;
 80022ce:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <tx_header_bat_gauge_ovr+0x34>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	751a      	strb	r2, [r3, #20]
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	2000023c 	.word	0x2000023c
 80022e4:	001ff810 	.word	0x001ff810

080022e8 <tx_header_bat_gauge_Vit>:

void tx_header_bat_gauge_Vit()
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
	TxBatGaugeVit.DLC = BAT_GAUGE_ViT_DLC;
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <tx_header_bat_gauge_Vit+0x34>)
 80022ee:	2206      	movs	r2, #6
 80022f0:	611a      	str	r2, [r3, #16]
	TxBatGaugeVit.ExtId = 0;
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <tx_header_bat_gauge_Vit+0x34>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	605a      	str	r2, [r3, #4]
	TxBatGaugeVit.IDE = CAN_ID_STD;
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <tx_header_bat_gauge_Vit+0x34>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
	TxBatGaugeVit.RTR = CAN_RTR_DATA;
 80022fe:	4b07      	ldr	r3, [pc, #28]	; (800231c <tx_header_bat_gauge_Vit+0x34>)
 8002300:	2200      	movs	r2, #0
 8002302:	60da      	str	r2, [r3, #12]
	TxBatGaugeVit.StdId = BAT_GAUGE_ViT_CANID;
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <tx_header_bat_gauge_Vit+0x34>)
 8002306:	4a06      	ldr	r2, [pc, #24]	; (8002320 <tx_header_bat_gauge_Vit+0x38>)
 8002308:	601a      	str	r2, [r3, #0]
	TxBatGaugeVit.TransmitGlobalTime = DISABLE;
 800230a:	4b04      	ldr	r3, [pc, #16]	; (800231c <tx_header_bat_gauge_Vit+0x34>)
 800230c:	2200      	movs	r2, #0
 800230e:	751a      	strb	r2, [r3, #20]
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20000254 	.word	0x20000254
 8002320:	001ff820 	.word	0x001ff820

08002324 <tx_header_bat_brickA_Vit>:

void tx_header_bat_brickA_Vit()
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
	TxBrickAViT.DLC = BAT_AFE_vBRICK_A_DLC;
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <tx_header_bat_brickA_Vit+0x34>)
 800232a:	2208      	movs	r2, #8
 800232c:	611a      	str	r2, [r3, #16]
	TxBrickAViT.ExtId = 0;
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <tx_header_bat_brickA_Vit+0x34>)
 8002330:	2200      	movs	r2, #0
 8002332:	605a      	str	r2, [r3, #4]
	TxBrickAViT.IDE = CAN_ID_STD;
 8002334:	4b08      	ldr	r3, [pc, #32]	; (8002358 <tx_header_bat_brickA_Vit+0x34>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
	TxBrickAViT.RTR = CAN_RTR_DATA;
 800233a:	4b07      	ldr	r3, [pc, #28]	; (8002358 <tx_header_bat_brickA_Vit+0x34>)
 800233c:	2200      	movs	r2, #0
 800233e:	60da      	str	r2, [r3, #12]
	TxBrickAViT.StdId = BAT_AFE_vBRICK_A_CANID;
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <tx_header_bat_brickA_Vit+0x34>)
 8002342:	4a06      	ldr	r2, [pc, #24]	; (800235c <tx_header_bat_brickA_Vit+0x38>)
 8002344:	601a      	str	r2, [r3, #0]
	TxBrickAViT.TransmitGlobalTime = DISABLE;
 8002346:	4b04      	ldr	r3, [pc, #16]	; (8002358 <tx_header_bat_brickA_Vit+0x34>)
 8002348:	2200      	movs	r2, #0
 800234a:	751a      	strb	r2, [r3, #20]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	2000026c 	.word	0x2000026c
 800235c:	001ff710 	.word	0x001ff710

08002360 <tx_header_bat_brickB_Vit>:

void tx_header_bat_brickB_Vit()
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
	TxBrickBViT.DLC = BAT_AFE_vBRICK_B_DLC;
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <tx_header_bat_brickB_Vit+0x34>)
 8002366:	2208      	movs	r2, #8
 8002368:	611a      	str	r2, [r3, #16]
	TxBrickBViT.ExtId = 0;
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <tx_header_bat_brickB_Vit+0x34>)
 800236c:	2200      	movs	r2, #0
 800236e:	605a      	str	r2, [r3, #4]
	TxBrickBViT.IDE = CAN_ID_STD;
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <tx_header_bat_brickB_Vit+0x34>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
	TxBrickBViT.RTR = CAN_RTR_DATA;
 8002376:	4b07      	ldr	r3, [pc, #28]	; (8002394 <tx_header_bat_brickB_Vit+0x34>)
 8002378:	2200      	movs	r2, #0
 800237a:	60da      	str	r2, [r3, #12]
	TxBrickBViT.StdId = BAT_AFE_vBRICK_B_CANID;
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <tx_header_bat_brickB_Vit+0x34>)
 800237e:	4a06      	ldr	r2, [pc, #24]	; (8002398 <tx_header_bat_brickB_Vit+0x38>)
 8002380:	601a      	str	r2, [r3, #0]
	TxBrickBViT.TransmitGlobalTime = DISABLE;
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <tx_header_bat_brickB_Vit+0x34>)
 8002384:	2200      	movs	r2, #0
 8002386:	751a      	strb	r2, [r3, #20]
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000284 	.word	0x20000284
 8002398:	001ff711 	.word	0x001ff711

0800239c <tx_header_bat_brickC_Vit>:

void tx_header_bat_brickC_Vit()
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
	TxBrickCViT.DLC = BAT_AFE_vBRICK_C_DLC;
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <tx_header_bat_brickC_Vit+0x34>)
 80023a2:	2208      	movs	r2, #8
 80023a4:	611a      	str	r2, [r3, #16]
	TxBrickCViT.ExtId = 0;
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <tx_header_bat_brickC_Vit+0x34>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	605a      	str	r2, [r3, #4]
	TxBrickCViT.IDE = CAN_ID_STD;
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <tx_header_bat_brickC_Vit+0x34>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
	TxBrickCViT.RTR = CAN_RTR_DATA;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <tx_header_bat_brickC_Vit+0x34>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	60da      	str	r2, [r3, #12]
	TxBrickCViT.StdId = BAT_AFE_vBRICK_C_CANID;
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <tx_header_bat_brickC_Vit+0x34>)
 80023ba:	4a06      	ldr	r2, [pc, #24]	; (80023d4 <tx_header_bat_brickC_Vit+0x38>)
 80023bc:	601a      	str	r2, [r3, #0]
	TxBrickCViT.TransmitGlobalTime = DISABLE;
 80023be:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <tx_header_bat_brickC_Vit+0x34>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	751a      	strb	r2, [r3, #20]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	2000029c 	.word	0x2000029c
 80023d4:	001ff712 	.word	0x001ff712

080023d8 <tx_header_bat_brickD_vit>:

void tx_header_bat_brickD_vit()
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
	TxBrickDViT.DLC = BAT_AFE_vBRICK_D_DLC;
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <tx_header_bat_brickD_vit+0x34>)
 80023de:	2204      	movs	r2, #4
 80023e0:	611a      	str	r2, [r3, #16]
	TxBrickDViT.ExtId = 0;
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <tx_header_bat_brickD_vit+0x34>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	605a      	str	r2, [r3, #4]
	TxBrickDViT.IDE = CAN_ID_STD;
 80023e8:	4b08      	ldr	r3, [pc, #32]	; (800240c <tx_header_bat_brickD_vit+0x34>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
	TxBrickDViT.RTR = CAN_RTR_DATA;
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <tx_header_bat_brickD_vit+0x34>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	60da      	str	r2, [r3, #12]
	TxBrickDViT.StdId = BAT_AFE_vBRICK_D_CANID;
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <tx_header_bat_brickD_vit+0x34>)
 80023f6:	4a06      	ldr	r2, [pc, #24]	; (8002410 <tx_header_bat_brickD_vit+0x38>)
 80023f8:	601a      	str	r2, [r3, #0]
	TxBrickDViT.TransmitGlobalTime = DISABLE;
 80023fa:	4b04      	ldr	r3, [pc, #16]	; (800240c <tx_header_bat_brickD_vit+0x34>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	751a      	strb	r2, [r3, #20]
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	200002b4 	.word	0x200002b4
 8002410:	001ff713 	.word	0x001ff713

08002414 <rx_header_fcu_state>:

void rx_header_fcu_state()
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
	RxHeader.DLC = 8;
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <rx_header_fcu_state+0x2c>)
 800241a:	2208      	movs	r2, #8
 800241c:	611a      	str	r2, [r3, #16]
	RxHeader.ExtId = 0;
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <rx_header_fcu_state+0x2c>)
 8002420:	2200      	movs	r2, #0
 8002422:	605a      	str	r2, [r3, #4]
	RxHeader.IDE = CAN_ID_STD;
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <rx_header_fcu_state+0x2c>)
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
	RxHeader.RTR = CAN_RTR_REMOTE;
 800242a:	4b05      	ldr	r3, [pc, #20]	; (8002440 <rx_header_fcu_state+0x2c>)
 800242c:	2202      	movs	r2, #2
 800242e:	60da      	str	r2, [r3, #12]
	RxHeader.StdId = 0x00;
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <rx_header_fcu_state+0x2c>)
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
}
 8002436:	bf00      	nop
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	200002cc 	.word	0x200002cc

08002444 <set_filter_config>:

void set_filter_config()
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002448:	4b13      	ldr	r3, [pc, #76]	; (8002498 <set_filter_config+0x54>)
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]
	filterConfig.FilterActivation = ENABLE;
 800244e:	4b12      	ldr	r3, [pc, #72]	; (8002498 <set_filter_config+0x54>)
 8002450:	2201      	movs	r2, #1
 8002452:	621a      	str	r2, [r3, #32]
	filterConfig.FilterBank = 2;
 8002454:	4b10      	ldr	r3, [pc, #64]	; (8002498 <set_filter_config+0x54>)
 8002456:	2202      	movs	r2, #2
 8002458:	615a      	str	r2, [r3, #20]
	filterConfig.FilterIdLow = 0x0101;
 800245a:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <set_filter_config+0x54>)
 800245c:	f240 1201 	movw	r2, #257	; 0x101
 8002460:	605a      	str	r2, [r3, #4]
	filterConfig.FilterIdHigh = 0x0000;
 8002462:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <set_filter_config+0x54>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
	filterConfig.FilterMaskIdLow = 0x1101;
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <set_filter_config+0x54>)
 800246a:	f241 1201 	movw	r2, #4353	; 0x1101
 800246e:	60da      	str	r2, [r3, #12]
	filterConfig.FilterMaskIdHigh = 0x1111;
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <set_filter_config+0x54>)
 8002472:	f241 1211 	movw	r2, #4369	; 0x1111
 8002476:	609a      	str	r2, [r3, #8]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002478:	4b07      	ldr	r3, [pc, #28]	; (8002498 <set_filter_config+0x54>)
 800247a:	2200      	movs	r2, #0
 800247c:	619a      	str	r2, [r3, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <set_filter_config+0x54>)
 8002480:	2201      	movs	r2, #1
 8002482:	61da      	str	r2, [r3, #28]
	filterConfig.SlaveStartFilterBank = 3;
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <set_filter_config+0x54>)
 8002486:	2203      	movs	r2, #3
 8002488:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 800248a:	4903      	ldr	r1, [pc, #12]	; (8002498 <set_filter_config+0x54>)
 800248c:	4803      	ldr	r0, [pc, #12]	; (800249c <set_filter_config+0x58>)
 800248e:	f002 f82d 	bl	80044ec <HAL_CAN_ConfigFilter>
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200001d4 	.word	0x200001d4
 800249c:	200002fc 	.word	0x200002fc

080024a0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80024a4:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <MX_CAN1_Init+0x70>)
 80024a6:	4a1b      	ldr	r2, [pc, #108]	; (8002514 <MX_CAN1_Init+0x74>)
 80024a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80024aa:	4b19      	ldr	r3, [pc, #100]	; (8002510 <MX_CAN1_Init+0x70>)
 80024ac:	2205      	movs	r2, #5
 80024ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <MX_CAN1_Init+0x70>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80024b6:	4b16      	ldr	r3, [pc, #88]	; (8002510 <MX_CAN1_Init+0x70>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <MX_CAN1_Init+0x70>)
 80024be:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80024c2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <MX_CAN1_Init+0x70>)
 80024c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024ca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80024cc:	4b10      	ldr	r3, [pc, #64]	; (8002510 <MX_CAN1_Init+0x70>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <MX_CAN1_Init+0x70>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80024d8:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <MX_CAN1_Init+0x70>)
 80024da:	2200      	movs	r2, #0
 80024dc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <MX_CAN1_Init+0x70>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80024e4:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <MX_CAN1_Init+0x70>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <MX_CAN1_Init+0x70>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80024f0:	4807      	ldr	r0, [pc, #28]	; (8002510 <MX_CAN1_Init+0x70>)
 80024f2:	f001 fd91 	bl	8004018 <HAL_CAN_Init>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80024fc:	f000 fe48 	bl	8003190 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  HAL_CAN_Start(&hcan1);
 8002500:	4803      	ldr	r0, [pc, #12]	; (8002510 <MX_CAN1_Init+0x70>)
 8002502:	f002 f941 	bl	8004788 <HAL_CAN_Start>
  rx_header_fcu_state();
 8002506:	f7ff ff85 	bl	8002414 <rx_header_fcu_state>

  /* USER CODE END CAN1_Init 2 */

}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200002fc 	.word	0x200002fc
 8002514:	40006400 	.word	0x40006400

08002518 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	; 0x28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a29      	ldr	r2, [pc, #164]	; (80025dc <HAL_CAN_MspInit+0xc4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d14c      	bne.n	80025d4 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <HAL_CAN_MspInit+0xc8>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	4a27      	ldr	r2, [pc, #156]	; (80025e0 <HAL_CAN_MspInit+0xc8>)
 8002544:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002548:	6413      	str	r3, [r2, #64]	; 0x40
 800254a:	4b25      	ldr	r3, [pc, #148]	; (80025e0 <HAL_CAN_MspInit+0xc8>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b21      	ldr	r3, [pc, #132]	; (80025e0 <HAL_CAN_MspInit+0xc8>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4a20      	ldr	r2, [pc, #128]	; (80025e0 <HAL_CAN_MspInit+0xc8>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <HAL_CAN_MspInit+0xc8>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002572:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002578:	2302      	movs	r3, #2
 800257a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002580:	2303      	movs	r3, #3
 8002582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002584:	2309      	movs	r3, #9
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	4619      	mov	r1, r3
 800258e:	4815      	ldr	r0, [pc, #84]	; (80025e4 <HAL_CAN_MspInit+0xcc>)
 8002590:	f003 fb56 	bl	8005c40 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8002594:	2200      	movs	r2, #0
 8002596:	2105      	movs	r1, #5
 8002598:	2013      	movs	r0, #19
 800259a:	f002 fe87 	bl	80052ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800259e:	2013      	movs	r0, #19
 80025a0:	f002 feb0 	bl	8005304 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80025a4:	2200      	movs	r2, #0
 80025a6:	2105      	movs	r1, #5
 80025a8:	2014      	movs	r0, #20
 80025aa:	f002 fe7f 	bl	80052ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80025ae:	2014      	movs	r0, #20
 80025b0:	f002 fea8 	bl	8005304 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80025b4:	2200      	movs	r2, #0
 80025b6:	2105      	movs	r1, #5
 80025b8:	2015      	movs	r0, #21
 80025ba:	f002 fe77 	bl	80052ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80025be:	2015      	movs	r0, #21
 80025c0:	f002 fea0 	bl	8005304 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 80025c4:	2200      	movs	r2, #0
 80025c6:	2105      	movs	r1, #5
 80025c8:	2016      	movs	r0, #22
 80025ca:	f002 fe6f 	bl	80052ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80025ce:	2016      	movs	r0, #22
 80025d0:	f002 fe98 	bl	8005304 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80025d4:	bf00      	nop
 80025d6:	3728      	adds	r7, #40	; 0x28
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40006400 	.word	0x40006400
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40020000 	.word	0x40020000

080025e8 <can_bat_gauge_ovr_write_data>:
  }
}

/* USER CODE BEGIN 1 */
void can_bat_gauge_ovr_write_data(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
	tx_header_bat_gauge_ovr();
 80025ec:	f7ff fe5e 	bl	80022ac <tx_header_bat_gauge_ovr>
	id = Pack_BAT_GAUGE_OvrVIEW_can_codegen(&batGaugeOvr, &canFrame);
 80025f0:	4909      	ldr	r1, [pc, #36]	; (8002618 <can_bat_gauge_ovr_write_data+0x30>)
 80025f2:	480a      	ldr	r0, [pc, #40]	; (800261c <can_bat_gauge_ovr_write_data+0x34>)
 80025f4:	f7fe fe02 	bl	80011fc <Pack_BAT_GAUGE_OvrVIEW_can_codegen>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4a09      	ldr	r2, [pc, #36]	; (8002620 <can_bat_gauge_ovr_write_data+0x38>)
 80025fc:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff810)
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <can_bat_gauge_ovr_write_data+0x38>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a08      	ldr	r2, [pc, #32]	; (8002624 <can_bat_gauge_ovr_write_data+0x3c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d105      	bne.n	8002614 <can_bat_gauge_ovr_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBatGaugeOvr, canFrame.Data, &mailbox1Hz);
 8002608:	4b07      	ldr	r3, [pc, #28]	; (8002628 <can_bat_gauge_ovr_write_data+0x40>)
 800260a:	4a08      	ldr	r2, [pc, #32]	; (800262c <can_bat_gauge_ovr_write_data+0x44>)
 800260c:	4908      	ldr	r1, [pc, #32]	; (8002630 <can_bat_gauge_ovr_write_data+0x48>)
 800260e:	4809      	ldr	r0, [pc, #36]	; (8002634 <can_bat_gauge_ovr_write_data+0x4c>)
 8002610:	f002 f8fe 	bl	8004810 <HAL_CAN_AddTxMessage>
}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}
 8002618:	200001fc 	.word	0x200001fc
 800261c:	20000178 	.word	0x20000178
 8002620:	200002f0 	.word	0x200002f0
 8002624:	001ff810 	.word	0x001ff810
 8002628:	200002e8 	.word	0x200002e8
 800262c:	20000201 	.word	0x20000201
 8002630:	2000023c 	.word	0x2000023c
 8002634:	200002fc 	.word	0x200002fc

08002638 <can_bat_gauge_vit_write_data>:

void can_bat_gauge_vit_write_data(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
	tx_header_bat_gauge_Vit();
 800263c:	f7ff fe54 	bl	80022e8 <tx_header_bat_gauge_Vit>
	id = Pack_BAT_GAUGE_ViT_can_codegen(&batGaugeViT, &canFrame);
 8002640:	4909      	ldr	r1, [pc, #36]	; (8002668 <can_bat_gauge_vit_write_data+0x30>)
 8002642:	480a      	ldr	r0, [pc, #40]	; (800266c <can_bat_gauge_vit_write_data+0x34>)
 8002644:	f7fe fe26 	bl	8001294 <Pack_BAT_GAUGE_ViT_can_codegen>
 8002648:	4603      	mov	r3, r0
 800264a:	4a09      	ldr	r2, [pc, #36]	; (8002670 <can_bat_gauge_vit_write_data+0x38>)
 800264c:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff820)
 800264e:	4b08      	ldr	r3, [pc, #32]	; (8002670 <can_bat_gauge_vit_write_data+0x38>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a08      	ldr	r2, [pc, #32]	; (8002674 <can_bat_gauge_vit_write_data+0x3c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d105      	bne.n	8002664 <can_bat_gauge_vit_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBatGaugeVit, canFrame.Data, &mailbox10Hz);
 8002658:	4b07      	ldr	r3, [pc, #28]	; (8002678 <can_bat_gauge_vit_write_data+0x40>)
 800265a:	4a08      	ldr	r2, [pc, #32]	; (800267c <can_bat_gauge_vit_write_data+0x44>)
 800265c:	4908      	ldr	r1, [pc, #32]	; (8002680 <can_bat_gauge_vit_write_data+0x48>)
 800265e:	4809      	ldr	r0, [pc, #36]	; (8002684 <can_bat_gauge_vit_write_data+0x4c>)
 8002660:	f002 f8d6 	bl	8004810 <HAL_CAN_AddTxMessage>
}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}
 8002668:	200001fc 	.word	0x200001fc
 800266c:	2000017c 	.word	0x2000017c
 8002670:	200002f0 	.word	0x200002f0
 8002674:	001ff820 	.word	0x001ff820
 8002678:	200002ec 	.word	0x200002ec
 800267c:	20000201 	.word	0x20000201
 8002680:	20000254 	.word	0x20000254
 8002684:	200002fc 	.word	0x200002fc

08002688 <can_bms_ovr_write_data>:

void can_bms_ovr_write_data(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
	tx_header_bat_bms_ovr();
 800268c:	f7ff fdd2 	bl	8002234 <tx_header_bat_bms_ovr>
	id = Pack_BAT_BMS_OvrVIEW_can_codegen(&batBmsOvr, &canFrame);
 8002690:	4909      	ldr	r1, [pc, #36]	; (80026b8 <can_bms_ovr_write_data+0x30>)
 8002692:	480a      	ldr	r0, [pc, #40]	; (80026bc <can_bms_ovr_write_data+0x34>)
 8002694:	f7fe fb72 	bl	8000d7c <Pack_BAT_BMS_OvrVIEW_can_codegen>
 8002698:	4603      	mov	r3, r0
 800269a:	4a09      	ldr	r2, [pc, #36]	; (80026c0 <can_bms_ovr_write_data+0x38>)
 800269c:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff610)
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <can_bms_ovr_write_data+0x38>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a08      	ldr	r2, [pc, #32]	; (80026c4 <can_bms_ovr_write_data+0x3c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d105      	bne.n	80026b4 <can_bms_ovr_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBatBmsOvr, canFrame.Data, &mailbox10Hz);
 80026a8:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <can_bms_ovr_write_data+0x40>)
 80026aa:	4a08      	ldr	r2, [pc, #32]	; (80026cc <can_bms_ovr_write_data+0x44>)
 80026ac:	4908      	ldr	r1, [pc, #32]	; (80026d0 <can_bms_ovr_write_data+0x48>)
 80026ae:	4809      	ldr	r0, [pc, #36]	; (80026d4 <can_bms_ovr_write_data+0x4c>)
 80026b0:	f002 f8ae 	bl	8004810 <HAL_CAN_AddTxMessage>
}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	200001fc 	.word	0x200001fc
 80026bc:	20000154 	.word	0x20000154
 80026c0:	200002f0 	.word	0x200002f0
 80026c4:	001ff610 	.word	0x001ff610
 80026c8:	200002ec 	.word	0x200002ec
 80026cc:	20000201 	.word	0x20000201
 80026d0:	2000020c 	.word	0x2000020c
 80026d4:	200002fc 	.word	0x200002fc

080026d8 <can_bms_exttemp_write_data>:

void can_bms_exttemp_write_data(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
	tx_header_bat_bms_ext_temp();
 80026dc:	f7ff fdc8 	bl	8002270 <tx_header_bat_bms_ext_temp>
	id = Pack_BAT_BMS_ExtTemp_can_codegen(&batBmsExtTemp, &canFrame);
 80026e0:	4909      	ldr	r1, [pc, #36]	; (8002708 <can_bms_exttemp_write_data+0x30>)
 80026e2:	480a      	ldr	r0, [pc, #40]	; (800270c <can_bms_exttemp_write_data+0x34>)
 80026e4:	f7fe fb82 	bl	8000dec <Pack_BAT_BMS_ExtTemp_can_codegen>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4a09      	ldr	r2, [pc, #36]	; (8002710 <can_bms_exttemp_write_data+0x38>)
 80026ec:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff611)
 80026ee:	4b08      	ldr	r3, [pc, #32]	; (8002710 <can_bms_exttemp_write_data+0x38>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a08      	ldr	r2, [pc, #32]	; (8002714 <can_bms_exttemp_write_data+0x3c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d105      	bne.n	8002704 <can_bms_exttemp_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBatExtTemp, canFrame.Data, &mailbox1Hz);
 80026f8:	4b07      	ldr	r3, [pc, #28]	; (8002718 <can_bms_exttemp_write_data+0x40>)
 80026fa:	4a08      	ldr	r2, [pc, #32]	; (800271c <can_bms_exttemp_write_data+0x44>)
 80026fc:	4908      	ldr	r1, [pc, #32]	; (8002720 <can_bms_exttemp_write_data+0x48>)
 80026fe:	4809      	ldr	r0, [pc, #36]	; (8002724 <can_bms_exttemp_write_data+0x4c>)
 8002700:	f002 f886 	bl	8004810 <HAL_CAN_AddTxMessage>
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}
 8002708:	200001fc 	.word	0x200001fc
 800270c:	20000158 	.word	0x20000158
 8002710:	200002f0 	.word	0x200002f0
 8002714:	001ff611 	.word	0x001ff611
 8002718:	200002e8 	.word	0x200002e8
 800271c:	20000201 	.word	0x20000201
 8002720:	20000224 	.word	0x20000224
 8002724:	200002fc 	.word	0x200002fc

08002728 <can_bat_afe_brickA_write_data>:

void can_bat_afe_brickA_write_data(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
	tx_header_bat_brickA_Vit();
 800272c:	f7ff fdfa 	bl	8002324 <tx_header_bat_brickA_Vit>
	id = Pack_BAT_AFE_vBRICK_A_can_codegen(&batAfeBrickA, &canFrame);
 8002730:	490c      	ldr	r1, [pc, #48]	; (8002764 <can_bat_afe_brickA_write_data+0x3c>)
 8002732:	480d      	ldr	r0, [pc, #52]	; (8002768 <can_bat_afe_brickA_write_data+0x40>)
 8002734:	f7fe fbaa 	bl	8000e8c <Pack_BAT_AFE_vBRICK_A_can_codegen>
 8002738:	4603      	mov	r3, r0
 800273a:	4a0c      	ldr	r2, [pc, #48]	; (800276c <can_bat_afe_brickA_write_data+0x44>)
 800273c:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff710)
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <can_bat_afe_brickA_write_data+0x44>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a0b      	ldr	r2, [pc, #44]	; (8002770 <can_bat_afe_brickA_write_data+0x48>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d105      	bne.n	8002754 <can_bat_afe_brickA_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBrickAViT, canFrame.Data, &mailbox1Hz);
 8002748:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <can_bat_afe_brickA_write_data+0x4c>)
 800274a:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <can_bat_afe_brickA_write_data+0x50>)
 800274c:	490b      	ldr	r1, [pc, #44]	; (800277c <can_bat_afe_brickA_write_data+0x54>)
 800274e:	480c      	ldr	r0, [pc, #48]	; (8002780 <can_bat_afe_brickA_write_data+0x58>)
 8002750:	f002 f85e 	bl	8004810 <HAL_CAN_AddTxMessage>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8002754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002758:	480a      	ldr	r0, [pc, #40]	; (8002784 <can_bat_afe_brickA_write_data+0x5c>)
 800275a:	f003 fdc7 	bl	80062ec <HAL_GPIO_TogglePin>
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200001fc 	.word	0x200001fc
 8002768:	2000015c 	.word	0x2000015c
 800276c:	200002f0 	.word	0x200002f0
 8002770:	001ff710 	.word	0x001ff710
 8002774:	200002e8 	.word	0x200002e8
 8002778:	20000201 	.word	0x20000201
 800277c:	2000026c 	.word	0x2000026c
 8002780:	200002fc 	.word	0x200002fc
 8002784:	40020400 	.word	0x40020400

08002788 <can_bat_afe_brickB_write_data>:

void can_bat_afe_brickB_write_data(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
	tx_header_bat_brickB_Vit();
 800278c:	f7ff fde8 	bl	8002360 <tx_header_bat_brickB_Vit>
	id = Pack_BAT_AFE_vBRICK_B_can_codegen(&batAfeBrickB, &canFrame);
 8002790:	4909      	ldr	r1, [pc, #36]	; (80027b8 <can_bat_afe_brickB_write_data+0x30>)
 8002792:	480a      	ldr	r0, [pc, #40]	; (80027bc <can_bat_afe_brickB_write_data+0x34>)
 8002794:	f7fe fbf2 	bl	8000f7c <Pack_BAT_AFE_vBRICK_B_can_codegen>
 8002798:	4603      	mov	r3, r0
 800279a:	4a09      	ldr	r2, [pc, #36]	; (80027c0 <can_bat_afe_brickB_write_data+0x38>)
 800279c:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff711)
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <can_bat_afe_brickB_write_data+0x38>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a08      	ldr	r2, [pc, #32]	; (80027c4 <can_bat_afe_brickB_write_data+0x3c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d105      	bne.n	80027b4 <can_bat_afe_brickB_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBrickBViT, canFrame.Data, &mailbox1Hz);
 80027a8:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <can_bat_afe_brickB_write_data+0x40>)
 80027aa:	4a08      	ldr	r2, [pc, #32]	; (80027cc <can_bat_afe_brickB_write_data+0x44>)
 80027ac:	4908      	ldr	r1, [pc, #32]	; (80027d0 <can_bat_afe_brickB_write_data+0x48>)
 80027ae:	4809      	ldr	r0, [pc, #36]	; (80027d4 <can_bat_afe_brickB_write_data+0x4c>)
 80027b0:	f002 f82e 	bl	8004810 <HAL_CAN_AddTxMessage>
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	200001fc 	.word	0x200001fc
 80027bc:	20000164 	.word	0x20000164
 80027c0:	200002f0 	.word	0x200002f0
 80027c4:	001ff711 	.word	0x001ff711
 80027c8:	200002e8 	.word	0x200002e8
 80027cc:	20000201 	.word	0x20000201
 80027d0:	20000284 	.word	0x20000284
 80027d4:	200002fc 	.word	0x200002fc

080027d8 <can_bat_afe_brickC_write_data>:

void can_bat_afe_brickC_write_data(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
	tx_header_bat_brickC_Vit();
 80027dc:	f7ff fdde 	bl	800239c <tx_header_bat_brickC_Vit>
	id = Pack_BAT_AFE_vBRICK_C_can_codegen(&batAfeBrickC, &canFrame);
 80027e0:	4909      	ldr	r1, [pc, #36]	; (8002808 <can_bat_afe_brickC_write_data+0x30>)
 80027e2:	480a      	ldr	r0, [pc, #40]	; (800280c <can_bat_afe_brickC_write_data+0x34>)
 80027e4:	f7fe fc42 	bl	800106c <Pack_BAT_AFE_vBRICK_C_can_codegen>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4a09      	ldr	r2, [pc, #36]	; (8002810 <can_bat_afe_brickC_write_data+0x38>)
 80027ec:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff712)
 80027ee:	4b08      	ldr	r3, [pc, #32]	; (8002810 <can_bat_afe_brickC_write_data+0x38>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a08      	ldr	r2, [pc, #32]	; (8002814 <can_bat_afe_brickC_write_data+0x3c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d105      	bne.n	8002804 <can_bat_afe_brickC_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBrickCViT, canFrame.Data, &mailbox1Hz);
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <can_bat_afe_brickC_write_data+0x40>)
 80027fa:	4a08      	ldr	r2, [pc, #32]	; (800281c <can_bat_afe_brickC_write_data+0x44>)
 80027fc:	4908      	ldr	r1, [pc, #32]	; (8002820 <can_bat_afe_brickC_write_data+0x48>)
 80027fe:	4809      	ldr	r0, [pc, #36]	; (8002824 <can_bat_afe_brickC_write_data+0x4c>)
 8002800:	f002 f806 	bl	8004810 <HAL_CAN_AddTxMessage>
}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}
 8002808:	200001fc 	.word	0x200001fc
 800280c:	2000016c 	.word	0x2000016c
 8002810:	200002f0 	.word	0x200002f0
 8002814:	001ff712 	.word	0x001ff712
 8002818:	200002e8 	.word	0x200002e8
 800281c:	20000201 	.word	0x20000201
 8002820:	2000029c 	.word	0x2000029c
 8002824:	200002fc 	.word	0x200002fc

08002828 <can_bat_afe_brickD_write_data>:

void can_bat_afe_brickD_write_data(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
	tx_header_bat_brickD_vit();
 800282c:	f7ff fdd4 	bl	80023d8 <tx_header_bat_brickD_vit>
	id = Pack_BAT_AFE_vBRICK_D_can_codegen(&batAfeBrickD, &canFrame);
 8002830:	4909      	ldr	r1, [pc, #36]	; (8002858 <can_bat_afe_brickD_write_data+0x30>)
 8002832:	480a      	ldr	r0, [pc, #40]	; (800285c <can_bat_afe_brickD_write_data+0x34>)
 8002834:	f7fe fc92 	bl	800115c <Pack_BAT_AFE_vBRICK_D_can_codegen>
 8002838:	4603      	mov	r3, r0
 800283a:	4a09      	ldr	r2, [pc, #36]	; (8002860 <can_bat_afe_brickD_write_data+0x38>)
 800283c:	6013      	str	r3, [r2, #0]
	if(id == 0x1ff713)
 800283e:	4b08      	ldr	r3, [pc, #32]	; (8002860 <can_bat_afe_brickD_write_data+0x38>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a08      	ldr	r2, [pc, #32]	; (8002864 <can_bat_afe_brickD_write_data+0x3c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d105      	bne.n	8002854 <can_bat_afe_brickD_write_data+0x2c>
	HAL_CAN_AddTxMessage(&hcan1, &TxBrickDViT, canFrame.Data, &mailbox1Hz);
 8002848:	4b07      	ldr	r3, [pc, #28]	; (8002868 <can_bat_afe_brickD_write_data+0x40>)
 800284a:	4a08      	ldr	r2, [pc, #32]	; (800286c <can_bat_afe_brickD_write_data+0x44>)
 800284c:	4908      	ldr	r1, [pc, #32]	; (8002870 <can_bat_afe_brickD_write_data+0x48>)
 800284e:	4809      	ldr	r0, [pc, #36]	; (8002874 <can_bat_afe_brickD_write_data+0x4c>)
 8002850:	f001 ffde 	bl	8004810 <HAL_CAN_AddTxMessage>
}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}
 8002858:	200001fc 	.word	0x200001fc
 800285c:	20000174 	.word	0x20000174
 8002860:	200002f0 	.word	0x200002f0
 8002864:	001ff713 	.word	0x001ff713
 8002868:	200002e8 	.word	0x200002e8
 800286c:	20000201 	.word	0x20000201
 8002870:	200002b4 	.word	0x200002b4
 8002874:	200002fc 	.word	0x200002fc

08002878 <can_fcu_read_data>:

void can_fcu_read_data()
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
	set_filter_config();
 800287c:	f7ff fde2 	bl	8002444 <set_filter_config>
	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, state) == HAL_OK)
 8002880:	4b48      	ldr	r3, [pc, #288]	; (80029a4 <can_fcu_read_data+0x12c>)
 8002882:	4a49      	ldr	r2, [pc, #292]	; (80029a8 <can_fcu_read_data+0x130>)
 8002884:	2100      	movs	r1, #0
 8002886:	4849      	ldr	r0, [pc, #292]	; (80029ac <can_fcu_read_data+0x134>)
 8002888:	f002 f8e6 	bl	8004a58 <HAL_CAN_GetRxMessage>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	f040 8083 	bne.w	800299a <can_fcu_read_data+0x122>
		{
		id = Unpack_FCU_STATE_REQUEST_can_codegen(&fcuState, &state, 1);
 8002894:	2201      	movs	r2, #1
 8002896:	4943      	ldr	r1, [pc, #268]	; (80029a4 <can_fcu_read_data+0x12c>)
 8002898:	4845      	ldr	r0, [pc, #276]	; (80029b0 <can_fcu_read_data+0x138>)
 800289a:	f7fe fa59 	bl	8000d50 <Unpack_FCU_STATE_REQUEST_can_codegen>
 800289e:	4603      	mov	r3, r0
 80028a0:	4a44      	ldr	r2, [pc, #272]	; (80029b4 <can_fcu_read_data+0x13c>)
 80028a2:	6013      	str	r3, [r2, #0]
		switch (state[0]) {
 80028a4:	4b3f      	ldr	r3, [pc, #252]	; (80029a4 <can_fcu_read_data+0x12c>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d878      	bhi.n	800299e <can_fcu_read_data+0x126>
 80028ac:	a201      	add	r2, pc, #4	; (adr r2, 80028b4 <can_fcu_read_data+0x3c>)
 80028ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b2:	bf00      	nop
 80028b4:	080028c9 	.word	0x080028c9
 80028b8:	080028f3 	.word	0x080028f3
 80028bc:	0800291d 	.word	0x0800291d
 80028c0:	08002947 	.word	0x08002947
 80028c4:	08002971 	.word	0x08002971
			case 0:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 80028c8:	2201      	movs	r2, #1
 80028ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028ce:	483a      	ldr	r0, [pc, #232]	; (80029b8 <can_fcu_read_data+0x140>)
 80028d0:	f003 fcda 	bl	8006288 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 80028d4:	2200      	movs	r2, #0
 80028d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028da:	4837      	ldr	r0, [pc, #220]	; (80029b8 <can_fcu_read_data+0x140>)
 80028dc:	f003 fcd4 	bl	8006288 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 80028e0:	2200      	movs	r2, #0
 80028e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028e6:	4834      	ldr	r0, [pc, #208]	; (80029b8 <can_fcu_read_data+0x140>)
 80028e8:	f003 fcce 	bl	8006288 <HAL_GPIO_WritePin>
				bq76952_FETs_OFF(); // replace with all fets off function call
 80028ec:	f7fe fe2d 	bl	800154a <bq76952_FETs_OFF>
				break;
 80028f0:	e056      	b.n	80029a0 <can_fcu_read_data+0x128>
			case 1:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
 80028f2:	2201      	movs	r2, #1
 80028f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028f8:	482f      	ldr	r0, [pc, #188]	; (80029b8 <can_fcu_read_data+0x140>)
 80028fa:	f003 fcc5 	bl	8006288 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 80028fe:	2200      	movs	r2, #0
 8002900:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002904:	482c      	ldr	r0, [pc, #176]	; (80029b8 <can_fcu_read_data+0x140>)
 8002906:	f003 fcbf 	bl	8006288 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 800290a:	2200      	movs	r2, #0
 800290c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002910:	4829      	ldr	r0, [pc, #164]	; (80029b8 <can_fcu_read_data+0x140>)
 8002912:	f003 fcb9 	bl	8006288 <HAL_GPIO_WritePin>
				bq76952_FETs_ON(); //replace with all fets on function call
 8002916:	f7fe fdef 	bl	80014f8 <bq76952_FETs_ON>
				break;
 800291a:	e041      	b.n	80029a0 <can_fcu_read_data+0x128>
			case 2:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 800291c:	2201      	movs	r2, #1
 800291e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002922:	4825      	ldr	r0, [pc, #148]	; (80029b8 <can_fcu_read_data+0x140>)
 8002924:	f003 fcb0 	bl	8006288 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 8002928:	2200      	movs	r2, #0
 800292a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800292e:	4822      	ldr	r0, [pc, #136]	; (80029b8 <can_fcu_read_data+0x140>)
 8002930:	f003 fcaa 	bl	8006288 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 8002934:	2200      	movs	r2, #0
 8002936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800293a:	481f      	ldr	r0, [pc, #124]	; (80029b8 <can_fcu_read_data+0x140>)
 800293c:	f003 fca4 	bl	8006288 <HAL_GPIO_WritePin>
				bq76952_AFE_reset();// replace with afe reset function call
 8002940:	f7fe fe66 	bl	8001610 <bq76952_AFE_reset>
				break;
 8002944:	e02c      	b.n	80029a0 <can_fcu_read_data+0x128>
			case 3:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8002946:	2200      	movs	r2, #0
 8002948:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800294c:	481a      	ldr	r0, [pc, #104]	; (80029b8 <can_fcu_read_data+0x140>)
 800294e:	f003 fc9b 	bl	8006288 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 8002952:	2200      	movs	r2, #0
 8002954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002958:	4817      	ldr	r0, [pc, #92]	; (80029b8 <can_fcu_read_data+0x140>)
 800295a:	f003 fc95 	bl	8006288 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 800295e:	2200      	movs	r2, #0
 8002960:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002964:	4814      	ldr	r0, [pc, #80]	; (80029b8 <can_fcu_read_data+0x140>)
 8002966:	f003 fc8f 	bl	8006288 <HAL_GPIO_WritePin>
				bq76952_Charge();
 800296a:	f7fe fe0d 	bl	8001588 <bq76952_Charge>
				break;
 800296e:	e017      	b.n	80029a0 <can_fcu_read_data+0x128>
			case 4:
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8002970:	2201      	movs	r2, #1
 8002972:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002976:	4810      	ldr	r0, [pc, #64]	; (80029b8 <can_fcu_read_data+0x140>)
 8002978:	f003 fc86 	bl	8006288 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
 800297c:	2201      	movs	r2, #1
 800297e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002982:	480d      	ldr	r0, [pc, #52]	; (80029b8 <can_fcu_read_data+0x140>)
 8002984:	f003 fc80 	bl	8006288 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 8002988:	2201      	movs	r2, #1
 800298a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800298e:	480a      	ldr	r0, [pc, #40]	; (80029b8 <can_fcu_read_data+0x140>)
 8002990:	f003 fc7a 	bl	8006288 <HAL_GPIO_WritePin>
				bq76952_Discharge();
 8002994:	f7fe fe1a 	bl	80015cc <bq76952_Discharge>
				break;
 8002998:	e002      	b.n	80029a0 <can_fcu_read_data+0x128>
			default:
				break;
		}
		}
 800299a:	bf00      	nop
 800299c:	e000      	b.n	80029a0 <can_fcu_read_data+0x128>
				break;
 800299e:	bf00      	nop
}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	200002f4 	.word	0x200002f4
 80029a8:	200002cc 	.word	0x200002cc
 80029ac:	200002fc 	.word	0x200002fc
 80029b0:	20000150 	.word	0x20000150
 80029b4:	200002f0 	.word	0x200002f0
 80029b8:	40020400 	.word	0x40020400

080029bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	607b      	str	r3, [r7, #4]
 80029c6:	4b1f      	ldr	r3, [pc, #124]	; (8002a44 <MX_DMA_Init+0x88>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4a1e      	ldr	r2, [pc, #120]	; (8002a44 <MX_DMA_Init+0x88>)
 80029cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029d0:	6313      	str	r3, [r2, #48]	; 0x30
 80029d2:	4b1c      	ldr	r3, [pc, #112]	; (8002a44 <MX_DMA_Init+0x88>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029da:	607b      	str	r3, [r7, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <MX_DMA_Init+0x88>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	4a17      	ldr	r2, [pc, #92]	; (8002a44 <MX_DMA_Init+0x88>)
 80029e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029ec:	6313      	str	r3, [r2, #48]	; 0x30
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <MX_DMA_Init+0x88>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80029fa:	2200      	movs	r2, #0
 80029fc:	2105      	movs	r1, #5
 80029fe:	200b      	movs	r0, #11
 8002a00:	f002 fc54 	bl	80052ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002a04:	200b      	movs	r0, #11
 8002a06:	f002 fc7d 	bl	8005304 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2105      	movs	r1, #5
 8002a0e:	2011      	movs	r0, #17
 8002a10:	f002 fc4c 	bl	80052ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002a14:	2011      	movs	r0, #17
 8002a16:	f002 fc75 	bl	8005304 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	2105      	movs	r1, #5
 8002a1e:	2038      	movs	r0, #56	; 0x38
 8002a20:	f002 fc44 	bl	80052ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002a24:	2038      	movs	r0, #56	; 0x38
 8002a26:	f002 fc6d 	bl	8005304 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2105      	movs	r1, #5
 8002a2e:	203b      	movs	r0, #59	; 0x3b
 8002a30:	f002 fc3c 	bl	80052ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002a34:	203b      	movs	r0, #59	; 0x3b
 8002a36:	f002 fc65 	bl	8005304 <HAL_NVIC_EnableIRQ>

}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800

08002a48 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4a07      	ldr	r2, [pc, #28]	; (8002a74 <vApplicationGetIdleTaskMemory+0x2c>)
 8002a58:	601a      	str	r2, [r3, #0]
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	4a06      	ldr	r2, [pc, #24]	; (8002a78 <vApplicationGetIdleTaskMemory+0x30>)
 8002a5e:	601a      	str	r2, [r3, #0]
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2280      	movs	r2, #128	; 0x80
 8002a64:	601a      	str	r2, [r3, #0]
    /* place for user code */
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000374 	.word	0x20000374
 8002a78:	20000428 	.word	0x20000428

08002a7c <MX_FREERTOS_Init>:
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void)
{
 8002a7c:	b5b0      	push	{r4, r5, r7, lr}
 8002a7e:	b096      	sub	sp, #88	; 0x58
 8002a80:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */
	can_tx_queue = xQueueCreate(10, sizeof(uint32_t)); //to be used to queue the messages being sent on CAN line
 8002a82:	2200      	movs	r2, #0
 8002a84:	2104      	movs	r1, #4
 8002a86:	200a      	movs	r0, #10
 8002a88:	f007 fde0 	bl	800a64c <xQueueGenericCreate>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4a27      	ldr	r2, [pc, #156]	; (8002b2c <MX_FREERTOS_Init+0xb0>)
 8002a90:	6013      	str	r3, [r2, #0]
													//only 3 messages can be transmitted at once at the hardware level.
	can_rx_queue = xQueueCreate(10, sizeof(uint32_t));
 8002a92:	2200      	movs	r2, #0
 8002a94:	2104      	movs	r1, #4
 8002a96:	200a      	movs	r0, #10
 8002a98:	f007 fdd8 	bl	800a64c <xQueueGenericCreate>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4a24      	ldr	r2, [pc, #144]	; (8002b30 <MX_FREERTOS_Init+0xb4>)
 8002aa0:	6013      	str	r3, [r2, #0]


	if(can_tx_queue != NULL)
 8002aa2:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <MX_FREERTOS_Init+0xb0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <MX_FREERTOS_Init+0x3a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ab0:	4820      	ldr	r0, [pc, #128]	; (8002b34 <MX_FREERTOS_Init+0xb8>)
 8002ab2:	f003 fbe9 	bl	8006288 <HAL_GPIO_WritePin>
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* definition and creation of APP_1HZ_TASK */
    osThreadDef(APP_1HZ_TASK, app_task_1Hz, osPriorityNormal, 0, 128);
 8002ab6:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <MX_FREERTOS_Init+0xbc>)
 8002ab8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002abc:	461d      	mov	r5, r3
 8002abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ac2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002ac6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    APP_1HZ_TASKHandle = osThreadCreate(osThread(APP_1HZ_TASK), NULL);
 8002aca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f007 fc53 	bl	800a37c <osThreadCreate>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4a18      	ldr	r2, [pc, #96]	; (8002b3c <MX_FREERTOS_Init+0xc0>)
 8002ada:	6013      	str	r3, [r2, #0]

  /* definition and creation of APP_10HZ_TASK */
  osThreadDef(APP_10HZ_TASK, app_task_10hz, osPriorityNormal, 0, 128);
 8002adc:	4b18      	ldr	r3, [pc, #96]	; (8002b40 <MX_FREERTOS_Init+0xc4>)
 8002ade:	f107 0420 	add.w	r4, r7, #32
 8002ae2:	461d      	mov	r5, r3
 8002ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ae8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002aec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_10HZ_TASKHandle = osThreadCreate(osThread(APP_10HZ_TASK), NULL);
 8002af0:	f107 0320 	add.w	r3, r7, #32
 8002af4:	2100      	movs	r1, #0
 8002af6:	4618      	mov	r0, r3
 8002af8:	f007 fc40 	bl	800a37c <osThreadCreate>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4a11      	ldr	r2, [pc, #68]	; (8002b44 <MX_FREERTOS_Init+0xc8>)
 8002b00:	6013      	str	r3, [r2, #0]

  /* definition and creation of APP_100HZ_TASK */
  osThreadDef(APP_100HZ_TASK, app_task_100hz, osPriorityNormal, 0, 128);
 8002b02:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <MX_FREERTOS_Init+0xcc>)
 8002b04:	1d3c      	adds	r4, r7, #4
 8002b06:	461d      	mov	r5, r3
 8002b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002b10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  APP_100HZ_TASKHandle = osThreadCreate(osThread(APP_100HZ_TASK), NULL);
 8002b14:	1d3b      	adds	r3, r7, #4
 8002b16:	2100      	movs	r1, #0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f007 fc2f 	bl	800a37c <osThreadCreate>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4a0a      	ldr	r2, [pc, #40]	; (8002b4c <MX_FREERTOS_Init+0xd0>)
 8002b22:	6013      	str	r3, [r2, #0]

    /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    /* USER CODE END RTOS_THREADS */
}
 8002b24:	bf00      	nop
 8002b26:	3758      	adds	r7, #88	; 0x58
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b2c:	2000036c 	.word	0x2000036c
 8002b30:	20000370 	.word	0x20000370
 8002b34:	40020400 	.word	0x40020400
 8002b38:	0800c5f0 	.word	0x0800c5f0
 8002b3c:	20000360 	.word	0x20000360
 8002b40:	0800c60c 	.word	0x0800c60c
 8002b44:	20000364 	.word	0x20000364
 8002b48:	0800c628 	.word	0x0800c628
 8002b4c:	20000368 	.word	0x20000368

08002b50 <app_task_1Hz>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_app_task_1Hz */
void app_task_1Hz(void const *argument)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN app_task_1Hz */
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 50;
 8002b58:	2332      	movs	r3, #50	; 0x32
 8002b5a:	60fb      	str	r3, [r7, #12]
    xLastWakeTime = xTaskGetTickCount();
 8002b5c:	f008 fc18 	bl	800b390 <xTaskGetTickCount>
 8002b60:	4603      	mov	r3, r0
 8002b62:	60bb      	str	r3, [r7, #8]
    /* Infinite loop */
    for (;;)
    {
		afe_data_read();
 8002b64:	f7ff f900 	bl	8001d68 <afe_data_read>
    	//xSemaphoreTake(can_task_semaphore_handle, 10);

    	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002b68:	f107 0308 	add.w	r3, r7, #8
 8002b6c:	68f9      	ldr	r1, [r7, #12]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f008 fa7c 	bl	800b06c <vTaskDelayUntil>
    {
 8002b74:	e7f6      	b.n	8002b64 <app_task_1Hz+0x14>
	...

08002b78 <app_task_10hz>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_app_task_10hz */
void app_task_10hz(void const *argument)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN app_task_10hz */
    TickType_t xLastWakeTime;
    uint16_t counter = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	82fb      	strh	r3, [r7, #22]
    const TickType_t xFrequency = 100;
 8002b84:	2364      	movs	r3, #100	; 0x64
 8002b86:	60fb      	str	r3, [r7, #12]
    xLastWakeTime = xTaskGetTickCount();
 8002b88:	f008 fc02 	bl	800b390 <xTaskGetTickCount>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	60bb      	str	r3, [r7, #8]
    /* Infinite loop */
    for (;;)
    {
    //xSemaphoreTake(can_task_semaphore_handle, 1000);
    if(counter%5==0)
 8002b90:	8afa      	ldrh	r2, [r7, #22]
 8002b92:	4b22      	ldr	r3, [pc, #136]	; (8002c1c <app_task_10hz+0xa4>)
 8002b94:	fba3 1302 	umull	r1, r3, r3, r2
 8002b98:	0899      	lsrs	r1, r3, #2
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <app_task_10hz+0x34>
    	can_fcu_read_data();
 8002ba8:	f7ff fe66 	bl	8002878 <can_fcu_read_data>
    if(counter%10 == 0)
 8002bac:	8afa      	ldrh	r2, [r7, #22]
 8002bae:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <app_task_10hz+0xa4>)
 8002bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bb4:	08d9      	lsrs	r1, r3, #3
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d112      	bne.n	8002bec <app_task_10hz+0x74>
    {
    	for(int i = 1;i<7;i++)
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	e00c      	b.n	8002be6 <app_task_10hz+0x6e>
    	    	{
    	    		xQueueSend(can_tx_queue, &can_IDs[i], (TickType_t)10);
 8002bcc:	4b14      	ldr	r3, [pc, #80]	; (8002c20 <app_task_10hz+0xa8>)
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4a13      	ldr	r2, [pc, #76]	; (8002c24 <app_task_10hz+0xac>)
 8002bd6:	1899      	adds	r1, r3, r2
 8002bd8:	2300      	movs	r3, #0
 8002bda:	220a      	movs	r2, #10
 8002bdc:	f007 fd90 	bl	800a700 <xQueueGenericSend>
    	for(int i = 1;i<7;i++)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	3301      	adds	r3, #1
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	2b06      	cmp	r3, #6
 8002bea:	ddef      	ble.n	8002bcc <app_task_10hz+0x54>
    	    	}
    }
    counter++;
 8002bec:	8afb      	ldrh	r3, [r7, #22]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	82fb      	strh	r3, [r7, #22]
    xQueueSend(can_tx_queue, &can_IDs[0],(TickType_t)10); //GaugeVit
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <app_task_10hz+0xa8>)
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	220a      	movs	r2, #10
 8002bfa:	490a      	ldr	r1, [pc, #40]	; (8002c24 <app_task_10hz+0xac>)
 8002bfc:	f007 fd80 	bl	800a700 <xQueueGenericSend>
    xQueueSend(can_tx_queue, &can_IDs[7],(TickType_t)10); //BMS Ovr
 8002c00:	4b07      	ldr	r3, [pc, #28]	; (8002c20 <app_task_10hz+0xa8>)
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	2300      	movs	r3, #0
 8002c06:	220a      	movs	r2, #10
 8002c08:	4907      	ldr	r1, [pc, #28]	; (8002c28 <app_task_10hz+0xb0>)
 8002c0a:	f007 fd79 	bl	800a700 <xQueueGenericSend>
    vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002c0e:	f107 0308 	add.w	r3, r7, #8
 8002c12:	68f9      	ldr	r1, [r7, #12]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f008 fa29 	bl	800b06c <vTaskDelayUntil>
    if(counter%5==0)
 8002c1a:	e7b9      	b.n	8002b90 <app_task_10hz+0x18>
 8002c1c:	cccccccd 	.word	0xcccccccd
 8002c20:	2000036c 	.word	0x2000036c
 8002c24:	20000020 	.word	0x20000020
 8002c28:	2000003c 	.word	0x2000003c

08002c2c <app_task_100hz>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_app_task_100hz */
void app_task_100hz(void const *argument)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN app_task_100hz */
    TickType_t xLastWakeTime;
    uint32_t* pReceive;
    int counter = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61bb      	str	r3, [r7, #24]
    const TickType_t xFrequency = 10;
 8002c38:	230a      	movs	r3, #10
 8002c3a:	617b      	str	r3, [r7, #20]
    xLastWakeTime = xTaskGetTickCount();
 8002c3c:	f008 fba8 	bl	800b390 <xTaskGetTickCount>
 8002c40:	4603      	mov	r3, r0
 8002c42:	613b      	str	r3, [r7, #16]
    /* Infinite loop */
    for (;;)
    {
    	if(counter%2 == 0)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <app_task_100hz+0x26>
    	{
    		data_afe_to_can();
 8002c4e:	f7ff f9a7 	bl	8001fa0 <data_afe_to_can>
    	}
    		if(uxQueueMessagesWaiting(can_tx_queue) > 0)
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <app_task_100hz+0x9c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f007 ff30 	bl	800aabc <uxQueueMessagesWaiting>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d02b      	beq.n	8002cba <app_task_100hz+0x8e>
    		{
    		//xSemaphoreTake(can_task_semaphore_handle, 10);
    		if(xQueueReceive(can_tx_queue, &pReceive, 100) == pdPASS)
 8002c62:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <app_task_100hz+0x9c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f107 010c 	add.w	r1, r7, #12
 8002c6a:	2264      	movs	r2, #100	; 0x64
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f007 fe45 	bl	800a8fc <xQueueReceive>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d120      	bne.n	8002cba <app_task_100hz+0x8e>
    		{
    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c7e:	4813      	ldr	r0, [pc, #76]	; (8002ccc <app_task_100hz+0xa0>)
 8002c80:	f003 fb02 	bl	8006288 <HAL_GPIO_WritePin>
    		for(int i=0;i<9;i++)
 8002c84:	2300      	movs	r3, #0
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	e014      	b.n	8002cb4 <app_task_100hz+0x88>
    			{
    				if(pReceive == can_IDs[i])
 8002c8a:	4a11      	ldr	r2, [pc, #68]	; (8002cd0 <app_task_100hz+0xa4>)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c92:	461a      	mov	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d109      	bne.n	8002cae <app_task_100hz+0x82>
    				{
    					(func_ptrs[i])();
 8002c9a:	4a0e      	ldr	r2, [pc, #56]	; (8002cd4 <app_task_100hz+0xa8>)
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca2:	4798      	blx	r3
    					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002ca4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ca8:	4808      	ldr	r0, [pc, #32]	; (8002ccc <app_task_100hz+0xa0>)
 8002caa:	f003 fb1f 	bl	80062ec <HAL_GPIO_TogglePin>
    		for(int i=0;i<9;i++)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	61fb      	str	r3, [r7, #28]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	dde7      	ble.n	8002c8a <app_task_100hz+0x5e>
    				}
    			}
    		}
    		}
    	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002cba:	f107 0310 	add.w	r3, r7, #16
 8002cbe:	6979      	ldr	r1, [r7, #20]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f008 f9d3 	bl	800b06c <vTaskDelayUntil>
    	if(counter%2 == 0)
 8002cc6:	e7bd      	b.n	8002c44 <app_task_100hz+0x18>
 8002cc8:	2000036c 	.word	0x2000036c
 8002ccc:	40020400 	.word	0x40020400
 8002cd0:	20000020 	.word	0x20000020
 8002cd4:	20000000 	.word	0x20000000

08002cd8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cde:	f107 0314 	add.w	r3, r7, #20
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	609a      	str	r2, [r3, #8]
 8002cea:	60da      	str	r2, [r3, #12]
 8002cec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	4b62      	ldr	r3, [pc, #392]	; (8002e7c <MX_GPIO_Init+0x1a4>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	4a61      	ldr	r2, [pc, #388]	; (8002e7c <MX_GPIO_Init+0x1a4>)
 8002cf8:	f043 0304 	orr.w	r3, r3, #4
 8002cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfe:	4b5f      	ldr	r3, [pc, #380]	; (8002e7c <MX_GPIO_Init+0x1a4>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	4b5b      	ldr	r3, [pc, #364]	; (8002e7c <MX_GPIO_Init+0x1a4>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	4a5a      	ldr	r2, [pc, #360]	; (8002e7c <MX_GPIO_Init+0x1a4>)
 8002d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d18:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1a:	4b58      	ldr	r3, [pc, #352]	; (8002e7c <MX_GPIO_Init+0x1a4>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	4b54      	ldr	r3, [pc, #336]	; (8002e7c <MX_GPIO_Init+0x1a4>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	4a53      	ldr	r2, [pc, #332]	; (8002e7c <MX_GPIO_Init+0x1a4>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	6313      	str	r3, [r2, #48]	; 0x30
 8002d36:	4b51      	ldr	r3, [pc, #324]	; (8002e7c <MX_GPIO_Init+0x1a4>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	607b      	str	r3, [r7, #4]
 8002d46:	4b4d      	ldr	r3, [pc, #308]	; (8002e7c <MX_GPIO_Init+0x1a4>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a4c      	ldr	r2, [pc, #304]	; (8002e7c <MX_GPIO_Init+0x1a4>)
 8002d4c:	f043 0302 	orr.w	r3, r3, #2
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
 8002d52:	4b4a      	ldr	r3, [pc, #296]	; (8002e7c <MX_GPIO_Init+0x1a4>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	607b      	str	r3, [r7, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	603b      	str	r3, [r7, #0]
 8002d62:	4b46      	ldr	r3, [pc, #280]	; (8002e7c <MX_GPIO_Init+0x1a4>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	4a45      	ldr	r2, [pc, #276]	; (8002e7c <MX_GPIO_Init+0x1a4>)
 8002d68:	f043 0308 	orr.w	r3, r3, #8
 8002d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6e:	4b43      	ldr	r3, [pc, #268]	; (8002e7c <MX_GPIO_Init+0x1a4>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_SHUT_Pin|AFE_WAKE_Pin, GPIO_PIN_RESET);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2106      	movs	r1, #6
 8002d7e:	4840      	ldr	r0, [pc, #256]	; (8002e80 <MX_GPIO_Init+0x1a8>)
 8002d80:	f003 fa82 	bl	8006288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SP1_CS_Pin|DFETOFF_OUT_Pin|LED3_OUT_Pin|LED2_OUT_Pin
 8002d84:	2200      	movs	r2, #0
 8002d86:	f44f 611f 	mov.w	r1, #2544	; 0x9f0
 8002d8a:	483e      	ldr	r0, [pc, #248]	; (8002e84 <MX_GPIO_Init+0x1ac>)
 8002d8c:	f003 fa7c 	bl	8006288 <HAL_GPIO_WritePin>
                          |LED1_OUT_Pin|PWR5V_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DDSG_IN_Pin|LED5_OUT_BLUE_Pin|LED5_OUT_GREEN_Pin|LED5_OUT_RED_Pin
 8002d90:	2200      	movs	r2, #0
 8002d92:	f24f 0104 	movw	r1, #61444	; 0xf004
 8002d96:	483c      	ldr	r0, [pc, #240]	; (8002e88 <MX_GPIO_Init+0x1b0>)
 8002d98:	f003 fa76 	bl	8006288 <HAL_GPIO_WritePin>
                          |LED4_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 PC2
                           PC3 PC9 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2
 8002d9c:	f24f 630c 	movw	r3, #62988	; 0xf60c
 8002da0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002da2:	2303      	movs	r3, #3
 8002da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002daa:	f107 0314 	add.w	r3, r7, #20
 8002dae:	4619      	mov	r1, r3
 8002db0:	4834      	ldr	r0, [pc, #208]	; (8002e84 <MX_GPIO_Init+0x1ac>)
 8002db2:	f002 ff45 	bl	8005c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA4 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8002db6:	f248 1319 	movw	r3, #33049	; 0x8119
 8002dba:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	4619      	mov	r1, r3
 8002dca:	482d      	ldr	r0, [pc, #180]	; (8002e80 <MX_GPIO_Init+0x1a8>)
 8002dcc:	f002 ff38 	bl	8005c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RST_SHUT_Pin|AFE_WAKE_Pin;
 8002dd0:	2306      	movs	r3, #6
 8002dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	4619      	mov	r1, r3
 8002de6:	4826      	ldr	r0, [pc, #152]	; (8002e80 <MX_GPIO_Init+0x1a8>)
 8002de8:	f002 ff2a 	bl	8005c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = SP1_CS_Pin|DFETOFF_OUT_Pin|LED3_OUT_Pin|LED2_OUT_Pin
 8002dec:	f44f 631f 	mov.w	r3, #2544	; 0x9f0
 8002df0:	617b      	str	r3, [r7, #20]
                          |LED1_OUT_Pin|PWR5V_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002df2:	2301      	movs	r3, #1
 8002df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dfe:	f107 0314 	add.w	r3, r7, #20
 8002e02:	4619      	mov	r1, r3
 8002e04:	481f      	ldr	r0, [pc, #124]	; (8002e84 <MX_GPIO_Init+0x1ac>)
 8002e06:	f002 ff1b 	bl	8005c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AFE_ALERT_IN_Pin|DCHG_IN_Pin;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e16:	f107 0314 	add.w	r3, r7, #20
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	481a      	ldr	r0, [pc, #104]	; (8002e88 <MX_GPIO_Init+0x1b0>)
 8002e1e:	f002 ff0f 	bl	8005c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = DDSG_IN_Pin|LED5_OUT_BLUE_Pin|LED5_OUT_GREEN_Pin|LED5_OUT_RED_Pin
 8002e22:	f24f 0304 	movw	r3, #61444	; 0xf004
 8002e26:	617b      	str	r3, [r7, #20]
                          |LED4_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e30:	2300      	movs	r3, #0
 8002e32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e34:	f107 0314 	add.w	r3, r7, #20
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4813      	ldr	r0, [pc, #76]	; (8002e88 <MX_GPIO_Init+0x1b0>)
 8002e3c:	f002 ff00 	bl	8005c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8
 8002e40:	f44f 63e6 	mov.w	r3, #1840	; 0x730
 8002e44:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e46:	2303      	movs	r3, #3
 8002e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4e:	f107 0314 	add.w	r3, r7, #20
 8002e52:	4619      	mov	r1, r3
 8002e54:	480c      	ldr	r0, [pc, #48]	; (8002e88 <MX_GPIO_Init+0x1b0>)
 8002e56:	f002 fef3 	bl	8005c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_IN_Pin;
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_IN_GPIO_Port, &GPIO_InitStruct);
 8002e66:	f107 0314 	add.w	r3, r7, #20
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4807      	ldr	r0, [pc, #28]	; (8002e8c <MX_GPIO_Init+0x1b4>)
 8002e6e:	f002 fee7 	bl	8005c40 <HAL_GPIO_Init>

}
 8002e72:	bf00      	nop
 8002e74:	3728      	adds	r7, #40	; 0x28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40020000 	.word	0x40020000
 8002e84:	40020800 	.word	0x40020800
 8002e88:	40020400 	.word	0x40020400
 8002e8c:	40020c00 	.word	0x40020c00

08002e90 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e94:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <MX_I2C1_Init+0x50>)
 8002e96:	4a13      	ldr	r2, [pc, #76]	; (8002ee4 <MX_I2C1_Init+0x54>)
 8002e98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002e9a:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <MX_I2C1_Init+0x50>)
 8002e9c:	4a12      	ldr	r2, [pc, #72]	; (8002ee8 <MX_I2C1_Init+0x58>)
 8002e9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <MX_I2C1_Init+0x50>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 168;
 8002ea6:	4b0e      	ldr	r3, [pc, #56]	; (8002ee0 <MX_I2C1_Init+0x50>)
 8002ea8:	22a8      	movs	r2, #168	; 0xa8
 8002eaa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <MX_I2C1_Init+0x50>)
 8002eae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002eb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <MX_I2C1_Init+0x50>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <MX_I2C1_Init+0x50>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ec0:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <MX_I2C1_Init+0x50>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <MX_I2C1_Init+0x50>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ecc:	4804      	ldr	r0, [pc, #16]	; (8002ee0 <MX_I2C1_Init+0x50>)
 8002ece:	f003 fa35 	bl	800633c <HAL_I2C_Init>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ed8:	f000 f95a 	bl	8003190 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002edc:	bf00      	nop
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20000628 	.word	0x20000628
 8002ee4:	40005400 	.word	0x40005400
 8002ee8:	000186a0 	.word	0x000186a0

08002eec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08a      	sub	sp, #40	; 0x28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	f107 0314 	add.w	r3, r7, #20
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	60da      	str	r2, [r3, #12]
 8002f02:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a50      	ldr	r2, [pc, #320]	; (800304c <HAL_I2C_MspInit+0x160>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	f040 809a 	bne.w	8003044 <HAL_I2C_MspInit+0x158>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f10:	2300      	movs	r3, #0
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	4b4e      	ldr	r3, [pc, #312]	; (8003050 <HAL_I2C_MspInit+0x164>)
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	4a4d      	ldr	r2, [pc, #308]	; (8003050 <HAL_I2C_MspInit+0x164>)
 8002f1a:	f043 0302 	orr.w	r3, r3, #2
 8002f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f20:	4b4b      	ldr	r3, [pc, #300]	; (8003050 <HAL_I2C_MspInit+0x164>)
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f2c:	23c0      	movs	r3, #192	; 0xc0
 8002f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f30:	2312      	movs	r3, #18
 8002f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f40:	f107 0314 	add.w	r3, r7, #20
 8002f44:	4619      	mov	r1, r3
 8002f46:	4843      	ldr	r0, [pc, #268]	; (8003054 <HAL_I2C_MspInit+0x168>)
 8002f48:	f002 fe7a 	bl	8005c40 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	4b3f      	ldr	r3, [pc, #252]	; (8003050 <HAL_I2C_MspInit+0x164>)
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	4a3e      	ldr	r2, [pc, #248]	; (8003050 <HAL_I2C_MspInit+0x164>)
 8002f56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5c:	4b3c      	ldr	r3, [pc, #240]	; (8003050 <HAL_I2C_MspInit+0x164>)
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002f68:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <HAL_I2C_MspInit+0x16c>)
 8002f6a:	4a3c      	ldr	r2, [pc, #240]	; (800305c <HAL_I2C_MspInit+0x170>)
 8002f6c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002f6e:	4b3a      	ldr	r3, [pc, #232]	; (8003058 <HAL_I2C_MspInit+0x16c>)
 8002f70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f74:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f76:	4b38      	ldr	r3, [pc, #224]	; (8003058 <HAL_I2C_MspInit+0x16c>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f7c:	4b36      	ldr	r3, [pc, #216]	; (8003058 <HAL_I2C_MspInit+0x16c>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f82:	4b35      	ldr	r3, [pc, #212]	; (8003058 <HAL_I2C_MspInit+0x16c>)
 8002f84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f88:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f8a:	4b33      	ldr	r3, [pc, #204]	; (8003058 <HAL_I2C_MspInit+0x16c>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f90:	4b31      	ldr	r3, [pc, #196]	; (8003058 <HAL_I2C_MspInit+0x16c>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002f96:	4b30      	ldr	r3, [pc, #192]	; (8003058 <HAL_I2C_MspInit+0x16c>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002f9c:	4b2e      	ldr	r3, [pc, #184]	; (8003058 <HAL_I2C_MspInit+0x16c>)
 8002f9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fa2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fa4:	4b2c      	ldr	r3, [pc, #176]	; (8003058 <HAL_I2C_MspInit+0x16c>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002faa:	482b      	ldr	r0, [pc, #172]	; (8003058 <HAL_I2C_MspInit+0x16c>)
 8002fac:	f002 f9c2 	bl	8005334 <HAL_DMA_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8002fb6:	f000 f8eb 	bl	8003190 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a26      	ldr	r2, [pc, #152]	; (8003058 <HAL_I2C_MspInit+0x16c>)
 8002fbe:	639a      	str	r2, [r3, #56]	; 0x38
 8002fc0:	4a25      	ldr	r2, [pc, #148]	; (8003058 <HAL_I2C_MspInit+0x16c>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002fc6:	4b26      	ldr	r3, [pc, #152]	; (8003060 <HAL_I2C_MspInit+0x174>)
 8002fc8:	4a26      	ldr	r2, [pc, #152]	; (8003064 <HAL_I2C_MspInit+0x178>)
 8002fca:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002fcc:	4b24      	ldr	r3, [pc, #144]	; (8003060 <HAL_I2C_MspInit+0x174>)
 8002fce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fd2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fd4:	4b22      	ldr	r3, [pc, #136]	; (8003060 <HAL_I2C_MspInit+0x174>)
 8002fd6:	2240      	movs	r2, #64	; 0x40
 8002fd8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fda:	4b21      	ldr	r3, [pc, #132]	; (8003060 <HAL_I2C_MspInit+0x174>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fe0:	4b1f      	ldr	r3, [pc, #124]	; (8003060 <HAL_I2C_MspInit+0x174>)
 8002fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fe6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fe8:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <HAL_I2C_MspInit+0x174>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fee:	4b1c      	ldr	r3, [pc, #112]	; (8003060 <HAL_I2C_MspInit+0x174>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002ff4:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <HAL_I2C_MspInit+0x174>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002ffa:	4b19      	ldr	r3, [pc, #100]	; (8003060 <HAL_I2C_MspInit+0x174>)
 8002ffc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003000:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003002:	4b17      	ldr	r3, [pc, #92]	; (8003060 <HAL_I2C_MspInit+0x174>)
 8003004:	2200      	movs	r2, #0
 8003006:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003008:	4815      	ldr	r0, [pc, #84]	; (8003060 <HAL_I2C_MspInit+0x174>)
 800300a:	f002 f993 	bl	8005334 <HAL_DMA_Init>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8003014:	f000 f8bc 	bl	8003190 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a11      	ldr	r2, [pc, #68]	; (8003060 <HAL_I2C_MspInit+0x174>)
 800301c:	635a      	str	r2, [r3, #52]	; 0x34
 800301e:	4a10      	ldr	r2, [pc, #64]	; (8003060 <HAL_I2C_MspInit+0x174>)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003024:	2200      	movs	r2, #0
 8003026:	2105      	movs	r1, #5
 8003028:	201f      	movs	r0, #31
 800302a:	f002 f93f 	bl	80052ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800302e:	201f      	movs	r0, #31
 8003030:	f002 f968 	bl	8005304 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8003034:	2200      	movs	r2, #0
 8003036:	2105      	movs	r1, #5
 8003038:	2020      	movs	r0, #32
 800303a:	f002 f937 	bl	80052ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800303e:	2020      	movs	r0, #32
 8003040:	f002 f960 	bl	8005304 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003044:	bf00      	nop
 8003046:	3728      	adds	r7, #40	; 0x28
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40005400 	.word	0x40005400
 8003050:	40023800 	.word	0x40023800
 8003054:	40020400 	.word	0x40020400
 8003058:	2000067c 	.word	0x2000067c
 800305c:	40026010 	.word	0x40026010
 8003060:	200006dc 	.word	0x200006dc
 8003064:	400260a0 	.word	0x400260a0

08003068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800306c:	f000 fb82 	bl	8003774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */
  (void)SystemClock_Config();
 8003070:	f000 f80a 	bl	8003088 <SystemClock_Config>
  // TODO: Sys_Init - HW
  (void)app_sys_init();
 8003074:	f7ff f80a 	bl	800208c <app_sys_init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  // TODO: Sys_Init - SW Modules
  (void)app_sys_peripheral_init();
 8003078:	f7ff f820 	bl	80020bc <app_sys_peripheral_init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800307c:	f7ff fcfe 	bl	8002a7c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003080:	f007 f975 	bl	800a36e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003084:	e7fe      	b.n	8003084 <main+0x1c>
	...

08003088 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b094      	sub	sp, #80	; 0x50
 800308c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800308e:	f107 031c 	add.w	r3, r7, #28
 8003092:	2234      	movs	r2, #52	; 0x34
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f009 f9ba 	bl	800c410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800309c:	f107 0308 	add.w	r3, r7, #8
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ac:	2300      	movs	r3, #0
 80030ae:	607b      	str	r3, [r7, #4]
 80030b0:	4b2c      	ldr	r3, [pc, #176]	; (8003164 <SystemClock_Config+0xdc>)
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	4a2b      	ldr	r2, [pc, #172]	; (8003164 <SystemClock_Config+0xdc>)
 80030b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ba:	6413      	str	r3, [r2, #64]	; 0x40
 80030bc:	4b29      	ldr	r3, [pc, #164]	; (8003164 <SystemClock_Config+0xdc>)
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030c8:	2300      	movs	r3, #0
 80030ca:	603b      	str	r3, [r7, #0]
 80030cc:	4b26      	ldr	r3, [pc, #152]	; (8003168 <SystemClock_Config+0xe0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a25      	ldr	r2, [pc, #148]	; (8003168 <SystemClock_Config+0xe0>)
 80030d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	4b23      	ldr	r3, [pc, #140]	; (8003168 <SystemClock_Config+0xe0>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030e0:	603b      	str	r3, [r7, #0]
 80030e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030e4:	2301      	movs	r3, #1
 80030e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030ee:	2302      	movs	r3, #2
 80030f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80030f8:	2304      	movs	r3, #4
 80030fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80030fc:	23b4      	movs	r3, #180	; 0xb4
 80030fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003100:	2302      	movs	r3, #2
 8003102:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003104:	2302      	movs	r3, #2
 8003106:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003108:	2302      	movs	r3, #2
 800310a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800310c:	f107 031c 	add.w	r3, r7, #28
 8003110:	4618      	mov	r0, r3
 8003112:	f005 fc47 	bl	80089a4 <HAL_RCC_OscConfig>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800311c:	f000 f838 	bl	8003190 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003120:	f004 ffb4 	bl	800808c <HAL_PWREx_EnableOverDrive>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800312a:	f000 f831 	bl	8003190 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800312e:	230f      	movs	r3, #15
 8003130:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003132:	2302      	movs	r3, #2
 8003134:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800313a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800313e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003144:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003146:	f107 0308 	add.w	r3, r7, #8
 800314a:	2105      	movs	r1, #5
 800314c:	4618      	mov	r0, r3
 800314e:	f004 ffed 	bl	800812c <HAL_RCC_ClockConfig>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003158:	f000 f81a 	bl	8003190 <Error_Handler>
  }
}
 800315c:	bf00      	nop
 800315e:	3750      	adds	r7, #80	; 0x50
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40023800 	.word	0x40023800
 8003168:	40007000 	.word	0x40007000

0800316c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a04      	ldr	r2, [pc, #16]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d101      	bne.n	8003182 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800317e:	f000 fb1b 	bl	80037b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40010000 	.word	0x40010000

08003190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003194:	b672      	cpsid	i
}
 8003196:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003198:	e7fe      	b.n	8003198 <Error_Handler+0x8>

0800319a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80031b4:	4b17      	ldr	r3, [pc, #92]	; (8003214 <MX_SPI1_Init+0x64>)
 80031b6:	4a18      	ldr	r2, [pc, #96]	; (8003218 <MX_SPI1_Init+0x68>)
 80031b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031ba:	4b16      	ldr	r3, [pc, #88]	; (8003214 <MX_SPI1_Init+0x64>)
 80031bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031c2:	4b14      	ldr	r3, [pc, #80]	; (8003214 <MX_SPI1_Init+0x64>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031c8:	4b12      	ldr	r3, [pc, #72]	; (8003214 <MX_SPI1_Init+0x64>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031ce:	4b11      	ldr	r3, [pc, #68]	; (8003214 <MX_SPI1_Init+0x64>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031d4:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <MX_SPI1_Init+0x64>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031da:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <MX_SPI1_Init+0x64>)
 80031dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80031e2:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <MX_SPI1_Init+0x64>)
 80031e4:	2238      	movs	r2, #56	; 0x38
 80031e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <MX_SPI1_Init+0x64>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <MX_SPI1_Init+0x64>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031f4:	4b07      	ldr	r3, [pc, #28]	; (8003214 <MX_SPI1_Init+0x64>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80031fa:	4b06      	ldr	r3, [pc, #24]	; (8003214 <MX_SPI1_Init+0x64>)
 80031fc:	220a      	movs	r2, #10
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003200:	4804      	ldr	r0, [pc, #16]	; (8003214 <MX_SPI1_Init+0x64>)
 8003202:	f005 ff2b 	bl	800905c <HAL_SPI_Init>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800320c:	f7ff ffc0 	bl	8003190 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003210:	bf00      	nop
 8003212:	bd80      	pop	{r7, pc}
 8003214:	2000073c 	.word	0x2000073c
 8003218:	40013000 	.word	0x40013000

0800321c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08a      	sub	sp, #40	; 0x28
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003224:	f107 0314 	add.w	r3, r7, #20
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a4c      	ldr	r2, [pc, #304]	; (800336c <HAL_SPI_MspInit+0x150>)
 800323a:	4293      	cmp	r3, r2
 800323c:	f040 8092 	bne.w	8003364 <HAL_SPI_MspInit+0x148>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003240:	2300      	movs	r3, #0
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	4b4a      	ldr	r3, [pc, #296]	; (8003370 <HAL_SPI_MspInit+0x154>)
 8003246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003248:	4a49      	ldr	r2, [pc, #292]	; (8003370 <HAL_SPI_MspInit+0x154>)
 800324a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800324e:	6453      	str	r3, [r2, #68]	; 0x44
 8003250:	4b47      	ldr	r3, [pc, #284]	; (8003370 <HAL_SPI_MspInit+0x154>)
 8003252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	4b43      	ldr	r3, [pc, #268]	; (8003370 <HAL_SPI_MspInit+0x154>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	4a42      	ldr	r2, [pc, #264]	; (8003370 <HAL_SPI_MspInit+0x154>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6313      	str	r3, [r2, #48]	; 0x30
 800326c:	4b40      	ldr	r3, [pc, #256]	; (8003370 <HAL_SPI_MspInit+0x154>)
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003278:	23e0      	movs	r3, #224	; 0xe0
 800327a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327c:	2302      	movs	r3, #2
 800327e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003284:	2303      	movs	r3, #3
 8003286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003288:	2305      	movs	r3, #5
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328c:	f107 0314 	add.w	r3, r7, #20
 8003290:	4619      	mov	r1, r3
 8003292:	4838      	ldr	r0, [pc, #224]	; (8003374 <HAL_SPI_MspInit+0x158>)
 8003294:	f002 fcd4 	bl	8005c40 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003298:	4b37      	ldr	r3, [pc, #220]	; (8003378 <HAL_SPI_MspInit+0x15c>)
 800329a:	4a38      	ldr	r2, [pc, #224]	; (800337c <HAL_SPI_MspInit+0x160>)
 800329c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800329e:	4b36      	ldr	r3, [pc, #216]	; (8003378 <HAL_SPI_MspInit+0x15c>)
 80032a0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80032a4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032a6:	4b34      	ldr	r3, [pc, #208]	; (8003378 <HAL_SPI_MspInit+0x15c>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032ac:	4b32      	ldr	r3, [pc, #200]	; (8003378 <HAL_SPI_MspInit+0x15c>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032b2:	4b31      	ldr	r3, [pc, #196]	; (8003378 <HAL_SPI_MspInit+0x15c>)
 80032b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032b8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032ba:	4b2f      	ldr	r3, [pc, #188]	; (8003378 <HAL_SPI_MspInit+0x15c>)
 80032bc:	2200      	movs	r2, #0
 80032be:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032c0:	4b2d      	ldr	r3, [pc, #180]	; (8003378 <HAL_SPI_MspInit+0x15c>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80032c6:	4b2c      	ldr	r3, [pc, #176]	; (8003378 <HAL_SPI_MspInit+0x15c>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80032cc:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <HAL_SPI_MspInit+0x15c>)
 80032ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80032d2:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032d4:	4b28      	ldr	r3, [pc, #160]	; (8003378 <HAL_SPI_MspInit+0x15c>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80032da:	4827      	ldr	r0, [pc, #156]	; (8003378 <HAL_SPI_MspInit+0x15c>)
 80032dc:	f002 f82a 	bl	8005334 <HAL_DMA_Init>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80032e6:	f7ff ff53 	bl	8003190 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a22      	ldr	r2, [pc, #136]	; (8003378 <HAL_SPI_MspInit+0x15c>)
 80032ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80032f0:	4a21      	ldr	r2, [pc, #132]	; (8003378 <HAL_SPI_MspInit+0x15c>)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80032f6:	4b22      	ldr	r3, [pc, #136]	; (8003380 <HAL_SPI_MspInit+0x164>)
 80032f8:	4a22      	ldr	r2, [pc, #136]	; (8003384 <HAL_SPI_MspInit+0x168>)
 80032fa:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80032fc:	4b20      	ldr	r3, [pc, #128]	; (8003380 <HAL_SPI_MspInit+0x164>)
 80032fe:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003302:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003304:	4b1e      	ldr	r3, [pc, #120]	; (8003380 <HAL_SPI_MspInit+0x164>)
 8003306:	2240      	movs	r2, #64	; 0x40
 8003308:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800330a:	4b1d      	ldr	r3, [pc, #116]	; (8003380 <HAL_SPI_MspInit+0x164>)
 800330c:	2200      	movs	r2, #0
 800330e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_SPI_MspInit+0x164>)
 8003312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003316:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003318:	4b19      	ldr	r3, [pc, #100]	; (8003380 <HAL_SPI_MspInit+0x164>)
 800331a:	2200      	movs	r2, #0
 800331c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800331e:	4b18      	ldr	r3, [pc, #96]	; (8003380 <HAL_SPI_MspInit+0x164>)
 8003320:	2200      	movs	r2, #0
 8003322:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003324:	4b16      	ldr	r3, [pc, #88]	; (8003380 <HAL_SPI_MspInit+0x164>)
 8003326:	2200      	movs	r2, #0
 8003328:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800332a:	4b15      	ldr	r3, [pc, #84]	; (8003380 <HAL_SPI_MspInit+0x164>)
 800332c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003330:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003332:	4b13      	ldr	r3, [pc, #76]	; (8003380 <HAL_SPI_MspInit+0x164>)
 8003334:	2200      	movs	r2, #0
 8003336:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003338:	4811      	ldr	r0, [pc, #68]	; (8003380 <HAL_SPI_MspInit+0x164>)
 800333a:	f001 fffb 	bl	8005334 <HAL_DMA_Init>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8003344:	f7ff ff24 	bl	8003190 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a0d      	ldr	r2, [pc, #52]	; (8003380 <HAL_SPI_MspInit+0x164>)
 800334c:	649a      	str	r2, [r3, #72]	; 0x48
 800334e:	4a0c      	ldr	r2, [pc, #48]	; (8003380 <HAL_SPI_MspInit+0x164>)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003354:	2200      	movs	r2, #0
 8003356:	2105      	movs	r1, #5
 8003358:	2023      	movs	r0, #35	; 0x23
 800335a:	f001 ffa7 	bl	80052ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800335e:	2023      	movs	r0, #35	; 0x23
 8003360:	f001 ffd0 	bl	8005304 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003364:	bf00      	nop
 8003366:	3728      	adds	r7, #40	; 0x28
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40013000 	.word	0x40013000
 8003370:	40023800 	.word	0x40023800
 8003374:	40020000 	.word	0x40020000
 8003378:	200007bc 	.word	0x200007bc
 800337c:	40026410 	.word	0x40026410
 8003380:	2000081c 	.word	0x2000081c
 8003384:	40026458 	.word	0x40026458

08003388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	4b12      	ldr	r3, [pc, #72]	; (80033dc <HAL_MspInit+0x54>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	4a11      	ldr	r2, [pc, #68]	; (80033dc <HAL_MspInit+0x54>)
 8003398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800339c:	6453      	str	r3, [r2, #68]	; 0x44
 800339e:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <HAL_MspInit+0x54>)
 80033a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033a6:	607b      	str	r3, [r7, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_MspInit+0x54>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	4a0a      	ldr	r2, [pc, #40]	; (80033dc <HAL_MspInit+0x54>)
 80033b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ba:	4b08      	ldr	r3, [pc, #32]	; (80033dc <HAL_MspInit+0x54>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80033c6:	2200      	movs	r2, #0
 80033c8:	210f      	movs	r1, #15
 80033ca:	f06f 0001 	mvn.w	r0, #1
 80033ce:	f001 ff6d 	bl	80052ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800

080033e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08c      	sub	sp, #48	; 0x30
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80033f0:	2300      	movs	r3, #0
 80033f2:	60bb      	str	r3, [r7, #8]
 80033f4:	4b2f      	ldr	r3, [pc, #188]	; (80034b4 <HAL_InitTick+0xd4>)
 80033f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f8:	4a2e      	ldr	r2, [pc, #184]	; (80034b4 <HAL_InitTick+0xd4>)
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	6453      	str	r3, [r2, #68]	; 0x44
 8003400:	4b2c      	ldr	r3, [pc, #176]	; (80034b4 <HAL_InitTick+0xd4>)
 8003402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800340c:	f107 020c 	add.w	r2, r7, #12
 8003410:	f107 0310 	add.w	r3, r7, #16
 8003414:	4611      	mov	r1, r2
 8003416:	4618      	mov	r0, r3
 8003418:	f005 f862 	bl	80084e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800341c:	f005 f84c 	bl	80084b8 <HAL_RCC_GetPCLK2Freq>
 8003420:	4603      	mov	r3, r0
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003428:	4a23      	ldr	r2, [pc, #140]	; (80034b8 <HAL_InitTick+0xd8>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	0c9b      	lsrs	r3, r3, #18
 8003430:	3b01      	subs	r3, #1
 8003432:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003434:	4b21      	ldr	r3, [pc, #132]	; (80034bc <HAL_InitTick+0xdc>)
 8003436:	4a22      	ldr	r2, [pc, #136]	; (80034c0 <HAL_InitTick+0xe0>)
 8003438:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800343a:	4b20      	ldr	r3, [pc, #128]	; (80034bc <HAL_InitTick+0xdc>)
 800343c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003440:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003442:	4a1e      	ldr	r2, [pc, #120]	; (80034bc <HAL_InitTick+0xdc>)
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003448:	4b1c      	ldr	r3, [pc, #112]	; (80034bc <HAL_InitTick+0xdc>)
 800344a:	2200      	movs	r2, #0
 800344c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800344e:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <HAL_InitTick+0xdc>)
 8003450:	2200      	movs	r2, #0
 8003452:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003454:	4b19      	ldr	r3, [pc, #100]	; (80034bc <HAL_InitTick+0xdc>)
 8003456:	2200      	movs	r2, #0
 8003458:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800345a:	4818      	ldr	r0, [pc, #96]	; (80034bc <HAL_InitTick+0xdc>)
 800345c:	f006 fba2 	bl	8009ba4 <HAL_TIM_Base_Init>
 8003460:	4603      	mov	r3, r0
 8003462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800346a:	2b00      	cmp	r3, #0
 800346c:	d11b      	bne.n	80034a6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800346e:	4813      	ldr	r0, [pc, #76]	; (80034bc <HAL_InitTick+0xdc>)
 8003470:	f006 fc92 	bl	8009d98 <HAL_TIM_Base_Start_IT>
 8003474:	4603      	mov	r3, r0
 8003476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800347a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800347e:	2b00      	cmp	r3, #0
 8003480:	d111      	bne.n	80034a6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003482:	2019      	movs	r0, #25
 8003484:	f001 ff3e 	bl	8005304 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b0f      	cmp	r3, #15
 800348c:	d808      	bhi.n	80034a0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800348e:	2200      	movs	r2, #0
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	2019      	movs	r0, #25
 8003494:	f001 ff0a 	bl	80052ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003498:	4a0a      	ldr	r2, [pc, #40]	; (80034c4 <HAL_InitTick+0xe4>)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	e002      	b.n	80034a6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80034a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3730      	adds	r7, #48	; 0x30
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800
 80034b8:	431bde83 	.word	0x431bde83
 80034bc:	2000087c 	.word	0x2000087c
 80034c0:	40010000 	.word	0x40010000
 80034c4:	20000044 	.word	0x20000044

080034c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034cc:	e7fe      	b.n	80034cc <NMI_Handler+0x4>

080034ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ce:	b480      	push	{r7}
 80034d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034d2:	e7fe      	b.n	80034d2 <HardFault_Handler+0x4>

080034d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034d8:	e7fe      	b.n	80034d8 <MemManage_Handler+0x4>

080034da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034da:	b480      	push	{r7}
 80034dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034de:	e7fe      	b.n	80034de <BusFault_Handler+0x4>

080034e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034e4:	e7fe      	b.n	80034e4 <UsageFault_Handler+0x4>

080034e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 80034f8:	4802      	ldr	r0, [pc, #8]	; (8003504 <WWDG_IRQHandler+0x10>)
 80034fa:	f006 fef7 	bl	800a2ec <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	200008c4 	.word	0x200008c4

08003508 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800350c:	4802      	ldr	r0, [pc, #8]	; (8003518 <DMA1_Stream0_IRQHandler+0x10>)
 800350e:	f002 f94d 	bl	80057ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	2000067c 	.word	0x2000067c

0800351c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003520:	4802      	ldr	r0, [pc, #8]	; (800352c <DMA1_Stream6_IRQHandler+0x10>)
 8003522:	f002 f943 	bl	80057ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	200006dc 	.word	0x200006dc

08003530 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003534:	4802      	ldr	r0, [pc, #8]	; (8003540 <CAN1_TX_IRQHandler+0x10>)
 8003536:	f001 fbad 	bl	8004c94 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	200002fc 	.word	0x200002fc

08003544 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003548:	4802      	ldr	r0, [pc, #8]	; (8003554 <CAN1_RX0_IRQHandler+0x10>)
 800354a:	f001 fba3 	bl	8004c94 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	200002fc 	.word	0x200002fc

08003558 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800355c:	4802      	ldr	r0, [pc, #8]	; (8003568 <CAN1_RX1_IRQHandler+0x10>)
 800355e:	f001 fb99 	bl	8004c94 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003562:	bf00      	nop
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	200002fc 	.word	0x200002fc

0800356c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003570:	4802      	ldr	r0, [pc, #8]	; (800357c <CAN1_SCE_IRQHandler+0x10>)
 8003572:	f001 fb8f 	bl	8004c94 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	200002fc 	.word	0x200002fc

08003580 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003584:	4802      	ldr	r0, [pc, #8]	; (8003590 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003586:	f006 fccd 	bl	8009f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	2000087c 	.word	0x2000087c

08003594 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003598:	4802      	ldr	r0, [pc, #8]	; (80035a4 <I2C1_EV_IRQHandler+0x10>)
 800359a:	f003 f89b 	bl	80066d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000628 	.word	0x20000628

080035a8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80035ac:	4802      	ldr	r0, [pc, #8]	; (80035b8 <I2C1_ER_IRQHandler+0x10>)
 80035ae:	f003 fa02 	bl	80069b6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000628 	.word	0x20000628

080035bc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80035c0:	4802      	ldr	r0, [pc, #8]	; (80035cc <SPI1_IRQHandler+0x10>)
 80035c2:	f006 f8bf 	bl	8009744 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	2000073c 	.word	0x2000073c

080035d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80035d4:	4802      	ldr	r0, [pc, #8]	; (80035e0 <DMA2_Stream0_IRQHandler+0x10>)
 80035d6:	f002 f8e9 	bl	80057ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	200007bc 	.word	0x200007bc

080035e4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80035e8:	4802      	ldr	r0, [pc, #8]	; (80035f4 <DMA2_Stream3_IRQHandler+0x10>)
 80035ea:	f002 f8df 	bl	80057ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	2000081c 	.word	0x2000081c

080035f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <SystemInit+0x20>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003602:	4a05      	ldr	r2, [pc, #20]	; (8003618 <SystemInit+0x20>)
 8003604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800361c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003654 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003620:	480d      	ldr	r0, [pc, #52]	; (8003658 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003622:	490e      	ldr	r1, [pc, #56]	; (800365c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003624:	4a0e      	ldr	r2, [pc, #56]	; (8003660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003628:	e002      	b.n	8003630 <LoopCopyDataInit>

0800362a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800362a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800362c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800362e:	3304      	adds	r3, #4

08003630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003634:	d3f9      	bcc.n	800362a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003636:	4a0b      	ldr	r2, [pc, #44]	; (8003664 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003638:	4c0b      	ldr	r4, [pc, #44]	; (8003668 <LoopFillZerobss+0x26>)
  movs r3, #0
 800363a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800363c:	e001      	b.n	8003642 <LoopFillZerobss>

0800363e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800363e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003640:	3204      	adds	r2, #4

08003642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003644:	d3fb      	bcc.n	800363e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003646:	f7ff ffd7 	bl	80035f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800364a:	f008 feaf 	bl	800c3ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800364e:	f7ff fd0b 	bl	8003068 <main>
  bx  lr    
 8003652:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003654:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800365c:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8003660:	0800c918 	.word	0x0800c918
  ldr r2, =_sbss
 8003664:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8003668:	20010440 	.word	0x20010440

0800366c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800366c:	e7fe      	b.n	800366c <ADC_IRQHandler>

0800366e <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b084      	sub	sp, #16
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d104      	bne.n	8003686 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800367c:	b672      	cpsid	i
}
 800367e:	bf00      	nop
 8003680:	f7ff fd86 	bl	8003190 <Error_Handler>
 8003684:	e7fe      	b.n	8003684 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	7a1b      	ldrb	r3, [r3, #8]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d904      	bls.n	8003698 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 800368e:	b672      	cpsid	i
}
 8003690:	bf00      	nop
 8003692:	f7ff fd7d 	bl	8003190 <Error_Handler>
 8003696:	e7fe      	b.n	8003696 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	7a1b      	ldrb	r3, [r3, #8]
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	b2d1      	uxtb	r1, r2
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	7211      	strb	r1, [r2, #8]
 80036a4:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036a6:	f3ef 8211 	mrs	r2, BASEPRI
 80036aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ae:	f383 8811 	msr	BASEPRI, r3
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	60fa      	str	r2, [r7, #12]
 80036bc:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b084      	sub	sp, #16
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d104      	bne.n	80036e6 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80036dc:	b672      	cpsid	i
}
 80036de:	bf00      	nop
 80036e0:	f7ff fd56 	bl	8003190 <Error_Handler>
 80036e4:	e7fe      	b.n	80036e4 <stm32_lock_release+0x16>
  lock->nesting_level--;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	7a1b      	ldrb	r3, [r3, #8]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	7a1b      	ldrb	r3, [r3, #8]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d904      	bls.n	8003704 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80036fa:	b672      	cpsid	i
}
 80036fc:	bf00      	nop
 80036fe:	f7ff fd47 	bl	8003190 <Error_Handler>
 8003702:	e7fe      	b.n	8003702 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	7a1b      	ldrb	r3, [r3, #8]
 8003708:	461a      	mov	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003710:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003718:	bf00      	nop
}
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d104      	bne.n	800373a <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003730:	b672      	cpsid	i
}
 8003732:	bf00      	nop
 8003734:	f7ff fd2c 	bl	8003190 <Error_Handler>
 8003738:	e7fe      	b.n	8003738 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff ff96 	bl	800366e <stm32_lock_acquire>
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b082      	sub	sp, #8
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d104      	bne.n	8003762 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003758:	b672      	cpsid	i
}
 800375a:	bf00      	nop
 800375c:	f7ff fd18 	bl	8003190 <Error_Handler>
 8003760:	e7fe      	b.n	8003760 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff ffb2 	bl	80036ce <stm32_lock_release>
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003778:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <HAL_Init+0x40>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0d      	ldr	r2, [pc, #52]	; (80037b4 <HAL_Init+0x40>)
 800377e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <HAL_Init+0x40>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0a      	ldr	r2, [pc, #40]	; (80037b4 <HAL_Init+0x40>)
 800378a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800378e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003790:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <HAL_Init+0x40>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a07      	ldr	r2, [pc, #28]	; (80037b4 <HAL_Init+0x40>)
 8003796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800379c:	2003      	movs	r0, #3
 800379e:	f001 fd65 	bl	800526c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037a2:	200f      	movs	r0, #15
 80037a4:	f7ff fe1c 	bl	80033e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037a8:	f7ff fdee 	bl	8003388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40023c00 	.word	0x40023c00

080037b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037bc:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <HAL_IncTick+0x20>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_IncTick+0x24>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4413      	add	r3, r2
 80037c8:	4a04      	ldr	r2, [pc, #16]	; (80037dc <HAL_IncTick+0x24>)
 80037ca:	6013      	str	r3, [r2, #0]
}
 80037cc:	bf00      	nop
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20000048 	.word	0x20000048
 80037dc:	200008e4 	.word	0x200008e4

080037e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  return uwTick;
 80037e4:	4b03      	ldr	r3, [pc, #12]	; (80037f4 <HAL_GetTick+0x14>)
 80037e6:	681b      	ldr	r3, [r3, #0]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	200008e4 	.word	0x200008e4

080037f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003800:	f7ff ffee 	bl	80037e0 <HAL_GetTick>
 8003804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003810:	d005      	beq.n	800381e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003812:	4b0a      	ldr	r3, [pc, #40]	; (800383c <HAL_Delay+0x44>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4413      	add	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800381e:	bf00      	nop
 8003820:	f7ff ffde 	bl	80037e0 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	429a      	cmp	r2, r3
 800382e:	d8f7      	bhi.n	8003820 <HAL_Delay+0x28>
  {
  }
}
 8003830:	bf00      	nop
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000048 	.word	0x20000048

08003840 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e15c      	b.n	8003b10 <HAL_ADC_Init+0x2d0>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a8e      	ldr	r2, [pc, #568]	; (8003a94 <HAL_ADC_Init+0x254>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d00e      	beq.n	800387e <HAL_ADC_Init+0x3e>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a8c      	ldr	r2, [pc, #560]	; (8003a98 <HAL_ADC_Init+0x258>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d009      	beq.n	800387e <HAL_ADC_Init+0x3e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a8b      	ldr	r2, [pc, #556]	; (8003a9c <HAL_ADC_Init+0x25c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d004      	beq.n	800387e <HAL_ADC_Init+0x3e>
 8003874:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8003878:	4889      	ldr	r0, [pc, #548]	; (8003aa0 <HAL_ADC_Init+0x260>)
 800387a:	f7ff fc8e 	bl	800319a <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d013      	beq.n	80038ae <HAL_ADC_Init+0x6e>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800388e:	d00e      	beq.n	80038ae <HAL_ADC_Init+0x6e>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003898:	d009      	beq.n	80038ae <HAL_ADC_Init+0x6e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038a2:	d004      	beq.n	80038ae <HAL_ADC_Init+0x6e>
 80038a4:	f240 1143 	movw	r1, #323	; 0x143
 80038a8:	487d      	ldr	r0, [pc, #500]	; (8003aa0 <HAL_ADC_Init+0x260>)
 80038aa:	f7ff fc76 	bl	800319a <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d013      	beq.n	80038de <HAL_ADC_Init+0x9e>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038be:	d00e      	beq.n	80038de <HAL_ADC_Init+0x9e>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038c8:	d009      	beq.n	80038de <HAL_ADC_Init+0x9e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038d2:	d004      	beq.n	80038de <HAL_ADC_Init+0x9e>
 80038d4:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80038d8:	4871      	ldr	r0, [pc, #452]	; (8003aa0 <HAL_ADC_Init+0x260>)
 80038da:	f7ff fc5e 	bl	800319a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d008      	beq.n	80038f8 <HAL_ADC_Init+0xb8>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d004      	beq.n	80038f8 <HAL_ADC_Init+0xb8>
 80038ee:	f240 1145 	movw	r1, #325	; 0x145
 80038f2:	486b      	ldr	r0, [pc, #428]	; (8003aa0 <HAL_ADC_Init+0x260>)
 80038f4:	f7ff fc51 	bl	800319a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	7e1b      	ldrb	r3, [r3, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_ADC_Init+0xd2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	7e1b      	ldrb	r3, [r3, #24]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d004      	beq.n	8003912 <HAL_ADC_Init+0xd2>
 8003908:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800390c:	4864      	ldr	r0, [pc, #400]	; (8003aa0 <HAL_ADC_Init+0x260>)
 800390e:	f7ff fc44 	bl	800319a <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003916:	2b00      	cmp	r3, #0
 8003918:	d054      	beq.n	80039c4 <HAL_ADC_Init+0x184>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003922:	d04f      	beq.n	80039c4 <HAL_ADC_Init+0x184>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800392c:	d04a      	beq.n	80039c4 <HAL_ADC_Init+0x184>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003932:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003936:	d045      	beq.n	80039c4 <HAL_ADC_Init+0x184>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003940:	d040      	beq.n	80039c4 <HAL_ADC_Init+0x184>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003946:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800394a:	d03b      	beq.n	80039c4 <HAL_ADC_Init+0x184>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003950:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8003954:	d036      	beq.n	80039c4 <HAL_ADC_Init+0x184>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 800395e:	d031      	beq.n	80039c4 <HAL_ADC_Init+0x184>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003964:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003968:	d02c      	beq.n	80039c4 <HAL_ADC_Init+0x184>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 8003972:	d027      	beq.n	80039c4 <HAL_ADC_Init+0x184>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800397c:	d022      	beq.n	80039c4 <HAL_ADC_Init+0x184>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8003986:	d01d      	beq.n	80039c4 <HAL_ADC_Init+0x184>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003990:	d018      	beq.n	80039c4 <HAL_ADC_Init+0x184>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003996:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 800399a:	d013      	beq.n	80039c4 <HAL_ADC_Init+0x184>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80039a4:	d00e      	beq.n	80039c4 <HAL_ADC_Init+0x184>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039aa:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80039ae:	d009      	beq.n	80039c4 <HAL_ADC_Init+0x184>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	4a3b      	ldr	r2, [pc, #236]	; (8003aa4 <HAL_ADC_Init+0x264>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d004      	beq.n	80039c4 <HAL_ADC_Init+0x184>
 80039ba:	f240 1147 	movw	r1, #327	; 0x147
 80039be:	4838      	ldr	r0, [pc, #224]	; (8003aa0 <HAL_ADC_Init+0x260>)
 80039c0:	f7ff fbeb 	bl	800319a <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d009      	beq.n	80039e0 <HAL_ADC_Init+0x1a0>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d4:	d004      	beq.n	80039e0 <HAL_ADC_Init+0x1a0>
 80039d6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80039da:	4831      	ldr	r0, [pc, #196]	; (8003aa0 <HAL_ADC_Init+0x260>)
 80039dc:	f7ff fbdd 	bl	800319a <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_ADC_Init+0x1b0>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	2b10      	cmp	r3, #16
 80039ee:	d904      	bls.n	80039fa <HAL_ADC_Init+0x1ba>
 80039f0:	f240 1149 	movw	r1, #329	; 0x149
 80039f4:	482a      	ldr	r0, [pc, #168]	; (8003aa0 <HAL_ADC_Init+0x260>)
 80039f6:	f7ff fbd0 	bl	800319a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d009      	beq.n	8003a18 <HAL_ADC_Init+0x1d8>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d004      	beq.n	8003a18 <HAL_ADC_Init+0x1d8>
 8003a0e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8003a12:	4823      	ldr	r0, [pc, #140]	; (8003aa0 <HAL_ADC_Init+0x260>)
 8003a14:	f7ff fbc1 	bl	800319a <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d00c      	beq.n	8003a3a <HAL_ADC_Init+0x1fa>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_ADC_Init+0x1fa>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d004      	beq.n	8003a3a <HAL_ADC_Init+0x1fa>
 8003a30:	f240 114b 	movw	r1, #331	; 0x14b
 8003a34:	481a      	ldr	r0, [pc, #104]	; (8003aa0 <HAL_ADC_Init+0x260>)
 8003a36:	f7ff fbb0 	bl	800319a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d009      	beq.n	8003a58 <HAL_ADC_Init+0x218>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d004      	beq.n	8003a58 <HAL_ADC_Init+0x218>
 8003a4e:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8003a52:	4813      	ldr	r0, [pc, #76]	; (8003aa0 <HAL_ADC_Init+0x260>)
 8003a54:	f7ff fba1 	bl	800319a <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	4a11      	ldr	r2, [pc, #68]	; (8003aa4 <HAL_ADC_Init+0x264>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d022      	beq.n	8003aa8 <HAL_ADC_Init+0x268>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d01e      	beq.n	8003aa8 <HAL_ADC_Init+0x268>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a72:	d019      	beq.n	8003aa8 <HAL_ADC_Init+0x268>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a7c:	d014      	beq.n	8003aa8 <HAL_ADC_Init+0x268>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a86:	d00f      	beq.n	8003aa8 <HAL_ADC_Init+0x268>
 8003a88:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8003a8c:	4804      	ldr	r0, [pc, #16]	; (8003aa0 <HAL_ADC_Init+0x260>)
 8003a8e:	f7ff fb84 	bl	800319a <assert_failed>
 8003a92:	e009      	b.n	8003aa8 <HAL_ADC_Init+0x268>
 8003a94:	40012000 	.word	0x40012000
 8003a98:	40012100 	.word	0x40012100
 8003a9c:	40012200 	.word	0x40012200
 8003aa0:	0800c644 	.word	0x0800c644
 8003aa4:	0f000001 	.word	0x0f000001
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d109      	bne.n	8003ac4 <HAL_ADC_Init+0x284>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7fe fb71 	bl	8002198 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d118      	bne.n	8003b02 <HAL_ADC_Init+0x2c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ad8:	f023 0302 	bic.w	r3, r3, #2
 8003adc:	f043 0202 	orr.w	r2, r3, #2
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f98d 	bl	8003e04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	f023 0303 	bic.w	r3, r3, #3
 8003af8:	f043 0201 	orr.w	r2, r3, #1
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40
 8003b00:	e001      	b.n	8003b06 <HAL_ADC_Init+0x2c6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b12      	cmp	r3, #18
 8003b2c:	d909      	bls.n	8003b42 <HAL_ADC_ConfigChannel+0x2a>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a72      	ldr	r2, [pc, #456]	; (8003cfc <HAL_ADC_ConfigChannel+0x1e4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d004      	beq.n	8003b42 <HAL_ADC_ConfigChannel+0x2a>
 8003b38:	f240 618b 	movw	r1, #1675	; 0x68b
 8003b3c:	4870      	ldr	r0, [pc, #448]	; (8003d00 <HAL_ADC_ConfigChannel+0x1e8>)
 8003b3e:	f7ff fb2c 	bl	800319a <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_ADC_ConfigChannel+0x3a>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b10      	cmp	r3, #16
 8003b50:	d904      	bls.n	8003b5c <HAL_ADC_ConfigChannel+0x44>
 8003b52:	f240 618c 	movw	r1, #1676	; 0x68c
 8003b56:	486a      	ldr	r0, [pc, #424]	; (8003d00 <HAL_ADC_ConfigChannel+0x1e8>)
 8003b58:	f7ff fb1f 	bl	800319a <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d020      	beq.n	8003ba6 <HAL_ADC_ConfigChannel+0x8e>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d01c      	beq.n	8003ba6 <HAL_ADC_ConfigChannel+0x8e>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d018      	beq.n	8003ba6 <HAL_ADC_ConfigChannel+0x8e>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d014      	beq.n	8003ba6 <HAL_ADC_ConfigChannel+0x8e>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d010      	beq.n	8003ba6 <HAL_ADC_ConfigChannel+0x8e>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b05      	cmp	r3, #5
 8003b8a:	d00c      	beq.n	8003ba6 <HAL_ADC_ConfigChannel+0x8e>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b06      	cmp	r3, #6
 8003b92:	d008      	beq.n	8003ba6 <HAL_ADC_ConfigChannel+0x8e>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b07      	cmp	r3, #7
 8003b9a:	d004      	beq.n	8003ba6 <HAL_ADC_ConfigChannel+0x8e>
 8003b9c:	f240 618d 	movw	r1, #1677	; 0x68d
 8003ba0:	4857      	ldr	r0, [pc, #348]	; (8003d00 <HAL_ADC_ConfigChannel+0x1e8>)
 8003ba2:	f7ff fafa 	bl	800319a <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x9c>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e118      	b.n	8003de6 <HAL_ADC_ConfigChannel+0x2ce>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b09      	cmp	r3, #9
 8003bc2:	d925      	bls.n	8003c10 <HAL_ADC_ConfigChannel+0xf8>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68d9      	ldr	r1, [r3, #12]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3b1e      	subs	r3, #30
 8003bda:	2207      	movs	r2, #7
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43da      	mvns	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	400a      	ands	r2, r1
 8003be8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68d9      	ldr	r1, [r3, #12]
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4403      	add	r3, r0
 8003c02:	3b1e      	subs	r3, #30
 8003c04:	409a      	lsls	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	60da      	str	r2, [r3, #12]
 8003c0e:	e022      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6919      	ldr	r1, [r3, #16]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4613      	mov	r3, r2
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	4413      	add	r3, r2
 8003c24:	2207      	movs	r2, #7
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	400a      	ands	r2, r1
 8003c32:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6919      	ldr	r1, [r3, #16]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	4618      	mov	r0, r3
 8003c46:	4603      	mov	r3, r0
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	4403      	add	r3, r0
 8003c4c:	409a      	lsls	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b06      	cmp	r3, #6
 8003c5c:	d824      	bhi.n	8003ca8 <HAL_ADC_ConfigChannel+0x190>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	3b05      	subs	r3, #5
 8003c70:	221f      	movs	r2, #31
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	43da      	mvns	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	400a      	ands	r2, r1
 8003c7e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	3b05      	subs	r3, #5
 8003c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ca6:	e051      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x234>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2b0c      	cmp	r3, #12
 8003cae:	d829      	bhi.n	8003d04 <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3b23      	subs	r3, #35	; 0x23
 8003cc2:	221f      	movs	r2, #31
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43da      	mvns	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	400a      	ands	r2, r1
 8003cd0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	4618      	mov	r0, r3
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	3b23      	subs	r3, #35	; 0x23
 8003cec:	fa00 f203 	lsl.w	r2, r0, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	631a      	str	r2, [r3, #48]	; 0x30
 8003cf8:	e028      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x234>
 8003cfa:	bf00      	nop
 8003cfc:	10000012 	.word	0x10000012
 8003d00:	0800c644 	.word	0x0800c644
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	3b41      	subs	r3, #65	; 0x41
 8003d16:	221f      	movs	r2, #31
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	43da      	mvns	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	400a      	ands	r2, r1
 8003d24:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	4618      	mov	r0, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3b41      	subs	r3, #65	; 0x41
 8003d40:	fa00 f203 	lsl.w	r2, r0, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d4c:	4b28      	ldr	r3, [pc, #160]	; (8003df0 <HAL_ADC_ConfigChannel+0x2d8>)
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a27      	ldr	r2, [pc, #156]	; (8003df4 <HAL_ADC_ConfigChannel+0x2dc>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d10f      	bne.n	8003d7a <HAL_ADC_ConfigChannel+0x262>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b12      	cmp	r3, #18
 8003d60:	d10b      	bne.n	8003d7a <HAL_ADC_ConfigChannel+0x262>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1d      	ldr	r2, [pc, #116]	; (8003df4 <HAL_ADC_ConfigChannel+0x2dc>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d12b      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x2c4>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a1b      	ldr	r2, [pc, #108]	; (8003df8 <HAL_ADC_ConfigChannel+0x2e0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d003      	beq.n	8003d96 <HAL_ADC_ConfigChannel+0x27e>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b11      	cmp	r3, #17
 8003d94:	d122      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x2c4>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a11      	ldr	r2, [pc, #68]	; (8003df8 <HAL_ADC_ConfigChannel+0x2e0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d111      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x2c4>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003db8:	4b10      	ldr	r3, [pc, #64]	; (8003dfc <HAL_ADC_ConfigChannel+0x2e4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a10      	ldr	r2, [pc, #64]	; (8003e00 <HAL_ADC_ConfigChannel+0x2e8>)
 8003dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc2:	0c9a      	lsrs	r2, r3, #18
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003dce:	e002      	b.n	8003dd6 <HAL_ADC_ConfigChannel+0x2be>
      {
        counter--;
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f9      	bne.n	8003dd0 <HAL_ADC_ConfigChannel+0x2b8>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40012300 	.word	0x40012300
 8003df4:	40012000 	.word	0x40012000
 8003df8:	10000012 	.word	0x10000012
 8003dfc:	20000040 	.word	0x20000040
 8003e00:	431bde83 	.word	0x431bde83

08003e04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e0c:	4b7f      	ldr	r3, [pc, #508]	; (800400c <ADC_Init+0x208>)
 8003e0e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	431a      	orrs	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	021a      	lsls	r2, r3, #8
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6859      	ldr	r1, [r3, #4]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6899      	ldr	r1, [r3, #8]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e96:	4a5e      	ldr	r2, [pc, #376]	; (8004010 <ADC_Init+0x20c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d022      	beq.n	8003ee2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003eaa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6899      	ldr	r1, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ecc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6899      	ldr	r1, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	609a      	str	r2, [r3, #8]
 8003ee0:	e00f      	b.n	8003f02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ef0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0202 	bic.w	r2, r2, #2
 8003f10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6899      	ldr	r1, [r3, #8]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	7e1b      	ldrb	r3, [r3, #24]
 8003f1c:	005a      	lsls	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d028      	beq.n	8003f82 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <ADC_Init+0x13c>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d904      	bls.n	8003f4a <ADC_Init+0x146>
 8003f40:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8003f44:	4833      	ldr	r0, [pc, #204]	; (8004014 <ADC_Init+0x210>)
 8003f46:	f7ff f928 	bl	800319a <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f58:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f68:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6859      	ldr	r1, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	3b01      	subs	r3, #1
 8003f76:	035a      	lsls	r2, r3, #13
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	605a      	str	r2, [r3, #4]
 8003f80:	e007      	b.n	8003f92 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f90:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	3b01      	subs	r3, #1
 8003fae:	051a      	lsls	r2, r3, #20
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003fc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6899      	ldr	r1, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003fd4:	025a      	lsls	r2, r3, #9
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6899      	ldr	r1, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	029a      	lsls	r2, r3, #10
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	609a      	str	r2, [r3, #8]
}
 8004002:	bf00      	nop
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40012300 	.word	0x40012300
 8004010:	0f000001 	.word	0x0f000001
 8004014:	0800c644 	.word	0x0800c644

08004018 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e243      	b.n	80044b2 <HAL_CAN_Init+0x49a>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a93      	ldr	r2, [pc, #588]	; (800427c <HAL_CAN_Init+0x264>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d009      	beq.n	8004048 <HAL_CAN_Init+0x30>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a91      	ldr	r2, [pc, #580]	; (8004280 <HAL_CAN_Init+0x268>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d004      	beq.n	8004048 <HAL_CAN_Init+0x30>
 800403e:	f240 111d 	movw	r1, #285	; 0x11d
 8004042:	4890      	ldr	r0, [pc, #576]	; (8004284 <HAL_CAN_Init+0x26c>)
 8004044:	f7ff f8a9 	bl	800319a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7e1b      	ldrb	r3, [r3, #24]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d008      	beq.n	8004062 <HAL_CAN_Init+0x4a>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	7e1b      	ldrb	r3, [r3, #24]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d004      	beq.n	8004062 <HAL_CAN_Init+0x4a>
 8004058:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800405c:	4889      	ldr	r0, [pc, #548]	; (8004284 <HAL_CAN_Init+0x26c>)
 800405e:	f7ff f89c 	bl	800319a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	7e5b      	ldrb	r3, [r3, #25]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d008      	beq.n	800407c <HAL_CAN_Init+0x64>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	7e5b      	ldrb	r3, [r3, #25]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d004      	beq.n	800407c <HAL_CAN_Init+0x64>
 8004072:	f240 111f 	movw	r1, #287	; 0x11f
 8004076:	4883      	ldr	r0, [pc, #524]	; (8004284 <HAL_CAN_Init+0x26c>)
 8004078:	f7ff f88f 	bl	800319a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	7e9b      	ldrb	r3, [r3, #26]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_CAN_Init+0x7e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	7e9b      	ldrb	r3, [r3, #26]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d004      	beq.n	8004096 <HAL_CAN_Init+0x7e>
 800408c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8004090:	487c      	ldr	r0, [pc, #496]	; (8004284 <HAL_CAN_Init+0x26c>)
 8004092:	f7ff f882 	bl	800319a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	7edb      	ldrb	r3, [r3, #27]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d008      	beq.n	80040b0 <HAL_CAN_Init+0x98>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	7edb      	ldrb	r3, [r3, #27]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d004      	beq.n	80040b0 <HAL_CAN_Init+0x98>
 80040a6:	f240 1121 	movw	r1, #289	; 0x121
 80040aa:	4876      	ldr	r0, [pc, #472]	; (8004284 <HAL_CAN_Init+0x26c>)
 80040ac:	f7ff f875 	bl	800319a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	7f1b      	ldrb	r3, [r3, #28]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d008      	beq.n	80040ca <HAL_CAN_Init+0xb2>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	7f1b      	ldrb	r3, [r3, #28]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d004      	beq.n	80040ca <HAL_CAN_Init+0xb2>
 80040c0:	f44f 7191 	mov.w	r1, #290	; 0x122
 80040c4:	486f      	ldr	r0, [pc, #444]	; (8004284 <HAL_CAN_Init+0x26c>)
 80040c6:	f7ff f868 	bl	800319a <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	7f5b      	ldrb	r3, [r3, #29]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <HAL_CAN_Init+0xcc>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	7f5b      	ldrb	r3, [r3, #29]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d004      	beq.n	80040e4 <HAL_CAN_Init+0xcc>
 80040da:	f240 1123 	movw	r1, #291	; 0x123
 80040de:	4869      	ldr	r0, [pc, #420]	; (8004284 <HAL_CAN_Init+0x26c>)
 80040e0:	f7ff f85b 	bl	800319a <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d013      	beq.n	8004114 <HAL_CAN_Init+0xfc>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f4:	d00e      	beq.n	8004114 <HAL_CAN_Init+0xfc>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040fe:	d009      	beq.n	8004114 <HAL_CAN_Init+0xfc>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004108:	d004      	beq.n	8004114 <HAL_CAN_Init+0xfc>
 800410a:	f44f 7192 	mov.w	r1, #292	; 0x124
 800410e:	485d      	ldr	r0, [pc, #372]	; (8004284 <HAL_CAN_Init+0x26c>)
 8004110:	f7ff f843 	bl	800319a <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d013      	beq.n	8004144 <HAL_CAN_Init+0x12c>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004124:	d00e      	beq.n	8004144 <HAL_CAN_Init+0x12c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800412e:	d009      	beq.n	8004144 <HAL_CAN_Init+0x12c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004138:	d004      	beq.n	8004144 <HAL_CAN_Init+0x12c>
 800413a:	f240 1125 	movw	r1, #293	; 0x125
 800413e:	4851      	ldr	r0, [pc, #324]	; (8004284 <HAL_CAN_Init+0x26c>)
 8004140:	f7ff f82b 	bl	800319a <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d04f      	beq.n	80041ec <HAL_CAN_Init+0x1d4>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004154:	d04a      	beq.n	80041ec <HAL_CAN_Init+0x1d4>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800415e:	d045      	beq.n	80041ec <HAL_CAN_Init+0x1d4>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004168:	d040      	beq.n	80041ec <HAL_CAN_Init+0x1d4>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004172:	d03b      	beq.n	80041ec <HAL_CAN_Init+0x1d4>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800417c:	d036      	beq.n	80041ec <HAL_CAN_Init+0x1d4>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004186:	d031      	beq.n	80041ec <HAL_CAN_Init+0x1d4>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8004190:	d02c      	beq.n	80041ec <HAL_CAN_Init+0x1d4>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800419a:	d027      	beq.n	80041ec <HAL_CAN_Init+0x1d4>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 80041a4:	d022      	beq.n	80041ec <HAL_CAN_Init+0x1d4>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80041ae:	d01d      	beq.n	80041ec <HAL_CAN_Init+0x1d4>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 80041b8:	d018      	beq.n	80041ec <HAL_CAN_Init+0x1d4>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80041c2:	d013      	beq.n	80041ec <HAL_CAN_Init+0x1d4>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 80041cc:	d00e      	beq.n	80041ec <HAL_CAN_Init+0x1d4>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80041d6:	d009      	beq.n	80041ec <HAL_CAN_Init+0x1d4>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 80041e0:	d004      	beq.n	80041ec <HAL_CAN_Init+0x1d4>
 80041e2:	f44f 7193 	mov.w	r1, #294	; 0x126
 80041e6:	4827      	ldr	r0, [pc, #156]	; (8004284 <HAL_CAN_Init+0x26c>)
 80041e8:	f7fe ffd7 	bl	800319a <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d027      	beq.n	8004244 <HAL_CAN_Init+0x22c>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041fc:	d022      	beq.n	8004244 <HAL_CAN_Init+0x22c>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004206:	d01d      	beq.n	8004244 <HAL_CAN_Init+0x22c>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004210:	d018      	beq.n	8004244 <HAL_CAN_Init+0x22c>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800421a:	d013      	beq.n	8004244 <HAL_CAN_Init+0x22c>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004224:	d00e      	beq.n	8004244 <HAL_CAN_Init+0x22c>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800422e:	d009      	beq.n	8004244 <HAL_CAN_Init+0x22c>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8004238:	d004      	beq.n	8004244 <HAL_CAN_Init+0x22c>
 800423a:	f240 1127 	movw	r1, #295	; 0x127
 800423e:	4811      	ldr	r0, [pc, #68]	; (8004284 <HAL_CAN_Init+0x26c>)
 8004240:	f7fe ffab 	bl	800319a <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d004      	beq.n	8004256 <HAL_CAN_Init+0x23e>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004254:	d904      	bls.n	8004260 <HAL_CAN_Init+0x248>
 8004256:	f44f 7194 	mov.w	r1, #296	; 0x128
 800425a:	480a      	ldr	r0, [pc, #40]	; (8004284 <HAL_CAN_Init+0x26c>)
 800425c:	f7fe ff9d 	bl	800319a <assert_failed>

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d13d      	bne.n	80042e8 <HAL_CAN_Init+0x2d0>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a06      	ldr	r2, [pc, #24]	; (8004288 <HAL_CAN_Init+0x270>)
 8004270:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a05      	ldr	r2, [pc, #20]	; (800428c <HAL_CAN_Init+0x274>)
 8004276:	645a      	str	r2, [r3, #68]	; 0x44
 8004278:	e00a      	b.n	8004290 <HAL_CAN_Init+0x278>
 800427a:	bf00      	nop
 800427c:	40006400 	.word	0x40006400
 8004280:	40006800 	.word	0x40006800
 8004284:	0800c67c 	.word	0x0800c67c
 8004288:	08002221 	.word	0x08002221
 800428c:	08005097 	.word	0x08005097
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a8a      	ldr	r2, [pc, #552]	; (80044bc <HAL_CAN_Init+0x4a4>)
 8004294:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a89      	ldr	r2, [pc, #548]	; (80044c0 <HAL_CAN_Init+0x4a8>)
 800429a:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a89      	ldr	r2, [pc, #548]	; (80044c4 <HAL_CAN_Init+0x4ac>)
 80042a0:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a88      	ldr	r2, [pc, #544]	; (80044c8 <HAL_CAN_Init+0x4b0>)
 80042a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a88      	ldr	r2, [pc, #544]	; (80044cc <HAL_CAN_Init+0x4b4>)
 80042ac:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a87      	ldr	r2, [pc, #540]	; (80044d0 <HAL_CAN_Init+0x4b8>)
 80042b2:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a87      	ldr	r2, [pc, #540]	; (80044d4 <HAL_CAN_Init+0x4bc>)
 80042b8:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a86      	ldr	r2, [pc, #536]	; (80044d8 <HAL_CAN_Init+0x4c0>)
 80042be:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a86      	ldr	r2, [pc, #536]	; (80044dc <HAL_CAN_Init+0x4c4>)
 80042c4:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a85      	ldr	r2, [pc, #532]	; (80044e0 <HAL_CAN_Init+0x4c8>)
 80042ca:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a85      	ldr	r2, [pc, #532]	; (80044e4 <HAL_CAN_Init+0x4cc>)
 80042d0:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d102      	bne.n	80042e0 <HAL_CAN_Init+0x2c8>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a82      	ldr	r2, [pc, #520]	; (80044e8 <HAL_CAN_Init+0x4d0>)
 80042de:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042f8:	f7ff fa72 	bl	80037e0 <HAL_GetTick>
 80042fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80042fe:	e012      	b.n	8004326 <HAL_CAN_Init+0x30e>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004300:	f7ff fa6e 	bl	80037e0 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b0a      	cmp	r3, #10
 800430c:	d90b      	bls.n	8004326 <HAL_CAN_Init+0x30e>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2205      	movs	r2, #5
 800431e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e0c5      	b.n	80044b2 <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d0e5      	beq.n	8004300 <HAL_CAN_Init+0x2e8>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0202 	bic.w	r2, r2, #2
 8004342:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004344:	f7ff fa4c 	bl	80037e0 <HAL_GetTick>
 8004348:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800434a:	e012      	b.n	8004372 <HAL_CAN_Init+0x35a>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800434c:	f7ff fa48 	bl	80037e0 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b0a      	cmp	r3, #10
 8004358:	d90b      	bls.n	8004372 <HAL_CAN_Init+0x35a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2205      	movs	r2, #5
 800436a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e09f      	b.n	80044b2 <HAL_CAN_Init+0x49a>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e5      	bne.n	800434c <HAL_CAN_Init+0x334>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	7e1b      	ldrb	r3, [r3, #24]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d108      	bne.n	800439a <HAL_CAN_Init+0x382>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	e007      	b.n	80043aa <HAL_CAN_Init+0x392>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	7e5b      	ldrb	r3, [r3, #25]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d108      	bne.n	80043c4 <HAL_CAN_Init+0x3ac>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	e007      	b.n	80043d4 <HAL_CAN_Init+0x3bc>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	7e9b      	ldrb	r3, [r3, #26]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d108      	bne.n	80043ee <HAL_CAN_Init+0x3d6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0220 	orr.w	r2, r2, #32
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	e007      	b.n	80043fe <HAL_CAN_Init+0x3e6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0220 	bic.w	r2, r2, #32
 80043fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	7edb      	ldrb	r3, [r3, #27]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d108      	bne.n	8004418 <HAL_CAN_Init+0x400>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0210 	bic.w	r2, r2, #16
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	e007      	b.n	8004428 <HAL_CAN_Init+0x410>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0210 	orr.w	r2, r2, #16
 8004426:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	7f1b      	ldrb	r3, [r3, #28]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d108      	bne.n	8004442 <HAL_CAN_Init+0x42a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0208 	orr.w	r2, r2, #8
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	e007      	b.n	8004452 <HAL_CAN_Init+0x43a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0208 	bic.w	r2, r2, #8
 8004450:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	7f5b      	ldrb	r3, [r3, #29]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d108      	bne.n	800446c <HAL_CAN_Init+0x454>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f042 0204 	orr.w	r2, r2, #4
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	e007      	b.n	800447c <HAL_CAN_Init+0x464>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0204 	bic.w	r2, r2, #4
 800447a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	431a      	orrs	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	ea42 0103 	orr.w	r1, r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	1e5a      	subs	r2, r3, #1
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	080050ab 	.word	0x080050ab
 80044c0:	080050bf 	.word	0x080050bf
 80044c4:	0800501f 	.word	0x0800501f
 80044c8:	08005033 	.word	0x08005033
 80044cc:	08005047 	.word	0x08005047
 80044d0:	0800505b 	.word	0x0800505b
 80044d4:	0800506f 	.word	0x0800506f
 80044d8:	08005083 	.word	0x08005083
 80044dc:	080050d3 	.word	0x080050d3
 80044e0:	080050e7 	.word	0x080050e7
 80044e4:	080050fb 	.word	0x080050fb
 80044e8:	08002519 	.word	0x08002519

080044ec <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004502:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004504:	7cfb      	ldrb	r3, [r7, #19]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d003      	beq.n	8004512 <HAL_CAN_ConfigFilter+0x26>
 800450a:	7cfb      	ldrb	r3, [r7, #19]
 800450c:	2b02      	cmp	r3, #2
 800450e:	f040 812c 	bne.w	800476a <HAL_CAN_ConfigFilter+0x27e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800451a:	d304      	bcc.n	8004526 <HAL_CAN_ConfigFilter+0x3a>
 800451c:	f44f 7154 	mov.w	r1, #848	; 0x350
 8004520:	4897      	ldr	r0, [pc, #604]	; (8004780 <HAL_CAN_ConfigFilter+0x294>)
 8004522:	f7fe fe3a 	bl	800319a <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452e:	d304      	bcc.n	800453a <HAL_CAN_ConfigFilter+0x4e>
 8004530:	f240 3151 	movw	r1, #849	; 0x351
 8004534:	4892      	ldr	r0, [pc, #584]	; (8004780 <HAL_CAN_ConfigFilter+0x294>)
 8004536:	f7fe fe30 	bl	800319a <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004542:	d304      	bcc.n	800454e <HAL_CAN_ConfigFilter+0x62>
 8004544:	f240 3152 	movw	r1, #850	; 0x352
 8004548:	488d      	ldr	r0, [pc, #564]	; (8004780 <HAL_CAN_ConfigFilter+0x294>)
 800454a:	f7fe fe26 	bl	800319a <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004556:	d304      	bcc.n	8004562 <HAL_CAN_ConfigFilter+0x76>
 8004558:	f240 3153 	movw	r1, #851	; 0x353
 800455c:	4888      	ldr	r0, [pc, #544]	; (8004780 <HAL_CAN_ConfigFilter+0x294>)
 800455e:	f7fe fe1c 	bl	800319a <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d008      	beq.n	800457c <HAL_CAN_ConfigFilter+0x90>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d004      	beq.n	800457c <HAL_CAN_ConfigFilter+0x90>
 8004572:	f44f 7155 	mov.w	r1, #852	; 0x354
 8004576:	4882      	ldr	r0, [pc, #520]	; (8004780 <HAL_CAN_ConfigFilter+0x294>)
 8004578:	f7fe fe0f 	bl	800319a <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <HAL_CAN_ConfigFilter+0xaa>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d004      	beq.n	8004596 <HAL_CAN_ConfigFilter+0xaa>
 800458c:	f240 3155 	movw	r1, #853	; 0x355
 8004590:	487b      	ldr	r0, [pc, #492]	; (8004780 <HAL_CAN_ConfigFilter+0x294>)
 8004592:	f7fe fe02 	bl	800319a <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d008      	beq.n	80045b0 <HAL_CAN_ConfigFilter+0xc4>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d004      	beq.n	80045b0 <HAL_CAN_ConfigFilter+0xc4>
 80045a6:	f240 3156 	movw	r1, #854	; 0x356
 80045aa:	4875      	ldr	r0, [pc, #468]	; (8004780 <HAL_CAN_ConfigFilter+0x294>)
 80045ac:	f7fe fdf5 	bl	800319a <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d008      	beq.n	80045ca <HAL_CAN_ConfigFilter+0xde>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d004      	beq.n	80045ca <HAL_CAN_ConfigFilter+0xde>
 80045c0:	f240 3157 	movw	r1, #855	; 0x357
 80045c4:	486e      	ldr	r0, [pc, #440]	; (8004780 <HAL_CAN_ConfigFilter+0x294>)
 80045c6:	f7fe fde8 	bl	800319a <assert_failed>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80045ca:	4b6e      	ldr	r3, [pc, #440]	; (8004784 <HAL_CAN_ConfigFilter+0x298>)
 80045cc:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	2b1b      	cmp	r3, #27
 80045d4:	d904      	bls.n	80045e0 <HAL_CAN_ConfigFilter+0xf4>
 80045d6:	f240 3172 	movw	r1, #882	; 0x372
 80045da:	4869      	ldr	r0, [pc, #420]	; (8004780 <HAL_CAN_ConfigFilter+0x294>)
 80045dc:	f7fe fddd 	bl	800319a <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	2b1b      	cmp	r3, #27
 80045e6:	d904      	bls.n	80045f2 <HAL_CAN_ConfigFilter+0x106>
 80045e8:	f240 3173 	movw	r1, #883	; 0x373
 80045ec:	4864      	ldr	r0, [pc, #400]	; (8004780 <HAL_CAN_ConfigFilter+0x294>)
 80045ee:	f7fe fdd4 	bl	800319a <assert_failed>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045f8:	f043 0201 	orr.w	r2, r3, #1
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004608:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	431a      	orrs	r2, r3
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	f003 031f 	and.w	r3, r3, #31
 800462e:	2201      	movs	r2, #1
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	43db      	mvns	r3, r3
 8004640:	401a      	ands	r2, r3
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d123      	bne.n	8004698 <HAL_CAN_ConfigFilter+0x1ac>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	43db      	mvns	r3, r3
 800465a:	401a      	ands	r2, r3
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004672:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	3248      	adds	r2, #72	; 0x48
 8004678:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800468c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800468e:	6979      	ldr	r1, [r7, #20]
 8004690:	3348      	adds	r3, #72	; 0x48
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	440b      	add	r3, r1
 8004696:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d122      	bne.n	80046e6 <HAL_CAN_ConfigFilter+0x1fa>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	431a      	orrs	r2, r3
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80046c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	3248      	adds	r2, #72	; 0x48
 80046c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80046da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80046dc:	6979      	ldr	r1, [r7, #20]
 80046de:	3348      	adds	r3, #72	; 0x48
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	440b      	add	r3, r1
 80046e4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d109      	bne.n	8004702 <HAL_CAN_ConfigFilter+0x216>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	43db      	mvns	r3, r3
 80046f8:	401a      	ands	r2, r3
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004700:	e007      	b.n	8004712 <HAL_CAN_ConfigFilter+0x226>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	431a      	orrs	r2, r3
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d109      	bne.n	800472e <HAL_CAN_ConfigFilter+0x242>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	43db      	mvns	r3, r3
 8004724:	401a      	ands	r2, r3
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800472c:	e007      	b.n	800473e <HAL_CAN_ConfigFilter+0x252>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	431a      	orrs	r2, r3
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d107      	bne.n	8004756 <HAL_CAN_ConfigFilter+0x26a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	431a      	orrs	r2, r3
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800475c:	f023 0201 	bic.w	r2, r3, #1
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004766:	2300      	movs	r3, #0
 8004768:	e006      	b.n	8004778 <HAL_CAN_ConfigFilter+0x28c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
  }
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	0800c67c 	.word	0x0800c67c
 8004784:	40006400 	.word	0x40006400

08004788 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	d12e      	bne.n	80047fa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0201 	bic.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047b4:	f7ff f814 	bl	80037e0 <HAL_GetTick>
 80047b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80047ba:	e012      	b.n	80047e2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80047bc:	f7ff f810 	bl	80037e0 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b0a      	cmp	r3, #10
 80047c8:	d90b      	bls.n	80047e2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2205      	movs	r2, #5
 80047da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e012      	b.n	8004808 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1e5      	bne.n	80047bc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	e006      	b.n	8004808 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
  }
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004824:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d008      	beq.n	8004848 <HAL_CAN_AddTxMessage+0x38>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b04      	cmp	r3, #4
 800483c:	d004      	beq.n	8004848 <HAL_CAN_AddTxMessage+0x38>
 800483e:	f240 41e9 	movw	r1, #1257	; 0x4e9
 8004842:	4884      	ldr	r0, [pc, #528]	; (8004a54 <HAL_CAN_AddTxMessage+0x244>)
 8004844:	f7fe fca9 	bl	800319a <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d008      	beq.n	8004862 <HAL_CAN_AddTxMessage+0x52>
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	2b02      	cmp	r3, #2
 8004856:	d004      	beq.n	8004862 <HAL_CAN_AddTxMessage+0x52>
 8004858:	f240 41ea 	movw	r1, #1258	; 0x4ea
 800485c:	487d      	ldr	r0, [pc, #500]	; (8004a54 <HAL_CAN_AddTxMessage+0x244>)
 800485e:	f7fe fc9c 	bl	800319a <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	2b08      	cmp	r3, #8
 8004868:	d904      	bls.n	8004874 <HAL_CAN_AddTxMessage+0x64>
 800486a:	f240 41eb 	movw	r1, #1259	; 0x4eb
 800486e:	4879      	ldr	r0, [pc, #484]	; (8004a54 <HAL_CAN_AddTxMessage+0x244>)
 8004870:	f7fe fc93 	bl	800319a <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004884:	d30f      	bcc.n	80048a6 <HAL_CAN_AddTxMessage+0x96>
 8004886:	f240 41ee 	movw	r1, #1262	; 0x4ee
 800488a:	4872      	ldr	r0, [pc, #456]	; (8004a54 <HAL_CAN_AddTxMessage+0x244>)
 800488c:	f7fe fc85 	bl	800319a <assert_failed>
 8004890:	e009      	b.n	80048a6 <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800489a:	d304      	bcc.n	80048a6 <HAL_CAN_AddTxMessage+0x96>
 800489c:	f240 41f2 	movw	r1, #1266	; 0x4f2
 80048a0:	486c      	ldr	r0, [pc, #432]	; (8004a54 <HAL_CAN_AddTxMessage+0x244>)
 80048a2:	f7fe fc7a 	bl	800319a <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	7d1b      	ldrb	r3, [r3, #20]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d008      	beq.n	80048c0 <HAL_CAN_AddTxMessage+0xb0>
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	7d1b      	ldrb	r3, [r3, #20]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d004      	beq.n	80048c0 <HAL_CAN_AddTxMessage+0xb0>
 80048b6:	f240 41f4 	movw	r1, #1268	; 0x4f4
 80048ba:	4866      	ldr	r0, [pc, #408]	; (8004a54 <HAL_CAN_AddTxMessage+0x244>)
 80048bc:	f7fe fc6d 	bl	800319a <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 80048c0:	7ffb      	ldrb	r3, [r7, #31]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d003      	beq.n	80048ce <HAL_CAN_AddTxMessage+0xbe>
 80048c6:	7ffb      	ldrb	r3, [r7, #31]
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	f040 80b8 	bne.w	8004a3e <HAL_CAN_AddTxMessage+0x22e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10a      	bne.n	80048ee <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d105      	bne.n	80048ee <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 80a0 	beq.w	8004a2e <HAL_CAN_AddTxMessage+0x21e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	0e1b      	lsrs	r3, r3, #24
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d907      	bls.n	800490e <HAL_CAN_AddTxMessage+0xfe>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e09e      	b.n	8004a4c <HAL_CAN_AddTxMessage+0x23c>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800490e:	2201      	movs	r2, #1
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	409a      	lsls	r2, r3
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10d      	bne.n	800493c <HAL_CAN_AddTxMessage+0x12c>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800492a:	68f9      	ldr	r1, [r7, #12]
 800492c:	6809      	ldr	r1, [r1, #0]
 800492e:	431a      	orrs	r2, r3
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	3318      	adds	r3, #24
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	440b      	add	r3, r1
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	e00f      	b.n	800495c <HAL_CAN_AddTxMessage+0x14c>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004946:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800494c:	68f9      	ldr	r1, [r7, #12]
 800494e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004950:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	3318      	adds	r3, #24
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	440b      	add	r3, r1
 800495a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6819      	ldr	r1, [r3, #0]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	3318      	adds	r3, #24
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	440b      	add	r3, r1
 800496c:	3304      	adds	r3, #4
 800496e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	7d1b      	ldrb	r3, [r3, #20]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d111      	bne.n	800499c <HAL_CAN_AddTxMessage+0x18c>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	3318      	adds	r3, #24
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	4413      	add	r3, r2
 8004984:	3304      	adds	r3, #4
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	6811      	ldr	r1, [r2, #0]
 800498c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	3318      	adds	r3, #24
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	440b      	add	r3, r1
 8004998:	3304      	adds	r3, #4
 800499a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3307      	adds	r3, #7
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	061a      	lsls	r2, r3, #24
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3306      	adds	r3, #6
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	041b      	lsls	r3, r3, #16
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3305      	adds	r3, #5
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	021b      	lsls	r3, r3, #8
 80049b6:	4313      	orrs	r3, r2
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	3204      	adds	r2, #4
 80049bc:	7812      	ldrb	r2, [r2, #0]
 80049be:	4610      	mov	r0, r2
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	6811      	ldr	r1, [r2, #0]
 80049c4:	ea43 0200 	orr.w	r2, r3, r0
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	440b      	add	r3, r1
 80049ce:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80049d2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3303      	adds	r3, #3
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	061a      	lsls	r2, r3, #24
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3302      	adds	r3, #2
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	041b      	lsls	r3, r3, #16
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3301      	adds	r3, #1
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	021b      	lsls	r3, r3, #8
 80049ee:	4313      	orrs	r3, r2
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	7812      	ldrb	r2, [r2, #0]
 80049f4:	4610      	mov	r0, r2
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	6811      	ldr	r1, [r2, #0]
 80049fa:	ea43 0200 	orr.w	r2, r3, r0
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	440b      	add	r3, r1
 8004a04:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004a08:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	3318      	adds	r3, #24
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	4413      	add	r3, r2
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	6811      	ldr	r1, [r2, #0]
 8004a1c:	f043 0201 	orr.w	r2, r3, #1
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	3318      	adds	r3, #24
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	440b      	add	r3, r1
 8004a28:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	e00e      	b.n	8004a4c <HAL_CAN_AddTxMessage+0x23c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e006      	b.n	8004a4c <HAL_CAN_AddTxMessage+0x23c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
  }
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3720      	adds	r7, #32
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	0800c67c 	.word	0x0800c67c

08004a58 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a6c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d007      	beq.n	8004a84 <HAL_CAN_GetRxMessage+0x2c>
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d004      	beq.n	8004a84 <HAL_CAN_GetRxMessage+0x2c>
 8004a7a:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 8004a7e:	4884      	ldr	r0, [pc, #528]	; (8004c90 <HAL_CAN_GetRxMessage+0x238>)
 8004a80:	f7fe fb8b 	bl	800319a <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8004a84:	7dfb      	ldrb	r3, [r7, #23]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d003      	beq.n	8004a92 <HAL_CAN_GetRxMessage+0x3a>
 8004a8a:	7dfb      	ldrb	r3, [r7, #23]
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	f040 80f3 	bne.w	8004c78 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10e      	bne.n	8004ab6 <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d116      	bne.n	8004ad4 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e0e7      	b.n	8004c86 <HAL_CAN_GetRxMessage+0x22e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	f003 0303 	and.w	r3, r3, #3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d107      	bne.n	8004ad4 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0d8      	b.n	8004c86 <HAL_CAN_GetRxMessage+0x22e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	331b      	adds	r3, #27
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	4413      	add	r3, r2
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0204 	and.w	r2, r3, #4
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10c      	bne.n	8004b0c <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	331b      	adds	r3, #27
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	4413      	add	r3, r2
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	0d5b      	lsrs	r3, r3, #21
 8004b02:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	e00b      	b.n	8004b24 <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	331b      	adds	r3, #27
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	4413      	add	r3, r2
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	08db      	lsrs	r3, r3, #3
 8004b1c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	331b      	adds	r3, #27
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	4413      	add	r3, r2
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0202 	and.w	r2, r3, #2
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	331b      	adds	r3, #27
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	4413      	add	r3, r2
 8004b46:	3304      	adds	r3, #4
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 020f 	and.w	r2, r3, #15
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	331b      	adds	r3, #27
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	4413      	add	r3, r2
 8004b5e:	3304      	adds	r3, #4
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	0a1b      	lsrs	r3, r3, #8
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	331b      	adds	r3, #27
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	4413      	add	r3, r2
 8004b76:	3304      	adds	r3, #4
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	0c1b      	lsrs	r3, r3, #16
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	0a1a      	lsrs	r2, r3, #8
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	3301      	adds	r3, #1
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	0c1a      	lsrs	r2, r3, #16
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	3302      	adds	r3, #2
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	0e1a      	lsrs	r2, r3, #24
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	3303      	adds	r3, #3
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	0a1a      	lsrs	r2, r3, #8
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	3305      	adds	r3, #5
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	0c1a      	lsrs	r2, r3, #16
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	3306      	adds	r3, #6
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	0e1a      	lsrs	r2, r3, #24
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	3307      	adds	r3, #7
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d108      	bne.n	8004c64 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0220 	orr.w	r2, r2, #32
 8004c60:	60da      	str	r2, [r3, #12]
 8004c62:	e007      	b.n	8004c74 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691a      	ldr	r2, [r3, #16]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0220 	orr.w	r2, r2, #32
 8004c72:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	e006      	b.n	8004c86 <HAL_CAN_GetRxMessage+0x22e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
  }
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	0800c67c 	.word	0x0800c67c

08004c94 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08a      	sub	sp, #40	; 0x28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 8083 	beq.w	8004de2 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d025      	beq.n	8004d32 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2201      	movs	r2, #1
 8004cec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d004      	beq.n	8004d02 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	4798      	blx	r3
 8004d00:	e017      	b.n	8004d32 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d004      	beq.n	8004d16 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
 8004d14:	e00d      	b.n	8004d32 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	f003 0308 	and.w	r3, r3, #8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d004      	beq.n	8004d2a <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
 8004d28:	e003      	b.n	8004d32 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d026      	beq.n	8004d8a <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d44:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d004      	beq.n	8004d5a <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	4798      	blx	r3
 8004d58:	e017      	b.n	8004d8a <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d004      	beq.n	8004d6e <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6c:	e00d      	b.n	8004d8a <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d004      	beq.n	8004d82 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d80:	e003      	b.n	8004d8a <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d026      	beq.n	8004de2 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004d9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d004      	beq.n	8004db2 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	4798      	blx	r3
 8004db0:	e017      	b.n	8004de2 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d004      	beq.n	8004dc6 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc4:	e00d      	b.n	8004de2 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d004      	beq.n	8004dda <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd8:	e003      	b.n	8004de2 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00c      	beq.n	8004e06 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f003 0310 	and.w	r3, r3, #16
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d007      	beq.n	8004e06 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2210      	movs	r2, #16
 8004e04:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00c      	beq.n	8004e2a <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f003 0308 	and.w	r3, r3, #8
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d007      	beq.n	8004e2a <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2208      	movs	r2, #8
 8004e20:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00a      	beq.n	8004e4a <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00c      	beq.n	8004e6e <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	f003 0310 	and.w	r3, r3, #16
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d007      	beq.n	8004e6e <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2210      	movs	r2, #16
 8004e6c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00c      	beq.n	8004e92 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d007      	beq.n	8004e92 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2208      	movs	r2, #8
 8004e88:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	f003 0310 	and.w	r3, r3, #16
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00c      	beq.n	8004ed6 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f003 0310 	and.w	r3, r3, #16
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d007      	beq.n	8004ed6 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2210      	movs	r2, #16
 8004ecc:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00c      	beq.n	8004efa <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d007      	beq.n	8004efa <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2208      	movs	r2, #8
 8004ef0:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d07b      	beq.n	8004ffc <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f003 0304 	and.w	r3, r3, #4
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d072      	beq.n	8004ff4 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d008      	beq.n	8004f2a <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	f043 0301 	orr.w	r3, r3, #1
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d008      	beq.n	8004f46 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	f043 0302 	orr.w	r3, r3, #2
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	f043 0304 	orr.w	r3, r3, #4
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d043      	beq.n	8004ff4 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d03e      	beq.n	8004ff4 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f7c:	2b60      	cmp	r3, #96	; 0x60
 8004f7e:	d02b      	beq.n	8004fd8 <HAL_CAN_IRQHandler+0x344>
 8004f80:	2b60      	cmp	r3, #96	; 0x60
 8004f82:	d82e      	bhi.n	8004fe2 <HAL_CAN_IRQHandler+0x34e>
 8004f84:	2b50      	cmp	r3, #80	; 0x50
 8004f86:	d022      	beq.n	8004fce <HAL_CAN_IRQHandler+0x33a>
 8004f88:	2b50      	cmp	r3, #80	; 0x50
 8004f8a:	d82a      	bhi.n	8004fe2 <HAL_CAN_IRQHandler+0x34e>
 8004f8c:	2b40      	cmp	r3, #64	; 0x40
 8004f8e:	d019      	beq.n	8004fc4 <HAL_CAN_IRQHandler+0x330>
 8004f90:	2b40      	cmp	r3, #64	; 0x40
 8004f92:	d826      	bhi.n	8004fe2 <HAL_CAN_IRQHandler+0x34e>
 8004f94:	2b30      	cmp	r3, #48	; 0x30
 8004f96:	d010      	beq.n	8004fba <HAL_CAN_IRQHandler+0x326>
 8004f98:	2b30      	cmp	r3, #48	; 0x30
 8004f9a:	d822      	bhi.n	8004fe2 <HAL_CAN_IRQHandler+0x34e>
 8004f9c:	2b10      	cmp	r3, #16
 8004f9e:	d002      	beq.n	8004fa6 <HAL_CAN_IRQHandler+0x312>
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d005      	beq.n	8004fb0 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004fa4:	e01d      	b.n	8004fe2 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	f043 0308 	orr.w	r3, r3, #8
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004fae:	e019      	b.n	8004fe4 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	f043 0310 	orr.w	r3, r3, #16
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004fb8:	e014      	b.n	8004fe4 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	f043 0320 	orr.w	r3, r3, #32
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004fc2:	e00f      	b.n	8004fe4 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004fcc:	e00a      	b.n	8004fe4 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004fd6:	e005      	b.n	8004fe4 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004fe0:	e000      	b.n	8004fe4 <HAL_CAN_IRQHandler+0x350>
            break;
 8004fe2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699a      	ldr	r2, [r3, #24]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ff2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2204      	movs	r2, #4
 8004ffa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d009      	beq.n	8005016 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	431a      	orrs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005016:	bf00      	nop
 8005018:	3728      	adds	r7, #40	; 0x28
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b083      	sub	sp, #12
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
	...

08005110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005120:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <__NVIC_SetPriorityGrouping+0x44>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800512c:	4013      	ands	r3, r2
 800512e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800513c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005142:	4a04      	ldr	r2, [pc, #16]	; (8005154 <__NVIC_SetPriorityGrouping+0x44>)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	60d3      	str	r3, [r2, #12]
}
 8005148:	bf00      	nop
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	e000ed00 	.word	0xe000ed00

08005158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800515c:	4b04      	ldr	r3, [pc, #16]	; (8005170 <__NVIC_GetPriorityGrouping+0x18>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	0a1b      	lsrs	r3, r3, #8
 8005162:	f003 0307 	and.w	r3, r3, #7
}
 8005166:	4618      	mov	r0, r3
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	e000ed00 	.word	0xe000ed00

08005174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800517e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005182:	2b00      	cmp	r3, #0
 8005184:	db0b      	blt.n	800519e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005186:	79fb      	ldrb	r3, [r7, #7]
 8005188:	f003 021f 	and.w	r2, r3, #31
 800518c:	4907      	ldr	r1, [pc, #28]	; (80051ac <__NVIC_EnableIRQ+0x38>)
 800518e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	2001      	movs	r0, #1
 8005196:	fa00 f202 	lsl.w	r2, r0, r2
 800519a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	e000e100 	.word	0xe000e100

080051b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	4603      	mov	r3, r0
 80051b8:	6039      	str	r1, [r7, #0]
 80051ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	db0a      	blt.n	80051da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	490c      	ldr	r1, [pc, #48]	; (80051fc <__NVIC_SetPriority+0x4c>)
 80051ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ce:	0112      	lsls	r2, r2, #4
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	440b      	add	r3, r1
 80051d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051d8:	e00a      	b.n	80051f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	4908      	ldr	r1, [pc, #32]	; (8005200 <__NVIC_SetPriority+0x50>)
 80051e0:	79fb      	ldrb	r3, [r7, #7]
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	3b04      	subs	r3, #4
 80051e8:	0112      	lsls	r2, r2, #4
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	440b      	add	r3, r1
 80051ee:	761a      	strb	r2, [r3, #24]
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	e000e100 	.word	0xe000e100
 8005200:	e000ed00 	.word	0xe000ed00

08005204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005204:	b480      	push	{r7}
 8005206:	b089      	sub	sp, #36	; 0x24
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f1c3 0307 	rsb	r3, r3, #7
 800521e:	2b04      	cmp	r3, #4
 8005220:	bf28      	it	cs
 8005222:	2304      	movcs	r3, #4
 8005224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	3304      	adds	r3, #4
 800522a:	2b06      	cmp	r3, #6
 800522c:	d902      	bls.n	8005234 <NVIC_EncodePriority+0x30>
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	3b03      	subs	r3, #3
 8005232:	e000      	b.n	8005236 <NVIC_EncodePriority+0x32>
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005238:	f04f 32ff 	mov.w	r2, #4294967295
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	43da      	mvns	r2, r3
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	401a      	ands	r2, r3
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800524c:	f04f 31ff 	mov.w	r1, #4294967295
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	fa01 f303 	lsl.w	r3, r1, r3
 8005256:	43d9      	mvns	r1, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800525c:	4313      	orrs	r3, r2
         );
}
 800525e:	4618      	mov	r0, r3
 8005260:	3724      	adds	r7, #36	; 0x24
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
	...

0800526c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b07      	cmp	r3, #7
 8005278:	d00f      	beq.n	800529a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b06      	cmp	r3, #6
 800527e:	d00c      	beq.n	800529a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b05      	cmp	r3, #5
 8005284:	d009      	beq.n	800529a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b04      	cmp	r3, #4
 800528a:	d006      	beq.n	800529a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b03      	cmp	r3, #3
 8005290:	d003      	beq.n	800529a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005292:	2190      	movs	r1, #144	; 0x90
 8005294:	4804      	ldr	r0, [pc, #16]	; (80052a8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8005296:	f7fd ff80 	bl	800319a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7ff ff38 	bl	8005110 <__NVIC_SetPriorityGrouping>
}
 80052a0:	bf00      	nop
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	0800c6b4 	.word	0x0800c6b4

080052ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b0f      	cmp	r3, #15
 80052c2:	d903      	bls.n	80052cc <HAL_NVIC_SetPriority+0x20>
 80052c4:	21a8      	movs	r1, #168	; 0xa8
 80052c6:	480e      	ldr	r0, [pc, #56]	; (8005300 <HAL_NVIC_SetPriority+0x54>)
 80052c8:	f7fd ff67 	bl	800319a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2b0f      	cmp	r3, #15
 80052d0:	d903      	bls.n	80052da <HAL_NVIC_SetPriority+0x2e>
 80052d2:	21a9      	movs	r1, #169	; 0xa9
 80052d4:	480a      	ldr	r0, [pc, #40]	; (8005300 <HAL_NVIC_SetPriority+0x54>)
 80052d6:	f7fd ff60 	bl	800319a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052da:	f7ff ff3d 	bl	8005158 <__NVIC_GetPriorityGrouping>
 80052de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	68b9      	ldr	r1, [r7, #8]
 80052e4:	6978      	ldr	r0, [r7, #20]
 80052e6:	f7ff ff8d 	bl	8005204 <NVIC_EncodePriority>
 80052ea:	4602      	mov	r2, r0
 80052ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052f0:	4611      	mov	r1, r2
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff ff5c 	bl	80051b0 <__NVIC_SetPriority>
}
 80052f8:	bf00      	nop
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	0800c6b4 	.word	0x0800c6b4

08005304 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	4603      	mov	r3, r0
 800530c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800530e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005312:	2b00      	cmp	r3, #0
 8005314:	da03      	bge.n	800531e <HAL_NVIC_EnableIRQ+0x1a>
 8005316:	21bc      	movs	r1, #188	; 0xbc
 8005318:	4805      	ldr	r0, [pc, #20]	; (8005330 <HAL_NVIC_EnableIRQ+0x2c>)
 800531a:	f7fd ff3e 	bl	800319a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800531e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff ff26 	bl	8005174 <__NVIC_EnableIRQ>
}
 8005328:	bf00      	nop
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	0800c6b4 	.word	0x0800c6b4

08005334 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005340:	f7fe fa4e 	bl	80037e0 <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e203      	b.n	8005758 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a8b      	ldr	r2, [pc, #556]	; (8005584 <HAL_DMA_Init+0x250>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d04e      	beq.n	80053f8 <HAL_DMA_Init+0xc4>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a8a      	ldr	r2, [pc, #552]	; (8005588 <HAL_DMA_Init+0x254>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d049      	beq.n	80053f8 <HAL_DMA_Init+0xc4>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a88      	ldr	r2, [pc, #544]	; (800558c <HAL_DMA_Init+0x258>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d044      	beq.n	80053f8 <HAL_DMA_Init+0xc4>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a87      	ldr	r2, [pc, #540]	; (8005590 <HAL_DMA_Init+0x25c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d03f      	beq.n	80053f8 <HAL_DMA_Init+0xc4>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a85      	ldr	r2, [pc, #532]	; (8005594 <HAL_DMA_Init+0x260>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d03a      	beq.n	80053f8 <HAL_DMA_Init+0xc4>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a84      	ldr	r2, [pc, #528]	; (8005598 <HAL_DMA_Init+0x264>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d035      	beq.n	80053f8 <HAL_DMA_Init+0xc4>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a82      	ldr	r2, [pc, #520]	; (800559c <HAL_DMA_Init+0x268>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d030      	beq.n	80053f8 <HAL_DMA_Init+0xc4>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a81      	ldr	r2, [pc, #516]	; (80055a0 <HAL_DMA_Init+0x26c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d02b      	beq.n	80053f8 <HAL_DMA_Init+0xc4>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a7f      	ldr	r2, [pc, #508]	; (80055a4 <HAL_DMA_Init+0x270>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d026      	beq.n	80053f8 <HAL_DMA_Init+0xc4>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a7e      	ldr	r2, [pc, #504]	; (80055a8 <HAL_DMA_Init+0x274>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d021      	beq.n	80053f8 <HAL_DMA_Init+0xc4>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a7c      	ldr	r2, [pc, #496]	; (80055ac <HAL_DMA_Init+0x278>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01c      	beq.n	80053f8 <HAL_DMA_Init+0xc4>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a7b      	ldr	r2, [pc, #492]	; (80055b0 <HAL_DMA_Init+0x27c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d017      	beq.n	80053f8 <HAL_DMA_Init+0xc4>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a79      	ldr	r2, [pc, #484]	; (80055b4 <HAL_DMA_Init+0x280>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d012      	beq.n	80053f8 <HAL_DMA_Init+0xc4>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a78      	ldr	r2, [pc, #480]	; (80055b8 <HAL_DMA_Init+0x284>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00d      	beq.n	80053f8 <HAL_DMA_Init+0xc4>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a76      	ldr	r2, [pc, #472]	; (80055bc <HAL_DMA_Init+0x288>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d008      	beq.n	80053f8 <HAL_DMA_Init+0xc4>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a75      	ldr	r2, [pc, #468]	; (80055c0 <HAL_DMA_Init+0x28c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d003      	beq.n	80053f8 <HAL_DMA_Init+0xc4>
 80053f0:	21b7      	movs	r1, #183	; 0xb7
 80053f2:	4874      	ldr	r0, [pc, #464]	; (80055c4 <HAL_DMA_Init+0x290>)
 80053f4:	f7fd fed1 	bl	800319a <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d026      	beq.n	800544e <HAL_DMA_Init+0x11a>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005408:	d021      	beq.n	800544e <HAL_DMA_Init+0x11a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005412:	d01c      	beq.n	800544e <HAL_DMA_Init+0x11a>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800541c:	d017      	beq.n	800544e <HAL_DMA_Init+0x11a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005426:	d012      	beq.n	800544e <HAL_DMA_Init+0x11a>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8005430:	d00d      	beq.n	800544e <HAL_DMA_Init+0x11a>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800543a:	d008      	beq.n	800544e <HAL_DMA_Init+0x11a>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8005444:	d003      	beq.n	800544e <HAL_DMA_Init+0x11a>
 8005446:	21b8      	movs	r1, #184	; 0xb8
 8005448:	485e      	ldr	r0, [pc, #376]	; (80055c4 <HAL_DMA_Init+0x290>)
 800544a:	f7fd fea6 	bl	800319a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00b      	beq.n	800546e <HAL_DMA_Init+0x13a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b40      	cmp	r3, #64	; 0x40
 800545c:	d007      	beq.n	800546e <HAL_DMA_Init+0x13a>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	2b80      	cmp	r3, #128	; 0x80
 8005464:	d003      	beq.n	800546e <HAL_DMA_Init+0x13a>
 8005466:	21b9      	movs	r1, #185	; 0xb9
 8005468:	4856      	ldr	r0, [pc, #344]	; (80055c4 <HAL_DMA_Init+0x290>)
 800546a:	f7fd fe96 	bl	800319a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005476:	d007      	beq.n	8005488 <HAL_DMA_Init+0x154>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <HAL_DMA_Init+0x154>
 8005480:	21ba      	movs	r1, #186	; 0xba
 8005482:	4850      	ldr	r0, [pc, #320]	; (80055c4 <HAL_DMA_Init+0x290>)
 8005484:	f7fd fe89 	bl	800319a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005490:	d007      	beq.n	80054a2 <HAL_DMA_Init+0x16e>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <HAL_DMA_Init+0x16e>
 800549a:	21bb      	movs	r1, #187	; 0xbb
 800549c:	4849      	ldr	r0, [pc, #292]	; (80055c4 <HAL_DMA_Init+0x290>)
 800549e:	f7fd fe7c 	bl	800319a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00d      	beq.n	80054c6 <HAL_DMA_Init+0x192>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b2:	d008      	beq.n	80054c6 <HAL_DMA_Init+0x192>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054bc:	d003      	beq.n	80054c6 <HAL_DMA_Init+0x192>
 80054be:	21bc      	movs	r1, #188	; 0xbc
 80054c0:	4840      	ldr	r0, [pc, #256]	; (80055c4 <HAL_DMA_Init+0x290>)
 80054c2:	f7fd fe6a 	bl	800319a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00d      	beq.n	80054ea <HAL_DMA_Init+0x1b6>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d6:	d008      	beq.n	80054ea <HAL_DMA_Init+0x1b6>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054e0:	d003      	beq.n	80054ea <HAL_DMA_Init+0x1b6>
 80054e2:	21bd      	movs	r1, #189	; 0xbd
 80054e4:	4837      	ldr	r0, [pc, #220]	; (80055c4 <HAL_DMA_Init+0x290>)
 80054e6:	f7fd fe58 	bl	800319a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00c      	beq.n	800550c <HAL_DMA_Init+0x1d8>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054fa:	d007      	beq.n	800550c <HAL_DMA_Init+0x1d8>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	69db      	ldr	r3, [r3, #28]
 8005500:	2b20      	cmp	r3, #32
 8005502:	d003      	beq.n	800550c <HAL_DMA_Init+0x1d8>
 8005504:	21be      	movs	r1, #190	; 0xbe
 8005506:	482f      	ldr	r0, [pc, #188]	; (80055c4 <HAL_DMA_Init+0x290>)
 8005508:	f7fd fe47 	bl	800319a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d012      	beq.n	800553a <HAL_DMA_Init+0x206>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800551c:	d00d      	beq.n	800553a <HAL_DMA_Init+0x206>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005526:	d008      	beq.n	800553a <HAL_DMA_Init+0x206>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005530:	d003      	beq.n	800553a <HAL_DMA_Init+0x206>
 8005532:	21bf      	movs	r1, #191	; 0xbf
 8005534:	4823      	ldr	r0, [pc, #140]	; (80055c4 <HAL_DMA_Init+0x290>)
 8005536:	f7fd fe30 	bl	800319a <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	2b00      	cmp	r3, #0
 8005540:	d007      	beq.n	8005552 <HAL_DMA_Init+0x21e>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	2b04      	cmp	r3, #4
 8005548:	d003      	beq.n	8005552 <HAL_DMA_Init+0x21e>
 800554a:	21c0      	movs	r1, #192	; 0xc0
 800554c:	481d      	ldr	r0, [pc, #116]	; (80055c4 <HAL_DMA_Init+0x290>)
 800554e:	f7fd fe24 	bl	800319a <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	2b00      	cmp	r3, #0
 8005558:	d064      	beq.n	8005624 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555e:	2b00      	cmp	r3, #0
 8005560:	d032      	beq.n	80055c8 <HAL_DMA_Init+0x294>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005566:	2b01      	cmp	r3, #1
 8005568:	d02e      	beq.n	80055c8 <HAL_DMA_Init+0x294>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556e:	2b02      	cmp	r3, #2
 8005570:	d02a      	beq.n	80055c8 <HAL_DMA_Init+0x294>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005576:	2b03      	cmp	r3, #3
 8005578:	d026      	beq.n	80055c8 <HAL_DMA_Init+0x294>
 800557a:	21c5      	movs	r1, #197	; 0xc5
 800557c:	4811      	ldr	r0, [pc, #68]	; (80055c4 <HAL_DMA_Init+0x290>)
 800557e:	f7fd fe0c 	bl	800319a <assert_failed>
 8005582:	e021      	b.n	80055c8 <HAL_DMA_Init+0x294>
 8005584:	40026010 	.word	0x40026010
 8005588:	40026028 	.word	0x40026028
 800558c:	40026040 	.word	0x40026040
 8005590:	40026058 	.word	0x40026058
 8005594:	40026070 	.word	0x40026070
 8005598:	40026088 	.word	0x40026088
 800559c:	400260a0 	.word	0x400260a0
 80055a0:	400260b8 	.word	0x400260b8
 80055a4:	40026410 	.word	0x40026410
 80055a8:	40026428 	.word	0x40026428
 80055ac:	40026440 	.word	0x40026440
 80055b0:	40026458 	.word	0x40026458
 80055b4:	40026470 	.word	0x40026470
 80055b8:	40026488 	.word	0x40026488
 80055bc:	400264a0 	.word	0x400264a0
 80055c0:	400264b8 	.word	0x400264b8
 80055c4:	0800c6f0 	.word	0x0800c6f0
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d012      	beq.n	80055f6 <HAL_DMA_Init+0x2c2>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055d8:	d00d      	beq.n	80055f6 <HAL_DMA_Init+0x2c2>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055e2:	d008      	beq.n	80055f6 <HAL_DMA_Init+0x2c2>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80055ec:	d003      	beq.n	80055f6 <HAL_DMA_Init+0x2c2>
 80055ee:	21c6      	movs	r1, #198	; 0xc6
 80055f0:	485b      	ldr	r0, [pc, #364]	; (8005760 <HAL_DMA_Init+0x42c>)
 80055f2:	f7fd fdd2 	bl	800319a <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d012      	beq.n	8005624 <HAL_DMA_Init+0x2f0>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005602:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005606:	d00d      	beq.n	8005624 <HAL_DMA_Init+0x2f0>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005610:	d008      	beq.n	8005624 <HAL_DMA_Init+0x2f0>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005616:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800561a:	d003      	beq.n	8005624 <HAL_DMA_Init+0x2f0>
 800561c:	21c7      	movs	r1, #199	; 0xc7
 800561e:	4850      	ldr	r0, [pc, #320]	; (8005760 <HAL_DMA_Init+0x42c>)
 8005620:	f7fd fdbb 	bl	800319a <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0201 	bic.w	r2, r2, #1
 8005642:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005644:	e00f      	b.n	8005666 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005646:	f7fe f8cb 	bl	80037e0 <HAL_GetTick>
 800564a:	4602      	mov	r2, r0
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b05      	cmp	r3, #5
 8005652:	d908      	bls.n	8005666 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2203      	movs	r2, #3
 800565e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e078      	b.n	8005758 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1e8      	bne.n	8005646 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	4b39      	ldr	r3, [pc, #228]	; (8005764 <HAL_DMA_Init+0x430>)
 8005680:	4013      	ands	r3, r2
 8005682:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005692:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800569e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80056aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	2b04      	cmp	r3, #4
 80056be:	d107      	bne.n	80056d0 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c8:	4313      	orrs	r3, r2
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f023 0307 	bic.w	r3, r3, #7
 80056e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d117      	bne.n	800572a <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00e      	beq.n	800572a <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fa1b 	bl	8005b48 <DMA_CheckFifoParam>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d008      	beq.n	800572a <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2240      	movs	r2, #64	; 0x40
 800571c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005726:	2301      	movs	r3, #1
 8005728:	e016      	b.n	8005758 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f9d2 	bl	8005adc <DMA_CalcBaseAndBitshift>
 8005738:	4603      	mov	r3, r0
 800573a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005740:	223f      	movs	r2, #63	; 0x3f
 8005742:	409a      	lsls	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	0800c6f0 	.word	0x0800c6f0
 8005764:	f010803f 	.word	0xf010803f

08005768 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d004      	beq.n	8005786 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2280      	movs	r2, #128	; 0x80
 8005780:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e00c      	b.n	80057a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2205      	movs	r2, #5
 800578a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 0201 	bic.w	r2, r2, #1
 800579c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057b8:	4b8e      	ldr	r3, [pc, #568]	; (80059f4 <HAL_DMA_IRQHandler+0x248>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a8e      	ldr	r2, [pc, #568]	; (80059f8 <HAL_DMA_IRQHandler+0x24c>)
 80057be:	fba2 2303 	umull	r2, r3, r2, r3
 80057c2:	0a9b      	lsrs	r3, r3, #10
 80057c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d6:	2208      	movs	r2, #8
 80057d8:	409a      	lsls	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4013      	ands	r3, r2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d01a      	beq.n	8005818 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d013      	beq.n	8005818 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 0204 	bic.w	r2, r2, #4
 80057fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005804:	2208      	movs	r2, #8
 8005806:	409a      	lsls	r2, r3
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005810:	f043 0201 	orr.w	r2, r3, #1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800581c:	2201      	movs	r2, #1
 800581e:	409a      	lsls	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4013      	ands	r3, r2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d012      	beq.n	800584e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00b      	beq.n	800584e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583a:	2201      	movs	r2, #1
 800583c:	409a      	lsls	r2, r3
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005846:	f043 0202 	orr.w	r2, r3, #2
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005852:	2204      	movs	r2, #4
 8005854:	409a      	lsls	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4013      	ands	r3, r2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d012      	beq.n	8005884 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00b      	beq.n	8005884 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005870:	2204      	movs	r2, #4
 8005872:	409a      	lsls	r2, r3
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587c:	f043 0204 	orr.w	r2, r3, #4
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005888:	2210      	movs	r2, #16
 800588a:	409a      	lsls	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4013      	ands	r3, r2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d043      	beq.n	800591c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d03c      	beq.n	800591c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a6:	2210      	movs	r2, #16
 80058a8:	409a      	lsls	r2, r3
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d018      	beq.n	80058ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d108      	bne.n	80058dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d024      	beq.n	800591c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	4798      	blx	r3
 80058da:	e01f      	b.n	800591c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d01b      	beq.n	800591c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	4798      	blx	r3
 80058ec:	e016      	b.n	800591c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d107      	bne.n	800590c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 0208 	bic.w	r2, r2, #8
 800590a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005920:	2220      	movs	r2, #32
 8005922:	409a      	lsls	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4013      	ands	r3, r2
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 808f 	beq.w	8005a4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0310 	and.w	r3, r3, #16
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 8087 	beq.w	8005a4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005942:	2220      	movs	r2, #32
 8005944:	409a      	lsls	r2, r3
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b05      	cmp	r3, #5
 8005954:	d136      	bne.n	80059c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0216 	bic.w	r2, r2, #22
 8005964:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695a      	ldr	r2, [r3, #20]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005974:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	d103      	bne.n	8005986 <HAL_DMA_IRQHandler+0x1da>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005982:	2b00      	cmp	r3, #0
 8005984:	d007      	beq.n	8005996 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0208 	bic.w	r2, r2, #8
 8005994:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800599a:	223f      	movs	r2, #63	; 0x3f
 800599c:	409a      	lsls	r2, r3
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d07e      	beq.n	8005ab8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	4798      	blx	r3
        }
        return;
 80059c2:	e079      	b.n	8005ab8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d01d      	beq.n	8005a0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10d      	bne.n	80059fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d031      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	4798      	blx	r3
 80059f0:	e02c      	b.n	8005a4c <HAL_DMA_IRQHandler+0x2a0>
 80059f2:	bf00      	nop
 80059f4:	20000040 	.word	0x20000040
 80059f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d023      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	4798      	blx	r3
 8005a0c:	e01e      	b.n	8005a4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10f      	bne.n	8005a3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 0210 	bic.w	r2, r2, #16
 8005a2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d032      	beq.n	8005aba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d022      	beq.n	8005aa6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2205      	movs	r2, #5
 8005a64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0201 	bic.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	60bb      	str	r3, [r7, #8]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d307      	bcc.n	8005a94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1f2      	bne.n	8005a78 <HAL_DMA_IRQHandler+0x2cc>
 8005a92:	e000      	b.n	8005a96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005a94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	4798      	blx	r3
 8005ab6:	e000      	b.n	8005aba <HAL_DMA_IRQHandler+0x30e>
        return;
 8005ab8:	bf00      	nop
    }
  }
}
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ace:	b2db      	uxtb	r3, r3
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	3b10      	subs	r3, #16
 8005aec:	4a14      	ldr	r2, [pc, #80]	; (8005b40 <DMA_CalcBaseAndBitshift+0x64>)
 8005aee:	fba2 2303 	umull	r2, r3, r2, r3
 8005af2:	091b      	lsrs	r3, r3, #4
 8005af4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005af6:	4a13      	ldr	r2, [pc, #76]	; (8005b44 <DMA_CalcBaseAndBitshift+0x68>)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4413      	add	r3, r2
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d909      	bls.n	8005b1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b12:	f023 0303 	bic.w	r3, r3, #3
 8005b16:	1d1a      	adds	r2, r3, #4
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	659a      	str	r2, [r3, #88]	; 0x58
 8005b1c:	e007      	b.n	8005b2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005b26:	f023 0303 	bic.w	r3, r3, #3
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	aaaaaaab 	.word	0xaaaaaaab
 8005b44:	0800c8a0 	.word	0x0800c8a0

08005b48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b50:	2300      	movs	r3, #0
 8005b52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d11f      	bne.n	8005ba2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d856      	bhi.n	8005c16 <DMA_CheckFifoParam+0xce>
 8005b68:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <DMA_CheckFifoParam+0x28>)
 8005b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6e:	bf00      	nop
 8005b70:	08005b81 	.word	0x08005b81
 8005b74:	08005b93 	.word	0x08005b93
 8005b78:	08005b81 	.word	0x08005b81
 8005b7c:	08005c17 	.word	0x08005c17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d046      	beq.n	8005c1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b90:	e043      	b.n	8005c1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b9a:	d140      	bne.n	8005c1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ba0:	e03d      	b.n	8005c1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005baa:	d121      	bne.n	8005bf0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	d837      	bhi.n	8005c22 <DMA_CheckFifoParam+0xda>
 8005bb2:	a201      	add	r2, pc, #4	; (adr r2, 8005bb8 <DMA_CheckFifoParam+0x70>)
 8005bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb8:	08005bc9 	.word	0x08005bc9
 8005bbc:	08005bcf 	.word	0x08005bcf
 8005bc0:	08005bc9 	.word	0x08005bc9
 8005bc4:	08005be1 	.word	0x08005be1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	73fb      	strb	r3, [r7, #15]
      break;
 8005bcc:	e030      	b.n	8005c30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d025      	beq.n	8005c26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bde:	e022      	b.n	8005c26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005be8:	d11f      	bne.n	8005c2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005bee:	e01c      	b.n	8005c2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d903      	bls.n	8005bfe <DMA_CheckFifoParam+0xb6>
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d003      	beq.n	8005c04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005bfc:	e018      	b.n	8005c30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	73fb      	strb	r3, [r7, #15]
      break;
 8005c02:	e015      	b.n	8005c30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00e      	beq.n	8005c2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	73fb      	strb	r3, [r7, #15]
      break;
 8005c14:	e00b      	b.n	8005c2e <DMA_CheckFifoParam+0xe6>
      break;
 8005c16:	bf00      	nop
 8005c18:	e00a      	b.n	8005c30 <DMA_CheckFifoParam+0xe8>
      break;
 8005c1a:	bf00      	nop
 8005c1c:	e008      	b.n	8005c30 <DMA_CheckFifoParam+0xe8>
      break;
 8005c1e:	bf00      	nop
 8005c20:	e006      	b.n	8005c30 <DMA_CheckFifoParam+0xe8>
      break;
 8005c22:	bf00      	nop
 8005c24:	e004      	b.n	8005c30 <DMA_CheckFifoParam+0xe8>
      break;
 8005c26:	bf00      	nop
 8005c28:	e002      	b.n	8005c30 <DMA_CheckFifoParam+0xe8>
      break;   
 8005c2a:	bf00      	nop
 8005c2c:	e000      	b.n	8005c30 <DMA_CheckFifoParam+0xe8>
      break;
 8005c2e:	bf00      	nop
    }
  } 
  
  return status; 
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop

08005c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a37      	ldr	r2, [pc, #220]	; (8005d38 <HAL_GPIO_Init+0xf8>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d01f      	beq.n	8005c9e <HAL_GPIO_Init+0x5e>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a36      	ldr	r2, [pc, #216]	; (8005d3c <HAL_GPIO_Init+0xfc>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d01b      	beq.n	8005c9e <HAL_GPIO_Init+0x5e>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a35      	ldr	r2, [pc, #212]	; (8005d40 <HAL_GPIO_Init+0x100>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d017      	beq.n	8005c9e <HAL_GPIO_Init+0x5e>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a34      	ldr	r2, [pc, #208]	; (8005d44 <HAL_GPIO_Init+0x104>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d013      	beq.n	8005c9e <HAL_GPIO_Init+0x5e>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a33      	ldr	r2, [pc, #204]	; (8005d48 <HAL_GPIO_Init+0x108>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d00f      	beq.n	8005c9e <HAL_GPIO_Init+0x5e>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a32      	ldr	r2, [pc, #200]	; (8005d4c <HAL_GPIO_Init+0x10c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00b      	beq.n	8005c9e <HAL_GPIO_Init+0x5e>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a31      	ldr	r2, [pc, #196]	; (8005d50 <HAL_GPIO_Init+0x110>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d007      	beq.n	8005c9e <HAL_GPIO_Init+0x5e>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a30      	ldr	r2, [pc, #192]	; (8005d54 <HAL_GPIO_Init+0x114>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d003      	beq.n	8005c9e <HAL_GPIO_Init+0x5e>
 8005c96:	21ac      	movs	r1, #172	; 0xac
 8005c98:	482f      	ldr	r0, [pc, #188]	; (8005d58 <HAL_GPIO_Init+0x118>)
 8005c9a:	f7fd fa7e 	bl	800319a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d005      	beq.n	8005cb4 <HAL_GPIO_Init+0x74>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	0c1b      	lsrs	r3, r3, #16
 8005cae:	041b      	lsls	r3, r3, #16
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d003      	beq.n	8005cbc <HAL_GPIO_Init+0x7c>
 8005cb4:	21ad      	movs	r1, #173	; 0xad
 8005cb6:	4828      	ldr	r0, [pc, #160]	; (8005d58 <HAL_GPIO_Init+0x118>)
 8005cb8:	f7fd fa6f 	bl	800319a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d035      	beq.n	8005d30 <HAL_GPIO_Init+0xf0>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d031      	beq.n	8005d30 <HAL_GPIO_Init+0xf0>
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2b11      	cmp	r3, #17
 8005cd2:	d02d      	beq.n	8005d30 <HAL_GPIO_Init+0xf0>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d029      	beq.n	8005d30 <HAL_GPIO_Init+0xf0>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	2b12      	cmp	r3, #18
 8005ce2:	d025      	beq.n	8005d30 <HAL_GPIO_Init+0xf0>
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8005cec:	d020      	beq.n	8005d30 <HAL_GPIO_Init+0xf0>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005cf6:	d01b      	beq.n	8005d30 <HAL_GPIO_Init+0xf0>
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8005d00:	d016      	beq.n	8005d30 <HAL_GPIO_Init+0xf0>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8005d0a:	d011      	beq.n	8005d30 <HAL_GPIO_Init+0xf0>
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8005d14:	d00c      	beq.n	8005d30 <HAL_GPIO_Init+0xf0>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8005d1e:	d007      	beq.n	8005d30 <HAL_GPIO_Init+0xf0>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d003      	beq.n	8005d30 <HAL_GPIO_Init+0xf0>
 8005d28:	21ae      	movs	r1, #174	; 0xae
 8005d2a:	480b      	ldr	r0, [pc, #44]	; (8005d58 <HAL_GPIO_Init+0x118>)
 8005d2c:	f7fd fa35 	bl	800319a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d30:	2300      	movs	r3, #0
 8005d32:	61fb      	str	r3, [r7, #28]
 8005d34:	e289      	b.n	800624a <HAL_GPIO_Init+0x60a>
 8005d36:	bf00      	nop
 8005d38:	40020000 	.word	0x40020000
 8005d3c:	40020400 	.word	0x40020400
 8005d40:	40020800 	.word	0x40020800
 8005d44:	40020c00 	.word	0x40020c00
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	40021400 	.word	0x40021400
 8005d50:	40021800 	.word	0x40021800
 8005d54:	40021c00 	.word	0x40021c00
 8005d58:	0800c728 	.word	0x0800c728
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	f040 8265 	bne.w	8006244 <HAL_GPIO_Init+0x604>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d005      	beq.n	8005d92 <HAL_GPIO_Init+0x152>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d144      	bne.n	8005e1c <HAL_GPIO_Init+0x1dc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00f      	beq.n	8005dba <HAL_GPIO_Init+0x17a>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d00b      	beq.n	8005dba <HAL_GPIO_Init+0x17a>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d007      	beq.n	8005dba <HAL_GPIO_Init+0x17a>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	2b03      	cmp	r3, #3
 8005db0:	d003      	beq.n	8005dba <HAL_GPIO_Init+0x17a>
 8005db2:	21c0      	movs	r1, #192	; 0xc0
 8005db4:	4831      	ldr	r0, [pc, #196]	; (8005e7c <HAL_GPIO_Init+0x23c>)
 8005db6:	f7fd f9f0 	bl	800319a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	2203      	movs	r2, #3
 8005dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dca:	43db      	mvns	r3, r3
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	4013      	ands	r3, r2
 8005dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	68da      	ldr	r2, [r3, #12]
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	fa02 f303 	lsl.w	r3, r2, r3
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005df0:	2201      	movs	r2, #1
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	fa02 f303 	lsl.w	r3, r2, r3
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	091b      	lsrs	r3, r3, #4
 8005e06:	f003 0201 	and.w	r2, r3, #1
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f003 0303 	and.w	r3, r3, #3
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d02b      	beq.n	8005e80 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00b      	beq.n	8005e48 <HAL_GPIO_Init+0x208>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d007      	beq.n	8005e48 <HAL_GPIO_Init+0x208>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d003      	beq.n	8005e48 <HAL_GPIO_Init+0x208>
 8005e40:	21d1      	movs	r1, #209	; 0xd1
 8005e42:	480e      	ldr	r0, [pc, #56]	; (8005e7c <HAL_GPIO_Init+0x23c>)
 8005e44:	f7fd f9a9 	bl	800319a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	2203      	movs	r2, #3
 8005e54:	fa02 f303 	lsl.w	r3, r2, r3
 8005e58:	43db      	mvns	r3, r3
 8005e5a:	69ba      	ldr	r2, [r7, #24]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	fa02 f303 	lsl.w	r3, r2, r3
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	60da      	str	r2, [r3, #12]
 8005e78:	e002      	b.n	8005e80 <HAL_GPIO_Init+0x240>
 8005e7a:	bf00      	nop
 8005e7c:	0800c728 	.word	0x0800c728
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f003 0303 	and.w	r3, r3, #3
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	f040 810c 	bne.w	80060a6 <HAL_GPIO_Init+0x466>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 80e3 	beq.w	800605e <HAL_GPIO_Init+0x41e>
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	2b09      	cmp	r3, #9
 8005e9e:	f000 80de 	beq.w	800605e <HAL_GPIO_Init+0x41e>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 80d9 	beq.w	800605e <HAL_GPIO_Init+0x41e>
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 80d4 	beq.w	800605e <HAL_GPIO_Init+0x41e>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 80cf 	beq.w	800605e <HAL_GPIO_Init+0x41e>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 80ca 	beq.w	800605e <HAL_GPIO_Init+0x41e>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	f000 80c5 	beq.w	800605e <HAL_GPIO_Init+0x41e>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	f000 80c0 	beq.w	800605e <HAL_GPIO_Init+0x41e>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	f000 80bb 	beq.w	800605e <HAL_GPIO_Init+0x41e>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	f000 80b6 	beq.w	800605e <HAL_GPIO_Init+0x41e>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	f000 80b1 	beq.w	800605e <HAL_GPIO_Init+0x41e>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	f000 80ac 	beq.w	800605e <HAL_GPIO_Init+0x41e>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	f000 80a7 	beq.w	800605e <HAL_GPIO_Init+0x41e>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	2b04      	cmp	r3, #4
 8005f16:	f000 80a2 	beq.w	800605e <HAL_GPIO_Init+0x41e>
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	2b04      	cmp	r3, #4
 8005f20:	f000 809d 	beq.w	800605e <HAL_GPIO_Init+0x41e>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	2b05      	cmp	r3, #5
 8005f2a:	f000 8098 	beq.w	800605e <HAL_GPIO_Init+0x41e>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	2b05      	cmp	r3, #5
 8005f34:	f000 8093 	beq.w	800605e <HAL_GPIO_Init+0x41e>
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	2b09      	cmp	r3, #9
 8005f3e:	f000 808e 	beq.w	800605e <HAL_GPIO_Init+0x41e>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	2b06      	cmp	r3, #6
 8005f48:	f000 8089 	beq.w	800605e <HAL_GPIO_Init+0x41e>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	2b09      	cmp	r3, #9
 8005f52:	f000 8084 	beq.w	800605e <HAL_GPIO_Init+0x41e>
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	2b07      	cmp	r3, #7
 8005f5c:	d07f      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	2b07      	cmp	r3, #7
 8005f64:	d07b      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	2b07      	cmp	r3, #7
 8005f6c:	d077      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	2b08      	cmp	r3, #8
 8005f74:	d073      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b08      	cmp	r3, #8
 8005f7c:	d06f      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	2b08      	cmp	r3, #8
 8005f84:	d06b      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	2b09      	cmp	r3, #9
 8005f8c:	d067      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	2b09      	cmp	r3, #9
 8005f94:	d063      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b0a      	cmp	r3, #10
 8005f9c:	d05f      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	2b0a      	cmp	r3, #10
 8005fa4:	d05b      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	2b0b      	cmp	r3, #11
 8005fac:	d057      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	2b0c      	cmp	r3, #12
 8005fb4:	d053      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	2b0c      	cmp	r3, #12
 8005fbc:	d04f      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	2b0d      	cmp	r3, #13
 8005fc4:	d04b      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	2b0f      	cmp	r3, #15
 8005fcc:	d047      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	2b05      	cmp	r3, #5
 8005fd4:	d043      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	2b0c      	cmp	r3, #12
 8005fdc:	d03f      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	2b06      	cmp	r3, #6
 8005fe4:	d03b      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d037      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d033      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b05      	cmp	r3, #5
 8005ffc:	d02f      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b06      	cmp	r3, #6
 8006004:	d02b      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	2b06      	cmp	r3, #6
 800600c:	d027      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	2b07      	cmp	r3, #7
 8006014:	d023      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	2b07      	cmp	r3, #7
 800601c:	d01f      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	2b07      	cmp	r3, #7
 8006024:	d01b      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b07      	cmp	r3, #7
 800602c:	d017      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	2b08      	cmp	r3, #8
 8006034:	d013      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	2b08      	cmp	r3, #8
 800603c:	d00f      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	2b09      	cmp	r3, #9
 8006044:	d00b      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b0a      	cmp	r3, #10
 800604c:	d007      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	2b0a      	cmp	r3, #10
 8006054:	d003      	beq.n	800605e <HAL_GPIO_Init+0x41e>
 8006056:	21de      	movs	r1, #222	; 0xde
 8006058:	4880      	ldr	r0, [pc, #512]	; (800625c <HAL_GPIO_Init+0x61c>)
 800605a:	f7fd f89e 	bl	800319a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	08da      	lsrs	r2, r3, #3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3208      	adds	r2, #8
 8006066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800606a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	220f      	movs	r2, #15
 8006076:	fa02 f303 	lsl.w	r3, r2, r3
 800607a:	43db      	mvns	r3, r3
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	4013      	ands	r3, r2
 8006080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	691a      	ldr	r2, [r3, #16]
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	fa02 f303 	lsl.w	r3, r2, r3
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	4313      	orrs	r3, r2
 8006096:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	08da      	lsrs	r2, r3, #3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	3208      	adds	r2, #8
 80060a0:	69b9      	ldr	r1, [r7, #24]
 80060a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	2203      	movs	r2, #3
 80060b2:	fa02 f303 	lsl.w	r3, r2, r3
 80060b6:	43db      	mvns	r3, r3
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	4013      	ands	r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f003 0203 	and.w	r2, r3, #3
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	fa02 f303 	lsl.w	r3, r2, r3
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 80ae 	beq.w	8006244 <HAL_GPIO_Init+0x604>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	4b5c      	ldr	r3, [pc, #368]	; (8006260 <HAL_GPIO_Init+0x620>)
 80060ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f0:	4a5b      	ldr	r2, [pc, #364]	; (8006260 <HAL_GPIO_Init+0x620>)
 80060f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060f6:	6453      	str	r3, [r2, #68]	; 0x44
 80060f8:	4b59      	ldr	r3, [pc, #356]	; (8006260 <HAL_GPIO_Init+0x620>)
 80060fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006104:	4a57      	ldr	r2, [pc, #348]	; (8006264 <HAL_GPIO_Init+0x624>)
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	089b      	lsrs	r3, r3, #2
 800610a:	3302      	adds	r3, #2
 800610c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006110:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	f003 0303 	and.w	r3, r3, #3
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	220f      	movs	r2, #15
 800611c:	fa02 f303 	lsl.w	r3, r2, r3
 8006120:	43db      	mvns	r3, r3
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	4013      	ands	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a4f      	ldr	r2, [pc, #316]	; (8006268 <HAL_GPIO_Init+0x628>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d025      	beq.n	800617c <HAL_GPIO_Init+0x53c>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a4e      	ldr	r2, [pc, #312]	; (800626c <HAL_GPIO_Init+0x62c>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d01f      	beq.n	8006178 <HAL_GPIO_Init+0x538>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a4d      	ldr	r2, [pc, #308]	; (8006270 <HAL_GPIO_Init+0x630>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d019      	beq.n	8006174 <HAL_GPIO_Init+0x534>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a4c      	ldr	r2, [pc, #304]	; (8006274 <HAL_GPIO_Init+0x634>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d013      	beq.n	8006170 <HAL_GPIO_Init+0x530>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a4b      	ldr	r2, [pc, #300]	; (8006278 <HAL_GPIO_Init+0x638>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d00d      	beq.n	800616c <HAL_GPIO_Init+0x52c>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a4a      	ldr	r2, [pc, #296]	; (800627c <HAL_GPIO_Init+0x63c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d007      	beq.n	8006168 <HAL_GPIO_Init+0x528>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a49      	ldr	r2, [pc, #292]	; (8006280 <HAL_GPIO_Init+0x640>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d101      	bne.n	8006164 <HAL_GPIO_Init+0x524>
 8006160:	2306      	movs	r3, #6
 8006162:	e00c      	b.n	800617e <HAL_GPIO_Init+0x53e>
 8006164:	2307      	movs	r3, #7
 8006166:	e00a      	b.n	800617e <HAL_GPIO_Init+0x53e>
 8006168:	2305      	movs	r3, #5
 800616a:	e008      	b.n	800617e <HAL_GPIO_Init+0x53e>
 800616c:	2304      	movs	r3, #4
 800616e:	e006      	b.n	800617e <HAL_GPIO_Init+0x53e>
 8006170:	2303      	movs	r3, #3
 8006172:	e004      	b.n	800617e <HAL_GPIO_Init+0x53e>
 8006174:	2302      	movs	r3, #2
 8006176:	e002      	b.n	800617e <HAL_GPIO_Init+0x53e>
 8006178:	2301      	movs	r3, #1
 800617a:	e000      	b.n	800617e <HAL_GPIO_Init+0x53e>
 800617c:	2300      	movs	r3, #0
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	f002 0203 	and.w	r2, r2, #3
 8006184:	0092      	lsls	r2, r2, #2
 8006186:	4093      	lsls	r3, r2
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	4313      	orrs	r3, r2
 800618c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800618e:	4935      	ldr	r1, [pc, #212]	; (8006264 <HAL_GPIO_Init+0x624>)
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	089b      	lsrs	r3, r3, #2
 8006194:	3302      	adds	r3, #2
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800619c:	4b39      	ldr	r3, [pc, #228]	; (8006284 <HAL_GPIO_Init+0x644>)
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	43db      	mvns	r3, r3
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	4013      	ands	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	4313      	orrs	r3, r2
 80061be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80061c0:	4a30      	ldr	r2, [pc, #192]	; (8006284 <HAL_GPIO_Init+0x644>)
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80061c6:	4b2f      	ldr	r3, [pc, #188]	; (8006284 <HAL_GPIO_Init+0x644>)
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	43db      	mvns	r3, r3
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	4013      	ands	r3, r2
 80061d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_GPIO_Init+0x5aa>
        {
          temp |= iocurrent;
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061ea:	4a26      	ldr	r2, [pc, #152]	; (8006284 <HAL_GPIO_Init+0x644>)
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80061f0:	4b24      	ldr	r3, [pc, #144]	; (8006284 <HAL_GPIO_Init+0x644>)
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	43db      	mvns	r3, r3
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	4013      	ands	r3, r2
 80061fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d003      	beq.n	8006214 <HAL_GPIO_Init+0x5d4>
        {
          temp |= iocurrent;
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	4313      	orrs	r3, r2
 8006212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006214:	4a1b      	ldr	r2, [pc, #108]	; (8006284 <HAL_GPIO_Init+0x644>)
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800621a:	4b1a      	ldr	r3, [pc, #104]	; (8006284 <HAL_GPIO_Init+0x644>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	43db      	mvns	r3, r3
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	4013      	ands	r3, r2
 8006228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_GPIO_Init+0x5fe>
        {
          temp |= iocurrent;
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	4313      	orrs	r3, r2
 800623c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800623e:	4a11      	ldr	r2, [pc, #68]	; (8006284 <HAL_GPIO_Init+0x644>)
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	3301      	adds	r3, #1
 8006248:	61fb      	str	r3, [r7, #28]
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	2b0f      	cmp	r3, #15
 800624e:	f67f ad85 	bls.w	8005d5c <HAL_GPIO_Init+0x11c>
      }
    }
  }
}
 8006252:	bf00      	nop
 8006254:	bf00      	nop
 8006256:	3720      	adds	r7, #32
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	0800c728 	.word	0x0800c728
 8006260:	40023800 	.word	0x40023800
 8006264:	40013800 	.word	0x40013800
 8006268:	40020000 	.word	0x40020000
 800626c:	40020400 	.word	0x40020400
 8006270:	40020800 	.word	0x40020800
 8006274:	40020c00 	.word	0x40020c00
 8006278:	40021000 	.word	0x40021000
 800627c:	40021400 	.word	0x40021400
 8006280:	40021800 	.word	0x40021800
 8006284:	40013c00 	.word	0x40013c00

08006288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	807b      	strh	r3, [r7, #2]
 8006294:	4613      	mov	r3, r2
 8006296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006298:	887b      	ldrh	r3, [r7, #2]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d004      	beq.n	80062a8 <HAL_GPIO_WritePin+0x20>
 800629e:	887b      	ldrh	r3, [r7, #2]
 80062a0:	0c1b      	lsrs	r3, r3, #16
 80062a2:	041b      	lsls	r3, r3, #16
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d004      	beq.n	80062b2 <HAL_GPIO_WritePin+0x2a>
 80062a8:	f240 119d 	movw	r1, #413	; 0x19d
 80062ac:	480e      	ldr	r0, [pc, #56]	; (80062e8 <HAL_GPIO_WritePin+0x60>)
 80062ae:	f7fc ff74 	bl	800319a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80062b2:	787b      	ldrb	r3, [r7, #1]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d007      	beq.n	80062c8 <HAL_GPIO_WritePin+0x40>
 80062b8:	787b      	ldrb	r3, [r7, #1]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d004      	beq.n	80062c8 <HAL_GPIO_WritePin+0x40>
 80062be:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80062c2:	4809      	ldr	r0, [pc, #36]	; (80062e8 <HAL_GPIO_WritePin+0x60>)
 80062c4:	f7fc ff69 	bl	800319a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80062c8:	787b      	ldrb	r3, [r7, #1]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062ce:	887a      	ldrh	r2, [r7, #2]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80062d4:	e003      	b.n	80062de <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80062d6:	887b      	ldrh	r3, [r7, #2]
 80062d8:	041a      	lsls	r2, r3, #16
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	619a      	str	r2, [r3, #24]
}
 80062de:	bf00      	nop
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	0800c728 	.word	0x0800c728

080062ec <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	460b      	mov	r3, r1
 80062f6:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80062f8:	887b      	ldrh	r3, [r7, #2]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d004      	beq.n	8006308 <HAL_GPIO_TogglePin+0x1c>
 80062fe:	887b      	ldrh	r3, [r7, #2]
 8006300:	0c1b      	lsrs	r3, r3, #16
 8006302:	041b      	lsls	r3, r3, #16
 8006304:	2b00      	cmp	r3, #0
 8006306:	d004      	beq.n	8006312 <HAL_GPIO_TogglePin+0x26>
 8006308:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800630c:	480a      	ldr	r0, [pc, #40]	; (8006338 <HAL_GPIO_TogglePin+0x4c>)
 800630e:	f7fc ff44 	bl	800319a <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006318:	887a      	ldrh	r2, [r7, #2]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4013      	ands	r3, r2
 800631e:	041a      	lsls	r2, r3, #16
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	43d9      	mvns	r1, r3
 8006324:	887b      	ldrh	r3, [r7, #2]
 8006326:	400b      	ands	r3, r1
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	619a      	str	r2, [r3, #24]
}
 800632e:	bf00      	nop
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	0800c728 	.word	0x0800c728

0800633c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e1bd      	b.n	80066ca <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a93      	ldr	r2, [pc, #588]	; (80065a0 <HAL_I2C_Init+0x264>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00e      	beq.n	8006376 <HAL_I2C_Init+0x3a>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a91      	ldr	r2, [pc, #580]	; (80065a4 <HAL_I2C_Init+0x268>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d009      	beq.n	8006376 <HAL_I2C_Init+0x3a>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a90      	ldr	r2, [pc, #576]	; (80065a8 <HAL_I2C_Init+0x26c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d004      	beq.n	8006376 <HAL_I2C_Init+0x3a>
 800636c:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8006370:	488e      	ldr	r0, [pc, #568]	; (80065ac <HAL_I2C_Init+0x270>)
 8006372:	f7fc ff12 	bl	800319a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d004      	beq.n	8006388 <HAL_I2C_Init+0x4c>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	4a8b      	ldr	r2, [pc, #556]	; (80065b0 <HAL_I2C_Init+0x274>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d904      	bls.n	8006392 <HAL_I2C_Init+0x56>
 8006388:	f240 11bf 	movw	r1, #447	; 0x1bf
 800638c:	4887      	ldr	r0, [pc, #540]	; (80065ac <HAL_I2C_Init+0x270>)
 800638e:	f7fc ff04 	bl	800319a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d009      	beq.n	80063ae <HAL_I2C_Init+0x72>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063a2:	d004      	beq.n	80063ae <HAL_I2C_Init+0x72>
 80063a4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80063a8:	4880      	ldr	r0, [pc, #512]	; (80065ac <HAL_I2C_Init+0x270>)
 80063aa:	f7fc fef6 	bl	800319a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80063b6:	f023 0303 	bic.w	r3, r3, #3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d004      	beq.n	80063c8 <HAL_I2C_Init+0x8c>
 80063be:	f240 11c1 	movw	r1, #449	; 0x1c1
 80063c2:	487a      	ldr	r0, [pc, #488]	; (80065ac <HAL_I2C_Init+0x270>)
 80063c4:	f7fc fee9 	bl	800319a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063d0:	d009      	beq.n	80063e6 <HAL_I2C_Init+0xaa>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80063da:	d004      	beq.n	80063e6 <HAL_I2C_Init+0xaa>
 80063dc:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80063e0:	4872      	ldr	r0, [pc, #456]	; (80065ac <HAL_I2C_Init+0x270>)
 80063e2:	f7fc feda 	bl	800319a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d008      	beq.n	8006400 <HAL_I2C_Init+0xc4>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d004      	beq.n	8006400 <HAL_I2C_Init+0xc4>
 80063f6:	f240 11c3 	movw	r1, #451	; 0x1c3
 80063fa:	486c      	ldr	r0, [pc, #432]	; (80065ac <HAL_I2C_Init+0x270>)
 80063fc:	f7fc fecd 	bl	800319a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006408:	2b00      	cmp	r3, #0
 800640a:	d004      	beq.n	8006416 <HAL_I2C_Init+0xda>
 800640c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8006410:	4866      	ldr	r0, [pc, #408]	; (80065ac <HAL_I2C_Init+0x270>)
 8006412:	f7fc fec2 	bl	800319a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d008      	beq.n	8006430 <HAL_I2C_Init+0xf4>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	2b40      	cmp	r3, #64	; 0x40
 8006424:	d004      	beq.n	8006430 <HAL_I2C_Init+0xf4>
 8006426:	f240 11c5 	movw	r1, #453	; 0x1c5
 800642a:	4860      	ldr	r0, [pc, #384]	; (80065ac <HAL_I2C_Init+0x270>)
 800642c:	f7fc feb5 	bl	800319a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d008      	beq.n	800644a <HAL_I2C_Init+0x10e>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	2b80      	cmp	r3, #128	; 0x80
 800643e:	d004      	beq.n	800644a <HAL_I2C_Init+0x10e>
 8006440:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8006444:	4859      	ldr	r0, [pc, #356]	; (80065ac <HAL_I2C_Init+0x270>)
 8006446:	f7fc fea8 	bl	800319a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7fc fd44 	bl	8002eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2224      	movs	r2, #36	; 0x24
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0201 	bic.w	r2, r2, #1
 800647a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800648a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800649a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800649c:	f001 fff8 	bl	8008490 <HAL_RCC_GetPCLK1Freq>
 80064a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	4a43      	ldr	r2, [pc, #268]	; (80065b4 <HAL_I2C_Init+0x278>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d807      	bhi.n	80064bc <HAL_I2C_Init+0x180>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4a42      	ldr	r2, [pc, #264]	; (80065b8 <HAL_I2C_Init+0x27c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	bf94      	ite	ls
 80064b4:	2301      	movls	r3, #1
 80064b6:	2300      	movhi	r3, #0
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	e006      	b.n	80064ca <HAL_I2C_Init+0x18e>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4a3f      	ldr	r2, [pc, #252]	; (80065bc <HAL_I2C_Init+0x280>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	bf94      	ite	ls
 80064c4:	2301      	movls	r3, #1
 80064c6:	2300      	movhi	r3, #0
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e0fb      	b.n	80066ca <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4a3a      	ldr	r2, [pc, #232]	; (80065c0 <HAL_I2C_Init+0x284>)
 80064d6:	fba2 2303 	umull	r2, r3, r2, r3
 80064da:	0c9b      	lsrs	r3, r3, #18
 80064dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	4a2c      	ldr	r2, [pc, #176]	; (80065b4 <HAL_I2C_Init+0x278>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d802      	bhi.n	800650c <HAL_I2C_Init+0x1d0>
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	3301      	adds	r3, #1
 800650a:	e009      	b.n	8006520 <HAL_I2C_Init+0x1e4>
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006512:	fb02 f303 	mul.w	r3, r2, r3
 8006516:	4a2b      	ldr	r2, [pc, #172]	; (80065c4 <HAL_I2C_Init+0x288>)
 8006518:	fba2 2303 	umull	r2, r3, r2, r3
 800651c:	099b      	lsrs	r3, r3, #6
 800651e:	3301      	adds	r3, #1
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	6812      	ldr	r2, [r2, #0]
 8006524:	430b      	orrs	r3, r1
 8006526:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006532:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	491e      	ldr	r1, [pc, #120]	; (80065b4 <HAL_I2C_Init+0x278>)
 800653c:	428b      	cmp	r3, r1
 800653e:	d819      	bhi.n	8006574 <HAL_I2C_Init+0x238>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	1e59      	subs	r1, r3, #1
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	fbb1 f3f3 	udiv	r3, r1, r3
 800654e:	1c59      	adds	r1, r3, #1
 8006550:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006554:	400b      	ands	r3, r1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <HAL_I2C_Init+0x234>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	1e59      	subs	r1, r3, #1
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	fbb1 f3f3 	udiv	r3, r1, r3
 8006568:	3301      	adds	r3, #1
 800656a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800656e:	e065      	b.n	800663c <HAL_I2C_Init+0x300>
 8006570:	2304      	movs	r3, #4
 8006572:	e063      	b.n	800663c <HAL_I2C_Init+0x300>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d125      	bne.n	80065c8 <HAL_I2C_Init+0x28c>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	1e58      	subs	r0, r3, #1
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6859      	ldr	r1, [r3, #4]
 8006584:	460b      	mov	r3, r1
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	440b      	add	r3, r1
 800658a:	fbb0 f3f3 	udiv	r3, r0, r3
 800658e:	3301      	adds	r3, #1
 8006590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006594:	2b00      	cmp	r3, #0
 8006596:	bf0c      	ite	eq
 8006598:	2301      	moveq	r3, #1
 800659a:	2300      	movne	r3, #0
 800659c:	b2db      	uxtb	r3, r3
 800659e:	e026      	b.n	80065ee <HAL_I2C_Init+0x2b2>
 80065a0:	40005400 	.word	0x40005400
 80065a4:	40005800 	.word	0x40005800
 80065a8:	40005c00 	.word	0x40005c00
 80065ac:	0800c764 	.word	0x0800c764
 80065b0:	00061a80 	.word	0x00061a80
 80065b4:	000186a0 	.word	0x000186a0
 80065b8:	001e847f 	.word	0x001e847f
 80065bc:	003d08ff 	.word	0x003d08ff
 80065c0:	431bde83 	.word	0x431bde83
 80065c4:	10624dd3 	.word	0x10624dd3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	1e58      	subs	r0, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6859      	ldr	r1, [r3, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	440b      	add	r3, r1
 80065d6:	0099      	lsls	r1, r3, #2
 80065d8:	440b      	add	r3, r1
 80065da:	fbb0 f3f3 	udiv	r3, r0, r3
 80065de:	3301      	adds	r3, #1
 80065e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	bf0c      	ite	eq
 80065e8:	2301      	moveq	r3, #1
 80065ea:	2300      	movne	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <HAL_I2C_Init+0x2ba>
 80065f2:	2301      	movs	r3, #1
 80065f4:	e022      	b.n	800663c <HAL_I2C_Init+0x300>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10e      	bne.n	800661c <HAL_I2C_Init+0x2e0>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1e58      	subs	r0, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6859      	ldr	r1, [r3, #4]
 8006606:	460b      	mov	r3, r1
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	440b      	add	r3, r1
 800660c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006610:	3301      	adds	r3, #1
 8006612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800661a:	e00f      	b.n	800663c <HAL_I2C_Init+0x300>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	1e58      	subs	r0, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6859      	ldr	r1, [r3, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	0099      	lsls	r1, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006632:	3301      	adds	r3, #1
 8006634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006638:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800663c:	6879      	ldr	r1, [r7, #4]
 800663e:	6809      	ldr	r1, [r1, #0]
 8006640:	4313      	orrs	r3, r2
 8006642:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69da      	ldr	r2, [r3, #28]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800666a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	6911      	ldr	r1, [r2, #16]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	68d2      	ldr	r2, [r2, #12]
 8006676:	4311      	orrs	r1, r2
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6812      	ldr	r2, [r2, #0]
 800667c:	430b      	orrs	r3, r1
 800667e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	695a      	ldr	r2, [r3, #20]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop

080066d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ec:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066f4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	2b10      	cmp	r3, #16
 8006702:	d003      	beq.n	800670c <HAL_I2C_EV_IRQHandler+0x38>
 8006704:	7bfb      	ldrb	r3, [r7, #15]
 8006706:	2b40      	cmp	r3, #64	; 0x40
 8006708:	f040 80c1 	bne.w	800688e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10d      	bne.n	8006742 <HAL_I2C_EV_IRQHandler+0x6e>
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800672c:	d003      	beq.n	8006736 <HAL_I2C_EV_IRQHandler+0x62>
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006734:	d101      	bne.n	800673a <HAL_I2C_EV_IRQHandler+0x66>
 8006736:	2301      	movs	r3, #1
 8006738:	e000      	b.n	800673c <HAL_I2C_EV_IRQHandler+0x68>
 800673a:	2300      	movs	r3, #0
 800673c:	2b01      	cmp	r3, #1
 800673e:	f000 8132 	beq.w	80069a6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00c      	beq.n	8006766 <HAL_I2C_EV_IRQHandler+0x92>
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	0a5b      	lsrs	r3, r3, #9
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b00      	cmp	r3, #0
 8006756:	d006      	beq.n	8006766 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f001 fc7b 	bl	8008054 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fd83 	bl	800726a <I2C_Master_SB>
 8006764:	e092      	b.n	800688c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	08db      	lsrs	r3, r3, #3
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b00      	cmp	r3, #0
 8006770:	d009      	beq.n	8006786 <HAL_I2C_EV_IRQHandler+0xb2>
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	0a5b      	lsrs	r3, r3, #9
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fdf9 	bl	8007376 <I2C_Master_ADD10>
 8006784:	e082      	b.n	800688c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	085b      	lsrs	r3, r3, #1
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b00      	cmp	r3, #0
 8006790:	d009      	beq.n	80067a6 <HAL_I2C_EV_IRQHandler+0xd2>
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	0a5b      	lsrs	r3, r3, #9
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fe13 	bl	80073ca <I2C_Master_ADDR>
 80067a4:	e072      	b.n	800688c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	089b      	lsrs	r3, r3, #2
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d03b      	beq.n	800682a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067c0:	f000 80f3 	beq.w	80069aa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	09db      	lsrs	r3, r3, #7
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00f      	beq.n	80067f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	0a9b      	lsrs	r3, r3, #10
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d009      	beq.n	80067f0 <HAL_I2C_EV_IRQHandler+0x11c>
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	089b      	lsrs	r3, r3, #2
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d103      	bne.n	80067f0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f9f3 	bl	8006bd4 <I2C_MasterTransmit_TXE>
 80067ee:	e04d      	b.n	800688c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	089b      	lsrs	r3, r3, #2
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 80d6 	beq.w	80069aa <HAL_I2C_EV_IRQHandler+0x2d6>
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	0a5b      	lsrs	r3, r3, #9
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 80cf 	beq.w	80069aa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800680c:	7bbb      	ldrb	r3, [r7, #14]
 800680e:	2b21      	cmp	r3, #33	; 0x21
 8006810:	d103      	bne.n	800681a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fa7a 	bl	8006d0c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006818:	e0c7      	b.n	80069aa <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800681a:	7bfb      	ldrb	r3, [r7, #15]
 800681c:	2b40      	cmp	r3, #64	; 0x40
 800681e:	f040 80c4 	bne.w	80069aa <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fae8 	bl	8006df8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006828:	e0bf      	b.n	80069aa <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006838:	f000 80b7 	beq.w	80069aa <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	099b      	lsrs	r3, r3, #6
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00f      	beq.n	8006868 <HAL_I2C_EV_IRQHandler+0x194>
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	0a9b      	lsrs	r3, r3, #10
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d009      	beq.n	8006868 <HAL_I2C_EV_IRQHandler+0x194>
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	089b      	lsrs	r3, r3, #2
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d103      	bne.n	8006868 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fb5d 	bl	8006f20 <I2C_MasterReceive_RXNE>
 8006866:	e011      	b.n	800688c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	089b      	lsrs	r3, r3, #2
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 809a 	beq.w	80069aa <HAL_I2C_EV_IRQHandler+0x2d6>
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	0a5b      	lsrs	r3, r3, #9
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 8093 	beq.w	80069aa <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fc06 	bl	8007096 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800688a:	e08e      	b.n	80069aa <HAL_I2C_EV_IRQHandler+0x2d6>
 800688c:	e08d      	b.n	80069aa <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	2b00      	cmp	r3, #0
 8006894:	d004      	beq.n	80068a0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	61fb      	str	r3, [r7, #28]
 800689e:	e007      	b.n	80068b0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	085b      	lsrs	r3, r3, #1
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d012      	beq.n	80068e2 <HAL_I2C_EV_IRQHandler+0x20e>
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	0a5b      	lsrs	r3, r3, #9
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00c      	beq.n	80068e2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80068d8:	69b9      	ldr	r1, [r7, #24]
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 ffc4 	bl	8007868 <I2C_Slave_ADDR>
 80068e0:	e066      	b.n	80069b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	091b      	lsrs	r3, r3, #4
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <HAL_I2C_EV_IRQHandler+0x22e>
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	0a5b      	lsrs	r3, r3, #9
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fffe 	bl	80078fc <I2C_Slave_STOPF>
 8006900:	e056      	b.n	80069b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006902:	7bbb      	ldrb	r3, [r7, #14]
 8006904:	2b21      	cmp	r3, #33	; 0x21
 8006906:	d002      	beq.n	800690e <HAL_I2C_EV_IRQHandler+0x23a>
 8006908:	7bbb      	ldrb	r3, [r7, #14]
 800690a:	2b29      	cmp	r3, #41	; 0x29
 800690c:	d125      	bne.n	800695a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	09db      	lsrs	r3, r3, #7
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00f      	beq.n	800693a <HAL_I2C_EV_IRQHandler+0x266>
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	0a9b      	lsrs	r3, r3, #10
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d009      	beq.n	800693a <HAL_I2C_EV_IRQHandler+0x266>
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	089b      	lsrs	r3, r3, #2
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d103      	bne.n	800693a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 feda 	bl	80076ec <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006938:	e039      	b.n	80069ae <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	089b      	lsrs	r3, r3, #2
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d033      	beq.n	80069ae <HAL_I2C_EV_IRQHandler+0x2da>
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	0a5b      	lsrs	r3, r3, #9
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d02d      	beq.n	80069ae <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 ff07 	bl	8007766 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006958:	e029      	b.n	80069ae <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	099b      	lsrs	r3, r3, #6
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00f      	beq.n	8006986 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	0a9b      	lsrs	r3, r3, #10
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d009      	beq.n	8006986 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	089b      	lsrs	r3, r3, #2
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	d103      	bne.n	8006986 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 ff12 	bl	80077a8 <I2C_SlaveReceive_RXNE>
 8006984:	e014      	b.n	80069b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	089b      	lsrs	r3, r3, #2
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00e      	beq.n	80069b0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	0a5b      	lsrs	r3, r3, #9
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d008      	beq.n	80069b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 ff40 	bl	8007824 <I2C_SlaveReceive_BTF>
 80069a4:	e004      	b.n	80069b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80069a6:	bf00      	nop
 80069a8:	e002      	b.n	80069b0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069aa:	bf00      	nop
 80069ac:	e000      	b.n	80069b0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80069ae:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80069b0:	3720      	adds	r7, #32
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b08a      	sub	sp, #40	; 0x28
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80069ce:	2300      	movs	r3, #0
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069d8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	0a1b      	lsrs	r3, r3, #8
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00e      	beq.n	8006a04 <HAL_I2C_ER_IRQHandler+0x4e>
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	0a1b      	lsrs	r3, r3, #8
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d008      	beq.n	8006a04 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	f043 0301 	orr.w	r3, r3, #1
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a02:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	0a5b      	lsrs	r3, r3, #9
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00e      	beq.n	8006a2e <HAL_I2C_ER_IRQHandler+0x78>
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	0a1b      	lsrs	r3, r3, #8
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d008      	beq.n	8006a2e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	f043 0302 	orr.w	r3, r3, #2
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006a2c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	0a9b      	lsrs	r3, r3, #10
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d03f      	beq.n	8006aba <HAL_I2C_ER_IRQHandler+0x104>
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	0a1b      	lsrs	r3, r3, #8
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d039      	beq.n	8006aba <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006a46:	7efb      	ldrb	r3, [r7, #27]
 8006a48:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a58:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006a60:	7ebb      	ldrb	r3, [r7, #26]
 8006a62:	2b20      	cmp	r3, #32
 8006a64:	d112      	bne.n	8006a8c <HAL_I2C_ER_IRQHandler+0xd6>
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10f      	bne.n	8006a8c <HAL_I2C_ER_IRQHandler+0xd6>
 8006a6c:	7cfb      	ldrb	r3, [r7, #19]
 8006a6e:	2b21      	cmp	r3, #33	; 0x21
 8006a70:	d008      	beq.n	8006a84 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006a72:	7cfb      	ldrb	r3, [r7, #19]
 8006a74:	2b29      	cmp	r3, #41	; 0x29
 8006a76:	d005      	beq.n	8006a84 <HAL_I2C_ER_IRQHandler+0xce>
 8006a78:	7cfb      	ldrb	r3, [r7, #19]
 8006a7a:	2b28      	cmp	r3, #40	; 0x28
 8006a7c:	d106      	bne.n	8006a8c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b21      	cmp	r3, #33	; 0x21
 8006a82:	d103      	bne.n	8006a8c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f001 f869 	bl	8007b5c <I2C_Slave_AF>
 8006a8a:	e016      	b.n	8006aba <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a94:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	f043 0304 	orr.w	r3, r3, #4
 8006a9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006a9e:	7efb      	ldrb	r3, [r7, #27]
 8006aa0:	2b10      	cmp	r3, #16
 8006aa2:	d002      	beq.n	8006aaa <HAL_I2C_ER_IRQHandler+0xf4>
 8006aa4:	7efb      	ldrb	r3, [r7, #27]
 8006aa6:	2b40      	cmp	r3, #64	; 0x40
 8006aa8:	d107      	bne.n	8006aba <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ab8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	0adb      	lsrs	r3, r3, #11
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00e      	beq.n	8006ae4 <HAL_I2C_ER_IRQHandler+0x12e>
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	0a1b      	lsrs	r3, r3, #8
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d008      	beq.n	8006ae4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	f043 0308 	orr.w	r3, r3, #8
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006ae2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d008      	beq.n	8006afc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	431a      	orrs	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f001 f8a0 	bl	8007c3c <I2C_ITError>
  }
}
 8006afc:	bf00      	nop
 8006afe:	3728      	adds	r7, #40	; 0x28
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	70fb      	strb	r3, [r7, #3]
 8006b60:	4613      	mov	r3, r2
 8006b62:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d150      	bne.n	8006c9c <I2C_MasterTransmit_TXE+0xc8>
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
 8006bfc:	2b21      	cmp	r3, #33	; 0x21
 8006bfe:	d14d      	bne.n	8006c9c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b08      	cmp	r3, #8
 8006c04:	d01d      	beq.n	8006c42 <I2C_MasterTransmit_TXE+0x6e>
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d01a      	beq.n	8006c42 <I2C_MasterTransmit_TXE+0x6e>
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c12:	d016      	beq.n	8006c42 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c22:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2211      	movs	r2, #17
 8006c28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7ff ff62 	bl	8006b04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c40:	e060      	b.n	8006d04 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c50:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c60:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b40      	cmp	r3, #64	; 0x40
 8006c7a:	d107      	bne.n	8006c8c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7ff ff7d 	bl	8006b84 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c8a:	e03b      	b.n	8006d04 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7ff ff35 	bl	8006b04 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c9a:	e033      	b.n	8006d04 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
 8006c9e:	2b21      	cmp	r3, #33	; 0x21
 8006ca0:	d005      	beq.n	8006cae <I2C_MasterTransmit_TXE+0xda>
 8006ca2:	7bbb      	ldrb	r3, [r7, #14]
 8006ca4:	2b40      	cmp	r3, #64	; 0x40
 8006ca6:	d12d      	bne.n	8006d04 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	2b22      	cmp	r3, #34	; 0x22
 8006cac:	d12a      	bne.n	8006d04 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d108      	bne.n	8006cca <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006cc8:	e01c      	b.n	8006d04 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b40      	cmp	r3, #64	; 0x40
 8006cd4:	d103      	bne.n	8006cde <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f88e 	bl	8006df8 <I2C_MemoryTransmit_TXE_BTF>
}
 8006cdc:	e012      	b.n	8006d04 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	781a      	ldrb	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006d02:	e7ff      	b.n	8006d04 <I2C_MasterTransmit_TXE+0x130>
 8006d04:	bf00      	nop
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b21      	cmp	r3, #33	; 0x21
 8006d24:	d164      	bne.n	8006df0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d012      	beq.n	8006d56 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	781a      	ldrb	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006d54:	e04c      	b.n	8006df0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b08      	cmp	r3, #8
 8006d5a:	d01d      	beq.n	8006d98 <I2C_MasterTransmit_BTF+0x8c>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	d01a      	beq.n	8006d98 <I2C_MasterTransmit_BTF+0x8c>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d68:	d016      	beq.n	8006d98 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d78:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2211      	movs	r2, #17
 8006d7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff feb7 	bl	8006b04 <HAL_I2C_MasterTxCpltCallback>
}
 8006d96:	e02b      	b.n	8006df0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006da6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006db6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b40      	cmp	r3, #64	; 0x40
 8006dd0:	d107      	bne.n	8006de2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7ff fed2 	bl	8006b84 <HAL_I2C_MemTxCpltCallback>
}
 8006de0:	e006      	b.n	8006df0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7ff fe8a 	bl	8006b04 <HAL_I2C_MasterTxCpltCallback>
}
 8006df0:	bf00      	nop
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e06:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d11d      	bne.n	8006e4c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d10b      	bne.n	8006e30 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e28:	1c9a      	adds	r2, r3, #2
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006e2e:	e073      	b.n	8006f18 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	121b      	asrs	r3, r3, #8
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e44:	1c5a      	adds	r2, r3, #1
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006e4a:	e065      	b.n	8006f18 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d10b      	bne.n	8006e6c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e58:	b2da      	uxtb	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006e6a:	e055      	b.n	8006f18 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d151      	bne.n	8006f18 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	2b22      	cmp	r3, #34	; 0x22
 8006e78:	d10d      	bne.n	8006e96 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e88:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8e:	1c5a      	adds	r2, r3, #1
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006e94:	e040      	b.n	8006f18 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d015      	beq.n	8006ecc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
 8006ea2:	2b21      	cmp	r3, #33	; 0x21
 8006ea4:	d112      	bne.n	8006ecc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	781a      	ldrb	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006eca:	e025      	b.n	8006f18 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d120      	bne.n	8006f18 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
 8006ed8:	2b21      	cmp	r3, #33	; 0x21
 8006eda:	d11d      	bne.n	8006f18 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006eea:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006efa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2220      	movs	r2, #32
 8006f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7ff fe36 	bl	8006b84 <HAL_I2C_MemTxCpltCallback>
}
 8006f18:	bf00      	nop
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b22      	cmp	r3, #34	; 0x22
 8006f32:	f040 80ac 	bne.w	800708e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d921      	bls.n	8006f88 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	691a      	ldr	r2, [r3, #16]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4e:	b2d2      	uxtb	r2, r2
 8006f50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	1c5a      	adds	r2, r3, #1
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	3b01      	subs	r3, #1
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	f040 808c 	bne.w	800708e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f84:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006f86:	e082      	b.n	800708e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d075      	beq.n	800707c <I2C_MasterReceive_RXNE+0x15c>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d002      	beq.n	8006f9c <I2C_MasterReceive_RXNE+0x7c>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d16f      	bne.n	800707c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f001 f827 	bl	8007ff0 <I2C_WaitOnSTOPRequestThroughIT>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d142      	bne.n	800702e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fb6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fc6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	691a      	ldr	r2, [r3, #16]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd2:	b2d2      	uxtb	r2, r2
 8006fd4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fda:	1c5a      	adds	r2, r3, #1
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b40      	cmp	r3, #64	; 0x40
 8007000:	d10a      	bne.n	8007018 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7ff fdc1 	bl	8006b98 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007016:	e03a      	b.n	800708e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2212      	movs	r2, #18
 8007024:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7ff fd76 	bl	8006b18 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800702c:	e02f      	b.n	800708e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800703c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	691a      	ldr	r2, [r3, #16]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	b2d2      	uxtb	r2, r2
 800704a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800705a:	b29b      	uxth	r3, r3
 800705c:	3b01      	subs	r3, #1
 800705e:	b29a      	uxth	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7ff fd99 	bl	8006bac <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800707a:	e008      	b.n	800708e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800708a:	605a      	str	r2, [r3, #4]
}
 800708c:	e7ff      	b.n	800708e <I2C_MasterReceive_RXNE+0x16e>
 800708e:	bf00      	nop
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b084      	sub	sp, #16
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	d11b      	bne.n	80070e6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070bc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	691a      	ldr	r2, [r3, #16]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	b2d2      	uxtb	r2, r2
 80070ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	1c5a      	adds	r2, r3, #1
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070da:	b29b      	uxth	r3, r3
 80070dc:	3b01      	subs	r3, #1
 80070de:	b29a      	uxth	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80070e4:	e0bd      	b.n	8007262 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d129      	bne.n	8007144 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070fe:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b04      	cmp	r3, #4
 8007104:	d00a      	beq.n	800711c <I2C_MasterReceive_BTF+0x86>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b02      	cmp	r3, #2
 800710a:	d007      	beq.n	800711c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800711a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	691a      	ldr	r2, [r3, #16]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007126:	b2d2      	uxtb	r2, r2
 8007128:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712e:	1c5a      	adds	r2, r3, #1
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007138:	b29b      	uxth	r3, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	b29a      	uxth	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007142:	e08e      	b.n	8007262 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007148:	b29b      	uxth	r3, r3
 800714a:	2b02      	cmp	r3, #2
 800714c:	d176      	bne.n	800723c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d002      	beq.n	800715a <I2C_MasterReceive_BTF+0xc4>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b10      	cmp	r3, #16
 8007158:	d108      	bne.n	800716c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	e019      	b.n	80071a0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b04      	cmp	r3, #4
 8007170:	d002      	beq.n	8007178 <I2C_MasterReceive_BTF+0xe2>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2b02      	cmp	r3, #2
 8007176:	d108      	bne.n	800718a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	e00a      	b.n	80071a0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2b10      	cmp	r3, #16
 800718e:	d007      	beq.n	80071a0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800719e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	691a      	ldr	r2, [r3, #16]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071aa:	b2d2      	uxtb	r2, r2
 80071ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b2:	1c5a      	adds	r2, r3, #1
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071bc:	b29b      	uxth	r3, r3
 80071be:	3b01      	subs	r3, #1
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	691a      	ldr	r2, [r3, #16]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	b2d2      	uxtb	r2, r2
 80071d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	3b01      	subs	r3, #1
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80071fa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2220      	movs	r2, #32
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b40      	cmp	r3, #64	; 0x40
 800720e:	d10a      	bne.n	8007226 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7ff fcba 	bl	8006b98 <HAL_I2C_MemRxCpltCallback>
}
 8007224:	e01d      	b.n	8007262 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2212      	movs	r2, #18
 8007232:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7ff fc6f 	bl	8006b18 <HAL_I2C_MasterRxCpltCallback>
}
 800723a:	e012      	b.n	8007262 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691a      	ldr	r2, [r3, #16]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007246:	b2d2      	uxtb	r2, r2
 8007248:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007258:	b29b      	uxth	r3, r3
 800725a:	3b01      	subs	r3, #1
 800725c:	b29a      	uxth	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007262:	bf00      	nop
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800726a:	b480      	push	{r7}
 800726c:	b083      	sub	sp, #12
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b40      	cmp	r3, #64	; 0x40
 800727c:	d117      	bne.n	80072ae <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007282:	2b00      	cmp	r3, #0
 8007284:	d109      	bne.n	800729a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800728a:	b2db      	uxtb	r3, r3
 800728c:	461a      	mov	r2, r3
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007296:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007298:	e067      	b.n	800736a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	f043 0301 	orr.w	r3, r3, #1
 80072a4:	b2da      	uxtb	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	611a      	str	r2, [r3, #16]
}
 80072ac:	e05d      	b.n	800736a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072b6:	d133      	bne.n	8007320 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b21      	cmp	r3, #33	; 0x21
 80072c2:	d109      	bne.n	80072d8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	461a      	mov	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072d4:	611a      	str	r2, [r3, #16]
 80072d6:	e008      	b.n	80072ea <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	f043 0301 	orr.w	r3, r3, #1
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d004      	beq.n	80072fc <I2C_Master_SB+0x92>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d108      	bne.n	800730e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007300:	2b00      	cmp	r3, #0
 8007302:	d032      	beq.n	800736a <I2C_Master_SB+0x100>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730a:	2b00      	cmp	r3, #0
 800730c:	d02d      	beq.n	800736a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800731c:	605a      	str	r2, [r3, #4]
}
 800731e:	e024      	b.n	800736a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10e      	bne.n	8007346 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800732c:	b29b      	uxth	r3, r3
 800732e:	11db      	asrs	r3, r3, #7
 8007330:	b2db      	uxtb	r3, r3
 8007332:	f003 0306 	and.w	r3, r3, #6
 8007336:	b2db      	uxtb	r3, r3
 8007338:	f063 030f 	orn	r3, r3, #15
 800733c:	b2da      	uxtb	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	611a      	str	r2, [r3, #16]
}
 8007344:	e011      	b.n	800736a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734a:	2b01      	cmp	r3, #1
 800734c:	d10d      	bne.n	800736a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007352:	b29b      	uxth	r3, r3
 8007354:	11db      	asrs	r3, r3, #7
 8007356:	b2db      	uxtb	r3, r3
 8007358:	f003 0306 	and.w	r3, r3, #6
 800735c:	b2db      	uxtb	r3, r3
 800735e:	f063 030e 	orn	r3, r3, #14
 8007362:	b2da      	uxtb	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	611a      	str	r2, [r3, #16]
}
 800736a:	bf00      	nop
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007382:	b2da      	uxtb	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800738e:	2b00      	cmp	r3, #0
 8007390:	d004      	beq.n	800739c <I2C_Master_ADD10+0x26>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007398:	2b00      	cmp	r3, #0
 800739a:	d108      	bne.n	80073ae <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00c      	beq.n	80073be <I2C_Master_ADD10+0x48>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d007      	beq.n	80073be <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073bc:	605a      	str	r2, [r3, #4]
  }
}
 80073be:	bf00      	nop
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80073ca:	b480      	push	{r7}
 80073cc:	b091      	sub	sp, #68	; 0x44
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b22      	cmp	r3, #34	; 0x22
 80073f2:	f040 8169 	bne.w	80076c8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10f      	bne.n	800741e <I2C_Master_ADDR+0x54>
 80073fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007402:	2b40      	cmp	r3, #64	; 0x40
 8007404:	d10b      	bne.n	800741e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007406:	2300      	movs	r3, #0
 8007408:	633b      	str	r3, [r7, #48]	; 0x30
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	633b      	str	r3, [r7, #48]	; 0x30
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	633b      	str	r3, [r7, #48]	; 0x30
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	e160      	b.n	80076e0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007422:	2b00      	cmp	r3, #0
 8007424:	d11d      	bne.n	8007462 <I2C_Master_ADDR+0x98>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800742e:	d118      	bne.n	8007462 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007430:	2300      	movs	r3, #0
 8007432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007444:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007454:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	651a      	str	r2, [r3, #80]	; 0x50
 8007460:	e13e      	b.n	80076e0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007466:	b29b      	uxth	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	d113      	bne.n	8007494 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800746c:	2300      	movs	r3, #0
 800746e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	62bb      	str	r3, [r7, #40]	; 0x28
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007480:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	e115      	b.n	80076c0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007498:	b29b      	uxth	r3, r3
 800749a:	2b01      	cmp	r3, #1
 800749c:	f040 808a 	bne.w	80075b4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80074a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074a6:	d137      	bne.n	8007518 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074b6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074c6:	d113      	bne.n	80074f0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074d6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074d8:	2300      	movs	r3, #0
 80074da:	627b      	str	r3, [r7, #36]	; 0x24
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	627b      	str	r3, [r7, #36]	; 0x24
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	627b      	str	r3, [r7, #36]	; 0x24
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	e0e7      	b.n	80076c0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074f0:	2300      	movs	r3, #0
 80074f2:	623b      	str	r3, [r7, #32]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	623b      	str	r3, [r7, #32]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	623b      	str	r3, [r7, #32]
 8007504:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007514:	601a      	str	r2, [r3, #0]
 8007516:	e0d3      	b.n	80076c0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751a:	2b08      	cmp	r3, #8
 800751c:	d02e      	beq.n	800757c <I2C_Master_ADDR+0x1b2>
 800751e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007520:	2b20      	cmp	r3, #32
 8007522:	d02b      	beq.n	800757c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007526:	2b12      	cmp	r3, #18
 8007528:	d102      	bne.n	8007530 <I2C_Master_ADDR+0x166>
 800752a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752c:	2b01      	cmp	r3, #1
 800752e:	d125      	bne.n	800757c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007532:	2b04      	cmp	r3, #4
 8007534:	d00e      	beq.n	8007554 <I2C_Master_ADDR+0x18a>
 8007536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007538:	2b02      	cmp	r3, #2
 800753a:	d00b      	beq.n	8007554 <I2C_Master_ADDR+0x18a>
 800753c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753e:	2b10      	cmp	r3, #16
 8007540:	d008      	beq.n	8007554 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007550:	601a      	str	r2, [r3, #0]
 8007552:	e007      	b.n	8007564 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007562:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007564:	2300      	movs	r3, #0
 8007566:	61fb      	str	r3, [r7, #28]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	61fb      	str	r3, [r7, #28]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	61fb      	str	r3, [r7, #28]
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	e0a1      	b.n	80076c0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800758a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800758c:	2300      	movs	r3, #0
 800758e:	61bb      	str	r3, [r7, #24]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	61bb      	str	r3, [r7, #24]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	61bb      	str	r3, [r7, #24]
 80075a0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	e085      	b.n	80076c0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d14d      	bne.n	800765a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80075be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c0:	2b04      	cmp	r3, #4
 80075c2:	d016      	beq.n	80075f2 <I2C_Master_ADDR+0x228>
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d013      	beq.n	80075f2 <I2C_Master_ADDR+0x228>
 80075ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075cc:	2b10      	cmp	r3, #16
 80075ce:	d010      	beq.n	80075f2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075de:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	e007      	b.n	8007602 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007600:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800760c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007610:	d117      	bne.n	8007642 <I2C_Master_ADDR+0x278>
 8007612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007614:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007618:	d00b      	beq.n	8007632 <I2C_Master_ADDR+0x268>
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	2b01      	cmp	r3, #1
 800761e:	d008      	beq.n	8007632 <I2C_Master_ADDR+0x268>
 8007620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007622:	2b08      	cmp	r3, #8
 8007624:	d005      	beq.n	8007632 <I2C_Master_ADDR+0x268>
 8007626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007628:	2b10      	cmp	r3, #16
 800762a:	d002      	beq.n	8007632 <I2C_Master_ADDR+0x268>
 800762c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762e:	2b20      	cmp	r3, #32
 8007630:	d107      	bne.n	8007642 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007640:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007642:	2300      	movs	r3, #0
 8007644:	617b      	str	r3, [r7, #20]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	617b      	str	r3, [r7, #20]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	617b      	str	r3, [r7, #20]
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	e032      	b.n	80076c0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007668:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007678:	d117      	bne.n	80076aa <I2C_Master_ADDR+0x2e0>
 800767a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007680:	d00b      	beq.n	800769a <I2C_Master_ADDR+0x2d0>
 8007682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007684:	2b01      	cmp	r3, #1
 8007686:	d008      	beq.n	800769a <I2C_Master_ADDR+0x2d0>
 8007688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768a:	2b08      	cmp	r3, #8
 800768c:	d005      	beq.n	800769a <I2C_Master_ADDR+0x2d0>
 800768e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007690:	2b10      	cmp	r3, #16
 8007692:	d002      	beq.n	800769a <I2C_Master_ADDR+0x2d0>
 8007694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007696:	2b20      	cmp	r3, #32
 8007698:	d107      	bne.n	80076aa <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076a8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076aa:	2300      	movs	r3, #0
 80076ac:	613b      	str	r3, [r7, #16]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	613b      	str	r3, [r7, #16]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	613b      	str	r3, [r7, #16]
 80076be:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80076c6:	e00b      	b.n	80076e0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076c8:	2300      	movs	r3, #0
 80076ca:	60fb      	str	r3, [r7, #12]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	68fb      	ldr	r3, [r7, #12]
}
 80076de:	e7ff      	b.n	80076e0 <I2C_Master_ADDR+0x316>
 80076e0:	bf00      	nop
 80076e2:	3744      	adds	r7, #68	; 0x44
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007700:	b29b      	uxth	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d02b      	beq.n	800775e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	781a      	ldrb	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007720:	b29b      	uxth	r3, r3
 8007722:	3b01      	subs	r3, #1
 8007724:	b29a      	uxth	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772e:	b29b      	uxth	r3, r3
 8007730:	2b00      	cmp	r3, #0
 8007732:	d114      	bne.n	800775e <I2C_SlaveTransmit_TXE+0x72>
 8007734:	7bfb      	ldrb	r3, [r7, #15]
 8007736:	2b29      	cmp	r3, #41	; 0x29
 8007738:	d111      	bne.n	800775e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007748:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2221      	movs	r2, #33	; 0x21
 800774e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2228      	movs	r2, #40	; 0x28
 8007754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7ff f9e7 	bl	8006b2c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800775e:	bf00      	nop
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007766:	b480      	push	{r7}
 8007768:	b083      	sub	sp, #12
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007772:	b29b      	uxth	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d011      	beq.n	800779c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777c:	781a      	ldrb	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	1c5a      	adds	r2, r3, #1
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007792:	b29b      	uxth	r3, r3
 8007794:	3b01      	subs	r3, #1
 8007796:	b29a      	uxth	r2, r3
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d02c      	beq.n	800781c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	691a      	ldr	r2, [r3, #16]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077cc:	b2d2      	uxtb	r2, r2
 80077ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d4:	1c5a      	adds	r2, r3, #1
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077de:	b29b      	uxth	r3, r3
 80077e0:	3b01      	subs	r3, #1
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d114      	bne.n	800781c <I2C_SlaveReceive_RXNE+0x74>
 80077f2:	7bfb      	ldrb	r3, [r7, #15]
 80077f4:	2b2a      	cmp	r3, #42	; 0x2a
 80077f6:	d111      	bne.n	800781c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007806:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2222      	movs	r2, #34	; 0x22
 800780c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2228      	movs	r2, #40	; 0x28
 8007812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7ff f992 	bl	8006b40 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800781c:	bf00      	nop
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007830:	b29b      	uxth	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d012      	beq.n	800785c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	691a      	ldr	r2, [r3, #16]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007840:	b2d2      	uxtb	r2, r2
 8007842:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	1c5a      	adds	r2, r3, #1
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007852:	b29b      	uxth	r3, r3
 8007854:	3b01      	subs	r3, #1
 8007856:	b29a      	uxth	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800787c:	b2db      	uxtb	r3, r3
 800787e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007882:	2b28      	cmp	r3, #40	; 0x28
 8007884:	d127      	bne.n	80078d6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007894:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	089b      	lsrs	r3, r3, #2
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80078a2:	2301      	movs	r3, #1
 80078a4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	09db      	lsrs	r3, r3, #7
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d103      	bne.n	80078ba <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	81bb      	strh	r3, [r7, #12]
 80078b8:	e002      	b.n	80078c0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80078c8:	89ba      	ldrh	r2, [r7, #12]
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7ff f940 	bl	8006b54 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80078d4:	e00e      	b.n	80078f4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078d6:	2300      	movs	r3, #0
 80078d8:	60bb      	str	r3, [r7, #8]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	60bb      	str	r3, [r7, #8]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	60bb      	str	r3, [r7, #8]
 80078ea:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80078f4:	bf00      	nop
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800790a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	685a      	ldr	r2, [r3, #4]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800791a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800791c:	2300      	movs	r3, #0
 800791e:	60bb      	str	r3, [r7, #8]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	60bb      	str	r3, [r7, #8]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f042 0201 	orr.w	r2, r2, #1
 8007936:	601a      	str	r2, [r3, #0]
 8007938:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007948:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007958:	d172      	bne.n	8007a40 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800795a:	7bfb      	ldrb	r3, [r7, #15]
 800795c:	2b22      	cmp	r3, #34	; 0x22
 800795e:	d002      	beq.n	8007966 <I2C_Slave_STOPF+0x6a>
 8007960:	7bfb      	ldrb	r3, [r7, #15]
 8007962:	2b2a      	cmp	r3, #42	; 0x2a
 8007964:	d135      	bne.n	80079d2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	b29a      	uxth	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007978:	b29b      	uxth	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d005      	beq.n	800798a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007982:	f043 0204 	orr.w	r2, r3, #4
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	685a      	ldr	r2, [r3, #4]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007998:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fe f88e 	bl	8005ac0 <HAL_DMA_GetState>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d049      	beq.n	8007a3e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ae:	4a69      	ldr	r2, [pc, #420]	; (8007b54 <I2C_Slave_STOPF+0x258>)
 80079b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fd fed6 	bl	8005768 <HAL_DMA_Abort_IT>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d03d      	beq.n	8007a3e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80079cc:	4610      	mov	r0, r2
 80079ce:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80079d0:	e035      	b.n	8007a3e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	b29a      	uxth	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d005      	beq.n	80079f6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ee:	f043 0204 	orr.w	r2, r3, #4
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a04:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fe f858 	bl	8005ac0 <HAL_DMA_GetState>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d014      	beq.n	8007a40 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1a:	4a4e      	ldr	r2, [pc, #312]	; (8007b54 <I2C_Slave_STOPF+0x258>)
 8007a1c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fd fea0 	bl	8005768 <HAL_DMA_Abort_IT>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d008      	beq.n	8007a40 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a38:	4610      	mov	r0, r2
 8007a3a:	4798      	blx	r3
 8007a3c:	e000      	b.n	8007a40 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007a3e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d03e      	beq.n	8007ac8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	695b      	ldr	r3, [r3, #20]
 8007a50:	f003 0304 	and.w	r3, r3, #4
 8007a54:	2b04      	cmp	r3, #4
 8007a56:	d112      	bne.n	8007a7e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	691a      	ldr	r2, [r3, #16]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a62:	b2d2      	uxtb	r2, r2
 8007a64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	3b01      	subs	r3, #1
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a88:	2b40      	cmp	r3, #64	; 0x40
 8007a8a:	d112      	bne.n	8007ab2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	691a      	ldr	r2, [r3, #16]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a96:	b2d2      	uxtb	r2, r2
 8007a98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9e:	1c5a      	adds	r2, r3, #1
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d005      	beq.n	8007ac8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac0:	f043 0204 	orr.w	r2, r3, #4
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d003      	beq.n	8007ad8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 f8b3 	bl	8007c3c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007ad6:	e039      	b.n	8007b4c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
 8007ada:	2b2a      	cmp	r3, #42	; 0x2a
 8007adc:	d109      	bne.n	8007af2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2228      	movs	r2, #40	; 0x28
 8007ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f7ff f827 	bl	8006b40 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b28      	cmp	r3, #40	; 0x28
 8007afc:	d111      	bne.n	8007b22 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a15      	ldr	r2, [pc, #84]	; (8007b58 <I2C_Slave_STOPF+0x25c>)
 8007b02:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2220      	movs	r2, #32
 8007b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7ff f828 	bl	8006b70 <HAL_I2C_ListenCpltCallback>
}
 8007b20:	e014      	b.n	8007b4c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b26:	2b22      	cmp	r3, #34	; 0x22
 8007b28:	d002      	beq.n	8007b30 <I2C_Slave_STOPF+0x234>
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	2b22      	cmp	r3, #34	; 0x22
 8007b2e:	d10d      	bne.n	8007b4c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2220      	movs	r2, #32
 8007b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7fe fffa 	bl	8006b40 <HAL_I2C_SlaveRxCpltCallback>
}
 8007b4c:	bf00      	nop
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	08007ea1 	.word	0x08007ea1
 8007b58:	ffff0000 	.word	0xffff0000

08007b5c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b70:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2b08      	cmp	r3, #8
 8007b76:	d002      	beq.n	8007b7e <I2C_Slave_AF+0x22>
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2b20      	cmp	r3, #32
 8007b7c:	d129      	bne.n	8007bd2 <I2C_Slave_AF+0x76>
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	2b28      	cmp	r3, #40	; 0x28
 8007b82:	d126      	bne.n	8007bd2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a2c      	ldr	r2, [pc, #176]	; (8007c38 <I2C_Slave_AF+0xdc>)
 8007b88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b98:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ba2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bb2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2220      	movs	r2, #32
 8007bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7fe ffd0 	bl	8006b70 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007bd0:	e02e      	b.n	8007c30 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
 8007bd4:	2b21      	cmp	r3, #33	; 0x21
 8007bd6:	d126      	bne.n	8007c26 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a17      	ldr	r2, [pc, #92]	; (8007c38 <I2C_Slave_AF+0xdc>)
 8007bdc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2221      	movs	r2, #33	; 0x21
 8007be2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2220      	movs	r2, #32
 8007be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c02:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c0c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c1c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7fe ff84 	bl	8006b2c <HAL_I2C_SlaveTxCpltCallback>
}
 8007c24:	e004      	b.n	8007c30 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c2e:	615a      	str	r2, [r3, #20]
}
 8007c30:	bf00      	nop
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	ffff0000 	.word	0xffff0000

08007c3c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c4a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c52:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007c54:	7bbb      	ldrb	r3, [r7, #14]
 8007c56:	2b10      	cmp	r3, #16
 8007c58:	d002      	beq.n	8007c60 <I2C_ITError+0x24>
 8007c5a:	7bbb      	ldrb	r3, [r7, #14]
 8007c5c:	2b40      	cmp	r3, #64	; 0x40
 8007c5e:	d10a      	bne.n	8007c76 <I2C_ITError+0x3a>
 8007c60:	7bfb      	ldrb	r3, [r7, #15]
 8007c62:	2b22      	cmp	r3, #34	; 0x22
 8007c64:	d107      	bne.n	8007c76 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c74:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007c7c:	2b28      	cmp	r3, #40	; 0x28
 8007c7e:	d107      	bne.n	8007c90 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2228      	movs	r2, #40	; 0x28
 8007c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007c8e:	e015      	b.n	8007cbc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c9e:	d00a      	beq.n	8007cb6 <I2C_ITError+0x7a>
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	2b60      	cmp	r3, #96	; 0x60
 8007ca4:	d007      	beq.n	8007cb6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2220      	movs	r2, #32
 8007caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cca:	d162      	bne.n	8007d92 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cda:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d020      	beq.n	8007d2c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cee:	4a6a      	ldr	r2, [pc, #424]	; (8007e98 <I2C_ITError+0x25c>)
 8007cf0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fd fd36 	bl	8005768 <HAL_DMA_Abort_IT>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f000 8089 	beq.w	8007e16 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f022 0201 	bic.w	r2, r2, #1
 8007d12:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2220      	movs	r2, #32
 8007d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d26:	4610      	mov	r0, r2
 8007d28:	4798      	blx	r3
 8007d2a:	e074      	b.n	8007e16 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d30:	4a59      	ldr	r2, [pc, #356]	; (8007e98 <I2C_ITError+0x25c>)
 8007d32:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7fd fd15 	bl	8005768 <HAL_DMA_Abort_IT>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d068      	beq.n	8007e16 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4e:	2b40      	cmp	r3, #64	; 0x40
 8007d50:	d10b      	bne.n	8007d6a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	691a      	ldr	r2, [r3, #16]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	b2d2      	uxtb	r2, r2
 8007d5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d64:	1c5a      	adds	r2, r3, #1
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f022 0201 	bic.w	r2, r2, #1
 8007d78:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2220      	movs	r2, #32
 8007d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	4798      	blx	r3
 8007d90:	e041      	b.n	8007e16 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b60      	cmp	r3, #96	; 0x60
 8007d9c:	d125      	bne.n	8007dea <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2220      	movs	r2, #32
 8007da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db6:	2b40      	cmp	r3, #64	; 0x40
 8007db8:	d10b      	bne.n	8007dd2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	691a      	ldr	r2, [r3, #16]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc4:	b2d2      	uxtb	r2, r2
 8007dc6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dcc:	1c5a      	adds	r2, r3, #1
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 0201 	bic.w	r2, r2, #1
 8007de0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7fe feec 	bl	8006bc0 <HAL_I2C_AbortCpltCallback>
 8007de8:	e015      	b.n	8007e16 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df4:	2b40      	cmp	r3, #64	; 0x40
 8007df6:	d10b      	bne.n	8007e10 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	691a      	ldr	r2, [r3, #16]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e02:	b2d2      	uxtb	r2, r2
 8007e04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0a:	1c5a      	adds	r2, r3, #1
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7fe fecb 	bl	8006bac <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10e      	bne.n	8007e44 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d109      	bne.n	8007e44 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d104      	bne.n	8007e44 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d007      	beq.n	8007e54 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e52:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e5a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e60:	f003 0304 	and.w	r3, r3, #4
 8007e64:	2b04      	cmp	r3, #4
 8007e66:	d113      	bne.n	8007e90 <I2C_ITError+0x254>
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
 8007e6a:	2b28      	cmp	r3, #40	; 0x28
 8007e6c:	d110      	bne.n	8007e90 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a0a      	ldr	r2, [pc, #40]	; (8007e9c <I2C_ITError+0x260>)
 8007e72:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7fe fe70 	bl	8006b70 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007e90:	bf00      	nop
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	08007ea1 	.word	0x08007ea1
 8007e9c:	ffff0000 	.word	0xffff0000

08007ea0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007eba:	4b4b      	ldr	r3, [pc, #300]	; (8007fe8 <I2C_DMAAbort+0x148>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	08db      	lsrs	r3, r3, #3
 8007ec0:	4a4a      	ldr	r2, [pc, #296]	; (8007fec <I2C_DMAAbort+0x14c>)
 8007ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec6:	0a1a      	lsrs	r2, r3, #8
 8007ec8:	4613      	mov	r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4413      	add	r3, r2
 8007ece:	00da      	lsls	r2, r3, #3
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d106      	bne.n	8007ee8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ede:	f043 0220 	orr.w	r2, r3, #32
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007ee6:	e00a      	b.n	8007efe <I2C_DMAAbort+0x5e>
    }
    count--;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3b01      	subs	r3, #1
 8007eec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007efc:	d0ea      	beq.n	8007ed4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f2c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	2200      	movs	r2, #0
 8007f32:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d003      	beq.n	8007f44 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f40:	2200      	movs	r2, #0
 8007f42:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d003      	beq.n	8007f54 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f50:	2200      	movs	r2, #0
 8007f52:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0201 	bic.w	r2, r2, #1
 8007f62:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b60      	cmp	r3, #96	; 0x60
 8007f6e:	d10e      	bne.n	8007f8e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	2220      	movs	r2, #32
 8007f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	2200      	movs	r2, #0
 8007f84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007f86:	6978      	ldr	r0, [r7, #20]
 8007f88:	f7fe fe1a 	bl	8006bc0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007f8c:	e027      	b.n	8007fde <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f8e:	7cfb      	ldrb	r3, [r7, #19]
 8007f90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007f94:	2b28      	cmp	r3, #40	; 0x28
 8007f96:	d117      	bne.n	8007fc8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0201 	orr.w	r2, r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fb6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	2228      	movs	r2, #40	; 0x28
 8007fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007fc6:	e007      	b.n	8007fd8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	2220      	movs	r2, #32
 8007fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007fd8:	6978      	ldr	r0, [r7, #20]
 8007fda:	f7fe fde7 	bl	8006bac <HAL_I2C_ErrorCallback>
}
 8007fde:	bf00      	nop
 8007fe0:	3718      	adds	r7, #24
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	20000040 	.word	0x20000040
 8007fec:	14f8b589 	.word	0x14f8b589

08007ff0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ffc:	4b13      	ldr	r3, [pc, #76]	; (800804c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	08db      	lsrs	r3, r3, #3
 8008002:	4a13      	ldr	r2, [pc, #76]	; (8008050 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008004:	fba2 2303 	umull	r2, r3, r2, r3
 8008008:	0a1a      	lsrs	r2, r3, #8
 800800a:	4613      	mov	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3b01      	subs	r3, #1
 8008016:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d107      	bne.n	800802e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008022:	f043 0220 	orr.w	r2, r3, #32
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e008      	b.n	8008040 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800803c:	d0e9      	beq.n	8008012 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3714      	adds	r7, #20
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	20000040 	.word	0x20000040
 8008050:	14f8b589 	.word	0x14f8b589

08008054 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008060:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008064:	d103      	bne.n	800806e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800806c:	e007      	b.n	800807e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008072:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008076:	d102      	bne.n	800807e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2208      	movs	r2, #8
 800807c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800807e:	bf00      	nop
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
	...

0800808c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008092:	2300      	movs	r3, #0
 8008094:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008096:	2300      	movs	r3, #0
 8008098:	603b      	str	r3, [r7, #0]
 800809a:	4b20      	ldr	r3, [pc, #128]	; (800811c <HAL_PWREx_EnableOverDrive+0x90>)
 800809c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809e:	4a1f      	ldr	r2, [pc, #124]	; (800811c <HAL_PWREx_EnableOverDrive+0x90>)
 80080a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080a4:	6413      	str	r3, [r2, #64]	; 0x40
 80080a6:	4b1d      	ldr	r3, [pc, #116]	; (800811c <HAL_PWREx_EnableOverDrive+0x90>)
 80080a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080ae:	603b      	str	r3, [r7, #0]
 80080b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80080b2:	4b1b      	ldr	r3, [pc, #108]	; (8008120 <HAL_PWREx_EnableOverDrive+0x94>)
 80080b4:	2201      	movs	r2, #1
 80080b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80080b8:	f7fb fb92 	bl	80037e0 <HAL_GetTick>
 80080bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80080be:	e009      	b.n	80080d4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80080c0:	f7fb fb8e 	bl	80037e0 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080ce:	d901      	bls.n	80080d4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e01f      	b.n	8008114 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80080d4:	4b13      	ldr	r3, [pc, #76]	; (8008124 <HAL_PWREx_EnableOverDrive+0x98>)
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080e0:	d1ee      	bne.n	80080c0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80080e2:	4b11      	ldr	r3, [pc, #68]	; (8008128 <HAL_PWREx_EnableOverDrive+0x9c>)
 80080e4:	2201      	movs	r2, #1
 80080e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80080e8:	f7fb fb7a 	bl	80037e0 <HAL_GetTick>
 80080ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80080ee:	e009      	b.n	8008104 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80080f0:	f7fb fb76 	bl	80037e0 <HAL_GetTick>
 80080f4:	4602      	mov	r2, r0
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080fe:	d901      	bls.n	8008104 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e007      	b.n	8008114 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008104:	4b07      	ldr	r3, [pc, #28]	; (8008124 <HAL_PWREx_EnableOverDrive+0x98>)
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800810c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008110:	d1ee      	bne.n	80080f0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	40023800 	.word	0x40023800
 8008120:	420e0040 	.word	0x420e0040
 8008124:	40007000 	.word	0x40007000
 8008128:	420e0044 	.word	0x420e0044

0800812c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d101      	bne.n	8008140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e18c      	b.n	800845a <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <HAL_RCC_ClockConfig+0x24>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2b0f      	cmp	r3, #15
 800814e:	d904      	bls.n	800815a <HAL_RCC_ClockConfig+0x2e>
 8008150:	f240 215a 	movw	r1, #602	; 0x25a
 8008154:	4887      	ldr	r0, [pc, #540]	; (8008374 <HAL_RCC_ClockConfig+0x248>)
 8008156:	f7fb f820 	bl	800319a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d031      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x98>
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d02e      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x98>
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b02      	cmp	r3, #2
 800816a:	d02b      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x98>
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2b03      	cmp	r3, #3
 8008170:	d028      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x98>
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b04      	cmp	r3, #4
 8008176:	d025      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x98>
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	2b05      	cmp	r3, #5
 800817c:	d022      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x98>
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2b06      	cmp	r3, #6
 8008182:	d01f      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x98>
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	2b07      	cmp	r3, #7
 8008188:	d01c      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x98>
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2b08      	cmp	r3, #8
 800818e:	d019      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x98>
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	2b09      	cmp	r3, #9
 8008194:	d016      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x98>
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	2b0a      	cmp	r3, #10
 800819a:	d013      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x98>
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	2b0b      	cmp	r3, #11
 80081a0:	d010      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x98>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b0c      	cmp	r3, #12
 80081a6:	d00d      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x98>
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	2b0d      	cmp	r3, #13
 80081ac:	d00a      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x98>
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b0e      	cmp	r3, #14
 80081b2:	d007      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x98>
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	2b0f      	cmp	r3, #15
 80081b8:	d004      	beq.n	80081c4 <HAL_RCC_ClockConfig+0x98>
 80081ba:	f240 215b 	movw	r1, #603	; 0x25b
 80081be:	486d      	ldr	r0, [pc, #436]	; (8008374 <HAL_RCC_ClockConfig+0x248>)
 80081c0:	f7fa ffeb 	bl	800319a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081c4:	4b6c      	ldr	r3, [pc, #432]	; (8008378 <HAL_RCC_ClockConfig+0x24c>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 030f 	and.w	r3, r3, #15
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d90c      	bls.n	80081ec <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081d2:	4b69      	ldr	r3, [pc, #420]	; (8008378 <HAL_RCC_ClockConfig+0x24c>)
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	b2d2      	uxtb	r2, r2
 80081d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081da:	4b67      	ldr	r3, [pc, #412]	; (8008378 <HAL_RCC_ClockConfig+0x24c>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 030f 	and.w	r3, r3, #15
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d001      	beq.n	80081ec <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e136      	b.n	800845a <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d049      	beq.n	800828c <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0304 	and.w	r3, r3, #4
 8008200:	2b00      	cmp	r3, #0
 8008202:	d005      	beq.n	8008210 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008204:	4b5d      	ldr	r3, [pc, #372]	; (800837c <HAL_RCC_ClockConfig+0x250>)
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	4a5c      	ldr	r2, [pc, #368]	; (800837c <HAL_RCC_ClockConfig+0x250>)
 800820a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800820e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0308 	and.w	r3, r3, #8
 8008218:	2b00      	cmp	r3, #0
 800821a:	d005      	beq.n	8008228 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800821c:	4b57      	ldr	r3, [pc, #348]	; (800837c <HAL_RCC_ClockConfig+0x250>)
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	4a56      	ldr	r2, [pc, #344]	; (800837c <HAL_RCC_ClockConfig+0x250>)
 8008222:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d024      	beq.n	800827a <HAL_RCC_ClockConfig+0x14e>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	2b80      	cmp	r3, #128	; 0x80
 8008236:	d020      	beq.n	800827a <HAL_RCC_ClockConfig+0x14e>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	2b90      	cmp	r3, #144	; 0x90
 800823e:	d01c      	beq.n	800827a <HAL_RCC_ClockConfig+0x14e>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	2ba0      	cmp	r3, #160	; 0xa0
 8008246:	d018      	beq.n	800827a <HAL_RCC_ClockConfig+0x14e>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	2bb0      	cmp	r3, #176	; 0xb0
 800824e:	d014      	beq.n	800827a <HAL_RCC_ClockConfig+0x14e>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	2bc0      	cmp	r3, #192	; 0xc0
 8008256:	d010      	beq.n	800827a <HAL_RCC_ClockConfig+0x14e>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	2bd0      	cmp	r3, #208	; 0xd0
 800825e:	d00c      	beq.n	800827a <HAL_RCC_ClockConfig+0x14e>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	2be0      	cmp	r3, #224	; 0xe0
 8008266:	d008      	beq.n	800827a <HAL_RCC_ClockConfig+0x14e>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	2bf0      	cmp	r3, #240	; 0xf0
 800826e:	d004      	beq.n	800827a <HAL_RCC_ClockConfig+0x14e>
 8008270:	f240 217e 	movw	r1, #638	; 0x27e
 8008274:	483f      	ldr	r0, [pc, #252]	; (8008374 <HAL_RCC_ClockConfig+0x248>)
 8008276:	f7fa ff90 	bl	800319a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800827a:	4b40      	ldr	r3, [pc, #256]	; (800837c <HAL_RCC_ClockConfig+0x250>)
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	493d      	ldr	r1, [pc, #244]	; (800837c <HAL_RCC_ClockConfig+0x250>)
 8008288:	4313      	orrs	r3, r2
 800828a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	2b00      	cmp	r3, #0
 8008296:	d059      	beq.n	800834c <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d010      	beq.n	80082c2 <HAL_RCC_ClockConfig+0x196>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d00c      	beq.n	80082c2 <HAL_RCC_ClockConfig+0x196>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d008      	beq.n	80082c2 <HAL_RCC_ClockConfig+0x196>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	d004      	beq.n	80082c2 <HAL_RCC_ClockConfig+0x196>
 80082b8:	f240 2185 	movw	r1, #645	; 0x285
 80082bc:	482d      	ldr	r0, [pc, #180]	; (8008374 <HAL_RCC_ClockConfig+0x248>)
 80082be:	f7fa ff6c 	bl	800319a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d107      	bne.n	80082da <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082ca:	4b2c      	ldr	r3, [pc, #176]	; (800837c <HAL_RCC_ClockConfig+0x250>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d119      	bne.n	800830a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e0bf      	b.n	800845a <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d003      	beq.n	80082ea <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d107      	bne.n	80082fa <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082ea:	4b24      	ldr	r3, [pc, #144]	; (800837c <HAL_RCC_ClockConfig+0x250>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d109      	bne.n	800830a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e0af      	b.n	800845a <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082fa:	4b20      	ldr	r3, [pc, #128]	; (800837c <HAL_RCC_ClockConfig+0x250>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0302 	and.w	r3, r3, #2
 8008302:	2b00      	cmp	r3, #0
 8008304:	d101      	bne.n	800830a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e0a7      	b.n	800845a <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800830a:	4b1c      	ldr	r3, [pc, #112]	; (800837c <HAL_RCC_ClockConfig+0x250>)
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	f023 0203 	bic.w	r2, r3, #3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	4919      	ldr	r1, [pc, #100]	; (800837c <HAL_RCC_ClockConfig+0x250>)
 8008318:	4313      	orrs	r3, r2
 800831a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800831c:	f7fb fa60 	bl	80037e0 <HAL_GetTick>
 8008320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008322:	e00a      	b.n	800833a <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008324:	f7fb fa5c 	bl	80037e0 <HAL_GetTick>
 8008328:	4602      	mov	r2, r0
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008332:	4293      	cmp	r3, r2
 8008334:	d901      	bls.n	800833a <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e08f      	b.n	800845a <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800833a:	4b10      	ldr	r3, [pc, #64]	; (800837c <HAL_RCC_ClockConfig+0x250>)
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f003 020c 	and.w	r2, r3, #12
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	429a      	cmp	r2, r3
 800834a:	d1eb      	bne.n	8008324 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800834c:	4b0a      	ldr	r3, [pc, #40]	; (8008378 <HAL_RCC_ClockConfig+0x24c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 030f 	and.w	r3, r3, #15
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	429a      	cmp	r2, r3
 8008358:	d212      	bcs.n	8008380 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800835a:	4b07      	ldr	r3, [pc, #28]	; (8008378 <HAL_RCC_ClockConfig+0x24c>)
 800835c:	683a      	ldr	r2, [r7, #0]
 800835e:	b2d2      	uxtb	r2, r2
 8008360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008362:	4b05      	ldr	r3, [pc, #20]	; (8008378 <HAL_RCC_ClockConfig+0x24c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 030f 	and.w	r3, r3, #15
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	429a      	cmp	r2, r3
 800836e:	d007      	beq.n	8008380 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e072      	b.n	800845a <HAL_RCC_ClockConfig+0x32e>
 8008374:	0800c79c 	.word	0x0800c79c
 8008378:	40023c00 	.word	0x40023c00
 800837c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 0304 	and.w	r3, r3, #4
 8008388:	2b00      	cmp	r3, #0
 800838a:	d025      	beq.n	80083d8 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d018      	beq.n	80083c6 <HAL_RCC_ClockConfig+0x29a>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800839c:	d013      	beq.n	80083c6 <HAL_RCC_ClockConfig+0x29a>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083a6:	d00e      	beq.n	80083c6 <HAL_RCC_ClockConfig+0x29a>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80083b0:	d009      	beq.n	80083c6 <HAL_RCC_ClockConfig+0x29a>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80083ba:	d004      	beq.n	80083c6 <HAL_RCC_ClockConfig+0x29a>
 80083bc:	f240 21c3 	movw	r1, #707	; 0x2c3
 80083c0:	4828      	ldr	r0, [pc, #160]	; (8008464 <HAL_RCC_ClockConfig+0x338>)
 80083c2:	f7fa feea 	bl	800319a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083c6:	4b28      	ldr	r3, [pc, #160]	; (8008468 <HAL_RCC_ClockConfig+0x33c>)
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	4925      	ldr	r1, [pc, #148]	; (8008468 <HAL_RCC_ClockConfig+0x33c>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0308 	and.w	r3, r3, #8
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d026      	beq.n	8008432 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d018      	beq.n	800841e <HAL_RCC_ClockConfig+0x2f2>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	691b      	ldr	r3, [r3, #16]
 80083f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083f4:	d013      	beq.n	800841e <HAL_RCC_ClockConfig+0x2f2>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083fe:	d00e      	beq.n	800841e <HAL_RCC_ClockConfig+0x2f2>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008408:	d009      	beq.n	800841e <HAL_RCC_ClockConfig+0x2f2>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8008412:	d004      	beq.n	800841e <HAL_RCC_ClockConfig+0x2f2>
 8008414:	f240 21ca 	movw	r1, #714	; 0x2ca
 8008418:	4812      	ldr	r0, [pc, #72]	; (8008464 <HAL_RCC_ClockConfig+0x338>)
 800841a:	f7fa febe 	bl	800319a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800841e:	4b12      	ldr	r3, [pc, #72]	; (8008468 <HAL_RCC_ClockConfig+0x33c>)
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	490e      	ldr	r1, [pc, #56]	; (8008468 <HAL_RCC_ClockConfig+0x33c>)
 800842e:	4313      	orrs	r3, r2
 8008430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008432:	f000 f887 	bl	8008544 <HAL_RCC_GetSysClockFreq>
 8008436:	4602      	mov	r2, r0
 8008438:	4b0b      	ldr	r3, [pc, #44]	; (8008468 <HAL_RCC_ClockConfig+0x33c>)
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	091b      	lsrs	r3, r3, #4
 800843e:	f003 030f 	and.w	r3, r3, #15
 8008442:	490a      	ldr	r1, [pc, #40]	; (800846c <HAL_RCC_ClockConfig+0x340>)
 8008444:	5ccb      	ldrb	r3, [r1, r3]
 8008446:	fa22 f303 	lsr.w	r3, r2, r3
 800844a:	4a09      	ldr	r2, [pc, #36]	; (8008470 <HAL_RCC_ClockConfig+0x344>)
 800844c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800844e:	4b09      	ldr	r3, [pc, #36]	; (8008474 <HAL_RCC_ClockConfig+0x348>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4618      	mov	r0, r3
 8008454:	f7fa ffc4 	bl	80033e0 <HAL_InitTick>

  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	0800c79c 	.word	0x0800c79c
 8008468:	40023800 	.word	0x40023800
 800846c:	0800c888 	.word	0x0800c888
 8008470:	20000040 	.word	0x20000040
 8008474:	20000044 	.word	0x20000044

08008478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008478:	b480      	push	{r7}
 800847a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800847c:	4b03      	ldr	r3, [pc, #12]	; (800848c <HAL_RCC_GetHCLKFreq+0x14>)
 800847e:	681b      	ldr	r3, [r3, #0]
}
 8008480:	4618      	mov	r0, r3
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	20000040 	.word	0x20000040

08008490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008494:	f7ff fff0 	bl	8008478 <HAL_RCC_GetHCLKFreq>
 8008498:	4602      	mov	r2, r0
 800849a:	4b05      	ldr	r3, [pc, #20]	; (80084b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	0a9b      	lsrs	r3, r3, #10
 80084a0:	f003 0307 	and.w	r3, r3, #7
 80084a4:	4903      	ldr	r1, [pc, #12]	; (80084b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80084a6:	5ccb      	ldrb	r3, [r1, r3]
 80084a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	40023800 	.word	0x40023800
 80084b4:	0800c898 	.word	0x0800c898

080084b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80084bc:	f7ff ffdc 	bl	8008478 <HAL_RCC_GetHCLKFreq>
 80084c0:	4602      	mov	r2, r0
 80084c2:	4b05      	ldr	r3, [pc, #20]	; (80084d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	0b5b      	lsrs	r3, r3, #13
 80084c8:	f003 0307 	and.w	r3, r3, #7
 80084cc:	4903      	ldr	r1, [pc, #12]	; (80084dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80084ce:	5ccb      	ldrb	r3, [r1, r3]
 80084d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	40023800 	.word	0x40023800
 80084dc:	0800c898 	.word	0x0800c898

080084e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	220f      	movs	r2, #15
 80084ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80084f0:	4b12      	ldr	r3, [pc, #72]	; (800853c <HAL_RCC_GetClockConfig+0x5c>)
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f003 0203 	and.w	r2, r3, #3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80084fc:	4b0f      	ldr	r3, [pc, #60]	; (800853c <HAL_RCC_GetClockConfig+0x5c>)
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008508:	4b0c      	ldr	r3, [pc, #48]	; (800853c <HAL_RCC_GetClockConfig+0x5c>)
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008514:	4b09      	ldr	r3, [pc, #36]	; (800853c <HAL_RCC_GetClockConfig+0x5c>)
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	08db      	lsrs	r3, r3, #3
 800851a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008522:	4b07      	ldr	r3, [pc, #28]	; (8008540 <HAL_RCC_GetClockConfig+0x60>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 020f 	and.w	r2, r3, #15
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	601a      	str	r2, [r3, #0]
}
 800852e:	bf00      	nop
 8008530:	370c      	adds	r7, #12
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	40023800 	.word	0x40023800
 8008540:	40023c00 	.word	0x40023c00

08008544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008548:	b0ae      	sub	sp, #184	; 0xb8
 800854a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800854c:	2300      	movs	r3, #0
 800854e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8008552:	2300      	movs	r3, #0
 8008554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8008558:	2300      	movs	r3, #0
 800855a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800855e:	2300      	movs	r3, #0
 8008560:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8008564:	2300      	movs	r3, #0
 8008566:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800856a:	4bcb      	ldr	r3, [pc, #812]	; (8008898 <HAL_RCC_GetSysClockFreq+0x354>)
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f003 030c 	and.w	r3, r3, #12
 8008572:	2b0c      	cmp	r3, #12
 8008574:	f200 8206 	bhi.w	8008984 <HAL_RCC_GetSysClockFreq+0x440>
 8008578:	a201      	add	r2, pc, #4	; (adr r2, 8008580 <HAL_RCC_GetSysClockFreq+0x3c>)
 800857a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857e:	bf00      	nop
 8008580:	080085b5 	.word	0x080085b5
 8008584:	08008985 	.word	0x08008985
 8008588:	08008985 	.word	0x08008985
 800858c:	08008985 	.word	0x08008985
 8008590:	080085bd 	.word	0x080085bd
 8008594:	08008985 	.word	0x08008985
 8008598:	08008985 	.word	0x08008985
 800859c:	08008985 	.word	0x08008985
 80085a0:	080085c5 	.word	0x080085c5
 80085a4:	08008985 	.word	0x08008985
 80085a8:	08008985 	.word	0x08008985
 80085ac:	08008985 	.word	0x08008985
 80085b0:	080087b5 	.word	0x080087b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80085b4:	4bb9      	ldr	r3, [pc, #740]	; (800889c <HAL_RCC_GetSysClockFreq+0x358>)
 80085b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80085ba:	e1e7      	b.n	800898c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80085bc:	4bb8      	ldr	r3, [pc, #736]	; (80088a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80085be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80085c2:	e1e3      	b.n	800898c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085c4:	4bb4      	ldr	r3, [pc, #720]	; (8008898 <HAL_RCC_GetSysClockFreq+0x354>)
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80085d0:	4bb1      	ldr	r3, [pc, #708]	; (8008898 <HAL_RCC_GetSysClockFreq+0x354>)
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d071      	beq.n	80086c0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085dc:	4bae      	ldr	r3, [pc, #696]	; (8008898 <HAL_RCC_GetSysClockFreq+0x354>)
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	099b      	lsrs	r3, r3, #6
 80085e2:	2200      	movs	r2, #0
 80085e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80085e8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80085ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80085f8:	2300      	movs	r3, #0
 80085fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80085fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008602:	4622      	mov	r2, r4
 8008604:	462b      	mov	r3, r5
 8008606:	f04f 0000 	mov.w	r0, #0
 800860a:	f04f 0100 	mov.w	r1, #0
 800860e:	0159      	lsls	r1, r3, #5
 8008610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008614:	0150      	lsls	r0, r2, #5
 8008616:	4602      	mov	r2, r0
 8008618:	460b      	mov	r3, r1
 800861a:	4621      	mov	r1, r4
 800861c:	1a51      	subs	r1, r2, r1
 800861e:	6439      	str	r1, [r7, #64]	; 0x40
 8008620:	4629      	mov	r1, r5
 8008622:	eb63 0301 	sbc.w	r3, r3, r1
 8008626:	647b      	str	r3, [r7, #68]	; 0x44
 8008628:	f04f 0200 	mov.w	r2, #0
 800862c:	f04f 0300 	mov.w	r3, #0
 8008630:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8008634:	4649      	mov	r1, r9
 8008636:	018b      	lsls	r3, r1, #6
 8008638:	4641      	mov	r1, r8
 800863a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800863e:	4641      	mov	r1, r8
 8008640:	018a      	lsls	r2, r1, #6
 8008642:	4641      	mov	r1, r8
 8008644:	1a51      	subs	r1, r2, r1
 8008646:	63b9      	str	r1, [r7, #56]	; 0x38
 8008648:	4649      	mov	r1, r9
 800864a:	eb63 0301 	sbc.w	r3, r3, r1
 800864e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008650:	f04f 0200 	mov.w	r2, #0
 8008654:	f04f 0300 	mov.w	r3, #0
 8008658:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800865c:	4649      	mov	r1, r9
 800865e:	00cb      	lsls	r3, r1, #3
 8008660:	4641      	mov	r1, r8
 8008662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008666:	4641      	mov	r1, r8
 8008668:	00ca      	lsls	r2, r1, #3
 800866a:	4610      	mov	r0, r2
 800866c:	4619      	mov	r1, r3
 800866e:	4603      	mov	r3, r0
 8008670:	4622      	mov	r2, r4
 8008672:	189b      	adds	r3, r3, r2
 8008674:	633b      	str	r3, [r7, #48]	; 0x30
 8008676:	462b      	mov	r3, r5
 8008678:	460a      	mov	r2, r1
 800867a:	eb42 0303 	adc.w	r3, r2, r3
 800867e:	637b      	str	r3, [r7, #52]	; 0x34
 8008680:	f04f 0200 	mov.w	r2, #0
 8008684:	f04f 0300 	mov.w	r3, #0
 8008688:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800868c:	4629      	mov	r1, r5
 800868e:	024b      	lsls	r3, r1, #9
 8008690:	4621      	mov	r1, r4
 8008692:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008696:	4621      	mov	r1, r4
 8008698:	024a      	lsls	r2, r1, #9
 800869a:	4610      	mov	r0, r2
 800869c:	4619      	mov	r1, r3
 800869e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086a2:	2200      	movs	r2, #0
 80086a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80086a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80086ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80086b0:	f7f8 f9cc 	bl	8000a4c <__aeabi_uldivmod>
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	4613      	mov	r3, r2
 80086ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086be:	e067      	b.n	8008790 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086c0:	4b75      	ldr	r3, [pc, #468]	; (8008898 <HAL_RCC_GetSysClockFreq+0x354>)
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	099b      	lsrs	r3, r3, #6
 80086c6:	2200      	movs	r2, #0
 80086c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80086cc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80086d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80086d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80086da:	2300      	movs	r3, #0
 80086dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80086de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80086e2:	4622      	mov	r2, r4
 80086e4:	462b      	mov	r3, r5
 80086e6:	f04f 0000 	mov.w	r0, #0
 80086ea:	f04f 0100 	mov.w	r1, #0
 80086ee:	0159      	lsls	r1, r3, #5
 80086f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80086f4:	0150      	lsls	r0, r2, #5
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	4621      	mov	r1, r4
 80086fc:	1a51      	subs	r1, r2, r1
 80086fe:	62b9      	str	r1, [r7, #40]	; 0x28
 8008700:	4629      	mov	r1, r5
 8008702:	eb63 0301 	sbc.w	r3, r3, r1
 8008706:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008708:	f04f 0200 	mov.w	r2, #0
 800870c:	f04f 0300 	mov.w	r3, #0
 8008710:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8008714:	4649      	mov	r1, r9
 8008716:	018b      	lsls	r3, r1, #6
 8008718:	4641      	mov	r1, r8
 800871a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800871e:	4641      	mov	r1, r8
 8008720:	018a      	lsls	r2, r1, #6
 8008722:	4641      	mov	r1, r8
 8008724:	ebb2 0a01 	subs.w	sl, r2, r1
 8008728:	4649      	mov	r1, r9
 800872a:	eb63 0b01 	sbc.w	fp, r3, r1
 800872e:	f04f 0200 	mov.w	r2, #0
 8008732:	f04f 0300 	mov.w	r3, #0
 8008736:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800873a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800873e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008742:	4692      	mov	sl, r2
 8008744:	469b      	mov	fp, r3
 8008746:	4623      	mov	r3, r4
 8008748:	eb1a 0303 	adds.w	r3, sl, r3
 800874c:	623b      	str	r3, [r7, #32]
 800874e:	462b      	mov	r3, r5
 8008750:	eb4b 0303 	adc.w	r3, fp, r3
 8008754:	627b      	str	r3, [r7, #36]	; 0x24
 8008756:	f04f 0200 	mov.w	r2, #0
 800875a:	f04f 0300 	mov.w	r3, #0
 800875e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008762:	4629      	mov	r1, r5
 8008764:	028b      	lsls	r3, r1, #10
 8008766:	4621      	mov	r1, r4
 8008768:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800876c:	4621      	mov	r1, r4
 800876e:	028a      	lsls	r2, r1, #10
 8008770:	4610      	mov	r0, r2
 8008772:	4619      	mov	r1, r3
 8008774:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008778:	2200      	movs	r2, #0
 800877a:	673b      	str	r3, [r7, #112]	; 0x70
 800877c:	677a      	str	r2, [r7, #116]	; 0x74
 800877e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008782:	f7f8 f963 	bl	8000a4c <__aeabi_uldivmod>
 8008786:	4602      	mov	r2, r0
 8008788:	460b      	mov	r3, r1
 800878a:	4613      	mov	r3, r2
 800878c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008790:	4b41      	ldr	r3, [pc, #260]	; (8008898 <HAL_RCC_GetSysClockFreq+0x354>)
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	0c1b      	lsrs	r3, r3, #16
 8008796:	f003 0303 	and.w	r3, r3, #3
 800879a:	3301      	adds	r3, #1
 800879c:	005b      	lsls	r3, r3, #1
 800879e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80087a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80087a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80087aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80087b2:	e0eb      	b.n	800898c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80087b4:	4b38      	ldr	r3, [pc, #224]	; (8008898 <HAL_RCC_GetSysClockFreq+0x354>)
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80087c0:	4b35      	ldr	r3, [pc, #212]	; (8008898 <HAL_RCC_GetSysClockFreq+0x354>)
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d06b      	beq.n	80088a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087cc:	4b32      	ldr	r3, [pc, #200]	; (8008898 <HAL_RCC_GetSysClockFreq+0x354>)
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	099b      	lsrs	r3, r3, #6
 80087d2:	2200      	movs	r2, #0
 80087d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80087d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80087d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087de:	663b      	str	r3, [r7, #96]	; 0x60
 80087e0:	2300      	movs	r3, #0
 80087e2:	667b      	str	r3, [r7, #100]	; 0x64
 80087e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80087e8:	4622      	mov	r2, r4
 80087ea:	462b      	mov	r3, r5
 80087ec:	f04f 0000 	mov.w	r0, #0
 80087f0:	f04f 0100 	mov.w	r1, #0
 80087f4:	0159      	lsls	r1, r3, #5
 80087f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80087fa:	0150      	lsls	r0, r2, #5
 80087fc:	4602      	mov	r2, r0
 80087fe:	460b      	mov	r3, r1
 8008800:	4621      	mov	r1, r4
 8008802:	1a51      	subs	r1, r2, r1
 8008804:	61b9      	str	r1, [r7, #24]
 8008806:	4629      	mov	r1, r5
 8008808:	eb63 0301 	sbc.w	r3, r3, r1
 800880c:	61fb      	str	r3, [r7, #28]
 800880e:	f04f 0200 	mov.w	r2, #0
 8008812:	f04f 0300 	mov.w	r3, #0
 8008816:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800881a:	4659      	mov	r1, fp
 800881c:	018b      	lsls	r3, r1, #6
 800881e:	4651      	mov	r1, sl
 8008820:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008824:	4651      	mov	r1, sl
 8008826:	018a      	lsls	r2, r1, #6
 8008828:	4651      	mov	r1, sl
 800882a:	ebb2 0801 	subs.w	r8, r2, r1
 800882e:	4659      	mov	r1, fp
 8008830:	eb63 0901 	sbc.w	r9, r3, r1
 8008834:	f04f 0200 	mov.w	r2, #0
 8008838:	f04f 0300 	mov.w	r3, #0
 800883c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008840:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008844:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008848:	4690      	mov	r8, r2
 800884a:	4699      	mov	r9, r3
 800884c:	4623      	mov	r3, r4
 800884e:	eb18 0303 	adds.w	r3, r8, r3
 8008852:	613b      	str	r3, [r7, #16]
 8008854:	462b      	mov	r3, r5
 8008856:	eb49 0303 	adc.w	r3, r9, r3
 800885a:	617b      	str	r3, [r7, #20]
 800885c:	f04f 0200 	mov.w	r2, #0
 8008860:	f04f 0300 	mov.w	r3, #0
 8008864:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008868:	4629      	mov	r1, r5
 800886a:	024b      	lsls	r3, r1, #9
 800886c:	4621      	mov	r1, r4
 800886e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008872:	4621      	mov	r1, r4
 8008874:	024a      	lsls	r2, r1, #9
 8008876:	4610      	mov	r0, r2
 8008878:	4619      	mov	r1, r3
 800887a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800887e:	2200      	movs	r2, #0
 8008880:	65bb      	str	r3, [r7, #88]	; 0x58
 8008882:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008884:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008888:	f7f8 f8e0 	bl	8000a4c <__aeabi_uldivmod>
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	4613      	mov	r3, r2
 8008892:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008896:	e065      	b.n	8008964 <HAL_RCC_GetSysClockFreq+0x420>
 8008898:	40023800 	.word	0x40023800
 800889c:	00f42400 	.word	0x00f42400
 80088a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80088a4:	4b3d      	ldr	r3, [pc, #244]	; (800899c <HAL_RCC_GetSysClockFreq+0x458>)
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	099b      	lsrs	r3, r3, #6
 80088aa:	2200      	movs	r2, #0
 80088ac:	4618      	mov	r0, r3
 80088ae:	4611      	mov	r1, r2
 80088b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80088b4:	653b      	str	r3, [r7, #80]	; 0x50
 80088b6:	2300      	movs	r3, #0
 80088b8:	657b      	str	r3, [r7, #84]	; 0x54
 80088ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80088be:	4642      	mov	r2, r8
 80088c0:	464b      	mov	r3, r9
 80088c2:	f04f 0000 	mov.w	r0, #0
 80088c6:	f04f 0100 	mov.w	r1, #0
 80088ca:	0159      	lsls	r1, r3, #5
 80088cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80088d0:	0150      	lsls	r0, r2, #5
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	4641      	mov	r1, r8
 80088d8:	1a51      	subs	r1, r2, r1
 80088da:	60b9      	str	r1, [r7, #8]
 80088dc:	4649      	mov	r1, r9
 80088de:	eb63 0301 	sbc.w	r3, r3, r1
 80088e2:	60fb      	str	r3, [r7, #12]
 80088e4:	f04f 0200 	mov.w	r2, #0
 80088e8:	f04f 0300 	mov.w	r3, #0
 80088ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80088f0:	4659      	mov	r1, fp
 80088f2:	018b      	lsls	r3, r1, #6
 80088f4:	4651      	mov	r1, sl
 80088f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80088fa:	4651      	mov	r1, sl
 80088fc:	018a      	lsls	r2, r1, #6
 80088fe:	4651      	mov	r1, sl
 8008900:	1a54      	subs	r4, r2, r1
 8008902:	4659      	mov	r1, fp
 8008904:	eb63 0501 	sbc.w	r5, r3, r1
 8008908:	f04f 0200 	mov.w	r2, #0
 800890c:	f04f 0300 	mov.w	r3, #0
 8008910:	00eb      	lsls	r3, r5, #3
 8008912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008916:	00e2      	lsls	r2, r4, #3
 8008918:	4614      	mov	r4, r2
 800891a:	461d      	mov	r5, r3
 800891c:	4643      	mov	r3, r8
 800891e:	18e3      	adds	r3, r4, r3
 8008920:	603b      	str	r3, [r7, #0]
 8008922:	464b      	mov	r3, r9
 8008924:	eb45 0303 	adc.w	r3, r5, r3
 8008928:	607b      	str	r3, [r7, #4]
 800892a:	f04f 0200 	mov.w	r2, #0
 800892e:	f04f 0300 	mov.w	r3, #0
 8008932:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008936:	4629      	mov	r1, r5
 8008938:	028b      	lsls	r3, r1, #10
 800893a:	4621      	mov	r1, r4
 800893c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008940:	4621      	mov	r1, r4
 8008942:	028a      	lsls	r2, r1, #10
 8008944:	4610      	mov	r0, r2
 8008946:	4619      	mov	r1, r3
 8008948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800894c:	2200      	movs	r2, #0
 800894e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008950:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008952:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008956:	f7f8 f879 	bl	8000a4c <__aeabi_uldivmod>
 800895a:	4602      	mov	r2, r0
 800895c:	460b      	mov	r3, r1
 800895e:	4613      	mov	r3, r2
 8008960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008964:	4b0d      	ldr	r3, [pc, #52]	; (800899c <HAL_RCC_GetSysClockFreq+0x458>)
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	0f1b      	lsrs	r3, r3, #28
 800896a:	f003 0307 	and.w	r3, r3, #7
 800896e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8008972:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008976:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800897a:	fbb2 f3f3 	udiv	r3, r2, r3
 800897e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008982:	e003      	b.n	800898c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008984:	4b06      	ldr	r3, [pc, #24]	; (80089a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8008986:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800898a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800898c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8008990:	4618      	mov	r0, r3
 8008992:	37b8      	adds	r7, #184	; 0xb8
 8008994:	46bd      	mov	sp, r7
 8008996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800899a:	bf00      	nop
 800899c:	40023800 	.word	0x40023800
 80089a0:	00f42400 	.word	0x00f42400

080089a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b086      	sub	sp, #24
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e347      	b.n	8009046 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b0f      	cmp	r3, #15
 80089bc:	d904      	bls.n	80089c8 <HAL_RCC_OscConfig+0x24>
 80089be:	f44f 6151 	mov.w	r1, #3344	; 0xd10
 80089c2:	4893      	ldr	r0, [pc, #588]	; (8008c10 <HAL_RCC_OscConfig+0x26c>)
 80089c4:	f7fa fbe9 	bl	800319a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 0301 	and.w	r3, r3, #1
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f000 8096 	beq.w	8008b02 <HAL_RCC_OscConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00e      	beq.n	80089fc <HAL_RCC_OscConfig+0x58>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089e6:	d009      	beq.n	80089fc <HAL_RCC_OscConfig+0x58>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80089f0:	d004      	beq.n	80089fc <HAL_RCC_OscConfig+0x58>
 80089f2:	f640 5115 	movw	r1, #3349	; 0xd15
 80089f6:	4886      	ldr	r0, [pc, #536]	; (8008c10 <HAL_RCC_OscConfig+0x26c>)
 80089f8:	f7fa fbcf 	bl	800319a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80089fc:	4b85      	ldr	r3, [pc, #532]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f003 030c 	and.w	r3, r3, #12
 8008a04:	2b04      	cmp	r3, #4
 8008a06:	d019      	beq.n	8008a3c <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008a08:	4b82      	ldr	r3, [pc, #520]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008a10:	2b08      	cmp	r3, #8
 8008a12:	d106      	bne.n	8008a22 <HAL_RCC_OscConfig+0x7e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008a14:	4b7f      	ldr	r3, [pc, #508]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a20:	d00c      	beq.n	8008a3c <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a22:	4b7c      	ldr	r3, [pc, #496]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008a2a:	2b0c      	cmp	r3, #12
 8008a2c:	d112      	bne.n	8008a54 <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a2e:	4b79      	ldr	r3, [pc, #484]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a3a:	d10b      	bne.n	8008a54 <HAL_RCC_OscConfig+0xb0>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a3c:	4b75      	ldr	r3, [pc, #468]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d05b      	beq.n	8008b00 <HAL_RCC_OscConfig+0x15c>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d157      	bne.n	8008b00 <HAL_RCC_OscConfig+0x15c>
      {
        return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e2f8      	b.n	8009046 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a5c:	d106      	bne.n	8008a6c <HAL_RCC_OscConfig+0xc8>
 8008a5e:	4b6d      	ldr	r3, [pc, #436]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a6c      	ldr	r2, [pc, #432]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a68:	6013      	str	r3, [r2, #0]
 8008a6a:	e01d      	b.n	8008aa8 <HAL_RCC_OscConfig+0x104>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a74:	d10c      	bne.n	8008a90 <HAL_RCC_OscConfig+0xec>
 8008a76:	4b67      	ldr	r3, [pc, #412]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a66      	ldr	r2, [pc, #408]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a80:	6013      	str	r3, [r2, #0]
 8008a82:	4b64      	ldr	r3, [pc, #400]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a63      	ldr	r2, [pc, #396]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a8c:	6013      	str	r3, [r2, #0]
 8008a8e:	e00b      	b.n	8008aa8 <HAL_RCC_OscConfig+0x104>
 8008a90:	4b60      	ldr	r3, [pc, #384]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a5f      	ldr	r2, [pc, #380]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a9a:	6013      	str	r3, [r2, #0]
 8008a9c:	4b5d      	ldr	r3, [pc, #372]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a5c      	ldr	r2, [pc, #368]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d013      	beq.n	8008ad8 <HAL_RCC_OscConfig+0x134>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ab0:	f7fa fe96 	bl	80037e0 <HAL_GetTick>
 8008ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ab6:	e008      	b.n	8008aca <HAL_RCC_OscConfig+0x126>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ab8:	f7fa fe92 	bl	80037e0 <HAL_GetTick>
 8008abc:	4602      	mov	r2, r0
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	1ad3      	subs	r3, r2, r3
 8008ac2:	2b64      	cmp	r3, #100	; 0x64
 8008ac4:	d901      	bls.n	8008aca <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8008ac6:	2303      	movs	r3, #3
 8008ac8:	e2bd      	b.n	8009046 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008aca:	4b52      	ldr	r3, [pc, #328]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d0f0      	beq.n	8008ab8 <HAL_RCC_OscConfig+0x114>
 8008ad6:	e014      	b.n	8008b02 <HAL_RCC_OscConfig+0x15e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ad8:	f7fa fe82 	bl	80037e0 <HAL_GetTick>
 8008adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ade:	e008      	b.n	8008af2 <HAL_RCC_OscConfig+0x14e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ae0:	f7fa fe7e 	bl	80037e0 <HAL_GetTick>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	2b64      	cmp	r3, #100	; 0x64
 8008aec:	d901      	bls.n	8008af2 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8008aee:	2303      	movs	r3, #3
 8008af0:	e2a9      	b.n	8009046 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008af2:	4b48      	ldr	r3, [pc, #288]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1f0      	bne.n	8008ae0 <HAL_RCC_OscConfig+0x13c>
 8008afe:	e000      	b.n	8008b02 <HAL_RCC_OscConfig+0x15e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 0302 	and.w	r3, r3, #2
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 808c 	beq.w	8008c28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d008      	beq.n	8008b2a <HAL_RCC_OscConfig+0x186>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d004      	beq.n	8008b2a <HAL_RCC_OscConfig+0x186>
 8008b20:	f640 514d 	movw	r1, #3405	; 0xd4d
 8008b24:	483a      	ldr	r0, [pc, #232]	; (8008c10 <HAL_RCC_OscConfig+0x26c>)
 8008b26:	f7fa fb38 	bl	800319a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	2b1f      	cmp	r3, #31
 8008b30:	d904      	bls.n	8008b3c <HAL_RCC_OscConfig+0x198>
 8008b32:	f640 514e 	movw	r1, #3406	; 0xd4e
 8008b36:	4836      	ldr	r0, [pc, #216]	; (8008c10 <HAL_RCC_OscConfig+0x26c>)
 8008b38:	f7fa fb2f 	bl	800319a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008b3c:	4b35      	ldr	r3, [pc, #212]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f003 030c 	and.w	r3, r3, #12
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d017      	beq.n	8008b78 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008b48:	4b32      	ldr	r3, [pc, #200]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008b50:	2b08      	cmp	r3, #8
 8008b52:	d105      	bne.n	8008b60 <HAL_RCC_OscConfig+0x1bc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008b54:	4b2f      	ldr	r3, [pc, #188]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00b      	beq.n	8008b78 <HAL_RCC_OscConfig+0x1d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b60:	4b2c      	ldr	r3, [pc, #176]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008b68:	2b0c      	cmp	r3, #12
 8008b6a:	d11c      	bne.n	8008ba6 <HAL_RCC_OscConfig+0x202>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b6c:	4b29      	ldr	r3, [pc, #164]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d116      	bne.n	8008ba6 <HAL_RCC_OscConfig+0x202>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b78:	4b26      	ldr	r3, [pc, #152]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0302 	and.w	r3, r3, #2
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d005      	beq.n	8008b90 <HAL_RCC_OscConfig+0x1ec>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d001      	beq.n	8008b90 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e25a      	b.n	8009046 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b90:	4b20      	ldr	r3, [pc, #128]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	00db      	lsls	r3, r3, #3
 8008b9e:	491d      	ldr	r1, [pc, #116]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ba4:	e040      	b.n	8008c28 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d020      	beq.n	8008bf0 <HAL_RCC_OscConfig+0x24c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008bae:	4b1a      	ldr	r3, [pc, #104]	; (8008c18 <HAL_RCC_OscConfig+0x274>)
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bb4:	f7fa fe14 	bl	80037e0 <HAL_GetTick>
 8008bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bba:	e008      	b.n	8008bce <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008bbc:	f7fa fe10 	bl	80037e0 <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d901      	bls.n	8008bce <HAL_RCC_OscConfig+0x22a>
          {
            return HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	e23b      	b.n	8009046 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bce:	4b11      	ldr	r3, [pc, #68]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0302 	and.w	r3, r3, #2
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d0f0      	beq.n	8008bbc <HAL_RCC_OscConfig+0x218>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bda:	4b0e      	ldr	r3, [pc, #56]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	00db      	lsls	r3, r3, #3
 8008be8:	490a      	ldr	r1, [pc, #40]	; (8008c14 <HAL_RCC_OscConfig+0x270>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	600b      	str	r3, [r1, #0]
 8008bee:	e01b      	b.n	8008c28 <HAL_RCC_OscConfig+0x284>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008bf0:	4b09      	ldr	r3, [pc, #36]	; (8008c18 <HAL_RCC_OscConfig+0x274>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bf6:	f7fa fdf3 	bl	80037e0 <HAL_GetTick>
 8008bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bfc:	e00e      	b.n	8008c1c <HAL_RCC_OscConfig+0x278>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008bfe:	f7fa fdef 	bl	80037e0 <HAL_GetTick>
 8008c02:	4602      	mov	r2, r0
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	d907      	bls.n	8008c1c <HAL_RCC_OscConfig+0x278>
          {
            return HAL_TIMEOUT;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e21a      	b.n	8009046 <HAL_RCC_OscConfig+0x6a2>
 8008c10:	0800c7d4 	.word	0x0800c7d4
 8008c14:	40023800 	.word	0x40023800
 8008c18:	42470000 	.word	0x42470000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c1c:	4b74      	ldr	r3, [pc, #464]	; (8008df0 <HAL_RCC_OscConfig+0x44c>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1ea      	bne.n	8008bfe <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0308 	and.w	r3, r3, #8
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d03d      	beq.n	8008cb0 <HAL_RCC_OscConfig+0x30c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	695b      	ldr	r3, [r3, #20]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d008      	beq.n	8008c4e <HAL_RCC_OscConfig+0x2aa>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	695b      	ldr	r3, [r3, #20]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d004      	beq.n	8008c4e <HAL_RCC_OscConfig+0x2aa>
 8008c44:	f640 5194 	movw	r1, #3476	; 0xd94
 8008c48:	486a      	ldr	r0, [pc, #424]	; (8008df4 <HAL_RCC_OscConfig+0x450>)
 8008c4a:	f7fa faa6 	bl	800319a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	695b      	ldr	r3, [r3, #20]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d016      	beq.n	8008c84 <HAL_RCC_OscConfig+0x2e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c56:	4b68      	ldr	r3, [pc, #416]	; (8008df8 <HAL_RCC_OscConfig+0x454>)
 8008c58:	2201      	movs	r2, #1
 8008c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c5c:	f7fa fdc0 	bl	80037e0 <HAL_GetTick>
 8008c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c62:	e008      	b.n	8008c76 <HAL_RCC_OscConfig+0x2d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c64:	f7fa fdbc 	bl	80037e0 <HAL_GetTick>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d901      	bls.n	8008c76 <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e1e7      	b.n	8009046 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c76:	4b5e      	ldr	r3, [pc, #376]	; (8008df0 <HAL_RCC_OscConfig+0x44c>)
 8008c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c7a:	f003 0302 	and.w	r3, r3, #2
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d0f0      	beq.n	8008c64 <HAL_RCC_OscConfig+0x2c0>
 8008c82:	e015      	b.n	8008cb0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c84:	4b5c      	ldr	r3, [pc, #368]	; (8008df8 <HAL_RCC_OscConfig+0x454>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c8a:	f7fa fda9 	bl	80037e0 <HAL_GetTick>
 8008c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c90:	e008      	b.n	8008ca4 <HAL_RCC_OscConfig+0x300>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008c92:	f7fa fda5 	bl	80037e0 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d901      	bls.n	8008ca4 <HAL_RCC_OscConfig+0x300>
        {
          return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e1d0      	b.n	8009046 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ca4:	4b52      	ldr	r3, [pc, #328]	; (8008df0 <HAL_RCC_OscConfig+0x44c>)
 8008ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1f0      	bne.n	8008c92 <HAL_RCC_OscConfig+0x2ee>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 0304 	and.w	r3, r3, #4
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 80b0 	beq.w	8008e1e <HAL_RCC_OscConfig+0x47a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00c      	beq.n	8008ce4 <HAL_RCC_OscConfig+0x340>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d008      	beq.n	8008ce4 <HAL_RCC_OscConfig+0x340>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	2b05      	cmp	r3, #5
 8008cd8:	d004      	beq.n	8008ce4 <HAL_RCC_OscConfig+0x340>
 8008cda:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8008cde:	4845      	ldr	r0, [pc, #276]	; (8008df4 <HAL_RCC_OscConfig+0x450>)
 8008ce0:	f7fa fa5b 	bl	800319a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ce4:	4b42      	ldr	r3, [pc, #264]	; (8008df0 <HAL_RCC_OscConfig+0x44c>)
 8008ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d10f      	bne.n	8008d10 <HAL_RCC_OscConfig+0x36c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	60bb      	str	r3, [r7, #8]
 8008cf4:	4b3e      	ldr	r3, [pc, #248]	; (8008df0 <HAL_RCC_OscConfig+0x44c>)
 8008cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf8:	4a3d      	ldr	r2, [pc, #244]	; (8008df0 <HAL_RCC_OscConfig+0x44c>)
 8008cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8008d00:	4b3b      	ldr	r3, [pc, #236]	; (8008df0 <HAL_RCC_OscConfig+0x44c>)
 8008d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d08:	60bb      	str	r3, [r7, #8]
 8008d0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d10:	4b3a      	ldr	r3, [pc, #232]	; (8008dfc <HAL_RCC_OscConfig+0x458>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d118      	bne.n	8008d4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d1c:	4b37      	ldr	r3, [pc, #220]	; (8008dfc <HAL_RCC_OscConfig+0x458>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a36      	ldr	r2, [pc, #216]	; (8008dfc <HAL_RCC_OscConfig+0x458>)
 8008d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d28:	f7fa fd5a 	bl	80037e0 <HAL_GetTick>
 8008d2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d2e:	e008      	b.n	8008d42 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d30:	f7fa fd56 	bl	80037e0 <HAL_GetTick>
 8008d34:	4602      	mov	r2, r0
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d901      	bls.n	8008d42 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e181      	b.n	8009046 <HAL_RCC_OscConfig+0x6a2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d42:	4b2e      	ldr	r3, [pc, #184]	; (8008dfc <HAL_RCC_OscConfig+0x458>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d0f0      	beq.n	8008d30 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d106      	bne.n	8008d64 <HAL_RCC_OscConfig+0x3c0>
 8008d56:	4b26      	ldr	r3, [pc, #152]	; (8008df0 <HAL_RCC_OscConfig+0x44c>)
 8008d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d5a:	4a25      	ldr	r2, [pc, #148]	; (8008df0 <HAL_RCC_OscConfig+0x44c>)
 8008d5c:	f043 0301 	orr.w	r3, r3, #1
 8008d60:	6713      	str	r3, [r2, #112]	; 0x70
 8008d62:	e01c      	b.n	8008d9e <HAL_RCC_OscConfig+0x3fa>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	2b05      	cmp	r3, #5
 8008d6a:	d10c      	bne.n	8008d86 <HAL_RCC_OscConfig+0x3e2>
 8008d6c:	4b20      	ldr	r3, [pc, #128]	; (8008df0 <HAL_RCC_OscConfig+0x44c>)
 8008d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d70:	4a1f      	ldr	r2, [pc, #124]	; (8008df0 <HAL_RCC_OscConfig+0x44c>)
 8008d72:	f043 0304 	orr.w	r3, r3, #4
 8008d76:	6713      	str	r3, [r2, #112]	; 0x70
 8008d78:	4b1d      	ldr	r3, [pc, #116]	; (8008df0 <HAL_RCC_OscConfig+0x44c>)
 8008d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d7c:	4a1c      	ldr	r2, [pc, #112]	; (8008df0 <HAL_RCC_OscConfig+0x44c>)
 8008d7e:	f043 0301 	orr.w	r3, r3, #1
 8008d82:	6713      	str	r3, [r2, #112]	; 0x70
 8008d84:	e00b      	b.n	8008d9e <HAL_RCC_OscConfig+0x3fa>
 8008d86:	4b1a      	ldr	r3, [pc, #104]	; (8008df0 <HAL_RCC_OscConfig+0x44c>)
 8008d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d8a:	4a19      	ldr	r2, [pc, #100]	; (8008df0 <HAL_RCC_OscConfig+0x44c>)
 8008d8c:	f023 0301 	bic.w	r3, r3, #1
 8008d90:	6713      	str	r3, [r2, #112]	; 0x70
 8008d92:	4b17      	ldr	r3, [pc, #92]	; (8008df0 <HAL_RCC_OscConfig+0x44c>)
 8008d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d96:	4a16      	ldr	r2, [pc, #88]	; (8008df0 <HAL_RCC_OscConfig+0x44c>)
 8008d98:	f023 0304 	bic.w	r3, r3, #4
 8008d9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d015      	beq.n	8008dd2 <HAL_RCC_OscConfig+0x42e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008da6:	f7fa fd1b 	bl	80037e0 <HAL_GetTick>
 8008daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dac:	e00a      	b.n	8008dc4 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008dae:	f7fa fd17 	bl	80037e0 <HAL_GetTick>
 8008db2:	4602      	mov	r2, r0
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d901      	bls.n	8008dc4 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	e140      	b.n	8009046 <HAL_RCC_OscConfig+0x6a2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dc4:	4b0a      	ldr	r3, [pc, #40]	; (8008df0 <HAL_RCC_OscConfig+0x44c>)
 8008dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc8:	f003 0302 	and.w	r3, r3, #2
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d0ee      	beq.n	8008dae <HAL_RCC_OscConfig+0x40a>
 8008dd0:	e01c      	b.n	8008e0c <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dd2:	f7fa fd05 	bl	80037e0 <HAL_GetTick>
 8008dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dd8:	e012      	b.n	8008e00 <HAL_RCC_OscConfig+0x45c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008dda:	f7fa fd01 	bl	80037e0 <HAL_GetTick>
 8008dde:	4602      	mov	r2, r0
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d909      	bls.n	8008e00 <HAL_RCC_OscConfig+0x45c>
        {
          return HAL_TIMEOUT;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e12a      	b.n	8009046 <HAL_RCC_OscConfig+0x6a2>
 8008df0:	40023800 	.word	0x40023800
 8008df4:	0800c7d4 	.word	0x0800c7d4
 8008df8:	42470e80 	.word	0x42470e80
 8008dfc:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e00:	4b93      	ldr	r3, [pc, #588]	; (8009050 <HAL_RCC_OscConfig+0x6ac>)
 8008e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e04:	f003 0302 	and.w	r3, r3, #2
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1e6      	bne.n	8008dda <HAL_RCC_OscConfig+0x436>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008e0c:	7dfb      	ldrb	r3, [r7, #23]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d105      	bne.n	8008e1e <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e12:	4b8f      	ldr	r3, [pc, #572]	; (8009050 <HAL_RCC_OscConfig+0x6ac>)
 8008e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e16:	4a8e      	ldr	r2, [pc, #568]	; (8009050 <HAL_RCC_OscConfig+0x6ac>)
 8008e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00c      	beq.n	8008e40 <HAL_RCC_OscConfig+0x49c>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d008      	beq.n	8008e40 <HAL_RCC_OscConfig+0x49c>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d004      	beq.n	8008e40 <HAL_RCC_OscConfig+0x49c>
 8008e36:	f640 6103 	movw	r1, #3587	; 0xe03
 8008e3a:	4886      	ldr	r0, [pc, #536]	; (8009054 <HAL_RCC_OscConfig+0x6b0>)
 8008e3c:	f7fa f9ad 	bl	800319a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 80fd 	beq.w	8009044 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008e4a:	4b81      	ldr	r3, [pc, #516]	; (8009050 <HAL_RCC_OscConfig+0x6ac>)
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	f003 030c 	and.w	r3, r3, #12
 8008e52:	2b08      	cmp	r3, #8
 8008e54:	f000 80b6 	beq.w	8008fc4 <HAL_RCC_OscConfig+0x620>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	f040 809a 	bne.w	8008f96 <HAL_RCC_OscConfig+0x5f2>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	69db      	ldr	r3, [r3, #28]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d009      	beq.n	8008e7e <HAL_RCC_OscConfig+0x4da>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	69db      	ldr	r3, [r3, #28]
 8008e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e72:	d004      	beq.n	8008e7e <HAL_RCC_OscConfig+0x4da>
 8008e74:	f640 610c 	movw	r1, #3596	; 0xe0c
 8008e78:	4876      	ldr	r0, [pc, #472]	; (8009054 <HAL_RCC_OscConfig+0x6b0>)
 8008e7a:	f7fa f98e 	bl	800319a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	2b3f      	cmp	r3, #63	; 0x3f
 8008e84:	d904      	bls.n	8008e90 <HAL_RCC_OscConfig+0x4ec>
 8008e86:	f640 610d 	movw	r1, #3597	; 0xe0d
 8008e8a:	4872      	ldr	r0, [pc, #456]	; (8009054 <HAL_RCC_OscConfig+0x6b0>)
 8008e8c:	f7fa f985 	bl	800319a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e94:	2b31      	cmp	r3, #49	; 0x31
 8008e96:	d904      	bls.n	8008ea2 <HAL_RCC_OscConfig+0x4fe>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8008ea0:	d904      	bls.n	8008eac <HAL_RCC_OscConfig+0x508>
 8008ea2:	f640 610e 	movw	r1, #3598	; 0xe0e
 8008ea6:	486b      	ldr	r0, [pc, #428]	; (8009054 <HAL_RCC_OscConfig+0x6b0>)
 8008ea8:	f7fa f977 	bl	800319a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d010      	beq.n	8008ed6 <HAL_RCC_OscConfig+0x532>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb8:	2b04      	cmp	r3, #4
 8008eba:	d00c      	beq.n	8008ed6 <HAL_RCC_OscConfig+0x532>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec0:	2b06      	cmp	r3, #6
 8008ec2:	d008      	beq.n	8008ed6 <HAL_RCC_OscConfig+0x532>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec8:	2b08      	cmp	r3, #8
 8008eca:	d004      	beq.n	8008ed6 <HAL_RCC_OscConfig+0x532>
 8008ecc:	f640 610f 	movw	r1, #3599	; 0xe0f
 8008ed0:	4860      	ldr	r0, [pc, #384]	; (8009054 <HAL_RCC_OscConfig+0x6b0>)
 8008ed2:	f7fa f962 	bl	800319a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d903      	bls.n	8008ee6 <HAL_RCC_OscConfig+0x542>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee2:	2b0f      	cmp	r3, #15
 8008ee4:	d904      	bls.n	8008ef0 <HAL_RCC_OscConfig+0x54c>
 8008ee6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008eea:	485a      	ldr	r0, [pc, #360]	; (8009054 <HAL_RCC_OscConfig+0x6b0>)
 8008eec:	f7fa f955 	bl	800319a <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d903      	bls.n	8008f00 <HAL_RCC_OscConfig+0x55c>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efc:	2b07      	cmp	r3, #7
 8008efe:	d904      	bls.n	8008f0a <HAL_RCC_OscConfig+0x566>
 8008f00:	f640 6111 	movw	r1, #3601	; 0xe11
 8008f04:	4853      	ldr	r0, [pc, #332]	; (8009054 <HAL_RCC_OscConfig+0x6b0>)
 8008f06:	f7fa f948 	bl	800319a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f0a:	4b53      	ldr	r3, [pc, #332]	; (8009058 <HAL_RCC_OscConfig+0x6b4>)
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f10:	f7fa fc66 	bl	80037e0 <HAL_GetTick>
 8008f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f16:	e008      	b.n	8008f2a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f18:	f7fa fc62 	bl	80037e0 <HAL_GetTick>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d901      	bls.n	8008f2a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8008f26:	2303      	movs	r3, #3
 8008f28:	e08d      	b.n	8009046 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f2a:	4b49      	ldr	r3, [pc, #292]	; (8009050 <HAL_RCC_OscConfig+0x6ac>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1f0      	bne.n	8008f18 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	69da      	ldr	r2, [r3, #28]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a1b      	ldr	r3, [r3, #32]
 8008f3e:	431a      	orrs	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f44:	019b      	lsls	r3, r3, #6
 8008f46:	431a      	orrs	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f4c:	085b      	lsrs	r3, r3, #1
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	041b      	lsls	r3, r3, #16
 8008f52:	431a      	orrs	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f58:	061b      	lsls	r3, r3, #24
 8008f5a:	431a      	orrs	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f60:	071b      	lsls	r3, r3, #28
 8008f62:	493b      	ldr	r1, [pc, #236]	; (8009050 <HAL_RCC_OscConfig+0x6ac>)
 8008f64:	4313      	orrs	r3, r2
 8008f66:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f68:	4b3b      	ldr	r3, [pc, #236]	; (8009058 <HAL_RCC_OscConfig+0x6b4>)
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f6e:	f7fa fc37 	bl	80037e0 <HAL_GetTick>
 8008f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f74:	e008      	b.n	8008f88 <HAL_RCC_OscConfig+0x5e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f76:	f7fa fc33 	bl	80037e0 <HAL_GetTick>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	1ad3      	subs	r3, r2, r3
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	d901      	bls.n	8008f88 <HAL_RCC_OscConfig+0x5e4>
          {
            return HAL_TIMEOUT;
 8008f84:	2303      	movs	r3, #3
 8008f86:	e05e      	b.n	8009046 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f88:	4b31      	ldr	r3, [pc, #196]	; (8009050 <HAL_RCC_OscConfig+0x6ac>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d0f0      	beq.n	8008f76 <HAL_RCC_OscConfig+0x5d2>
 8008f94:	e056      	b.n	8009044 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f96:	4b30      	ldr	r3, [pc, #192]	; (8009058 <HAL_RCC_OscConfig+0x6b4>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f9c:	f7fa fc20 	bl	80037e0 <HAL_GetTick>
 8008fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fa2:	e008      	b.n	8008fb6 <HAL_RCC_OscConfig+0x612>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fa4:	f7fa fc1c 	bl	80037e0 <HAL_GetTick>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d901      	bls.n	8008fb6 <HAL_RCC_OscConfig+0x612>
          {
            return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e047      	b.n	8009046 <HAL_RCC_OscConfig+0x6a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fb6:	4b26      	ldr	r3, [pc, #152]	; (8009050 <HAL_RCC_OscConfig+0x6ac>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1f0      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x600>
 8008fc2:	e03f      	b.n	8009044 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d101      	bne.n	8008fd0 <HAL_RCC_OscConfig+0x62c>
      {
        return HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e03a      	b.n	8009046 <HAL_RCC_OscConfig+0x6a2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008fd0:	4b1f      	ldr	r3, [pc, #124]	; (8009050 <HAL_RCC_OscConfig+0x6ac>)
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	699b      	ldr	r3, [r3, #24]
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d030      	beq.n	8009040 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d129      	bne.n	8009040 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d122      	bne.n	8009040 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009000:	4013      	ands	r3, r2
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009006:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009008:	4293      	cmp	r3, r2
 800900a:	d119      	bne.n	8009040 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009016:	085b      	lsrs	r3, r3, #1
 8009018:	3b01      	subs	r3, #1
 800901a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800901c:	429a      	cmp	r2, r3
 800901e:	d10f      	bne.n	8009040 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800902c:	429a      	cmp	r2, r3
 800902e:	d107      	bne.n	8009040 <HAL_RCC_OscConfig+0x69c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800903c:	429a      	cmp	r2, r3
 800903e:	d001      	beq.n	8009044 <HAL_RCC_OscConfig+0x6a0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e000      	b.n	8009046 <HAL_RCC_OscConfig+0x6a2>
        }
      }
    }
  }
  return HAL_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3718      	adds	r7, #24
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	40023800 	.word	0x40023800
 8009054:	0800c7d4 	.word	0x0800c7d4
 8009058:	42470060 	.word	0x42470060

0800905c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d101      	bne.n	800906e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	e1a4      	b.n	80093b8 <HAL_SPI_Init+0x35c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a72      	ldr	r2, [pc, #456]	; (800923c <HAL_SPI_Init+0x1e0>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d013      	beq.n	80090a0 <HAL_SPI_Init+0x44>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a70      	ldr	r2, [pc, #448]	; (8009240 <HAL_SPI_Init+0x1e4>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d00e      	beq.n	80090a0 <HAL_SPI_Init+0x44>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a6f      	ldr	r2, [pc, #444]	; (8009244 <HAL_SPI_Init+0x1e8>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d009      	beq.n	80090a0 <HAL_SPI_Init+0x44>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a6d      	ldr	r2, [pc, #436]	; (8009248 <HAL_SPI_Init+0x1ec>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d004      	beq.n	80090a0 <HAL_SPI_Init+0x44>
 8009096:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800909a:	486c      	ldr	r0, [pc, #432]	; (800924c <HAL_SPI_Init+0x1f0>)
 800909c:	f7fa f87d 	bl	800319a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d009      	beq.n	80090bc <HAL_SPI_Init+0x60>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090b0:	d004      	beq.n	80090bc <HAL_SPI_Init+0x60>
 80090b2:	f240 1141 	movw	r1, #321	; 0x141
 80090b6:	4865      	ldr	r0, [pc, #404]	; (800924c <HAL_SPI_Init+0x1f0>)
 80090b8:	f7fa f86f 	bl	800319a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00e      	beq.n	80090e2 <HAL_SPI_Init+0x86>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090cc:	d009      	beq.n	80090e2 <HAL_SPI_Init+0x86>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090d6:	d004      	beq.n	80090e2 <HAL_SPI_Init+0x86>
 80090d8:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80090dc:	485b      	ldr	r0, [pc, #364]	; (800924c <HAL_SPI_Init+0x1f0>)
 80090de:	f7fa f85c 	bl	800319a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090ea:	d008      	beq.n	80090fe <HAL_SPI_Init+0xa2>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d004      	beq.n	80090fe <HAL_SPI_Init+0xa2>
 80090f4:	f240 1143 	movw	r1, #323	; 0x143
 80090f8:	4854      	ldr	r0, [pc, #336]	; (800924c <HAL_SPI_Init+0x1f0>)
 80090fa:	f7fa f84e 	bl	800319a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009106:	d00d      	beq.n	8009124 <HAL_SPI_Init+0xc8>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	699b      	ldr	r3, [r3, #24]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d009      	beq.n	8009124 <HAL_SPI_Init+0xc8>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	699b      	ldr	r3, [r3, #24]
 8009114:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009118:	d004      	beq.n	8009124 <HAL_SPI_Init+0xc8>
 800911a:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800911e:	484b      	ldr	r0, [pc, #300]	; (800924c <HAL_SPI_Init+0x1f0>)
 8009120:	f7fa f83b 	bl	800319a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	69db      	ldr	r3, [r3, #28]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d020      	beq.n	800916e <HAL_SPI_Init+0x112>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	69db      	ldr	r3, [r3, #28]
 8009130:	2b08      	cmp	r3, #8
 8009132:	d01c      	beq.n	800916e <HAL_SPI_Init+0x112>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	69db      	ldr	r3, [r3, #28]
 8009138:	2b10      	cmp	r3, #16
 800913a:	d018      	beq.n	800916e <HAL_SPI_Init+0x112>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	2b18      	cmp	r3, #24
 8009142:	d014      	beq.n	800916e <HAL_SPI_Init+0x112>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	69db      	ldr	r3, [r3, #28]
 8009148:	2b20      	cmp	r3, #32
 800914a:	d010      	beq.n	800916e <HAL_SPI_Init+0x112>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	69db      	ldr	r3, [r3, #28]
 8009150:	2b28      	cmp	r3, #40	; 0x28
 8009152:	d00c      	beq.n	800916e <HAL_SPI_Init+0x112>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	69db      	ldr	r3, [r3, #28]
 8009158:	2b30      	cmp	r3, #48	; 0x30
 800915a:	d008      	beq.n	800916e <HAL_SPI_Init+0x112>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	69db      	ldr	r3, [r3, #28]
 8009160:	2b38      	cmp	r3, #56	; 0x38
 8009162:	d004      	beq.n	800916e <HAL_SPI_Init+0x112>
 8009164:	f240 1145 	movw	r1, #325	; 0x145
 8009168:	4838      	ldr	r0, [pc, #224]	; (800924c <HAL_SPI_Init+0x1f0>)
 800916a:	f7fa f816 	bl	800319a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d008      	beq.n	8009188 <HAL_SPI_Init+0x12c>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a1b      	ldr	r3, [r3, #32]
 800917a:	2b80      	cmp	r3, #128	; 0x80
 800917c:	d004      	beq.n	8009188 <HAL_SPI_Init+0x12c>
 800917e:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8009182:	4832      	ldr	r0, [pc, #200]	; (800924c <HAL_SPI_Init+0x1f0>)
 8009184:	f7fa f809 	bl	800319a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918c:	2b00      	cmp	r3, #0
 800918e:	d008      	beq.n	80091a2 <HAL_SPI_Init+0x146>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009194:	2b10      	cmp	r3, #16
 8009196:	d004      	beq.n	80091a2 <HAL_SPI_Init+0x146>
 8009198:	f240 1147 	movw	r1, #327	; 0x147
 800919c:	482b      	ldr	r0, [pc, #172]	; (800924c <HAL_SPI_Init+0x1f0>)
 800919e:	f7f9 fffc 	bl	800319a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d152      	bne.n	8009250 <HAL_SPI_Init+0x1f4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d008      	beq.n	80091c4 <HAL_SPI_Init+0x168>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d004      	beq.n	80091c4 <HAL_SPI_Init+0x168>
 80091ba:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80091be:	4823      	ldr	r0, [pc, #140]	; (800924c <HAL_SPI_Init+0x1f0>)
 80091c0:	f7f9 ffeb 	bl	800319a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	695b      	ldr	r3, [r3, #20]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d008      	beq.n	80091de <HAL_SPI_Init+0x182>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	695b      	ldr	r3, [r3, #20]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d004      	beq.n	80091de <HAL_SPI_Init+0x182>
 80091d4:	f240 114b 	movw	r1, #331	; 0x14b
 80091d8:	481c      	ldr	r0, [pc, #112]	; (800924c <HAL_SPI_Init+0x1f0>)
 80091da:	f7f9 ffde 	bl	800319a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091e6:	d125      	bne.n	8009234 <HAL_SPI_Init+0x1d8>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	69db      	ldr	r3, [r3, #28]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d05a      	beq.n	80092a6 <HAL_SPI_Init+0x24a>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	69db      	ldr	r3, [r3, #28]
 80091f4:	2b08      	cmp	r3, #8
 80091f6:	d056      	beq.n	80092a6 <HAL_SPI_Init+0x24a>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	69db      	ldr	r3, [r3, #28]
 80091fc:	2b10      	cmp	r3, #16
 80091fe:	d052      	beq.n	80092a6 <HAL_SPI_Init+0x24a>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	69db      	ldr	r3, [r3, #28]
 8009204:	2b18      	cmp	r3, #24
 8009206:	d04e      	beq.n	80092a6 <HAL_SPI_Init+0x24a>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	69db      	ldr	r3, [r3, #28]
 800920c:	2b20      	cmp	r3, #32
 800920e:	d04a      	beq.n	80092a6 <HAL_SPI_Init+0x24a>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	69db      	ldr	r3, [r3, #28]
 8009214:	2b28      	cmp	r3, #40	; 0x28
 8009216:	d046      	beq.n	80092a6 <HAL_SPI_Init+0x24a>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	69db      	ldr	r3, [r3, #28]
 800921c:	2b30      	cmp	r3, #48	; 0x30
 800921e:	d042      	beq.n	80092a6 <HAL_SPI_Init+0x24a>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	69db      	ldr	r3, [r3, #28]
 8009224:	2b38      	cmp	r3, #56	; 0x38
 8009226:	d03e      	beq.n	80092a6 <HAL_SPI_Init+0x24a>
 8009228:	f240 114f 	movw	r1, #335	; 0x14f
 800922c:	4807      	ldr	r0, [pc, #28]	; (800924c <HAL_SPI_Init+0x1f0>)
 800922e:	f7f9 ffb4 	bl	800319a <assert_failed>
 8009232:	e038      	b.n	80092a6 <HAL_SPI_Init+0x24a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	61da      	str	r2, [r3, #28]
 800923a:	e034      	b.n	80092a6 <HAL_SPI_Init+0x24a>
 800923c:	40013000 	.word	0x40013000
 8009240:	40003800 	.word	0x40003800
 8009244:	40003c00 	.word	0x40003c00
 8009248:	40013400 	.word	0x40013400
 800924c:	0800c810 	.word	0x0800c810
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	69db      	ldr	r3, [r3, #28]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d020      	beq.n	800929a <HAL_SPI_Init+0x23e>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	69db      	ldr	r3, [r3, #28]
 800925c:	2b08      	cmp	r3, #8
 800925e:	d01c      	beq.n	800929a <HAL_SPI_Init+0x23e>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	69db      	ldr	r3, [r3, #28]
 8009264:	2b10      	cmp	r3, #16
 8009266:	d018      	beq.n	800929a <HAL_SPI_Init+0x23e>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	69db      	ldr	r3, [r3, #28]
 800926c:	2b18      	cmp	r3, #24
 800926e:	d014      	beq.n	800929a <HAL_SPI_Init+0x23e>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	69db      	ldr	r3, [r3, #28]
 8009274:	2b20      	cmp	r3, #32
 8009276:	d010      	beq.n	800929a <HAL_SPI_Init+0x23e>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	69db      	ldr	r3, [r3, #28]
 800927c:	2b28      	cmp	r3, #40	; 0x28
 800927e:	d00c      	beq.n	800929a <HAL_SPI_Init+0x23e>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	69db      	ldr	r3, [r3, #28]
 8009284:	2b30      	cmp	r3, #48	; 0x30
 8009286:	d008      	beq.n	800929a <HAL_SPI_Init+0x23e>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	69db      	ldr	r3, [r3, #28]
 800928c:	2b38      	cmp	r3, #56	; 0x38
 800928e:	d004      	beq.n	800929a <HAL_SPI_Init+0x23e>
 8009290:	f240 1159 	movw	r1, #345	; 0x159
 8009294:	484a      	ldr	r0, [pc, #296]	; (80093c0 <HAL_SPI_Init+0x364>)
 8009296:	f7f9 ff80 	bl	800319a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d126      	bne.n	8009306 <HAL_SPI_Init+0x2aa>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a40      	ldr	r2, [pc, #256]	; (80093c4 <HAL_SPI_Init+0x368>)
 80092c4:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a3f      	ldr	r2, [pc, #252]	; (80093c8 <HAL_SPI_Init+0x36c>)
 80092ca:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a3f      	ldr	r2, [pc, #252]	; (80093cc <HAL_SPI_Init+0x370>)
 80092d0:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a3e      	ldr	r2, [pc, #248]	; (80093d0 <HAL_SPI_Init+0x374>)
 80092d6:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a3e      	ldr	r2, [pc, #248]	; (80093d4 <HAL_SPI_Init+0x378>)
 80092dc:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a3d      	ldr	r2, [pc, #244]	; (80093d8 <HAL_SPI_Init+0x37c>)
 80092e2:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a3d      	ldr	r2, [pc, #244]	; (80093dc <HAL_SPI_Init+0x380>)
 80092e8:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a3c      	ldr	r2, [pc, #240]	; (80093e0 <HAL_SPI_Init+0x384>)
 80092ee:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d102      	bne.n	80092fe <HAL_SPI_Init+0x2a2>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a3a      	ldr	r2, [pc, #232]	; (80093e4 <HAL_SPI_Init+0x388>)
 80092fc:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2202      	movs	r2, #2
 800930a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800931c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800932e:	431a      	orrs	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009338:	431a      	orrs	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	f003 0302 	and.w	r3, r3, #2
 8009342:	431a      	orrs	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	431a      	orrs	r2, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009356:	431a      	orrs	r2, r3
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	69db      	ldr	r3, [r3, #28]
 800935c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009360:	431a      	orrs	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6a1b      	ldr	r3, [r3, #32]
 8009366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800936a:	ea42 0103 	orr.w	r1, r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009372:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	430a      	orrs	r2, r1
 800937c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	0c1b      	lsrs	r3, r3, #16
 8009384:	f003 0104 	and.w	r1, r3, #4
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938c:	f003 0210 	and.w	r2, r3, #16
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	430a      	orrs	r2, r1
 8009396:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	69da      	ldr	r2, [r3, #28]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2201      	movs	r2, #1
 80093b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3708      	adds	r7, #8
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	0800c810 	.word	0x0800c810
 80093c4:	08009945 	.word	0x08009945
 80093c8:	08009959 	.word	0x08009959
 80093cc:	0800996d 	.word	0x0800996d
 80093d0:	08009981 	.word	0x08009981
 80093d4:	08009995 	.word	0x08009995
 80093d8:	080099a9 	.word	0x080099a9
 80093dc:	080099bd 	.word	0x080099bd
 80093e0:	080099d1 	.word	0x080099d1
 80093e4:	0800321d 	.word	0x0800321d

080093e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b08c      	sub	sp, #48	; 0x30
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
 80093f4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80093f6:	2301      	movs	r3, #1
 80093f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80093fa:	2300      	movs	r3, #0
 80093fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d004      	beq.n	8009412 <HAL_SPI_TransmitReceive+0x2a>
 8009408:	f240 417c 	movw	r1, #1148	; 0x47c
 800940c:	4884      	ldr	r0, [pc, #528]	; (8009620 <HAL_SPI_TransmitReceive+0x238>)
 800940e:	f7f9 fec4 	bl	800319a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009418:	2b01      	cmp	r3, #1
 800941a:	d101      	bne.n	8009420 <HAL_SPI_TransmitReceive+0x38>
 800941c:	2302      	movs	r3, #2
 800941e:	e18d      	b.n	800973c <HAL_SPI_TransmitReceive+0x354>
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009428:	f7fa f9da 	bl	80037e0 <HAL_GetTick>
 800942c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009434:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800943e:	887b      	ldrh	r3, [r7, #2]
 8009440:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009442:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009446:	2b01      	cmp	r3, #1
 8009448:	d00f      	beq.n	800946a <HAL_SPI_TransmitReceive+0x82>
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009450:	d107      	bne.n	8009462 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d103      	bne.n	8009462 <HAL_SPI_TransmitReceive+0x7a>
 800945a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800945e:	2b04      	cmp	r3, #4
 8009460:	d003      	beq.n	800946a <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8009462:	2302      	movs	r3, #2
 8009464:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009468:	e15e      	b.n	8009728 <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d005      	beq.n	800947c <HAL_SPI_TransmitReceive+0x94>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d002      	beq.n	800947c <HAL_SPI_TransmitReceive+0x94>
 8009476:	887b      	ldrh	r3, [r7, #2]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d103      	bne.n	8009484 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009482:	e151      	b.n	8009728 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800948a:	b2db      	uxtb	r3, r3
 800948c:	2b04      	cmp	r3, #4
 800948e:	d003      	beq.n	8009498 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2205      	movs	r2, #5
 8009494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	887a      	ldrh	r2, [r7, #2]
 80094a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	887a      	ldrh	r2, [r7, #2]
 80094ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	887a      	ldrh	r2, [r7, #2]
 80094ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	887a      	ldrh	r2, [r7, #2]
 80094c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d8:	2b40      	cmp	r3, #64	; 0x40
 80094da:	d007      	beq.n	80094ec <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094f4:	d178      	bne.n	80095e8 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d002      	beq.n	8009504 <HAL_SPI_TransmitReceive+0x11c>
 80094fe:	8b7b      	ldrh	r3, [r7, #26]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d166      	bne.n	80095d2 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009508:	881a      	ldrh	r2, [r3, #0]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009514:	1c9a      	adds	r2, r3, #2
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800951e:	b29b      	uxth	r3, r3
 8009520:	3b01      	subs	r3, #1
 8009522:	b29a      	uxth	r2, r3
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009528:	e053      	b.n	80095d2 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	f003 0302 	and.w	r3, r3, #2
 8009534:	2b02      	cmp	r3, #2
 8009536:	d11b      	bne.n	8009570 <HAL_SPI_TransmitReceive+0x188>
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800953c:	b29b      	uxth	r3, r3
 800953e:	2b00      	cmp	r3, #0
 8009540:	d016      	beq.n	8009570 <HAL_SPI_TransmitReceive+0x188>
 8009542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009544:	2b01      	cmp	r3, #1
 8009546:	d113      	bne.n	8009570 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954c:	881a      	ldrh	r2, [r3, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009558:	1c9a      	adds	r2, r3, #2
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009562:	b29b      	uxth	r3, r3
 8009564:	3b01      	subs	r3, #1
 8009566:	b29a      	uxth	r2, r3
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800956c:	2300      	movs	r3, #0
 800956e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	f003 0301 	and.w	r3, r3, #1
 800957a:	2b01      	cmp	r3, #1
 800957c:	d119      	bne.n	80095b2 <HAL_SPI_TransmitReceive+0x1ca>
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009582:	b29b      	uxth	r3, r3
 8009584:	2b00      	cmp	r3, #0
 8009586:	d014      	beq.n	80095b2 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68da      	ldr	r2, [r3, #12]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009592:	b292      	uxth	r2, r2
 8009594:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800959a:	1c9a      	adds	r2, r3, #2
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	3b01      	subs	r3, #1
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80095ae:	2301      	movs	r3, #1
 80095b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80095b2:	f7fa f915 	bl	80037e0 <HAL_GetTick>
 80095b6:	4602      	mov	r2, r0
 80095b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095be:	429a      	cmp	r2, r3
 80095c0:	d807      	bhi.n	80095d2 <HAL_SPI_TransmitReceive+0x1ea>
 80095c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c8:	d003      	beq.n	80095d2 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 80095ca:	2303      	movs	r3, #3
 80095cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80095d0:	e0aa      	b.n	8009728 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d1a6      	bne.n	800952a <HAL_SPI_TransmitReceive+0x142>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1a1      	bne.n	800952a <HAL_SPI_TransmitReceive+0x142>
 80095e6:	e07f      	b.n	80096e8 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d002      	beq.n	80095f6 <HAL_SPI_TransmitReceive+0x20e>
 80095f0:	8b7b      	ldrh	r3, [r7, #26]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d16e      	bne.n	80096d4 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	330c      	adds	r3, #12
 8009600:	7812      	ldrb	r2, [r2, #0]
 8009602:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009608:	1c5a      	adds	r2, r3, #1
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009612:	b29b      	uxth	r3, r3
 8009614:	3b01      	subs	r3, #1
 8009616:	b29a      	uxth	r2, r3
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800961c:	e05a      	b.n	80096d4 <HAL_SPI_TransmitReceive+0x2ec>
 800961e:	bf00      	nop
 8009620:	0800c810 	.word	0x0800c810
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	f003 0302 	and.w	r3, r3, #2
 800962e:	2b02      	cmp	r3, #2
 8009630:	d11c      	bne.n	800966c <HAL_SPI_TransmitReceive+0x284>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009636:	b29b      	uxth	r3, r3
 8009638:	2b00      	cmp	r3, #0
 800963a:	d017      	beq.n	800966c <HAL_SPI_TransmitReceive+0x284>
 800963c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963e:	2b01      	cmp	r3, #1
 8009640:	d114      	bne.n	800966c <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	330c      	adds	r3, #12
 800964c:	7812      	ldrb	r2, [r2, #0]
 800964e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009654:	1c5a      	adds	r2, r3, #1
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800965e:	b29b      	uxth	r3, r3
 8009660:	3b01      	subs	r3, #1
 8009662:	b29a      	uxth	r2, r3
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009668:	2300      	movs	r3, #0
 800966a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	f003 0301 	and.w	r3, r3, #1
 8009676:	2b01      	cmp	r3, #1
 8009678:	d119      	bne.n	80096ae <HAL_SPI_TransmitReceive+0x2c6>
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800967e:	b29b      	uxth	r3, r3
 8009680:	2b00      	cmp	r3, #0
 8009682:	d014      	beq.n	80096ae <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68da      	ldr	r2, [r3, #12]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968e:	b2d2      	uxtb	r2, r2
 8009690:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009696:	1c5a      	adds	r2, r3, #1
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	3b01      	subs	r3, #1
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80096aa:	2301      	movs	r3, #1
 80096ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80096ae:	f7fa f897 	bl	80037e0 <HAL_GetTick>
 80096b2:	4602      	mov	r2, r0
 80096b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d803      	bhi.n	80096c6 <HAL_SPI_TransmitReceive+0x2de>
 80096be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c4:	d102      	bne.n	80096cc <HAL_SPI_TransmitReceive+0x2e4>
 80096c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d103      	bne.n	80096d4 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 80096cc:	2303      	movs	r3, #3
 80096ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80096d2:	e029      	b.n	8009728 <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096d8:	b29b      	uxth	r3, r3
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1a2      	bne.n	8009624 <HAL_SPI_TransmitReceive+0x23c>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d19d      	bne.n	8009624 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80096e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f000 fa17 	bl	8009b20 <SPI_EndRxTxTransaction>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d006      	beq.n	8009706 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2220      	movs	r2, #32
 8009702:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009704:	e010      	b.n	8009728 <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10b      	bne.n	8009726 <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800970e:	2300      	movs	r3, #0
 8009710:	617b      	str	r3, [r7, #20]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	617b      	str	r3, [r7, #20]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	617b      	str	r3, [r7, #20]
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	e000      	b.n	8009728 <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8009726:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2200      	movs	r2, #0
 8009734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009738:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800973c:	4618      	mov	r0, r3
 800973e:	3730      	adds	r7, #48	; 0x30
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b088      	sub	sp, #32
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	099b      	lsrs	r3, r3, #6
 8009760:	f003 0301 	and.w	r3, r3, #1
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10f      	bne.n	8009788 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00a      	beq.n	8009788 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	099b      	lsrs	r3, r3, #6
 8009776:	f003 0301 	and.w	r3, r3, #1
 800977a:	2b00      	cmp	r3, #0
 800977c:	d004      	beq.n	8009788 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	4798      	blx	r3
    return;
 8009786:	e0d8      	b.n	800993a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	085b      	lsrs	r3, r3, #1
 800978c:	f003 0301 	and.w	r3, r3, #1
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00a      	beq.n	80097aa <HAL_SPI_IRQHandler+0x66>
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	09db      	lsrs	r3, r3, #7
 8009798:	f003 0301 	and.w	r3, r3, #1
 800979c:	2b00      	cmp	r3, #0
 800979e:	d004      	beq.n	80097aa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	4798      	blx	r3
    return;
 80097a8:	e0c7      	b.n	800993a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	095b      	lsrs	r3, r3, #5
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10c      	bne.n	80097d0 <HAL_SPI_IRQHandler+0x8c>
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	099b      	lsrs	r3, r3, #6
 80097ba:	f003 0301 	and.w	r3, r3, #1
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d106      	bne.n	80097d0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	0a1b      	lsrs	r3, r3, #8
 80097c6:	f003 0301 	and.w	r3, r3, #1
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f000 80b5 	beq.w	800993a <HAL_SPI_IRQHandler+0x1f6>
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	095b      	lsrs	r3, r3, #5
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f000 80ae 	beq.w	800993a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	099b      	lsrs	r3, r3, #6
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d023      	beq.n	8009832 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	2b03      	cmp	r3, #3
 80097f4:	d011      	beq.n	800981a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097fa:	f043 0204 	orr.w	r2, r3, #4
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009802:	2300      	movs	r3, #0
 8009804:	617b      	str	r3, [r7, #20]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	617b      	str	r3, [r7, #20]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	617b      	str	r3, [r7, #20]
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	e00b      	b.n	8009832 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800981a:	2300      	movs	r3, #0
 800981c:	613b      	str	r3, [r7, #16]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	613b      	str	r3, [r7, #16]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	613b      	str	r3, [r7, #16]
 800982e:	693b      	ldr	r3, [r7, #16]
        return;
 8009830:	e083      	b.n	800993a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	095b      	lsrs	r3, r3, #5
 8009836:	f003 0301 	and.w	r3, r3, #1
 800983a:	2b00      	cmp	r3, #0
 800983c:	d014      	beq.n	8009868 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009842:	f043 0201 	orr.w	r2, r3, #1
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800984a:	2300      	movs	r3, #0
 800984c:	60fb      	str	r3, [r7, #12]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	60fb      	str	r3, [r7, #12]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009864:	601a      	str	r2, [r3, #0]
 8009866:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	0a1b      	lsrs	r3, r3, #8
 800986c:	f003 0301 	and.w	r3, r3, #1
 8009870:	2b00      	cmp	r3, #0
 8009872:	d00c      	beq.n	800988e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009878:	f043 0208 	orr.w	r2, r3, #8
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009880:	2300      	movs	r3, #0
 8009882:	60bb      	str	r3, [r7, #8]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	60bb      	str	r3, [r7, #8]
 800988c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009892:	2b00      	cmp	r3, #0
 8009894:	d050      	beq.n	8009938 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	685a      	ldr	r2, [r3, #4]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80098a4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	f003 0302 	and.w	r3, r3, #2
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d104      	bne.n	80098c2 <HAL_SPI_IRQHandler+0x17e>
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	f003 0301 	and.w	r3, r3, #1
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d034      	beq.n	800992c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	685a      	ldr	r2, [r3, #4]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f022 0203 	bic.w	r2, r2, #3
 80098d0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d011      	beq.n	80098fe <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098de:	4a18      	ldr	r2, [pc, #96]	; (8009940 <HAL_SPI_IRQHandler+0x1fc>)
 80098e0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7fb ff3e 	bl	8005768 <HAL_DMA_Abort_IT>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d005      	beq.n	80098fe <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009902:	2b00      	cmp	r3, #0
 8009904:	d017      	beq.n	8009936 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800990a:	4a0d      	ldr	r2, [pc, #52]	; (8009940 <HAL_SPI_IRQHandler+0x1fc>)
 800990c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009912:	4618      	mov	r0, r3
 8009914:	f7fb ff28 	bl	8005768 <HAL_DMA_Abort_IT>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00b      	beq.n	8009936 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009922:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800992a:	e004      	b.n	8009936 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009934:	e000      	b.n	8009938 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8009936:	bf00      	nop
    return;
 8009938:	bf00      	nop
  }
}
 800993a:	3720      	adds	r7, #32
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	080099e5 	.word	0x080099e5

08009944 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800999c:	bf00      	nop
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80099c4:	bf00      	nop
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80099d8:	bf00      	nop
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2200      	movs	r2, #0
 80099f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2200      	movs	r2, #0
 80099fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009a06:	bf00      	nop
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
	...

08009a10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b088      	sub	sp, #32
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	603b      	str	r3, [r7, #0]
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009a20:	f7f9 fede 	bl	80037e0 <HAL_GetTick>
 8009a24:	4602      	mov	r2, r0
 8009a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a28:	1a9b      	subs	r3, r3, r2
 8009a2a:	683a      	ldr	r2, [r7, #0]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009a30:	f7f9 fed6 	bl	80037e0 <HAL_GetTick>
 8009a34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009a36:	4b39      	ldr	r3, [pc, #228]	; (8009b1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	015b      	lsls	r3, r3, #5
 8009a3c:	0d1b      	lsrs	r3, r3, #20
 8009a3e:	69fa      	ldr	r2, [r7, #28]
 8009a40:	fb02 f303 	mul.w	r3, r2, r3
 8009a44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a46:	e054      	b.n	8009af2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a4e:	d050      	beq.n	8009af2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a50:	f7f9 fec6 	bl	80037e0 <HAL_GetTick>
 8009a54:	4602      	mov	r2, r0
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	69fa      	ldr	r2, [r7, #28]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d902      	bls.n	8009a66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d13d      	bne.n	8009ae2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	685a      	ldr	r2, [r3, #4]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009a74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a7e:	d111      	bne.n	8009aa4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a88:	d004      	beq.n	8009a94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a92:	d107      	bne.n	8009aa4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009aa2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aac:	d10f      	bne.n	8009ace <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009abc:	601a      	str	r2, [r3, #0]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009acc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009ade:	2303      	movs	r3, #3
 8009ae0:	e017      	b.n	8009b12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d101      	bne.n	8009aec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	3b01      	subs	r3, #1
 8009af0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	689a      	ldr	r2, [r3, #8]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	4013      	ands	r3, r2
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	bf0c      	ite	eq
 8009b02:	2301      	moveq	r3, #1
 8009b04:	2300      	movne	r3, #0
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	461a      	mov	r2, r3
 8009b0a:	79fb      	ldrb	r3, [r7, #7]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d19b      	bne.n	8009a48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3720      	adds	r7, #32
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	20000040 	.word	0x20000040

08009b20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b088      	sub	sp, #32
 8009b24:	af02      	add	r7, sp, #8
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009b2c:	4b1b      	ldr	r3, [pc, #108]	; (8009b9c <SPI_EndRxTxTransaction+0x7c>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a1b      	ldr	r2, [pc, #108]	; (8009ba0 <SPI_EndRxTxTransaction+0x80>)
 8009b32:	fba2 2303 	umull	r2, r3, r2, r3
 8009b36:	0d5b      	lsrs	r3, r3, #21
 8009b38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009b3c:	fb02 f303 	mul.w	r3, r2, r3
 8009b40:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b4a:	d112      	bne.n	8009b72 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	2200      	movs	r2, #0
 8009b54:	2180      	movs	r1, #128	; 0x80
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f7ff ff5a 	bl	8009a10 <SPI_WaitFlagStateUntilTimeout>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d016      	beq.n	8009b90 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b66:	f043 0220 	orr.w	r2, r3, #32
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	e00f      	b.n	8009b92 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00a      	beq.n	8009b8e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b88:	2b80      	cmp	r3, #128	; 0x80
 8009b8a:	d0f2      	beq.n	8009b72 <SPI_EndRxTxTransaction+0x52>
 8009b8c:	e000      	b.n	8009b90 <SPI_EndRxTxTransaction+0x70>
        break;
 8009b8e:	bf00      	nop
  }

  return HAL_OK;
 8009b90:	2300      	movs	r3, #0
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3718      	adds	r7, #24
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20000040 	.word	0x20000040
 8009ba0:	165e9f81 	.word	0x165e9f81

08009ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d101      	bne.n	8009bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e0c5      	b.n	8009d42 <HAL_TIM_Base_Init+0x19e>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a64      	ldr	r2, [pc, #400]	; (8009d4c <HAL_TIM_Base_Init+0x1a8>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d045      	beq.n	8009c4c <HAL_TIM_Base_Init+0xa8>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bc8:	d040      	beq.n	8009c4c <HAL_TIM_Base_Init+0xa8>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a60      	ldr	r2, [pc, #384]	; (8009d50 <HAL_TIM_Base_Init+0x1ac>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d03b      	beq.n	8009c4c <HAL_TIM_Base_Init+0xa8>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a5e      	ldr	r2, [pc, #376]	; (8009d54 <HAL_TIM_Base_Init+0x1b0>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d036      	beq.n	8009c4c <HAL_TIM_Base_Init+0xa8>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a5d      	ldr	r2, [pc, #372]	; (8009d58 <HAL_TIM_Base_Init+0x1b4>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d031      	beq.n	8009c4c <HAL_TIM_Base_Init+0xa8>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a5b      	ldr	r2, [pc, #364]	; (8009d5c <HAL_TIM_Base_Init+0x1b8>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d02c      	beq.n	8009c4c <HAL_TIM_Base_Init+0xa8>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a5a      	ldr	r2, [pc, #360]	; (8009d60 <HAL_TIM_Base_Init+0x1bc>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d027      	beq.n	8009c4c <HAL_TIM_Base_Init+0xa8>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a58      	ldr	r2, [pc, #352]	; (8009d64 <HAL_TIM_Base_Init+0x1c0>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d022      	beq.n	8009c4c <HAL_TIM_Base_Init+0xa8>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a57      	ldr	r2, [pc, #348]	; (8009d68 <HAL_TIM_Base_Init+0x1c4>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d01d      	beq.n	8009c4c <HAL_TIM_Base_Init+0xa8>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a55      	ldr	r2, [pc, #340]	; (8009d6c <HAL_TIM_Base_Init+0x1c8>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d018      	beq.n	8009c4c <HAL_TIM_Base_Init+0xa8>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a54      	ldr	r2, [pc, #336]	; (8009d70 <HAL_TIM_Base_Init+0x1cc>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d013      	beq.n	8009c4c <HAL_TIM_Base_Init+0xa8>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a52      	ldr	r2, [pc, #328]	; (8009d74 <HAL_TIM_Base_Init+0x1d0>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d00e      	beq.n	8009c4c <HAL_TIM_Base_Init+0xa8>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a51      	ldr	r2, [pc, #324]	; (8009d78 <HAL_TIM_Base_Init+0x1d4>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d009      	beq.n	8009c4c <HAL_TIM_Base_Init+0xa8>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a4f      	ldr	r2, [pc, #316]	; (8009d7c <HAL_TIM_Base_Init+0x1d8>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d004      	beq.n	8009c4c <HAL_TIM_Base_Init+0xa8>
 8009c42:	f240 1113 	movw	r1, #275	; 0x113
 8009c46:	484e      	ldr	r0, [pc, #312]	; (8009d80 <HAL_TIM_Base_Init+0x1dc>)
 8009c48:	f7f9 faa7 	bl	800319a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d014      	beq.n	8009c7e <HAL_TIM_Base_Init+0xda>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	2b10      	cmp	r3, #16
 8009c5a:	d010      	beq.n	8009c7e <HAL_TIM_Base_Init+0xda>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	2b20      	cmp	r3, #32
 8009c62:	d00c      	beq.n	8009c7e <HAL_TIM_Base_Init+0xda>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	2b40      	cmp	r3, #64	; 0x40
 8009c6a:	d008      	beq.n	8009c7e <HAL_TIM_Base_Init+0xda>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	2b60      	cmp	r3, #96	; 0x60
 8009c72:	d004      	beq.n	8009c7e <HAL_TIM_Base_Init+0xda>
 8009c74:	f44f 718a 	mov.w	r1, #276	; 0x114
 8009c78:	4841      	ldr	r0, [pc, #260]	; (8009d80 <HAL_TIM_Base_Init+0x1dc>)
 8009c7a:	f7f9 fa8e 	bl	800319a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00e      	beq.n	8009ca4 <HAL_TIM_Base_Init+0x100>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c8e:	d009      	beq.n	8009ca4 <HAL_TIM_Base_Init+0x100>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	691b      	ldr	r3, [r3, #16]
 8009c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c98:	d004      	beq.n	8009ca4 <HAL_TIM_Base_Init+0x100>
 8009c9a:	f240 1115 	movw	r1, #277	; 0x115
 8009c9e:	4838      	ldr	r0, [pc, #224]	; (8009d80 <HAL_TIM_Base_Init+0x1dc>)
 8009ca0:	f7f9 fa7b 	bl	800319a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d008      	beq.n	8009cbe <HAL_TIM_Base_Init+0x11a>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	699b      	ldr	r3, [r3, #24]
 8009cb0:	2b80      	cmp	r3, #128	; 0x80
 8009cb2:	d004      	beq.n	8009cbe <HAL_TIM_Base_Init+0x11a>
 8009cb4:	f44f 718b 	mov.w	r1, #278	; 0x116
 8009cb8:	4831      	ldr	r0, [pc, #196]	; (8009d80 <HAL_TIM_Base_Init+0x1dc>)
 8009cba:	f7f9 fa6e 	bl	800319a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d106      	bne.n	8009cd8 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 f856 	bl	8009d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2202      	movs	r2, #2
 8009cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	4619      	mov	r1, r3
 8009cea:	4610      	mov	r0, r2
 8009cec:	f000 fa4a 	bl	800a184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	40010000 	.word	0x40010000
 8009d50:	40000400 	.word	0x40000400
 8009d54:	40000800 	.word	0x40000800
 8009d58:	40000c00 	.word	0x40000c00
 8009d5c:	40001000 	.word	0x40001000
 8009d60:	40001400 	.word	0x40001400
 8009d64:	40010400 	.word	0x40010400
 8009d68:	40014000 	.word	0x40014000
 8009d6c:	40014400 	.word	0x40014400
 8009d70:	40014800 	.word	0x40014800
 8009d74:	40001800 	.word	0x40001800
 8009d78:	40001c00 	.word	0x40001c00
 8009d7c:	40002000 	.word	0x40002000
 8009d80:	0800c848 	.word	0x0800c848

08009d84 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009d8c:	bf00      	nop
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a51      	ldr	r2, [pc, #324]	; (8009eec <HAL_TIM_Base_Start_IT+0x154>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d045      	beq.n	8009e36 <HAL_TIM_Base_Start_IT+0x9e>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009db2:	d040      	beq.n	8009e36 <HAL_TIM_Base_Start_IT+0x9e>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a4d      	ldr	r2, [pc, #308]	; (8009ef0 <HAL_TIM_Base_Start_IT+0x158>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d03b      	beq.n	8009e36 <HAL_TIM_Base_Start_IT+0x9e>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a4c      	ldr	r2, [pc, #304]	; (8009ef4 <HAL_TIM_Base_Start_IT+0x15c>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d036      	beq.n	8009e36 <HAL_TIM_Base_Start_IT+0x9e>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a4a      	ldr	r2, [pc, #296]	; (8009ef8 <HAL_TIM_Base_Start_IT+0x160>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d031      	beq.n	8009e36 <HAL_TIM_Base_Start_IT+0x9e>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a49      	ldr	r2, [pc, #292]	; (8009efc <HAL_TIM_Base_Start_IT+0x164>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d02c      	beq.n	8009e36 <HAL_TIM_Base_Start_IT+0x9e>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a47      	ldr	r2, [pc, #284]	; (8009f00 <HAL_TIM_Base_Start_IT+0x168>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d027      	beq.n	8009e36 <HAL_TIM_Base_Start_IT+0x9e>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a46      	ldr	r2, [pc, #280]	; (8009f04 <HAL_TIM_Base_Start_IT+0x16c>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d022      	beq.n	8009e36 <HAL_TIM_Base_Start_IT+0x9e>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a44      	ldr	r2, [pc, #272]	; (8009f08 <HAL_TIM_Base_Start_IT+0x170>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d01d      	beq.n	8009e36 <HAL_TIM_Base_Start_IT+0x9e>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a43      	ldr	r2, [pc, #268]	; (8009f0c <HAL_TIM_Base_Start_IT+0x174>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d018      	beq.n	8009e36 <HAL_TIM_Base_Start_IT+0x9e>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a41      	ldr	r2, [pc, #260]	; (8009f10 <HAL_TIM_Base_Start_IT+0x178>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d013      	beq.n	8009e36 <HAL_TIM_Base_Start_IT+0x9e>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a40      	ldr	r2, [pc, #256]	; (8009f14 <HAL_TIM_Base_Start_IT+0x17c>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d00e      	beq.n	8009e36 <HAL_TIM_Base_Start_IT+0x9e>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a3e      	ldr	r2, [pc, #248]	; (8009f18 <HAL_TIM_Base_Start_IT+0x180>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d009      	beq.n	8009e36 <HAL_TIM_Base_Start_IT+0x9e>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a3d      	ldr	r2, [pc, #244]	; (8009f1c <HAL_TIM_Base_Start_IT+0x184>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d004      	beq.n	8009e36 <HAL_TIM_Base_Start_IT+0x9e>
 8009e2c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8009e30:	483b      	ldr	r0, [pc, #236]	; (8009f20 <HAL_TIM_Base_Start_IT+0x188>)
 8009e32:	f7f9 f9b2 	bl	800319a <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d001      	beq.n	8009e46 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e04e      	b.n	8009ee4 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2202      	movs	r2, #2
 8009e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68da      	ldr	r2, [r3, #12]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f042 0201 	orr.w	r2, r2, #1
 8009e5c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a22      	ldr	r2, [pc, #136]	; (8009eec <HAL_TIM_Base_Start_IT+0x154>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d022      	beq.n	8009eae <HAL_TIM_Base_Start_IT+0x116>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e70:	d01d      	beq.n	8009eae <HAL_TIM_Base_Start_IT+0x116>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a1e      	ldr	r2, [pc, #120]	; (8009ef0 <HAL_TIM_Base_Start_IT+0x158>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d018      	beq.n	8009eae <HAL_TIM_Base_Start_IT+0x116>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a1c      	ldr	r2, [pc, #112]	; (8009ef4 <HAL_TIM_Base_Start_IT+0x15c>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d013      	beq.n	8009eae <HAL_TIM_Base_Start_IT+0x116>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a1b      	ldr	r2, [pc, #108]	; (8009ef8 <HAL_TIM_Base_Start_IT+0x160>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d00e      	beq.n	8009eae <HAL_TIM_Base_Start_IT+0x116>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a1b      	ldr	r2, [pc, #108]	; (8009f04 <HAL_TIM_Base_Start_IT+0x16c>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d009      	beq.n	8009eae <HAL_TIM_Base_Start_IT+0x116>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a1a      	ldr	r2, [pc, #104]	; (8009f08 <HAL_TIM_Base_Start_IT+0x170>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d004      	beq.n	8009eae <HAL_TIM_Base_Start_IT+0x116>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a1a      	ldr	r2, [pc, #104]	; (8009f14 <HAL_TIM_Base_Start_IT+0x17c>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d111      	bne.n	8009ed2 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	f003 0307 	and.w	r3, r3, #7
 8009eb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2b06      	cmp	r3, #6
 8009ebe:	d010      	beq.n	8009ee2 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f042 0201 	orr.w	r2, r2, #1
 8009ece:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ed0:	e007      	b.n	8009ee2 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f042 0201 	orr.w	r2, r2, #1
 8009ee0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	40010000 	.word	0x40010000
 8009ef0:	40000400 	.word	0x40000400
 8009ef4:	40000800 	.word	0x40000800
 8009ef8:	40000c00 	.word	0x40000c00
 8009efc:	40001000 	.word	0x40001000
 8009f00:	40001400 	.word	0x40001400
 8009f04:	40010400 	.word	0x40010400
 8009f08:	40014000 	.word	0x40014000
 8009f0c:	40014400 	.word	0x40014400
 8009f10:	40014800 	.word	0x40014800
 8009f14:	40001800 	.word	0x40001800
 8009f18:	40001c00 	.word	0x40001c00
 8009f1c:	40002000 	.word	0x40002000
 8009f20:	0800c848 	.word	0x0800c848

08009f24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	f003 0302 	and.w	r3, r3, #2
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d122      	bne.n	8009f80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	f003 0302 	and.w	r3, r3, #2
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d11b      	bne.n	8009f80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f06f 0202 	mvn.w	r2, #2
 8009f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2201      	movs	r2, #1
 8009f56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	f003 0303 	and.w	r3, r3, #3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d003      	beq.n	8009f6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f8ee 	bl	800a148 <HAL_TIM_IC_CaptureCallback>
 8009f6c:	e005      	b.n	8009f7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f8e0 	bl	800a134 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f8f1 	bl	800a15c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	691b      	ldr	r3, [r3, #16]
 8009f86:	f003 0304 	and.w	r3, r3, #4
 8009f8a:	2b04      	cmp	r3, #4
 8009f8c:	d122      	bne.n	8009fd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	f003 0304 	and.w	r3, r3, #4
 8009f98:	2b04      	cmp	r3, #4
 8009f9a:	d11b      	bne.n	8009fd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f06f 0204 	mvn.w	r2, #4
 8009fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2202      	movs	r2, #2
 8009faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d003      	beq.n	8009fc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f8c4 	bl	800a148 <HAL_TIM_IC_CaptureCallback>
 8009fc0:	e005      	b.n	8009fce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f8b6 	bl	800a134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 f8c7 	bl	800a15c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	f003 0308 	and.w	r3, r3, #8
 8009fde:	2b08      	cmp	r3, #8
 8009fe0:	d122      	bne.n	800a028 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	f003 0308 	and.w	r3, r3, #8
 8009fec:	2b08      	cmp	r3, #8
 8009fee:	d11b      	bne.n	800a028 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f06f 0208 	mvn.w	r2, #8
 8009ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2204      	movs	r2, #4
 8009ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	69db      	ldr	r3, [r3, #28]
 800a006:	f003 0303 	and.w	r3, r3, #3
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d003      	beq.n	800a016 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f89a 	bl	800a148 <HAL_TIM_IC_CaptureCallback>
 800a014:	e005      	b.n	800a022 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 f88c 	bl	800a134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 f89d 	bl	800a15c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	f003 0310 	and.w	r3, r3, #16
 800a032:	2b10      	cmp	r3, #16
 800a034:	d122      	bne.n	800a07c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	f003 0310 	and.w	r3, r3, #16
 800a040:	2b10      	cmp	r3, #16
 800a042:	d11b      	bne.n	800a07c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f06f 0210 	mvn.w	r2, #16
 800a04c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2208      	movs	r2, #8
 800a052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	69db      	ldr	r3, [r3, #28]
 800a05a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d003      	beq.n	800a06a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f870 	bl	800a148 <HAL_TIM_IC_CaptureCallback>
 800a068:	e005      	b.n	800a076 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f862 	bl	800a134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f873 	bl	800a15c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	f003 0301 	and.w	r3, r3, #1
 800a086:	2b01      	cmp	r3, #1
 800a088:	d10e      	bne.n	800a0a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	f003 0301 	and.w	r3, r3, #1
 800a094:	2b01      	cmp	r3, #1
 800a096:	d107      	bne.n	800a0a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f06f 0201 	mvn.w	r2, #1
 800a0a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f7f9 f862 	bl	800316c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0b2:	2b80      	cmp	r3, #128	; 0x80
 800a0b4:	d10e      	bne.n	800a0d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0c0:	2b80      	cmp	r3, #128	; 0x80
 800a0c2:	d107      	bne.n	800a0d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a0cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 f902 	bl	800a2d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0de:	2b40      	cmp	r3, #64	; 0x40
 800a0e0:	d10e      	bne.n	800a100 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ec:	2b40      	cmp	r3, #64	; 0x40
 800a0ee:	d107      	bne.n	800a100 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a0f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f838 	bl	800a170 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	f003 0320 	and.w	r3, r3, #32
 800a10a:	2b20      	cmp	r3, #32
 800a10c:	d10e      	bne.n	800a12c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	f003 0320 	and.w	r3, r3, #32
 800a118:	2b20      	cmp	r3, #32
 800a11a:	d107      	bne.n	800a12c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f06f 0220 	mvn.w	r2, #32
 800a124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f8cc 	bl	800a2c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a12c:	bf00      	nop
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a13c:	bf00      	nop
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a150:	bf00      	nop
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a164:	bf00      	nop
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a170:	b480      	push	{r7}
 800a172:	b083      	sub	sp, #12
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a178:	bf00      	nop
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a184:	b480      	push	{r7}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	4a40      	ldr	r2, [pc, #256]	; (800a298 <TIM_Base_SetConfig+0x114>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d013      	beq.n	800a1c4 <TIM_Base_SetConfig+0x40>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1a2:	d00f      	beq.n	800a1c4 <TIM_Base_SetConfig+0x40>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a3d      	ldr	r2, [pc, #244]	; (800a29c <TIM_Base_SetConfig+0x118>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d00b      	beq.n	800a1c4 <TIM_Base_SetConfig+0x40>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4a3c      	ldr	r2, [pc, #240]	; (800a2a0 <TIM_Base_SetConfig+0x11c>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d007      	beq.n	800a1c4 <TIM_Base_SetConfig+0x40>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4a3b      	ldr	r2, [pc, #236]	; (800a2a4 <TIM_Base_SetConfig+0x120>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d003      	beq.n	800a1c4 <TIM_Base_SetConfig+0x40>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	4a3a      	ldr	r2, [pc, #232]	; (800a2a8 <TIM_Base_SetConfig+0x124>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d108      	bne.n	800a1d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a2f      	ldr	r2, [pc, #188]	; (800a298 <TIM_Base_SetConfig+0x114>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d02b      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1e4:	d027      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4a2c      	ldr	r2, [pc, #176]	; (800a29c <TIM_Base_SetConfig+0x118>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d023      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a2b      	ldr	r2, [pc, #172]	; (800a2a0 <TIM_Base_SetConfig+0x11c>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d01f      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	4a2a      	ldr	r2, [pc, #168]	; (800a2a4 <TIM_Base_SetConfig+0x120>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d01b      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a29      	ldr	r2, [pc, #164]	; (800a2a8 <TIM_Base_SetConfig+0x124>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d017      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	4a28      	ldr	r2, [pc, #160]	; (800a2ac <TIM_Base_SetConfig+0x128>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d013      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4a27      	ldr	r2, [pc, #156]	; (800a2b0 <TIM_Base_SetConfig+0x12c>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d00f      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4a26      	ldr	r2, [pc, #152]	; (800a2b4 <TIM_Base_SetConfig+0x130>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d00b      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a25      	ldr	r2, [pc, #148]	; (800a2b8 <TIM_Base_SetConfig+0x134>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d007      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a24      	ldr	r2, [pc, #144]	; (800a2bc <TIM_Base_SetConfig+0x138>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d003      	beq.n	800a236 <TIM_Base_SetConfig+0xb2>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a23      	ldr	r2, [pc, #140]	; (800a2c0 <TIM_Base_SetConfig+0x13c>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d108      	bne.n	800a248 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a23c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	4313      	orrs	r3, r2
 800a246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	695b      	ldr	r3, [r3, #20]
 800a252:	4313      	orrs	r3, r2
 800a254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	689a      	ldr	r2, [r3, #8]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a0a      	ldr	r2, [pc, #40]	; (800a298 <TIM_Base_SetConfig+0x114>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d003      	beq.n	800a27c <TIM_Base_SetConfig+0xf8>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a0c      	ldr	r2, [pc, #48]	; (800a2a8 <TIM_Base_SetConfig+0x124>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d103      	bne.n	800a284 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	691a      	ldr	r2, [r3, #16]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	615a      	str	r2, [r3, #20]
}
 800a28a:	bf00      	nop
 800a28c:	3714      	adds	r7, #20
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr
 800a296:	bf00      	nop
 800a298:	40010000 	.word	0x40010000
 800a29c:	40000400 	.word	0x40000400
 800a2a0:	40000800 	.word	0x40000800
 800a2a4:	40000c00 	.word	0x40000c00
 800a2a8:	40010400 	.word	0x40010400
 800a2ac:	40014000 	.word	0x40014000
 800a2b0:	40014400 	.word	0x40014400
 800a2b4:	40014800 	.word	0x40014800
 800a2b8:	40001800 	.word	0x40001800
 800a2bc:	40001c00 	.word	0x40001c00
 800a2c0:	40002000 	.word	0x40002000

0800a2c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2cc:	bf00      	nop
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a2fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a302:	d10e      	bne.n	800a322 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	f003 0301 	and.w	r3, r3, #1
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d107      	bne.n	800a322 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f06f 0201 	mvn.w	r2, #1
 800a31a:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 f804 	bl	800a32a <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 800a322:	bf00      	nop
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 800a32a:	b480      	push	{r7}
 800a32c:	b083      	sub	sp, #12
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 800a332:	bf00      	nop
 800a334:	370c      	adds	r7, #12
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a33e:	b480      	push	{r7}
 800a340:	b085      	sub	sp, #20
 800a342:	af00      	add	r7, sp, #0
 800a344:	4603      	mov	r3, r0
 800a346:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a348:	2300      	movs	r3, #0
 800a34a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a34c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a350:	2b84      	cmp	r3, #132	; 0x84
 800a352:	d005      	beq.n	800a360 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a354:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	4413      	add	r3, r2
 800a35c:	3303      	adds	r3, #3
 800a35e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a360:	68fb      	ldr	r3, [r7, #12]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3714      	adds	r7, #20
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a372:	f000 fef9 	bl	800b168 <vTaskStartScheduler>
  
  return osOK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a37c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a37e:	b089      	sub	sp, #36	; 0x24
 800a380:	af04      	add	r7, sp, #16
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	695b      	ldr	r3, [r3, #20]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d020      	beq.n	800a3d0 <osThreadCreate+0x54>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	699b      	ldr	r3, [r3, #24]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d01c      	beq.n	800a3d0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	685c      	ldr	r4, [r3, #4]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681d      	ldr	r5, [r3, #0]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	691e      	ldr	r6, [r3, #16]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7ff ffc8 	bl	800a33e <makeFreeRtosPriority>
 800a3ae:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	695b      	ldr	r3, [r3, #20]
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a3b8:	9202      	str	r2, [sp, #8]
 800a3ba:	9301      	str	r3, [sp, #4]
 800a3bc:	9100      	str	r1, [sp, #0]
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	4632      	mov	r2, r6
 800a3c2:	4629      	mov	r1, r5
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	f000 fca7 	bl	800ad18 <xTaskCreateStatic>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	60fb      	str	r3, [r7, #12]
 800a3ce:	e01c      	b.n	800a40a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	685c      	ldr	r4, [r3, #4]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a3dc:	b29e      	uxth	r6, r3
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7ff ffaa 	bl	800a33e <makeFreeRtosPriority>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	f107 030c 	add.w	r3, r7, #12
 800a3f0:	9301      	str	r3, [sp, #4]
 800a3f2:	9200      	str	r2, [sp, #0]
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	4632      	mov	r2, r6
 800a3f8:	4629      	mov	r1, r5
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	f000 fce9 	bl	800add2 <xTaskCreate>
 800a400:	4603      	mov	r3, r0
 800a402:	2b01      	cmp	r3, #1
 800a404:	d001      	beq.n	800a40a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a406:	2300      	movs	r3, #0
 800a408:	e000      	b.n	800a40c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a40a:	68fb      	ldr	r3, [r7, #12]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3714      	adds	r7, #20
 800a410:	46bd      	mov	sp, r7
 800a412:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a414 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f103 0208 	add.w	r2, r3, #8
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f04f 32ff 	mov.w	r2, #4294967295
 800a42c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f103 0208 	add.w	r2, r3, #8
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f103 0208 	add.w	r2, r3, #8
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a448:	bf00      	nop
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a462:	bf00      	nop
 800a464:	370c      	adds	r7, #12
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr

0800a46e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a46e:	b480      	push	{r7}
 800a470:	b085      	sub	sp, #20
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
 800a476:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	689a      	ldr	r2, [r3, #8]
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	683a      	ldr	r2, [r7, #0]
 800a492:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	683a      	ldr	r2, [r7, #0]
 800a498:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	1c5a      	adds	r2, r3, #1
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	601a      	str	r2, [r3, #0]
}
 800a4aa:	bf00      	nop
 800a4ac:	3714      	adds	r7, #20
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b085      	sub	sp, #20
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4cc:	d103      	bne.n	800a4d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	60fb      	str	r3, [r7, #12]
 800a4d4:	e00c      	b.n	800a4f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	3308      	adds	r3, #8
 800a4da:	60fb      	str	r3, [r7, #12]
 800a4dc:	e002      	b.n	800a4e4 <vListInsert+0x2e>
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	60fb      	str	r3, [r7, #12]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d2f6      	bcs.n	800a4de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	683a      	ldr	r2, [r7, #0]
 800a4fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	683a      	ldr	r2, [r7, #0]
 800a50a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	687a      	ldr	r2, [r7, #4]
 800a510:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	1c5a      	adds	r2, r3, #1
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	601a      	str	r2, [r3, #0]
}
 800a51c:	bf00      	nop
 800a51e:	3714      	adds	r7, #20
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	691b      	ldr	r3, [r3, #16]
 800a534:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	6892      	ldr	r2, [r2, #8]
 800a53e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	6852      	ldr	r2, [r2, #4]
 800a548:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	429a      	cmp	r2, r3
 800a552:	d103      	bne.n	800a55c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	689a      	ldr	r2, [r3, #8]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	1e5a      	subs	r2, r3, #1
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3714      	adds	r7, #20
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10a      	bne.n	800a5a6 <xQueueGenericReset+0x2a>
	__asm volatile
 800a590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	60bb      	str	r3, [r7, #8]
}
 800a5a2:	bf00      	nop
 800a5a4:	e7fe      	b.n	800a5a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a5a6:	f001 fc35 	bl	800be14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5b2:	68f9      	ldr	r1, [r7, #12]
 800a5b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a5b6:	fb01 f303 	mul.w	r3, r1, r3
 800a5ba:	441a      	add	r2, r3
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	68f9      	ldr	r1, [r7, #12]
 800a5da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a5dc:	fb01 f303 	mul.w	r3, r1, r3
 800a5e0:	441a      	add	r2, r3
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	22ff      	movs	r2, #255	; 0xff
 800a5ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	22ff      	movs	r2, #255	; 0xff
 800a5f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d114      	bne.n	800a626 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d01a      	beq.n	800a63a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	3310      	adds	r3, #16
 800a608:	4618      	mov	r0, r3
 800a60a:	f001 f80f 	bl	800b62c <xTaskRemoveFromEventList>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d012      	beq.n	800a63a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a614:	4b0c      	ldr	r3, [pc, #48]	; (800a648 <xQueueGenericReset+0xcc>)
 800a616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a61a:	601a      	str	r2, [r3, #0]
 800a61c:	f3bf 8f4f 	dsb	sy
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	e009      	b.n	800a63a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	3310      	adds	r3, #16
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7ff fef2 	bl	800a414 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	3324      	adds	r3, #36	; 0x24
 800a634:	4618      	mov	r0, r3
 800a636:	f7ff feed 	bl	800a414 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a63a:	f001 fc1b 	bl	800be74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a63e:	2301      	movs	r3, #1
}
 800a640:	4618      	mov	r0, r3
 800a642:	3710      	adds	r7, #16
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	e000ed04 	.word	0xe000ed04

0800a64c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b08a      	sub	sp, #40	; 0x28
 800a650:	af02      	add	r7, sp, #8
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	4613      	mov	r3, r2
 800a658:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10a      	bne.n	800a676 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	613b      	str	r3, [r7, #16]
}
 800a672:	bf00      	nop
 800a674:	e7fe      	b.n	800a674 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	68ba      	ldr	r2, [r7, #8]
 800a67a:	fb02 f303 	mul.w	r3, r2, r3
 800a67e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	3348      	adds	r3, #72	; 0x48
 800a684:	4618      	mov	r0, r3
 800a686:	f001 fca7 	bl	800bfd8 <pvPortMalloc>
 800a68a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d011      	beq.n	800a6b6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a692:	69bb      	ldr	r3, [r7, #24]
 800a694:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	3348      	adds	r3, #72	; 0x48
 800a69a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a6a4:	79fa      	ldrb	r2, [r7, #7]
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	9300      	str	r3, [sp, #0]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	697a      	ldr	r2, [r7, #20]
 800a6ae:	68b9      	ldr	r1, [r7, #8]
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f000 f805 	bl	800a6c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a6b6:	69bb      	ldr	r3, [r7, #24]
	}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3720      	adds	r7, #32
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]
 800a6cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d103      	bne.n	800a6dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	69ba      	ldr	r2, [r7, #24]
 800a6d8:	601a      	str	r2, [r3, #0]
 800a6da:	e002      	b.n	800a6e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a6ee:	2101      	movs	r1, #1
 800a6f0:	69b8      	ldr	r0, [r7, #24]
 800a6f2:	f7ff ff43 	bl	800a57c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a6f6:	bf00      	nop
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
	...

0800a700 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b08e      	sub	sp, #56	; 0x38
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
 800a70c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a70e:	2300      	movs	r3, #0
 800a710:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10a      	bne.n	800a732 <xQueueGenericSend+0x32>
	__asm volatile
 800a71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a720:	f383 8811 	msr	BASEPRI, r3
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a72e:	bf00      	nop
 800a730:	e7fe      	b.n	800a730 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d103      	bne.n	800a740 <xQueueGenericSend+0x40>
 800a738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d101      	bne.n	800a744 <xQueueGenericSend+0x44>
 800a740:	2301      	movs	r3, #1
 800a742:	e000      	b.n	800a746 <xQueueGenericSend+0x46>
 800a744:	2300      	movs	r3, #0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10a      	bne.n	800a760 <xQueueGenericSend+0x60>
	__asm volatile
 800a74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74e:	f383 8811 	msr	BASEPRI, r3
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a75c:	bf00      	nop
 800a75e:	e7fe      	b.n	800a75e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	2b02      	cmp	r3, #2
 800a764:	d103      	bne.n	800a76e <xQueueGenericSend+0x6e>
 800a766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d101      	bne.n	800a772 <xQueueGenericSend+0x72>
 800a76e:	2301      	movs	r3, #1
 800a770:	e000      	b.n	800a774 <xQueueGenericSend+0x74>
 800a772:	2300      	movs	r3, #0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10a      	bne.n	800a78e <xQueueGenericSend+0x8e>
	__asm volatile
 800a778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77c:	f383 8811 	msr	BASEPRI, r3
 800a780:	f3bf 8f6f 	isb	sy
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	623b      	str	r3, [r7, #32]
}
 800a78a:	bf00      	nop
 800a78c:	e7fe      	b.n	800a78c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a78e:	f001 f90d 	bl	800b9ac <xTaskGetSchedulerState>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d102      	bne.n	800a79e <xQueueGenericSend+0x9e>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <xQueueGenericSend+0xa2>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e000      	b.n	800a7a4 <xQueueGenericSend+0xa4>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10a      	bne.n	800a7be <xQueueGenericSend+0xbe>
	__asm volatile
 800a7a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ac:	f383 8811 	msr	BASEPRI, r3
 800a7b0:	f3bf 8f6f 	isb	sy
 800a7b4:	f3bf 8f4f 	dsb	sy
 800a7b8:	61fb      	str	r3, [r7, #28]
}
 800a7ba:	bf00      	nop
 800a7bc:	e7fe      	b.n	800a7bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7be:	f001 fb29 	bl	800be14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d302      	bcc.n	800a7d4 <xQueueGenericSend+0xd4>
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	d129      	bne.n	800a828 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a7d4:	683a      	ldr	r2, [r7, #0]
 800a7d6:	68b9      	ldr	r1, [r7, #8]
 800a7d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7da:	f000 f98d 	bl	800aaf8 <prvCopyDataToQueue>
 800a7de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d010      	beq.n	800a80a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ea:	3324      	adds	r3, #36	; 0x24
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f000 ff1d 	bl	800b62c <xTaskRemoveFromEventList>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d013      	beq.n	800a820 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a7f8:	4b3f      	ldr	r3, [pc, #252]	; (800a8f8 <xQueueGenericSend+0x1f8>)
 800a7fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7fe:	601a      	str	r2, [r3, #0]
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	f3bf 8f6f 	isb	sy
 800a808:	e00a      	b.n	800a820 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d007      	beq.n	800a820 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a810:	4b39      	ldr	r3, [pc, #228]	; (800a8f8 <xQueueGenericSend+0x1f8>)
 800a812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a816:	601a      	str	r2, [r3, #0]
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a820:	f001 fb28 	bl	800be74 <vPortExitCritical>
				return pdPASS;
 800a824:	2301      	movs	r3, #1
 800a826:	e063      	b.n	800a8f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d103      	bne.n	800a836 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a82e:	f001 fb21 	bl	800be74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a832:	2300      	movs	r3, #0
 800a834:	e05c      	b.n	800a8f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d106      	bne.n	800a84a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a83c:	f107 0314 	add.w	r3, r7, #20
 800a840:	4618      	mov	r0, r3
 800a842:	f000 ff55 	bl	800b6f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a846:	2301      	movs	r3, #1
 800a848:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a84a:	f001 fb13 	bl	800be74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a84e:	f000 fcf5 	bl	800b23c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a852:	f001 fadf 	bl	800be14 <vPortEnterCritical>
 800a856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a85c:	b25b      	sxtb	r3, r3
 800a85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a862:	d103      	bne.n	800a86c <xQueueGenericSend+0x16c>
 800a864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a866:	2200      	movs	r2, #0
 800a868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a872:	b25b      	sxtb	r3, r3
 800a874:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a878:	d103      	bne.n	800a882 <xQueueGenericSend+0x182>
 800a87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87c:	2200      	movs	r2, #0
 800a87e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a882:	f001 faf7 	bl	800be74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a886:	1d3a      	adds	r2, r7, #4
 800a888:	f107 0314 	add.w	r3, r7, #20
 800a88c:	4611      	mov	r1, r2
 800a88e:	4618      	mov	r0, r3
 800a890:	f000 ff44 	bl	800b71c <xTaskCheckForTimeOut>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d124      	bne.n	800a8e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a89a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a89c:	f000 fa24 	bl	800ace8 <prvIsQueueFull>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d018      	beq.n	800a8d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a8:	3310      	adds	r3, #16
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	4611      	mov	r1, r2
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f000 fe98 	bl	800b5e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a8b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8b6:	f000 f9af 	bl	800ac18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a8ba:	f000 fccd 	bl	800b258 <xTaskResumeAll>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f47f af7c 	bne.w	800a7be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a8c6:	4b0c      	ldr	r3, [pc, #48]	; (800a8f8 <xQueueGenericSend+0x1f8>)
 800a8c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8cc:	601a      	str	r2, [r3, #0]
 800a8ce:	f3bf 8f4f 	dsb	sy
 800a8d2:	f3bf 8f6f 	isb	sy
 800a8d6:	e772      	b.n	800a7be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a8d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8da:	f000 f99d 	bl	800ac18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8de:	f000 fcbb 	bl	800b258 <xTaskResumeAll>
 800a8e2:	e76c      	b.n	800a7be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a8e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8e6:	f000 f997 	bl	800ac18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8ea:	f000 fcb5 	bl	800b258 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a8ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3738      	adds	r7, #56	; 0x38
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	e000ed04 	.word	0xe000ed04

0800a8fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b08c      	sub	sp, #48	; 0x30
 800a900:	af00      	add	r7, sp, #0
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	60b9      	str	r1, [r7, #8]
 800a906:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a908:	2300      	movs	r3, #0
 800a90a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a912:	2b00      	cmp	r3, #0
 800a914:	d10a      	bne.n	800a92c <xQueueReceive+0x30>
	__asm volatile
 800a916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91a:	f383 8811 	msr	BASEPRI, r3
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f3bf 8f4f 	dsb	sy
 800a926:	623b      	str	r3, [r7, #32]
}
 800a928:	bf00      	nop
 800a92a:	e7fe      	b.n	800a92a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d103      	bne.n	800a93a <xQueueReceive+0x3e>
 800a932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a936:	2b00      	cmp	r3, #0
 800a938:	d101      	bne.n	800a93e <xQueueReceive+0x42>
 800a93a:	2301      	movs	r3, #1
 800a93c:	e000      	b.n	800a940 <xQueueReceive+0x44>
 800a93e:	2300      	movs	r3, #0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d10a      	bne.n	800a95a <xQueueReceive+0x5e>
	__asm volatile
 800a944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	61fb      	str	r3, [r7, #28]
}
 800a956:	bf00      	nop
 800a958:	e7fe      	b.n	800a958 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a95a:	f001 f827 	bl	800b9ac <xTaskGetSchedulerState>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d102      	bne.n	800a96a <xQueueReceive+0x6e>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d101      	bne.n	800a96e <xQueueReceive+0x72>
 800a96a:	2301      	movs	r3, #1
 800a96c:	e000      	b.n	800a970 <xQueueReceive+0x74>
 800a96e:	2300      	movs	r3, #0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d10a      	bne.n	800a98a <xQueueReceive+0x8e>
	__asm volatile
 800a974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a978:	f383 8811 	msr	BASEPRI, r3
 800a97c:	f3bf 8f6f 	isb	sy
 800a980:	f3bf 8f4f 	dsb	sy
 800a984:	61bb      	str	r3, [r7, #24]
}
 800a986:	bf00      	nop
 800a988:	e7fe      	b.n	800a988 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a98a:	f001 fa43 	bl	800be14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a992:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a996:	2b00      	cmp	r3, #0
 800a998:	d01f      	beq.n	800a9da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a99a:	68b9      	ldr	r1, [r7, #8]
 800a99c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a99e:	f000 f915 	bl	800abcc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a4:	1e5a      	subs	r2, r3, #1
 800a9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00f      	beq.n	800a9d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b4:	3310      	adds	r3, #16
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f000 fe38 	bl	800b62c <xTaskRemoveFromEventList>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d007      	beq.n	800a9d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a9c2:	4b3d      	ldr	r3, [pc, #244]	; (800aab8 <xQueueReceive+0x1bc>)
 800a9c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9c8:	601a      	str	r2, [r3, #0]
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a9d2:	f001 fa4f 	bl	800be74 <vPortExitCritical>
				return pdPASS;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e069      	b.n	800aaae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d103      	bne.n	800a9e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9e0:	f001 fa48 	bl	800be74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	e062      	b.n	800aaae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d106      	bne.n	800a9fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9ee:	f107 0310 	add.w	r3, r7, #16
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f000 fe7c 	bl	800b6f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9fc:	f001 fa3a 	bl	800be74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa00:	f000 fc1c 	bl	800b23c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa04:	f001 fa06 	bl	800be14 <vPortEnterCritical>
 800aa08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa0e:	b25b      	sxtb	r3, r3
 800aa10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa14:	d103      	bne.n	800aa1e <xQueueReceive+0x122>
 800aa16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa24:	b25b      	sxtb	r3, r3
 800aa26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa2a:	d103      	bne.n	800aa34 <xQueueReceive+0x138>
 800aa2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2e:	2200      	movs	r2, #0
 800aa30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa34:	f001 fa1e 	bl	800be74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa38:	1d3a      	adds	r2, r7, #4
 800aa3a:	f107 0310 	add.w	r3, r7, #16
 800aa3e:	4611      	mov	r1, r2
 800aa40:	4618      	mov	r0, r3
 800aa42:	f000 fe6b 	bl	800b71c <xTaskCheckForTimeOut>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d123      	bne.n	800aa94 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa4e:	f000 f935 	bl	800acbc <prvIsQueueEmpty>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d017      	beq.n	800aa88 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5a:	3324      	adds	r3, #36	; 0x24
 800aa5c:	687a      	ldr	r2, [r7, #4]
 800aa5e:	4611      	mov	r1, r2
 800aa60:	4618      	mov	r0, r3
 800aa62:	f000 fdbf 	bl	800b5e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa68:	f000 f8d6 	bl	800ac18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa6c:	f000 fbf4 	bl	800b258 <xTaskResumeAll>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d189      	bne.n	800a98a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aa76:	4b10      	ldr	r3, [pc, #64]	; (800aab8 <xQueueReceive+0x1bc>)
 800aa78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa7c:	601a      	str	r2, [r3, #0]
 800aa7e:	f3bf 8f4f 	dsb	sy
 800aa82:	f3bf 8f6f 	isb	sy
 800aa86:	e780      	b.n	800a98a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa8a:	f000 f8c5 	bl	800ac18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa8e:	f000 fbe3 	bl	800b258 <xTaskResumeAll>
 800aa92:	e77a      	b.n	800a98a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa96:	f000 f8bf 	bl	800ac18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa9a:	f000 fbdd 	bl	800b258 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaa0:	f000 f90c 	bl	800acbc <prvIsQueueEmpty>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	f43f af6f 	beq.w	800a98a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aaac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3730      	adds	r7, #48	; 0x30
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	e000ed04 	.word	0xe000ed04

0800aabc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d10a      	bne.n	800aae0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800aaca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aace:	f383 8811 	msr	BASEPRI, r3
 800aad2:	f3bf 8f6f 	isb	sy
 800aad6:	f3bf 8f4f 	dsb	sy
 800aada:	60bb      	str	r3, [r7, #8]
}
 800aadc:	bf00      	nop
 800aade:	e7fe      	b.n	800aade <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800aae0:	f001 f998 	bl	800be14 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800aaea:	f001 f9c3 	bl	800be74 <vPortExitCritical>

	return uxReturn;
 800aaee:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3710      	adds	r7, #16
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab04:	2300      	movs	r3, #0
 800ab06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10d      	bne.n	800ab32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d14d      	bne.n	800abba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	4618      	mov	r0, r3
 800ab24:	f000 ff60 	bl	800b9e8 <xTaskPriorityDisinherit>
 800ab28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	609a      	str	r2, [r3, #8]
 800ab30:	e043      	b.n	800abba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d119      	bne.n	800ab6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6858      	ldr	r0, [r3, #4]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab40:	461a      	mov	r2, r3
 800ab42:	68b9      	ldr	r1, [r7, #8]
 800ab44:	f001 fc56 	bl	800c3f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab50:	441a      	add	r2, r3
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	685a      	ldr	r2, [r3, #4]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d32b      	bcc.n	800abba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	605a      	str	r2, [r3, #4]
 800ab6a:	e026      	b.n	800abba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	68d8      	ldr	r0, [r3, #12]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab74:	461a      	mov	r2, r3
 800ab76:	68b9      	ldr	r1, [r7, #8]
 800ab78:	f001 fc3c 	bl	800c3f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	68da      	ldr	r2, [r3, #12]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab84:	425b      	negs	r3, r3
 800ab86:	441a      	add	r2, r3
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	68da      	ldr	r2, [r3, #12]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d207      	bcs.n	800aba8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	689a      	ldr	r2, [r3, #8]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba0:	425b      	negs	r3, r3
 800aba2:	441a      	add	r2, r3
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2b02      	cmp	r3, #2
 800abac:	d105      	bne.n	800abba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	3b01      	subs	r3, #1
 800abb8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	1c5a      	adds	r2, r3, #1
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800abc2:	697b      	ldr	r3, [r7, #20]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3718      	adds	r7, #24
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d018      	beq.n	800ac10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	68da      	ldr	r2, [r3, #12]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe6:	441a      	add	r2, r3
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	68da      	ldr	r2, [r3, #12]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d303      	bcc.n	800ac00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	68d9      	ldr	r1, [r3, #12]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac08:	461a      	mov	r2, r3
 800ac0a:	6838      	ldr	r0, [r7, #0]
 800ac0c:	f001 fbf2 	bl	800c3f4 <memcpy>
	}
}
 800ac10:	bf00      	nop
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac20:	f001 f8f8 	bl	800be14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac2c:	e011      	b.n	800ac52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d012      	beq.n	800ac5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	3324      	adds	r3, #36	; 0x24
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 fcf6 	bl	800b62c <xTaskRemoveFromEventList>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac46:	f000 fdcb 	bl	800b7e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac4a:	7bfb      	ldrb	r3, [r7, #15]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	dce9      	bgt.n	800ac2e <prvUnlockQueue+0x16>
 800ac5a:	e000      	b.n	800ac5e <prvUnlockQueue+0x46>
					break;
 800ac5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	22ff      	movs	r2, #255	; 0xff
 800ac62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ac66:	f001 f905 	bl	800be74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac6a:	f001 f8d3 	bl	800be14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac76:	e011      	b.n	800ac9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	691b      	ldr	r3, [r3, #16]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d012      	beq.n	800aca6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	3310      	adds	r3, #16
 800ac84:	4618      	mov	r0, r3
 800ac86:	f000 fcd1 	bl	800b62c <xTaskRemoveFromEventList>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d001      	beq.n	800ac94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac90:	f000 fda6 	bl	800b7e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac94:	7bbb      	ldrb	r3, [r7, #14]
 800ac96:	3b01      	subs	r3, #1
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	dce9      	bgt.n	800ac78 <prvUnlockQueue+0x60>
 800aca4:	e000      	b.n	800aca8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aca6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	22ff      	movs	r2, #255	; 0xff
 800acac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800acb0:	f001 f8e0 	bl	800be74 <vPortExitCritical>
}
 800acb4:	bf00      	nop
 800acb6:	3710      	adds	r7, #16
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acc4:	f001 f8a6 	bl	800be14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800accc:	2b00      	cmp	r3, #0
 800acce:	d102      	bne.n	800acd6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800acd0:	2301      	movs	r3, #1
 800acd2:	60fb      	str	r3, [r7, #12]
 800acd4:	e001      	b.n	800acda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800acd6:	2300      	movs	r3, #0
 800acd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acda:	f001 f8cb 	bl	800be74 <vPortExitCritical>

	return xReturn;
 800acde:	68fb      	ldr	r3, [r7, #12]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acf0:	f001 f890 	bl	800be14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d102      	bne.n	800ad06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad00:	2301      	movs	r3, #1
 800ad02:	60fb      	str	r3, [r7, #12]
 800ad04:	e001      	b.n	800ad0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad06:	2300      	movs	r3, #0
 800ad08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad0a:	f001 f8b3 	bl	800be74 <vPortExitCritical>

	return xReturn;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b08e      	sub	sp, #56	; 0x38
 800ad1c:	af04      	add	r7, sp, #16
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	607a      	str	r2, [r7, #4]
 800ad24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d10a      	bne.n	800ad42 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ad2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad30:	f383 8811 	msr	BASEPRI, r3
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	623b      	str	r3, [r7, #32]
}
 800ad3e:	bf00      	nop
 800ad40:	e7fe      	b.n	800ad40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ad42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10a      	bne.n	800ad5e <xTaskCreateStatic+0x46>
	__asm volatile
 800ad48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4c:	f383 8811 	msr	BASEPRI, r3
 800ad50:	f3bf 8f6f 	isb	sy
 800ad54:	f3bf 8f4f 	dsb	sy
 800ad58:	61fb      	str	r3, [r7, #28]
}
 800ad5a:	bf00      	nop
 800ad5c:	e7fe      	b.n	800ad5c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad5e:	23b4      	movs	r3, #180	; 0xb4
 800ad60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	2bb4      	cmp	r3, #180	; 0xb4
 800ad66:	d00a      	beq.n	800ad7e <xTaskCreateStatic+0x66>
	__asm volatile
 800ad68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	61bb      	str	r3, [r7, #24]
}
 800ad7a:	bf00      	nop
 800ad7c:	e7fe      	b.n	800ad7c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ad7e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ad80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d01e      	beq.n	800adc4 <xTaskCreateStatic+0xac>
 800ad86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d01b      	beq.n	800adc4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad94:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad98:	2202      	movs	r2, #2
 800ad9a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad9e:	2300      	movs	r3, #0
 800ada0:	9303      	str	r3, [sp, #12]
 800ada2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada4:	9302      	str	r3, [sp, #8]
 800ada6:	f107 0314 	add.w	r3, r7, #20
 800adaa:	9301      	str	r3, [sp, #4]
 800adac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adae:	9300      	str	r3, [sp, #0]
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	68b9      	ldr	r1, [r7, #8]
 800adb6:	68f8      	ldr	r0, [r7, #12]
 800adb8:	f000 f850 	bl	800ae5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800adbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adbe:	f000 f8eb 	bl	800af98 <prvAddNewTaskToReadyList>
 800adc2:	e001      	b.n	800adc8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800adc4:	2300      	movs	r3, #0
 800adc6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800adc8:	697b      	ldr	r3, [r7, #20]
	}
 800adca:	4618      	mov	r0, r3
 800adcc:	3728      	adds	r7, #40	; 0x28
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800add2:	b580      	push	{r7, lr}
 800add4:	b08c      	sub	sp, #48	; 0x30
 800add6:	af04      	add	r7, sp, #16
 800add8:	60f8      	str	r0, [r7, #12]
 800adda:	60b9      	str	r1, [r7, #8]
 800addc:	603b      	str	r3, [r7, #0]
 800adde:	4613      	mov	r3, r2
 800ade0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ade2:	88fb      	ldrh	r3, [r7, #6]
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	4618      	mov	r0, r3
 800ade8:	f001 f8f6 	bl	800bfd8 <pvPortMalloc>
 800adec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d00e      	beq.n	800ae12 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800adf4:	20b4      	movs	r0, #180	; 0xb4
 800adf6:	f001 f8ef 	bl	800bfd8 <pvPortMalloc>
 800adfa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800adfc:	69fb      	ldr	r3, [r7, #28]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d003      	beq.n	800ae0a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae02:	69fb      	ldr	r3, [r7, #28]
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	631a      	str	r2, [r3, #48]	; 0x30
 800ae08:	e005      	b.n	800ae16 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae0a:	6978      	ldr	r0, [r7, #20]
 800ae0c:	f001 f9b0 	bl	800c170 <vPortFree>
 800ae10:	e001      	b.n	800ae16 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae12:	2300      	movs	r3, #0
 800ae14:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d017      	beq.n	800ae4c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae24:	88fa      	ldrh	r2, [r7, #6]
 800ae26:	2300      	movs	r3, #0
 800ae28:	9303      	str	r3, [sp, #12]
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	9302      	str	r3, [sp, #8]
 800ae2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae30:	9301      	str	r3, [sp, #4]
 800ae32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae34:	9300      	str	r3, [sp, #0]
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	68b9      	ldr	r1, [r7, #8]
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	f000 f80e 	bl	800ae5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae40:	69f8      	ldr	r0, [r7, #28]
 800ae42:	f000 f8a9 	bl	800af98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae46:	2301      	movs	r3, #1
 800ae48:	61bb      	str	r3, [r7, #24]
 800ae4a:	e002      	b.n	800ae52 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ae4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae50:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae52:	69bb      	ldr	r3, [r7, #24]
	}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3720      	adds	r7, #32
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b088      	sub	sp, #32
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	607a      	str	r2, [r7, #4]
 800ae68:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ae6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ae74:	3b01      	subs	r3, #1
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	4413      	add	r3, r2
 800ae7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ae7c:	69bb      	ldr	r3, [r7, #24]
 800ae7e:	f023 0307 	bic.w	r3, r3, #7
 800ae82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae84:	69bb      	ldr	r3, [r7, #24]
 800ae86:	f003 0307 	and.w	r3, r3, #7
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00a      	beq.n	800aea4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800ae8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae92:	f383 8811 	msr	BASEPRI, r3
 800ae96:	f3bf 8f6f 	isb	sy
 800ae9a:	f3bf 8f4f 	dsb	sy
 800ae9e:	617b      	str	r3, [r7, #20]
}
 800aea0:	bf00      	nop
 800aea2:	e7fe      	b.n	800aea2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d01f      	beq.n	800aeea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aeaa:	2300      	movs	r3, #0
 800aeac:	61fb      	str	r3, [r7, #28]
 800aeae:	e012      	b.n	800aed6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aeb0:	68ba      	ldr	r2, [r7, #8]
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	7819      	ldrb	r1, [r3, #0]
 800aeb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	4413      	add	r3, r2
 800aebe:	3334      	adds	r3, #52	; 0x34
 800aec0:	460a      	mov	r2, r1
 800aec2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aec4:	68ba      	ldr	r2, [r7, #8]
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	4413      	add	r3, r2
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d006      	beq.n	800aede <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	3301      	adds	r3, #1
 800aed4:	61fb      	str	r3, [r7, #28]
 800aed6:	69fb      	ldr	r3, [r7, #28]
 800aed8:	2b0f      	cmp	r3, #15
 800aeda:	d9e9      	bls.n	800aeb0 <prvInitialiseNewTask+0x54>
 800aedc:	e000      	b.n	800aee0 <prvInitialiseNewTask+0x84>
			{
				break;
 800aede:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee2:	2200      	movs	r2, #0
 800aee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aee8:	e003      	b.n	800aef2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aeea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeec:	2200      	movs	r2, #0
 800aeee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef4:	2b06      	cmp	r3, #6
 800aef6:	d901      	bls.n	800aefc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aef8:	2306      	movs	r3, #6
 800aefa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af06:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800af08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0a:	2200      	movs	r2, #0
 800af0c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af10:	3304      	adds	r3, #4
 800af12:	4618      	mov	r0, r3
 800af14:	f7ff fa9e 	bl	800a454 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1a:	3318      	adds	r3, #24
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7ff fa99 	bl	800a454 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2a:	f1c3 0207 	rsb	r2, r3, #7
 800af2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3a:	2200      	movs	r2, #0
 800af3c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af42:	2200      	movs	r2, #0
 800af44:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800af48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4a:	334c      	adds	r3, #76	; 0x4c
 800af4c:	2260      	movs	r2, #96	; 0x60
 800af4e:	2100      	movs	r1, #0
 800af50:	4618      	mov	r0, r3
 800af52:	f001 fa5d 	bl	800c410 <memset>
 800af56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af58:	4a0c      	ldr	r2, [pc, #48]	; (800af8c <prvInitialiseNewTask+0x130>)
 800af5a:	651a      	str	r2, [r3, #80]	; 0x50
 800af5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5e:	4a0c      	ldr	r2, [pc, #48]	; (800af90 <prvInitialiseNewTask+0x134>)
 800af60:	655a      	str	r2, [r3, #84]	; 0x54
 800af62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af64:	4a0b      	ldr	r2, [pc, #44]	; (800af94 <prvInitialiseNewTask+0x138>)
 800af66:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800af68:	683a      	ldr	r2, [r7, #0]
 800af6a:	68f9      	ldr	r1, [r7, #12]
 800af6c:	69b8      	ldr	r0, [r7, #24]
 800af6e:	f000 fe27 	bl	800bbc0 <pxPortInitialiseStack>
 800af72:	4602      	mov	r2, r0
 800af74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af76:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800af78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d002      	beq.n	800af84 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800af7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af84:	bf00      	nop
 800af86:	3720      	adds	r7, #32
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}
 800af8c:	0800c8c8 	.word	0x0800c8c8
 800af90:	0800c8e8 	.word	0x0800c8e8
 800af94:	0800c8a8 	.word	0x0800c8a8

0800af98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800afa0:	f000 ff38 	bl	800be14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800afa4:	4b2a      	ldr	r3, [pc, #168]	; (800b050 <prvAddNewTaskToReadyList+0xb8>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	3301      	adds	r3, #1
 800afaa:	4a29      	ldr	r2, [pc, #164]	; (800b050 <prvAddNewTaskToReadyList+0xb8>)
 800afac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800afae:	4b29      	ldr	r3, [pc, #164]	; (800b054 <prvAddNewTaskToReadyList+0xbc>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d109      	bne.n	800afca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800afb6:	4a27      	ldr	r2, [pc, #156]	; (800b054 <prvAddNewTaskToReadyList+0xbc>)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800afbc:	4b24      	ldr	r3, [pc, #144]	; (800b050 <prvAddNewTaskToReadyList+0xb8>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d110      	bne.n	800afe6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800afc4:	f000 fc30 	bl	800b828 <prvInitialiseTaskLists>
 800afc8:	e00d      	b.n	800afe6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800afca:	4b23      	ldr	r3, [pc, #140]	; (800b058 <prvAddNewTaskToReadyList+0xc0>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d109      	bne.n	800afe6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800afd2:	4b20      	ldr	r3, [pc, #128]	; (800b054 <prvAddNewTaskToReadyList+0xbc>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afdc:	429a      	cmp	r2, r3
 800afde:	d802      	bhi.n	800afe6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800afe0:	4a1c      	ldr	r2, [pc, #112]	; (800b054 <prvAddNewTaskToReadyList+0xbc>)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800afe6:	4b1d      	ldr	r3, [pc, #116]	; (800b05c <prvAddNewTaskToReadyList+0xc4>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	3301      	adds	r3, #1
 800afec:	4a1b      	ldr	r2, [pc, #108]	; (800b05c <prvAddNewTaskToReadyList+0xc4>)
 800afee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff4:	2201      	movs	r2, #1
 800aff6:	409a      	lsls	r2, r3
 800aff8:	4b19      	ldr	r3, [pc, #100]	; (800b060 <prvAddNewTaskToReadyList+0xc8>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4313      	orrs	r3, r2
 800affe:	4a18      	ldr	r2, [pc, #96]	; (800b060 <prvAddNewTaskToReadyList+0xc8>)
 800b000:	6013      	str	r3, [r2, #0]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b006:	4613      	mov	r3, r2
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	4413      	add	r3, r2
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	4a15      	ldr	r2, [pc, #84]	; (800b064 <prvAddNewTaskToReadyList+0xcc>)
 800b010:	441a      	add	r2, r3
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	3304      	adds	r3, #4
 800b016:	4619      	mov	r1, r3
 800b018:	4610      	mov	r0, r2
 800b01a:	f7ff fa28 	bl	800a46e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b01e:	f000 ff29 	bl	800be74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b022:	4b0d      	ldr	r3, [pc, #52]	; (800b058 <prvAddNewTaskToReadyList+0xc0>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00e      	beq.n	800b048 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b02a:	4b0a      	ldr	r3, [pc, #40]	; (800b054 <prvAddNewTaskToReadyList+0xbc>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b034:	429a      	cmp	r2, r3
 800b036:	d207      	bcs.n	800b048 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b038:	4b0b      	ldr	r3, [pc, #44]	; (800b068 <prvAddNewTaskToReadyList+0xd0>)
 800b03a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b03e:	601a      	str	r2, [r3, #0]
 800b040:	f3bf 8f4f 	dsb	sy
 800b044:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b048:	bf00      	nop
 800b04a:	3708      	adds	r7, #8
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	200009e8 	.word	0x200009e8
 800b054:	200008e8 	.word	0x200008e8
 800b058:	200009f4 	.word	0x200009f4
 800b05c:	20000a04 	.word	0x20000a04
 800b060:	200009f0 	.word	0x200009f0
 800b064:	200008ec 	.word	0x200008ec
 800b068:	e000ed04 	.word	0xe000ed04

0800b06c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b08a      	sub	sp, #40	; 0x28
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b076:	2300      	movs	r3, #0
 800b078:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d10a      	bne.n	800b096 <vTaskDelayUntil+0x2a>
	__asm volatile
 800b080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b084:	f383 8811 	msr	BASEPRI, r3
 800b088:	f3bf 8f6f 	isb	sy
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	617b      	str	r3, [r7, #20]
}
 800b092:	bf00      	nop
 800b094:	e7fe      	b.n	800b094 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10a      	bne.n	800b0b2 <vTaskDelayUntil+0x46>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	613b      	str	r3, [r7, #16]
}
 800b0ae:	bf00      	nop
 800b0b0:	e7fe      	b.n	800b0b0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b0b2:	4b2a      	ldr	r3, [pc, #168]	; (800b15c <vTaskDelayUntil+0xf0>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d00a      	beq.n	800b0d0 <vTaskDelayUntil+0x64>
	__asm volatile
 800b0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0be:	f383 8811 	msr	BASEPRI, r3
 800b0c2:	f3bf 8f6f 	isb	sy
 800b0c6:	f3bf 8f4f 	dsb	sy
 800b0ca:	60fb      	str	r3, [r7, #12]
}
 800b0cc:	bf00      	nop
 800b0ce:	e7fe      	b.n	800b0ce <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b0d0:	f000 f8b4 	bl	800b23c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b0d4:	4b22      	ldr	r3, [pc, #136]	; (800b160 <vTaskDelayUntil+0xf4>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	683a      	ldr	r2, [r7, #0]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	6a3a      	ldr	r2, [r7, #32]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d20b      	bcs.n	800b106 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	69fa      	ldr	r2, [r7, #28]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d211      	bcs.n	800b11c <vTaskDelayUntil+0xb0>
 800b0f8:	69fa      	ldr	r2, [r7, #28]
 800b0fa:	6a3b      	ldr	r3, [r7, #32]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d90d      	bls.n	800b11c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b100:	2301      	movs	r3, #1
 800b102:	627b      	str	r3, [r7, #36]	; 0x24
 800b104:	e00a      	b.n	800b11c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	69fa      	ldr	r2, [r7, #28]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d303      	bcc.n	800b118 <vTaskDelayUntil+0xac>
 800b110:	69fa      	ldr	r2, [r7, #28]
 800b112:	6a3b      	ldr	r3, [r7, #32]
 800b114:	429a      	cmp	r2, r3
 800b116:	d901      	bls.n	800b11c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b118:	2301      	movs	r3, #1
 800b11a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	69fa      	ldr	r2, [r7, #28]
 800b120:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b124:	2b00      	cmp	r3, #0
 800b126:	d006      	beq.n	800b136 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b128:	69fa      	ldr	r2, [r7, #28]
 800b12a:	6a3b      	ldr	r3, [r7, #32]
 800b12c:	1ad3      	subs	r3, r2, r3
 800b12e:	2100      	movs	r1, #0
 800b130:	4618      	mov	r0, r3
 800b132:	f000 fcdf 	bl	800baf4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b136:	f000 f88f 	bl	800b258 <xTaskResumeAll>
 800b13a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b13c:	69bb      	ldr	r3, [r7, #24]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d107      	bne.n	800b152 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b142:	4b08      	ldr	r3, [pc, #32]	; (800b164 <vTaskDelayUntil+0xf8>)
 800b144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b148:	601a      	str	r2, [r3, #0]
 800b14a:	f3bf 8f4f 	dsb	sy
 800b14e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b152:	bf00      	nop
 800b154:	3728      	adds	r7, #40	; 0x28
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	20000a10 	.word	0x20000a10
 800b160:	200009ec 	.word	0x200009ec
 800b164:	e000ed04 	.word	0xe000ed04

0800b168 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b08a      	sub	sp, #40	; 0x28
 800b16c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b16e:	2300      	movs	r3, #0
 800b170:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b172:	2300      	movs	r3, #0
 800b174:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b176:	463a      	mov	r2, r7
 800b178:	1d39      	adds	r1, r7, #4
 800b17a:	f107 0308 	add.w	r3, r7, #8
 800b17e:	4618      	mov	r0, r3
 800b180:	f7f7 fc62 	bl	8002a48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b184:	6839      	ldr	r1, [r7, #0]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	68ba      	ldr	r2, [r7, #8]
 800b18a:	9202      	str	r2, [sp, #8]
 800b18c:	9301      	str	r3, [sp, #4]
 800b18e:	2300      	movs	r3, #0
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	2300      	movs	r3, #0
 800b194:	460a      	mov	r2, r1
 800b196:	4921      	ldr	r1, [pc, #132]	; (800b21c <vTaskStartScheduler+0xb4>)
 800b198:	4821      	ldr	r0, [pc, #132]	; (800b220 <vTaskStartScheduler+0xb8>)
 800b19a:	f7ff fdbd 	bl	800ad18 <xTaskCreateStatic>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	4a20      	ldr	r2, [pc, #128]	; (800b224 <vTaskStartScheduler+0xbc>)
 800b1a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b1a4:	4b1f      	ldr	r3, [pc, #124]	; (800b224 <vTaskStartScheduler+0xbc>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d002      	beq.n	800b1b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	617b      	str	r3, [r7, #20]
 800b1b0:	e001      	b.n	800b1b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d11b      	bne.n	800b1f4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800b1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c0:	f383 8811 	msr	BASEPRI, r3
 800b1c4:	f3bf 8f6f 	isb	sy
 800b1c8:	f3bf 8f4f 	dsb	sy
 800b1cc:	613b      	str	r3, [r7, #16]
}
 800b1ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b1d0:	4b15      	ldr	r3, [pc, #84]	; (800b228 <vTaskStartScheduler+0xc0>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	334c      	adds	r3, #76	; 0x4c
 800b1d6:	4a15      	ldr	r2, [pc, #84]	; (800b22c <vTaskStartScheduler+0xc4>)
 800b1d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b1da:	4b15      	ldr	r3, [pc, #84]	; (800b230 <vTaskStartScheduler+0xc8>)
 800b1dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b1e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b1e2:	4b14      	ldr	r3, [pc, #80]	; (800b234 <vTaskStartScheduler+0xcc>)
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b1e8:	4b13      	ldr	r3, [pc, #76]	; (800b238 <vTaskStartScheduler+0xd0>)
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b1ee:	f000 fd6f 	bl	800bcd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b1f2:	e00e      	b.n	800b212 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1fa:	d10a      	bne.n	800b212 <vTaskStartScheduler+0xaa>
	__asm volatile
 800b1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b200:	f383 8811 	msr	BASEPRI, r3
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	60fb      	str	r3, [r7, #12]
}
 800b20e:	bf00      	nop
 800b210:	e7fe      	b.n	800b210 <vTaskStartScheduler+0xa8>
}
 800b212:	bf00      	nop
 800b214:	3718      	adds	r7, #24
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	0800c880 	.word	0x0800c880
 800b220:	0800b7f9 	.word	0x0800b7f9
 800b224:	20000a0c 	.word	0x20000a0c
 800b228:	200008e8 	.word	0x200008e8
 800b22c:	20000050 	.word	0x20000050
 800b230:	20000a08 	.word	0x20000a08
 800b234:	200009f4 	.word	0x200009f4
 800b238:	200009ec 	.word	0x200009ec

0800b23c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b23c:	b480      	push	{r7}
 800b23e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b240:	4b04      	ldr	r3, [pc, #16]	; (800b254 <vTaskSuspendAll+0x18>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	3301      	adds	r3, #1
 800b246:	4a03      	ldr	r2, [pc, #12]	; (800b254 <vTaskSuspendAll+0x18>)
 800b248:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b24a:	bf00      	nop
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr
 800b254:	20000a10 	.word	0x20000a10

0800b258 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b25e:	2300      	movs	r3, #0
 800b260:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b262:	2300      	movs	r3, #0
 800b264:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b266:	4b41      	ldr	r3, [pc, #260]	; (800b36c <xTaskResumeAll+0x114>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10a      	bne.n	800b284 <xTaskResumeAll+0x2c>
	__asm volatile
 800b26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b272:	f383 8811 	msr	BASEPRI, r3
 800b276:	f3bf 8f6f 	isb	sy
 800b27a:	f3bf 8f4f 	dsb	sy
 800b27e:	603b      	str	r3, [r7, #0]
}
 800b280:	bf00      	nop
 800b282:	e7fe      	b.n	800b282 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b284:	f000 fdc6 	bl	800be14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b288:	4b38      	ldr	r3, [pc, #224]	; (800b36c <xTaskResumeAll+0x114>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	3b01      	subs	r3, #1
 800b28e:	4a37      	ldr	r2, [pc, #220]	; (800b36c <xTaskResumeAll+0x114>)
 800b290:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b292:	4b36      	ldr	r3, [pc, #216]	; (800b36c <xTaskResumeAll+0x114>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d161      	bne.n	800b35e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b29a:	4b35      	ldr	r3, [pc, #212]	; (800b370 <xTaskResumeAll+0x118>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d05d      	beq.n	800b35e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2a2:	e02e      	b.n	800b302 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2a4:	4b33      	ldr	r3, [pc, #204]	; (800b374 <xTaskResumeAll+0x11c>)
 800b2a6:	68db      	ldr	r3, [r3, #12]
 800b2a8:	68db      	ldr	r3, [r3, #12]
 800b2aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	3318      	adds	r3, #24
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7ff f939 	bl	800a528 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	3304      	adds	r3, #4
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7ff f934 	bl	800a528 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	409a      	lsls	r2, r3
 800b2c8:	4b2b      	ldr	r3, [pc, #172]	; (800b378 <xTaskResumeAll+0x120>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	4a2a      	ldr	r2, [pc, #168]	; (800b378 <xTaskResumeAll+0x120>)
 800b2d0:	6013      	str	r3, [r2, #0]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	4413      	add	r3, r2
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	4a27      	ldr	r2, [pc, #156]	; (800b37c <xTaskResumeAll+0x124>)
 800b2e0:	441a      	add	r2, r3
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	3304      	adds	r3, #4
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	4610      	mov	r0, r2
 800b2ea:	f7ff f8c0 	bl	800a46e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f2:	4b23      	ldr	r3, [pc, #140]	; (800b380 <xTaskResumeAll+0x128>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d302      	bcc.n	800b302 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b2fc:	4b21      	ldr	r3, [pc, #132]	; (800b384 <xTaskResumeAll+0x12c>)
 800b2fe:	2201      	movs	r2, #1
 800b300:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b302:	4b1c      	ldr	r3, [pc, #112]	; (800b374 <xTaskResumeAll+0x11c>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1cc      	bne.n	800b2a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d001      	beq.n	800b314 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b310:	f000 fb2c 	bl	800b96c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b314:	4b1c      	ldr	r3, [pc, #112]	; (800b388 <xTaskResumeAll+0x130>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d010      	beq.n	800b342 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b320:	f000 f846 	bl	800b3b0 <xTaskIncrementTick>
 800b324:	4603      	mov	r3, r0
 800b326:	2b00      	cmp	r3, #0
 800b328:	d002      	beq.n	800b330 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b32a:	4b16      	ldr	r3, [pc, #88]	; (800b384 <xTaskResumeAll+0x12c>)
 800b32c:	2201      	movs	r2, #1
 800b32e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	3b01      	subs	r3, #1
 800b334:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d1f1      	bne.n	800b320 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b33c:	4b12      	ldr	r3, [pc, #72]	; (800b388 <xTaskResumeAll+0x130>)
 800b33e:	2200      	movs	r2, #0
 800b340:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b342:	4b10      	ldr	r3, [pc, #64]	; (800b384 <xTaskResumeAll+0x12c>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d009      	beq.n	800b35e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b34a:	2301      	movs	r3, #1
 800b34c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b34e:	4b0f      	ldr	r3, [pc, #60]	; (800b38c <xTaskResumeAll+0x134>)
 800b350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b354:	601a      	str	r2, [r3, #0]
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b35e:	f000 fd89 	bl	800be74 <vPortExitCritical>

	return xAlreadyYielded;
 800b362:	68bb      	ldr	r3, [r7, #8]
}
 800b364:	4618      	mov	r0, r3
 800b366:	3710      	adds	r7, #16
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	20000a10 	.word	0x20000a10
 800b370:	200009e8 	.word	0x200009e8
 800b374:	200009a8 	.word	0x200009a8
 800b378:	200009f0 	.word	0x200009f0
 800b37c:	200008ec 	.word	0x200008ec
 800b380:	200008e8 	.word	0x200008e8
 800b384:	200009fc 	.word	0x200009fc
 800b388:	200009f8 	.word	0x200009f8
 800b38c:	e000ed04 	.word	0xe000ed04

0800b390 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b396:	4b05      	ldr	r3, [pc, #20]	; (800b3ac <xTaskGetTickCount+0x1c>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b39c:	687b      	ldr	r3, [r7, #4]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	370c      	adds	r7, #12
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	200009ec 	.word	0x200009ec

0800b3b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b086      	sub	sp, #24
 800b3b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3ba:	4b4e      	ldr	r3, [pc, #312]	; (800b4f4 <xTaskIncrementTick+0x144>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	f040 808e 	bne.w	800b4e0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b3c4:	4b4c      	ldr	r3, [pc, #304]	; (800b4f8 <xTaskIncrementTick+0x148>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b3cc:	4a4a      	ldr	r2, [pc, #296]	; (800b4f8 <xTaskIncrementTick+0x148>)
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d120      	bne.n	800b41a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b3d8:	4b48      	ldr	r3, [pc, #288]	; (800b4fc <xTaskIncrementTick+0x14c>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d00a      	beq.n	800b3f8 <xTaskIncrementTick+0x48>
	__asm volatile
 800b3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e6:	f383 8811 	msr	BASEPRI, r3
 800b3ea:	f3bf 8f6f 	isb	sy
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	603b      	str	r3, [r7, #0]
}
 800b3f4:	bf00      	nop
 800b3f6:	e7fe      	b.n	800b3f6 <xTaskIncrementTick+0x46>
 800b3f8:	4b40      	ldr	r3, [pc, #256]	; (800b4fc <xTaskIncrementTick+0x14c>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	60fb      	str	r3, [r7, #12]
 800b3fe:	4b40      	ldr	r3, [pc, #256]	; (800b500 <xTaskIncrementTick+0x150>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a3e      	ldr	r2, [pc, #248]	; (800b4fc <xTaskIncrementTick+0x14c>)
 800b404:	6013      	str	r3, [r2, #0]
 800b406:	4a3e      	ldr	r2, [pc, #248]	; (800b500 <xTaskIncrementTick+0x150>)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6013      	str	r3, [r2, #0]
 800b40c:	4b3d      	ldr	r3, [pc, #244]	; (800b504 <xTaskIncrementTick+0x154>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	3301      	adds	r3, #1
 800b412:	4a3c      	ldr	r2, [pc, #240]	; (800b504 <xTaskIncrementTick+0x154>)
 800b414:	6013      	str	r3, [r2, #0]
 800b416:	f000 faa9 	bl	800b96c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b41a:	4b3b      	ldr	r3, [pc, #236]	; (800b508 <xTaskIncrementTick+0x158>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	693a      	ldr	r2, [r7, #16]
 800b420:	429a      	cmp	r2, r3
 800b422:	d348      	bcc.n	800b4b6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b424:	4b35      	ldr	r3, [pc, #212]	; (800b4fc <xTaskIncrementTick+0x14c>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d104      	bne.n	800b438 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b42e:	4b36      	ldr	r3, [pc, #216]	; (800b508 <xTaskIncrementTick+0x158>)
 800b430:	f04f 32ff 	mov.w	r2, #4294967295
 800b434:	601a      	str	r2, [r3, #0]
					break;
 800b436:	e03e      	b.n	800b4b6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b438:	4b30      	ldr	r3, [pc, #192]	; (800b4fc <xTaskIncrementTick+0x14c>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b448:	693a      	ldr	r2, [r7, #16]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d203      	bcs.n	800b458 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b450:	4a2d      	ldr	r2, [pc, #180]	; (800b508 <xTaskIncrementTick+0x158>)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b456:	e02e      	b.n	800b4b6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	3304      	adds	r3, #4
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7ff f863 	bl	800a528 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b466:	2b00      	cmp	r3, #0
 800b468:	d004      	beq.n	800b474 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	3318      	adds	r3, #24
 800b46e:	4618      	mov	r0, r3
 800b470:	f7ff f85a 	bl	800a528 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b478:	2201      	movs	r2, #1
 800b47a:	409a      	lsls	r2, r3
 800b47c:	4b23      	ldr	r3, [pc, #140]	; (800b50c <xTaskIncrementTick+0x15c>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4313      	orrs	r3, r2
 800b482:	4a22      	ldr	r2, [pc, #136]	; (800b50c <xTaskIncrementTick+0x15c>)
 800b484:	6013      	str	r3, [r2, #0]
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b48a:	4613      	mov	r3, r2
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	4413      	add	r3, r2
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	4a1f      	ldr	r2, [pc, #124]	; (800b510 <xTaskIncrementTick+0x160>)
 800b494:	441a      	add	r2, r3
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	3304      	adds	r3, #4
 800b49a:	4619      	mov	r1, r3
 800b49c:	4610      	mov	r0, r2
 800b49e:	f7fe ffe6 	bl	800a46e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a6:	4b1b      	ldr	r3, [pc, #108]	; (800b514 <xTaskIncrementTick+0x164>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d3b9      	bcc.n	800b424 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4b4:	e7b6      	b.n	800b424 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b4b6:	4b17      	ldr	r3, [pc, #92]	; (800b514 <xTaskIncrementTick+0x164>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4bc:	4914      	ldr	r1, [pc, #80]	; (800b510 <xTaskIncrementTick+0x160>)
 800b4be:	4613      	mov	r3, r2
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	4413      	add	r3, r2
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	440b      	add	r3, r1
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	d901      	bls.n	800b4d2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b4d2:	4b11      	ldr	r3, [pc, #68]	; (800b518 <xTaskIncrementTick+0x168>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d007      	beq.n	800b4ea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	617b      	str	r3, [r7, #20]
 800b4de:	e004      	b.n	800b4ea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b4e0:	4b0e      	ldr	r3, [pc, #56]	; (800b51c <xTaskIncrementTick+0x16c>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	4a0d      	ldr	r2, [pc, #52]	; (800b51c <xTaskIncrementTick+0x16c>)
 800b4e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b4ea:	697b      	ldr	r3, [r7, #20]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3718      	adds	r7, #24
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}
 800b4f4:	20000a10 	.word	0x20000a10
 800b4f8:	200009ec 	.word	0x200009ec
 800b4fc:	200009a0 	.word	0x200009a0
 800b500:	200009a4 	.word	0x200009a4
 800b504:	20000a00 	.word	0x20000a00
 800b508:	20000a08 	.word	0x20000a08
 800b50c:	200009f0 	.word	0x200009f0
 800b510:	200008ec 	.word	0x200008ec
 800b514:	200008e8 	.word	0x200008e8
 800b518:	200009fc 	.word	0x200009fc
 800b51c:	200009f8 	.word	0x200009f8

0800b520 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b520:	b480      	push	{r7}
 800b522:	b087      	sub	sp, #28
 800b524:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b526:	4b29      	ldr	r3, [pc, #164]	; (800b5cc <vTaskSwitchContext+0xac>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d003      	beq.n	800b536 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b52e:	4b28      	ldr	r3, [pc, #160]	; (800b5d0 <vTaskSwitchContext+0xb0>)
 800b530:	2201      	movs	r2, #1
 800b532:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b534:	e044      	b.n	800b5c0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b536:	4b26      	ldr	r3, [pc, #152]	; (800b5d0 <vTaskSwitchContext+0xb0>)
 800b538:	2200      	movs	r2, #0
 800b53a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b53c:	4b25      	ldr	r3, [pc, #148]	; (800b5d4 <vTaskSwitchContext+0xb4>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	fab3 f383 	clz	r3, r3
 800b548:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b54a:	7afb      	ldrb	r3, [r7, #11]
 800b54c:	f1c3 031f 	rsb	r3, r3, #31
 800b550:	617b      	str	r3, [r7, #20]
 800b552:	4921      	ldr	r1, [pc, #132]	; (800b5d8 <vTaskSwitchContext+0xb8>)
 800b554:	697a      	ldr	r2, [r7, #20]
 800b556:	4613      	mov	r3, r2
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	4413      	add	r3, r2
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	440b      	add	r3, r1
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d10a      	bne.n	800b57c <vTaskSwitchContext+0x5c>
	__asm volatile
 800b566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56a:	f383 8811 	msr	BASEPRI, r3
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f3bf 8f4f 	dsb	sy
 800b576:	607b      	str	r3, [r7, #4]
}
 800b578:	bf00      	nop
 800b57a:	e7fe      	b.n	800b57a <vTaskSwitchContext+0x5a>
 800b57c:	697a      	ldr	r2, [r7, #20]
 800b57e:	4613      	mov	r3, r2
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	4413      	add	r3, r2
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	4a14      	ldr	r2, [pc, #80]	; (800b5d8 <vTaskSwitchContext+0xb8>)
 800b588:	4413      	add	r3, r2
 800b58a:	613b      	str	r3, [r7, #16]
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	685a      	ldr	r2, [r3, #4]
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	605a      	str	r2, [r3, #4]
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	685a      	ldr	r2, [r3, #4]
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	3308      	adds	r3, #8
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d104      	bne.n	800b5ac <vTaskSwitchContext+0x8c>
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	685a      	ldr	r2, [r3, #4]
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	605a      	str	r2, [r3, #4]
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	4a0a      	ldr	r2, [pc, #40]	; (800b5dc <vTaskSwitchContext+0xbc>)
 800b5b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b5b6:	4b09      	ldr	r3, [pc, #36]	; (800b5dc <vTaskSwitchContext+0xbc>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	334c      	adds	r3, #76	; 0x4c
 800b5bc:	4a08      	ldr	r2, [pc, #32]	; (800b5e0 <vTaskSwitchContext+0xc0>)
 800b5be:	6013      	str	r3, [r2, #0]
}
 800b5c0:	bf00      	nop
 800b5c2:	371c      	adds	r7, #28
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr
 800b5cc:	20000a10 	.word	0x20000a10
 800b5d0:	200009fc 	.word	0x200009fc
 800b5d4:	200009f0 	.word	0x200009f0
 800b5d8:	200008ec 	.word	0x200008ec
 800b5dc:	200008e8 	.word	0x200008e8
 800b5e0:	20000050 	.word	0x20000050

0800b5e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d10a      	bne.n	800b60a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5f8:	f383 8811 	msr	BASEPRI, r3
 800b5fc:	f3bf 8f6f 	isb	sy
 800b600:	f3bf 8f4f 	dsb	sy
 800b604:	60fb      	str	r3, [r7, #12]
}
 800b606:	bf00      	nop
 800b608:	e7fe      	b.n	800b608 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b60a:	4b07      	ldr	r3, [pc, #28]	; (800b628 <vTaskPlaceOnEventList+0x44>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	3318      	adds	r3, #24
 800b610:	4619      	mov	r1, r3
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f7fe ff4f 	bl	800a4b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b618:	2101      	movs	r1, #1
 800b61a:	6838      	ldr	r0, [r7, #0]
 800b61c:	f000 fa6a 	bl	800baf4 <prvAddCurrentTaskToDelayedList>
}
 800b620:	bf00      	nop
 800b622:	3710      	adds	r7, #16
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	200008e8 	.word	0x200008e8

0800b62c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d10a      	bne.n	800b658 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b646:	f383 8811 	msr	BASEPRI, r3
 800b64a:	f3bf 8f6f 	isb	sy
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	60fb      	str	r3, [r7, #12]
}
 800b654:	bf00      	nop
 800b656:	e7fe      	b.n	800b656 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	3318      	adds	r3, #24
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fe ff63 	bl	800a528 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b662:	4b1d      	ldr	r3, [pc, #116]	; (800b6d8 <xTaskRemoveFromEventList+0xac>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d11c      	bne.n	800b6a4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	3304      	adds	r3, #4
 800b66e:	4618      	mov	r0, r3
 800b670:	f7fe ff5a 	bl	800a528 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b678:	2201      	movs	r2, #1
 800b67a:	409a      	lsls	r2, r3
 800b67c:	4b17      	ldr	r3, [pc, #92]	; (800b6dc <xTaskRemoveFromEventList+0xb0>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4313      	orrs	r3, r2
 800b682:	4a16      	ldr	r2, [pc, #88]	; (800b6dc <xTaskRemoveFromEventList+0xb0>)
 800b684:	6013      	str	r3, [r2, #0]
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b68a:	4613      	mov	r3, r2
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	4413      	add	r3, r2
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	4a13      	ldr	r2, [pc, #76]	; (800b6e0 <xTaskRemoveFromEventList+0xb4>)
 800b694:	441a      	add	r2, r3
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	3304      	adds	r3, #4
 800b69a:	4619      	mov	r1, r3
 800b69c:	4610      	mov	r0, r2
 800b69e:	f7fe fee6 	bl	800a46e <vListInsertEnd>
 800b6a2:	e005      	b.n	800b6b0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	3318      	adds	r3, #24
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	480e      	ldr	r0, [pc, #56]	; (800b6e4 <xTaskRemoveFromEventList+0xb8>)
 800b6ac:	f7fe fedf 	bl	800a46e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6b4:	4b0c      	ldr	r3, [pc, #48]	; (800b6e8 <xTaskRemoveFromEventList+0xbc>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d905      	bls.n	800b6ca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b6c2:	4b0a      	ldr	r3, [pc, #40]	; (800b6ec <xTaskRemoveFromEventList+0xc0>)
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	601a      	str	r2, [r3, #0]
 800b6c8:	e001      	b.n	800b6ce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b6ce:	697b      	ldr	r3, [r7, #20]
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3718      	adds	r7, #24
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}
 800b6d8:	20000a10 	.word	0x20000a10
 800b6dc:	200009f0 	.word	0x200009f0
 800b6e0:	200008ec 	.word	0x200008ec
 800b6e4:	200009a8 	.word	0x200009a8
 800b6e8:	200008e8 	.word	0x200008e8
 800b6ec:	200009fc 	.word	0x200009fc

0800b6f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b6f8:	4b06      	ldr	r3, [pc, #24]	; (800b714 <vTaskInternalSetTimeOutState+0x24>)
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b700:	4b05      	ldr	r3, [pc, #20]	; (800b718 <vTaskInternalSetTimeOutState+0x28>)
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	605a      	str	r2, [r3, #4]
}
 800b708:	bf00      	nop
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr
 800b714:	20000a00 	.word	0x20000a00
 800b718:	200009ec 	.word	0x200009ec

0800b71c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b088      	sub	sp, #32
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10a      	bne.n	800b742 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b730:	f383 8811 	msr	BASEPRI, r3
 800b734:	f3bf 8f6f 	isb	sy
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	613b      	str	r3, [r7, #16]
}
 800b73e:	bf00      	nop
 800b740:	e7fe      	b.n	800b740 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d10a      	bne.n	800b75e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74c:	f383 8811 	msr	BASEPRI, r3
 800b750:	f3bf 8f6f 	isb	sy
 800b754:	f3bf 8f4f 	dsb	sy
 800b758:	60fb      	str	r3, [r7, #12]
}
 800b75a:	bf00      	nop
 800b75c:	e7fe      	b.n	800b75c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b75e:	f000 fb59 	bl	800be14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b762:	4b1d      	ldr	r3, [pc, #116]	; (800b7d8 <xTaskCheckForTimeOut+0xbc>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	69ba      	ldr	r2, [r7, #24]
 800b76e:	1ad3      	subs	r3, r2, r3
 800b770:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b77a:	d102      	bne.n	800b782 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b77c:	2300      	movs	r3, #0
 800b77e:	61fb      	str	r3, [r7, #28]
 800b780:	e023      	b.n	800b7ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	4b15      	ldr	r3, [pc, #84]	; (800b7dc <xTaskCheckForTimeOut+0xc0>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d007      	beq.n	800b79e <xTaskCheckForTimeOut+0x82>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	69ba      	ldr	r2, [r7, #24]
 800b794:	429a      	cmp	r2, r3
 800b796:	d302      	bcc.n	800b79e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b798:	2301      	movs	r3, #1
 800b79a:	61fb      	str	r3, [r7, #28]
 800b79c:	e015      	b.n	800b7ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	697a      	ldr	r2, [r7, #20]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d20b      	bcs.n	800b7c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	1ad2      	subs	r2, r2, r3
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f7ff ff9b 	bl	800b6f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	61fb      	str	r3, [r7, #28]
 800b7be:	e004      	b.n	800b7ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b7ca:	f000 fb53 	bl	800be74 <vPortExitCritical>

	return xReturn;
 800b7ce:	69fb      	ldr	r3, [r7, #28]
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3720      	adds	r7, #32
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	200009ec 	.word	0x200009ec
 800b7dc:	20000a00 	.word	0x20000a00

0800b7e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b7e4:	4b03      	ldr	r3, [pc, #12]	; (800b7f4 <vTaskMissedYield+0x14>)
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	601a      	str	r2, [r3, #0]
}
 800b7ea:	bf00      	nop
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr
 800b7f4:	200009fc 	.word	0x200009fc

0800b7f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b800:	f000 f852 	bl	800b8a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b804:	4b06      	ldr	r3, [pc, #24]	; (800b820 <prvIdleTask+0x28>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d9f9      	bls.n	800b800 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b80c:	4b05      	ldr	r3, [pc, #20]	; (800b824 <prvIdleTask+0x2c>)
 800b80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b812:	601a      	str	r2, [r3, #0]
 800b814:	f3bf 8f4f 	dsb	sy
 800b818:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b81c:	e7f0      	b.n	800b800 <prvIdleTask+0x8>
 800b81e:	bf00      	nop
 800b820:	200008ec 	.word	0x200008ec
 800b824:	e000ed04 	.word	0xe000ed04

0800b828 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b82e:	2300      	movs	r3, #0
 800b830:	607b      	str	r3, [r7, #4]
 800b832:	e00c      	b.n	800b84e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	4613      	mov	r3, r2
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	4413      	add	r3, r2
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	4a12      	ldr	r2, [pc, #72]	; (800b888 <prvInitialiseTaskLists+0x60>)
 800b840:	4413      	add	r3, r2
 800b842:	4618      	mov	r0, r3
 800b844:	f7fe fde6 	bl	800a414 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	3301      	adds	r3, #1
 800b84c:	607b      	str	r3, [r7, #4]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2b06      	cmp	r3, #6
 800b852:	d9ef      	bls.n	800b834 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b854:	480d      	ldr	r0, [pc, #52]	; (800b88c <prvInitialiseTaskLists+0x64>)
 800b856:	f7fe fddd 	bl	800a414 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b85a:	480d      	ldr	r0, [pc, #52]	; (800b890 <prvInitialiseTaskLists+0x68>)
 800b85c:	f7fe fdda 	bl	800a414 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b860:	480c      	ldr	r0, [pc, #48]	; (800b894 <prvInitialiseTaskLists+0x6c>)
 800b862:	f7fe fdd7 	bl	800a414 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b866:	480c      	ldr	r0, [pc, #48]	; (800b898 <prvInitialiseTaskLists+0x70>)
 800b868:	f7fe fdd4 	bl	800a414 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b86c:	480b      	ldr	r0, [pc, #44]	; (800b89c <prvInitialiseTaskLists+0x74>)
 800b86e:	f7fe fdd1 	bl	800a414 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b872:	4b0b      	ldr	r3, [pc, #44]	; (800b8a0 <prvInitialiseTaskLists+0x78>)
 800b874:	4a05      	ldr	r2, [pc, #20]	; (800b88c <prvInitialiseTaskLists+0x64>)
 800b876:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b878:	4b0a      	ldr	r3, [pc, #40]	; (800b8a4 <prvInitialiseTaskLists+0x7c>)
 800b87a:	4a05      	ldr	r2, [pc, #20]	; (800b890 <prvInitialiseTaskLists+0x68>)
 800b87c:	601a      	str	r2, [r3, #0]
}
 800b87e:	bf00      	nop
 800b880:	3708      	adds	r7, #8
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	200008ec 	.word	0x200008ec
 800b88c:	20000978 	.word	0x20000978
 800b890:	2000098c 	.word	0x2000098c
 800b894:	200009a8 	.word	0x200009a8
 800b898:	200009bc 	.word	0x200009bc
 800b89c:	200009d4 	.word	0x200009d4
 800b8a0:	200009a0 	.word	0x200009a0
 800b8a4:	200009a4 	.word	0x200009a4

0800b8a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8ae:	e019      	b.n	800b8e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b8b0:	f000 fab0 	bl	800be14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8b4:	4b10      	ldr	r3, [pc, #64]	; (800b8f8 <prvCheckTasksWaitingTermination+0x50>)
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	3304      	adds	r3, #4
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7fe fe31 	bl	800a528 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b8c6:	4b0d      	ldr	r3, [pc, #52]	; (800b8fc <prvCheckTasksWaitingTermination+0x54>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	4a0b      	ldr	r2, [pc, #44]	; (800b8fc <prvCheckTasksWaitingTermination+0x54>)
 800b8ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b8d0:	4b0b      	ldr	r3, [pc, #44]	; (800b900 <prvCheckTasksWaitingTermination+0x58>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	3b01      	subs	r3, #1
 800b8d6:	4a0a      	ldr	r2, [pc, #40]	; (800b900 <prvCheckTasksWaitingTermination+0x58>)
 800b8d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b8da:	f000 facb 	bl	800be74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 f810 	bl	800b904 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8e4:	4b06      	ldr	r3, [pc, #24]	; (800b900 <prvCheckTasksWaitingTermination+0x58>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1e1      	bne.n	800b8b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b8ec:	bf00      	nop
 800b8ee:	bf00      	nop
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	200009bc 	.word	0x200009bc
 800b8fc:	200009e8 	.word	0x200009e8
 800b900:	200009d0 	.word	0x200009d0

0800b904 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	334c      	adds	r3, #76	; 0x4c
 800b910:	4618      	mov	r0, r3
 800b912:	f000 fddf 	bl	800c4d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d108      	bne.n	800b932 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b924:	4618      	mov	r0, r3
 800b926:	f000 fc23 	bl	800c170 <vPortFree>
				vPortFree( pxTCB );
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 fc20 	bl	800c170 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b930:	e018      	b.n	800b964 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d103      	bne.n	800b944 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 fc17 	bl	800c170 <vPortFree>
	}
 800b942:	e00f      	b.n	800b964 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b94a:	2b02      	cmp	r3, #2
 800b94c:	d00a      	beq.n	800b964 <prvDeleteTCB+0x60>
	__asm volatile
 800b94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b952:	f383 8811 	msr	BASEPRI, r3
 800b956:	f3bf 8f6f 	isb	sy
 800b95a:	f3bf 8f4f 	dsb	sy
 800b95e:	60fb      	str	r3, [r7, #12]
}
 800b960:	bf00      	nop
 800b962:	e7fe      	b.n	800b962 <prvDeleteTCB+0x5e>
	}
 800b964:	bf00      	nop
 800b966:	3710      	adds	r7, #16
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b972:	4b0c      	ldr	r3, [pc, #48]	; (800b9a4 <prvResetNextTaskUnblockTime+0x38>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d104      	bne.n	800b986 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b97c:	4b0a      	ldr	r3, [pc, #40]	; (800b9a8 <prvResetNextTaskUnblockTime+0x3c>)
 800b97e:	f04f 32ff 	mov.w	r2, #4294967295
 800b982:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b984:	e008      	b.n	800b998 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b986:	4b07      	ldr	r3, [pc, #28]	; (800b9a4 <prvResetNextTaskUnblockTime+0x38>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	68db      	ldr	r3, [r3, #12]
 800b98e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	4a04      	ldr	r2, [pc, #16]	; (800b9a8 <prvResetNextTaskUnblockTime+0x3c>)
 800b996:	6013      	str	r3, [r2, #0]
}
 800b998:	bf00      	nop
 800b99a:	370c      	adds	r7, #12
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr
 800b9a4:	200009a0 	.word	0x200009a0
 800b9a8:	20000a08 	.word	0x20000a08

0800b9ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b9b2:	4b0b      	ldr	r3, [pc, #44]	; (800b9e0 <xTaskGetSchedulerState+0x34>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d102      	bne.n	800b9c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	607b      	str	r3, [r7, #4]
 800b9be:	e008      	b.n	800b9d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9c0:	4b08      	ldr	r3, [pc, #32]	; (800b9e4 <xTaskGetSchedulerState+0x38>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d102      	bne.n	800b9ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b9c8:	2302      	movs	r3, #2
 800b9ca:	607b      	str	r3, [r7, #4]
 800b9cc:	e001      	b.n	800b9d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b9d2:	687b      	ldr	r3, [r7, #4]
	}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	370c      	adds	r7, #12
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr
 800b9e0:	200009f4 	.word	0x200009f4
 800b9e4:	20000a10 	.word	0x20000a10

0800b9e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b086      	sub	sp, #24
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d06e      	beq.n	800badc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b9fe:	4b3a      	ldr	r3, [pc, #232]	; (800bae8 <xTaskPriorityDisinherit+0x100>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	693a      	ldr	r2, [r7, #16]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d00a      	beq.n	800ba1e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ba08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0c:	f383 8811 	msr	BASEPRI, r3
 800ba10:	f3bf 8f6f 	isb	sy
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	60fb      	str	r3, [r7, #12]
}
 800ba1a:	bf00      	nop
 800ba1c:	e7fe      	b.n	800ba1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10a      	bne.n	800ba3c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ba26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2a:	f383 8811 	msr	BASEPRI, r3
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	f3bf 8f4f 	dsb	sy
 800ba36:	60bb      	str	r3, [r7, #8]
}
 800ba38:	bf00      	nop
 800ba3a:	e7fe      	b.n	800ba3a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba40:	1e5a      	subs	r2, r3, #1
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d044      	beq.n	800badc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d140      	bne.n	800badc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	3304      	adds	r3, #4
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7fe fd62 	bl	800a528 <uxListRemove>
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d115      	bne.n	800ba96 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba6e:	491f      	ldr	r1, [pc, #124]	; (800baec <xTaskPriorityDisinherit+0x104>)
 800ba70:	4613      	mov	r3, r2
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	4413      	add	r3, r2
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	440b      	add	r3, r1
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d10a      	bne.n	800ba96 <xTaskPriorityDisinherit+0xae>
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba84:	2201      	movs	r2, #1
 800ba86:	fa02 f303 	lsl.w	r3, r2, r3
 800ba8a:	43da      	mvns	r2, r3
 800ba8c:	4b18      	ldr	r3, [pc, #96]	; (800baf0 <xTaskPriorityDisinherit+0x108>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4013      	ands	r3, r2
 800ba92:	4a17      	ldr	r2, [pc, #92]	; (800baf0 <xTaskPriorityDisinherit+0x108>)
 800ba94:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa2:	f1c3 0207 	rsb	r2, r3, #7
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baae:	2201      	movs	r2, #1
 800bab0:	409a      	lsls	r2, r3
 800bab2:	4b0f      	ldr	r3, [pc, #60]	; (800baf0 <xTaskPriorityDisinherit+0x108>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4313      	orrs	r3, r2
 800bab8:	4a0d      	ldr	r2, [pc, #52]	; (800baf0 <xTaskPriorityDisinherit+0x108>)
 800baba:	6013      	str	r3, [r2, #0]
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bac0:	4613      	mov	r3, r2
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	4413      	add	r3, r2
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	4a08      	ldr	r2, [pc, #32]	; (800baec <xTaskPriorityDisinherit+0x104>)
 800baca:	441a      	add	r2, r3
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	3304      	adds	r3, #4
 800bad0:	4619      	mov	r1, r3
 800bad2:	4610      	mov	r0, r2
 800bad4:	f7fe fccb 	bl	800a46e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bad8:	2301      	movs	r3, #1
 800bada:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800badc:	697b      	ldr	r3, [r7, #20]
	}
 800bade:	4618      	mov	r0, r3
 800bae0:	3718      	adds	r7, #24
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	200008e8 	.word	0x200008e8
 800baec:	200008ec 	.word	0x200008ec
 800baf0:	200009f0 	.word	0x200009f0

0800baf4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bafe:	4b29      	ldr	r3, [pc, #164]	; (800bba4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb04:	4b28      	ldr	r3, [pc, #160]	; (800bba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	3304      	adds	r3, #4
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7fe fd0c 	bl	800a528 <uxListRemove>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d10b      	bne.n	800bb2e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bb16:	4b24      	ldr	r3, [pc, #144]	; (800bba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	fa02 f303 	lsl.w	r3, r2, r3
 800bb22:	43da      	mvns	r2, r3
 800bb24:	4b21      	ldr	r3, [pc, #132]	; (800bbac <prvAddCurrentTaskToDelayedList+0xb8>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4013      	ands	r3, r2
 800bb2a:	4a20      	ldr	r2, [pc, #128]	; (800bbac <prvAddCurrentTaskToDelayedList+0xb8>)
 800bb2c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb34:	d10a      	bne.n	800bb4c <prvAddCurrentTaskToDelayedList+0x58>
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d007      	beq.n	800bb4c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb3c:	4b1a      	ldr	r3, [pc, #104]	; (800bba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	3304      	adds	r3, #4
 800bb42:	4619      	mov	r1, r3
 800bb44:	481a      	ldr	r0, [pc, #104]	; (800bbb0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bb46:	f7fe fc92 	bl	800a46e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bb4a:	e026      	b.n	800bb9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	4413      	add	r3, r2
 800bb52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bb54:	4b14      	ldr	r3, [pc, #80]	; (800bba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bb5c:	68ba      	ldr	r2, [r7, #8]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d209      	bcs.n	800bb78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb64:	4b13      	ldr	r3, [pc, #76]	; (800bbb4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	4b0f      	ldr	r3, [pc, #60]	; (800bba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	3304      	adds	r3, #4
 800bb6e:	4619      	mov	r1, r3
 800bb70:	4610      	mov	r0, r2
 800bb72:	f7fe fca0 	bl	800a4b6 <vListInsert>
}
 800bb76:	e010      	b.n	800bb9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb78:	4b0f      	ldr	r3, [pc, #60]	; (800bbb8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	4b0a      	ldr	r3, [pc, #40]	; (800bba8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	3304      	adds	r3, #4
 800bb82:	4619      	mov	r1, r3
 800bb84:	4610      	mov	r0, r2
 800bb86:	f7fe fc96 	bl	800a4b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bb8a:	4b0c      	ldr	r3, [pc, #48]	; (800bbbc <prvAddCurrentTaskToDelayedList+0xc8>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d202      	bcs.n	800bb9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bb94:	4a09      	ldr	r2, [pc, #36]	; (800bbbc <prvAddCurrentTaskToDelayedList+0xc8>)
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	6013      	str	r3, [r2, #0]
}
 800bb9a:	bf00      	nop
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	200009ec 	.word	0x200009ec
 800bba8:	200008e8 	.word	0x200008e8
 800bbac:	200009f0 	.word	0x200009f0
 800bbb0:	200009d4 	.word	0x200009d4
 800bbb4:	200009a4 	.word	0x200009a4
 800bbb8:	200009a0 	.word	0x200009a0
 800bbbc:	20000a08 	.word	0x20000a08

0800bbc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	3b04      	subs	r3, #4
 800bbd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bbd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	3b04      	subs	r3, #4
 800bbde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	f023 0201 	bic.w	r2, r3, #1
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	3b04      	subs	r3, #4
 800bbee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bbf0:	4a0c      	ldr	r2, [pc, #48]	; (800bc24 <pxPortInitialiseStack+0x64>)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	3b14      	subs	r3, #20
 800bbfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	3b04      	subs	r3, #4
 800bc06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f06f 0202 	mvn.w	r2, #2
 800bc0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	3b20      	subs	r3, #32
 800bc14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc16:	68fb      	ldr	r3, [r7, #12]
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3714      	adds	r7, #20
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr
 800bc24:	0800bc29 	.word	0x0800bc29

0800bc28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc32:	4b12      	ldr	r3, [pc, #72]	; (800bc7c <prvTaskExitError+0x54>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc3a:	d00a      	beq.n	800bc52 <prvTaskExitError+0x2a>
	__asm volatile
 800bc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc40:	f383 8811 	msr	BASEPRI, r3
 800bc44:	f3bf 8f6f 	isb	sy
 800bc48:	f3bf 8f4f 	dsb	sy
 800bc4c:	60fb      	str	r3, [r7, #12]
}
 800bc4e:	bf00      	nop
 800bc50:	e7fe      	b.n	800bc50 <prvTaskExitError+0x28>
	__asm volatile
 800bc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc56:	f383 8811 	msr	BASEPRI, r3
 800bc5a:	f3bf 8f6f 	isb	sy
 800bc5e:	f3bf 8f4f 	dsb	sy
 800bc62:	60bb      	str	r3, [r7, #8]
}
 800bc64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc66:	bf00      	nop
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d0fc      	beq.n	800bc68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc6e:	bf00      	nop
 800bc70:	bf00      	nop
 800bc72:	3714      	adds	r7, #20
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr
 800bc7c:	2000004c 	.word	0x2000004c

0800bc80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc80:	4b07      	ldr	r3, [pc, #28]	; (800bca0 <pxCurrentTCBConst2>)
 800bc82:	6819      	ldr	r1, [r3, #0]
 800bc84:	6808      	ldr	r0, [r1, #0]
 800bc86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc8a:	f380 8809 	msr	PSP, r0
 800bc8e:	f3bf 8f6f 	isb	sy
 800bc92:	f04f 0000 	mov.w	r0, #0
 800bc96:	f380 8811 	msr	BASEPRI, r0
 800bc9a:	4770      	bx	lr
 800bc9c:	f3af 8000 	nop.w

0800bca0 <pxCurrentTCBConst2>:
 800bca0:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bca4:	bf00      	nop
 800bca6:	bf00      	nop

0800bca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bca8:	4808      	ldr	r0, [pc, #32]	; (800bccc <prvPortStartFirstTask+0x24>)
 800bcaa:	6800      	ldr	r0, [r0, #0]
 800bcac:	6800      	ldr	r0, [r0, #0]
 800bcae:	f380 8808 	msr	MSP, r0
 800bcb2:	f04f 0000 	mov.w	r0, #0
 800bcb6:	f380 8814 	msr	CONTROL, r0
 800bcba:	b662      	cpsie	i
 800bcbc:	b661      	cpsie	f
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	f3bf 8f6f 	isb	sy
 800bcc6:	df00      	svc	0
 800bcc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bcca:	bf00      	nop
 800bccc:	e000ed08 	.word	0xe000ed08

0800bcd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b086      	sub	sp, #24
 800bcd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bcd6:	4b46      	ldr	r3, [pc, #280]	; (800bdf0 <xPortStartScheduler+0x120>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a46      	ldr	r2, [pc, #280]	; (800bdf4 <xPortStartScheduler+0x124>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d10a      	bne.n	800bcf6 <xPortStartScheduler+0x26>
	__asm volatile
 800bce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	613b      	str	r3, [r7, #16]
}
 800bcf2:	bf00      	nop
 800bcf4:	e7fe      	b.n	800bcf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bcf6:	4b3e      	ldr	r3, [pc, #248]	; (800bdf0 <xPortStartScheduler+0x120>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a3f      	ldr	r2, [pc, #252]	; (800bdf8 <xPortStartScheduler+0x128>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d10a      	bne.n	800bd16 <xPortStartScheduler+0x46>
	__asm volatile
 800bd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd04:	f383 8811 	msr	BASEPRI, r3
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	60fb      	str	r3, [r7, #12]
}
 800bd12:	bf00      	nop
 800bd14:	e7fe      	b.n	800bd14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd16:	4b39      	ldr	r3, [pc, #228]	; (800bdfc <xPortStartScheduler+0x12c>)
 800bd18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	22ff      	movs	r2, #255	; 0xff
 800bd26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd30:	78fb      	ldrb	r3, [r7, #3]
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bd38:	b2da      	uxtb	r2, r3
 800bd3a:	4b31      	ldr	r3, [pc, #196]	; (800be00 <xPortStartScheduler+0x130>)
 800bd3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bd3e:	4b31      	ldr	r3, [pc, #196]	; (800be04 <xPortStartScheduler+0x134>)
 800bd40:	2207      	movs	r2, #7
 800bd42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd44:	e009      	b.n	800bd5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bd46:	4b2f      	ldr	r3, [pc, #188]	; (800be04 <xPortStartScheduler+0x134>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	4a2d      	ldr	r2, [pc, #180]	; (800be04 <xPortStartScheduler+0x134>)
 800bd4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd50:	78fb      	ldrb	r3, [r7, #3]
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	005b      	lsls	r3, r3, #1
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd5a:	78fb      	ldrb	r3, [r7, #3]
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd62:	2b80      	cmp	r3, #128	; 0x80
 800bd64:	d0ef      	beq.n	800bd46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd66:	4b27      	ldr	r3, [pc, #156]	; (800be04 <xPortStartScheduler+0x134>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f1c3 0307 	rsb	r3, r3, #7
 800bd6e:	2b04      	cmp	r3, #4
 800bd70:	d00a      	beq.n	800bd88 <xPortStartScheduler+0xb8>
	__asm volatile
 800bd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd76:	f383 8811 	msr	BASEPRI, r3
 800bd7a:	f3bf 8f6f 	isb	sy
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	60bb      	str	r3, [r7, #8]
}
 800bd84:	bf00      	nop
 800bd86:	e7fe      	b.n	800bd86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd88:	4b1e      	ldr	r3, [pc, #120]	; (800be04 <xPortStartScheduler+0x134>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	021b      	lsls	r3, r3, #8
 800bd8e:	4a1d      	ldr	r2, [pc, #116]	; (800be04 <xPortStartScheduler+0x134>)
 800bd90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd92:	4b1c      	ldr	r3, [pc, #112]	; (800be04 <xPortStartScheduler+0x134>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd9a:	4a1a      	ldr	r2, [pc, #104]	; (800be04 <xPortStartScheduler+0x134>)
 800bd9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	b2da      	uxtb	r2, r3
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bda6:	4b18      	ldr	r3, [pc, #96]	; (800be08 <xPortStartScheduler+0x138>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a17      	ldr	r2, [pc, #92]	; (800be08 <xPortStartScheduler+0x138>)
 800bdac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bdb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bdb2:	4b15      	ldr	r3, [pc, #84]	; (800be08 <xPortStartScheduler+0x138>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a14      	ldr	r2, [pc, #80]	; (800be08 <xPortStartScheduler+0x138>)
 800bdb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bdbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bdbe:	f000 f8dd 	bl	800bf7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bdc2:	4b12      	ldr	r3, [pc, #72]	; (800be0c <xPortStartScheduler+0x13c>)
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bdc8:	f000 f8fc 	bl	800bfc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bdcc:	4b10      	ldr	r3, [pc, #64]	; (800be10 <xPortStartScheduler+0x140>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a0f      	ldr	r2, [pc, #60]	; (800be10 <xPortStartScheduler+0x140>)
 800bdd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bdd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bdd8:	f7ff ff66 	bl	800bca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bddc:	f7ff fba0 	bl	800b520 <vTaskSwitchContext>
	prvTaskExitError();
 800bde0:	f7ff ff22 	bl	800bc28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bde4:	2300      	movs	r3, #0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3718      	adds	r7, #24
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	e000ed00 	.word	0xe000ed00
 800bdf4:	410fc271 	.word	0x410fc271
 800bdf8:	410fc270 	.word	0x410fc270
 800bdfc:	e000e400 	.word	0xe000e400
 800be00:	20000a14 	.word	0x20000a14
 800be04:	20000a18 	.word	0x20000a18
 800be08:	e000ed20 	.word	0xe000ed20
 800be0c:	2000004c 	.word	0x2000004c
 800be10:	e000ef34 	.word	0xe000ef34

0800be14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
	__asm volatile
 800be1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1e:	f383 8811 	msr	BASEPRI, r3
 800be22:	f3bf 8f6f 	isb	sy
 800be26:	f3bf 8f4f 	dsb	sy
 800be2a:	607b      	str	r3, [r7, #4]
}
 800be2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be2e:	4b0f      	ldr	r3, [pc, #60]	; (800be6c <vPortEnterCritical+0x58>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	3301      	adds	r3, #1
 800be34:	4a0d      	ldr	r2, [pc, #52]	; (800be6c <vPortEnterCritical+0x58>)
 800be36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be38:	4b0c      	ldr	r3, [pc, #48]	; (800be6c <vPortEnterCritical+0x58>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d10f      	bne.n	800be60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be40:	4b0b      	ldr	r3, [pc, #44]	; (800be70 <vPortEnterCritical+0x5c>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	b2db      	uxtb	r3, r3
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00a      	beq.n	800be60 <vPortEnterCritical+0x4c>
	__asm volatile
 800be4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4e:	f383 8811 	msr	BASEPRI, r3
 800be52:	f3bf 8f6f 	isb	sy
 800be56:	f3bf 8f4f 	dsb	sy
 800be5a:	603b      	str	r3, [r7, #0]
}
 800be5c:	bf00      	nop
 800be5e:	e7fe      	b.n	800be5e <vPortEnterCritical+0x4a>
	}
}
 800be60:	bf00      	nop
 800be62:	370c      	adds	r7, #12
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr
 800be6c:	2000004c 	.word	0x2000004c
 800be70:	e000ed04 	.word	0xe000ed04

0800be74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be7a:	4b12      	ldr	r3, [pc, #72]	; (800bec4 <vPortExitCritical+0x50>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d10a      	bne.n	800be98 <vPortExitCritical+0x24>
	__asm volatile
 800be82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be86:	f383 8811 	msr	BASEPRI, r3
 800be8a:	f3bf 8f6f 	isb	sy
 800be8e:	f3bf 8f4f 	dsb	sy
 800be92:	607b      	str	r3, [r7, #4]
}
 800be94:	bf00      	nop
 800be96:	e7fe      	b.n	800be96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800be98:	4b0a      	ldr	r3, [pc, #40]	; (800bec4 <vPortExitCritical+0x50>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	3b01      	subs	r3, #1
 800be9e:	4a09      	ldr	r2, [pc, #36]	; (800bec4 <vPortExitCritical+0x50>)
 800bea0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bea2:	4b08      	ldr	r3, [pc, #32]	; (800bec4 <vPortExitCritical+0x50>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d105      	bne.n	800beb6 <vPortExitCritical+0x42>
 800beaa:	2300      	movs	r3, #0
 800beac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	f383 8811 	msr	BASEPRI, r3
}
 800beb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800beb6:	bf00      	nop
 800beb8:	370c      	adds	r7, #12
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr
 800bec2:	bf00      	nop
 800bec4:	2000004c 	.word	0x2000004c
	...

0800bed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bed0:	f3ef 8009 	mrs	r0, PSP
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	4b15      	ldr	r3, [pc, #84]	; (800bf30 <pxCurrentTCBConst>)
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	f01e 0f10 	tst.w	lr, #16
 800bee0:	bf08      	it	eq
 800bee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beea:	6010      	str	r0, [r2, #0]
 800beec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bef4:	f380 8811 	msr	BASEPRI, r0
 800bef8:	f3bf 8f4f 	dsb	sy
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f7ff fb0e 	bl	800b520 <vTaskSwitchContext>
 800bf04:	f04f 0000 	mov.w	r0, #0
 800bf08:	f380 8811 	msr	BASEPRI, r0
 800bf0c:	bc09      	pop	{r0, r3}
 800bf0e:	6819      	ldr	r1, [r3, #0]
 800bf10:	6808      	ldr	r0, [r1, #0]
 800bf12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf16:	f01e 0f10 	tst.w	lr, #16
 800bf1a:	bf08      	it	eq
 800bf1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf20:	f380 8809 	msr	PSP, r0
 800bf24:	f3bf 8f6f 	isb	sy
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	f3af 8000 	nop.w

0800bf30 <pxCurrentTCBConst>:
 800bf30:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf34:	bf00      	nop
 800bf36:	bf00      	nop

0800bf38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf42:	f383 8811 	msr	BASEPRI, r3
 800bf46:	f3bf 8f6f 	isb	sy
 800bf4a:	f3bf 8f4f 	dsb	sy
 800bf4e:	607b      	str	r3, [r7, #4]
}
 800bf50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf52:	f7ff fa2d 	bl	800b3b0 <xTaskIncrementTick>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d003      	beq.n	800bf64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf5c:	4b06      	ldr	r3, [pc, #24]	; (800bf78 <SysTick_Handler+0x40>)
 800bf5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf62:	601a      	str	r2, [r3, #0]
 800bf64:	2300      	movs	r3, #0
 800bf66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	f383 8811 	msr	BASEPRI, r3
}
 800bf6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf70:	bf00      	nop
 800bf72:	3708      	adds	r7, #8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	e000ed04 	.word	0xe000ed04

0800bf7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf80:	4b0b      	ldr	r3, [pc, #44]	; (800bfb0 <vPortSetupTimerInterrupt+0x34>)
 800bf82:	2200      	movs	r2, #0
 800bf84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf86:	4b0b      	ldr	r3, [pc, #44]	; (800bfb4 <vPortSetupTimerInterrupt+0x38>)
 800bf88:	2200      	movs	r2, #0
 800bf8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf8c:	4b0a      	ldr	r3, [pc, #40]	; (800bfb8 <vPortSetupTimerInterrupt+0x3c>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a0a      	ldr	r2, [pc, #40]	; (800bfbc <vPortSetupTimerInterrupt+0x40>)
 800bf92:	fba2 2303 	umull	r2, r3, r2, r3
 800bf96:	099b      	lsrs	r3, r3, #6
 800bf98:	4a09      	ldr	r2, [pc, #36]	; (800bfc0 <vPortSetupTimerInterrupt+0x44>)
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf9e:	4b04      	ldr	r3, [pc, #16]	; (800bfb0 <vPortSetupTimerInterrupt+0x34>)
 800bfa0:	2207      	movs	r2, #7
 800bfa2:	601a      	str	r2, [r3, #0]
}
 800bfa4:	bf00      	nop
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop
 800bfb0:	e000e010 	.word	0xe000e010
 800bfb4:	e000e018 	.word	0xe000e018
 800bfb8:	20000040 	.word	0x20000040
 800bfbc:	10624dd3 	.word	0x10624dd3
 800bfc0:	e000e014 	.word	0xe000e014

0800bfc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bfc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bfd4 <vPortEnableVFP+0x10>
 800bfc8:	6801      	ldr	r1, [r0, #0]
 800bfca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bfce:	6001      	str	r1, [r0, #0]
 800bfd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bfd2:	bf00      	nop
 800bfd4:	e000ed88 	.word	0xe000ed88

0800bfd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b08a      	sub	sp, #40	; 0x28
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bfe4:	f7ff f92a 	bl	800b23c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bfe8:	4b5b      	ldr	r3, [pc, #364]	; (800c158 <pvPortMalloc+0x180>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d101      	bne.n	800bff4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bff0:	f000 f920 	bl	800c234 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bff4:	4b59      	ldr	r3, [pc, #356]	; (800c15c <pvPortMalloc+0x184>)
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	4013      	ands	r3, r2
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	f040 8093 	bne.w	800c128 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d01d      	beq.n	800c044 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c008:	2208      	movs	r2, #8
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	4413      	add	r3, r2
 800c00e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f003 0307 	and.w	r3, r3, #7
 800c016:	2b00      	cmp	r3, #0
 800c018:	d014      	beq.n	800c044 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f023 0307 	bic.w	r3, r3, #7
 800c020:	3308      	adds	r3, #8
 800c022:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f003 0307 	and.w	r3, r3, #7
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00a      	beq.n	800c044 <pvPortMalloc+0x6c>
	__asm volatile
 800c02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c032:	f383 8811 	msr	BASEPRI, r3
 800c036:	f3bf 8f6f 	isb	sy
 800c03a:	f3bf 8f4f 	dsb	sy
 800c03e:	617b      	str	r3, [r7, #20]
}
 800c040:	bf00      	nop
 800c042:	e7fe      	b.n	800c042 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d06e      	beq.n	800c128 <pvPortMalloc+0x150>
 800c04a:	4b45      	ldr	r3, [pc, #276]	; (800c160 <pvPortMalloc+0x188>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	429a      	cmp	r2, r3
 800c052:	d869      	bhi.n	800c128 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c054:	4b43      	ldr	r3, [pc, #268]	; (800c164 <pvPortMalloc+0x18c>)
 800c056:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c058:	4b42      	ldr	r3, [pc, #264]	; (800c164 <pvPortMalloc+0x18c>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c05e:	e004      	b.n	800c06a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c062:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	429a      	cmp	r2, r3
 800c072:	d903      	bls.n	800c07c <pvPortMalloc+0xa4>
 800c074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d1f1      	bne.n	800c060 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c07c:	4b36      	ldr	r3, [pc, #216]	; (800c158 <pvPortMalloc+0x180>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c082:	429a      	cmp	r2, r3
 800c084:	d050      	beq.n	800c128 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c086:	6a3b      	ldr	r3, [r7, #32]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2208      	movs	r2, #8
 800c08c:	4413      	add	r3, r2
 800c08e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	6a3b      	ldr	r3, [r7, #32]
 800c096:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09a:	685a      	ldr	r2, [r3, #4]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	1ad2      	subs	r2, r2, r3
 800c0a0:	2308      	movs	r3, #8
 800c0a2:	005b      	lsls	r3, r3, #1
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d91f      	bls.n	800c0e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c0a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4413      	add	r3, r2
 800c0ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0b0:	69bb      	ldr	r3, [r7, #24]
 800c0b2:	f003 0307 	and.w	r3, r3, #7
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00a      	beq.n	800c0d0 <pvPortMalloc+0xf8>
	__asm volatile
 800c0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0be:	f383 8811 	msr	BASEPRI, r3
 800c0c2:	f3bf 8f6f 	isb	sy
 800c0c6:	f3bf 8f4f 	dsb	sy
 800c0ca:	613b      	str	r3, [r7, #16]
}
 800c0cc:	bf00      	nop
 800c0ce:	e7fe      	b.n	800c0ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d2:	685a      	ldr	r2, [r3, #4]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	1ad2      	subs	r2, r2, r3
 800c0d8:	69bb      	ldr	r3, [r7, #24]
 800c0da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c0e2:	69b8      	ldr	r0, [r7, #24]
 800c0e4:	f000 f908 	bl	800c2f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c0e8:	4b1d      	ldr	r3, [pc, #116]	; (800c160 <pvPortMalloc+0x188>)
 800c0ea:	681a      	ldr	r2, [r3, #0]
 800c0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	1ad3      	subs	r3, r2, r3
 800c0f2:	4a1b      	ldr	r2, [pc, #108]	; (800c160 <pvPortMalloc+0x188>)
 800c0f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c0f6:	4b1a      	ldr	r3, [pc, #104]	; (800c160 <pvPortMalloc+0x188>)
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	4b1b      	ldr	r3, [pc, #108]	; (800c168 <pvPortMalloc+0x190>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d203      	bcs.n	800c10a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c102:	4b17      	ldr	r3, [pc, #92]	; (800c160 <pvPortMalloc+0x188>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4a18      	ldr	r2, [pc, #96]	; (800c168 <pvPortMalloc+0x190>)
 800c108:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10c:	685a      	ldr	r2, [r3, #4]
 800c10e:	4b13      	ldr	r3, [pc, #76]	; (800c15c <pvPortMalloc+0x184>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	431a      	orrs	r2, r3
 800c114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c116:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11a:	2200      	movs	r2, #0
 800c11c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c11e:	4b13      	ldr	r3, [pc, #76]	; (800c16c <pvPortMalloc+0x194>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	3301      	adds	r3, #1
 800c124:	4a11      	ldr	r2, [pc, #68]	; (800c16c <pvPortMalloc+0x194>)
 800c126:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c128:	f7ff f896 	bl	800b258 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	f003 0307 	and.w	r3, r3, #7
 800c132:	2b00      	cmp	r3, #0
 800c134:	d00a      	beq.n	800c14c <pvPortMalloc+0x174>
	__asm volatile
 800c136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13a:	f383 8811 	msr	BASEPRI, r3
 800c13e:	f3bf 8f6f 	isb	sy
 800c142:	f3bf 8f4f 	dsb	sy
 800c146:	60fb      	str	r3, [r7, #12]
}
 800c148:	bf00      	nop
 800c14a:	e7fe      	b.n	800c14a <pvPortMalloc+0x172>
	return pvReturn;
 800c14c:	69fb      	ldr	r3, [r7, #28]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3728      	adds	r7, #40	; 0x28
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	20010424 	.word	0x20010424
 800c15c:	20010438 	.word	0x20010438
 800c160:	20010428 	.word	0x20010428
 800c164:	2001041c 	.word	0x2001041c
 800c168:	2001042c 	.word	0x2001042c
 800c16c:	20010430 	.word	0x20010430

0800c170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b086      	sub	sp, #24
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d04d      	beq.n	800c21e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c182:	2308      	movs	r3, #8
 800c184:	425b      	negs	r3, r3
 800c186:	697a      	ldr	r2, [r7, #20]
 800c188:	4413      	add	r3, r2
 800c18a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	685a      	ldr	r2, [r3, #4]
 800c194:	4b24      	ldr	r3, [pc, #144]	; (800c228 <vPortFree+0xb8>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4013      	ands	r3, r2
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d10a      	bne.n	800c1b4 <vPortFree+0x44>
	__asm volatile
 800c19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	60fb      	str	r3, [r7, #12]
}
 800c1b0:	bf00      	nop
 800c1b2:	e7fe      	b.n	800c1b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d00a      	beq.n	800c1d2 <vPortFree+0x62>
	__asm volatile
 800c1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	60bb      	str	r3, [r7, #8]
}
 800c1ce:	bf00      	nop
 800c1d0:	e7fe      	b.n	800c1d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	685a      	ldr	r2, [r3, #4]
 800c1d6:	4b14      	ldr	r3, [pc, #80]	; (800c228 <vPortFree+0xb8>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4013      	ands	r3, r2
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d01e      	beq.n	800c21e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d11a      	bne.n	800c21e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	685a      	ldr	r2, [r3, #4]
 800c1ec:	4b0e      	ldr	r3, [pc, #56]	; (800c228 <vPortFree+0xb8>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	43db      	mvns	r3, r3
 800c1f2:	401a      	ands	r2, r3
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c1f8:	f7ff f820 	bl	800b23c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	685a      	ldr	r2, [r3, #4]
 800c200:	4b0a      	ldr	r3, [pc, #40]	; (800c22c <vPortFree+0xbc>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4413      	add	r3, r2
 800c206:	4a09      	ldr	r2, [pc, #36]	; (800c22c <vPortFree+0xbc>)
 800c208:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c20a:	6938      	ldr	r0, [r7, #16]
 800c20c:	f000 f874 	bl	800c2f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c210:	4b07      	ldr	r3, [pc, #28]	; (800c230 <vPortFree+0xc0>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	3301      	adds	r3, #1
 800c216:	4a06      	ldr	r2, [pc, #24]	; (800c230 <vPortFree+0xc0>)
 800c218:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c21a:	f7ff f81d 	bl	800b258 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c21e:	bf00      	nop
 800c220:	3718      	adds	r7, #24
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	20010438 	.word	0x20010438
 800c22c:	20010428 	.word	0x20010428
 800c230:	20010434 	.word	0x20010434

0800c234 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c234:	b480      	push	{r7}
 800c236:	b085      	sub	sp, #20
 800c238:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c23a:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 800c23e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c240:	4b27      	ldr	r3, [pc, #156]	; (800c2e0 <prvHeapInit+0xac>)
 800c242:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f003 0307 	and.w	r3, r3, #7
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d00c      	beq.n	800c268 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	3307      	adds	r3, #7
 800c252:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f023 0307 	bic.w	r3, r3, #7
 800c25a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c25c:	68ba      	ldr	r2, [r7, #8]
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	1ad3      	subs	r3, r2, r3
 800c262:	4a1f      	ldr	r2, [pc, #124]	; (800c2e0 <prvHeapInit+0xac>)
 800c264:	4413      	add	r3, r2
 800c266:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c26c:	4a1d      	ldr	r2, [pc, #116]	; (800c2e4 <prvHeapInit+0xb0>)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c272:	4b1c      	ldr	r3, [pc, #112]	; (800c2e4 <prvHeapInit+0xb0>)
 800c274:	2200      	movs	r2, #0
 800c276:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	68ba      	ldr	r2, [r7, #8]
 800c27c:	4413      	add	r3, r2
 800c27e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c280:	2208      	movs	r2, #8
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	1a9b      	subs	r3, r3, r2
 800c286:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f023 0307 	bic.w	r3, r3, #7
 800c28e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	4a15      	ldr	r2, [pc, #84]	; (800c2e8 <prvHeapInit+0xb4>)
 800c294:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c296:	4b14      	ldr	r3, [pc, #80]	; (800c2e8 <prvHeapInit+0xb4>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	2200      	movs	r2, #0
 800c29c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c29e:	4b12      	ldr	r3, [pc, #72]	; (800c2e8 <prvHeapInit+0xb4>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	68fa      	ldr	r2, [r7, #12]
 800c2ae:	1ad2      	subs	r2, r2, r3
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c2b4:	4b0c      	ldr	r3, [pc, #48]	; (800c2e8 <prvHeapInit+0xb4>)
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	4a0a      	ldr	r2, [pc, #40]	; (800c2ec <prvHeapInit+0xb8>)
 800c2c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	4a09      	ldr	r2, [pc, #36]	; (800c2f0 <prvHeapInit+0xbc>)
 800c2ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c2cc:	4b09      	ldr	r3, [pc, #36]	; (800c2f4 <prvHeapInit+0xc0>)
 800c2ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c2d2:	601a      	str	r2, [r3, #0]
}
 800c2d4:	bf00      	nop
 800c2d6:	3714      	adds	r7, #20
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr
 800c2e0:	20000a1c 	.word	0x20000a1c
 800c2e4:	2001041c 	.word	0x2001041c
 800c2e8:	20010424 	.word	0x20010424
 800c2ec:	2001042c 	.word	0x2001042c
 800c2f0:	20010428 	.word	0x20010428
 800c2f4:	20010438 	.word	0x20010438

0800c2f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c300:	4b28      	ldr	r3, [pc, #160]	; (800c3a4 <prvInsertBlockIntoFreeList+0xac>)
 800c302:	60fb      	str	r3, [r7, #12]
 800c304:	e002      	b.n	800c30c <prvInsertBlockIntoFreeList+0x14>
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	60fb      	str	r3, [r7, #12]
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	429a      	cmp	r2, r3
 800c314:	d8f7      	bhi.n	800c306 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	68ba      	ldr	r2, [r7, #8]
 800c320:	4413      	add	r3, r2
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	429a      	cmp	r2, r3
 800c326:	d108      	bne.n	800c33a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	685a      	ldr	r2, [r3, #4]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	441a      	add	r2, r3
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	68ba      	ldr	r2, [r7, #8]
 800c344:	441a      	add	r2, r3
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d118      	bne.n	800c380 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	4b15      	ldr	r3, [pc, #84]	; (800c3a8 <prvInsertBlockIntoFreeList+0xb0>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	429a      	cmp	r2, r3
 800c358:	d00d      	beq.n	800c376 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	685a      	ldr	r2, [r3, #4]
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	441a      	add	r2, r3
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	601a      	str	r2, [r3, #0]
 800c374:	e008      	b.n	800c388 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c376:	4b0c      	ldr	r3, [pc, #48]	; (800c3a8 <prvInsertBlockIntoFreeList+0xb0>)
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	601a      	str	r2, [r3, #0]
 800c37e:	e003      	b.n	800c388 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c388:	68fa      	ldr	r2, [r7, #12]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d002      	beq.n	800c396 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c396:	bf00      	nop
 800c398:	3714      	adds	r7, #20
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	2001041c 	.word	0x2001041c
 800c3a8:	20010424 	.word	0x20010424

0800c3ac <__libc_init_array>:
 800c3ac:	b570      	push	{r4, r5, r6, lr}
 800c3ae:	4d0d      	ldr	r5, [pc, #52]	; (800c3e4 <__libc_init_array+0x38>)
 800c3b0:	4c0d      	ldr	r4, [pc, #52]	; (800c3e8 <__libc_init_array+0x3c>)
 800c3b2:	1b64      	subs	r4, r4, r5
 800c3b4:	10a4      	asrs	r4, r4, #2
 800c3b6:	2600      	movs	r6, #0
 800c3b8:	42a6      	cmp	r6, r4
 800c3ba:	d109      	bne.n	800c3d0 <__libc_init_array+0x24>
 800c3bc:	4d0b      	ldr	r5, [pc, #44]	; (800c3ec <__libc_init_array+0x40>)
 800c3be:	4c0c      	ldr	r4, [pc, #48]	; (800c3f0 <__libc_init_array+0x44>)
 800c3c0:	f000 f8f0 	bl	800c5a4 <_init>
 800c3c4:	1b64      	subs	r4, r4, r5
 800c3c6:	10a4      	asrs	r4, r4, #2
 800c3c8:	2600      	movs	r6, #0
 800c3ca:	42a6      	cmp	r6, r4
 800c3cc:	d105      	bne.n	800c3da <__libc_init_array+0x2e>
 800c3ce:	bd70      	pop	{r4, r5, r6, pc}
 800c3d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3d4:	4798      	blx	r3
 800c3d6:	3601      	adds	r6, #1
 800c3d8:	e7ee      	b.n	800c3b8 <__libc_init_array+0xc>
 800c3da:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3de:	4798      	blx	r3
 800c3e0:	3601      	adds	r6, #1
 800c3e2:	e7f2      	b.n	800c3ca <__libc_init_array+0x1e>
 800c3e4:	0800c910 	.word	0x0800c910
 800c3e8:	0800c910 	.word	0x0800c910
 800c3ec:	0800c910 	.word	0x0800c910
 800c3f0:	0800c914 	.word	0x0800c914

0800c3f4 <memcpy>:
 800c3f4:	440a      	add	r2, r1
 800c3f6:	4291      	cmp	r1, r2
 800c3f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3fc:	d100      	bne.n	800c400 <memcpy+0xc>
 800c3fe:	4770      	bx	lr
 800c400:	b510      	push	{r4, lr}
 800c402:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c406:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c40a:	4291      	cmp	r1, r2
 800c40c:	d1f9      	bne.n	800c402 <memcpy+0xe>
 800c40e:	bd10      	pop	{r4, pc}

0800c410 <memset>:
 800c410:	4402      	add	r2, r0
 800c412:	4603      	mov	r3, r0
 800c414:	4293      	cmp	r3, r2
 800c416:	d100      	bne.n	800c41a <memset+0xa>
 800c418:	4770      	bx	lr
 800c41a:	f803 1b01 	strb.w	r1, [r3], #1
 800c41e:	e7f9      	b.n	800c414 <memset+0x4>

0800c420 <_free_r>:
 800c420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c422:	2900      	cmp	r1, #0
 800c424:	d044      	beq.n	800c4b0 <_free_r+0x90>
 800c426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c42a:	9001      	str	r0, [sp, #4]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	f1a1 0404 	sub.w	r4, r1, #4
 800c432:	bfb8      	it	lt
 800c434:	18e4      	addlt	r4, r4, r3
 800c436:	f000 f8a9 	bl	800c58c <__malloc_lock>
 800c43a:	4a1e      	ldr	r2, [pc, #120]	; (800c4b4 <_free_r+0x94>)
 800c43c:	9801      	ldr	r0, [sp, #4]
 800c43e:	6813      	ldr	r3, [r2, #0]
 800c440:	b933      	cbnz	r3, 800c450 <_free_r+0x30>
 800c442:	6063      	str	r3, [r4, #4]
 800c444:	6014      	str	r4, [r2, #0]
 800c446:	b003      	add	sp, #12
 800c448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c44c:	f000 b8a4 	b.w	800c598 <__malloc_unlock>
 800c450:	42a3      	cmp	r3, r4
 800c452:	d908      	bls.n	800c466 <_free_r+0x46>
 800c454:	6825      	ldr	r5, [r4, #0]
 800c456:	1961      	adds	r1, r4, r5
 800c458:	428b      	cmp	r3, r1
 800c45a:	bf01      	itttt	eq
 800c45c:	6819      	ldreq	r1, [r3, #0]
 800c45e:	685b      	ldreq	r3, [r3, #4]
 800c460:	1949      	addeq	r1, r1, r5
 800c462:	6021      	streq	r1, [r4, #0]
 800c464:	e7ed      	b.n	800c442 <_free_r+0x22>
 800c466:	461a      	mov	r2, r3
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	b10b      	cbz	r3, 800c470 <_free_r+0x50>
 800c46c:	42a3      	cmp	r3, r4
 800c46e:	d9fa      	bls.n	800c466 <_free_r+0x46>
 800c470:	6811      	ldr	r1, [r2, #0]
 800c472:	1855      	adds	r5, r2, r1
 800c474:	42a5      	cmp	r5, r4
 800c476:	d10b      	bne.n	800c490 <_free_r+0x70>
 800c478:	6824      	ldr	r4, [r4, #0]
 800c47a:	4421      	add	r1, r4
 800c47c:	1854      	adds	r4, r2, r1
 800c47e:	42a3      	cmp	r3, r4
 800c480:	6011      	str	r1, [r2, #0]
 800c482:	d1e0      	bne.n	800c446 <_free_r+0x26>
 800c484:	681c      	ldr	r4, [r3, #0]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	6053      	str	r3, [r2, #4]
 800c48a:	4421      	add	r1, r4
 800c48c:	6011      	str	r1, [r2, #0]
 800c48e:	e7da      	b.n	800c446 <_free_r+0x26>
 800c490:	d902      	bls.n	800c498 <_free_r+0x78>
 800c492:	230c      	movs	r3, #12
 800c494:	6003      	str	r3, [r0, #0]
 800c496:	e7d6      	b.n	800c446 <_free_r+0x26>
 800c498:	6825      	ldr	r5, [r4, #0]
 800c49a:	1961      	adds	r1, r4, r5
 800c49c:	428b      	cmp	r3, r1
 800c49e:	bf04      	itt	eq
 800c4a0:	6819      	ldreq	r1, [r3, #0]
 800c4a2:	685b      	ldreq	r3, [r3, #4]
 800c4a4:	6063      	str	r3, [r4, #4]
 800c4a6:	bf04      	itt	eq
 800c4a8:	1949      	addeq	r1, r1, r5
 800c4aa:	6021      	streq	r1, [r4, #0]
 800c4ac:	6054      	str	r4, [r2, #4]
 800c4ae:	e7ca      	b.n	800c446 <_free_r+0x26>
 800c4b0:	b003      	add	sp, #12
 800c4b2:	bd30      	pop	{r4, r5, pc}
 800c4b4:	2001043c 	.word	0x2001043c

0800c4b8 <cleanup_glue>:
 800c4b8:	b538      	push	{r3, r4, r5, lr}
 800c4ba:	460c      	mov	r4, r1
 800c4bc:	6809      	ldr	r1, [r1, #0]
 800c4be:	4605      	mov	r5, r0
 800c4c0:	b109      	cbz	r1, 800c4c6 <cleanup_glue+0xe>
 800c4c2:	f7ff fff9 	bl	800c4b8 <cleanup_glue>
 800c4c6:	4621      	mov	r1, r4
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4ce:	f7ff bfa7 	b.w	800c420 <_free_r>
	...

0800c4d4 <_reclaim_reent>:
 800c4d4:	4b2c      	ldr	r3, [pc, #176]	; (800c588 <_reclaim_reent+0xb4>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4283      	cmp	r3, r0
 800c4da:	b570      	push	{r4, r5, r6, lr}
 800c4dc:	4604      	mov	r4, r0
 800c4de:	d051      	beq.n	800c584 <_reclaim_reent+0xb0>
 800c4e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c4e2:	b143      	cbz	r3, 800c4f6 <_reclaim_reent+0x22>
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d14a      	bne.n	800c580 <_reclaim_reent+0xac>
 800c4ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4ec:	6819      	ldr	r1, [r3, #0]
 800c4ee:	b111      	cbz	r1, 800c4f6 <_reclaim_reent+0x22>
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	f7ff ff95 	bl	800c420 <_free_r>
 800c4f6:	6961      	ldr	r1, [r4, #20]
 800c4f8:	b111      	cbz	r1, 800c500 <_reclaim_reent+0x2c>
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	f7ff ff90 	bl	800c420 <_free_r>
 800c500:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c502:	b111      	cbz	r1, 800c50a <_reclaim_reent+0x36>
 800c504:	4620      	mov	r0, r4
 800c506:	f7ff ff8b 	bl	800c420 <_free_r>
 800c50a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c50c:	b111      	cbz	r1, 800c514 <_reclaim_reent+0x40>
 800c50e:	4620      	mov	r0, r4
 800c510:	f7ff ff86 	bl	800c420 <_free_r>
 800c514:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c516:	b111      	cbz	r1, 800c51e <_reclaim_reent+0x4a>
 800c518:	4620      	mov	r0, r4
 800c51a:	f7ff ff81 	bl	800c420 <_free_r>
 800c51e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c520:	b111      	cbz	r1, 800c528 <_reclaim_reent+0x54>
 800c522:	4620      	mov	r0, r4
 800c524:	f7ff ff7c 	bl	800c420 <_free_r>
 800c528:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c52a:	b111      	cbz	r1, 800c532 <_reclaim_reent+0x5e>
 800c52c:	4620      	mov	r0, r4
 800c52e:	f7ff ff77 	bl	800c420 <_free_r>
 800c532:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c534:	b111      	cbz	r1, 800c53c <_reclaim_reent+0x68>
 800c536:	4620      	mov	r0, r4
 800c538:	f7ff ff72 	bl	800c420 <_free_r>
 800c53c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c53e:	b111      	cbz	r1, 800c546 <_reclaim_reent+0x72>
 800c540:	4620      	mov	r0, r4
 800c542:	f7ff ff6d 	bl	800c420 <_free_r>
 800c546:	69a3      	ldr	r3, [r4, #24]
 800c548:	b1e3      	cbz	r3, 800c584 <_reclaim_reent+0xb0>
 800c54a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c54c:	4620      	mov	r0, r4
 800c54e:	4798      	blx	r3
 800c550:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c552:	b1b9      	cbz	r1, 800c584 <_reclaim_reent+0xb0>
 800c554:	4620      	mov	r0, r4
 800c556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c55a:	f7ff bfad 	b.w	800c4b8 <cleanup_glue>
 800c55e:	5949      	ldr	r1, [r1, r5]
 800c560:	b941      	cbnz	r1, 800c574 <_reclaim_reent+0xa0>
 800c562:	3504      	adds	r5, #4
 800c564:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c566:	2d80      	cmp	r5, #128	; 0x80
 800c568:	68d9      	ldr	r1, [r3, #12]
 800c56a:	d1f8      	bne.n	800c55e <_reclaim_reent+0x8a>
 800c56c:	4620      	mov	r0, r4
 800c56e:	f7ff ff57 	bl	800c420 <_free_r>
 800c572:	e7ba      	b.n	800c4ea <_reclaim_reent+0x16>
 800c574:	680e      	ldr	r6, [r1, #0]
 800c576:	4620      	mov	r0, r4
 800c578:	f7ff ff52 	bl	800c420 <_free_r>
 800c57c:	4631      	mov	r1, r6
 800c57e:	e7ef      	b.n	800c560 <_reclaim_reent+0x8c>
 800c580:	2500      	movs	r5, #0
 800c582:	e7ef      	b.n	800c564 <_reclaim_reent+0x90>
 800c584:	bd70      	pop	{r4, r5, r6, pc}
 800c586:	bf00      	nop
 800c588:	20000050 	.word	0x20000050

0800c58c <__malloc_lock>:
 800c58c:	4801      	ldr	r0, [pc, #4]	; (800c594 <__malloc_lock+0x8>)
 800c58e:	f7f7 b8c8 	b.w	8003722 <__retarget_lock_acquire_recursive>
 800c592:	bf00      	nop
 800c594:	200008d8 	.word	0x200008d8

0800c598 <__malloc_unlock>:
 800c598:	4801      	ldr	r0, [pc, #4]	; (800c5a0 <__malloc_unlock+0x8>)
 800c59a:	f7f7 b8d6 	b.w	800374a <__retarget_lock_release_recursive>
 800c59e:	bf00      	nop
 800c5a0:	200008d8 	.word	0x200008d8

0800c5a4 <_init>:
 800c5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5a6:	bf00      	nop
 800c5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5aa:	bc08      	pop	{r3}
 800c5ac:	469e      	mov	lr, r3
 800c5ae:	4770      	bx	lr

0800c5b0 <_fini>:
 800c5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b2:	bf00      	nop
 800c5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5b6:	bc08      	pop	{r3}
 800c5b8:	469e      	mov	lr, r3
 800c5ba:	4770      	bx	lr
